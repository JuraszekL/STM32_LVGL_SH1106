
08_OLED_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026570  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007870  08026768  08026768  00036768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802dfd8  0802dfd8  00040030  2**0
                  CONTENTS
  4 .ARM          00000008  0802dfd8  0802dfd8  0003dfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802dfe0  0802dfe0  00040030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802dfe0  0802dfe0  0003dfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802dfe4  0802dfe4  0003dfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0802dfe8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca5c  20000030  0802e018  00040030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ca8c  0802e018  0004ca8c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00078651  00000000  00000000  0004005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d8d1  00000000  00000000  000b86af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003ca0  00000000  00000000  000c5f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003b78  00000000  00000000  000c9c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a11c  00000000  00000000  000cd798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00065346  00000000  00000000  001078b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110350  00000000  00000000  0016cbfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0027cf4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fc2c  00000000  00000000  0027cf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	08026750 	.word	0x08026750

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	08026750 	.word	0x08026750

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 b974 	b.w	800055c <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468e      	mov	lr, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14d      	bne.n	8000336 <__udivmoddi4+0xaa>
 800029a:	428a      	cmp	r2, r1
 800029c:	4694      	mov	ip, r2
 800029e:	d969      	bls.n	8000374 <__udivmoddi4+0xe8>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b152      	cbz	r2, 80002bc <__udivmoddi4+0x30>
 80002a6:	fa01 f302 	lsl.w	r3, r1, r2
 80002aa:	f1c2 0120 	rsb	r1, r2, #32
 80002ae:	fa20 f101 	lsr.w	r1, r0, r1
 80002b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b6:	ea41 0e03 	orr.w	lr, r1, r3
 80002ba:	4094      	lsls	r4, r2
 80002bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c0:	0c21      	lsrs	r1, r4, #16
 80002c2:	fbbe f6f8 	udiv	r6, lr, r8
 80002c6:	fa1f f78c 	uxth.w	r7, ip
 80002ca:	fb08 e316 	mls	r3, r8, r6, lr
 80002ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002d2:	fb06 f107 	mul.w	r1, r6, r7
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e2:	f080 811f 	bcs.w	8000524 <__udivmoddi4+0x298>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 811c 	bls.w	8000524 <__udivmoddi4+0x298>
 80002ec:	3e02      	subs	r6, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f8:	fb08 3310 	mls	r3, r8, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 f707 	mul.w	r7, r0, r7
 8000304:	42a7      	cmp	r7, r4
 8000306:	d90a      	bls.n	800031e <__udivmoddi4+0x92>
 8000308:	eb1c 0404 	adds.w	r4, ip, r4
 800030c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000310:	f080 810a 	bcs.w	8000528 <__udivmoddi4+0x29c>
 8000314:	42a7      	cmp	r7, r4
 8000316:	f240 8107 	bls.w	8000528 <__udivmoddi4+0x29c>
 800031a:	4464      	add	r4, ip
 800031c:	3802      	subs	r0, #2
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	1be4      	subs	r4, r4, r7
 8000324:	2600      	movs	r6, #0
 8000326:	b11d      	cbz	r5, 8000330 <__udivmoddi4+0xa4>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c5 4300 	strd	r4, r3, [r5]
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0xc2>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80ef 	beq.w	800051e <__udivmoddi4+0x292>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x160>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xd4>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80f9 	bhi.w	8000552 <__udivmoddi4+0x2c6>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0303 	sbc.w	r3, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	469e      	mov	lr, r3
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0e0      	beq.n	8000330 <__udivmoddi4+0xa4>
 800036e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000372:	e7dd      	b.n	8000330 <__udivmoddi4+0xa4>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xec>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	2a00      	cmp	r2, #0
 800037e:	f040 8092 	bne.w	80004a6 <__udivmoddi4+0x21a>
 8000382:	eba1 010c 	sub.w	r1, r1, ip
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2601      	movs	r6, #1
 8000390:	0c20      	lsrs	r0, r4, #16
 8000392:	fbb1 f3f7 	udiv	r3, r1, r7
 8000396:	fb07 1113 	mls	r1, r7, r3, r1
 800039a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039e:	fb0e f003 	mul.w	r0, lr, r3
 80003a2:	4288      	cmp	r0, r1
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x12c>
 80003a6:	eb1c 0101 	adds.w	r1, ip, r1
 80003aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x12a>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2c0>
 80003b6:	4643      	mov	r3, r8
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c0:	fb07 1110 	mls	r1, r7, r0, r1
 80003c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x156>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x154>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2ca>
 80003e0:	4608      	mov	r0, r1
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ea:	e79c      	b.n	8000326 <__udivmoddi4+0x9a>
 80003ec:	f1c6 0720 	rsb	r7, r6, #32
 80003f0:	40b3      	lsls	r3, r6
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa20 f407 	lsr.w	r4, r0, r7
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	431c      	orrs	r4, r3
 8000404:	40f9      	lsrs	r1, r7
 8000406:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040a:	fa00 f306 	lsl.w	r3, r0, r6
 800040e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000412:	0c20      	lsrs	r0, r4, #16
 8000414:	fa1f fe8c 	uxth.w	lr, ip
 8000418:	fb09 1118 	mls	r1, r9, r8, r1
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	fb08 f00e 	mul.w	r0, r8, lr
 8000424:	4288      	cmp	r0, r1
 8000426:	fa02 f206 	lsl.w	r2, r2, r6
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b8>
 800042c:	eb1c 0101 	adds.w	r1, ip, r1
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2bc>
 8000438:	4288      	cmp	r0, r1
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2bc>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4461      	add	r1, ip
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f9 	udiv	r0, r1, r9
 800044c:	fb09 1110 	mls	r1, r9, r0, r1
 8000450:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000454:	fb00 fe0e 	mul.w	lr, r0, lr
 8000458:	458e      	cmp	lr, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1e2>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2b4>
 8000466:	458e      	cmp	lr, r1
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2b4>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000472:	fba0 9402 	umull	r9, r4, r0, r2
 8000476:	eba1 010e 	sub.w	r1, r1, lr
 800047a:	42a1      	cmp	r1, r4
 800047c:	46c8      	mov	r8, r9
 800047e:	46a6      	mov	lr, r4
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x2a4>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x2a0>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x212>
 8000486:	ebb3 0208 	subs.w	r2, r3, r8
 800048a:	eb61 010e 	sbc.w	r1, r1, lr
 800048e:	fa01 f707 	lsl.w	r7, r1, r7
 8000492:	fa22 f306 	lsr.w	r3, r2, r6
 8000496:	40f1      	lsrs	r1, r6
 8000498:	431f      	orrs	r7, r3
 800049a:	e9c5 7100 	strd	r7, r1, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	40d8      	lsrs	r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa21 f303 	lsr.w	r3, r1, r3
 80004b4:	4091      	lsls	r1, r2
 80004b6:	4301      	orrs	r1, r0
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c4:	fb07 3610 	mls	r6, r7, r0, r3
 80004c8:	0c0b      	lsrs	r3, r1, #16
 80004ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ce:	fb00 f60e 	mul.w	r6, r0, lr
 80004d2:	429e      	cmp	r6, r3
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x260>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b8>
 80004e4:	429e      	cmp	r6, r3
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b8>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1b9b      	subs	r3, r3, r6
 80004ee:	b289      	uxth	r1, r1
 80004f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004f4:	fb07 3316 	mls	r3, r7, r6, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb06 f30e 	mul.w	r3, r6, lr
 8000500:	428b      	cmp	r3, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x28a>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2b0>
 800050e:	428b      	cmp	r3, r1
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2b0>
 8000512:	3e02      	subs	r6, #2
 8000514:	4461      	add	r1, ip
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0x104>
 800051e:	462e      	mov	r6, r5
 8000520:	4628      	mov	r0, r5
 8000522:	e705      	b.n	8000330 <__udivmoddi4+0xa4>
 8000524:	4606      	mov	r6, r0
 8000526:	e6e3      	b.n	80002f0 <__udivmoddi4+0x64>
 8000528:	4618      	mov	r0, r3
 800052a:	e6f8      	b.n	800031e <__udivmoddi4+0x92>
 800052c:	454b      	cmp	r3, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f8>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000538:	3801      	subs	r0, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f8>
 800053c:	4646      	mov	r6, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x28a>
 8000540:	4620      	mov	r0, r4
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1e2>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x260>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b8>
 800054c:	3b02      	subs	r3, #2
 800054e:	4461      	add	r1, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x12c>
 8000552:	4630      	mov	r0, r6
 8000554:	e709      	b.n	800036a <__udivmoddi4+0xde>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x156>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <MX_GPIO_Init+0xdc>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <MX_GPIO_Init+0xdc>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_GPIO_Init+0xdc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_GPIO_Init+0xdc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <MX_GPIO_Init+0xdc>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_GPIO_Init+0xdc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0xdc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <MX_GPIO_Init+0xdc>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_GPIO_Init+0xdc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xdc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <MX_GPIO_Init+0xe0>)
 80005f6:	f001 f873 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_GPIO_Init+0xe4>)
 8000612:	f000 feb9 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000616:	f244 0381 	movw	r3, #16513	; 0x4081
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0xe0>)
 8000630:	f000 feaa 	bl	8001388 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40020800 	.word	0x40020800

08000648 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_I2C1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_I2C1_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_I2C1_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_I2C1_Init+0x74>)
 8000684:	f001 f846 	bl	8001714 <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 fa6d 	bl	8000b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_I2C1_Init+0x74>)
 8000696:	f001 fc27 	bl	8001ee8 <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 fa64 	bl	8000b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2C1_Init+0x74>)
 80006a8:	f001 fc69 	bl	8001f7e <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 fa5b 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000004c 	.word	0x2000004c
 80006c0:	40005400 	.word	0x40005400
 80006c4:	2010091a 	.word	0x2010091a

080006c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0ae      	sub	sp, #184	; 0xb8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2290      	movs	r2, #144	; 0x90
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f026 f821 	bl	8026730 <memset>
  if(i2cHandle->Instance==I2C1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a22      	ldr	r2, [pc, #136]	; (800077c <HAL_I2C_MspInit+0xb4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d13c      	bne.n	8000772 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006fe:	2300      	movs	r3, #0
 8000700:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f9ba 	bl	8002a80 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000712:	f000 fa2b 	bl	8000b6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000736:	2312      	movs	r3, #18
 8000738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000748:	2304      	movs	r3, #4
 800074a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <HAL_I2C_MspInit+0xbc>)
 8000756:	f000 fe17 	bl	8001388 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	37b8      	adds	r7, #184	; 0xb8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40005400 	.word	0x40005400
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <lv_port_disp_init>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_disp_t * lv_port_disp_init(I2C_HandleTypeDef *I2C){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    /*-------------------------
     * Initialize your display
     * -----------------------*/
    disp_init(I2C);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f831 	bl	80007f8 <disp_init>
     */

    /* Example for 1) */
    static lv_disp_draw_buf_t draw_buf_dsc_1;
    static lv_color_t buf_1[MY_DISP_HOR_RES * 10];                          /*A buffer for 10 rows*/
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/
 8000796:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800079a:	2200      	movs	r2, #0
 800079c:	4910      	ldr	r1, [pc, #64]	; (80007e0 <lv_port_disp_init+0x58>)
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <lv_port_disp_init+0x5c>)
 80007a0:	f01f f9da 	bl	801fb58 <lv_disp_draw_buf_init>
    /*-----------------------------------
     * Register the display in LVGL
     *----------------------------------*/

    static lv_disp_drv_t disp_drv;                         /*Descriptor of a display driver*/
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <lv_port_disp_init+0x60>)
 80007a6:	f01f f993 	bl	801fad0 <lv_disp_drv_init>

    /*Set up the functions to access to your display*/

    /*Set the resolution of the display*/
    disp_drv.hor_res = MY_DISP_HOR_RES;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <lv_port_disp_init+0x60>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	801a      	strh	r2, [r3, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <lv_port_disp_init+0x60>)
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	805a      	strh	r2, [r3, #2]

    /*Used to copy the buffer's content to the display*/
    disp_drv.flush_cb = disp_flush;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <lv_port_disp_init+0x60>)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <lv_port_disp_init+0x64>)
 80007ba:	615a      	str	r2, [r3, #20]
    disp_drv.set_px_cb = set_px_cb;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <lv_port_disp_init+0x60>)
 80007be:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <lv_port_disp_init+0x68>)
 80007c0:	61da      	str	r2, [r3, #28]
    disp_drv.rounder_cb = rounder_cb;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <lv_port_disp_init+0x60>)
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <lv_port_disp_init+0x6c>)
 80007c6:	619a      	str	r2, [r3, #24]

    /*Set a display buffer*/
    disp_drv.draw_buf = &draw_buf_dsc_1;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <lv_port_disp_init+0x60>)
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <lv_port_disp_init+0x5c>)
 80007cc:	60da      	str	r2, [r3, #12]
     * Note that, in lv_conf.h you can enable GPUs that has built-in support in LVGL.
     * But if you have a different GPU you can use with this callback.*/
    //disp_drv.gpu_fill_cb = gpu_fill;

    /*Finally register the driver*/
    return lv_disp_drv_register(&disp_drv);
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <lv_port_disp_init+0x60>)
 80007d0:	f01f f9de 	bl	801fb90 <lv_disp_drv_register>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000bc 	.word	0x200000bc
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	200005bc 	.word	0x200005bc
 80007ec:	08000811 	.word	0x08000811
 80007f0:	08000869 	.word	0x08000869
 80007f4:	080008fd 	.word	0x080008fd

080007f8 <disp_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

/*Initialize your display and the required peripherals.*/
static void disp_init(I2C_HandleTypeDef *i2c){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

	SH1106_HwInit(i2c);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 fa43 	bl	8000c8c <SH1106_HwInit>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af02      	add	r7, sp, #8
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
    if(disp_flush_enabled) {
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <disp_flush+0x54>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d016      	beq.n	8000854 <disp_flush+0x44>
        /*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/

    	uint8_t *buff = (uint8_t *)color_p;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	617b      	str	r3, [r7, #20]
    	SH1106_Send(area->x1, area->x2, area->y1, area->y2, buff);
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000830:	b2d8      	uxtb	r0, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000848:	b2dc      	uxtb	r4, r3
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	4623      	mov	r3, r4
 8000850:	f000 fa64 	bl	8000d1c <SH1106_Send>
    }

    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
    lv_disp_flush_ready(disp_drv);
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f01f fad7 	bl	801fe08 <lv_disp_flush_ready>
}
 800085a:	bf00      	nop
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000

08000868 <set_px_cb>:



static void set_px_cb(struct _lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
        				lv_color_t color, lv_opa_t opa){
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	460b      	mov	r3, r1
 8000878:	80fb      	strh	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	80bb      	strh	r3, [r7, #4]

	uint16_t byte_index = x + ((y / 8) * buf_w);
 800087e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da00      	bge.n	8000888 <set_px_cb+0x20>
 8000886:	3307      	adds	r3, #7
 8000888:	10db      	asrs	r3, r3, #3
 800088a:	b21b      	sxth	r3, r3
 800088c:	b29a      	uxth	r2, r3
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	fb12 f303 	smulbb	r3, r2, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	82fb      	strh	r3, [r7, #22]
	uint8_t  bit_index  = y & 0x7;
 800089c:	8c3b      	ldrh	r3, [r7, #32]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	757b      	strb	r3, [r7, #21]

	// == 0 inverts, so we get blue on black
	if(color.full == 0){
 80008a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10f      	bne.n	80008ce <set_px_cb+0x66>

		BIT_SET( buf[byte_index], bit_index);
 80008ae:	8afb      	ldrh	r3, [r7, #22]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	4413      	add	r3, r2
 80008b4:	7819      	ldrb	r1, [r3, #0]
 80008b6:	7d7b      	ldrb	r3, [r7, #21]
 80008b8:	2201      	movs	r2, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	8afb      	ldrh	r3, [r7, #22]
 80008c2:	68b8      	ldr	r0, [r7, #8]
 80008c4:	4403      	add	r3, r0
 80008c6:	430a      	orrs	r2, r1
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	701a      	strb	r2, [r3, #0]
	}
	else{

		BIT_CLEAR( buf[byte_index], bit_index);
	}
}
 80008cc:	e010      	b.n	80008f0 <set_px_cb+0x88>
		BIT_CLEAR( buf[byte_index], bit_index);
 80008ce:	8afb      	ldrh	r3, [r7, #22]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	2201      	movs	r2, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	68b8      	ldr	r0, [r7, #8]
 80008e8:	4403      	add	r3, r0
 80008ea:	400a      	ands	r2, r1
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <rounder_cb>:


static void rounder_cb(struct _lv_disp_drv_t * disp_drv, lv_area_t * area){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]

	area->y1 = (area->y1 & (~0x7));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800090c:	f023 0307 	bic.w	r3, r3, #7
 8000910:	b21a      	sxth	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	805a      	strh	r2, [r3, #2]
	area->y2 = ((area->y2 & (~0x7)) + 7);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800091c:	b29b      	uxth	r3, r3
 800091e:	f023 0307 	bic.w	r3, r3, #7
 8000922:	b29b      	uxth	r3, r3
 8000924:	3307      	adds	r3, #7
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	80da      	strh	r2, [r3, #6]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <lv_timer_handler_run_in_period>:
 * with a given period in ms. You can use it with sleep or delay in OS environment.
 * This function is used to simplify the porting.
 * @param __ms the period for running lv_timer_handler()
 */
static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler_run_in_period(uint32_t ms)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    uint32_t curr_tick = lv_tick_get();
 8000944:	f01f fab0 	bl	801fea8 <lv_tick_get>
 8000948:	60f8      	str	r0, [r7, #12]

    if((curr_tick - last_tick) >= (ms)) {
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <lv_timer_handler_run_in_period+0x34>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	d806      	bhi.n	8000966 <lv_timer_handler_run_in_period+0x2a>
        last_tick = curr_tick;
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <lv_timer_handler_run_in_period+0x34>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6013      	str	r3, [r2, #0]
        return lv_timer_handler();
 800095e:	f022 fc3f 	bl	80231e0 <lv_timer_handler>
 8000962:	4603      	mov	r3, r0
 8000964:	e000      	b.n	8000968 <lv_timer_handler_run_in_period+0x2c>
    }
    return 1;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000614 	.word	0x20000614

08000974 <lv_scr_load>:
{
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    lv_disp_load_scr(scr);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f003 fd11 	bl	80043a4 <lv_disp_load_scr>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fb8a 	bl	80010aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f865 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f7ff fde1 	bl	8000560 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800099e:	f000 facb 	bl	8000f38 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80009a2:	f7ff fe51 	bl	8000648 <MX_I2C1_Init>
  MX_TIM6_Init();
 80009a6:	f000 fa6b 	bl	8000e80 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  lv_init();
 80009aa:	f005 f9b7 	bl	8005d1c <lv_init>
  lv_port_disp_init(&hi2c1);
 80009ae:	4826      	ldr	r0, [pc, #152]	; (8000a48 <main+0xbc>)
 80009b0:	f7ff feea 	bl	8000788 <lv_port_disp_init>
  HAL_TIM_Base_Start_IT(&htim6);
 80009b4:	4825      	ldr	r0, [pc, #148]	; (8000a4c <main+0xc0>)
 80009b6:	f002 fce3 	bl	8003380 <HAL_TIM_Base_Start_IT>

  lv_obj_t *scr = lv_obj_create(NULL);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f005 fa00 	bl	8005dc0 <lv_obj_create>
 80009c0:	6178      	str	r0, [r7, #20]
  lv_style_t style_1;
  lv_style_init(&style_1);
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4618      	mov	r0, r3
 80009c6:	f021 ffff 	bl	80229c8 <lv_style_init>
  lv_obj_add_style(scr, &style_1, LV_PART_MAIN);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	6978      	ldr	r0, [r7, #20]
 80009d2:	f00b fd55 	bl	800c480 <lv_obj_add_style>

  lv_obj_t *label = lv_label_create(scr);
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f024 fb36 	bl	8025048 <lv_label_create>
 80009dc:	6138      	str	r0, [r7, #16]
  lv_label_set_text(label, "Hello");
 80009de:	491c      	ldr	r1, [pc, #112]	; (8000a50 <main+0xc4>)
 80009e0:	6938      	ldr	r0, [r7, #16]
 80009e2:	f024 fb45 	bl	8025070 <lv_label_set_text>
//  lv_obj_set_pos(label, 20, 20);
  lv_scr_load(scr);
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ffc4 	bl	8000974 <lv_scr_load>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  lv_timer_handler_run_in_period(5);
 80009ec:	2005      	movs	r0, #5
 80009ee:	f7ff ffa5 	bl	800093c <lv_timer_handler_run_in_period>


	  if(HAL_GetTick() > (tick + 500)){
 80009f2:	f000 fbab 	bl	800114c <HAL_GetTick>
 80009f6:	4602      	mov	r2, r0
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <main+0xc8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d9f3      	bls.n	80009ec <main+0x60>

		  if(a){
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <main+0xcc>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00b      	beq.n	8000a24 <main+0x98>

			  lv_style_set_text_font(&style_1, &lv_font_montserrat_24);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4913      	ldr	r1, [pc, #76]	; (8000a5c <main+0xd0>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f022 fbc7 	bl	80231a4 <lv_style_set_text_font>
			  a = 0;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <main+0xcc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
			  lv_scr_load(scr);
 8000a1c:	6978      	ldr	r0, [r7, #20]
 8000a1e:	f7ff ffa9 	bl	8000974 <lv_scr_load>
 8000a22:	e00a      	b.n	8000a3a <main+0xae>
		  }
		  else{

			  lv_style_set_text_font(&style_1, &lv_font_unscii_8);
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <main+0xd4>)
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f022 fbbb 	bl	80231a4 <lv_style_set_text_font>
			  a = 1;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <main+0xcc>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
			  lv_scr_load(scr);
 8000a34:	6978      	ldr	r0, [r7, #20]
 8000a36:	f7ff ff9d 	bl	8000974 <lv_scr_load>
		  }


		  tick = HAL_GetTick();
 8000a3a:	f000 fb87 	bl	800114c <HAL_GetTick>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <main+0xc8>)
 8000a42:	6013      	str	r3, [r2, #0]
	  lv_timer_handler_run_in_period(5);
 8000a44:	e7d2      	b.n	80009ec <main+0x60>
 8000a46:	bf00      	nop
 8000a48:	2000004c 	.word	0x2000004c
 8000a4c:	2000061c 	.word	0x2000061c
 8000a50:	08026768 	.word	0x08026768
 8000a54:	2000060c 	.word	0x2000060c
 8000a58:	20000610 	.word	0x20000610
 8000a5c:	0802d92c 	.word	0x0802d92c
 8000a60:	0802de64 	.word	0x0802de64

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	; 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2234      	movs	r2, #52	; 0x34
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f025 fe5c 	bl	8026730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a88:	f001 fac6 	bl	8002018 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <SystemClock_Config+0xe0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <SystemClock_Config+0xe0>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemClock_Config+0xe0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ac8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ad8:	2360      	movs	r3, #96	; 0x60
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 faf3 	bl	80020d8 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000af8:	f000 f838 	bl	8000b6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000afc:	f001 fa9c 	bl	8002038 <HAL_PWREx_EnableOverDrive>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b06:	f000 f831 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2103      	movs	r1, #3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fd84 	bl	8002634 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b32:	f000 f81b 	bl	8000b6c <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d102      	bne.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x18>

		lv_tick_inc(1);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f01f f98c 	bl	801fe78 <lv_tick_inc>
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40001000 	.word	0x40001000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <sh1106_cmd>:
/*********************************************************************************/
							// Low level I2C functions //
/*********************************************************************************/


static void sh1106_cmd(uint8_t cmd){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af04      	add	r7, sp, #16
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]

//	i2c_write_byte(SH1106_ADR, SH1106_CMD, cmd, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_CMD, 1, &cmd, 1, SH1106_TIMEOUT_MS);
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <sh1106_cmd+0x2c>)
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	2364      	movs	r3, #100	; 0x64
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	2301      	movs	r3, #1
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	2178      	movs	r1, #120	; 0x78
 8000b98:	f000 fe4c 	bl	8001834 <HAL_I2C_Mem_Write>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000618 	.word	0x20000618

08000ba8 <sh1106_multi_cmd>:

static void sh1106_multi_cmd(uint8_t *cmd, uint8_t len){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_CMD, cmd, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_CMD, 1, cmd, len, SH1106_TIMEOUT_MS);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <sh1106_multi_cmd+0x30>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	2264      	movs	r2, #100	; 0x64
 8000bbe:	9202      	str	r2, [sp, #8]
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2178      	movs	r1, #120	; 0x78
 8000bcc:	f000 fe32 	bl	8001834 <HAL_I2C_Mem_Write>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000618 	.word	0x20000618

08000bdc <sh1106_multi_data>:

static void sh1106_multi_data(uint8_t *data, uint8_t len){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_DATA, data, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_DATA, 1, data, len, SH1106_TIMEOUT_MS);
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <sh1106_multi_data+0x30>)
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	2264      	movs	r2, #100	; 0x64
 8000bf2:	9202      	str	r2, [sp, #8]
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	2178      	movs	r1, #120	; 0x78
 8000c00:	f000 fe18 	bl	8001834 <HAL_I2C_Mem_Write>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000618 	.word	0x20000618

08000c10 <sh1106_set_col>:

/*********************************************************************************/
								// Basic functions //
/*********************************************************************************/

static void sh1106_set_col(uint8_t col){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]

	if(col > (HORIZONTAL_RES - 1)) return;
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db16      	blt.n	8000c50 <sh1106_set_col+0x40>

	uint8_t buff[2];

	buff[0] = ((col + SH1106_OFFSET) & 0b00001111) | SET_L_COL_ADDR;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	3302      	adds	r3, #2
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f003 030f 	and.w	r3, r3, #15
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	733b      	strb	r3, [r7, #12]
	buff[1] = ((col + SH1106_OFFSET) >> 4) | SET_H_COL_ADDR;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3302      	adds	r3, #2
 8000c34:	111b      	asrs	r3, r3, #4
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	737b      	strb	r3, [r7, #13]

	sh1106_multi_cmd(buff, 2);
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2102      	movs	r1, #2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ffad 	bl	8000ba8 <sh1106_multi_cmd>
 8000c4e:	e000      	b.n	8000c52 <sh1106_set_col+0x42>
	if(col > (HORIZONTAL_RES - 1)) return;
 8000c50:	bf00      	nop
}
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <sh1106_set_page>:

static void sh1106_set_page(uint8_t page){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]

	if(page > (PAGES - 1)) return;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d80d      	bhi.n	8000c84 <sh1106_set_page+0x2c>

	uint8_t a = (page & 0b00000111) | SET_PAGE_ADDR;
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	73fb      	strb	r3, [r7, #15]

	sh1106_cmd(a);
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff7b 	bl	8000b78 <sh1106_cmd>
 8000c82:	e000      	b.n	8000c86 <sh1106_set_page+0x2e>
	if(page > (PAGES - 1)) return;
 8000c84:	bf00      	nop
}
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <SH1106_HwInit>:

							// oled initialization //

/*********************************************************************************/

void SH1106_HwInit(I2C_HandleTypeDef *i2c){
 8000c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c90:	b087      	sub	sp, #28
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	466b      	mov	r3, sp
 8000c98:	461e      	mov	r6, r3

	sh1106_i2c = i2c;
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <SH1106_HwInit+0x88>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]

	uint8_t a = sizeof(init_commands);
 8000ca0:	2317      	movs	r3, #23
 8000ca2:	75fb      	strb	r3, [r7, #23]
	uint8_t tab[a];
 8000ca4:	7df9      	ldrb	r1, [r7, #23]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	b2cb      	uxtb	r3, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	4691      	mov	r9, r2
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cc8:	b2cb      	uxtb	r3, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	461c      	mov	r4, r3
 8000cce:	4615      	mov	r5, r2
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	00eb      	lsls	r3, r5, #3
 8000cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cde:	00e2      	lsls	r2, r4, #3
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	3307      	adds	r3, #7
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	ebad 0d03 	sub.w	sp, sp, r3
 8000cec:	466b      	mov	r3, sp
 8000cee:	3300      	adds	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]

	memcpy(tab, init_commands, a);
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <SH1106_HwInit+0x8c>)
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f025 fd0b 	bl	8026714 <memcpy>

	sh1106_multi_cmd(tab, a);
 8000cfe:	7dfb      	ldrb	r3, [r7, #23]
 8000d00:	4619      	mov	r1, r3
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff ff50 	bl	8000ba8 <sh1106_multi_cmd>
 8000d08:	46b5      	mov	sp, r6
}
 8000d0a:	bf00      	nop
 8000d0c:	371c      	adds	r7, #28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d14:	20000618 	.word	0x20000618
 8000d18:	080267ac 	.word	0x080267ac

08000d1c <SH1106_Send>:
				// Y1 and Y2 have to be (multiplication of 8) -1 //
				// f.e. 0, 7, 15 etc.

/*********************************************************************************/

void SH1106_Send(uint8_t X1, uint8_t X2, uint8_t Y1, uint8_t Y2, uint8_t *Buff){
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71bb      	strb	r3, [r7, #6]
 8000d32:	460b      	mov	r3, r1
 8000d34:	717b      	strb	r3, [r7, #5]
 8000d36:	4613      	mov	r3, r2
 8000d38:	713b      	strb	r3, [r7, #4]

	uint8_t xPixels = X2 - X1 + 1;
 8000d3a:	79ba      	ldrb	r2, [r7, #6]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	3301      	adds	r3, #1
 8000d44:	73bb      	strb	r3, [r7, #14]

	uint8_t firstPage = (Y1 / 8);
 8000d46:	797b      	ldrb	r3, [r7, #5]
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	737b      	strb	r3, [r7, #13]
	uint8_t lastPage = (Y2 / 8);
 8000d4c:	793b      	ldrb	r3, [r7, #4]
 8000d4e:	08db      	lsrs	r3, r3, #3
 8000d50:	733b      	strb	r3, [r7, #12]
	uint8_t pages = lastPage - firstPage + 1;
 8000d52:	7b3a      	ldrb	r2, [r7, #12]
 8000d54:	7b7b      	ldrb	r3, [r7, #13]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	72fb      	strb	r3, [r7, #11]

	for(uint8_t a = 0; a < pages; a++){
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e019      	b.n	8000d98 <SH1106_Send+0x7c>

		sh1106_set_page(a + firstPage);
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	7b7b      	ldrb	r3, [r7, #13]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff73 	bl	8000c58 <sh1106_set_page>
		sh1106_set_col(X1);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff4b 	bl	8000c10 <sh1106_set_col>
		sh1106_multi_data(&Buff[a * xPixels], xPixels);
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	7bba      	ldrb	r2, [r7, #14]
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	461a      	mov	r2, r3
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	4413      	add	r3, r2
 8000d88:	7bba      	ldrb	r2, [r7, #14]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff25 	bl	8000bdc <sh1106_multi_data>
	for(uint8_t a = 0; a < pages; a++){
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3e1      	bcc.n	8000d64 <SH1106_Send+0x48>
	}
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd90      	pop	{r4, r7, pc}
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_MspInit+0x44>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x44>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f970 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM6_DAC_IRQHandler+0x10>)
 8000e4e:	f002 fb0f 	bl	8003470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000061c 	.word	0x2000061c

08000e5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_TIM6_Init+0x64>)
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <MX_TIM6_Init+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_TIM6_Init+0x64>)
 8000e98:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000e9c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_TIM6_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_TIM6_Init+0x64>)
 8000ea6:	2263      	movs	r2, #99	; 0x63
 8000ea8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_TIM6_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM6_Init+0x64>)
 8000eb2:	f002 fa0d 	bl	80032d0 <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ebc:	f7ff fe56 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_TIM6_Init+0x64>)
 8000ece:	f002 fcb7 	bl	8003840 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ed8:	f7ff fe48 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000061c 	.word	0x2000061c
 8000ee8:	40001000 	.word	0x40001000

08000eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_TIM_Base_MspInit+0x44>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d113      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_TIM_Base_MspInit+0x48>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2036      	movs	r0, #54	; 0x36
 8000f1c:	f000 f9fd 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f20:	2036      	movs	r0, #54	; 0x36
 8000f22:	f000 fa16 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000
 8000f34:	40023800 	.word	0x40023800

08000f38 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_USART3_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f7c:	f002 fd0c 	bl	8003998 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f7ff fdf1 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000668 	.word	0x20000668
 8000f94:	40004800 	.word	0x40004800

08000f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ae      	sub	sp, #184	; 0xb8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2290      	movs	r2, #144	; 0x90
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f025 fbb9 	bl	8026730 <memset>
  if(uartHandle->Instance==USART3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a22      	ldr	r2, [pc, #136]	; (800104c <HAL_UART_MspInit+0xb4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d13c      	bne.n	8001042 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fd52 	bl	8002a80 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fe2:	f7ff fdc3 	bl	8000b6c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_UART_MspInit+0xb8>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_UART_MspInit+0xb8>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_UART_MspInit+0xb8>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_MspInit+0xb8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_UART_MspInit+0xb8>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0xb8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001030:	2307      	movs	r3, #7
 8001032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001036:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_UART_MspInit+0xbc>)
 800103e:	f000 f9a3 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	37b8      	adds	r7, #184	; 0xb8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004800 	.word	0x40004800
 8001050:	40023800 	.word	0x40023800
 8001054:	40020c00 	.word	0x40020c00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001082:	f7ff feeb 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f025 fb21 	bl	80266cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fc7f 	bl	800098c <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800109c:	0802dfe8 	.word	0x0802dfe8
  ldr r2, =_sbss
 80010a0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80010a4:	2000ca8c 	.word	0x2000ca8c

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>

080010aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f000 f928 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 f805 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ba:	f7ff fe77 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f943 	bl	800136e <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001100:	f000 f90b 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000004 	.word	0x20000004
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20000008 	.word	0x20000008

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000000c 	.word	0x2000000c
 8001148:	200006f0 	.word	0x200006f0

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200006f0 	.word	0x200006f0

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	4313      	orrs	r3, r2
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	05fa0000 	.word	0x05fa0000

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff3e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff8e 	bl	8001258 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5d 	bl	8001204 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff31 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa2 	bl	80012c0 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e175      	b.n	8001694 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 8164 	bne.w	800168e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <HAL_GPIO_Init+0x56>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d130      	bne.n	8001440 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b03      	cmp	r3, #3
 800144a:	d017      	beq.n	800147c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	69b9      	ldr	r1, [r7, #24]
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80be 	beq.w	800168e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b66      	ldr	r3, [pc, #408]	; (80016ac <HAL_GPIO_Init+0x324>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a65      	ldr	r2, [pc, #404]	; (80016ac <HAL_GPIO_Init+0x324>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_GPIO_Init+0x324>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800152a:	4a61      	ldr	r2, [pc, #388]	; (80016b0 <HAL_GPIO_Init+0x328>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_GPIO_Init+0x32c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d037      	beq.n	80015c6 <HAL_GPIO_Init+0x23e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a57      	ldr	r2, [pc, #348]	; (80016b8 <HAL_GPIO_Init+0x330>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d031      	beq.n	80015c2 <HAL_GPIO_Init+0x23a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a56      	ldr	r2, [pc, #344]	; (80016bc <HAL_GPIO_Init+0x334>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x236>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <HAL_GPIO_Init+0x338>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x232>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_GPIO_Init+0x33c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x22e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a53      	ldr	r2, [pc, #332]	; (80016c8 <HAL_GPIO_Init+0x340>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x22a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_GPIO_Init+0x344>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x226>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a51      	ldr	r2, [pc, #324]	; (80016d0 <HAL_GPIO_Init+0x348>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x222>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a50      	ldr	r2, [pc, #320]	; (80016d4 <HAL_GPIO_Init+0x34c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x21e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	; (80016d8 <HAL_GPIO_Init+0x350>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x21a>
 800159e:	2309      	movs	r3, #9
 80015a0:	e012      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015a2:	230a      	movs	r3, #10
 80015a4:	e010      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015a6:	2308      	movs	r3, #8
 80015a8:	e00e      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e00c      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015ae:	2306      	movs	r3, #6
 80015b0:	e00a      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015d8:	4935      	ldr	r1, [pc, #212]	; (80016b0 <HAL_GPIO_Init+0x328>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_GPIO_Init+0x354>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160a:	4a34      	ldr	r2, [pc, #208]	; (80016dc <HAL_GPIO_Init+0x354>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001610:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_GPIO_Init+0x354>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001634:	4a29      	ldr	r2, [pc, #164]	; (80016dc <HAL_GPIO_Init+0x354>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_GPIO_Init+0x354>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_GPIO_Init+0x354>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_GPIO_Init+0x354>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <HAL_GPIO_Init+0x354>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f ae86 	bls.w	80013a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40021c00 	.word	0x40021c00
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40022400 	.word	0x40022400
 80016dc:	40013c00 	.word	0x40013c00

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016fc:	e003      	b.n	8001706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d106      	bne.n	8001740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe ffc4 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2224      	movs	r2, #36	; 0x24
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001764:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001774:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e006      	b.n	800179c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800179a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d104      	bne.n	80017ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_I2C_Init+0x11c>)
 80017ba:	430b      	orrs	r3, r1
 80017bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69d9      	ldr	r1, [r3, #28]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2220      	movs	r2, #32
 8001812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	02008000 	.word	0x02008000

08001834 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	817b      	strh	r3, [r7, #10]
 8001846:	460b      	mov	r3, r1
 8001848:	813b      	strh	r3, [r7, #8]
 800184a:	4613      	mov	r3, r2
 800184c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b20      	cmp	r3, #32
 8001858:	f040 80f9 	bne.w	8001a4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_I2C_Mem_Write+0x34>
 8001862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0ed      	b.n	8001a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_I2C_Mem_Write+0x4e>
 800187e:	2302      	movs	r3, #2
 8001880:	e0e6      	b.n	8001a50 <HAL_I2C_Mem_Write+0x21c>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800188a:	f7ff fc5f 	bl	800114c <HAL_GetTick>
 800188e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2319      	movs	r3, #25
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f955 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d1      	b.n	8001a50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2221      	movs	r2, #33	; 0x21
 80018b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2240      	movs	r2, #64	; 0x40
 80018b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a3a      	ldr	r2, [r7, #32]
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018d4:	88f8      	ldrh	r0, [r7, #6]
 80018d6:	893a      	ldrh	r2, [r7, #8]
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4603      	mov	r3, r0
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f8b9 	bl	8001a5c <I2C_RequestMemoryWrite>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0a9      	b.n	8001a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	2bff      	cmp	r3, #255	; 0xff
 8001904:	d90e      	bls.n	8001924 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	22ff      	movs	r2, #255	; 0xff
 800190a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001910:	b2da      	uxtb	r2, r3
 8001912:	8979      	ldrh	r1, [r7, #10]
 8001914:	2300      	movs	r3, #0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 fab1 	bl	8001e84 <I2C_TransferConfig>
 8001922:	e00f      	b.n	8001944 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	b2da      	uxtb	r2, r3
 8001934:	8979      	ldrh	r1, [r7, #10]
 8001936:	2300      	movs	r3, #0
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 faa0 	bl	8001e84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 f93f 	bl	8001bcc <I2C_WaitOnTXISFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e07b      	b.n	8001a50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d034      	beq.n	80019fc <HAL_I2C_Mem_Write+0x1c8>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d130      	bne.n	80019fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	2200      	movs	r2, #0
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f8d1 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e04d      	b.n	8001a50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	d90e      	bls.n	80019dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	8979      	ldrh	r1, [r7, #10]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fa55 	bl	8001e84 <I2C_TransferConfig>
 80019da:	e00f      	b.n	80019fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	8979      	ldrh	r1, [r7, #10]
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fa44 	bl	8001e84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d19e      	bne.n	8001944 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f91e 	bl	8001c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e01a      	b.n	8001a50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_I2C_Mem_Write+0x224>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	fe00e800 	.word	0xfe00e800

08001a5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	817b      	strh	r3, [r7, #10]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	813b      	strh	r3, [r7, #8]
 8001a72:	4613      	mov	r3, r2
 8001a74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	8979      	ldrh	r1, [r7, #10]
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <I2C_RequestMemoryWrite+0xa4>)
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f9fd 	bl	8001e84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	69b9      	ldr	r1, [r7, #24]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f89c 	bl	8001bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e02c      	b.n	8001af8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aa4:	893b      	ldrh	r3, [r7, #8]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
 8001aae:	e015      	b.n	8001adc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ab0:	893b      	ldrh	r3, [r7, #8]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f882 	bl	8001bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e012      	b.n	8001af8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ad2:	893b      	ldrh	r3, [r7, #8]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f830 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	80002000 	.word	0x80002000

08001b04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d103      	bne.n	8001b22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d007      	beq.n	8001b40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	619a      	str	r2, [r3, #24]
  }
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b5c:	e022      	b.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b64:	d01e      	beq.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b66:	f7ff faf1 	bl	800114c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d302      	bcc.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d113      	bne.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e00f      	b.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699a      	ldr	r2, [r3, #24]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4013      	ands	r3, r2
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d0cd      	beq.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd8:	e02c      	b.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f870 	bl	8001cc4 <I2C_IsErrorOccurred>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e02a      	b.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf4:	d01e      	beq.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7ff faa9 	bl	800114c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d302      	bcc.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d113      	bne.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d1cb      	bne.n	8001bda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c58:	e028      	b.n	8001cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f830 	bl	8001cc4 <I2C_IsErrorOccurred>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e026      	b.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6e:	f7ff fa6d 	bl	800114c <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d302      	bcc.n	8001c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d113      	bne.n	8001cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	f043 0220 	orr.w	r2, r3, #32
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e007      	b.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d1cf      	bne.n	8001c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d068      	beq.n	8001dc2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cf8:	e049      	b.n	8001d8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d00:	d045      	beq.n	8001d8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d02:	f7ff fa23 	bl	800114c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d302      	bcc.n	8001d18 <I2C_IsErrorOccurred+0x54>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d13a      	bne.n	8001d8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d3a:	d121      	bne.n	8001d80 <I2C_IsErrorOccurred+0xbc>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d42:	d01d      	beq.n	8001d80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d44:	7cfb      	ldrb	r3, [r7, #19]
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d01a      	beq.n	8001d80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d5a:	f7ff f9f7 	bl	800114c <HAL_GetTick>
 8001d5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d60:	e00e      	b.n	8001d80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d62:	f7ff f9f3 	bl	800114c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b19      	cmp	r3, #25
 8001d6e:	d907      	bls.n	8001d80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f043 0320 	orr.w	r3, r3, #32
 8001d76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001d7e:	e006      	b.n	8001d8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d1e9      	bne.n	8001d62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d003      	beq.n	8001da4 <I2C_IsErrorOccurred+0xe0>
 8001d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0aa      	beq.n	8001cfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2220      	movs	r2, #32
 8001db2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00b      	beq.n	8001dec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01c      	beq.n	8001e72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff fe63 	bl	8001b04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <I2C_IsErrorOccurred+0x1bc>)
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	fe00e800 	.word	0xfe00e800

08001e84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	817b      	strh	r3, [r7, #10]
 8001e92:	4613      	mov	r3, r2
 8001e94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e9c:	7a7b      	ldrb	r3, [r7, #9]
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ea4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eb2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	0d5b      	lsrs	r3, r3, #21
 8001ebe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <I2C_TransferConfig+0x60>)
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	ea02 0103 	and.w	r1, r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	03ff63ff 	.word	0x03ff63ff

08001ee8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d138      	bne.n	8001f70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e032      	b.n	8001f72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2224      	movs	r2, #36	; 0x24
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d139      	bne.n	8002008 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e033      	b.n	800200a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2224      	movs	r2, #36	; 0x24
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002008:	2302      	movs	r3, #2
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40007000 	.word	0x40007000

08002038 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002066:	f7ff f871 	bl	800114c <HAL_GetTick>
 800206a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800206c:	e009      	b.n	8002082 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800206e:	f7ff f86d 	bl	800114c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800207c:	d901      	bls.n	8002082 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e022      	b.n	80020c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208e:	d1ee      	bne.n	800206e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800209c:	f7ff f856 	bl	800114c <HAL_GetTick>
 80020a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020a2:	e009      	b.n	80020b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020a4:	f7ff f852 	bl	800114c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b2:	d901      	bls.n	80020b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e007      	b.n	80020c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020c4:	d1ee      	bne.n	80020a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e29b      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8087 	beq.w	800220a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020fc:	4b96      	ldr	r3, [pc, #600]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00c      	beq.n	8002122 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002108:	4b93      	ldr	r3, [pc, #588]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d112      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
 8002114:	4b90      	ldr	r3, [pc, #576]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002120:	d10b      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002122:	4b8d      	ldr	r3, [pc, #564]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06c      	beq.n	8002208 <HAL_RCC_OscConfig+0x130>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d168      	bne.n	8002208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e275      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x7a>
 8002144:	4b84      	ldr	r3, [pc, #528]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a83      	ldr	r2, [pc, #524]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e02e      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x9c>
 800215a:	4b7f      	ldr	r3, [pc, #508]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7e      	ldr	r2, [pc, #504]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b7c      	ldr	r3, [pc, #496]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7b      	ldr	r2, [pc, #492]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0xc0>
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b73      	ldr	r3, [pc, #460]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a72      	ldr	r2, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002198:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6e      	ldr	r2, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6b      	ldr	r2, [pc, #428]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe ffc8 	bl	800114c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe ffc4 	bl	800114c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e229      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b61      	ldr	r3, [pc, #388]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe8>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe ffb4 	bl	800114c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe ffb0 	bl	800114c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e215      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b57      	ldr	r3, [pc, #348]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x110>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d069      	beq.n	80022ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002216:	4b50      	ldr	r3, [pc, #320]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x190>
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1e9      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	493d      	ldr	r1, [pc, #244]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e040      	b.n	80022ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b39      	ldr	r3, [pc, #228]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a38      	ldr	r2, [pc, #224]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ff66 	bl	800114c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe ff62 	bl	800114c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1c7      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b30      	ldr	r3, [pc, #192]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4929      	ldr	r1, [pc, #164]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
 80022b6:	e018      	b.n	80022ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a26      	ldr	r2, [pc, #152]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe ff42 	bl	800114c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022cc:	f7fe ff3e 	bl	800114c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1a3      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d038      	beq.n	8002368 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d019      	beq.n	8002332 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7fe ff1f 	bl	800114c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7fe ff1b 	bl	800114c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e180      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x23a>
 8002330:	e01a      	b.n	8002368 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_RCC_OscConfig+0x280>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe ff05 	bl	800114c <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002346:	f7fe ff01 	bl	800114c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d903      	bls.n	800235c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e166      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
 8002358:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a4 	beq.w	80024be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b8c      	ldr	r3, [pc, #560]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4b89      	ldr	r3, [pc, #548]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a88      	ldr	r2, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b86      	ldr	r3, [pc, #536]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4b83      	ldr	r3, [pc, #524]	; (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023aa:	4b80      	ldr	r3, [pc, #512]	; (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7f      	ldr	r2, [pc, #508]	; (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fec9 	bl	800114c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe fec5 	bl	800114c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e12a      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d0:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x31a>
 80023e4:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a6f      	ldr	r2, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	e02d      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x33c>
 80023fa:	4b6b      	ldr	r3, [pc, #428]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a67      	ldr	r2, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	e01c      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x35e>
 800241c:	4b62      	ldr	r3, [pc, #392]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a61      	ldr	r2, [pc, #388]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
 8002428:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	4a5e      	ldr	r2, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	; 0x70
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 8002436:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a5b      	ldr	r2, [pc, #364]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
 8002442:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe fe79 	bl	800114c <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fe75 	bl	800114c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0d8      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCC_OscConfig+0x386>
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fe63 	bl	800114c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fe5f 	bl	800114c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0c2      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a3c      	ldr	r2, [pc, #240]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80ae 	beq.w	8002624 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d06d      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d14b      	bne.n	8002574 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fe30 	bl	800114c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fe2c 	bl	800114c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e091      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	071b      	lsls	r3, r3, #28
 800253a:	491b      	ldr	r1, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fdfe 	bl	800114c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fdfa 	bl	800114c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e05f      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x47c>
 8002572:	e057      	b.n	8002624 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe fde4 	bl	800114c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fde0 	bl	800114c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e045      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x4b0>
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x54c>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_RCC_OscConfig+0x558>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d030      	beq.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d129      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d122      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d119      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d10f      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0d0      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 020f 	bic.w	r2, r3, #15
 8002662:	4965      	ldr	r1, [pc, #404]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d040      	beq.n	8002758 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e073      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4936      	ldr	r1, [pc, #216]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fd10 	bl	800114c <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fd0c 	bl	800114c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e053      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d210      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 020f 	bic.w	r2, r3, #15
 800276e:	4922      	ldr	r1, [pc, #136]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1d4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fc6c 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	080267c4 	.word	0x080267c4
 8002804:	20000004 	.word	0x20000004
 8002808:	20000008 	.word	0x20000008

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b094      	sub	sp, #80	; 0x50
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	647b      	str	r3, [r7, #68]	; 0x44
 8002818:	2300      	movs	r3, #0
 800281a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800281c:	2300      	movs	r3, #0
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d00d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 80e1 	bhi.w	80029f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x3a>
 800283e:	e0db      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002842:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002844:	e0db      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002846:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002848:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800284a:	e0d8      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284c:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002854:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002856:	4b6d      	ldr	r3, [pc, #436]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d063      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	2200      	movs	r2, #0
 800286a:	63bb      	str	r3, [r7, #56]	; 0x38
 800286c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
 8002876:	2300      	movs	r3, #0
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
 800287a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800287e:	4622      	mov	r2, r4
 8002880:	462b      	mov	r3, r5
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	0159      	lsls	r1, r3, #5
 800288c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002890:	0150      	lsls	r0, r2, #5
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4621      	mov	r1, r4
 8002898:	1a51      	subs	r1, r2, r1
 800289a:	6139      	str	r1, [r7, #16]
 800289c:	4629      	mov	r1, r5
 800289e:	eb63 0301 	sbc.w	r3, r3, r1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b0:	4659      	mov	r1, fp
 80028b2:	018b      	lsls	r3, r1, #6
 80028b4:	4651      	mov	r1, sl
 80028b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ba:	4651      	mov	r1, sl
 80028bc:	018a      	lsls	r2, r1, #6
 80028be:	4651      	mov	r1, sl
 80028c0:	ebb2 0801 	subs.w	r8, r2, r1
 80028c4:	4659      	mov	r1, fp
 80028c6:	eb63 0901 	sbc.w	r9, r3, r1
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028de:	4690      	mov	r8, r2
 80028e0:	4699      	mov	r9, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	eb18 0303 	adds.w	r3, r8, r3
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	462b      	mov	r3, r5
 80028ec:	eb49 0303 	adc.w	r3, r9, r3
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028fe:	4629      	mov	r1, r5
 8002900:	024b      	lsls	r3, r1, #9
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002908:	4621      	mov	r1, r4
 800290a:	024a      	lsls	r2, r1, #9
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002912:	2200      	movs	r2, #0
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
 8002916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800291c:	f7fd fc9e 	bl	800025c <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002928:	e058      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	2200      	movs	r2, #0
 8002932:	4618      	mov	r0, r3
 8002934:	4611      	mov	r1, r2
 8002936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
 8002940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	f04f 0000 	mov.w	r0, #0
 800294c:	f04f 0100 	mov.w	r1, #0
 8002950:	0159      	lsls	r1, r3, #5
 8002952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002956:	0150      	lsls	r0, r2, #5
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4641      	mov	r1, r8
 800295e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002962:	4649      	mov	r1, r9
 8002964:	eb63 0b01 	sbc.w	fp, r3, r1
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800297c:	ebb2 040a 	subs.w	r4, r2, sl
 8002980:	eb63 050b 	sbc.w	r5, r3, fp
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	00eb      	lsls	r3, r5, #3
 800298e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002992:	00e2      	lsls	r2, r4, #3
 8002994:	4614      	mov	r4, r2
 8002996:	461d      	mov	r5, r3
 8002998:	4643      	mov	r3, r8
 800299a:	18e3      	adds	r3, r4, r3
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	464b      	mov	r3, r9
 80029a0:	eb45 0303 	adc.w	r3, r5, r3
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029b2:	4629      	mov	r1, r5
 80029b4:	028b      	lsls	r3, r1, #10
 80029b6:	4621      	mov	r1, r4
 80029b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029bc:	4621      	mov	r1, r4
 80029be:	028a      	lsls	r2, r1, #10
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c6:	2200      	movs	r2, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	61fa      	str	r2, [r7, #28]
 80029cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d0:	f7fd fc44 	bl	800025c <__aeabi_uldivmod>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4613      	mov	r3, r2
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f6:	e002      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80029fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3750      	adds	r7, #80	; 0x50
 8002a04:	46bd      	mov	sp, r7
 8002a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	007a1200 	.word	0x007a1200

08002a18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000004 	.word	0x20000004

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a9b      	lsrs	r3, r3, #10
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40023800 	.word	0x40023800
 8002a54:	080267d4 	.word	0x080267d4

08002a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a5c:	f7ff ffdc 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0b5b      	lsrs	r3, r3, #13
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	; (8002a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	080267d4 	.word	0x080267d4

08002a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d012      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002aa8:	4b69      	ldr	r3, [pc, #420]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a68      	ldr	r2, [pc, #416]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ab2:	6093      	str	r3, [r2, #8]
 8002ab4:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	4964      	ldr	r1, [pc, #400]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d017      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ada:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	4959      	ldr	r1, [pc, #356]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af8:	d101      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d017      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	494a      	ldr	r1, [pc, #296]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b34:	d101      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 808b 	beq.w	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a39      	ldr	r2, [pc, #228]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b7c:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a34      	ldr	r2, [pc, #208]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b88:	f7fe fae0 	bl	800114c <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7fe fadc 	bl	800114c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e38f      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ba2:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d035      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d02e      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bee:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bf4:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d114      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe faa4 	bl	800114c <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe faa0 	bl	800114c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e351      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ee      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c36:	d111      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c46:	400b      	ands	r3, r1
 8002c48:	4901      	ldr	r1, [pc, #4]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40007000 	.word	0x40007000
 8002c58:	0ffffcff 	.word	0x0ffffcff
 8002c5c:	4bac      	ldr	r3, [pc, #688]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4aab      	ldr	r2, [pc, #684]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c66:	6093      	str	r3, [r2, #8]
 8002c68:	4ba9      	ldr	r3, [pc, #676]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	49a6      	ldr	r1, [pc, #664]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c86:	4ba2      	ldr	r3, [pc, #648]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8c:	4aa0      	ldr	r2, [pc, #640]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c96:	4b9e      	ldr	r3, [pc, #632]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	499b      	ldr	r1, [pc, #620]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cb4:	4b96      	ldr	r3, [pc, #600]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc2:	4993      	ldr	r1, [pc, #588]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cd6:	4b8e      	ldr	r3, [pc, #568]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce4:	498a      	ldr	r1, [pc, #552]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cf8:	4b85      	ldr	r3, [pc, #532]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d06:	4982      	ldr	r1, [pc, #520]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d1a:	4b7d      	ldr	r3, [pc, #500]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4979      	ldr	r1, [pc, #484]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3c:	4b74      	ldr	r3, [pc, #464]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	4971      	ldr	r1, [pc, #452]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d5e:	4b6c      	ldr	r3, [pc, #432]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f023 020c 	bic.w	r2, r3, #12
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6c:	4968      	ldr	r1, [pc, #416]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d80:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	4960      	ldr	r1, [pc, #384]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002da2:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db0:	4957      	ldr	r1, [pc, #348]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dc4:	4b52      	ldr	r3, [pc, #328]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	494f      	ldr	r1, [pc, #316]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	4946      	ldr	r1, [pc, #280]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e08:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	493e      	ldr	r1, [pc, #248]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e2a:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e38:	4935      	ldr	r1, [pc, #212]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e4c:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5a:	492d      	ldr	r1, [pc, #180]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d011      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7c:	4924      	ldr	r1, [pc, #144]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebc:	4914      	ldr	r1, [pc, #80]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee0:	490b      	ldr	r1, [pc, #44]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00f      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f04:	4902      	ldr	r1, [pc, #8]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f0c:	e002      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f20:	4b8a      	ldr	r3, [pc, #552]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	4986      	ldr	r1, [pc, #536]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f44:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f54:	497d      	ldr	r1, [pc, #500]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d006      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80d6 	beq.w	800311c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f70:	4b76      	ldr	r3, [pc, #472]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a75      	ldr	r2, [pc, #468]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fe f8e6 	bl	800114c <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f84:	f7fe f8e2 	bl	800114c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e195      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f96:	4b6d      	ldr	r3, [pc, #436]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d021      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11d      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fb6:	4b65      	ldr	r3, [pc, #404]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fca:	0e1b      	lsrs	r3, r3, #24
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	019a      	lsls	r2, r3, #6
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	4958      	ldr	r1, [pc, #352]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003010:	2b00      	cmp	r3, #0
 8003012:	d02e      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301c:	d129      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800301e:	4b4b      	ldr	r3, [pc, #300]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800302c:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	0f1b      	lsrs	r3, r3, #28
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	019a      	lsls	r2, r3, #6
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	061b      	lsls	r3, r3, #24
 800304c:	431a      	orrs	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	071b      	lsls	r3, r3, #28
 8003052:	493e      	ldr	r1, [pc, #248]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800305a:	4b3c      	ldr	r3, [pc, #240]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003060:	f023 021f 	bic.w	r2, r3, #31
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	3b01      	subs	r3, #1
 800306a:	4938      	ldr	r1, [pc, #224]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01d      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800307e:	4b33      	ldr	r3, [pc, #204]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003084:	0e1b      	lsrs	r3, r3, #24
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800308c:	4b2f      	ldr	r3, [pc, #188]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003092:	0f1b      	lsrs	r3, r3, #28
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	019a      	lsls	r2, r3, #6
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	4926      	ldr	r1, [pc, #152]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d011      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	019a      	lsls	r2, r3, #6
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	071b      	lsls	r3, r3, #28
 80030e2:	491a      	ldr	r1, [pc, #104]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f6:	f7fe f829 	bl	800114c <HAL_GetTick>
 80030fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030fe:	f7fe f825 	bl	800114c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b64      	cmp	r3, #100	; 0x64
 800310a:	d901      	bls.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e0d8      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003110:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b01      	cmp	r3, #1
 8003120:	f040 80ce 	bne.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a08      	ldr	r2, [pc, #32]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003130:	f7fe f80c 	bl	800114c <HAL_GetTick>
 8003134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003136:	e00b      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003138:	f7fe f808 	bl	800114c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d904      	bls.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0bb      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003150:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315c:	d0ec      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800317a:	2b00      	cmp	r3, #0
 800317c:	d02e      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d12a      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003186:	4b51      	ldr	r3, [pc, #324]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003194:	4b4d      	ldr	r3, [pc, #308]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	0f1b      	lsrs	r3, r3, #28
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	019a      	lsls	r2, r3, #6
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	041b      	lsls	r3, r3, #16
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	071b      	lsls	r3, r3, #28
 80031ba:	4944      	ldr	r1, [pc, #272]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031c2:	4b42      	ldr	r3, [pc, #264]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	493d      	ldr	r1, [pc, #244]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d022      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f0:	d11d      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	0e1b      	lsrs	r3, r3, #24
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003200:	4b32      	ldr	r3, [pc, #200]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	0f1b      	lsrs	r3, r3, #28
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	019a      	lsls	r2, r3, #6
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	431a      	orrs	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	071b      	lsls	r3, r3, #28
 8003226:	4929      	ldr	r1, [pc, #164]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d028      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	0e1b      	lsrs	r3, r3, #24
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	019a      	lsls	r2, r3, #6
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4911      	ldr	r1, [pc, #68]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003298:	f7fd ff58 	bl	800114c <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032a0:	f7fd ff54 	bl	800114c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e007      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032be:	d1ef      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e049      	b.n	8003376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fdf8 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 f9f6 	bl	8003700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d001      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e054      	b.n	8003442 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_TIM_Base_Start_IT+0xd0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d022      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x80>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c2:	d01d      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x80>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <HAL_TIM_Base_Start_IT+0xd4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d018      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x80>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <HAL_TIM_Base_Start_IT+0xd8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x80>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1f      	ldr	r2, [pc, #124]	; (800345c <HAL_TIM_Base_Start_IT+0xdc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00e      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x80>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <HAL_TIM_Base_Start_IT+0xe0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x80>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_TIM_Base_Start_IT+0xe4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x80>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_TIM_Base_Start_IT+0xe8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d115      	bne.n	800342c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_TIM_Base_Start_IT+0xec>)
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b06      	cmp	r3, #6
 8003410:	d015      	beq.n	800343e <HAL_TIM_Base_Start_IT+0xbe>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d011      	beq.n	800343e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342a:	e008      	b.n	800343e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e000      	b.n	8003440 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40010000 	.word	0x40010000
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800
 800345c:	40000c00 	.word	0x40000c00
 8003460:	40010400 	.word	0x40010400
 8003464:	40014000 	.word	0x40014000
 8003468:	40001800 	.word	0x40001800
 800346c:	00010007 	.word	0x00010007

08003470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b02      	cmp	r3, #2
 8003484:	d122      	bne.n	80034cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d11b      	bne.n	80034cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0202 	mvn.w	r2, #2
 800349c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f905 	bl	80036c2 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8f7 	bl	80036ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f908 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d122      	bne.n	8003520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d11b      	bne.n	8003520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0204 	mvn.w	r2, #4
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8db 	bl	80036c2 <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8cd 	bl	80036ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f8de 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0208 	mvn.w	r2, #8
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2204      	movs	r2, #4
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8b1 	bl	80036c2 <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8a3 	bl	80036ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8b4 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b10      	cmp	r3, #16
 8003580:	d122      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b10      	cmp	r3, #16
 800358e:	d11b      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0210 	mvn.w	r2, #16
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2208      	movs	r2, #8
 800359e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f887 	bl	80036c2 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f879 	bl	80036ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f88a 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10e      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d107      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0201 	mvn.w	r2, #1
 80035ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd faaa 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d10e      	bne.n	8003620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d107      	bne.n	8003620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f9a8 	bl	8003970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362e:	d10e      	bne.n	800364e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d107      	bne.n	800364e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f99b 	bl	8003984 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d10e      	bne.n	800367a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d107      	bne.n	800367a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f838 	bl	80036ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b20      	cmp	r3, #32
 8003686:	d10e      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d107      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f06f 0220 	mvn.w	r2, #32
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f95b 	bl	800395c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a40      	ldr	r2, [pc, #256]	; (8003814 <TIM_Base_SetConfig+0x114>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371e:	d00f      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3d      	ldr	r2, [pc, #244]	; (8003818 <TIM_Base_SetConfig+0x118>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3c      	ldr	r2, [pc, #240]	; (800381c <TIM_Base_SetConfig+0x11c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <TIM_Base_SetConfig+0x120>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3a      	ldr	r2, [pc, #232]	; (8003824 <TIM_Base_SetConfig+0x124>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d108      	bne.n	8003752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <TIM_Base_SetConfig+0x114>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02b      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d027      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <TIM_Base_SetConfig+0x118>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d023      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2b      	ldr	r2, [pc, #172]	; (800381c <TIM_Base_SetConfig+0x11c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <TIM_Base_SetConfig+0x120>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01b      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a29      	ldr	r2, [pc, #164]	; (8003824 <TIM_Base_SetConfig+0x124>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d017      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a28      	ldr	r2, [pc, #160]	; (8003828 <TIM_Base_SetConfig+0x128>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a27      	ldr	r2, [pc, #156]	; (800382c <TIM_Base_SetConfig+0x12c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00f      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a26      	ldr	r2, [pc, #152]	; (8003830 <TIM_Base_SetConfig+0x130>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a25      	ldr	r2, [pc, #148]	; (8003834 <TIM_Base_SetConfig+0x134>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a24      	ldr	r2, [pc, #144]	; (8003838 <TIM_Base_SetConfig+0x138>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <TIM_Base_SetConfig+0x13c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <TIM_Base_SetConfig+0x114>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_Base_SetConfig+0xf8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <TIM_Base_SetConfig+0x124>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d103      	bne.n	8003800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	615a      	str	r2, [r3, #20]
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40010000 	.word	0x40010000
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40010400 	.word	0x40010400
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400
 8003830:	40014800 	.word	0x40014800
 8003834:	40001800 	.word	0x40001800
 8003838:	40001c00 	.word	0x40001c00
 800383c:	40002000 	.word	0x40002000

08003840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003854:	2302      	movs	r3, #2
 8003856:	e06d      	b.n	8003934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a30      	ldr	r2, [pc, #192]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2f      	ldr	r2, [pc, #188]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d01d      	beq.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a15      	ldr	r2, [pc, #84]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a16      	ldr	r2, [pc, #88]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10c      	bne.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	4313      	orrs	r3, r2
 8003918:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40010000 	.word	0x40010000
 8003944:	40010400 	.word	0x40010400
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40014000 	.word	0x40014000
 8003958:	40001800 	.word	0x40001800

0800395c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e040      	b.n	8003a2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd faec 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	; 0x24
 80039c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f82c 	bl	8003a34 <UART_SetConfig>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e022      	b.n	8003a2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa84 	bl	8003efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fb0b 	bl	8004040 <UART_CheckIdleState>
 8003a2a:	4603      	mov	r3, r0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4ba6      	ldr	r3, [pc, #664]	; (8003cf8 <UART_SetConfig+0x2c4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a94      	ldr	r2, [pc, #592]	; (8003cfc <UART_SetConfig+0x2c8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d120      	bne.n	8003af2 <UART_SetConfig+0xbe>
 8003ab0:	4b93      	ldr	r3, [pc, #588]	; (8003d00 <UART_SetConfig+0x2cc>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d816      	bhi.n	8003aec <UART_SetConfig+0xb8>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <UART_SetConfig+0x90>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003ae1 	.word	0x08003ae1
 8003acc:	08003adb 	.word	0x08003adb
 8003ad0:	08003ae7 	.word	0x08003ae7
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e150      	b.n	8003d7c <UART_SetConfig+0x348>
 8003ada:	2302      	movs	r3, #2
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e14d      	b.n	8003d7c <UART_SetConfig+0x348>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e14a      	b.n	8003d7c <UART_SetConfig+0x348>
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	77fb      	strb	r3, [r7, #31]
 8003aea:	e147      	b.n	8003d7c <UART_SetConfig+0x348>
 8003aec:	2310      	movs	r3, #16
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e144      	b.n	8003d7c <UART_SetConfig+0x348>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a83      	ldr	r2, [pc, #524]	; (8003d04 <UART_SetConfig+0x2d0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d132      	bne.n	8003b62 <UART_SetConfig+0x12e>
 8003afc:	4b80      	ldr	r3, [pc, #512]	; (8003d00 <UART_SetConfig+0x2cc>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d828      	bhi.n	8003b5c <UART_SetConfig+0x128>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <UART_SetConfig+0xdc>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003b5d 	.word	0x08003b5d
 8003b18:	08003b5d 	.word	0x08003b5d
 8003b1c:	08003b5d 	.word	0x08003b5d
 8003b20:	08003b51 	.word	0x08003b51
 8003b24:	08003b5d 	.word	0x08003b5d
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003b5d 	.word	0x08003b5d
 8003b30:	08003b4b 	.word	0x08003b4b
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b5d 	.word	0x08003b5d
 8003b3c:	08003b5d 	.word	0x08003b5d
 8003b40:	08003b57 	.word	0x08003b57
 8003b44:	2300      	movs	r3, #0
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e118      	b.n	8003d7c <UART_SetConfig+0x348>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e115      	b.n	8003d7c <UART_SetConfig+0x348>
 8003b50:	2304      	movs	r3, #4
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e112      	b.n	8003d7c <UART_SetConfig+0x348>
 8003b56:	2308      	movs	r3, #8
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e10f      	b.n	8003d7c <UART_SetConfig+0x348>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e10c      	b.n	8003d7c <UART_SetConfig+0x348>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a68      	ldr	r2, [pc, #416]	; (8003d08 <UART_SetConfig+0x2d4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d120      	bne.n	8003bae <UART_SetConfig+0x17a>
 8003b6c:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <UART_SetConfig+0x2cc>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b76:	2b30      	cmp	r3, #48	; 0x30
 8003b78:	d013      	beq.n	8003ba2 <UART_SetConfig+0x16e>
 8003b7a:	2b30      	cmp	r3, #48	; 0x30
 8003b7c:	d814      	bhi.n	8003ba8 <UART_SetConfig+0x174>
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d009      	beq.n	8003b96 <UART_SetConfig+0x162>
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d810      	bhi.n	8003ba8 <UART_SetConfig+0x174>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <UART_SetConfig+0x15c>
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d006      	beq.n	8003b9c <UART_SetConfig+0x168>
 8003b8e:	e00b      	b.n	8003ba8 <UART_SetConfig+0x174>
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e0f2      	b.n	8003d7c <UART_SetConfig+0x348>
 8003b96:	2302      	movs	r3, #2
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e0ef      	b.n	8003d7c <UART_SetConfig+0x348>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e0ec      	b.n	8003d7c <UART_SetConfig+0x348>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e0e9      	b.n	8003d7c <UART_SetConfig+0x348>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e0e6      	b.n	8003d7c <UART_SetConfig+0x348>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a56      	ldr	r2, [pc, #344]	; (8003d0c <UART_SetConfig+0x2d8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d120      	bne.n	8003bfa <UART_SetConfig+0x1c6>
 8003bb8:	4b51      	ldr	r3, [pc, #324]	; (8003d00 <UART_SetConfig+0x2cc>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003bc4:	d013      	beq.n	8003bee <UART_SetConfig+0x1ba>
 8003bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bc8:	d814      	bhi.n	8003bf4 <UART_SetConfig+0x1c0>
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d009      	beq.n	8003be2 <UART_SetConfig+0x1ae>
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d810      	bhi.n	8003bf4 <UART_SetConfig+0x1c0>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <UART_SetConfig+0x1a8>
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d006      	beq.n	8003be8 <UART_SetConfig+0x1b4>
 8003bda:	e00b      	b.n	8003bf4 <UART_SetConfig+0x1c0>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e0cc      	b.n	8003d7c <UART_SetConfig+0x348>
 8003be2:	2302      	movs	r3, #2
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e0c9      	b.n	8003d7c <UART_SetConfig+0x348>
 8003be8:	2304      	movs	r3, #4
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e0c6      	b.n	8003d7c <UART_SetConfig+0x348>
 8003bee:	2308      	movs	r3, #8
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e0c3      	b.n	8003d7c <UART_SetConfig+0x348>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e0c0      	b.n	8003d7c <UART_SetConfig+0x348>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a44      	ldr	r2, [pc, #272]	; (8003d10 <UART_SetConfig+0x2dc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d125      	bne.n	8003c50 <UART_SetConfig+0x21c>
 8003c04:	4b3e      	ldr	r3, [pc, #248]	; (8003d00 <UART_SetConfig+0x2cc>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c12:	d017      	beq.n	8003c44 <UART_SetConfig+0x210>
 8003c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c18:	d817      	bhi.n	8003c4a <UART_SetConfig+0x216>
 8003c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1e:	d00b      	beq.n	8003c38 <UART_SetConfig+0x204>
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c24:	d811      	bhi.n	8003c4a <UART_SetConfig+0x216>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <UART_SetConfig+0x1fe>
 8003c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2e:	d006      	beq.n	8003c3e <UART_SetConfig+0x20a>
 8003c30:	e00b      	b.n	8003c4a <UART_SetConfig+0x216>
 8003c32:	2300      	movs	r3, #0
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	e0a1      	b.n	8003d7c <UART_SetConfig+0x348>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e09e      	b.n	8003d7c <UART_SetConfig+0x348>
 8003c3e:	2304      	movs	r3, #4
 8003c40:	77fb      	strb	r3, [r7, #31]
 8003c42:	e09b      	b.n	8003d7c <UART_SetConfig+0x348>
 8003c44:	2308      	movs	r3, #8
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e098      	b.n	8003d7c <UART_SetConfig+0x348>
 8003c4a:	2310      	movs	r3, #16
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e095      	b.n	8003d7c <UART_SetConfig+0x348>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <UART_SetConfig+0x2e0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d125      	bne.n	8003ca6 <UART_SetConfig+0x272>
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <UART_SetConfig+0x2cc>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c68:	d017      	beq.n	8003c9a <UART_SetConfig+0x266>
 8003c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c6e:	d817      	bhi.n	8003ca0 <UART_SetConfig+0x26c>
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c74:	d00b      	beq.n	8003c8e <UART_SetConfig+0x25a>
 8003c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7a:	d811      	bhi.n	8003ca0 <UART_SetConfig+0x26c>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <UART_SetConfig+0x254>
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d006      	beq.n	8003c94 <UART_SetConfig+0x260>
 8003c86:	e00b      	b.n	8003ca0 <UART_SetConfig+0x26c>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e076      	b.n	8003d7c <UART_SetConfig+0x348>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e073      	b.n	8003d7c <UART_SetConfig+0x348>
 8003c94:	2304      	movs	r3, #4
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e070      	b.n	8003d7c <UART_SetConfig+0x348>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e06d      	b.n	8003d7c <UART_SetConfig+0x348>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e06a      	b.n	8003d7c <UART_SetConfig+0x348>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <UART_SetConfig+0x2e4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d138      	bne.n	8003d22 <UART_SetConfig+0x2ee>
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <UART_SetConfig+0x2cc>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cbe:	d017      	beq.n	8003cf0 <UART_SetConfig+0x2bc>
 8003cc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cc4:	d82a      	bhi.n	8003d1c <UART_SetConfig+0x2e8>
 8003cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cca:	d00b      	beq.n	8003ce4 <UART_SetConfig+0x2b0>
 8003ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd0:	d824      	bhi.n	8003d1c <UART_SetConfig+0x2e8>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <UART_SetConfig+0x2aa>
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cda:	d006      	beq.n	8003cea <UART_SetConfig+0x2b6>
 8003cdc:	e01e      	b.n	8003d1c <UART_SetConfig+0x2e8>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e04b      	b.n	8003d7c <UART_SetConfig+0x348>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e048      	b.n	8003d7c <UART_SetConfig+0x348>
 8003cea:	2304      	movs	r3, #4
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e045      	b.n	8003d7c <UART_SetConfig+0x348>
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e042      	b.n	8003d7c <UART_SetConfig+0x348>
 8003cf6:	bf00      	nop
 8003cf8:	efff69f3 	.word	0xefff69f3
 8003cfc:	40011000 	.word	0x40011000
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40004400 	.word	0x40004400
 8003d08:	40004800 	.word	0x40004800
 8003d0c:	40004c00 	.word	0x40004c00
 8003d10:	40005000 	.word	0x40005000
 8003d14:	40011400 	.word	0x40011400
 8003d18:	40007800 	.word	0x40007800
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e02c      	b.n	8003d7c <UART_SetConfig+0x348>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a72      	ldr	r2, [pc, #456]	; (8003ef0 <UART_SetConfig+0x4bc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d125      	bne.n	8003d78 <UART_SetConfig+0x344>
 8003d2c:	4b71      	ldr	r3, [pc, #452]	; (8003ef4 <UART_SetConfig+0x4c0>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d3a:	d017      	beq.n	8003d6c <UART_SetConfig+0x338>
 8003d3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d40:	d817      	bhi.n	8003d72 <UART_SetConfig+0x33e>
 8003d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d46:	d00b      	beq.n	8003d60 <UART_SetConfig+0x32c>
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	d811      	bhi.n	8003d72 <UART_SetConfig+0x33e>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <UART_SetConfig+0x326>
 8003d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d56:	d006      	beq.n	8003d66 <UART_SetConfig+0x332>
 8003d58:	e00b      	b.n	8003d72 <UART_SetConfig+0x33e>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e00d      	b.n	8003d7c <UART_SetConfig+0x348>
 8003d60:	2302      	movs	r3, #2
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e00a      	b.n	8003d7c <UART_SetConfig+0x348>
 8003d66:	2304      	movs	r3, #4
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e007      	b.n	8003d7c <UART_SetConfig+0x348>
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e004      	b.n	8003d7c <UART_SetConfig+0x348>
 8003d72:	2310      	movs	r3, #16
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e001      	b.n	8003d7c <UART_SetConfig+0x348>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d84:	d15b      	bne.n	8003e3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d86:	7ffb      	ldrb	r3, [r7, #31]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d828      	bhi.n	8003dde <UART_SetConfig+0x3aa>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0x360>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dc1 	.word	0x08003dc1
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08003ddf 	.word	0x08003ddf
 8003da4:	08003dcf 	.word	0x08003dcf
 8003da8:	08003ddf 	.word	0x08003ddf
 8003dac:	08003ddf 	.word	0x08003ddf
 8003db0:	08003ddf 	.word	0x08003ddf
 8003db4:	08003dd7 	.word	0x08003dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7fe fe3a 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	61b8      	str	r0, [r7, #24]
        break;
 8003dbe:	e013      	b.n	8003de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7fe fe4a 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	61b8      	str	r0, [r7, #24]
        break;
 8003dc6:	e00f      	b.n	8003de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <UART_SetConfig+0x4c4>)
 8003dca:	61bb      	str	r3, [r7, #24]
        break;
 8003dcc:	e00c      	b.n	8003de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dce:	f7fe fd1d 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8003dd2:	61b8      	str	r0, [r7, #24]
        break;
 8003dd4:	e008      	b.n	8003de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dda:	61bb      	str	r3, [r7, #24]
        break;
 8003ddc:	e004      	b.n	8003de8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	77bb      	strb	r3, [r7, #30]
        break;
 8003de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d074      	beq.n	8003ed8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	005a      	lsls	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	d916      	bls.n	8003e38 <UART_SetConfig+0x404>
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e10:	d212      	bcs.n	8003e38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f023 030f 	bic.w	r3, r3, #15
 8003e1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	89fb      	ldrh	r3, [r7, #14]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	89fa      	ldrh	r2, [r7, #14]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	e04f      	b.n	8003ed8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	77bb      	strb	r3, [r7, #30]
 8003e3c:	e04c      	b.n	8003ed8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d828      	bhi.n	8003e96 <UART_SetConfig+0x462>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x418>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e81 	.word	0x08003e81
 8003e58:	08003e97 	.word	0x08003e97
 8003e5c:	08003e87 	.word	0x08003e87
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e97 	.word	0x08003e97
 8003e68:	08003e97 	.word	0x08003e97
 8003e6c:	08003e8f 	.word	0x08003e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e70:	f7fe fdde 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003e74:	61b8      	str	r0, [r7, #24]
        break;
 8003e76:	e013      	b.n	8003ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7fe fdee 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	61b8      	str	r0, [r7, #24]
        break;
 8003e7e:	e00f      	b.n	8003ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <UART_SetConfig+0x4c4>)
 8003e82:	61bb      	str	r3, [r7, #24]
        break;
 8003e84:	e00c      	b.n	8003ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e86:	f7fe fcc1 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8003e8a:	61b8      	str	r0, [r7, #24]
        break;
 8003e8c:	e008      	b.n	8003ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e92:	61bb      	str	r3, [r7, #24]
        break;
 8003e94:	e004      	b.n	8003ea0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e9e:	bf00      	nop
    }

    if (pclk != 0U)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d018      	beq.n	8003ed8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	085a      	lsrs	r2, r3, #1
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b0f      	cmp	r3, #15
 8003ebe:	d909      	bls.n	8003ed4 <UART_SetConfig+0x4a0>
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec6:	d205      	bcs.n	8003ed4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	e001      	b.n	8003ed8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ee4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40007c00 	.word	0x40007c00
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400

08003efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01a      	beq.n	8004012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ffa:	d10a      	bne.n	8004012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af02      	add	r7, sp, #8
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004050:	f7fd f87c 	bl	800114c <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d10e      	bne.n	8004082 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f831 	bl	80040da <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e027      	b.n	80040d2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d10e      	bne.n	80040ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f81b 	bl	80040da <UART_WaitOnFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e011      	b.n	80040d2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b09c      	sub	sp, #112	; 0x70
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ea:	e0a7      	b.n	800423c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f2:	f000 80a3 	beq.w	800423c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fd f829 	bl	800114c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <UART_WaitOnFlagUntilTimeout+0x32>
 8004106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004108:	2b00      	cmp	r3, #0
 800410a:	d13f      	bne.n	800418c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800411a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004120:	667b      	str	r3, [r7, #100]	; 0x64
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800412c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e6      	bne.n	800410c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	663b      	str	r3, [r7, #96]	; 0x60
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3308      	adds	r3, #8
 800415c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800415e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800416c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e068      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d050      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a8:	d148      	bne.n	800423c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	637b      	str	r3, [r7, #52]	; 0x34
 80041d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e6      	bne.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3308      	adds	r3, #8
 80041ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	613b      	str	r3, [r7, #16]
   return(result);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3308      	adds	r3, #8
 8004204:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004206:	623a      	str	r2, [r7, #32]
 8004208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	69f9      	ldr	r1, [r7, #28]
 800420c:	6a3a      	ldr	r2, [r7, #32]
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	61bb      	str	r3, [r7, #24]
   return(result);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e010      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	429a      	cmp	r2, r3
 8004258:	f43f af48 	beq.w	80040ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3770      	adds	r7, #112	; 0x70
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
    a->var = var;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	605a      	str	r2, [r3, #4]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
    a->time = duration;
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <lv_anim_set_delay>:
 * Set a delay before starting the animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay before the animation in milliseconds
 */
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	425a      	negs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <lv_anim_set_start_cb>:
 * Set a function call when the animation really starts (considering `delay`)
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start_cb  a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_start_cb_t start_cb)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	609a      	str	r2, [r3, #8]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	60da      	str	r2, [r3, #12]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <lv_scr_act>:
{
 800433a:	b580      	push	{r7, lr}
 800433c:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 800433e:	f01b fcf1 	bl	801fd24 <lv_disp_get_default>
 8004342:	4603      	mov	r3, r0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f803 	bl	8004350 <lv_disp_get_scr_act>
 800434a:	4603      	mov	r3, r0
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}

08004350 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <lv_disp_get_scr_act+0x14>
 800435e:	f01b fce1 	bl	801fd24 <lv_disp_get_default>
 8004362:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	e001      	b.n	8004372 <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <lv_disp_get_scr_prev+0x14>
 8004388:	f01b fccc 	bl	801fd24 <lv_disp_get_default>
 800438c:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	e001      	b.n	800439c <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	6078      	str	r0, [r7, #4]
    lv_scr_load_anim(scr, LV_SCR_LOAD_ANIM_NONE, 0, 0, false);
 80043ac:	2300      	movs	r3, #0
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2300      	movs	r3, #0
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f83e 	bl	8004438 <lv_scr_load_anim>
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <lv_disp_get_layer_top+0x14>
 80043d2:	f01b fca7 	bl	801fd24 <lv_disp_get_default>
 80043d6:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	e001      	b.n	80043e6 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <lv_disp_get_layer_sys+0x14>
 80043fc:	f01b fc92 	bl	801fd24 <lv_disp_get_default>
 8004400:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	e001      	b.n	8004410 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <lv_disp_get_theme+0x14>
 8004426:	f01b fc7d 	bl	801fd24 <lv_disp_get_default>
 800442a:	6078      	str	r0, [r7, #4]
    return disp->theme;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <lv_scr_load_anim>:
 * @param time time of the animation
 * @param delay delay before the transition
 * @param auto_del true: automatically delete the old screen
 */
void lv_scr_load_anim(lv_obj_t * new_scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, bool auto_del)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b0a8      	sub	sp, #160	; 0xa0
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	72fb      	strb	r3, [r7, #11]

    lv_disp_t * d = lv_obj_get_disp(new_scr);
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f009 fd55 	bl	800def8 <lv_obj_get_disp>
 800444e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    lv_obj_t * act_scr = lv_scr_act();
 8004452:	f7ff ff72 	bl	800433a <lv_scr_act>
 8004456:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /*If an other screen load animation is in progress
     *make target screen loaded immediately. */
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 800445a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d035      	beq.n	80044d0 <lv_scr_load_anim+0x98>
 8004464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800446e:	429a      	cmp	r2, r3
 8004470:	d02e      	beq.n	80044d0 <lv_scr_load_anim+0x98>
        scr_load_internal(d->scr_to_load);
 8004472:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fa7e 	bl	800497a <scr_load_internal>
        lv_anim_del(d->scr_to_load, NULL);
 800447e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f01b fe00 	bl	802008c <lv_anim_del>
        lv_obj_set_pos(d->scr_to_load, 0, 0);
 800448c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2200      	movs	r2, #0
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f004 f81f 	bl	80084da <lv_obj_set_pos>
        lv_obj_remove_local_style_prop(d->scr_to_load, LV_STYLE_OPA, 0);
 800449c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2160      	movs	r1, #96	; 0x60
 80044a6:	4618      	mov	r0, r3
 80044a8:	f008 fb2b 	bl	800cb02 <lv_obj_remove_local_style_prop>

        if(d->del_prev) {
 80044ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <lv_scr_load_anim+0x8e>
            lv_obj_del(act_scr);
 80044be:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80044c2:	f009 fcba 	bl	800de3a <lv_obj_del>
        }
        act_scr = d->scr_to_load;
 80044c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    }

    d->scr_to_load = new_scr;
 80044d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	619a      	str	r2, [r3, #24]

    if(d->prev_scr && d->del_prev) {
 80044d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <lv_scr_load_anim+0xd0>
 80044e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <lv_scr_load_anim+0xd0>
        lv_obj_del(d->prev_scr);
 80044f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f009 fc9d 	bl	800de3a <lv_obj_del>
        d->prev_scr = NULL;
 8004500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004504:	2200      	movs	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
    }

    d->draw_prev_over_act = is_out_anim(anim_type);
 8004508:	7afb      	ldrb	r3, [r7, #11]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fb04 	bl	8004b18 <is_out_anim>
 8004510:	4603      	mov	r3, r0
 8004512:	4619      	mov	r1, r3
 8004514:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004518:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800451c:	f361 0300 	bfi	r3, r1, #0, #1
 8004520:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    d->del_prev = auto_del;
 8004524:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004528:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800452c:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 8004530:	f361 0341 	bfi	r3, r1, #1, #1
 8004534:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    /*Be sure there is no other animation on the screens*/
    lv_anim_del(new_scr, NULL);
 8004538:	2100      	movs	r1, #0
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f01b fda6 	bl	802008c <lv_anim_del>
    lv_anim_del(lv_scr_act(), NULL);
 8004540:	f7ff fefb 	bl	800433a <lv_scr_act>
 8004544:	4603      	mov	r3, r0
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f01b fd9f 	bl	802008c <lv_anim_del>

    /*Be sure both screens are in a normal position*/
    lv_obj_set_pos(new_scr, 0, 0);
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f003 ffc1 	bl	80084da <lv_obj_set_pos>
    lv_obj_set_pos(lv_scr_act(), 0, 0);
 8004558:	f7ff feef 	bl	800433a <lv_scr_act>
 800455c:	4603      	mov	r3, r0
 800455e:	2200      	movs	r2, #0
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f003 ffb9 	bl	80084da <lv_obj_set_pos>
    lv_obj_remove_local_style_prop(new_scr, LV_STYLE_OPA, 0);
 8004568:	2200      	movs	r2, #0
 800456a:	2160      	movs	r1, #96	; 0x60
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f008 fac8 	bl	800cb02 <lv_obj_remove_local_style_prop>
    lv_obj_remove_local_style_prop(lv_scr_act(), LV_STYLE_OPA, 0);
 8004572:	f7ff fee2 	bl	800433a <lv_scr_act>
 8004576:	4603      	mov	r3, r0
 8004578:	2200      	movs	r2, #0
 800457a:	2160      	movs	r1, #96	; 0x60
 800457c:	4618      	mov	r0, r3
 800457e:	f008 fac0 	bl	800cb02 <lv_obj_remove_local_style_prop>


    /*Shortcut for immediate load*/
    if(time == 0 && delay == 0) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <lv_scr_load_anim+0x15e>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <lv_scr_load_anim+0x15e>
        scr_load_internal(new_scr);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f9f3 	bl	800497a <scr_load_internal>
 8004594:	e1c8      	b.n	8004928 <lv_scr_load_anim+0x4f0>
        return;
    }

    lv_anim_t a_new;
    lv_anim_init(&a_new);
 8004596:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800459a:	4618      	mov	r0, r3
 800459c:	f01b fcd8 	bl	801ff50 <lv_anim_init>
    lv_anim_set_var(&a_new, new_scr);
 80045a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fe5d 	bl	8004266 <lv_anim_set_var>
    lv_anim_set_start_cb(&a_new, scr_load_anim_start);
 80045ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045b0:	49df      	ldr	r1, [pc, #892]	; (8004930 <lv_scr_load_anim+0x4f8>)
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fea5 	bl	8004302 <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a_new, scr_anim_ready);
 80045b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045bc:	49dd      	ldr	r1, [pc, #884]	; (8004934 <lv_scr_load_anim+0x4fc>)
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fead 	bl	800431e <lv_anim_set_ready_cb>
    lv_anim_set_time(&a_new, time);
 80045c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fe67 	bl	800429e <lv_anim_set_time>
    lv_anim_set_delay(&a_new, delay);
 80045d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fe6f 	bl	80042ba <lv_anim_set_delay>

    lv_anim_t a_old;
    lv_anim_init(&a_old);
 80045dc:	f107 0310 	add.w	r3, r7, #16
 80045e0:	4618      	mov	r0, r3
 80045e2:	f01b fcb5 	bl	801ff50 <lv_anim_init>
    lv_anim_set_var(&a_old, d->act_scr);
 80045e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	f107 0310 	add.w	r3, r7, #16
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fe37 	bl	8004266 <lv_anim_set_var>
    lv_anim_set_time(&a_old, time);
 80045f8:	f107 0310 	add.w	r3, r7, #16
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fe4d 	bl	800429e <lv_anim_set_time>
    lv_anim_set_delay(&a_old, delay);
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fe55 	bl	80042ba <lv_anim_set_delay>

    switch(anim_type) {
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	2b0e      	cmp	r3, #14
 8004614:	f200 8178 	bhi.w	8004908 <lv_scr_load_anim+0x4d0>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <lv_scr_load_anim+0x1e8>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	0800465d 	.word	0x0800465d
 8004624:	08004679 	.word	0x08004679
 8004628:	0800469f 	.word	0x0800469f
 800462c:	080046c5 	.word	0x080046c5
 8004630:	080046eb 	.word	0x080046eb
 8004634:	08004711 	.word	0x08004711
 8004638:	0800475b 	.word	0x0800475b
 800463c:	080047a5 	.word	0x080047a5
 8004640:	080047ef 	.word	0x080047ef
 8004644:	08004839 	.word	0x08004839
 8004648:	08004855 	.word	0x08004855
 800464c:	08004871 	.word	0x08004871
 8004650:	08004897 	.word	0x08004897
 8004654:	080048bd 	.word	0x080048bd
 8004658:	080048e3 	.word	0x080048e3
        case LV_SCR_LOAD_ANIM_NONE:
            /*Create a dummy animation to apply the delay*/
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 800465c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004660:	49b5      	ldr	r1, [pc, #724]	; (8004938 <lv_scr_load_anim+0x500>)
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fe0d 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, 0, 0);
 8004668:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800466c:	2200      	movs	r2, #0
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fe31 	bl	80042d8 <lv_anim_set_values>
            break;
 8004676:	e147      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_LEFT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 8004678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800467c:	49ae      	ldr	r1, [pc, #696]	; (8004938 <lv_scr_load_anim+0x500>)
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fdff 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 8004684:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004688:	f01b fb58 	bl	801fd3c <lv_disp_get_hor_res>
 800468c:	4603      	mov	r3, r0
 800468e:	4619      	mov	r1, r3
 8004690:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004694:	2200      	movs	r2, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fe1e 	bl	80042d8 <lv_anim_set_values>
            break;
 800469c:	e134      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_RIGHT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 800469e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046a2:	49a5      	ldr	r1, [pc, #660]	; (8004938 <lv_scr_load_anim+0x500>)
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fdec 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 80046aa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80046ae:	f01b fb45 	bl	801fd3c <lv_disp_get_hor_res>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4259      	negs	r1, r3
 80046b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046ba:	2200      	movs	r2, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fe0b 	bl	80042d8 <lv_anim_set_values>
            break;
 80046c2:	e121      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_TOP:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 80046c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046c8:	499c      	ldr	r1, [pc, #624]	; (800493c <lv_scr_load_anim+0x504>)
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fdd9 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 80046d0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80046d4:	f01b fb58 	bl	801fd88 <lv_disp_get_ver_res>
 80046d8:	4603      	mov	r3, r0
 80046da:	4619      	mov	r1, r3
 80046dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046e0:	2200      	movs	r2, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fdf8 	bl	80042d8 <lv_anim_set_values>
            break;
 80046e8:	e10e      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_BOTTOM:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 80046ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046ee:	4993      	ldr	r1, [pc, #588]	; (800493c <lv_scr_load_anim+0x504>)
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fdc6 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 80046f6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80046fa:	f01b fb45 	bl	801fd88 <lv_disp_get_ver_res>
 80046fe:	4603      	mov	r3, r0
 8004700:	4259      	negs	r1, r3
 8004702:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004706:	2200      	movs	r2, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fde5 	bl	80042d8 <lv_anim_set_values>
            break;
 800470e:	e0fb      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_LEFT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 8004710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004714:	4988      	ldr	r1, [pc, #544]	; (8004938 <lv_scr_load_anim+0x500>)
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fdb3 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 800471c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004720:	f01b fb0c 	bl	801fd3c <lv_disp_get_hor_res>
 8004724:	4603      	mov	r3, r0
 8004726:	4619      	mov	r1, r3
 8004728:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800472c:	2200      	movs	r2, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fdd2 	bl	80042d8 <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8004734:	f107 0310 	add.w	r3, r7, #16
 8004738:	497f      	ldr	r1, [pc, #508]	; (8004938 <lv_scr_load_anim+0x500>)
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fda1 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 8004740:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004744:	f01b fafa 	bl	801fd3c <lv_disp_get_hor_res>
 8004748:	4603      	mov	r3, r0
 800474a:	425a      	negs	r2, r3
 800474c:	f107 0310 	add.w	r3, r7, #16
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fdc0 	bl	80042d8 <lv_anim_set_values>
            break;
 8004758:	e0d6      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_RIGHT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 800475a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800475e:	4976      	ldr	r1, [pc, #472]	; (8004938 <lv_scr_load_anim+0x500>)
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fd8e 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 8004766:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800476a:	f01b fae7 	bl	801fd3c <lv_disp_get_hor_res>
 800476e:	4603      	mov	r3, r0
 8004770:	4259      	negs	r1, r3
 8004772:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004776:	2200      	movs	r2, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fdad 	bl	80042d8 <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_x_anim);
 800477e:	f107 0310 	add.w	r3, r7, #16
 8004782:	496d      	ldr	r1, [pc, #436]	; (8004938 <lv_scr_load_anim+0x500>)
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fd7c 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 800478a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800478e:	f01b fad5 	bl	801fd3c <lv_disp_get_hor_res>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	f107 0310 	add.w	r3, r7, #16
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fd9b 	bl	80042d8 <lv_anim_set_values>
            break;
 80047a2:	e0b1      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_TOP:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 80047a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047a8:	4964      	ldr	r1, [pc, #400]	; (800493c <lv_scr_load_anim+0x504>)
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fd69 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 80047b0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80047b4:	f01b fae8 	bl	801fd88 <lv_disp_get_ver_res>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4619      	mov	r1, r3
 80047bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047c0:	2200      	movs	r2, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fd88 	bl	80042d8 <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_y_anim);
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	495b      	ldr	r1, [pc, #364]	; (800493c <lv_scr_load_anim+0x504>)
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fd57 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 80047d4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80047d8:	f01b fad6 	bl	801fd88 <lv_disp_get_ver_res>
 80047dc:	4603      	mov	r3, r0
 80047de:	425a      	negs	r2, r3
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fd76 	bl	80042d8 <lv_anim_set_values>
            break;
 80047ec:	e08c      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_BOTTOM:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 80047ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047f2:	4952      	ldr	r1, [pc, #328]	; (800493c <lv_scr_load_anim+0x504>)
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fd44 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 80047fa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80047fe:	f01b fac3 	bl	801fd88 <lv_disp_get_ver_res>
 8004802:	4603      	mov	r3, r0
 8004804:	4259      	negs	r1, r3
 8004806:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800480a:	2200      	movs	r2, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fd63 	bl	80042d8 <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_y_anim);
 8004812:	f107 0310 	add.w	r3, r7, #16
 8004816:	4949      	ldr	r1, [pc, #292]	; (800493c <lv_scr_load_anim+0x504>)
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fd32 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 800481e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004822:	f01b fab1 	bl	801fd88 <lv_disp_get_ver_res>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	f107 0310 	add.w	r3, r7, #16
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fd51 	bl	80042d8 <lv_anim_set_values>
            break;
 8004836:	e067      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_FADE_IN:
            lv_anim_set_exec_cb(&a_new, opa_scale_anim);
 8004838:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800483c:	4940      	ldr	r1, [pc, #256]	; (8004940 <lv_scr_load_anim+0x508>)
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fd1f 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, LV_OPA_TRANSP, LV_OPA_COVER);
 8004844:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004848:	22ff      	movs	r2, #255	; 0xff
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fd43 	bl	80042d8 <lv_anim_set_values>
            break;
 8004852:	e059      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_FADE_OUT:
            lv_anim_set_exec_cb(&a_old, opa_scale_anim);
 8004854:	f107 0310 	add.w	r3, r7, #16
 8004858:	4939      	ldr	r1, [pc, #228]	; (8004940 <lv_scr_load_anim+0x508>)
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fd11 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, LV_OPA_COVER, LV_OPA_TRANSP);
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	2200      	movs	r2, #0
 8004866:	21ff      	movs	r1, #255	; 0xff
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fd35 	bl	80042d8 <lv_anim_set_values>
            break;
 800486e:	e04b      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_LEFT:
            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	4930      	ldr	r1, [pc, #192]	; (8004938 <lv_scr_load_anim+0x500>)
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fd03 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 800487c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004880:	f01b fa5c 	bl	801fd3c <lv_disp_get_hor_res>
 8004884:	4603      	mov	r3, r0
 8004886:	425a      	negs	r2, r3
 8004888:	f107 0310 	add.w	r3, r7, #16
 800488c:	2100      	movs	r1, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fd22 	bl	80042d8 <lv_anim_set_values>
            break;
 8004894:	e038      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_RIGHT:
            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8004896:	f107 0310 	add.w	r3, r7, #16
 800489a:	4927      	ldr	r1, [pc, #156]	; (8004938 <lv_scr_load_anim+0x500>)
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fcf0 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 80048a2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80048a6:	f01b fa49 	bl	801fd3c <lv_disp_get_hor_res>
 80048aa:	4603      	mov	r3, r0
 80048ac:	461a      	mov	r2, r3
 80048ae:	f107 0310 	add.w	r3, r7, #16
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fd0f 	bl	80042d8 <lv_anim_set_values>
            break;
 80048ba:	e025      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_TOP:
            lv_anim_set_exec_cb(&a_old, set_y_anim);
 80048bc:	f107 0310 	add.w	r3, r7, #16
 80048c0:	491e      	ldr	r1, [pc, #120]	; (800493c <lv_scr_load_anim+0x504>)
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fcdd 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 80048c8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80048cc:	f01b fa5c 	bl	801fd88 <lv_disp_get_ver_res>
 80048d0:	4603      	mov	r3, r0
 80048d2:	425a      	negs	r2, r3
 80048d4:	f107 0310 	add.w	r3, r7, #16
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fcfc 	bl	80042d8 <lv_anim_set_values>
            break;
 80048e0:	e012      	b.n	8004908 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_BOTTOM:
            lv_anim_set_exec_cb(&a_old, set_y_anim);
 80048e2:	f107 0310 	add.w	r3, r7, #16
 80048e6:	4915      	ldr	r1, [pc, #84]	; (800493c <lv_scr_load_anim+0x504>)
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fcca 	bl	8004282 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 80048ee:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80048f2:	f01b fa49 	bl	801fd88 <lv_disp_get_ver_res>
 80048f6:	4603      	mov	r3, r0
 80048f8:	461a      	mov	r2, r3
 80048fa:	f107 0310 	add.w	r3, r7, #16
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fce9 	bl	80042d8 <lv_anim_set_values>
            break;
 8004906:	bf00      	nop
    }

    lv_event_send(act_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8004908:	2200      	movs	r2, #0
 800490a:	2125      	movs	r1, #37	; 0x25
 800490c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004910:	f000 f922 	bl	8004b58 <lv_event_send>

    lv_anim_start(&a_new);
 8004914:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004918:	4618      	mov	r0, r3
 800491a:	f01b fb3f 	bl	801ff9c <lv_anim_start>
    lv_anim_start(&a_old);
 800491e:	f107 0310 	add.w	r3, r7, #16
 8004922:	4618      	mov	r0, r3
 8004924:	f01b fb3a 	bl	801ff9c <lv_anim_start>
}
 8004928:	37a0      	adds	r7, #160	; 0xa0
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	080049f5 	.word	0x080049f5
 8004934:	08004a8d 	.word	0x08004a8d
 8004938:	08004a51 	.word	0x08004a51
 800493c:	08004a6f 	.word	0x08004a6f
 8004940:	08004a31 	.word	0x08004a31

08004944 <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <lv_disp_is_invalidation_enabled+0x14>
 8004952:	f01b f9e7 	bl	801fd24 <lv_disp_get_default>
 8004956:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <lv_disp_is_invalidation_enabled+0x1e>
        LV_LOG_WARN("no display registered");
        return false;
 800495e:	2300      	movs	r3, #0
 8004960:	e007      	b.n	8004972 <lv_disp_is_invalidation_enabled+0x2e>
    }

    return (disp->inv_en_cnt > 0);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004968:	2b00      	cmp	r3, #0
 800496a:	bfcc      	ite	gt
 800496c:	2301      	movgt	r3, #1
 800496e:	2300      	movle	r3, #0
 8004970:	b2db      	uxtb	r3, r3
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <scr_load_internal>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void scr_load_internal(lv_obj_t * scr)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(scr);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f009 fab8 	bl	800def8 <lv_obj_get_disp>
 8004988:	60f8      	str	r0, [r7, #12]
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d02d      	beq.n	80049ec <scr_load_internal+0x72>

    lv_obj_t * old_scr = d->act_scr;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	60bb      	str	r3, [r7, #8]

    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <scr_load_internal+0x2e>
 800499e:	2200      	movs	r2, #0
 80049a0:	2125      	movs	r1, #37	; 0x25
 80049a2:	68b8      	ldr	r0, [r7, #8]
 80049a4:	f000 f8d8 	bl	8004b58 <lv_event_send>
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <scr_load_internal+0x40>
 80049b0:	2200      	movs	r2, #0
 80049b2:	2126      	movs	r1, #38	; 0x26
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8cf 	bl	8004b58 <lv_event_send>

    d->act_scr = scr;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	611a      	str	r2, [r3, #16]

    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOADED, NULL);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <scr_load_internal+0x58>
 80049c8:	2200      	movs	r2, #0
 80049ca:	2127      	movs	r1, #39	; 0x27
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8c3 	bl	8004b58 <lv_event_send>
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <scr_load_internal+0x6a>
 80049da:	2200      	movs	r2, #0
 80049dc:	2128      	movs	r1, #40	; 0x28
 80049de:	68b8      	ldr	r0, [r7, #8]
 80049e0:	f000 f8ba 	bl	8004b58 <lv_event_send>

    lv_obj_invalidate(scr);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f004 fe6c 	bl	80096c2 <lv_obj_invalidate>
 80049ea:	e000      	b.n	80049ee <scr_load_internal+0x74>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 80049ec:	bf00      	nop
}
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <scr_load_anim_start>:

static void scr_load_anim_start(lv_anim_t * a)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(a->var);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f009 fa79 	bl	800def8 <lv_obj_get_disp>
 8004a06:	60f8      	str	r0, [r7, #12]

    d->prev_scr = lv_scr_act();
 8004a08:	f7ff fc97 	bl	800433a <lv_scr_act>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	615a      	str	r2, [r3, #20]
    d->act_scr = a->var;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	611a      	str	r2, [r3, #16]

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2126      	movs	r1, #38	; 0x26
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f898 	bl	8004b58 <lv_event_send>
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <opa_scale_anim>:

static void opa_scale_anim(void * obj, int32_t v)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
    lv_obj_set_style_opa(obj, v, 0);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f009 f9e6 	bl	800de14 <lv_obj_set_style_opa>
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <set_x_anim>:

static void set_x_anim(void * obj, int32_t v)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
    lv_obj_set_x(obj, v);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	b21b      	sxth	r3, r3
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f003 fd52 	bl	800850a <lv_obj_set_x>
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <set_y_anim>:

static void set_y_anim(void * obj, int32_t v)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
    lv_obj_set_y(obj, v);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	b21b      	sxth	r3, r3
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f003 fd68 	bl	8008554 <lv_obj_set_y>
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <scr_anim_ready>:

static void scr_anim_ready(lv_anim_t * a)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f009 fa2d 	bl	800def8 <lv_obj_get_disp>
 8004a9e:	60f8      	str	r0, [r7, #12]

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOADED, NULL);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2127      	movs	r1, #39	; 0x27
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f855 	bl	8004b58 <lv_event_send>
    lv_event_send(d->prev_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2128      	movs	r1, #40	; 0x28
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f84e 	bl	8004b58 <lv_event_send>

    if(d->prev_scr && d->del_prev) lv_obj_del(d->prev_scr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <scr_anim_ready+0x52>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <scr_anim_ready+0x52>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f009 f9ae 	bl	800de3a <lv_obj_del>
    d->prev_scr = NULL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	615a      	str	r2, [r3, #20]
    d->draw_prev_over_act = false;
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004aea:	f36f 0300 	bfc	r3, #0, #1
 8004aee:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    d->scr_to_load = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	619a      	str	r2, [r3, #24]
    lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2160      	movs	r1, #96	; 0x60
 8004b00:	4618      	mov	r0, r3
 8004b02:	f007 fffe 	bl	800cb02 <lv_obj_remove_local_style_prop>
    lv_obj_invalidate(d->act_scr);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f004 fdd9 	bl	80096c2 <lv_obj_invalidate>
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <is_out_anim>:

static bool is_out_anim(lv_scr_load_anim_t anim_type)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	2b0a      	cmp	r3, #10
 8004b26:	d00b      	beq.n	8004b40 <is_out_anim+0x28>
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	2b0b      	cmp	r3, #11
 8004b2c:	d008      	beq.n	8004b40 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2b0c      	cmp	r3, #12
 8004b32:	d005      	beq.n	8004b40 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	2b0d      	cmp	r3, #13
 8004b38:	d002      	beq.n	8004b40 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	2b0e      	cmp	r3, #14
 8004b3e:	d101      	bne.n	8004b44 <is_out_anim+0x2c>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <is_out_anim+0x2e>
 8004b44:	2300      	movs	r3, #0
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	b2db      	uxtb	r3, r3
           anim_type == LV_SCR_LOAD_ANIM_OUT_BOTTOM;
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <lv_event_send>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_res_t lv_event_send(lv_obj_t * obj, lv_event_code_t event_code, void * param)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	460b      	mov	r3, r1
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <lv_event_send+0x18>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e02f      	b.n	8004bd0 <lv_event_send+0x78>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_event_t e;
    e.target = obj;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	613b      	str	r3, [r7, #16]
    e.current_target = obj;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	617b      	str	r3, [r7, #20]
    e.code = event_code;
 8004b78:	7afb      	ldrb	r3, [r7, #11]
 8004b7a:	763b      	strb	r3, [r7, #24]
    e.user_data = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
    e.param = param;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	623b      	str	r3, [r7, #32]
    e.deleted = 0;
 8004b84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b88:	f36f 0300 	bfc	r3, #0, #1
 8004b8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_bubbling = 0;
 8004b90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b94:	f36f 0382 	bfc	r3, #2, #1
 8004b98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_processing = 0;
 8004b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ba0:	f36f 0341 	bfc	r3, #1, #1
 8004ba4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*Build a simple linked list from the objects used in the events
     *It's important to know if this object was deleted by a nested event
     *called from this `event_cb`.*/
    e.prev = event_head;
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <lv_event_send+0x80>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
    event_head = &e;
 8004bae:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <lv_event_send+0x80>)
 8004bb0:	f107 0310 	add.w	r3, r7, #16
 8004bb4:	6013      	str	r3, [r2, #0]

    /*Send the event*/
    lv_res_t res = event_send_core(&e);
 8004bb6:	f107 0310 	add.w	r3, r7, #16
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f95d 	bl	8004e7a <event_send_core>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /*Remove this element from the list*/
    event_head = e.prev;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	4a03      	ldr	r2, [pc, #12]	; (8004bd8 <lv_event_send+0x80>)
 8004bca:	6013      	str	r3, [r2, #0]

    return res;
 8004bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3730      	adds	r7, #48	; 0x30
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	200006f4 	.word	0x200006f4

08004bdc <lv_obj_event_base>:


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <lv_obj_event_base+0x1a>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e006      	b.n	8004c04 <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

    /*Find a base in which call the ancestor's event handler_cb if set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8004bfc:	e002      	b.n	8004c04 <lv_obj_event_base+0x28>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <lv_obj_event_base+0x36>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f5      	beq.n	8004bfe <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <lv_obj_event_base+0x40>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e019      	b.n	8004c50 <lv_obj_event_base+0x74>
    if(base->event_cb == NULL) return LV_RES_OK;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <lv_obj_event_base+0x4c>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e013      	b.n	8004c50 <lv_obj_event_base+0x74>

    /*Call the actual event callback*/
    e->user_data = NULL;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	60da      	str	r2, [r3, #12]
    base->event_cb(base, e);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	72fb      	strb	r3, [r7, #11]
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	7e1b      	ldrb	r3, [r3, #24]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <lv_obj_event_base+0x72>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	72fb      	strb	r3, [r7, #11]

    return res;
 8004c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <lv_event_get_target>:


lv_obj_t * lv_event_get_target(lv_event_t * e)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
    return e->target;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <lv_event_get_current_target>:

lv_obj_t * lv_event_get_current_target(lv_event_t * e)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    return e->current_target;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <lv_event_get_code>:

lv_event_code_t lv_event_get_code(lv_event_t * e)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
    return e->code & ~LV_EVENT_PREPROCESS;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7a1b      	ldrb	r3, [r3, #8]
 8004c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c98:	b2db      	uxtb	r3, r3
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <lv_event_get_param>:

void * lv_event_get_param(lv_event_t * e)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
    return e->param;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <_lv_event_mark_deleted>:
    last_id ++;
    return last_id;
}

void _lv_event_mark_deleted(lv_obj_t * obj)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
    lv_event_t * e = event_head;
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <_lv_event_mark_deleted+0x48>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]

    while(e) {
 8004cce:	e011      	b.n	8004cf4 <_lv_event_mark_deleted+0x34>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d004      	beq.n	8004ce4 <_lv_event_mark_deleted+0x24>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d104      	bne.n	8004cee <_lv_event_mark_deleted+0x2e>
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	7e13      	ldrb	r3, [r2, #24]
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	7613      	strb	r3, [r2, #24]
        e = e->prev;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	60fb      	str	r3, [r7, #12]
    while(e) {
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ea      	bne.n	8004cd0 <_lv_event_mark_deleted+0x10>
    }
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	200006f4 	.word	0x200006f4

08004d0c <lv_event_get_indev>:
    }
    return NULL;
}

lv_indev_t * lv_event_get_indev(lv_event_t * e)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

    if(e->code == LV_EVENT_PRESSED ||
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	7a1b      	ldrb	r3, [r3, #8]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d03b      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESSING ||
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d037      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESS_LOST ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESSING ||
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d033      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SHORT_CLICKED ||
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESS_LOST ||
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d02f      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED ||
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SHORT_CLICKED ||
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	d02b      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED ||
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d027      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_CLICKED ||
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8004d48:	2b07      	cmp	r3, #7
 8004d4a:	d023      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_RELEASED ||
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_CLICKED ||
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d01f      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_RELEASED ||
 8004d58:	2b09      	cmp	r3, #9
 8004d5a:	d01b      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_END ||
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8004d60:	2b0a      	cmp	r3, #10
 8004d62:	d017      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL ||
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_END ||
 8004d68:	2b0b      	cmp	r3, #11
 8004d6a:	d013      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_GESTURE ||
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL ||
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	d00f      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_KEY ||
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_GESTURE ||
 8004d78:	2b0d      	cmp	r3, #13
 8004d7a:	d00b      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_FOCUSED ||
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_KEY ||
 8004d80:	2b0e      	cmp	r3, #14
 8004d82:	d007      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_DEFOCUSED ||
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_FOCUSED ||
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d003      	beq.n	8004d94 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LEAVE) {
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DEFOCUSED ||
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d104      	bne.n	8004d9e <lv_event_get_indev+0x92>
        return lv_event_get_param(e);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff86 	bl	8004ca6 <lv_event_get_param>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	e000      	b.n	8004da0 <lv_event_get_indev+0x94>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8004d9e:	2300      	movs	r3, #0
    }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <lv_event_get_draw_ctx>:
        return NULL;
    }
}

lv_draw_ctx_t * lv_event_get_draw_ctx(lv_event_t * e)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7a1b      	ldrb	r3, [r3, #8]
 8004db4:	2b15      	cmp	r3, #21
 8004db6:	d013      	beq.n	8004de0 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004dbc:	2b14      	cmp	r3, #20
 8004dbe:	d00f      	beq.n	8004de0 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8004dc4:	2b16      	cmp	r3, #22
 8004dc6:	d00b      	beq.n	8004de0 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST ||
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8004dcc:	2b18      	cmp	r3, #24
 8004dce:	d007      	beq.n	8004de0 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST ||
 8004dd4:	2b17      	cmp	r3, #23
 8004dd6:	d003      	beq.n	8004de0 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_END) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8004ddc:	2b19      	cmp	r3, #25
 8004dde:	d104      	bne.n	8004dea <lv_event_get_draw_ctx+0x42>
        return lv_event_get_param(e);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ff60 	bl	8004ca6 <lv_event_get_param>
 8004de6:	4603      	mov	r3, r0
 8004de8:	e000      	b.n	8004dec <lv_event_get_draw_ctx+0x44>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8004dea:	2300      	movs	r3, #0
    }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <lv_event_set_ext_draw_size>:
        return 0;
    }
}

void lv_event_set_ext_draw_size(lv_event_t * e, lv_coord_t size)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7a1b      	ldrb	r3, [r3, #8]
 8004e04:	2b13      	cmp	r3, #19
 8004e06:	d10e      	bne.n	8004e26 <lv_event_set_ext_draw_size+0x32>
        lv_coord_t * cur_size = lv_event_get_param(e);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff ff4c 	bl	8004ca6 <lv_event_get_param>
 8004e0e:	60f8      	str	r0, [r7, #12]
        *cur_size = LV_MAX(*cur_size, size);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e16:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	bfb8      	it	lt
 8004e1e:	4613      	movlt	r3, r2
 8004e20:	b21a      	sxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	801a      	strh	r2, [r3, #0]
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
    }
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <lv_obj_get_event_dsc>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <lv_obj_get_event_dsc+0x16>
 8004e40:	2300      	movs	r3, #0
 8004e42:	e014      	b.n	8004e6e <lv_obj_get_event_dsc+0x40>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	7e9b      	ldrb	r3, [r3, #26]
 8004e4a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d301      	bcc.n	8004e5c <lv_obj_get_event_dsc+0x2e>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e008      	b.n	8004e6e <lv_obj_get_event_dsc+0x40>

    return &obj->spec_attr->event_dsc[id];
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	68d9      	ldr	r1, [r3, #12]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8004e82:	f000 fbe9 	bl	8005658 <lv_indev_get_act>
 8004e86:	60b8      	str	r0, [r7, #8]
    if(indev_act) {
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01f      	beq.n	8004ece <event_send_core+0x54>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <event_send_core+0x30>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	6810      	ldr	r0, [r2, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	7a12      	ldrb	r2, [r2, #8]
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	7e1b      	ldrb	r3, [r3, #24]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <event_send_core+0x42>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0c4      	b.n	8005046 <event_send_core+0x1cc>
        if(e->deleted) return LV_RES_INV;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	7e1b      	ldrb	r3, [r3, #24]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <event_send_core+0x54>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e0bb      	b.n	8005046 <event_send_core+0x1cc>
    }

    lv_res_t res = LV_RES_OK;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ffa8 	bl	8004e2e <lv_obj_get_event_dsc>
 8004ede:	6138      	str	r0, [r7, #16]

    uint32_t i = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8004ee4:	e038      	b.n	8004f58 <event_send_core+0xde>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02a      	beq.n	8004f44 <event_send_core+0xca>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	7a1b      	ldrb	r3, [r3, #8]
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	da25      	bge.n	8004f44 <event_send_core+0xca>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	7a1b      	ldrb	r3, [r3, #8]
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d007      	beq.n	8004f10 <event_send_core+0x96>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	7a1b      	ldrb	r3, [r3, #8]
 8004f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	7a12      	ldrb	r2, [r2, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d119      	bne.n	8004f44 <event_send_core+0xca>
            e->user_data = event_dsc->user_data;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	7e1b      	ldrb	r3, [r3, #24]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <event_send_core+0xb8>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e089      	b.n	8005046 <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7e1b      	ldrb	r3, [r3, #24]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <event_send_core+0xca>
 8004f40:	2300      	movs	r3, #0
 8004f42:	e080      	b.n	8005046 <event_send_core+0x1cc>
        }

        i++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff6c 	bl	8004e2e <lv_obj_get_event_dsc>
 8004f56:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <event_send_core+0xea>
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d0c0      	beq.n	8004ee6 <event_send_core+0x6c>
    }

    res = lv_obj_event_base(NULL, e);
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	2000      	movs	r0, #0
 8004f68:	f7ff fe38 	bl	8004bdc <lv_obj_event_base>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <event_send_core+0x10c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ff56 	bl	8004e2e <lv_obj_get_event_dsc>
 8004f82:	4603      	mov	r3, r0
 8004f84:	e000      	b.n	8004f88 <event_send_core+0x10e>
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]

    i = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8004f8e:	e036      	b.n	8004ffe <event_send_core+0x184>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d028      	beq.n	8004fea <event_send_core+0x170>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	7a1b      	ldrb	r3, [r3, #8]
 8004f9c:	b25b      	sxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	db23      	blt.n	8004fea <event_send_core+0x170>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	7a1b      	ldrb	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <event_send_core+0x13c>
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	7a1a      	ldrb	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	7a1b      	ldrb	r3, [r3, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d119      	bne.n	8004fea <event_send_core+0x170>
            e->user_data = event_dsc->user_data;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7e1b      	ldrb	r3, [r3, #24]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <event_send_core+0x15e>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e036      	b.n	8005046 <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7e1b      	ldrb	r3, [r3, #24]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <event_send_core+0x170>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e02d      	b.n	8005046 <event_send_core+0x1cc>
        }

        i++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff19 	bl	8004e2e <lv_obj_get_event_dsc>
 8004ffc:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <event_send_core+0x190>
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d0c2      	beq.n	8004f90 <event_send_core+0x116>
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d119      	bne.n	8005044 <event_send_core+0x1ca>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d014      	beq.n	8005044 <event_send_core+0x1ca>
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f818 	bl	8005050 <event_is_bubbled>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00e      	beq.n	8005044 <event_send_core+0x1ca>
        e->current_target = e->current_target->parent;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	605a      	str	r2, [r3, #4]
        res = event_send_core(e);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ff22 	bl	8004e7a <event_send_core>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) return LV_RES_INV;
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d001      	beq.n	8005044 <event_send_core+0x1ca>
 8005040:	2300      	movs	r3, #0
 8005042:	e000      	b.n	8005046 <event_send_core+0x1cc>
    }

    return res;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <event_is_bubbled>:

static bool event_is_bubbled(lv_event_t * e)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
    if(e->stop_bubbling) return false;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	7e1b      	ldrb	r3, [r3, #24]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <event_is_bubbled+0x1a>
 8005066:	2300      	movs	r3, #0
 8005068:	e059      	b.n	800511e <event_is_bubbled+0xce>

    /*Event codes that always bubble*/
    switch(e->code) {
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7a1b      	ldrb	r3, [r3, #8]
 800506e:	3b23      	subs	r3, #35	; 0x23
 8005070:	2b01      	cmp	r3, #1
 8005072:	d801      	bhi.n	8005078 <event_is_bubbled+0x28>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 8005074:	2301      	movs	r3, #1
 8005076:	e052      	b.n	800511e <event_is_bubbled+0xce>
        default:
            break;
 8005078:	bf00      	nop
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005082:	4618      	mov	r0, r3
 8005084:	f000 ff41 	bl	8005f0a <lv_obj_has_flag>
 8005088:	4603      	mov	r3, r0
 800508a:	f083 0301 	eor.w	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <event_is_bubbled+0x48>
 8005094:	2300      	movs	r3, #0
 8005096:	e042      	b.n	800511e <event_is_bubbled+0xce>

    switch(e->code) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	7a1b      	ldrb	r3, [r3, #8]
 800509c:	3b11      	subs	r3, #17
 800509e:	2b1b      	cmp	r3, #27
 80050a0:	d83c      	bhi.n	800511c <event_is_bubbled+0xcc>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <event_is_bubbled+0x58>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	08005119 	.word	0x08005119
 80050ac:	08005119 	.word	0x08005119
 80050b0:	08005119 	.word	0x08005119
 80050b4:	08005119 	.word	0x08005119
 80050b8:	08005119 	.word	0x08005119
 80050bc:	08005119 	.word	0x08005119
 80050c0:	08005119 	.word	0x08005119
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005119 	.word	0x08005119
 80050cc:	08005119 	.word	0x08005119
 80050d0:	08005119 	.word	0x08005119
 80050d4:	0800511d 	.word	0x0800511d
 80050d8:	0800511d 	.word	0x0800511d
 80050dc:	08005119 	.word	0x08005119
 80050e0:	0800511d 	.word	0x0800511d
 80050e4:	0800511d 	.word	0x0800511d
 80050e8:	08005119 	.word	0x08005119
 80050ec:	08005119 	.word	0x08005119
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005119 	.word	0x08005119
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	0800511d 	.word	0x0800511d
 8005100:	0800511d 	.word	0x0800511d
 8005104:	0800511d 	.word	0x0800511d
 8005108:	08005119 	.word	0x08005119
 800510c:	08005119 	.word	0x08005119
 8005110:	0800511d 	.word	0x0800511d
 8005114:	08005119 	.word	0x08005119
        case LV_EVENT_CHILD_DELETED:
        case LV_EVENT_CHILD_CHANGED:
        case LV_EVENT_SIZE_CHANGED:
        case LV_EVENT_STYLE_CHANGED:
        case LV_EVENT_GET_SELF_SIZE:
            return false;
 8005118:	2300      	movs	r3, #0
 800511a:	e000      	b.n	800511e <event_is_bubbled+0xce>
        default:
            return true;
 800511c:	2301      	movs	r3, #1
    }
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop

08005128 <_lv_group_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 800512c:	2120      	movs	r1, #32
 800512e:	4802      	ldr	r0, [pc, #8]	; (8005138 <_lv_group_init+0x10>)
 8005130:	f01c fb7b 	bl	802182a <_lv_ll_init>
}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000898 	.word	0x20000898

0800513c <lv_group_get_default>:
{
    default_group = group;
}

lv_group_t * lv_group_get_default(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
    return default_group;
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <lv_group_get_default+0x14>)
 8005142:	681b      	ldr	r3, [r3, #0]
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	200006f8 	.word	0x200006f8

08005154 <lv_group_add_obj>:

void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d053      	beq.n	800520c <lv_group_add_obj+0xb8>

    LV_LOG_TRACE("begin");

    /*Be sure the object is removed from its current group*/
    lv_group_remove_obj(obj);
 8005164:	6838      	ldr	r0, [r7, #0]
 8005166:	f000 f859 	bl	800521c <lv_group_remove_obj>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	f01c fc3a 	bl	80219e6 <_lv_ll_get_head>
 8005172:	6178      	str	r0, [r7, #20]
 8005174:	e00a      	b.n	800518c <lv_group_add_obj+0x38>
        if((*obj_i) == obj) {
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d047      	beq.n	8005210 <lv_group_add_obj+0xbc>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6979      	ldr	r1, [r7, #20]
 8005184:	4618      	mov	r0, r3
 8005186:	f01c fc50 	bl	8021a2a <_lv_ll_get_next>
 800518a:	6178      	str	r0, [r7, #20]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f1      	bne.n	8005176 <lv_group_add_obj+0x22>
            return;
        }
    }

    /*If the object is already in a group and focused then refocus it*/
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8005192:	6838      	ldr	r0, [r7, #0]
 8005194:	f000 feee 	bl	8005f74 <lv_obj_get_group>
 8005198:	6138      	str	r0, [r7, #16]
    if(group_cur) {
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00f      	beq.n	80051c0 <lv_group_add_obj+0x6c>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <lv_group_add_obj+0x6c>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d102      	bne.n	80051c0 <lv_group_add_obj+0x6c>
            lv_group_refocus(group_cur);
 80051ba:	6938      	ldr	r0, [r7, #16]
 80051bc:	f000 f908 	bl	80053d0 <lv_group_refocus>

            LV_LOG_INFO("changing object's group");
        }
    }

    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <lv_group_add_obj+0x7a>
 80051c8:	6838      	ldr	r0, [r7, #0]
 80051ca:	f000 fee7 	bl	8005f9c <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	609a      	str	r2, [r3, #8]

    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4618      	mov	r0, r3
 80051da:	f01c fb73 	bl	80218c4 <_lv_ll_ins_tail>
 80051de:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(next);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d100      	bne.n	80051e8 <lv_group_add_obj+0x94>
 80051e6:	e7fe      	b.n	80051e6 <lv_group_add_obj+0x92>
    if(next == NULL) return;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d012      	beq.n	8005214 <lv_group_add_obj+0xc0>
    *next = obj;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	601a      	str	r2, [r3, #0]

    /*If the head and the tail is equal then there is only one object in the linked list.
     *In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f01c fbf5 	bl	80219e6 <_lv_ll_get_head>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4293      	cmp	r3, r2
 8005202:	d108      	bne.n	8005216 <lv_group_add_obj+0xc2>
        lv_group_refocus(group);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8e3 	bl	80053d0 <lv_group_refocus>
 800520a:	e004      	b.n	8005216 <lv_group_add_obj+0xc2>
    if(group == NULL) return;
 800520c:	bf00      	nop
 800520e:	e002      	b.n	8005216 <lv_group_add_obj+0xc2>
            return;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <lv_group_add_obj+0xc2>
    if(next == NULL) return;
 8005214:	bf00      	nop
    }

    LV_LOG_TRACE("finished");
}
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <lv_group_remove_obj>:
    else if(*g1->obj_focus == obj2) lv_group_focus_obj(obj1);

}

void lv_group_remove_obj(lv_obj_t * obj)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
    lv_group_t * g = lv_obj_get_group(obj);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fea5 	bl	8005f74 <lv_obj_get_group>
 800522a:	60b8      	str	r0, [r7, #8]
    if(g == NULL) return;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d06a      	beq.n	8005308 <lv_group_remove_obj+0xec>

    LV_LOG_TRACE("begin");

    /*Focus on the next object*/
    if(g->obj_focus && *g->obj_focus == obj) {
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d033      	beq.n	80052a2 <lv_group_remove_obj+0x86>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d12d      	bne.n	80052a2 <lv_group_remove_obj+0x86>
        if(g->frozen) g->frozen = 0;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	7f1b      	ldrb	r3, [r3, #28]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d004      	beq.n	800525e <lv_group_remove_obj+0x42>
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	7f13      	ldrb	r3, [r2, #28]
 8005258:	f36f 0300 	bfc	r3, #0, #1
 800525c:	7713      	strb	r3, [r2, #28]

        /*If this is the only object in the group then focus to nothing.*/
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4618      	mov	r0, r3
 8005262:	f01c fbc0 	bl	80219e6 <_lv_ll_get_head>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	429a      	cmp	r2, r3
 800526e:	d115      	bne.n	800529c <lv_group_remove_obj+0x80>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f01c fbc8 	bl	8021a08 <_lv_ll_get_tail>
 8005278:	4602      	mov	r2, r0
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	429a      	cmp	r2, r3
 8005280:	d10c      	bne.n	800529c <lv_group_remove_obj+0x80>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	681c      	ldr	r4, [r3, #0]
 8005288:	68b8      	ldr	r0, [r7, #8]
 800528a:	f000 f9a8 	bl	80055de <get_indev>
 800528e:	4603      	mov	r3, r0
 8005290:	461a      	mov	r2, r3
 8005292:	210f      	movs	r1, #15
 8005294:	4620      	mov	r0, r4
 8005296:	f7ff fc5f 	bl	8004b58 <lv_event_send>
 800529a:	e002      	b.n	80052a2 <lv_group_remove_obj+0x86>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 800529c:	68b8      	ldr	r0, [r7, #8]
 800529e:	f000 f897 	bl	80053d0 <lv_group_refocus>
    }

    /*If the focuses object is still the same then it was the only object in the group but it will
     *be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     *zero objects*/
    if(g->obj_focus && *g->obj_focus == obj) {
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <lv_group_remove_obj+0xa0>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d102      	bne.n	80052bc <lv_group_remove_obj+0xa0>
        g->obj_focus = NULL;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2200      	movs	r2, #0
 80052ba:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group*/
    lv_obj_t ** i;
    _LV_LL_READ(&g->obj_ll, i) {
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4618      	mov	r0, r3
 80052c0:	f01c fb91 	bl	80219e6 <_lv_ll_get_head>
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	e01b      	b.n	8005300 <lv_group_remove_obj+0xe4>
        if(*i == obj) {
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d110      	bne.n	80052f4 <lv_group_remove_obj+0xd8>
            _lv_ll_remove(&g->obj_ll, i);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f01c fb28 	bl	802192c <_lv_ll_remove>
            lv_mem_free(i);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f01c fd71 	bl	8021dc4 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d010      	beq.n	800530c <lv_group_remove_obj+0xf0>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
            break;
 80052f2:	e00b      	b.n	800530c <lv_group_remove_obj+0xf0>
    _LV_LL_READ(&g->obj_ll, i) {
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f01c fb96 	bl	8021a2a <_lv_ll_get_next>
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e0      	bne.n	80052c8 <lv_group_remove_obj+0xac>
 8005306:	e002      	b.n	800530e <lv_group_remove_obj+0xf2>
    if(g == NULL) return;
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <lv_group_remove_obj+0xf2>
            break;
 800530c:	bf00      	nop
        }
    }
    LV_LOG_TRACE("finished");
}
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	bd90      	pop	{r4, r7, pc}

08005314 <lv_group_focus_next>:
        }
    }
}

void lv_group_focus_next(lv_group_t * group)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 800531c:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <lv_group_focus_next+0x3c>)
 800531e:	490d      	ldr	r1, [pc, #52]	; (8005354 <lv_group_focus_next+0x40>)
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f886 	bl	8005432 <focus_next_core>
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <lv_group_focus_next+0x34>
        if(!focus_changed)
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	f083 0301 	eor.w	r3, r3, #1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <lv_group_focus_next+0x34>
            group->edge_cb(group, true);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2101      	movs	r1, #1
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
    }
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	08021a2b 	.word	0x08021a2b
 8005354:	080219e7 	.word	0x080219e7

08005358 <lv_group_focus_prev>:

void lv_group_focus_prev(lv_group_t * group)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8005360:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <lv_group_focus_prev+0x3c>)
 8005362:	490d      	ldr	r1, [pc, #52]	; (8005398 <lv_group_focus_prev+0x40>)
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f864 	bl	8005432 <focus_next_core>
 800536a:	4603      	mov	r3, r0
 800536c:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <lv_group_focus_prev+0x34>
        if(!focus_changed)
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	f083 0301 	eor.w	r3, r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <lv_group_focus_prev+0x34>
            group->edge_cb(group, false);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2100      	movs	r1, #0
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
    }
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	08021a55 	.word	0x08021a55
 8005398:	08021a09 	.word	0x08021a09

0800539c <lv_group_get_editing>:
    if(!group) return NULL;
    return group->edge_cb;
}

bool lv_group_get_editing(const lv_group_t * group)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <lv_group_get_editing+0x12>
 80053aa:	2300      	movs	r3, #0
 80053ac:	e00a      	b.n	80053c4 <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7f1b      	ldrb	r3, [r3, #28]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	7f1b      	ldrb	r3, [r3, #28]
 80053dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	7f13      	ldrb	r3, [r2, #28]
 80053e8:	f043 0308 	orr.w	r3, r3, #8
 80053ec:	7713      	strb	r3, [r2, #28]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7f1b      	ldrb	r3, [r3, #28]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff ff89 	bl	8005314 <lv_group_focus_next>
 8005402:	e009      	b.n	8005418 <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	7f1b      	ldrb	r3, [r3, #28]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff ffa0 	bl	8005358 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	b2d9      	uxtb	r1, r3
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	7f13      	ldrb	r3, [r2, #28]
 8005424:	f361 03c3 	bfi	r3, r1, #3, #1
 8005428:	7713      	strb	r3, [r2, #28]
}
 800542a:	bf00      	nop
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <focus_next_core>:

static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8005432:	b590      	push	{r4, r7, lr}
 8005434:	b08b      	sub	sp, #44	; 0x2c
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
    bool focus_changed = false;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]
    if(group->frozen) return focus_changed;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	7f1b      	ldrb	r3, [r3, #28]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <focus_next_core+0x22>
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	e0c0      	b.n	80055d6 <focus_next_core+0x1a4>

    lv_obj_t ** obj_next     = group->obj_focus;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
    lv_obj_t ** obj_sentinel = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	623b      	str	r3, [r7, #32]
    bool can_move            = true;
 800545e:	2301      	movs	r3, #1
 8005460:	77fb      	strb	r3, [r7, #31]
    bool can_begin           = true;
 8005462:	2301      	movs	r3, #1
 8005464:	77bb      	strb	r3, [r7, #30]

    for(;;) {
        if(obj_next == NULL) {
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11d      	bne.n	80054a8 <focus_next_core+0x76>
            if(group->wrap || obj_sentinel == NULL) {
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	7f1b      	ldrb	r3, [r3, #28]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <focus_next_core+0x4e>
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d111      	bne.n	80054a4 <focus_next_core+0x72>
                if(!can_begin) return focus_changed;
 8005480:	7fbb      	ldrb	r3, [r7, #30]
 8005482:	f083 0301 	eor.w	r3, r3, #1
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <focus_next_core+0x5e>
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	e0a2      	b.n	80055d6 <focus_next_core+0x1a4>
                obj_next  = begin(&group->obj_ll);
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4610      	mov	r0, r2
 8005496:	4798      	blx	r3
 8005498:	6278      	str	r0, [r7, #36]	; 0x24
                can_move  = false;
 800549a:	2300      	movs	r3, #0
 800549c:	77fb      	strb	r3, [r7, #31]
                can_begin = false;
 800549e:	2300      	movs	r3, #0
 80054a0:	77bb      	strb	r3, [r7, #30]
 80054a2:	e001      	b.n	80054a8 <focus_next_core+0x76>
            }
            else {
                /*Currently focused object is the last/first in the group, keep it that way*/
                return focus_changed;
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
 80054a6:	e096      	b.n	80055d6 <focus_next_core+0x1a4>
            }
        }

        if(obj_sentinel == NULL) {
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <focus_next_core+0x8a>
            obj_sentinel = obj_next;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	623b      	str	r3, [r7, #32]
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <focus_next_core+0x8a>
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	e08c      	b.n	80055d6 <focus_next_core+0x1a4>
        }

        if(can_move) {
 80054bc:	7ffb      	ldrb	r3, [r7, #31]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <focus_next_core+0xa8>
            obj_next = move(&group->obj_ll, obj_next);
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
 80054cc:	6278      	str	r0, [r7, #36]	; 0x24

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return focus_changed;
 80054ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d101      	bne.n	80054da <focus_next_core+0xa8>
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	e07d      	b.n	80055d6 <focus_next_core+0x1a4>
        }

        can_move = true;
 80054da:	2301      	movs	r3, #1
 80054dc:	77fb      	strb	r3, [r7, #31]

        if(obj_next == NULL) continue;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d028      	beq.n	8005536 <focus_next_core+0x104>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fd37 	bl	8005f5c <lv_obj_get_state>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d120      	bne.n	800553a <focus_next_core+0x108>

        /*Hidden objects don't receive focus.
         *If any parent is hidden, the object is also hidden)*/
        lv_obj_t * parent = *obj_next;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	61bb      	str	r3, [r7, #24]
        while(parent) {
 80054fe:	e00a      	b.n	8005516 <focus_next_core+0xe4>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8005500:	2101      	movs	r1, #1
 8005502:	69b8      	ldr	r0, [r7, #24]
 8005504:	f000 fd01 	bl	8005f0a <lv_obj_has_flag>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d107      	bne.n	800551e <focus_next_core+0xec>
            parent = lv_obj_get_parent(parent);
 800550e:	69b8      	ldr	r0, [r7, #24]
 8005510:	f008 fd2c 	bl	800df6c <lv_obj_get_parent>
 8005514:	61b8      	str	r0, [r7, #24]
        while(parent) {
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f1      	bne.n	8005500 <focus_next_core+0xce>
 800551c:	e000      	b.n	8005520 <focus_next_core+0xee>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 800551e:	bf00      	nop
        }

        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <focus_next_core+0x10c>
 8005526:	2101      	movs	r1, #1
 8005528:	69b8      	ldr	r0, [r7, #24]
 800552a:	f000 fcee 	bl	8005f0a <lv_obj_has_flag>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <focus_next_core+0x10c>
 8005534:	e002      	b.n	800553c <focus_next_core+0x10a>
        if(obj_next == NULL) continue;
 8005536:	bf00      	nop
 8005538:	e795      	b.n	8005466 <focus_next_core+0x34>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 800553a:	bf00      	nop
    for(;;) {
 800553c:	e793      	b.n	8005466 <focus_next_core+0x34>

        /*If we got her a good candidate is found*/
        break;
 800553e:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005546:	429a      	cmp	r2, r3
 8005548:	d101      	bne.n	800554e <focus_next_core+0x11c>
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	e043      	b.n	80055d6 <focus_next_core+0x1a4>

    if(group->obj_focus) {
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d018      	beq.n	8005588 <focus_next_core+0x156>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	681c      	ldr	r4, [r3, #0]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f83e 	bl	80055de <get_indev>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	210f      	movs	r1, #15
 8005568:	4620      	mov	r0, r4
 800556a:	f7ff faf5 	bl	8004b58 <lv_event_send>
 800556e:	4603      	mov	r3, r0
 8005570:	75bb      	strb	r3, [r7, #22]
        if(res != LV_RES_OK) return focus_changed;
 8005572:	7dbb      	ldrb	r3, [r7, #22]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <focus_next_core+0x14a>
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	e02c      	b.n	80055d6 <focus_next_core+0x1a4>
        lv_obj_invalidate(*group->obj_focus);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f004 f89d 	bl	80096c2 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558c:	60da      	str	r2, [r3, #12]

    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	681c      	ldr	r4, [r3, #0]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f822 	bl	80055de <get_indev>
 800559a:	4603      	mov	r3, r0
 800559c:	461a      	mov	r2, r3
 800559e:	210e      	movs	r1, #14
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff fad9 	bl	8004b58 <lv_event_send>
 80055a6:	4603      	mov	r3, r0
 80055a8:	757b      	strb	r3, [r7, #21]
    if(res != LV_RES_OK) return focus_changed;
 80055aa:	7d7b      	ldrb	r3, [r7, #21]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <focus_next_core+0x182>
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	e010      	b.n	80055d6 <focus_next_core+0x1a4>

    lv_obj_invalidate(*group->obj_focus);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f004 f881 	bl	80096c2 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <focus_next_core+0x19e>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	4798      	blx	r3
    focus_changed = true;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
    return focus_changed;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	372c      	adds	r7, #44	; 0x2c
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd90      	pop	{r4, r7, pc}

080055de <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b086      	sub	sp, #24
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
    lv_indev_t * indev_encoder = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
    lv_indev_t * indev_group = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80055ee:	2000      	movs	r0, #0
 80055f0:	f01a fc2a 	bl	801fe48 <lv_indev_get_next>
 80055f4:	60f8      	str	r0, [r7, #12]
    while(indev) {
 80055f6:	e019      	b.n	800562c <get_indev+0x4e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f839 	bl	8005670 <lv_indev_get_type>
 80055fe:	4603      	mov	r3, r0
 8005600:	72fb      	strb	r3, [r7, #11]
        if(indev->group == g) {
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d10b      	bne.n	8005624 <get_indev+0x46>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 800560c:	7afb      	ldrb	r3, [r7, #11]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d101      	bne.n	8005616 <get_indev+0x38>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	e01b      	b.n	800564e <get_indev+0x70>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8005616:	7afb      	ldrb	r3, [r7, #11]
 8005618:	2b04      	cmp	r3, #4
 800561a:	d101      	bne.n	8005620 <get_indev+0x42>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	617b      	str	r3, [r7, #20]
            indev_group = indev;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	613b      	str	r3, [r7, #16]
        }
        indev = lv_indev_get_next(indev);
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f01a fc0f 	bl	801fe48 <lv_indev_get_next>
 800562a:	60f8      	str	r0, [r7, #12]
    while(indev) {
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e2      	bne.n	80055f8 <get_indev+0x1a>
    }

    if(indev_encoder) return indev_encoder;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <get_indev+0x5e>
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	e008      	b.n	800564e <get_indev+0x70>
    if(indev_group) return indev_group;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <get_indev+0x68>
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	e003      	b.n	800564e <get_indev+0x70>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 8005646:	2000      	movs	r0, #0
 8005648:	f01a fbfe 	bl	801fe48 <lv_indev_get_next>
 800564c:	4603      	mov	r3, r0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <lv_indev_get_act>:
        }
    }
}

lv_indev_t * lv_indev_get_act(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
    return indev_act;
 800565c:	4b03      	ldr	r3, [pc, #12]	; (800566c <lv_indev_get_act+0x14>)
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	200006fc 	.word	0x200006fc

08005670 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <lv_indev_get_type+0x12>
 800567e:	2300      	movs	r3, #0
 8005680:	e002      	b.n	8005688 <lv_indev_get_type+0x18>

    return indev->driver->type;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <lv_indev_reset>:

void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
    if(indev) {
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d038      	beq.n	8005716 <lv_indev_reset+0x82>
        indev->proc.reset_query = 1;
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	7953      	ldrb	r3, [r2, #5]
 80056a8:	f043 0302 	orr.w	r3, r3, #2
 80056ac:	7153      	strb	r3, [r2, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 80056ae:	4b3b      	ldr	r3, [pc, #236]	; (800579c <lv_indev_reset+0x108>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d102      	bne.n	80056be <lv_indev_reset+0x2a>
 80056b8:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <lv_indev_reset+0x10c>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d004      	beq.n	80056d2 <lv_indev_reset+0x3e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d160      	bne.n	8005794 <lv_indev_reset+0x100>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <lv_indev_reset+0x4e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d102      	bne.n	80056e8 <lv_indev_reset+0x54>
                indev->proc.types.pointer.last_pressed = NULL;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	635a      	str	r2, [r3, #52]	; 0x34
            }
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <lv_indev_reset+0x64>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d102      	bne.n	80056fe <lv_indev_reset+0x6a>
                indev->proc.types.pointer.act_obj = NULL;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	629a      	str	r2, [r3, #40]	; 0x28
            }
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <lv_indev_reset+0x7a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d142      	bne.n	8005794 <lv_indev_reset+0x100>
                indev->proc.types.pointer.last_obj = NULL;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c
            }
            i = lv_indev_get_next(i);
        }
        indev_obj_act = NULL;
    }
}
 8005714:	e03e      	b.n	8005794 <lv_indev_reset+0x100>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8005716:	2000      	movs	r0, #0
 8005718:	f01a fb96 	bl	801fe48 <lv_indev_get_next>
 800571c:	60f8      	str	r0, [r7, #12]
        while(i) {
 800571e:	e033      	b.n	8005788 <lv_indev_reset+0xf4>
            i->proc.reset_query = 1;
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	7953      	ldrb	r3, [r2, #5]
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	7153      	strb	r3, [r2, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d004      	beq.n	800573e <lv_indev_reset+0xaa>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d120      	bne.n	8005780 <lv_indev_reset+0xec>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <lv_indev_reset+0xba>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d102      	bne.n	8005754 <lv_indev_reset+0xc0>
                    i->proc.types.pointer.last_pressed = NULL;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	635a      	str	r2, [r3, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d004      	beq.n	8005764 <lv_indev_reset+0xd0>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d102      	bne.n	800576a <lv_indev_reset+0xd6>
                    i->proc.types.pointer.act_obj = NULL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	629a      	str	r2, [r3, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <lv_indev_reset+0xe6>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d102      	bne.n	8005780 <lv_indev_reset+0xec>
                    i->proc.types.pointer.last_obj = NULL;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	62da      	str	r2, [r3, #44]	; 0x2c
            i = lv_indev_get_next(i);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f01a fb61 	bl	801fe48 <lv_indev_get_next>
 8005786:	60f8      	str	r0, [r7, #12]
        while(i) {
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1c8      	bne.n	8005720 <lv_indev_reset+0x8c>
        indev_obj_act = NULL;
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <lv_indev_reset+0x10c>)
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	200006fc 	.word	0x200006fc
 80057a0:	20000700 	.word	0x20000700

080057a4 <lv_indev_get_scroll_dir>:
    else
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <lv_indev_get_scroll_dir+0x12>
 80057b2:	2300      	movs	r3, #0
 80057b4:	e011      	b.n	80057da <lv_indev_get_scroll_dir+0x36>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d006      	beq.n	80057ce <lv_indev_get_scroll_dir+0x2a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d001      	beq.n	80057ce <lv_indev_get_scroll_dir+0x2a>
 80057ca:	2300      	movs	r3, #0
 80057cc:	e005      	b.n	80057da <lv_indev_get_scroll_dir+0x36>
    return indev->proc.types.pointer.scroll_dir;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80057d8:	b2db      	uxtb	r3, r3
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return NULL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <lv_indev_get_scroll_obj+0x12>
 80057f4:	2300      	movs	r3, #0
 80057f6:	e00d      	b.n	8005814 <lv_indev_get_scroll_obj+0x2e>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d006      	beq.n	8005810 <lv_indev_get_scroll_obj+0x2a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d001      	beq.n	8005810 <lv_indev_get_scroll_obj+0x2a>
 800580c:	2300      	movs	r3, #0
 800580e:	e001      	b.n	8005814 <lv_indev_get_scroll_obj+0x2e>
    return indev->proc.types.pointer.scroll_obj;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <lv_indev_get_obj_act>:
    if(indev == NULL)return;
    indev->proc.wait_until_release = 1;
}

lv_obj_t * lv_indev_get_obj_act(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
    return indev_obj_act;
 8005824:	4b03      	ldr	r3, [pc, #12]	; (8005834 <lv_indev_get_obj_act+0x14>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000700 	.word	0x20000700

08005838 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	80da      	strh	r2, [r3, #6]
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b08c      	sub	sp, #48	; 0x30
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	460b      	mov	r3, r1
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	891b      	ldrh	r3, [r3, #8]
 8005888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588c:	4293      	cmp	r3, r2
 800588e:	d137      	bne.n	8005900 <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8005890:	2300      	movs	r3, #0
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005894:	e02c      	b.n	80058f0 <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4413      	add	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80058aa:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 80058ac:	8a7a      	ldrh	r2, [r7, #18]
 80058ae:	897b      	ldrh	r3, [r7, #10]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d11a      	bne.n	80058ea <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b21b      	sxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da01      	bge.n	80058c2 <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 80058be:	2302      	movs	r3, #2
 80058c0:	e098      	b.n	80059f4 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <lv_style_get_prop_inlined+0x68>
 80058ce:	8a7b      	ldrh	r3, [r7, #18]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f01d f9b3 	bl	8022c3c <lv_style_prop_get_default>
 80058d6:	4602      	mov	r2, r0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e003      	b.n	80058e6 <lv_style_get_prop_inlined+0x70>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	6852      	ldr	r2, [r2, #4]
 80058e4:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e084      	b.n	80059f4 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	3301      	adds	r3, #1
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	7adb      	ldrb	r3, [r3, #11]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d3cc      	bcc.n	8005896 <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 80058fc:	2300      	movs	r3, #0
 80058fe:	e079      	b.n	80059f4 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	7adb      	ldrb	r3, [r3, #11]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <lv_style_get_prop_inlined+0x96>
 8005908:	2300      	movs	r3, #0
 800590a:	e073      	b.n	80059f4 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	7adb      	ldrb	r3, [r3, #11]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d948      	bls.n	80059a6 <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	7adb      	ldrb	r3, [r3, #11]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8005926:	2300      	movs	r3, #0
 8005928:	62bb      	str	r3, [r7, #40]	; 0x28
 800592a:	e035      	b.n	8005998 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	6a3a      	ldr	r2, [r7, #32]
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800593a:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 800593c:	8bfa      	ldrh	r2, [r7, #30]
 800593e:	897b      	ldrh	r3, [r7, #10]
 8005940:	429a      	cmp	r2, r3
 8005942:	d126      	bne.n	8005992 <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	6a3a      	ldr	r2, [r7, #32]
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b21b      	sxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	da01      	bge.n	8005958 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8005954:	2302      	movs	r3, #2
 8005956:	e04d      	b.n	80059f4 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	6a3a      	ldr	r2, [r7, #32]
 800595e:	4413      	add	r3, r2
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 800596a:	8bfb      	ldrh	r3, [r7, #30]
 800596c:	4618      	mov	r0, r3
 800596e:	f01d f965 	bl	8022c3c <lv_style_prop_get_default>
 8005972:	4602      	mov	r2, r0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e009      	b.n	800598e <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	441a      	add	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 800598e:	2301      	movs	r3, #1
 8005990:	e030      	b.n	80059f4 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	3301      	adds	r3, #1
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	7adb      	ldrb	r3, [r3, #11]
 800599c:	461a      	mov	r2, r3
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d3c3      	bcc.n	800592c <lv_style_get_prop_inlined+0xb6>
 80059a4:	e025      	b.n	80059f2 <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	891b      	ldrh	r3, [r3, #8]
 80059aa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80059ae:	897b      	ldrh	r3, [r7, #10]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d11e      	bne.n	80059f2 <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	891b      	ldrh	r3, [r3, #8]
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da01      	bge.n	80059c2 <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 80059be:	2302      	movs	r3, #2
 80059c0:	e018      	b.n	80059f4 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	891b      	ldrh	r3, [r3, #8]
 80059c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <lv_style_get_prop_inlined+0x170>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	891b      	ldrh	r3, [r3, #8]
 80059d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	4618      	mov	r0, r3
 80059da:	f01d f92f 	bl	8022c3c <lv_style_prop_get_default>
 80059de:	4602      	mov	r2, r0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e003      	b.n	80059ee <lv_style_get_prop_inlined+0x178>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	6852      	ldr	r2, [r2, #4]
 80059ec:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3730      	adds	r7, #48	; 0x30
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8005a04:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <lv_obj_remove_style_all+0x1c>)
 8005a06:	2100      	movs	r1, #0
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f006 fdd3 	bl	800c5b4 <lv_obj_remove_style>
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	000fffff 	.word	0x000fffff

08005a1c <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005a26:	2201      	movs	r2, #1
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f006 ff92 	bl	800c954 <lv_obj_get_style_prop>
 8005a30:	4603      	mov	r3, r0
 8005a32:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	b21b      	sxth	r3, r3
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <lv_obj_get_style_height>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	6839      	ldr	r1, [r7, #0]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f006 ff80 	bl	800c954 <lv_obj_get_style_prop>
 8005a54:	4603      	mov	r3, r0
 8005a56:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	b21b      	sxth	r3, r3
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <lv_obj_get_style_align>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
    return (lv_coord_t)v.num;
}

static inline lv_align_t lv_obj_get_style_align(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005a6e:	2209      	movs	r2, #9
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f006 ff6e 	bl	800c954 <lv_obj_get_style_prop>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	b2db      	uxtb	r3, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <lv_obj_get_style_transform_width>:

static inline lv_coord_t lv_obj_get_style_transform_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8005a92:	2268      	movs	r2, #104	; 0x68
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f006 ff5c 	bl	800c954 <lv_obj_get_style_prop>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	b21b      	sxth	r3, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <lv_obj_get_style_transform_height>:

static inline lv_coord_t lv_obj_get_style_transform_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8005ab6:	2269      	movs	r2, #105	; 0x69
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f006 ff4a 	bl	800c954 <lv_obj_get_style_prop>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	b21b      	sxth	r3, r3
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005ada:	2210      	movs	r2, #16
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f006 ff38 	bl	800c954 <lv_obj_get_style_prop>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	b21b      	sxth	r3, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005afe:	2212      	movs	r2, #18
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f006 ff26 	bl	800c954 <lv_obj_get_style_prop>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	b21b      	sxth	r3, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8005b22:	2220      	movs	r2, #32
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f006 ff14 	bl	800c954 <lv_obj_get_style_prop>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005b30:	7b3b      	ldrb	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <lv_obj_get_style_bg_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8005b44:	2221      	movs	r2, #33	; 0x21
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f006 ff03 	bl	800c954 <lv_obj_get_style_prop>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	b2db      	uxtb	r3, r3
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <lv_obj_get_style_border_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
    return (bool)v.num;
}

static inline lv_color_t lv_obj_get_style_border_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8005b68:	2230      	movs	r2, #48	; 0x30
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f006 fef1 	bl	800c954 <lv_obj_get_style_prop>
 8005b72:	4603      	mov	r3, r0
 8005b74:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005b76:	7b3b      	ldrb	r3, [r7, #12]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <lv_obj_get_style_border_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8005b8a:	2231      	movs	r2, #49	; 0x31
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f006 fee0 	bl	800c954 <lv_obj_get_style_prop>
 8005b94:	4603      	mov	r3, r0
 8005b96:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	b2db      	uxtb	r3, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <lv_obj_get_style_border_width>:

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005bae:	2232      	movs	r2, #50	; 0x32
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f006 fece 	bl	800c954 <lv_obj_get_style_prop>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	b21b      	sxth	r3, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <lv_obj_get_style_border_post>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8005bd2:	2234      	movs	r2, #52	; 0x34
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f006 febc 	bl	800c954 <lv_obj_get_style_prop>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	bf14      	ite	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	2300      	moveq	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <lv_obj_get_style_shadow_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8005bfe:	2240      	movs	r2, #64	; 0x40
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f006 fea6 	bl	800c954 <lv_obj_get_style_prop>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	b21b      	sxth	r3, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <lv_obj_get_style_shadow_spread>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_spread(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8005c22:	2243      	movs	r2, #67	; 0x43
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f006 fe94 	bl	800c954 <lv_obj_get_style_prop>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	b21b      	sxth	r3, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <lv_obj_get_style_shadow_color>:

static inline lv_color_t lv_obj_get_style_shadow_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8005c46:	2244      	movs	r2, #68	; 0x44
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f006 fe82 	bl	800c954 <lv_obj_get_style_prop>
 8005c50:	4603      	mov	r3, r0
 8005c52:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005c54:	7b3b      	ldrb	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <lv_obj_get_style_shadow_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8005c68:	2245      	movs	r2, #69	; 0x45
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f006 fe71 	bl	800c954 <lv_obj_get_style_prop>
 8005c72:	4603      	mov	r3, r0
 8005c74:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	b2db      	uxtb	r3, r3
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <lv_obj_get_style_radius>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
    return (lv_text_align_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_radius(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8005c8c:	220b      	movs	r2, #11
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f006 fe5f 	bl	800c954 <lv_obj_get_style_prop>
 8005c96:	4603      	mov	r3, r0
 8005c98:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	b21b      	sxth	r3, r3
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <lv_obj_get_style_clip_corner>:

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8005cb0:	2217      	movs	r2, #23
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f006 fe4d 	bl	800c954 <lv_obj_get_style_prop>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bf14      	ite	ne
 8005cc4:	2301      	movne	r3, #1
 8005cc6:	2300      	moveq	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <lv_obj_get_style_opa>:

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8005cdc:	2260      	movs	r2, #96	; 0x60
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f006 fe37 	bl	800c954 <lv_obj_get_style_prop>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	b2db      	uxtb	r3, r3
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <lv_obj_get_style_layout>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005d00:	220a      	movs	r2, #10
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f006 fe25 	bl	800c954 <lv_obj_get_style_prop>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	b29b      	uxth	r3, r3
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <lv_init>:
{
    return lv_initialized;
}

void lv_init(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
    /*Do nothing if already initialized*/
    if(lv_initialized) {
 8005d22:	4b22      	ldr	r3, [pc, #136]	; (8005dac <lv_init+0x90>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d13b      	bne.n	8005da2 <lv_init+0x86>
    }

    LV_LOG_INFO("begin");

    /*Initialize the misc modules*/
    lv_mem_init();
 8005d2a:	f01c f80b 	bl	8021d44 <lv_mem_init>

    _lv_timer_core_init();
 8005d2e:	f01d fa49 	bl	80231c4 <_lv_timer_core_init>

    _lv_fs_init();
 8005d32:	f01b fa5b 	bl	80211ec <_lv_fs_init>

    _lv_anim_core_init();
 8005d36:	f01a f8ed 	bl	801ff14 <_lv_anim_core_init>

    _lv_group_init();
 8005d3a:	f7ff f9f5 	bl	8005128 <_lv_group_init>

    lv_draw_init();
 8005d3e:	f00a f990 	bl	8010062 <lv_draw_init>

#if LV_USE_GPU_NXP_PXP && LV_USE_GPU_NXP_PXP_AUTO_INIT
    PXP_COND_STOP(!lv_gpu_nxp_pxp_init(), "PXP init failed.");
#endif

    _lv_obj_style_init();
 8005d42:	f006 fb93 	bl	800c46c <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8005d46:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8005d4a:	4819      	ldr	r0, [pc, #100]	; (8005db0 <lv_init+0x94>)
 8005d4c:	f01b fd6d 	bl	802182a <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8005d50:	215c      	movs	r1, #92	; 0x5c
 8005d52:	4818      	ldr	r0, [pc, #96]	; (8005db4 <lv_init+0x98>)
 8005d54:	f01b fd69 	bl	802182a <_lv_ll_init>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8005d58:	f008 fb2a 	bl	800e3b0 <_lv_refr_init>

    _lv_img_decoder_init();
 8005d5c:	f00e fb42 	bl	80143e4 <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <lv_init+0x9c>)
 8005d62:	617b      	str	r3, [r7, #20]

    uint8_t * txt_u8 = (uint8_t *)txt;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	613b      	str	r3, [r7, #16]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2bc3      	cmp	r3, #195	; 0xc3
 8005d6e:	d103      	bne.n	8005d78 <lv_init+0x5c>
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3301      	adds	r3, #1
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings have no UTF-8 encoding. Non-ASCII characters won't be displayed.");
    }

    uint32_t endianess_test = 0x11223344;
 8005d78:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <lv_init+0xa0>)
 8005d7a:	607b      	str	r3, [r7, #4]
    uint8_t * endianess_test_p = (uint8_t *) &endianess_test;
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	60fb      	str	r3, [r7, #12]
    bool big_endian = endianess_test_p[0] == 0x11 ? true : false;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b11      	cmp	r3, #17
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	72fb      	strb	r3, [r7, #11]

    if(big_endian) {
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d000      	beq.n	8005d96 <lv_init+0x7a>
        LV_ASSERT_MSG(LV_BIG_ENDIAN_SYSTEM == 1,
 8005d94:	e7fe      	b.n	8005d94 <lv_init+0x78>

#if LV_LOG_LEVEL == LV_LOG_LEVEL_TRACE
    LV_LOG_WARN("Log level is set to 'Trace' which makes LVGL much slower");
#endif

    lv_extra_init();
 8005d96:	f019 fa84 	bl	801f2a2 <lv_extra_init>

    lv_initialized = true;
 8005d9a:	4b04      	ldr	r3, [pc, #16]	; (8005dac <lv_init+0x90>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e000      	b.n	8005da4 <lv_init+0x88>
        return;
 8005da2:	bf00      	nop

    LV_LOG_TRACE("finished");
}
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000704 	.word	0x20000704
 8005db0:	20000868 	.word	0x20000868
 8005db4:	20000874 	.word	0x20000874
 8005db8:	08026770 	.word	0x08026770
 8005dbc:	11223344 	.word	0x11223344

08005dc0 <lv_obj_create>:
#endif
}
#endif

lv_obj_t * lv_obj_create(lv_obj_t * parent)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	4806      	ldr	r0, [pc, #24]	; (8005de4 <lv_obj_create+0x24>)
 8005dcc:	f001 f9b8 	bl	8007140 <lv_obj_class_create_obj>
 8005dd0:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f001 fa69 	bl	80072aa <lv_obj_class_init_obj>
    return obj;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	080267dc 	.word	0x080267dc

08005de8 <lv_obj_clear_flag>:
        lv_obj_invalidate_area(obj, &ver_area);
    }
}

void lv_obj_clear_flag(lv_obj_t * obj, lv_obj_flag_t f)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f002 fe10 	bl	8008a18 <lv_obj_is_layout_positioned>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	77fb      	strb	r3, [r7, #31]
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d013      	beq.n	8005e2e <lv_obj_clear_flag+0x46>
        lv_area_t hor_area, ver_area;
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005e06:	f107 020c 	add.w	r2, r7, #12
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f005 f82f 	bl	800ae74 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8005e16:	f107 0314 	add.w	r3, r7, #20
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f003 fc1b 	bl	8009658 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8005e22:	f107 030c 	add.w	r3, r7, #12
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f003 fc15 	bl	8009658 <lv_obj_invalidate_area>
    }

    obj->flags &= (~f);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69da      	ldr	r2, [r3, #28]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	61da      	str	r2, [r3, #28]

    if(f & LV_OBJ_FLAG_HIDDEN) {
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d012      	beq.n	8005e6c <lv_obj_clear_flag+0x84>
        lv_obj_invalidate(obj);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f003 fc3b 	bl	80096c2 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f002 fde3 	bl	8008a18 <lv_obj_is_layout_positioned>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <lv_obj_clear_flag+0x84>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f008 f887 	bl	800df6c <lv_obj_get_parent>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f002 fe01 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f002 fdfe 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
        }
    }

    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f002 fdd3 	bl	8008a18 <lv_obj_is_layout_positioned>
 8005e72:	4603      	mov	r3, r0
 8005e74:	461a      	mov	r2, r3
 8005e76:	7ffb      	ldrb	r3, [r7, #31]
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d104      	bne.n	8005e86 <lv_obj_clear_flag+0x9e>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f003 73c0 	and.w	r3, r3, #25165824	; 0x1800000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d006      	beq.n	8005e94 <lv_obj_clear_flag+0xac>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f008 f870 	bl	800df6c <lv_obj_get_parent>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f002 fdea 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
    }

}
 8005e94:	bf00      	nop
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <lv_obj_add_state>:

void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state | state;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8c1a      	ldrh	r2, [r3, #32]
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	8c1b      	ldrh	r3, [r3, #32]
 8005eb6:	89fa      	ldrh	r2, [r7, #14]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d004      	beq.n	8005ec6 <lv_obj_add_state+0x2a>
        lv_obj_set_state(obj, new_state);
 8005ebc:	89fb      	ldrh	r3, [r7, #14]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 ffd1 	bl	8006e68 <lv_obj_set_state>
    }
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <lv_obj_clear_state>:

void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state & (~state);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8c1b      	ldrh	r3, [r3, #32]
 8005ede:	b21a      	sxth	r2, r3
 8005ee0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	4013      	ands	r3, r2
 8005eea:	b21b      	sxth	r3, r3
 8005eec:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8c1b      	ldrh	r3, [r3, #32]
 8005ef2:	89fa      	ldrh	r2, [r7, #14]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d004      	beq.n	8005f02 <lv_obj_clear_state+0x34>
        lv_obj_set_state(obj, new_state);
 8005ef8:	89fb      	ldrh	r3, [r7, #14]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 ffb3 	bl	8006e68 <lv_obj_set_state>
    }
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <lv_obj_has_flag>:
/*=======================
 * Getter functions
 *======================*/

bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f)  == f ? true : false;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <lv_obj_has_flag_any>:

bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f) ? true : false;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69da      	ldr	r2, [r3, #28]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf14      	ite	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	2300      	moveq	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->state;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8c1b      	ldrh	r3, [r3, #32]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <lv_obj_get_group>:

    return obj->state & state ? true : false;
}

void * lv_obj_get_group(const lv_obj_t * obj)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr) return obj->spec_attr->group_p;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <lv_obj_get_group+0x18>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	e000      	b.n	8005f8e <lv_obj_get_group+0x1a>
    else return NULL;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <lv_obj_allocate_spec_attr>:
/*-------------------
 * OTHER FUNCTIONS
 *------------------*/

void lv_obj_allocate_spec_attr(lv_obj_t * obj)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) {
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d127      	bne.n	8005ffc <lv_obj_allocate_spec_attr+0x60>
        static uint32_t x = 0;
        x++;
 8005fac:	4b15      	ldr	r3, [pc, #84]	; (8006004 <lv_obj_allocate_spec_attr+0x68>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	4a14      	ldr	r2, [pc, #80]	; (8006004 <lv_obj_allocate_spec_attr+0x68>)
 8005fb4:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8005fb6:	201c      	movs	r0, #28
 8005fb8:	f01b fed4 	bl	8021d64 <lv_mem_alloc>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d100      	bne.n	8005fcc <lv_obj_allocate_spec_attr+0x30>
 8005fca:	e7fe      	b.n	8005fca <lv_obj_allocate_spec_attr+0x2e>
        if(obj->spec_attr == NULL) return;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d012      	beq.n	8005ffa <lv_obj_allocate_spec_attr+0x5e>

        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	211c      	movs	r1, #28
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f01c faf6 	bl	80225cc <lv_memset_00>

        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	7e53      	ldrb	r3, [r2, #25]
 8005fe6:	f043 030f 	orr.w	r3, r3, #15
 8005fea:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	7e13      	ldrb	r3, [r2, #24]
 8005ff2:	f043 0303 	orr.w	r3, r3, #3
 8005ff6:	7613      	strb	r3, [r2, #24]
 8005ff8:	e000      	b.n	8005ffc <lv_obj_allocate_spec_attr+0x60>
        if(obj->spec_attr == NULL) return;
 8005ffa:	bf00      	nop
    }
}
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000708 	.word	0x20000708

08006008 <lv_obj_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_t * parent = obj->parent;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	60fb      	str	r3, [r7, #12]
    if(parent) {
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d03f      	beq.n	800609e <lv_obj_constructor+0x96>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f004 fb1e 	bl	800a660 <lv_obj_get_scroll_left>
 8006024:	4603      	mov	r3, r0
 8006026:	817b      	strh	r3, [r7, #10]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f004 fa7b 	bl	800a524 <lv_obj_get_scroll_top>
 800602e:	4603      	mov	r3, r0
 8006030:	813b      	strh	r3, [r7, #8]

        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006038:	b29c      	uxth	r4, r3
 800603a:	2100      	movs	r1, #0
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff fd47 	bl	8005ad0 <lv_obj_get_style_pad_top>
 8006042:	4603      	mov	r3, r0
 8006044:	b29b      	uxth	r3, r3
 8006046:	4423      	add	r3, r4
 8006048:	b29a      	uxth	r2, r3
 800604a:	893b      	ldrh	r3, [r7, #8]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	b21a      	sxth	r2, r3
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	82da      	strh	r2, [r3, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	b21a      	sxth	r2, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	835a      	strh	r2, [r3, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800606e:	b29c      	uxth	r4, r3
 8006070:	2100      	movs	r1, #0
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fd3e 	bl	8005af4 <lv_obj_get_style_pad_left>
 8006078:	4603      	mov	r3, r0
 800607a:	b29b      	uxth	r3, r3
 800607c:	4423      	add	r3, r4
 800607e:	b29a      	uxth	r2, r3
 8006080:	897b      	ldrh	r3, [r7, #10]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	b29b      	uxth	r3, r3
 8006086:	b21a      	sxth	r2, r3
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	829a      	strh	r2, [r3, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	b21a      	sxth	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	831a      	strh	r2, [r3, #24]
    }

    /*Set attributes*/
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2202      	movs	r2, #2
 80060a2:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <lv_obj_constructor+0xba>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <lv_obj_constructor+0xcc>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f043 0204 	orr.w	r2, r3, #4
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f043 0210 	orr.w	r2, r3, #16
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <lv_obj_constructor+0x11a>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	61da      	str	r2, [r3, #28]

    LV_TRACE_OBJ_CREATE("finished");
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bd90      	pop	{r4, r7, pc}

0800612a <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    _lv_event_mark_deleted(obj);
 8006134:	6838      	ldr	r0, [r7, #0]
 8006136:	f7fe fdc3 	bl	8004cc0 <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 800613a:	2000      	movs	r0, #0
 800613c:	f006 fbfa 	bl	800c934 <lv_obj_enable_style_refresh>
    lv_obj_remove_style_all(obj);
 8006140:	6838      	ldr	r0, [r7, #0]
 8006142:	f7ff fc5b 	bl	80059fc <lv_obj_remove_style_all>
    lv_obj_enable_style_refresh(true);
 8006146:	2001      	movs	r0, #1
 8006148:	f006 fbf4 	bl	800c934 <lv_obj_enable_style_refresh>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 800614c:	2100      	movs	r1, #0
 800614e:	6838      	ldr	r0, [r7, #0]
 8006150:	f019 ff9c 	bl	802008c <lv_anim_del>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 8006154:	6838      	ldr	r0, [r7, #0]
 8006156:	f7ff ff0d 	bl	8005f74 <lv_obj_get_group>
 800615a:	60f8      	str	r0, [r7, #12]
    if(group) lv_group_remove_obj(obj);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <lv_obj_destructor+0x3e>
 8006162:	6838      	ldr	r0, [r7, #0]
 8006164:	f7ff f85a 	bl	800521c <lv_group_remove_obj>

    if(obj->spec_attr) {
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d025      	beq.n	80061bc <lv_obj_destructor+0x92>
        if(obj->spec_attr->children) {
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <lv_obj_destructor+0x64>
            lv_mem_free(obj->spec_attr->children);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f01b fe1f 	bl	8021dc4 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <lv_obj_destructor+0x82>
            lv_mem_free(obj->spec_attr->event_dsc);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	4618      	mov	r0, r3
 80061a0:	f01b fe10 	bl	8021dc4 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2200      	movs	r2, #0
 80061aa:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f01b fe07 	bl	8021dc4 <lv_mem_free>
        obj->spec_attr = NULL;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2200      	movs	r2, #0
 80061ba:	609a      	str	r2, [r3, #8]
    }
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <lv_obj_draw>:

static void lv_obj_draw(lv_event_t * e)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b0b4      	sub	sp, #208	; 0xd0
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
    lv_event_code_t code = lv_event_get_code(e);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fe fd5b 	bl	8004c88 <lv_event_get_code>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    lv_obj_t * obj = lv_event_get_target(e);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fe fd3d 	bl	8004c58 <lv_event_get_target>
 80061de:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if(code == LV_EVENT_COVER_CHECK) {
 80061e2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80061e6:	2b12      	cmp	r3, #18
 80061e8:	f040 8089 	bne.w	80062fe <lv_obj_draw+0x13a>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fe fd5a 	bl	8004ca6 <lv_event_get_param>
 80061f2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if(info->res == LV_COVER_RES_MASKED) return;
 80061f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	f000 8227 	beq.w	8006650 <lv_obj_draw+0x48c>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8006202:	2100      	movs	r1, #0
 8006204:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006208:	f7ff fd4d 	bl	8005ca6 <lv_obj_get_style_clip_corner>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <lv_obj_draw+0x58>
            info->res = LV_COVER_RES_MASKED;
 8006212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006216:	2202      	movs	r2, #2
 8006218:	701a      	strb	r2, [r3, #0]
            return;
 800621a:	e21a      	b.n	8006652 <lv_obj_draw+0x48e>
        }

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_PART_MAIN);
 800621c:	2100      	movs	r1, #0
 800621e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006222:	f7ff fd2e 	bl	8005c82 <lv_obj_get_style_radius>
 8006226:	4603      	mov	r3, r0
 8006228:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 800622c:	2100      	movs	r1, #0
 800622e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006232:	f7ff fc29 	bl	8005a88 <lv_obj_get_style_transform_width>
 8006236:	4603      	mov	r3, r0
 8006238:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 800623c:	2100      	movs	r1, #0
 800623e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006242:	f7ff fc33 	bl	8005aac <lv_obj_get_style_transform_height>
 8006246:	4603      	mov	r3, r0
 8006248:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 800624c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006250:	f103 0214 	add.w	r2, r3, #20
 8006254:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff faec 	bl	8005838 <lv_area_copy>
        coords.x1 -= w;
 8006260:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8006264:	b29a      	uxth	r2, r3
 8006266:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	b29b      	uxth	r3, r3
 800626e:	b21b      	sxth	r3, r3
 8006270:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.x2 += w;
 8006274:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800627e:	4413      	add	r3, r2
 8006280:	b29b      	uxth	r3, r3
 8006282:	b21b      	sxth	r3, r3
 8006284:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        coords.y1 -= h;
 8006288:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800628c:	b29a      	uxth	r2, r3
 800628e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	b29b      	uxth	r3, r3
 8006296:	b21b      	sxth	r3, r3
 8006298:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        coords.y2 += h;
 800629c:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80062a6:	4413      	add	r3, r2
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	b21b      	sxth	r3, r3
 80062ac:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80062b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 80062ba:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80062be:	4618      	mov	r0, r3
 80062c0:	f01a fc14 	bl	8020aec <_lv_area_is_in>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f083 0301 	eor.w	r3, r3, #1
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <lv_obj_draw+0x116>
            info->res = LV_COVER_RES_NOT_COVER;
 80062d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062d4:	2201      	movs	r2, #1
 80062d6:	701a      	strb	r2, [r3, #0]
            return;
 80062d8:	e1bb      	b.n	8006652 <lv_obj_draw+0x48e>
        }

        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 80062da:	2100      	movs	r1, #0
 80062dc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80062e0:	f7ff fc2b 	bl	8005b3a <lv_obj_get_style_bg_opa>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2bfc      	cmp	r3, #252	; 0xfc
 80062e8:	d804      	bhi.n	80062f4 <lv_obj_draw+0x130>
            info->res = LV_COVER_RES_NOT_COVER;
 80062ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
            return;
 80062f2:	e1ae      	b.n	8006652 <lv_obj_draw+0x48e>
        }

        info->res = LV_COVER_RES_COVER;
 80062f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	e1a9      	b.n	8006652 <lv_obj_draw+0x48e>

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 80062fe:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8006302:	2b15      	cmp	r3, #21
 8006304:	f040 80e7 	bne.w	80064d6 <lv_obj_draw+0x312>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7fe fd4d 	bl	8004da8 <lv_event_get_draw_ctx>
 800630e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 8006312:	f107 030c 	add.w	r3, r7, #12
 8006316:	4618      	mov	r0, r3
 8006318:	f00d fe88 	bl	801402c <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 800631c:	2100      	movs	r1, #0
 800631e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006322:	f7ff fc51 	bl	8005bc8 <lv_obj_get_style_border_post>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <lv_obj_draw+0x174>
            draw_dsc.border_post = 1;
 800632c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006330:	f043 0301 	orr.w	r3, r3, #1
 8006334:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }

        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	461a      	mov	r2, r3
 800633e:	2100      	movs	r1, #0
 8006340:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006344:	f001 fb9c 	bl	8007a80 <lv_obj_init_draw_rect_dsc>
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 8006348:	2100      	movs	r1, #0
 800634a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800634e:	f7ff fb9b 	bl	8005a88 <lv_obj_get_style_transform_width>
 8006352:	4603      	mov	r3, r0
 8006354:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8006358:	2100      	movs	r1, #0
 800635a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800635e:	f7ff fba5 	bl	8005aac <lv_obj_get_style_transform_height>
 8006362:	4603      	mov	r3, r0
 8006364:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8006368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800636c:	f103 0214 	add.w	r2, r3, #20
 8006370:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fa5e 	bl	8005838 <lv_area_copy>
        coords.x1 -= w;
 800637c:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8006380:	b29a      	uxth	r2, r3
 8006382:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	b29b      	uxth	r3, r3
 800638a:	b21b      	sxth	r3, r3
 800638c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.x2 += w;
 8006390:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800639a:	4413      	add	r3, r2
 800639c:	b29b      	uxth	r3, r3
 800639e:	b21b      	sxth	r3, r3
 80063a0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.y1 -= h;
 80063a4:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
        coords.y2 += h;
 80063b8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80063bc:	b29a      	uxth	r2, r3
 80063be:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80063c2:	4413      	add	r3, r2
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	b21b      	sxth	r3, r3
 80063c8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

        lv_obj_draw_part_dsc_t part_dsc;
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80063cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80063d0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 fe2f 	bl	8008038 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 80063da:	4b9f      	ldr	r3, [pc, #636]	; (8006658 <lv_obj_draw+0x494>)
 80063dc:	643b      	str	r3, [r7, #64]	; 0x40
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80063de:	2300      	movs	r3, #0
 80063e0:	647b      	str	r3, [r7, #68]	; 0x44
        part_dsc.rect_dsc = &draw_dsc;
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
        part_dsc.draw_area = &coords;
 80063e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80063ec:	64bb      	str	r3, [r7, #72]	; 0x48
        part_dsc.part = LV_PART_MAIN;
 80063ee:	2300      	movs	r3, #0
 80063f0:	673b      	str	r3, [r7, #112]	; 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80063f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80063f6:	461a      	mov	r2, r3
 80063f8:	211a      	movs	r1, #26
 80063fa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80063fe:	f7fe fbab 	bl	8004b58 <lv_event_send>

#if LV_DRAW_COMPLEX
        /*With clip corner enabled draw the bg img separately to make it clipped*/
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8006402:	2100      	movs	r1, #0
 8006404:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006408:	f7ff fc4d 	bl	8005ca6 <lv_obj_get_style_clip_corner>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <lv_obj_draw+0x25a>
 8006412:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <lv_obj_draw+0x25a>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <lv_obj_draw+0x25c>
 800641e:	2300      	movs	r3, #0
 8006420:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006424:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
        const void * bg_img_src = draw_dsc.bg_img_src;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if(clip_corner) {
 8006436:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <lv_obj_draw+0x27e>
            draw_dsc.bg_img_src = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
        }
#endif

        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8006442:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006446:	f107 030c 	add.w	r3, r7, #12
 800644a:	4619      	mov	r1, r3
 800644c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006450:	f00d fe30 	bl	80140b4 <lv_draw_rect>


#if LV_DRAW_COMPLEX
        if(clip_corner) {
 8006454:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d033      	beq.n	80064c4 <lv_obj_draw+0x300>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 800645c:	2018      	movs	r0, #24
 800645e:	f01b fd0b 	bl	8021e78 <lv_mem_buf_get>
 8006462:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8006466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800646a:	f103 0114 	add.w	r1, r3, #20
 800646e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006472:	2300      	movs	r3, #0
 8006474:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006478:	f00b fddc 	bl	8012034 <lv_draw_mask_radius_init>
            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 800647c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006480:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006484:	4619      	mov	r1, r3
 8006486:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800648a:	f00b fa07 	bl	801189c <lv_draw_mask_add>

            if(bg_img_src) {
 800648e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006492:	2b00      	cmp	r3, #0
 8006494:	d016      	beq.n	80064c4 <lv_obj_draw+0x300>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 800649a:	2300      	movs	r3, #0
 800649c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                draw_dsc.bg_img_src = bg_img_src;
 80064ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064b0:	61bb      	str	r3, [r7, #24]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80064b2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	4619      	mov	r1, r3
 80064bc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80064c0:	f00d fdf8 	bl	80140b4 <lv_draw_rect>
            }

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80064c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064c8:	461a      	mov	r2, r3
 80064ca:	211b      	movs	r1, #27
 80064cc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80064d0:	f7fe fb42 	bl	8004b58 <lv_event_send>
 80064d4:	e0bd      	b.n	8006652 <lv_obj_draw+0x48e>
    }
    else if(code == LV_EVENT_DRAW_POST) {
 80064d6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80064da:	2b18      	cmp	r3, #24
 80064dc:	f040 80b9 	bne.w	8006652 <lv_obj_draw+0x48e>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7fe fc61 	bl	8004da8 <lv_event_get_draw_ctx>
 80064e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        draw_scrollbar(obj, draw_ctx);
 80064ea:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80064ee:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80064f2:	f000 f8b3 	bl	800665c <draw_scrollbar>

#if LV_DRAW_COMPLEX
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80064f6:	2100      	movs	r1, #0
 80064f8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80064fc:	f7ff fbd3 	bl	8005ca6 <lv_obj_get_style_clip_corner>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d014      	beq.n	8006530 <lv_obj_draw+0x36c>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8006506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800650a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800650e:	4618      	mov	r0, r3
 8006510:	f00b fa62 	bl	80119d8 <lv_draw_mask_remove_custom>
 8006514:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
            if(param) {
 8006518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <lv_obj_draw+0x36c>
                lv_draw_mask_free_param(param);
 8006520:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8006524:	f00b fa80 	bl	8011a28 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 8006528:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800652c:	f01b fd50 	bl	8021fd0 <lv_mem_buf_release>
            }
        }
#endif

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8006530:	2100      	movs	r1, #0
 8006532:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006536:	f7ff fb47 	bl	8005bc8 <lv_obj_get_style_border_post>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8088 	beq.w	8006652 <lv_obj_draw+0x48e>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 8006542:	f107 030c 	add.w	r3, r7, #12
 8006546:	4618      	mov	r0, r3
 8006548:	f00d fd70 	bl	801402c <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8006550:	2300      	movs	r3, #0
 8006552:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8006556:	2300      	movs	r3, #0
 8006558:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 800655c:	2300      	movs	r3, #0
 800655e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8006562:	f107 030c 	add.w	r3, r7, #12
 8006566:	461a      	mov	r2, r3
 8006568:	2100      	movs	r1, #0
 800656a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800656e:	f001 fa87 	bl	8007a80 <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 8006572:	2100      	movs	r1, #0
 8006574:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006578:	f7ff fa86 	bl	8005a88 <lv_obj_get_style_transform_width>
 800657c:	4603      	mov	r3, r0
 800657e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8006582:	2100      	movs	r1, #0
 8006584:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006588:	f7ff fa90 	bl	8005aac <lv_obj_get_style_transform_height>
 800658c:	4603      	mov	r3, r0
 800658e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 8006592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006596:	f103 0214 	add.w	r2, r3, #20
 800659a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800659e:	4611      	mov	r1, r2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff f949 	bl	8005838 <lv_area_copy>
            coords.x1 -= w;
 80065a6:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	b21b      	sxth	r3, r3
 80065b6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
            coords.x2 += w;
 80065ba:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 80065be:	b29a      	uxth	r2, r3
 80065c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065c4:	4413      	add	r3, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	b21b      	sxth	r3, r3
 80065ca:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
            coords.y1 -= h;
 80065ce:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	b29b      	uxth	r3, r3
 80065dc:	b21b      	sxth	r3, r3
 80065de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            coords.y2 += h;
 80065e2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80065ec:	4413      	add	r3, r2
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	b21b      	sxth	r3, r3
 80065f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            lv_obj_draw_part_dsc_t part_dsc;
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80065f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065fa:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 fd1a 	bl	8008038 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8006604:	4b14      	ldr	r3, [pc, #80]	; (8006658 <lv_obj_draw+0x494>)
 8006606:	643b      	str	r3, [r7, #64]	; 0x40
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8006608:	2301      	movs	r3, #1
 800660a:	647b      	str	r3, [r7, #68]	; 0x44
            part_dsc.rect_dsc = &draw_dsc;
 800660c:	f107 030c 	add.w	r3, r7, #12
 8006610:	64fb      	str	r3, [r7, #76]	; 0x4c
            part_dsc.draw_area = &coords;
 8006612:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006616:	64bb      	str	r3, [r7, #72]	; 0x48
            part_dsc.part = LV_PART_MAIN;
 8006618:	2300      	movs	r3, #0
 800661a:	673b      	str	r3, [r7, #112]	; 0x70
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800661c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006620:	461a      	mov	r2, r3
 8006622:	211a      	movs	r1, #26
 8006624:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006628:	f7fe fa96 	bl	8004b58 <lv_event_send>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 800662c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006630:	f107 030c 	add.w	r3, r7, #12
 8006634:	4619      	mov	r1, r3
 8006636:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800663a:	f00d fd3b 	bl	80140b4 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 800663e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006642:	461a      	mov	r2, r3
 8006644:	211b      	movs	r1, #27
 8006646:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800664a:	f7fe fa85 	bl	8004b58 <lv_event_send>
 800664e:	e000      	b.n	8006652 <lv_obj_draw+0x48e>
        if(info->res == LV_COVER_RES_MASKED) return;
 8006650:	bf00      	nop
        }
    }
}
 8006652:	37d0      	adds	r7, #208	; 0xd0
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	080267dc 	.word	0x080267dc

0800665c <draw_scrollbar>:

static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b0a6      	sub	sp, #152	; 0x98
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006666:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800666a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f004 fbff 	bl	800ae74 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8006676:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800667a:	4618      	mov	r0, r3
 800667c:	f019 ffc5 	bl	802060a <lv_area_get_size>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d107      	bne.n	8006696 <draw_scrollbar+0x3a>
 8006686:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800668a:	4618      	mov	r0, r3
 800668c:	f019 ffbd 	bl	802060a <lv_area_get_size>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d062      	beq.n	800675c <draw_scrollbar+0x100>

    lv_draw_rect_dsc_t draw_dsc;
    lv_res_t sb_res = scrollbar_init_draw_dsc(obj, &draw_dsc);
 8006696:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f865 	bl	800676c <scrollbar_init_draw_dsc>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(sb_res != LV_RES_OK) return;
 80066a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d157      	bne.n	8006760 <draw_scrollbar+0x104>

    lv_obj_draw_part_dsc_t part_dsc;
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80066b0:	f107 030c 	add.w	r3, r7, #12
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 fcbe 	bl	8008038 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 80066bc:	4b2a      	ldr	r3, [pc, #168]	; (8006768 <draw_scrollbar+0x10c>)
 80066be:	613b      	str	r3, [r7, #16]
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 80066c0:	2302      	movs	r3, #2
 80066c2:	617b      	str	r3, [r7, #20]
    part_dsc.rect_dsc = &draw_dsc;
 80066c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80066c8:	61fb      	str	r3, [r7, #28]
    part_dsc.part = LV_PART_SCROLLBAR;
 80066ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066ce:	643b      	str	r3, [r7, #64]	; 0x40

    if(lv_area_get_size(&hor_area) > 0) {
 80066d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80066d4:	4618      	mov	r0, r3
 80066d6:	f019 ff98 	bl	802060a <lv_area_get_size>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d018      	beq.n	8006712 <draw_scrollbar+0xb6>
        part_dsc.draw_area = &hor_area;
 80066e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80066e4:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80066e6:	f107 030c 	add.w	r3, r7, #12
 80066ea:	461a      	mov	r2, r3
 80066ec:	211a      	movs	r1, #26
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fe fa32 	bl	8004b58 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 80066f4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80066f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80066fc:	4619      	mov	r1, r3
 80066fe:	6838      	ldr	r0, [r7, #0]
 8006700:	f00d fcd8 	bl	80140b4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006704:	f107 030c 	add.w	r3, r7, #12
 8006708:	461a      	mov	r2, r3
 800670a:	211b      	movs	r1, #27
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fe fa23 	bl	8004b58 <lv_event_send>
    }
    if(lv_area_get_size(&ver_area) > 0) {
 8006712:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006716:	4618      	mov	r0, r3
 8006718:	f019 ff77 	bl	802060a <lv_area_get_size>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01f      	beq.n	8006762 <draw_scrollbar+0x106>
        part_dsc.draw_area = &ver_area;
 8006722:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006726:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8006728:	f107 030c 	add.w	r3, r7, #12
 800672c:	461a      	mov	r2, r3
 800672e:	211a      	movs	r1, #26
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7fe fa11 	bl	8004b58 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 8006736:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800673a:	61bb      	str	r3, [r7, #24]
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 800673c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006744:	4619      	mov	r1, r3
 8006746:	6838      	ldr	r0, [r7, #0]
 8006748:	f00d fcb4 	bl	80140b4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 800674c:	f107 030c 	add.w	r3, r7, #12
 8006750:	461a      	mov	r2, r3
 8006752:	211b      	movs	r1, #27
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fe f9ff 	bl	8004b58 <lv_event_send>
 800675a:	e002      	b.n	8006762 <draw_scrollbar+0x106>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800675c:	bf00      	nop
 800675e:	e000      	b.n	8006762 <draw_scrollbar+0x106>
    if(sb_res != LV_RES_OK) return;
 8006760:	bf00      	nop
    }
}
 8006762:	3798      	adds	r7, #152	; 0x98
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	080267dc 	.word	0x080267dc

0800676c <scrollbar_init_draw_dsc>:
 * @param obj pointer to an object
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
    lv_draw_rect_dsc_init(dsc);
 8006776:	6838      	ldr	r0, [r7, #0]
 8006778:	f00d fc58 	bl	801402c <lv_draw_rect_dsc_init>
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 800677c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff f9da 	bl	8005b3a <lv_obj_get_style_bg_opa>
 8006786:	4603      	mov	r3, r0
 8006788:	461a      	mov	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	70da      	strb	r2, [r3, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d906      	bls.n	80067a4 <scrollbar_init_draw_dsc+0x38>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8006796:	683c      	ldr	r4, [r7, #0]
 8006798:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff f9bb 	bl	8005b18 <lv_obj_get_style_bg_color>
 80067a2:	7120      	strb	r0, [r4, #4]
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 80067a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff f9e9 	bl	8005b80 <lv_obj_get_style_border_opa>
 80067ae:	4603      	mov	r3, r0
 80067b0:	461a      	mov	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	771a      	strb	r2, [r3, #28]
    if(dsc->border_opa > LV_OPA_MIN) {
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	7f1b      	ldrb	r3, [r3, #28]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d918      	bls.n	80067f0 <scrollbar_init_draw_dsc+0x84>
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 80067be:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff f9ee 	bl	8005ba4 <lv_obj_get_style_border_width>
 80067c8:	4603      	mov	r3, r0
 80067ca:	461a      	mov	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	835a      	strh	r2, [r3, #26]
        if(dsc->border_width > 0) {
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dd07      	ble.n	80067ea <scrollbar_init_draw_dsc+0x7e>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 80067da:	683c      	ldr	r4, [r7, #0]
 80067dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff f9bc 	bl	8005b5e <lv_obj_get_style_border_color>
 80067e6:	7620      	strb	r0, [r4, #24]
 80067e8:	e002      	b.n	80067f0 <scrollbar_init_draw_dsc+0x84>
        }
        else {
            dsc->border_opa = LV_OPA_TRANSP;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 80067f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff fa32 	bl	8005c5e <lv_obj_get_style_shadow_opa>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800680a:	2b02      	cmp	r3, #2
 800680c:	d923      	bls.n	8006856 <scrollbar_init_draw_dsc+0xea>
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 800680e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff f9ee 	bl	8005bf4 <lv_obj_get_style_shadow_width>
 8006818:	4603      	mov	r3, r0
 800681a:	461a      	mov	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	84da      	strh	r2, [r3, #38]	; 0x26
        if(dsc->shadow_width > 0) {
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8006826:	2b00      	cmp	r3, #0
 8006828:	dd11      	ble.n	800684e <scrollbar_init_draw_dsc+0xe2>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 800682a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff f9f2 	bl	8005c18 <lv_obj_get_style_shadow_spread>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	859a      	strh	r2, [r3, #44]	; 0x2c
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 800683c:	683c      	ldr	r4, [r7, #0]
 800683e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff f9fa 	bl	8005c3c <lv_obj_get_style_shadow_color>
 8006848:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 800684c:	e003      	b.n	8006856 <scrollbar_init_draw_dsc+0xea>
        }
        else {
            dsc->shadow_opa = LV_OPA_TRANSP;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
 8006856:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff fa39 	bl	8005cd2 <lv_obj_get_style_opa>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]
    if(opa < LV_OPA_MAX) {
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2bfc      	cmp	r3, #252	; 0xfc
 8006868:	d81e      	bhi.n	80068a8 <scrollbar_init_draw_dsc+0x13c>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	78db      	ldrb	r3, [r3, #3]
 800686e:	461a      	mov	r2, r3
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	121b      	asrs	r3, r3, #8
 8006878:	b2da      	uxtb	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	70da      	strb	r2, [r3, #3]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	78db      	ldrb	r3, [r3, #3]
 8006882:	461a      	mov	r2, r3
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	121b      	asrs	r3, r3, #8
 800688c:	b2da      	uxtb	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	771a      	strb	r2, [r3, #28]
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	78db      	ldrb	r3, [r3, #3]
 8006896:	461a      	mov	r2, r3
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	fb02 f303 	mul.w	r3, r2, r3
 800689e:	121b      	asrs	r3, r3, #8
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	78db      	ldrb	r3, [r3, #3]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d108      	bne.n	80068c2 <scrollbar_init_draw_dsc+0x156>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	7f1b      	ldrb	r3, [r3, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <scrollbar_init_draw_dsc+0x156>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <scrollbar_init_draw_dsc+0x16c>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 80068c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff f9db 	bl	8005c82 <lv_obj_get_style_radius>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	801a      	strh	r2, [r3, #0]
        return LV_RES_OK;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <scrollbar_init_draw_dsc+0x16e>
    }
    else {
        return LV_RES_INV;
 80068d8:	2300      	movs	r3, #0
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
    else return LV_RES_INV;
#endif
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd90      	pop	{r4, r7, pc}

080068e2 <lv_obj_event>:

static void lv_obj_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80068e2:	b590      	push	{r4, r7, lr}
 80068e4:	b09b      	sub	sp, #108	; 0x6c
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 80068ec:	6838      	ldr	r0, [r7, #0]
 80068ee:	f7fe f9cb 	bl	8004c88 <lv_event_get_code>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_obj_t * obj = lv_event_get_current_target(e);
 80068f8:	6838      	ldr	r0, [r7, #0]
 80068fa:	f7fe f9b9 	bl	8004c70 <lv_event_get_current_target>
 80068fe:	6538      	str	r0, [r7, #80]	; 0x50
    if(code == LV_EVENT_PRESSED) {
 8006900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006904:	2b01      	cmp	r3, #1
 8006906:	d104      	bne.n	8006912 <lv_obj_event+0x30>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8006908:	2120      	movs	r1, #32
 800690a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800690c:	f7ff fac6 	bl	8005e9c <lv_obj_add_state>
 8006910:	e2a7      	b.n	8006e62 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_RELEASED) {
 8006912:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006916:	2b08      	cmp	r3, #8
 8006918:	d131      	bne.n	800697e <lv_obj_event+0x9c>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 800691a:	2120      	movs	r1, #32
 800691c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800691e:	f7ff fad6 	bl	8005ece <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8006922:	6838      	ldr	r0, [r7, #0]
 8006924:	f7fe f9bf 	bl	8004ca6 <lv_event_get_param>
 8006928:	6238      	str	r0, [r7, #32]
        /*Go the checked state if enabled*/
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 800692a:	6a38      	ldr	r0, [r7, #32]
 800692c:	f7fe ff5b 	bl	80057e6 <lv_indev_get_scroll_obj>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	f040 8295 	bne.w	8006e62 <lv_obj_event+0x580>
 8006938:	2108      	movs	r1, #8
 800693a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800693c:	f7ff fae5 	bl	8005f0a <lv_obj_has_flag>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 828d 	beq.w	8006e62 <lv_obj_event+0x580>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8006948:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800694a:	f7ff fb07 	bl	8005f5c <lv_obj_get_state>
 800694e:	4603      	mov	r3, r0
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d104      	bne.n	8006962 <lv_obj_event+0x80>
 8006958:	2101      	movs	r1, #1
 800695a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800695c:	f7ff fa9e 	bl	8005e9c <lv_obj_add_state>
 8006960:	e003      	b.n	800696a <lv_obj_event+0x88>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8006962:	2101      	movs	r1, #1
 8006964:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006966:	f7ff fab2 	bl	8005ece <lv_obj_clear_state>

            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800696a:	2200      	movs	r2, #0
 800696c:	211c      	movs	r1, #28
 800696e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006970:	f7fe f8f2 	bl	8004b58 <lv_event_send>
 8006974:	4603      	mov	r3, r0
 8006976:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) return;
 8006978:	7ffb      	ldrb	r3, [r7, #31]
 800697a:	2b01      	cmp	r3, #1
 800697c:	e271      	b.n	8006e62 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_PRESS_LOST) {
 800697e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006982:	2b03      	cmp	r3, #3
 8006984:	d104      	bne.n	8006990 <lv_obj_event+0xae>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8006986:	2120      	movs	r1, #32
 8006988:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800698a:	f7ff faa0 	bl	8005ece <lv_obj_clear_state>
 800698e:	e268      	b.n	8006e62 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8006990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006994:	2b2a      	cmp	r3, #42	; 0x2a
 8006996:	d119      	bne.n	80069cc <lv_obj_event+0xea>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006998:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800699a:	f007 fb2b 	bl	800dff4 <lv_obj_get_child_cnt>
 800699e:	62b8      	str	r0, [r7, #40]	; 0x28
        for(uint32_t i = 0; i < child_cnt; i++) {
 80069a0:	2300      	movs	r3, #0
 80069a2:	667b      	str	r3, [r7, #100]	; 0x64
 80069a4:	e00d      	b.n	80069c2 <lv_obj_event+0xe0>
            lv_obj_t * child = obj->spec_attr->children[i];
 80069a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
            lv_obj_mark_layout_as_dirty(child);
 80069b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069b8:	f002 f856 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 80069bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069be:	3301      	adds	r3, #1
 80069c0:	667b      	str	r3, [r7, #100]	; 0x64
 80069c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d3ed      	bcc.n	80069a6 <lv_obj_event+0xc4>
 80069ca:	e24a      	b.n	8006e62 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_KEY) {
 80069cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069d0:	2b0d      	cmp	r3, #13
 80069d2:	f040 8126 	bne.w	8006c22 <lv_obj_event+0x340>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 80069d6:	2108      	movs	r1, #8
 80069d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80069da:	f7ff fa96 	bl	8005f0a <lv_obj_has_flag>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d030      	beq.n	8006a46 <lv_obj_event+0x164>
            char c = *((char *)lv_event_get_param(e));
 80069e4:	6838      	ldr	r0, [r7, #0]
 80069e6:	f7fe f95e 	bl	8004ca6 <lv_event_get_param>
 80069ea:	4603      	mov	r3, r0
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80069f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069f6:	2b13      	cmp	r3, #19
 80069f8:	d003      	beq.n	8006a02 <lv_obj_event+0x120>
 80069fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069fe:	2b11      	cmp	r3, #17
 8006a00:	d104      	bne.n	8006a0c <lv_obj_event+0x12a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8006a02:	2101      	movs	r1, #1
 8006a04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a06:	f7ff fa49 	bl	8005e9c <lv_obj_add_state>
 8006a0a:	e00b      	b.n	8006a24 <lv_obj_event+0x142>
            }
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8006a0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a10:	2b14      	cmp	r3, #20
 8006a12:	d003      	beq.n	8006a1c <lv_obj_event+0x13a>
 8006a14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a18:	2b12      	cmp	r3, #18
 8006a1a:	d103      	bne.n	8006a24 <lv_obj_event+0x142>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a20:	f7ff fa55 	bl	8005ece <lv_obj_clear_state>
            }

            /*With Enter LV_EVENT_RELEASED will send VALUE_CHANGE event*/
            if(c != LV_KEY_ENTER) {
 8006a24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a28:	2b0a      	cmp	r3, #10
 8006a2a:	f000 821a 	beq.w	8006e62 <lv_obj_event+0x580>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8006a2e:	2200      	movs	r2, #0
 8006a30:	211c      	movs	r1, #28
 8006a32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a34:	f7fe f890 	bl	8004b58 <lv_event_send>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if(res != LV_RES_OK) return;
 8006a3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	e20d      	b.n	8006e62 <lv_obj_event+0x580>
            }
        }
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8006a46:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8006a4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a4c:	f7ff fa5d 	bl	8005f0a <lv_obj_has_flag>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8205 	beq.w	8006e62 <lv_obj_event+0x580>
 8006a58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a5a:	f000 fc8d 	bl	8007378 <lv_obj_is_editable>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f083 0301 	eor.w	r3, r3, #1
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 81fb 	beq.w	8006e62 <lv_obj_event+0x580>
            /*scroll by keypad or encoder*/
            lv_anim_enable_t anim_enable = LV_ANIM_OFF;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8006a72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a74:	f003 fdf4 	bl	800a660 <lv_obj_get_scroll_left>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	867b      	strh	r3, [r7, #50]	; 0x32
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8006a7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a7e:	f003 fe93 	bl	800a7a8 <lv_obj_get_scroll_right>
 8006a82:	4603      	mov	r3, r0
 8006a84:	863b      	strh	r3, [r7, #48]	; 0x30
            char c = *((char *)lv_event_get_param(e));
 8006a86:	6838      	ldr	r0, [r7, #0]
 8006a88:	f7fe f90d 	bl	8004ca6 <lv_event_get_param>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(c == LV_KEY_DOWN) {
 8006a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a98:	2b12      	cmp	r3, #18
 8006a9a:	d118      	bne.n	8006ace <lv_obj_event+0x1ec>
                /*use scroll_to_x/y functions to enforce scroll limits*/
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006a9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a9e:	f003 fd29 	bl	800a4f4 <lv_obj_get_scroll_y>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	b29c      	uxth	r4, r3
 8006aa6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006aa8:	f002 f84f 	bl	8008b4a <lv_obj_get_height>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da00      	bge.n	8006ab4 <lv_obj_event+0x1d2>
 8006ab2:	3303      	adds	r3, #3
 8006ab4:	109b      	asrs	r3, r3, #2
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	4423      	add	r3, r4
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	b21b      	sxth	r3, r3
 8006ac0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ac8:	f004 f93c 	bl	800ad44 <lv_obj_scroll_to_y>
 8006acc:	e1c9      	b.n	8006e62 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_UP) {
 8006ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ad2:	2b11      	cmp	r3, #17
 8006ad4:	d118      	bne.n	8006b08 <lv_obj_event+0x226>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006ad6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ad8:	f003 fd0c 	bl	800a4f4 <lv_obj_get_scroll_y>
 8006adc:	4603      	mov	r3, r0
 8006ade:	b29c      	uxth	r4, r3
 8006ae0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ae2:	f002 f832 	bl	8008b4a <lv_obj_get_height>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	da00      	bge.n	8006aee <lv_obj_event+0x20c>
 8006aec:	3303      	adds	r3, #3
 8006aee:	109b      	asrs	r3, r3, #2
 8006af0:	b21b      	sxth	r3, r3
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	1ae3      	subs	r3, r4, r3
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	b21b      	sxth	r3, r3
 8006afa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006afe:	4619      	mov	r1, r3
 8006b00:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b02:	f004 f91f 	bl	800ad44 <lv_obj_scroll_to_y>
 8006b06:	e1ac      	b.n	8006e62 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_RIGHT) {
 8006b08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b0c:	2b13      	cmp	r3, #19
 8006b0e:	d141      	bne.n	8006b94 <lv_obj_event+0x2b2>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006b10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b12:	f003 fc95 	bl	800a440 <lv_obj_get_scroll_dir>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <lv_obj_event+0x24e>
 8006b20:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dc1c      	bgt.n	8006b62 <lv_obj_event+0x280>
 8006b28:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dc18      	bgt.n	8006b62 <lv_obj_event+0x280>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006b30:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b32:	f003 fcdf 	bl	800a4f4 <lv_obj_get_scroll_y>
 8006b36:	4603      	mov	r3, r0
 8006b38:	b29c      	uxth	r4, r3
 8006b3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b3c:	f002 f805 	bl	8008b4a <lv_obj_get_height>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	da00      	bge.n	8006b48 <lv_obj_event+0x266>
 8006b46:	3303      	adds	r3, #3
 8006b48:	109b      	asrs	r3, r3, #2
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4423      	add	r3, r4
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	b21b      	sxth	r3, r3
 8006b54:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b5c:	f004 f8f2 	bl	800ad44 <lv_obj_scroll_to_y>
 8006b60:	e17f      	b.n	8006e62 <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8006b62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b64:	f003 fcae 	bl	800a4c4 <lv_obj_get_scroll_x>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	b29c      	uxth	r4, r3
 8006b6c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b6e:	f001 ffde 	bl	8008b2e <lv_obj_get_width>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	da00      	bge.n	8006b7a <lv_obj_event+0x298>
 8006b78:	3303      	adds	r3, #3
 8006b7a:	109b      	asrs	r3, r3, #2
 8006b7c:	b21b      	sxth	r3, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4423      	add	r3, r4
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	b21b      	sxth	r3, r3
 8006b86:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b8e:	f004 f8b5 	bl	800acfc <lv_obj_scroll_to_x>
 8006b92:	e166      	b.n	8006e62 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_LEFT) {
 8006b94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b98:	2b14      	cmp	r3, #20
 8006b9a:	f040 8162 	bne.w	8006e62 <lv_obj_event+0x580>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006b9e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ba0:	f003 fc4e 	bl	800a440 <lv_obj_get_scroll_dir>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d007      	beq.n	8006bbe <lv_obj_event+0x2dc>
 8006bae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	dc1c      	bgt.n	8006bf0 <lv_obj_event+0x30e>
 8006bb6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	dc18      	bgt.n	8006bf0 <lv_obj_event+0x30e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006bbe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bc0:	f003 fc98 	bl	800a4f4 <lv_obj_get_scroll_y>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	b29c      	uxth	r4, r3
 8006bc8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bca:	f001 ffbe 	bl	8008b4a <lv_obj_get_height>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da00      	bge.n	8006bd6 <lv_obj_event+0x2f4>
 8006bd4:	3303      	adds	r3, #3
 8006bd6:	109b      	asrs	r3, r3, #2
 8006bd8:	b21b      	sxth	r3, r3
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	1ae3      	subs	r3, r4, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b21b      	sxth	r3, r3
 8006be2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006be6:	4619      	mov	r1, r3
 8006be8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bea:	f004 f8ab 	bl	800ad44 <lv_obj_scroll_to_y>
 8006bee:	e138      	b.n	8006e62 <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8006bf0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bf2:	f003 fc67 	bl	800a4c4 <lv_obj_get_scroll_x>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	b29c      	uxth	r4, r3
 8006bfa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bfc:	f001 ff97 	bl	8008b2e <lv_obj_get_width>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da00      	bge.n	8006c08 <lv_obj_event+0x326>
 8006c06:	3303      	adds	r3, #3
 8006c08:	109b      	asrs	r3, r3, #2
 8006c0a:	b21b      	sxth	r3, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	1ae3      	subs	r3, r4, r3
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	b21b      	sxth	r3, r3
 8006c14:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c1c:	f004 f86e 	bl	800acfc <lv_obj_scroll_to_x>
 8006c20:	e11f      	b.n	8006e62 <lv_obj_event+0x580>
            }
        }
    }
    else if(code == LV_EVENT_FOCUSED) {
 8006c22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c26:	2b0e      	cmp	r3, #14
 8006c28:	d155      	bne.n	8006cd6 <lv_obj_event+0x3f4>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8006c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c2e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c30:	f7ff f96b 	bl	8005f0a <lv_obj_has_flag>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <lv_obj_event+0x360>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c3e:	f004 f8a5 	bl	800ad8c <lv_obj_scroll_to_view_recursive>
        }

        bool editing = false;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8006c48:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c4a:	f7ff f993 	bl	8005f74 <lv_obj_get_group>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe fba3 	bl	800539c <lv_group_get_editing>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_state_t state = LV_STATE_FOCUSED;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        /* Use the indev for then indev handler.
         * But if the obj was focused manually it returns NULL so try to
         * use the indev from the event*/
        lv_indev_t * indev = lv_indev_get_act();
 8006c62:	f7fe fcf9 	bl	8005658 <lv_indev_get_act>
 8006c66:	65f8      	str	r0, [r7, #92]	; 0x5c
        if(indev == NULL) indev = lv_event_get_indev(e);
 8006c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <lv_obj_event+0x394>
 8006c6e:	6838      	ldr	r0, [r7, #0]
 8006c70:	f7fe f84c 	bl	8004d0c <lv_event_get_indev>
 8006c74:	65f8      	str	r0, [r7, #92]	; 0x5c

        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8006c76:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006c78:	f7fe fcfa 	bl	8005670 <lv_indev_get_type>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8006c82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d003      	beq.n	8006c92 <lv_obj_event+0x3b0>
 8006c8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d105      	bne.n	8006c9e <lv_obj_event+0x3bc>
 8006c92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c96:	f043 0304 	orr.w	r3, r3, #4
 8006c9a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        if(editing) {
 8006c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00c      	beq.n	8006cc0 <lv_obj_event+0x3de>
            state |= LV_STATE_EDITED;
 8006ca6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006caa:	f043 0308 	orr.w	r3, r3, #8
 8006cae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_obj_add_state(obj, state);
 8006cb2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cba:	f7ff f8ef 	bl	8005e9c <lv_obj_add_state>
 8006cbe:	e0d0      	b.n	8006e62 <lv_obj_event+0x580>
        }
        else {
            lv_obj_add_state(obj, state);
 8006cc0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cc8:	f7ff f8e8 	bl	8005e9c <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8006ccc:	2108      	movs	r1, #8
 8006cce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cd0:	f7ff f8fd 	bl	8005ece <lv_obj_clear_state>
 8006cd4:	e0c5      	b.n	8006e62 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8006cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cda:	2b09      	cmp	r3, #9
 8006cdc:	d104      	bne.n	8006ce8 <lv_obj_event+0x406>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8006cde:	2140      	movs	r1, #64	; 0x40
 8006ce0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ce2:	f7ff f8db 	bl	8005e9c <lv_obj_add_state>
 8006ce6:	e0bc      	b.n	8006e62 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SCROLL_END) {
 8006ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cec:	2b0a      	cmp	r3, #10
 8006cee:	d11f      	bne.n	8006d30 <lv_obj_event+0x44e>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8006cf0:	2140      	movs	r1, #64	; 0x40
 8006cf2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cf4:	f7ff f8eb 	bl	8005ece <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8006cf8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cfa:	f003 fb8b 	bl	800a414 <lv_obj_get_scrollbar_mode>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	f040 80ae 	bne.w	8006e62 <lv_obj_event+0x580>
            lv_area_t hor_area, ver_area;
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006d06:	f107 020c 	add.w	r2, r7, #12
 8006d0a:	f107 0314 	add.w	r3, r7, #20
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d12:	f004 f8af 	bl	800ae74 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8006d16:	f107 0314 	add.w	r3, r7, #20
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d1e:	f002 fc9b 	bl	8009658 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8006d22:	f107 030c 	add.w	r3, r7, #12
 8006d26:	4619      	mov	r1, r3
 8006d28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d2a:	f002 fc95 	bl	8009658 <lv_obj_invalidate_area>
 8006d2e:	e098      	b.n	8006e62 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_DEFOCUSED) {
 8006d30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d34:	2b0f      	cmp	r3, #15
 8006d36:	d104      	bne.n	8006d42 <lv_obj_event+0x460>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8006d38:	210e      	movs	r1, #14
 8006d3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d3c:	f7ff f8c7 	bl	8005ece <lv_obj_clear_state>
 8006d40:	e08f      	b.n	8006e62 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8006d42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d46:	2b29      	cmp	r3, #41	; 0x29
 8006d48:	d132      	bne.n	8006db0 <lv_obj_event+0x4ce>
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d4e:	f7fe fe89 	bl	8005a64 <lv_obj_get_style_align>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8006d58:	2100      	movs	r1, #0
 8006d5a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d5c:	f7fe ffcb 	bl	8005cf6 <lv_obj_get_style_layout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        if(layout || align) {
 8006d66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d103      	bne.n	8006d76 <lv_obj_event+0x494>
 8006d6e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <lv_obj_event+0x49a>
            lv_obj_mark_layout_as_dirty(obj);
 8006d76:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d78:	f001 fe76 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
        }

        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006d7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d7e:	f007 f939 	bl	800dff4 <lv_obj_get_child_cnt>
 8006d82:	63f8      	str	r0, [r7, #60]	; 0x3c
        for(i = 0; i < child_cnt; i++) {
 8006d84:	2300      	movs	r3, #0
 8006d86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d88:	e00d      	b.n	8006da6 <lv_obj_event+0x4c4>
            lv_obj_t * child = obj->spec_attr->children[i];
 8006d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	63bb      	str	r3, [r7, #56]	; 0x38
            lv_obj_mark_layout_as_dirty(child);
 8006d9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d9c:	f001 fe64 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8006da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da2:	3301      	adds	r3, #1
 8006da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d3ed      	bcc.n	8006d8a <lv_obj_event+0x4a8>
 8006dae:	e058      	b.n	8006e62 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8006db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006db4:	2b22      	cmp	r3, #34	; 0x22
 8006db6:	d133      	bne.n	8006e20 <lv_obj_event+0x53e>
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8006db8:	2100      	movs	r1, #0
 8006dba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006dbc:	f7fe fe2e 	bl	8005a1c <lv_obj_get_style_width>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006dca:	f7fe fe39 	bl	8005a40 <lv_obj_get_style_height>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006dd8:	f7fe fe44 	bl	8005a64 <lv_obj_get_style_align>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8006de2:	2100      	movs	r1, #0
 8006de4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006de6:	f7fe ff86 	bl	8005cf6 <lv_obj_get_style_layout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8006df0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10f      	bne.n	8006e18 <lv_obj_event+0x536>
 8006df8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10b      	bne.n	8006e18 <lv_obj_event+0x536>
 8006e00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006e04:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d005      	beq.n	8006e18 <lv_obj_event+0x536>
 8006e0c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006e10:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d124      	bne.n	8006e62 <lv_obj_event+0x580>
            lv_obj_mark_layout_as_dirty(obj);
 8006e18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e1a:	f001 fe25 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
 8006e1e:	e020      	b.n	8006e62 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8006e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e24:	2b13      	cmp	r3, #19
 8006e26:	d10d      	bne.n	8006e44 <lv_obj_event+0x562>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e2c:	f001 f866 	bl	8007efc <lv_obj_calculate_ext_draw_size>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_event_set_ext_draw_size(e, d);
 8006e36:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6838      	ldr	r0, [r7, #0]
 8006e3e:	f7fd ffd9 	bl	8004df4 <lv_event_set_ext_draw_size>
 8006e42:	e00e      	b.n	8006e62 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8006e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e48:	2b15      	cmp	r3, #21
 8006e4a:	d007      	beq.n	8006e5c <lv_obj_event+0x57a>
 8006e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e50:	2b18      	cmp	r3, #24
 8006e52:	d003      	beq.n	8006e5c <lv_obj_event+0x57a>
 8006e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e58:	2b12      	cmp	r3, #18
 8006e5a:	d102      	bne.n	8006e62 <lv_obj_event+0x580>
        lv_obj_draw(e);
 8006e5c:	6838      	ldr	r0, [r7, #0]
 8006e5e:	f7ff f9b1 	bl	80061c4 <lv_obj_draw>
    }
}
 8006e62:	376c      	adds	r7, #108	; 0x6c
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd90      	pop	{r4, r7, pc}

08006e68 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b094      	sub	sp, #80	; 0x50
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	807b      	strh	r3, [r7, #2]
    if(obj->state == new_state) return;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8c1b      	ldrh	r3, [r3, #32]
 8006e78:	887a      	ldrh	r2, [r7, #2]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	f000 815a 	beq.w	8007134 <lv_obj_set_state+0x2cc>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	8c1b      	ldrh	r3, [r3, #32]
 8006e84:	86fb      	strh	r3, [r7, #54]	; 0x36
    obj->state = new_state;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	887a      	ldrh	r2, [r7, #2]
 8006e8a:	841a      	strh	r2, [r3, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8006e8c:	887a      	ldrh	r2, [r7, #2]
 8006e8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f005 ffd6 	bl	800ce44 <_lv_obj_style_state_compare>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8006e9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8148 	beq.w	8007138 <lv_obj_set_state+0x2d0>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8006ea8:	f44f 7020 	mov.w	r0, #640	; 0x280
 8006eac:	f01a ffe4 	bl	8021e78 <lv_mem_buf_get>
 8006eb0:	6338      	str	r0, [r7, #48]	; 0x30
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8006eb2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eb8:	f01b fb88 	bl	80225cc <lv_memset_00>
    uint32_t tsi = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ec4:	e0e0      	b.n	8007088 <lv_obj_set_state+0x220>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f006 f9a4 	bl	800d230 <lv_obj_style_get_selector_state>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006efc:	4618      	mov	r0, r3
 8006efe:	f006 f9a3 	bl	800d248 <lv_obj_style_get_selector_part>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8006f04:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006f06:	887b      	ldrh	r3, [r7, #2]
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f040 80b3 	bne.w	8007078 <lv_obj_set_state+0x210>
        if(obj_style->is_trans) continue;
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	79db      	ldrb	r3, [r3, #7]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 80ad 	bne.w	800707c <lv_obj_set_state+0x214>

        lv_style_value_t v;
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f107 020c 	add.w	r2, r7, #12
 8006f2a:	2166      	movs	r1, #102	; 0x66
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fca2 	bl	8005876 <lv_style_get_prop_inlined>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	f040 80a3 	bne.w	8007080 <lv_obj_set_state+0x218>
        const lv_style_transition_dsc_t * tr = v.ptr;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	623b      	str	r3, [r7, #32]

        /*Add the props to the set if not added yet or added but with smaller weight*/
        uint32_t j;
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8006f3e:	2300      	movs	r3, #0
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f42:	e08c      	b.n	800705e <lv_obj_set_state+0x1f6>
            uint32_t t;
            for(t = 0; t < tsi; t++) {
 8006f44:	2300      	movs	r3, #0
 8006f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f48:	e02e      	b.n	8006fa8 <lv_obj_set_state+0x140>
                lv_style_selector_t selector = ts[t].selector;
 8006f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	461a      	mov	r2, r3
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	4413      	add	r3, r2
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	61fb      	str	r3, [r7, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8006f5e:	69f8      	ldr	r0, [r7, #28]
 8006f60:	f006 f966 	bl	800d230 <lv_obj_style_get_selector_state>
 8006f64:	4603      	mov	r3, r0
 8006f66:	837b      	strh	r3, [r7, #26]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8006f68:	69f8      	ldr	r0, [r7, #28]
 8006f6a:	f006 f96d 	bl	800d248 <lv_obj_style_get_selector_part>
 8006f6e:	6178      	str	r0, [r7, #20]
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8006f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	4413      	add	r3, r2
 8006f80:	891a      	ldrh	r2, [r3, #8]
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	6819      	ldr	r1, [r3, #0]
 8006f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	440b      	add	r3, r1
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d107      	bne.n	8006fa2 <lv_obj_set_state+0x13a>
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d103      	bne.n	8006fa2 <lv_obj_set_state+0x13a>
 8006f9a:	8b7a      	ldrh	r2, [r7, #26]
 8006f9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d207      	bcs.n	8006fb2 <lv_obj_set_state+0x14a>
            for(t = 0; t < tsi; t++) {
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d3cc      	bcc.n	8006f4a <lv_obj_set_state+0xe2>
 8006fb0:	e000      	b.n	8006fb4 <lv_obj_set_state+0x14c>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8006fb2:	bf00      	nop
            }

            /*If not found  add it*/
            if(t == tsi) {
 8006fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d14d      	bne.n	8007058 <lv_obj_set_state+0x1f0>
                ts[tsi].time = tr->time;
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	68d9      	ldr	r1, [r3, #12]
 8006fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	4413      	add	r3, r2
 8006fd0:	b28a      	uxth	r2, r1
 8006fd2:	801a      	strh	r2, [r3, #0]
                ts[tsi].delay = tr->delay;
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	6919      	ldr	r1, [r3, #16]
 8006fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	4413      	add	r3, r2
 8006fe8:	b28a      	uxth	r2, r1
 8006fea:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8006fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	4413      	add	r3, r2
 8006ffc:	6a3a      	ldr	r2, [r7, #32]
 8006ffe:	6892      	ldr	r2, [r2, #8]
 8007000:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	18d1      	adds	r1, r2, r3
 800700c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	461a      	mov	r2, r3
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	4413      	add	r3, r2
 800701c:	880a      	ldrh	r2, [r1, #0]
 800701e:	811a      	strh	r2, [r3, #8]
#if LV_USE_USER_DATA
                ts[tsi].user_data = tr->user_data;
 8007020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	461a      	mov	r2, r3
 800702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702e:	4413      	add	r3, r2
 8007030:	6a3a      	ldr	r2, [r7, #32]
 8007032:	6852      	ldr	r2, [r2, #4]
 8007034:	611a      	str	r2, [r3, #16]
#endif
                ts[tsi].selector = obj_style->selector;
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800703e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	461a      	mov	r2, r3
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	4413      	add	r3, r2
 800704e:	460a      	mov	r2, r1
 8007050:	605a      	str	r2, [r3, #4]
                tsi++;
 8007052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007054:	3301      	adds	r3, #1
 8007056:	647b      	str	r3, [r7, #68]	; 0x44
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8007058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705a:	3301      	adds	r3, #1
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4413      	add	r3, r2
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <lv_obj_set_state+0x21a>
 800706e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007070:	2b1f      	cmp	r3, #31
 8007072:	f67f af67 	bls.w	8006f44 <lv_obj_set_state+0xdc>
 8007076:	e004      	b.n	8007082 <lv_obj_set_state+0x21a>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8007078:	bf00      	nop
 800707a:	e002      	b.n	8007082 <lv_obj_set_state+0x21a>
        if(obj_style->is_trans) continue;
 800707c:	bf00      	nop
 800707e:	e000      	b.n	8007082 <lv_obj_set_state+0x21a>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8007080:	bf00      	nop
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8007082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007084:	3301      	adds	r3, #1
 8007086:	643b      	str	r3, [r7, #64]	; 0x40
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800708c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007096:	4293      	cmp	r3, r2
 8007098:	d203      	bcs.n	80070a2 <lv_obj_set_state+0x23a>
 800709a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709c:	2b1f      	cmp	r3, #31
 800709e:	f67f af12 	bls.w	8006ec6 <lv_obj_set_state+0x5e>
            }
        }
    }

    for(i = 0; i < tsi; i++) {
 80070a2:	2300      	movs	r3, #0
 80070a4:	643b      	str	r3, [r7, #64]	; 0x40
 80070a6:	e01f      	b.n	80070e8 <lv_obj_set_state+0x280>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 80070a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	461a      	mov	r2, r3
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	4413      	add	r3, r2
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f006 f8c4 	bl	800d248 <lv_obj_style_get_selector_part>
 80070c0:	6138      	str	r0, [r7, #16]
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 80070c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	461a      	mov	r2, r3
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	4413      	add	r3, r2
 80070d2:	8879      	ldrh	r1, [r7, #2]
 80070d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	460b      	mov	r3, r1
 80070da:	6939      	ldr	r1, [r7, #16]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f005 fd6b 	bl	800cbb8 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 80070e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e4:	3301      	adds	r3, #1
 80070e6:	643b      	str	r3, [r7, #64]	; 0x40
 80070e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d3db      	bcc.n	80070a8 <lv_obj_set_state+0x240>
    }

    lv_mem_buf_release(ts);
 80070f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070f2:	f01a ff6d 	bl	8021fd0 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 80070f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d103      	bne.n	8007106 <lv_obj_set_state+0x29e>
        lv_obj_invalidate(obj);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f002 fadf 	bl	80096c2 <lv_obj_invalidate>
 8007104:	e019      	b.n	800713a <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8007106:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800710a:	2b03      	cmp	r3, #3
 800710c:	d107      	bne.n	800711e <lv_obj_set_state+0x2b6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800710e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007112:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f005 fb42 	bl	800c7a0 <lv_obj_refresh_style>
 800711c:	e00d      	b.n	800713a <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 800711e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007122:	2b02      	cmp	r3, #2
 8007124:	d109      	bne.n	800713a <lv_obj_set_state+0x2d2>
        lv_obj_invalidate(obj);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f002 facb 	bl	80096c2 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 ff93 	bl	8008058 <lv_obj_refresh_ext_draw_size>
 8007132:	e002      	b.n	800713a <lv_obj_set_state+0x2d2>
    if(obj->state == new_state) return;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <lv_obj_set_state+0x2d2>
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8007138:	bf00      	nop
    }
}
 800713a:	3748      	adds	r7, #72	; 0x48
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <lv_obj_class_create_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
{
 8007140:	b590      	push	{r4, r7, lr}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
    LV_TRACE_OBJ_CREATE("Creating object with %p class on %p parent", (void *)class_p, (void *)parent);
    uint32_t s = get_instance_size(class_p);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f990 	bl	8007470 <get_instance_size>
 8007150:	6178      	str	r0, [r7, #20]
    lv_obj_t * obj = lv_mem_alloc(s);
 8007152:	6978      	ldr	r0, [r7, #20]
 8007154:	f01a fe06 	bl	8021d64 <lv_mem_alloc>
 8007158:	6138      	str	r0, [r7, #16]
    if(obj == NULL) return NULL;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <lv_obj_class_create_obj+0x24>
 8007160:	2300      	movs	r3, #0
 8007162:	e09e      	b.n	80072a2 <lv_obj_class_create_obj+0x162>
    lv_memset_00(obj, s);
 8007164:	6979      	ldr	r1, [r7, #20]
 8007166:	6938      	ldr	r0, [r7, #16]
 8007168:	f01b fa30 	bl	80225cc <lv_memset_00>
    obj->class_p = class_p;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	601a      	str	r2, [r3, #0]
    obj->parent = parent;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	605a      	str	r2, [r3, #4]

    /*Create a screen*/
    if(parent == NULL) {
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d153      	bne.n	8007226 <lv_obj_class_create_obj+0xe6>
        LV_TRACE_OBJ_CREATE("creating a screen");
        lv_disp_t * disp = lv_disp_get_default();
 800717e:	f018 fdd1 	bl	801fd24 <lv_disp_get_default>
 8007182:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <lv_obj_class_create_obj+0x54>
            LV_LOG_WARN("No display created yet. No place to assign the new screen");
            lv_mem_free(obj);
 800718a:	6938      	ldr	r0, [r7, #16]
 800718c:	f01a fe1a 	bl	8021dc4 <lv_mem_free>
            return NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	e086      	b.n	80072a2 <lv_obj_class_create_obj+0x162>
        }

        if(disp->screens == NULL) {
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10d      	bne.n	80071b8 <lv_obj_class_create_obj+0x78>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 800719c:	2004      	movs	r0, #4
 800719e:	f01a fde1 	bl	8021d64 <lv_mem_alloc>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	60da      	str	r2, [r3, #12]
            disp->screens[0] = obj;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	601a      	str	r2, [r3, #0]
            disp->screen_cnt = 1;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24
 80071b6:	e01b      	b.n	80071f0 <lv_obj_class_create_obj+0xb0>
        }
        else {
            disp->screen_cnt++;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	625a      	str	r2, [r3, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4619      	mov	r1, r3
 80071ce:	4610      	mov	r0, r2
 80071d0:	f01a fe26 	bl	8021e20 <lv_mem_realloc>
 80071d4:	4602      	mov	r2, r0
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	60da      	str	r2, [r3, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071e2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80071e6:	440b      	add	r3, r1
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	601a      	str	r2, [r3, #0]
        }

        /*Set coordinates to full screen size*/
        obj->coords.x1 = 0;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2200      	movs	r2, #0
 80071f4:	829a      	strh	r2, [r3, #20]
        obj->coords.y1 = 0;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2200      	movs	r2, #0
 80071fa:	82da      	strh	r2, [r3, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80071fc:	2000      	movs	r0, #0
 80071fe:	f018 fd9d 	bl	801fd3c <lv_disp_get_hor_res>
 8007202:	4603      	mov	r3, r0
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29b      	uxth	r3, r3
 800720a:	b21a      	sxth	r2, r3
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	831a      	strh	r2, [r3, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8007210:	2000      	movs	r0, #0
 8007212:	f018 fdb9 	bl	801fd88 <lv_disp_get_ver_res>
 8007216:	4603      	mov	r3, r0
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29b      	uxth	r3, r3
 800721e:	b21a      	sxth	r2, r3
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	835a      	strh	r2, [r3, #26]
 8007224:	e03c      	b.n	80072a0 <lv_obj_class_create_obj+0x160>
    }
    /*Create a normal object*/
    else {
        LV_TRACE_OBJ_CREATE("creating normal object");
        LV_ASSERT_OBJ(parent, MY_CLASS);
        if(parent->spec_attr == NULL) {
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <lv_obj_class_create_obj+0xf4>
            lv_obj_allocate_spec_attr(parent);
 800722e:	6838      	ldr	r0, [r7, #0]
 8007230:	f7fe feb4 	bl	8005f9c <lv_obj_allocate_spec_attr>
        }

        if(parent->spec_attr->children == NULL) {
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d110      	bne.n	8007260 <lv_obj_class_create_obj+0x120>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689c      	ldr	r4, [r3, #8]
 8007242:	2004      	movs	r0, #4
 8007244:	f01a fd8e 	bl	8021d64 <lv_mem_alloc>
 8007248:	4603      	mov	r3, r0
 800724a:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[0] = obj;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	601a      	str	r2, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2201      	movs	r2, #1
 800725c:	605a      	str	r2, [r3, #4]
 800725e:	e01f      	b.n	80072a0 <lv_obj_class_create_obj+0x160>
        }
        else {
            parent->spec_attr->child_cnt++;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	3201      	adds	r2, #1
 8007268:	605a      	str	r2, [r3, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	681a      	ldr	r2, [r3, #0]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	0099      	lsls	r1, r3, #2
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689c      	ldr	r4, [r3, #8]
 800727c:	4610      	mov	r0, r2
 800727e:	f01a fdcf 	bl	8021e20 <lv_mem_realloc>
 8007282:	4603      	mov	r3, r0
 8007284:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	6859      	ldr	r1, [r3, #4]
 8007292:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007296:	440b      	add	r3, r1
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	601a      	str	r2, [r3, #0]
        }
    }

    return obj;
 80072a0:	693b      	ldr	r3, [r7, #16]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd90      	pop	{r4, r7, pc}

080072aa <lv_obj_class_init_obj>:

void lv_obj_class_init_obj(lv_obj_t * obj)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
    lv_obj_mark_layout_as_dirty(obj);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fbd8 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 80072b8:	2000      	movs	r0, #0
 80072ba:	f005 fb3b 	bl	800c934 <lv_obj_enable_style_refresh>

    lv_theme_apply(obj);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f008 fe9c 	bl	800fffc <lv_theme_apply>
    lv_obj_construct(obj);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f8ab 	bl	8007420 <lv_obj_construct>

    lv_obj_enable_style_refresh(true);
 80072ca:	2001      	movs	r0, #1
 80072cc:	f005 fb32 	bl	800c934 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80072d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072d4:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f005 fa61 	bl	800c7a0 <lv_obj_refresh_style>

    lv_obj_refresh_self_size(obj);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fd22 	bl	8008d28 <lv_obj_refresh_self_size>

    lv_group_t * def_group = lv_group_get_default();
 80072e4:	f7fd ff2a 	bl	800513c <lv_group_get_default>
 80072e8:	60f8      	str	r0, [r7, #12]
    if(def_group && lv_obj_is_group_def(obj)) {
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d009      	beq.n	8007304 <lv_obj_class_init_obj+0x5a>
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f86b 	bl	80073cc <lv_obj_is_group_def>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <lv_obj_class_init_obj+0x5a>
        lv_group_add_obj(def_group, obj);
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7fd ff28 	bl	8005154 <lv_group_add_obj>
    }

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f006 fe31 	bl	800df6c <lv_obj_get_parent>
 800730a:	60b8      	str	r0, [r7, #8]
    if(parent) {
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <lv_obj_class_init_obj+0x82>
        /*Call the ancestor's event handler to the parent to notify it about the new child.
         *Also triggers layout update*/
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	2122      	movs	r1, #34	; 0x22
 8007316:	68b8      	ldr	r0, [r7, #8]
 8007318:	f7fd fc1e 	bl	8004b58 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	2123      	movs	r1, #35	; 0x23
 8007320:	68b8      	ldr	r0, [r7, #8]
 8007322:	f7fd fc19 	bl	8004b58 <lv_event_send>

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(obj);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f002 f9cb 	bl	80096c2 <lv_obj_invalidate>
    }
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <_lv_obj_destruct>:

void _lv_obj_destruct(lv_obj_t * obj)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <_lv_obj_destruct+0x22>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	4610      	mov	r0, r2
 8007354:	4798      	blx	r3

    if(obj->class_p->base_class) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d007      	beq.n	8007370 <_lv_obj_destruct+0x3c>
        /*Don't let the descendant methods run during destructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]

        /*Call the base class's destructor too*/
        _lv_obj_destruct(obj);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff ffe2 	bl	8007334 <_lv_obj_destruct>
    }
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <lv_obj_is_editable>:

bool lv_obj_is_editable(lv_obj_t * obj)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]

    /*Find a base in which editable is set*/
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8007386:	e002      	b.n	800738e <lv_obj_is_editable+0x16>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <lv_obj_is_editable+0x2a>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	7e1b      	ldrb	r3, [r3, #24]
 8007398:	f003 0303 	and.w	r3, r3, #3
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f2      	beq.n	8007388 <lv_obj_is_editable+0x10>

    if(class_p == NULL) return false;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <lv_obj_is_editable+0x34>
 80073a8:	2300      	movs	r3, #0
 80073aa:	e009      	b.n	80073c0 <lv_obj_is_editable+0x48>

    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	7e1b      	ldrb	r3, [r3, #24]
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <lv_obj_is_group_def>:

bool lv_obj_is_group_def(lv_obj_t * obj)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60fb      	str	r3, [r7, #12]

    /*Find a base in which group_def is set*/
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 80073da:	e002      	b.n	80073e2 <lv_obj_is_group_def+0x16>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d006      	beq.n	80073f6 <lv_obj_is_group_def+0x2a>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	7e1b      	ldrb	r3, [r3, #24]
 80073ec:	f003 030c 	and.w	r3, r3, #12
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f2      	beq.n	80073dc <lv_obj_is_group_def+0x10>

    if(class_p == NULL) return false;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <lv_obj_is_group_def+0x34>
 80073fc:	2300      	movs	r3, #0
 80073fe:	e009      	b.n	8007414 <lv_obj_is_group_def+0x48>

    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	7e1b      	ldrb	r3, [r3, #24]
 8007404:	f003 030c 	and.w	r3, r3, #12
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b04      	cmp	r3, #4
 800740c:	bf0c      	ite	eq
 800740e:	2301      	moveq	r3, #1
 8007410:	2300      	movne	r3, #0
 8007412:	b2db      	uxtb	r3, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * original_class_p = obj->class_p;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]

    if(obj->class_p->base_class) {
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <lv_obj_construct+0x28>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	601a      	str	r2, [r3, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff ffec 	bl	8007420 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d007      	beq.n	8007468 <lv_obj_construct+0x48>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <get_instance_size>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60fb      	str	r3, [r7, #12]
    while(base && base->instance_size == 0) base = base->base_class;
 800747c:	e002      	b.n	8007484 <get_instance_size+0x14>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d005      	beq.n	8007496 <get_instance_size+0x26>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <get_instance_size+0x48>)
 8007490:	4013      	ands	r3, r2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f3      	beq.n	800747e <get_instance_size+0xe>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <get_instance_size+0x30>
 800749c:	2300      	movs	r3, #0
 800749e:	e004      	b.n	80074aa <get_instance_size+0x3a>

    return base->instance_size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f3c3 130f 	ubfx	r3, r3, #4, #16
 80074a8:	b29b      	uxth	r3, r3
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	000ffff0 	.word	0x000ffff0

080074bc <lv_obj_get_style_transform_width>:
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80074c6:	2268      	movs	r2, #104	; 0x68
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f005 fa42 	bl	800c954 <lv_obj_get_style_prop>
 80074d0:	4603      	mov	r3, r0
 80074d2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	b21b      	sxth	r3, r3
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <lv_obj_get_style_transform_height>:
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80074ea:	2269      	movs	r2, #105	; 0x69
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f005 fa30 	bl	800c954 <lv_obj_get_style_prop>
 80074f4:	4603      	mov	r3, r0
 80074f6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	b21b      	sxth	r3, r3
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <lv_obj_get_style_bg_color_filtered>:
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 800750e:	2220      	movs	r2, #32
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f005 fa1e 	bl	800c954 <lv_obj_get_style_prop>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f005 fc64 	bl	800cdec <_lv_obj_style_apply_color_filter>
 8007524:	4603      	mov	r3, r0
 8007526:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007528:	7b3b      	ldrb	r3, [r7, #12]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <lv_obj_get_style_bg_opa>:
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800753c:	2221      	movs	r2, #33	; 0x21
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f005 fa07 	bl	800c954 <lv_obj_get_style_prop>
 8007546:	4603      	mov	r3, r0
 8007548:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	b2db      	uxtb	r3, r3
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <lv_obj_get_style_bg_grad_color_filtered>:
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 8007560:	2222      	movs	r2, #34	; 0x22
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f005 f9f5 	bl	800c954 <lv_obj_get_style_prop>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f005 fc3b 	bl	800cdec <_lv_obj_style_apply_color_filter>
 8007576:	4603      	mov	r3, r0
 8007578:	60fb      	str	r3, [r7, #12]
    return v.color;
 800757a:	7b3b      	ldrb	r3, [r7, #12]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <lv_obj_get_style_bg_grad_dir>:
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 800758e:	2223      	movs	r2, #35	; 0x23
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f005 f9de 	bl	800c954 <lv_obj_get_style_prop>
 8007598:	4603      	mov	r3, r0
 800759a:	60fb      	str	r3, [r7, #12]
    return (lv_grad_dir_t)v.num;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	b2db      	uxtb	r3, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <lv_obj_get_style_bg_main_stop>:
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 80075b2:	2224      	movs	r2, #36	; 0x24
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f005 f9cc 	bl	800c954 <lv_obj_get_style_prop>
 80075bc:	4603      	mov	r3, r0
 80075be:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	b21b      	sxth	r3, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <lv_obj_get_style_bg_grad_stop>:
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 80075d6:	2225      	movs	r2, #37	; 0x25
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f005 f9ba 	bl	800c954 <lv_obj_get_style_prop>
 80075e0:	4603      	mov	r3, r0
 80075e2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	b21b      	sxth	r3, r3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <lv_obj_get_style_bg_grad>:
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 80075fa:	2226      	movs	r2, #38	; 0x26
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f005 f9a8 	bl	800c954 <lv_obj_get_style_prop>
 8007604:	4603      	mov	r3, r0
 8007606:	60fb      	str	r3, [r7, #12]
    return (const lv_grad_dsc_t *)v.ptr;
 8007608:	68fb      	ldr	r3, [r7, #12]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <lv_obj_get_style_bg_dither_mode>:
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 800761c:	2227      	movs	r2, #39	; 0x27
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f005 f997 	bl	800c954 <lv_obj_get_style_prop>
 8007626:	4603      	mov	r3, r0
 8007628:	60fb      	str	r3, [r7, #12]
    return (lv_dither_mode_t)v.num;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	b2db      	uxtb	r3, r3
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <lv_obj_get_style_bg_img_src>:
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8007640:	2228      	movs	r2, #40	; 0x28
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f005 f985 	bl	800c954 <lv_obj_get_style_prop>
 800764a:	4603      	mov	r3, r0
 800764c:	60fb      	str	r3, [r7, #12]
    return (const void *)v.ptr;
 800764e:	68fb      	ldr	r3, [r7, #12]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <lv_obj_get_style_bg_img_opa>:
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8007662:	2229      	movs	r2, #41	; 0x29
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f005 f974 	bl	800c954 <lv_obj_get_style_prop>
 800766c:	4603      	mov	r3, r0
 800766e:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	b2db      	uxtb	r3, r3
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <lv_obj_get_style_bg_img_recolor_filtered>:
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 8007686:	222a      	movs	r2, #42	; 0x2a
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f005 f962 	bl	800c954 <lv_obj_get_style_prop>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f005 fba8 	bl	800cdec <_lv_obj_style_apply_color_filter>
 800769c:	4603      	mov	r3, r0
 800769e:	60fb      	str	r3, [r7, #12]
    return v.color;
 80076a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <lv_obj_get_style_bg_img_recolor_opa>:
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 80076b4:	222b      	movs	r2, #43	; 0x2b
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f005 f94b 	bl	800c954 <lv_obj_get_style_prop>
 80076be:	4603      	mov	r3, r0
 80076c0:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	b2db      	uxtb	r3, r3
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <lv_obj_get_style_bg_img_tiled>:
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 80076d8:	222c      	movs	r2, #44	; 0x2c
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f005 f939 	bl	800c954 <lv_obj_get_style_prop>
 80076e2:	4603      	mov	r3, r0
 80076e4:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	bf14      	ite	ne
 80076ec:	2301      	movne	r3, #1
 80076ee:	2300      	moveq	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <lv_obj_get_style_border_color_filtered>:
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 8007704:	2230      	movs	r2, #48	; 0x30
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f005 f923 	bl	800c954 <lv_obj_get_style_prop>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f005 fb69 	bl	800cdec <_lv_obj_style_apply_color_filter>
 800771a:	4603      	mov	r3, r0
 800771c:	60fb      	str	r3, [r7, #12]
    return v.color;
 800771e:	7b3b      	ldrb	r3, [r7, #12]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <lv_obj_get_style_border_opa>:
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8007732:	2231      	movs	r2, #49	; 0x31
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f005 f90c 	bl	800c954 <lv_obj_get_style_prop>
 800773c:	4603      	mov	r3, r0
 800773e:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	b2db      	uxtb	r3, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <lv_obj_get_style_border_width>:
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007756:	2232      	movs	r2, #50	; 0x32
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f005 f8fa 	bl	800c954 <lv_obj_get_style_prop>
 8007760:	4603      	mov	r3, r0
 8007762:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	b21b      	sxth	r3, r3
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <lv_obj_get_style_border_side>:
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 800777a:	2233      	movs	r2, #51	; 0x33
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f005 f8e8 	bl	800c954 <lv_obj_get_style_prop>
 8007784:	4603      	mov	r3, r0
 8007786:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	b2db      	uxtb	r3, r3
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <lv_obj_get_style_outline_width>:
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800779e:	2235      	movs	r2, #53	; 0x35
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f005 f8d6 	bl	800c954 <lv_obj_get_style_prop>
 80077a8:	4603      	mov	r3, r0
 80077aa:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	b21b      	sxth	r3, r3
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <lv_obj_get_style_outline_color_filtered>:
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 80077c2:	2236      	movs	r2, #54	; 0x36
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f005 f8c4 	bl	800c954 <lv_obj_get_style_prop>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f005 fb0a 	bl	800cdec <_lv_obj_style_apply_color_filter>
 80077d8:	4603      	mov	r3, r0
 80077da:	60fb      	str	r3, [r7, #12]
    return v.color;
 80077dc:	7b3b      	ldrb	r3, [r7, #12]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <lv_obj_get_style_outline_opa>:
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80077f0:	2237      	movs	r2, #55	; 0x37
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f005 f8ad 	bl	800c954 <lv_obj_get_style_prop>
 80077fa:	4603      	mov	r3, r0
 80077fc:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	b2db      	uxtb	r3, r3
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <lv_obj_get_style_outline_pad>:
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8007814:	2238      	movs	r2, #56	; 0x38
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f005 f89b 	bl	800c954 <lv_obj_get_style_prop>
 800781e:	4603      	mov	r3, r0
 8007820:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	b21b      	sxth	r3, r3
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <lv_obj_get_style_shadow_width>:
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8007838:	2240      	movs	r2, #64	; 0x40
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f005 f889 	bl	800c954 <lv_obj_get_style_prop>
 8007842:	4603      	mov	r3, r0
 8007844:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	b21b      	sxth	r3, r3
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <lv_obj_get_style_shadow_ofs_x>:
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 800785c:	2241      	movs	r2, #65	; 0x41
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f005 f877 	bl	800c954 <lv_obj_get_style_prop>
 8007866:	4603      	mov	r3, r0
 8007868:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	b21b      	sxth	r3, r3
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <lv_obj_get_style_shadow_ofs_y>:
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8007880:	2242      	movs	r2, #66	; 0x42
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f005 f865 	bl	800c954 <lv_obj_get_style_prop>
 800788a:	4603      	mov	r3, r0
 800788c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	b21b      	sxth	r3, r3
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <lv_obj_get_style_shadow_spread>:
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80078a4:	2243      	movs	r2, #67	; 0x43
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f005 f853 	bl	800c954 <lv_obj_get_style_prop>
 80078ae:	4603      	mov	r3, r0
 80078b0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	b21b      	sxth	r3, r3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <lv_obj_get_style_shadow_color_filtered>:
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 80078c8:	2244      	movs	r2, #68	; 0x44
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f005 f841 	bl	800c954 <lv_obj_get_style_prop>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f005 fa87 	bl	800cdec <_lv_obj_style_apply_color_filter>
 80078de:	4603      	mov	r3, r0
 80078e0:	60fb      	str	r3, [r7, #12]
    return v.color;
 80078e2:	7b3b      	ldrb	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <lv_obj_get_style_shadow_opa>:
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80078f6:	2245      	movs	r2, #69	; 0x45
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f005 f82a 	bl	800c954 <lv_obj_get_style_prop>
 8007900:	4603      	mov	r3, r0
 8007902:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	b2db      	uxtb	r3, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <lv_obj_get_style_text_color_filtered>:
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 800791a:	2255      	movs	r2, #85	; 0x55
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f005 f818 	bl	800c954 <lv_obj_get_style_prop>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f005 fa5e 	bl	800cdec <_lv_obj_style_apply_color_filter>
 8007930:	4603      	mov	r3, r0
 8007932:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007934:	7b3b      	ldrb	r3, [r7, #12]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <lv_obj_get_style_text_opa>:
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 8007948:	2256      	movs	r2, #86	; 0x56
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f005 f801 	bl	800c954 <lv_obj_get_style_prop>
 8007952:	4603      	mov	r3, r0
 8007954:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	b2db      	uxtb	r3, r3
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <lv_obj_get_style_text_font>:
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800796c:	2257      	movs	r2, #87	; 0x57
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f004 ffef 	bl	800c954 <lv_obj_get_style_prop>
 8007976:	4603      	mov	r3, r0
 8007978:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 800797a:	68fb      	ldr	r3, [r7, #12]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <lv_obj_get_style_text_letter_space>:
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800798e:	2258      	movs	r2, #88	; 0x58
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f004 ffde 	bl	800c954 <lv_obj_get_style_prop>
 8007998:	4603      	mov	r3, r0
 800799a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	b21b      	sxth	r3, r3
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <lv_obj_get_style_text_line_space>:
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80079b2:	2259      	movs	r2, #89	; 0x59
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f004 ffcc 	bl	800c954 <lv_obj_get_style_prop>
 80079bc:	4603      	mov	r3, r0
 80079be:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	b21b      	sxth	r3, r3
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <lv_obj_get_style_text_decor>:
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 80079d6:	225a      	movs	r2, #90	; 0x5a
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f004 ffba 	bl	800c954 <lv_obj_get_style_prop>
 80079e0:	4603      	mov	r3, r0
 80079e2:	60fb      	str	r3, [r7, #12]
    return (lv_text_decor_t)v.num;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	b2db      	uxtb	r3, r3
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <lv_obj_get_style_text_align>:
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 80079fa:	225b      	movs	r2, #91	; 0x5b
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f004 ffa8 	bl	800c954 <lv_obj_get_style_prop>
 8007a04:	4603      	mov	r3, r0
 8007a06:	60fb      	str	r3, [r7, #12]
    return (lv_text_align_t)v.num;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	b2db      	uxtb	r3, r3
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <lv_obj_get_style_radius>:
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8007a1e:	220b      	movs	r2, #11
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f004 ff96 	bl	800c954 <lv_obj_get_style_prop>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	b21b      	sxth	r3, r3
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <lv_obj_get_style_opa>:
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007a42:	2260      	movs	r2, #96	; 0x60
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f004 ff84 	bl	800c954 <lv_obj_get_style_prop>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	b2db      	uxtb	r3, r3
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <lv_obj_get_style_blend_mode>:
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007a66:	2267      	movs	r2, #103	; 0x67
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f004 ff72 	bl	800c954 <lv_obj_get_style_prop>
 8007a70:	4603      	mov	r3, r0
 8007a72:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	b2db      	uxtb	r3, r3
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8007a80:	b590      	push	{r4, r7, lr}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
    lv_opa_t opa = LV_OPA_COVER;
 8007a8c:	23ff      	movs	r3, #255	; 0xff
 8007a8e:	75fb      	strb	r3, [r7, #23]
    if(part != LV_PART_MAIN) {
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01a      	beq.n	8007acc <lv_obj_init_draw_rect_dsc+0x4c>
        opa = lv_obj_get_style_opa(obj, part);
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f7ff ffcd 	bl	8007a38 <lv_obj_get_style_opa>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d811      	bhi.n	8007acc <lv_obj_init_draw_rect_dsc+0x4c>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            return;
 8007aca:	e19f      	b.n	8007e0c <lv_obj_init_draw_rect_dsc+0x38c>
        }
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d007      	beq.n	8007ae2 <lv_obj_init_draw_rect_dsc+0x62>
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff ffc1 	bl	8007a5c <lv_obj_get_style_blend_mode>
 8007ada:	4603      	mov	r3, r0
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	709a      	strb	r2, [r3, #2]

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff ff95 	bl	8007a14 <lv_obj_get_style_radius>
 8007aea:	4603      	mov	r3, r0
 8007aec:	461a      	mov	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	801a      	strh	r2, [r3, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	78db      	ldrb	r3, [r3, #3]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d065      	beq.n	8007bc6 <lv_obj_init_draw_rect_dsc+0x146>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff fd18 	bl	8007532 <lv_obj_get_style_bg_opa>
 8007b02:	4603      	mov	r3, r0
 8007b04:	461a      	mov	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	70da      	strb	r2, [r3, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	78db      	ldrb	r3, [r3, #3]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d959      	bls.n	8007bc6 <lv_obj_init_draw_rect_dsc+0x146>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8007b12:	687c      	ldr	r4, [r7, #4]
 8007b14:	68b9      	ldr	r1, [r7, #8]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff fcf4 	bl	8007504 <lv_obj_get_style_bg_color_filtered>
 8007b1c:	7120      	strb	r0, [r4, #4]
            const lv_grad_dsc_t * grad = lv_obj_get_style_bg_grad(obj, part);
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff fd65 	bl	80075f0 <lv_obj_get_style_bg_grad>
 8007b26:	6138      	str	r0, [r7, #16]
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00e      	beq.n	8007b4c <lv_obj_init_draw_rect_dsc+0xcc>
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	795b      	ldrb	r3, [r3, #5]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <lv_obj_init_draw_rect_dsc+0xcc>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3305      	adds	r3, #5
 8007b40:	2206      	movs	r2, #6
 8007b42:	6939      	ldr	r1, [r7, #16]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f01a fa9b 	bl	8022080 <lv_memcpy>
 8007b4a:	e03c      	b.n	8007bc6 <lv_obj_init_draw_rect_dsc+0x146>
            }
            else {
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff fd18 	bl	8007584 <lv_obj_get_style_bg_grad_dir>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	b2d9      	uxtb	r1, r3
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7a93      	ldrb	r3, [r2, #10]
 8007b60:	f361 0302 	bfi	r3, r1, #0, #3
 8007b64:	7293      	strb	r3, [r2, #10]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7a9b      	ldrb	r3, [r3, #10]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01b      	beq.n	8007bac <lv_obj_init_draw_rect_dsc+0x12c>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 8007b74:	687c      	ldr	r4, [r7, #4]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f7ff fcc3 	bl	8007504 <lv_obj_get_style_bg_color_filtered>
 8007b7e:	7160      	strb	r0, [r4, #5]
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8007b80:	687c      	ldr	r4, [r7, #4]
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f7ff fce6 	bl	8007556 <lv_obj_get_style_bg_grad_color_filtered>
 8007b8a:	71e0      	strb	r0, [r4, #7]
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff fd0a 	bl	80075a8 <lv_obj_get_style_bg_main_stop>
 8007b94:	4603      	mov	r3, r0
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	719a      	strb	r2, [r3, #6]
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fd14 	bl	80075cc <lv_obj_get_style_bg_grad_stop>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	721a      	strb	r2, [r3, #8]
                }
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff fd2f 	bl	8007612 <lv_obj_get_style_bg_dither_mode>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	b2d9      	uxtb	r1, r3
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7a93      	ldrb	r3, [r2, #10]
 8007bc0:	f361 03c5 	bfi	r3, r1, #3, #3
 8007bc4:	7293      	strb	r3, [r2, #10]
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f7ff fdbf 	bl	800774c <lv_obj_get_style_border_width>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	835a      	strh	r2, [r3, #26]
    if(draw_dsc->border_width) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d022      	beq.n	8007c26 <lv_obj_init_draw_rect_dsc+0x1a6>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7f1b      	ldrb	r3, [r3, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01e      	beq.n	8007c26 <lv_obj_init_draw_rect_dsc+0x1a6>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7ff fd9c 	bl	8007728 <lv_obj_get_style_border_opa>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	7f1b      	ldrb	r3, [r3, #28]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d912      	bls.n	8007c26 <lv_obj_init_draw_rect_dsc+0x1a6>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f7ff fdb4 	bl	8007770 <lv_obj_get_style_border_side>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f003 031f 	and.w	r3, r3, #31
 8007c0e:	b2d9      	uxtb	r1, r3
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7f53      	ldrb	r3, [r2, #29]
 8007c14:	f361 0345 	bfi	r3, r1, #1, #5
 8007c18:	7753      	strb	r3, [r2, #29]
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8007c1a:	687c      	ldr	r4, [r7, #4]
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fd6b 	bl	80076fa <lv_obj_get_style_border_color_filtered>
 8007c24:	7620      	strb	r0, [r4, #24]
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff fdb3 	bl	8007794 <lv_obj_get_style_outline_width>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	461a      	mov	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	841a      	strh	r2, [r3, #32]
    if(draw_dsc->outline_width) {
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d020      	beq.n	8007c82 <lv_obj_init_draw_rect_dsc+0x202>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01b      	beq.n	8007c82 <lv_obj_init_draw_rect_dsc+0x202>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff fdca 	bl	80077e6 <lv_obj_get_style_outline_opa>
 8007c52:	4603      	mov	r3, r0
 8007c54:	461a      	mov	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d90d      	bls.n	8007c82 <lv_obj_init_draw_rect_dsc+0x202>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff fdce 	bl	800780a <lv_obj_get_style_outline_pad>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	461a      	mov	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	845a      	strh	r2, [r3, #34]	; 0x22
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8007c76:	687c      	ldr	r4, [r7, #4]
 8007c78:	68b9      	ldr	r1, [r7, #8]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff fd9c 	bl	80077b8 <lv_obj_get_style_outline_color_filtered>
 8007c80:	77a0      	strb	r0, [r4, #30]
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7d5b      	ldrb	r3, [r3, #21]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d042      	beq.n	8007d10 <lv_obj_init_draw_rect_dsc+0x290>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8007c8a:	68b9      	ldr	r1, [r7, #8]
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff fcd2 	bl	8007636 <lv_obj_get_style_bg_img_src>
 8007c92:	4602      	mov	r2, r0
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	60da      	str	r2, [r3, #12]
        if(draw_dsc->bg_img_src) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d037      	beq.n	8007d10 <lv_obj_init_draw_rect_dsc+0x290>
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f7ff fcd8 	bl	8007658 <lv_obj_get_style_bg_img_opa>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	755a      	strb	r2, [r3, #21]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7d5b      	ldrb	r3, [r3, #21]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d92b      	bls.n	8007d10 <lv_obj_init_draw_rect_dsc+0x290>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f008 fb48 	bl	8010352 <lv_img_src_get_type>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d10d      	bne.n	8007ce4 <lv_obj_init_draw_rect_dsc+0x264>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff fe49 	bl	8007962 <lv_obj_get_style_text_font>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	611a      	str	r2, [r3, #16]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8007cd6:	687c      	ldr	r4, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff fe18 	bl	8007910 <lv_obj_get_style_text_color_filtered>
 8007ce0:	7520      	strb	r0, [r4, #20]
 8007ce2:	e015      	b.n	8007d10 <lv_obj_init_draw_rect_dsc+0x290>
                }
                else {
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8007ce4:	687c      	ldr	r4, [r7, #4]
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff fcc7 	bl	800767c <lv_obj_get_style_bg_img_recolor_filtered>
 8007cee:	7520      	strb	r0, [r4, #20]
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff fcd9 	bl	80076aa <lv_obj_get_style_bg_img_recolor_opa>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	759a      	strb	r2, [r3, #22]
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff fce3 	bl	80076ce <lv_obj_get_style_bg_img_tiled>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	75da      	strb	r2, [r3, #23]
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d03e      	beq.n	8007d98 <lv_obj_init_draw_rect_dsc+0x318>
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fd86 	bl	800782e <lv_obj_get_style_shadow_width>
 8007d22:	4603      	mov	r3, r0
 8007d24:	461a      	mov	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	84da      	strh	r2, [r3, #38]	; 0x26
        if(draw_dsc->shadow_width) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d031      	beq.n	8007d98 <lv_obj_init_draw_rect_dsc+0x318>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d92c      	bls.n	8007d98 <lv_obj_init_draw_rect_dsc+0x318>
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff fdd3 	bl	80078ec <lv_obj_get_style_shadow_opa>
 8007d46:	4603      	mov	r3, r0
 8007d48:	461a      	mov	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d91e      	bls.n	8007d98 <lv_obj_init_draw_rect_dsc+0x318>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff fd78 	bl	8007852 <lv_obj_get_style_shadow_ofs_x>
 8007d62:	4603      	mov	r3, r0
 8007d64:	461a      	mov	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	851a      	strh	r2, [r3, #40]	; 0x28
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff fd82 	bl	8007876 <lv_obj_get_style_shadow_ofs_y>
 8007d72:	4603      	mov	r3, r0
 8007d74:	461a      	mov	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	855a      	strh	r2, [r3, #42]	; 0x2a
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff fd8c 	bl	800789a <lv_obj_get_style_shadow_spread>
 8007d82:	4603      	mov	r3, r0
 8007d84:	461a      	mov	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	859a      	strh	r2, [r3, #44]	; 0x2c
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8007d8a:	687c      	ldr	r4, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff fd95 	bl	80078be <lv_obj_get_style_shadow_color_filtered>
 8007d94:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d036      	beq.n	8007e0c <lv_obj_init_draw_rect_dsc+0x38c>
        if(opa < LV_OPA_MAX) {
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2bfc      	cmp	r3, #252	; 0xfc
 8007da2:	d833      	bhi.n	8007e0c <lv_obj_init_draw_rect_dsc+0x38c>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007dac:	fb02 f303 	mul.w	r3, r2, r3
 8007db0:	121b      	asrs	r3, r3, #8
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	121b      	asrs	r3, r3, #8
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007dd4:	fb02 f303 	mul.w	r3, r2, r3
 8007dd8:	121b      	asrs	r3, r3, #8
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007de8:	fb02 f303 	mul.w	r3, r2, r3
 8007dec:	121b      	asrs	r3, r3, #8
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	121b      	asrs	r3, r3, #8
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }
}
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd90      	pop	{r4, r7, pc}

08007e12 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8007e12:	b590      	push	{r4, r7, lr}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff fd8c 	bl	800793e <lv_obj_get_style_text_opa>
 8007e26:	4603      	mov	r3, r0
 8007e28:	461a      	mov	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	761a      	strb	r2, [r3, #24]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7e1b      	ldrb	r3, [r3, #24]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d95e      	bls.n	8007ef4 <lv_obj_init_draw_label_dsc+0xe2>

    if(part != LV_PART_MAIN) {
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d018      	beq.n	8007e6e <lv_obj_init_draw_label_dsc+0x5c>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fdfa 	bl	8007a38 <lv_obj_get_style_opa>
 8007e44:	4603      	mov	r3, r0
 8007e46:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d803      	bhi.n	8007e56 <lv_obj_init_draw_label_dsc+0x44>
            draw_dsc->opa = LV_OPA_TRANSP;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	761a      	strb	r2, [r3, #24]
            return;
 8007e54:	e04f      	b.n	8007ef6 <lv_obj_init_draw_label_dsc+0xe4>
        }
        if(opa < LV_OPA_MAX) {
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	2bfc      	cmp	r3, #252	; 0xfc
 8007e5a:	d808      	bhi.n	8007e6e <lv_obj_init_draw_label_dsc+0x5c>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	7e12      	ldrb	r2, [r2, #24]
 8007e62:	fb02 f303 	mul.w	r3, r2, r3
 8007e66:	121b      	asrs	r3, r3, #8
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	761a      	strb	r2, [r3, #24]
        }
    }

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8007e6e:	687c      	ldr	r4, [r7, #4]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff fd4c 	bl	8007910 <lv_obj_get_style_text_color_filtered>
 8007e78:	7320      	strb	r0, [r4, #12]
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff fd81 	bl	8007984 <lv_obj_get_style_text_letter_space>
 8007e82:	4603      	mov	r3, r0
 8007e84:	461a      	mov	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	825a      	strh	r2, [r3, #18]
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff fd8b 	bl	80079a8 <lv_obj_get_style_text_line_space>
 8007e92:	4603      	mov	r3, r0
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	821a      	strh	r2, [r3, #16]
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff fd95 	bl	80079cc <lv_obj_get_style_text_decor>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	b2d9      	uxtb	r1, r3
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	7f13      	ldrb	r3, [r2, #28]
 8007eae:	f361 0302 	bfi	r3, r1, #0, #3
 8007eb2:	7713      	strb	r3, [r2, #28]
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00c      	beq.n	8007ed4 <lv_obj_init_draw_label_dsc+0xc2>
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7ff fdcd 	bl	8007a5c <lv_obj_get_style_blend_mode>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	b2d9      	uxtb	r1, r3
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	7f13      	ldrb	r3, [r2, #28]
 8007ece:	f361 03c5 	bfi	r3, r1, #3, #3
 8007ed2:	7713      	strb	r3, [r2, #28]
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff fd43 	bl	8007962 <lv_obj_get_style_text_font>
 8007edc:	4602      	mov	r2, r0
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	601a      	str	r2, [r3, #0]

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f7ff fd83 	bl	80079f0 <lv_obj_get_style_text_align>
 8007eea:	4603      	mov	r3, r0
 8007eec:	461a      	mov	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	769a      	strb	r2, [r3, #26]
 8007ef2:	e000      	b.n	8007ef6 <lv_obj_init_draw_label_dsc+0xe4>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007ef4:	bf00      	nop
}
 8007ef6:	371c      	adds	r7, #28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd90      	pop	{r4, r7, pc}

08007efc <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
    lv_coord_t s = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	83fb      	strh	r3, [r7, #30]

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff fc8e 	bl	800782e <lv_obj_get_style_shadow_width>
 8007f12:	4603      	mov	r3, r0
 8007f14:	83bb      	strh	r3, [r7, #28]
    if(sh_width) {
 8007f16:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d045      	beq.n	8007faa <lv_obj_calculate_ext_draw_size+0xae>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff fce3 	bl	80078ec <lv_obj_get_style_shadow_opa>
 8007f26:	4603      	mov	r3, r0
 8007f28:	76fb      	strb	r3, [r7, #27]
        if(sh_opa > LV_OPA_MIN) {
 8007f2a:	7efb      	ldrb	r3, [r7, #27]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d93c      	bls.n	8007faa <lv_obj_calculate_ext_draw_size+0xae>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8007f30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	da00      	bge.n	8007f3a <lv_obj_calculate_ext_draw_size+0x3e>
 8007f38:	3301      	adds	r3, #1
 8007f3a:	105b      	asrs	r3, r3, #1
 8007f3c:	b21b      	sxth	r3, r3
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3301      	adds	r3, #1
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	83bb      	strh	r3, [r7, #28]
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff fca6 	bl	800789a <lv_obj_get_style_shadow_spread>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	8bbb      	ldrh	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	83bb      	strh	r3, [r7, #28]
            lv_coord_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff fc78 	bl	8007852 <lv_obj_get_style_shadow_ofs_x>
 8007f62:	4603      	mov	r3, r0
 8007f64:	833b      	strh	r3, [r7, #24]
            lv_coord_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff fc84 	bl	8007876 <lv_obj_get_style_shadow_ofs_y>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	82fb      	strh	r3, [r7, #22]
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8007f72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfb8      	it	lt
 8007f7a:	425b      	neglt	r3, r3
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	bfb8      	it	lt
 8007f86:	425b      	neglt	r3, r3
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	bf38      	it	cc
 8007f8e:	4613      	movcc	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	8bbb      	ldrh	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	83bb      	strh	r3, [r7, #28]
            s = LV_MAX(s, sh_width);
 8007f9a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007f9e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	bfb8      	it	lt
 8007fa6:	4613      	movlt	r3, r2
 8007fa8:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff fbf1 	bl	8007794 <lv_obj_get_style_outline_width>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	82bb      	strh	r3, [r7, #20]
    if(outline_width) {
 8007fb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d019      	beq.n	8007ff2 <lv_obj_calculate_ext_draw_size+0xf6>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff fc10 	bl	80077e6 <lv_obj_get_style_outline_opa>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	74fb      	strb	r3, [r7, #19]
        if(outline_opa > LV_OPA_MIN) {
 8007fca:	7cfb      	ldrb	r3, [r7, #19]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d910      	bls.n	8007ff2 <lv_obj_calculate_ext_draw_size+0xf6>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff fc19 	bl	800780a <lv_obj_get_style_outline_pad>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	823b      	strh	r3, [r7, #16]
            s = LV_MAX(s, outline_pad + outline_width);
 8007fdc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007fe0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007fe4:	441a      	add	r2, r3
 8007fe6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007fea:	4293      	cmp	r3, r2
 8007fec:	bfb8      	it	lt
 8007fee:	4613      	movlt	r3, r2
 8007ff0:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff fa61 	bl	80074bc <lv_obj_get_style_transform_width>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fa6d 	bl	80074e0 <lv_obj_get_style_transform_height>
 8008006:	4603      	mov	r3, r0
 8008008:	81bb      	strh	r3, [r7, #12]
    lv_coord_t wh = LV_MAX(w, h);
 800800a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800800e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008012:	4293      	cmp	r3, r2
 8008014:	bfb8      	it	lt
 8008016:	4613      	movlt	r3, r2
 8008018:	817b      	strh	r3, [r7, #10]
    if(wh > 0) s += wh;
 800801a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800801e:	2b00      	cmp	r3, #0
 8008020:	dd04      	ble.n	800802c <lv_obj_calculate_ext_draw_size+0x130>
 8008022:	8bfa      	ldrh	r2, [r7, #30]
 8008024:	897b      	ldrh	r3, [r7, #10]
 8008026:	4413      	add	r3, r2
 8008028:	b29b      	uxth	r3, r3
 800802a:	83fb      	strh	r3, [r7, #30]

    return s;
 800802c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8008042:	2148      	movs	r1, #72	; 0x48
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f01a fac1 	bl	80225cc <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	601a      	str	r2, [r3, #0]
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <lv_obj_refresh_ext_draw_size>:
    if(dsc->class_p == class_p && dsc->type == type) return true;
    else return false;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f837 	bl	80080d4 <_lv_obj_get_ext_draw_size>
 8008066:	4603      	mov	r3, r0
 8008068:	81fb      	strh	r3, [r7, #14]
    lv_coord_t s_new = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	81bb      	strh	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 800806e:	f107 030c 	add.w	r3, r7, #12
 8008072:	461a      	mov	r2, r3
 8008074:	2113      	movs	r1, #19
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fc fd6e 	bl	8004b58 <lv_event_send>

    if(s_new != s_old) lv_obj_invalidate(obj);
 800807c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008080:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008084:	429a      	cmp	r2, r3
 8008086:	d002      	beq.n	800808e <lv_obj_refresh_ext_draw_size+0x36>
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fb1a 	bl	80096c2 <lv_obj_invalidate>

    /*Store the result if the special attrs already allocated*/
    if(obj->spec_attr) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <lv_obj_refresh_ext_draw_size+0x4a>
        obj->spec_attr->ext_draw_size = s_new;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800809e:	82da      	strh	r2, [r3, #22]
 80080a0:	e00b      	b.n	80080ba <lv_obj_refresh_ext_draw_size+0x62>
    }
    /*Allocate spec. attrs. only if the result is not zero.
     *Zero is the default value if the spec. attr. are not defined.*/
    else if(s_new != 0) {
 80080a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <lv_obj_refresh_ext_draw_size+0x62>
        lv_obj_allocate_spec_attr(obj);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fd ff76 	bl	8005f9c <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80080b8:	82da      	strh	r2, [r3, #22]
    }

    if(s_new != s_old) lv_obj_invalidate(obj);
 80080ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80080be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d002      	beq.n	80080cc <lv_obj_refresh_ext_draw_size+0x74>
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 fafb 	bl	80096c2 <lv_obj_invalidate>
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <_lv_obj_get_ext_draw_size>:

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <_lv_obj_get_ext_draw_size+0x1a>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80080ec:	e000      	b.n	80080f0 <_lv_obj_get_ext_draw_size+0x1c>
    else return 0;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d006      	beq.n	800811a <_lv_obj_get_layer_type+0x1e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	7e9b      	ldrb	r3, [r3, #26]
 8008112:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008116:	b2db      	uxtb	r3, r3
 8008118:	e000      	b.n	800811c <_lv_obj_get_layer_type+0x20>
    else return LV_LAYER_TYPE_NONE;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <lv_area_copy>:
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	80da      	strh	r2, [r3, #6]
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8008166:	b480      	push	{r7}
 8008168:	b083      	sub	sp, #12
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008174:	b29a      	uxth	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800817c:	b29b      	uxth	r3, r3
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	b29b      	uxth	r3, r3
 8008182:	3301      	adds	r3, #1
 8008184:	b29b      	uxth	r3, r3
 8008186:	b21b      	sxth	r3, r3
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3301      	adds	r3, #1
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	b21b      	sxth	r3, r3
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <lv_obj_get_style_width>:
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80081cc:	2201      	movs	r2, #1
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f004 fbbf 	bl	800c954 <lv_obj_get_style_prop>
 80081d6:	4603      	mov	r3, r0
 80081d8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	b21b      	sxth	r3, r3
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <lv_obj_get_style_min_width>:
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 80081f0:	2202      	movs	r2, #2
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f004 fbad 	bl	800c954 <lv_obj_get_style_prop>
 80081fa:	4603      	mov	r3, r0
 80081fc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	b21b      	sxth	r3, r3
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <lv_obj_get_style_max_width>:
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8008214:	2203      	movs	r2, #3
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f004 fb9b 	bl	800c954 <lv_obj_get_style_prop>
 800821e:	4603      	mov	r3, r0
 8008220:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	b21b      	sxth	r3, r3
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <lv_obj_get_style_height>:
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008238:	2204      	movs	r2, #4
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f004 fb89 	bl	800c954 <lv_obj_get_style_prop>
 8008242:	4603      	mov	r3, r0
 8008244:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	b21b      	sxth	r3, r3
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <lv_obj_get_style_min_height>:
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800825c:	2205      	movs	r2, #5
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f004 fb77 	bl	800c954 <lv_obj_get_style_prop>
 8008266:	4603      	mov	r3, r0
 8008268:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	b21b      	sxth	r3, r3
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <lv_obj_get_style_max_height>:
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8008280:	2206      	movs	r2, #6
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f004 fb65 	bl	800c954 <lv_obj_get_style_prop>
 800828a:	4603      	mov	r3, r0
 800828c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	b21b      	sxth	r3, r3
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <lv_obj_get_style_x>:
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80082a4:	2207      	movs	r2, #7
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f004 fb53 	bl	800c954 <lv_obj_get_style_prop>
 80082ae:	4603      	mov	r3, r0
 80082b0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	b21b      	sxth	r3, r3
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <lv_obj_get_style_y>:
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 80082c8:	2208      	movs	r2, #8
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f004 fb41 	bl	800c954 <lv_obj_get_style_prop>
 80082d2:	4603      	mov	r3, r0
 80082d4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	b21b      	sxth	r3, r3
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <lv_obj_get_style_align>:
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80082ec:	2209      	movs	r2, #9
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f004 fb2f 	bl	800c954 <lv_obj_get_style_prop>
 80082f6:	4603      	mov	r3, r0
 80082f8:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	b2db      	uxtb	r3, r3
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <lv_obj_get_style_translate_x>:
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8008310:	226a      	movs	r2, #106	; 0x6a
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f004 fb1d 	bl	800c954 <lv_obj_get_style_prop>
 800831a:	4603      	mov	r3, r0
 800831c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	b21b      	sxth	r3, r3
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <lv_obj_get_style_translate_y>:
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8008334:	226b      	movs	r2, #107	; 0x6b
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f004 fb0b 	bl	800c954 <lv_obj_get_style_prop>
 800833e:	4603      	mov	r3, r0
 8008340:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	b21b      	sxth	r3, r3
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <lv_obj_get_style_transform_zoom>:
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8008358:	226c      	movs	r2, #108	; 0x6c
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f004 faf9 	bl	800c954 <lv_obj_get_style_prop>
 8008362:	4603      	mov	r3, r0
 8008364:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	b21b      	sxth	r3, r3
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <lv_obj_get_style_transform_angle>:
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800837c:	226d      	movs	r2, #109	; 0x6d
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f004 fae7 	bl	800c954 <lv_obj_get_style_prop>
 8008386:	4603      	mov	r3, r0
 8008388:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	b21b      	sxth	r3, r3
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <lv_obj_get_style_transform_pivot_x>:
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 80083a0:	226e      	movs	r2, #110	; 0x6e
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f004 fad5 	bl	800c954 <lv_obj_get_style_prop>
 80083aa:	4603      	mov	r3, r0
 80083ac:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	b21b      	sxth	r3, r3
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <lv_obj_get_style_transform_pivot_y>:
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 80083c4:	226f      	movs	r2, #111	; 0x6f
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f004 fac3 	bl	800c954 <lv_obj_get_style_prop>
 80083ce:	4603      	mov	r3, r0
 80083d0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	b21b      	sxth	r3, r3
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <lv_obj_get_style_pad_top>:
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80083e8:	2210      	movs	r2, #16
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f004 fab1 	bl	800c954 <lv_obj_get_style_prop>
 80083f2:	4603      	mov	r3, r0
 80083f4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	b21b      	sxth	r3, r3
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <lv_obj_get_style_pad_bottom>:
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800840c:	2211      	movs	r2, #17
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f004 fa9f 	bl	800c954 <lv_obj_get_style_prop>
 8008416:	4603      	mov	r3, r0
 8008418:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	b21b      	sxth	r3, r3
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <lv_obj_get_style_pad_left>:
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008430:	2212      	movs	r2, #18
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f004 fa8d 	bl	800c954 <lv_obj_get_style_prop>
 800843a:	4603      	mov	r3, r0
 800843c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	b21b      	sxth	r3, r3
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <lv_obj_get_style_pad_right>:
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008454:	2213      	movs	r2, #19
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f004 fa7b 	bl	800c954 <lv_obj_get_style_prop>
 800845e:	4603      	mov	r3, r0
 8008460:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	b21b      	sxth	r3, r3
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <lv_obj_get_style_border_width>:
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008478:	2232      	movs	r2, #50	; 0x32
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f004 fa69 	bl	800c954 <lv_obj_get_style_prop>
 8008482:	4603      	mov	r3, r0
 8008484:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	b21b      	sxth	r3, r3
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <lv_obj_get_style_layout>:
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800849c:	220a      	movs	r2, #10
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f004 fa57 	bl	800c954 <lv_obj_get_style_prop>
 80084a6:	4603      	mov	r3, r0
 80084a8:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	b29b      	uxth	r3, r3
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <lv_obj_get_style_base_dir>:

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80084c0:	2216      	movs	r2, #22
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f004 fa45 	bl	800c954 <lv_obj_get_style_prop>
 80084ca:	4603      	mov	r3, r0
 80084cc:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	b2db      	uxtb	r3, r3
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <lv_obj_set_pos>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	807b      	strh	r3, [r7, #2]
 80084e6:	4613      	mov	r3, r2
 80084e8:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_set_x(obj, x);
 80084ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f80a 	bl	800850a <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 80084f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f829 	bl	8008554 <lv_obj_set_y>
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <lv_obj_set_x>:

void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_x;
    lv_style_value_t v_x;

    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8008516:	f107 0208 	add.w	r2, r7, #8
 800851a:	2300      	movs	r3, #0
 800851c:	2107      	movs	r1, #7
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f004 faaf 	bl	800ca82 <lv_obj_get_local_style_prop>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]

    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d104      	bne.n	8008538 <lv_obj_set_x+0x2e>
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008534:	429a      	cmp	r2, r3
 8008536:	d102      	bne.n	800853e <lv_obj_set_x+0x34>
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <lv_obj_set_x+0x42>
        lv_obj_set_style_x(obj, x, 0);
 800853e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008542:	2200      	movs	r2, #0
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f005 fc3c 	bl	800ddc4 <lv_obj_set_style_x>
    }
}
 800854c:	bf00      	nop
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <lv_obj_set_y>:

void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_y;
    lv_style_value_t v_y;

    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8008560:	f107 0208 	add.w	r2, r7, #8
 8008564:	2300      	movs	r3, #0
 8008566:	2108      	movs	r1, #8
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f004 fa8a 	bl	800ca82 <lv_obj_get_local_style_prop>
 800856e:	4603      	mov	r3, r0
 8008570:	73fb      	strb	r3, [r7, #15]

    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d104      	bne.n	8008582 <lv_obj_set_y+0x2e>
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800857e:	429a      	cmp	r2, r3
 8008580:	d102      	bne.n	8008588 <lv_obj_set_y+0x34>
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d106      	bne.n	8008596 <lv_obj_set_y+0x42>
        lv_obj_set_style_y(obj, y, 0);
 8008588:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800858c:	2200      	movs	r2, #0
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f005 fc2b 	bl	800ddec <lv_obj_set_style_y>
    }
}
 8008596:	bf00      	nop
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <lv_obj_refr_size>:

bool lv_obj_refr_size(lv_obj_t * obj)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b090      	sub	sp, #64	; 0x40
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*If the width or height is set by a layout do not modify them*/
    if(obj->w_layout && obj->h_layout) return false;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d009      	beq.n	80085cc <lv_obj_refr_size+0x2c>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <lv_obj_refr_size+0x2c>
 80085c8:	2300      	movs	r3, #0
 80085ca:	e221      	b.n	8008a10 <lv_obj_refr_size+0x470>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f005 fccd 	bl	800df6c <lv_obj_get_parent>
 80085d2:	6378      	str	r0, [r7, #52]	; 0x34
    if(parent == NULL) return false;
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <lv_obj_refr_size+0x3e>
 80085da:	2300      	movs	r3, #0
 80085dc:	e218      	b.n	8008a10 <lv_obj_refr_size+0x470>

    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f002 f83e 	bl	800a660 <lv_obj_get_scroll_left>
 80085e4:	4603      	mov	r3, r0
 80085e6:	867b      	strh	r3, [r7, #50]	; 0x32
    bool w_is_content = false;
 80085e8:	2300      	movs	r3, #0
 80085ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool w_is_pct = false;
 80085ee:	2300      	movs	r3, #0
 80085f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    lv_coord_t w;
    if(obj->w_layout) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d005      	beq.n	8008610 <lv_obj_refr_size+0x70>
        w = lv_obj_get_width(obj);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa92 	bl	8008b2e <lv_obj_get_width>
 800860a:	4603      	mov	r3, r0
 800860c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800860e:	e0a0      	b.n	8008752 <lv_obj_refr_size+0x1b2>
    }
    else {
        w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8008610:	2100      	movs	r1, #0
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff fdd5 	bl	80081c2 <lv_obj_get_style_width>
 8008618:	4603      	mov	r3, r0
 800861a:	87bb      	strh	r3, [r7, #60]	; 0x3c
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 800861c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008620:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008624:	4293      	cmp	r3, r2
 8008626:	bf0c      	ite	eq
 8008628:	2301      	moveq	r3, #1
 800862a:	2300      	movne	r3, #0
 800862c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8008630:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008632:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800863a:	d108      	bne.n	800864e <lv_obj_refr_size+0xae>
 800863c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800863e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008642:	b21b      	sxth	r3, r3
 8008644:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008648:	dc01      	bgt.n	800864e <lv_obj_refr_size+0xae>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <lv_obj_refr_size+0xb0>
 800864e:	2300      	movs	r3, #0
 8008650:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008654:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8008660:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008662:	f000 fa80 	bl	8008b66 <lv_obj_get_content_width>
 8008666:	4603      	mov	r3, r0
 8008668:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(w_is_content) {
 800866a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <lv_obj_refr_size+0xde>
            w = calc_content_width(obj);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fa16 	bl	8009aa4 <calc_content_width>
 8008678:	4603      	mov	r3, r0
 800867a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800867c:	e051      	b.n	8008722 <lv_obj_refr_size+0x182>
        }
        else if(w_is_pct) {
 800867e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008682:	2b00      	cmp	r3, #0
 8008684:	d04d      	beq.n	8008722 <lv_obj_refr_size+0x182>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8008686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008688:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d128      	bne.n	80086e8 <lv_obj_refr_size+0x148>
 8008696:	2100      	movs	r1, #0
 8008698:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800869a:	f7ff fd92 	bl	80081c2 <lv_obj_get_style_width>
 800869e:	4603      	mov	r3, r0
 80086a0:	461a      	mov	r2, r3
 80086a2:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d11e      	bne.n	80086e8 <lv_obj_refr_size+0x148>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 80086aa:	2100      	movs	r1, #0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff fede 	bl	800846e <lv_obj_get_style_border_width>
 80086b2:	4603      	mov	r3, r0
 80086b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 80086b6:	2100      	movs	r1, #0
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff feb4 	bl	8008426 <lv_obj_get_style_pad_left>
 80086be:	4603      	mov	r3, r0
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80086c4:	4413      	add	r3, r2
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 80086ca:	2100      	movs	r1, #0
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff febc 	bl	800844a <lv_obj_get_style_pad_right>
 80086d2:	4603      	mov	r3, r0
 80086d4:	461a      	mov	r2, r3
 80086d6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80086da:	4413      	add	r3, r2
 80086dc:	b29a      	uxth	r2, r3
 80086de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80086e0:	4413      	add	r3, r2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 80086e6:	e01c      	b.n	8008722 <lv_obj_refr_size+0x182>
            }
            else {
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 80086e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80086ea:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80086ee:	b21b      	sxth	r3, r3
 80086f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086f4:	dd06      	ble.n	8008704 <lv_obj_refr_size+0x164>
 80086f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80086f8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80086fc:	b21b      	sxth	r3, r3
 80086fe:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008702:	e003      	b.n	800870c <lv_obj_refr_size+0x16c>
 8008704:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008706:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800870a:	b21b      	sxth	r3, r3
 800870c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8008710:	fb02 f303 	mul.w	r3, r2, r3
 8008714:	4a9f      	ldr	r2, [pc, #636]	; (8008994 <lv_obj_refr_size+0x3f4>)
 8008716:	fb82 1203 	smull	r1, r2, r2, r3
 800871a:	1152      	asrs	r2, r2, #5
 800871c:	17db      	asrs	r3, r3, #31
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }

        lv_coord_t minw = lv_obj_get_style_min_width(obj, LV_PART_MAIN);
 8008722:	2100      	movs	r1, #0
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff fd5e 	bl	80081e6 <lv_obj_get_style_min_width>
 800872a:	4603      	mov	r3, r0
 800872c:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_coord_t maxw = lv_obj_get_style_max_width(obj, LV_PART_MAIN);
 800872e:	2100      	movs	r1, #0
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fd6a 	bl	800820a <lv_obj_get_style_max_width>
 8008736:	4603      	mov	r3, r0
 8008738:	853b      	strh	r3, [r7, #40]	; 0x28
        w = lv_clamp_width(w, minw, maxw, parent_w);
 800873a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800873e:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8008742:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8008746:	f9b7 003c 	ldrsh.w	r0, [r7, #60]	; 0x3c
 800874a:	f001 f8bb 	bl	80098c4 <lv_clamp_width>
 800874e:	4603      	mov	r3, r0
 8008750:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }

    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fee6 	bl	800a524 <lv_obj_get_scroll_top>
 8008758:	4603      	mov	r3, r0
 800875a:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h;
    bool h_is_content = false;
 800875c:	2300      	movs	r3, #0
 800875e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    bool h_is_pct = false;
 8008762:	2300      	movs	r3, #0
 8008764:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(obj->h_layout) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <lv_obj_refr_size+0x1e4>
        h = lv_obj_get_height(obj);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f9e6 	bl	8008b4a <lv_obj_get_height>
 800877e:	4603      	mov	r3, r0
 8008780:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008782:	e0a0      	b.n	80088c6 <lv_obj_refr_size+0x326>
    }
    else {
        h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8008784:	2100      	movs	r1, #0
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7ff fd51 	bl	800822e <lv_obj_get_style_height>
 800878c:	4603      	mov	r3, r0
 800878e:	877b      	strh	r3, [r7, #58]	; 0x3a
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 8008790:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8008794:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008798:	4293      	cmp	r3, r2
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 80087a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80087a6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80087aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ae:	d108      	bne.n	80087c2 <lv_obj_refr_size+0x222>
 80087b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80087b2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80087b6:	b21b      	sxth	r3, r3
 80087b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80087bc:	dc01      	bgt.n	80087c2 <lv_obj_refr_size+0x222>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <lv_obj_refr_size+0x224>
 80087c2:	2300      	movs	r3, #0
 80087c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80087c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 80087d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80087d6:	f000 f9f1 	bl	8008bbc <lv_obj_get_content_height>
 80087da:	4603      	mov	r3, r0
 80087dc:	847b      	strh	r3, [r7, #34]	; 0x22

        if(h_is_content) {
 80087de:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <lv_obj_refr_size+0x252>
            h = calc_content_height(obj);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 fad2 	bl	8009d90 <calc_content_height>
 80087ec:	4603      	mov	r3, r0
 80087ee:	877b      	strh	r3, [r7, #58]	; 0x3a
 80087f0:	e051      	b.n	8008896 <lv_obj_refr_size+0x2f6>
        }
        else if(h_is_pct) {
 80087f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d04d      	beq.n	8008896 <lv_obj_refr_size+0x2f6>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d128      	bne.n	800885c <lv_obj_refr_size+0x2bc>
 800880a:	2100      	movs	r1, #0
 800880c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800880e:	f7ff fd0e 	bl	800822e <lv_obj_get_style_height>
 8008812:	4603      	mov	r3, r0
 8008814:	461a      	mov	r2, r3
 8008816:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800881a:	429a      	cmp	r2, r3
 800881c:	d11e      	bne.n	800885c <lv_obj_refr_size+0x2bc>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 800881e:	2100      	movs	r1, #0
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff fe24 	bl	800846e <lv_obj_get_style_border_width>
 8008826:	4603      	mov	r3, r0
 8008828:	843b      	strh	r3, [r7, #32]
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fdd6 	bl	80083de <lv_obj_get_style_pad_top>
 8008832:	4603      	mov	r3, r0
 8008834:	b29a      	uxth	r2, r3
 8008836:	8c3b      	ldrh	r3, [r7, #32]
 8008838:	4413      	add	r3, r2
 800883a:	b29b      	uxth	r3, r3
 800883c:	877b      	strh	r3, [r7, #58]	; 0x3a
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 800883e:	2100      	movs	r1, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fdde 	bl	8008402 <lv_obj_get_style_pad_bottom>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800884e:	4413      	add	r3, r2
 8008850:	b29a      	uxth	r2, r3
 8008852:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008854:	4413      	add	r3, r2
 8008856:	b29b      	uxth	r3, r3
 8008858:	877b      	strh	r3, [r7, #58]	; 0x3a
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 800885a:	e01c      	b.n	8008896 <lv_obj_refr_size+0x2f6>
            }
            else {
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 800885c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800885e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008862:	b21b      	sxth	r3, r3
 8008864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008868:	dd06      	ble.n	8008878 <lv_obj_refr_size+0x2d8>
 800886a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800886c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008870:	b21b      	sxth	r3, r3
 8008872:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008876:	e003      	b.n	8008880 <lv_obj_refr_size+0x2e0>
 8008878:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800887a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800887e:	b21b      	sxth	r3, r3
 8008880:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	4a42      	ldr	r2, [pc, #264]	; (8008994 <lv_obj_refr_size+0x3f4>)
 800888a:	fb82 1203 	smull	r1, r2, r2, r3
 800888e:	1152      	asrs	r2, r2, #5
 8008890:	17db      	asrs	r3, r3, #31
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
        }

        lv_coord_t minh = lv_obj_get_style_min_height(obj, LV_PART_MAIN);
 8008896:	2100      	movs	r1, #0
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff fcda 	bl	8008252 <lv_obj_get_style_min_height>
 800889e:	4603      	mov	r3, r0
 80088a0:	83fb      	strh	r3, [r7, #30]
        lv_coord_t maxh = lv_obj_get_style_max_height(obj, LV_PART_MAIN);
 80088a2:	2100      	movs	r1, #0
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff fce6 	bl	8008276 <lv_obj_get_style_max_height>
 80088aa:	4603      	mov	r3, r0
 80088ac:	83bb      	strh	r3, [r7, #28]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 80088ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80088b2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80088b6:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80088ba:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	; 0x3a
 80088be:	f001 f879 	bl	80099b4 <lv_clamp_height>
 80088c2:	4603      	mov	r3, r0
 80088c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    /*calc_auto_size set the scroll x/y to 0 so revert the original value*/
    if(w_is_content || h_is_content) {
 80088c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <lv_obj_refr_size+0x336>
 80088ce:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d007      	beq.n	80088e6 <lv_obj_refr_size+0x346>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 80088d6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80088da:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80088de:	2300      	movs	r3, #0
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f002 f9eb 	bl	800acbc <lv_obj_scroll_to>
    }

    /*Do nothing if the size is not changed*/
    /*It is very important else recursive resizing can occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f921 	bl	8008b2e <lv_obj_get_width>
 80088ec:	4603      	mov	r3, r0
 80088ee:	461a      	mov	r2, r3
 80088f0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d10a      	bne.n	800890e <lv_obj_refr_size+0x36e>
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f926 	bl	8008b4a <lv_obj_get_height>
 80088fe:	4603      	mov	r3, r0
 8008900:	461a      	mov	r2, r3
 8008902:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8008906:	4293      	cmp	r3, r2
 8008908:	d101      	bne.n	800890e <lv_obj_refr_size+0x36e>
 800890a:	2300      	movs	r3, #0
 800890c:	e080      	b.n	8008a10 <lv_obj_refr_size+0x470>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fed7 	bl	80096c2 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8008914:	f107 0310 	add.w	r3, r7, #16
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f8f8 	bl	8008b10 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8008920:	f107 0308 	add.w	r3, r7, #8
 8008924:	4619      	mov	r1, r3
 8008926:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008928:	f000 f973 	bl	8008c12 <lv_obj_get_content_coords>

    /*If the object is already out of the parent and its position is changes
     *surely the scrollbars also changes so invalidate them*/
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	f107 0310 	add.w	r3, r7, #16
 8008934:	2200      	movs	r2, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f018 f8d8 	bl	8020aec <_lv_area_is_in>
 800893c:	4603      	mov	r3, r0
 800893e:	76fb      	strb	r3, [r7, #27]
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8008940:	7efb      	ldrb	r3, [r7, #27]
 8008942:	f083 0301 	eor.w	r3, r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <lv_obj_refr_size+0x3b2>
 800894c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800894e:	f003 f855 	bl	800b9fc <lv_obj_scrollbar_invalidate>

    /*Set the length and height
     *Be sure the content is not scrolled in an invalid position on the new size*/
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008958:	b29a      	uxth	r2, r3
 800895a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800895c:	4413      	add	r3, r2
 800895e:	b29b      	uxth	r3, r3
 8008960:	3b01      	subs	r3, #1
 8008962:	b29b      	uxth	r3, r3
 8008964:	b21a      	sxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	835a      	strh	r2, [r3, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800896a:	2100      	movs	r1, #0
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff fda2 	bl	80084b6 <lv_obj_get_style_base_dir>
 8008972:	4603      	mov	r3, r0
 8008974:	2b01      	cmp	r3, #1
 8008976:	d10f      	bne.n	8008998 <lv_obj_refr_size+0x3f8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800897e:	b29a      	uxth	r2, r3
 8008980:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	b29b      	uxth	r3, r3
 8008986:	3301      	adds	r3, #1
 8008988:	b29b      	uxth	r3, r3
 800898a:	b21a      	sxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	829a      	strh	r2, [r3, #20]
 8008990:	e00e      	b.n	80089b0 <lv_obj_refr_size+0x410>
 8008992:	bf00      	nop
 8008994:	51eb851f 	.word	0x51eb851f
    }
    else {
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800899e:	b29a      	uxth	r2, r3
 80089a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80089a2:	4413      	add	r3, r2
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	b21a      	sxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	831a      	strh	r2, [r3, #24]
    }

    /*Call the ancestor's event handler to the object with its new coordinates*/
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 80089b0:	f107 0310 	add.w	r3, r7, #16
 80089b4:	461a      	mov	r2, r3
 80089b6:	2129      	movs	r1, #41	; 0x29
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fc f8cd 	bl	8004b58 <lv_event_send>

    /*Call the ancestor's event handler to the parent too*/
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	2122      	movs	r1, #34	; 0x22
 80089c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80089c4:	f7fc f8c8 	bl	8004b58 <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fe7a 	bl	80096c2 <lv_obj_invalidate>

    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 80089ce:	2100      	movs	r1, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f003 f850 	bl	800ba76 <lv_obj_readjust_scroll>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the scrollbars*/
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3314      	adds	r3, #20
 80089da:	f107 0108 	add.w	r1, r7, #8
 80089de:	2200      	movs	r2, #0
 80089e0:	4618      	mov	r0, r3
 80089e2:	f018 f883 	bl	8020aec <_lv_area_is_in>
 80089e6:	4603      	mov	r3, r0
 80089e8:	76bb      	strb	r3, [r7, #26]
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80089ea:	7efb      	ldrb	r3, [r7, #27]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d108      	bne.n	8008a02 <lv_obj_refr_size+0x462>
 80089f0:	7efb      	ldrb	r3, [r7, #27]
 80089f2:	f083 0301 	eor.w	r3, r3, #1
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <lv_obj_refr_size+0x468>
 80089fc:	7ebb      	ldrb	r3, [r7, #26]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <lv_obj_refr_size+0x468>
 8008a02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a04:	f002 fffa 	bl	800b9fc <lv_obj_scrollbar_invalidate>

    lv_obj_refresh_ext_draw_size(obj);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fb25 	bl	8008058 <lv_obj_refresh_ext_draw_size>

    return true;
 8008a0e:	2301      	movs	r3, #1
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3740      	adds	r7, #64	; 0x40
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8008a20:	4910      	ldr	r1, [pc, #64]	; (8008a64 <lv_obj_is_layout_positioned+0x4c>)
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7fd fa86 	bl	8005f34 <lv_obj_has_flag_any>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <lv_obj_is_layout_positioned+0x1a>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e014      	b.n	8008a5c <lv_obj_is_layout_positioned+0x44>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f005 fa9a 	bl	800df6c <lv_obj_get_parent>
 8008a38:	60f8      	str	r0, [r7, #12]
    if(parent == NULL) return false;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <lv_obj_is_layout_positioned+0x2c>
 8008a40:	2300      	movs	r3, #0
 8008a42:	e00b      	b.n	8008a5c <lv_obj_is_layout_positioned+0x44>

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
 8008a44:	2100      	movs	r1, #0
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff fd23 	bl	8008492 <lv_obj_get_style_layout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	60bb      	str	r3, [r7, #8]
    if(layout) return true;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <lv_obj_is_layout_positioned+0x42>
 8008a56:	2301      	movs	r3, #1
 8008a58:	e000      	b.n	8008a5c <lv_obj_is_layout_positioned+0x44>
    else return false;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	00060001 	.word	0x00060001

08008a68 <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
    obj->layout_inv = 1;
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008a76:	f043 0301 	orr.w	r3, r3, #1
 8008a7a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f005 fa26 	bl	800ded0 <lv_obj_get_screen>
 8008a84:	60f8      	str	r0, [r7, #12]
    scr->scr_layout_inv = 1;
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f005 fa2f 	bl	800def8 <lv_obj_get_disp>
 8008a9a:	60b8      	str	r0, [r7, #8]
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d004      	beq.n	8008aae <lv_obj_mark_layout_as_dirty+0x46>
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f01a fcc0 	bl	802342e <lv_timer_resume>
}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <lv_obj_update_layout>:

void lv_obj_update_layout(const lv_obj_t * obj)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
    static bool mutex = false;
    if(mutex) {
 8008ac0:	4b12      	ldr	r3, [pc, #72]	; (8008b0c <lv_obj_update_layout+0x54>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d11d      	bne.n	8008b04 <lv_obj_update_layout+0x4c>
        LV_LOG_TRACE("Already running, returning");
        return;
    }
    mutex = true;
 8008ac8:	4b10      	ldr	r3, [pc, #64]	; (8008b0c <lv_obj_update_layout+0x54>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	701a      	strb	r2, [r3, #0]

    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f005 f9fe 	bl	800ded0 <lv_obj_get_screen>
 8008ad4:	60f8      	str	r0, [r7, #12]

    /*Repeat until there where layout invalidations*/
    while(scr->scr_layout_inv) {
 8008ad6:	e009      	b.n	8008aec <lv_obj_update_layout+0x34>
        LV_LOG_INFO("Layout update begin");
        scr->scr_layout_inv = 0;
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008ade:	f36f 0341 	bfc	r3, #1, #1
 8008ae2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
        layout_update_core(scr);
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f001 fa18 	bl	8009f1c <layout_update_core>
    while(scr->scr_layout_inv) {
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1ed      	bne.n	8008ad8 <lv_obj_update_layout+0x20>
        LV_LOG_TRACE("Layout update end");
    }

    mutex = false;
 8008afc:	4b03      	ldr	r3, [pc, #12]	; (8008b0c <lv_obj_update_layout+0x54>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	e000      	b.n	8008b06 <lv_obj_update_layout+0x4e>
        return;
 8008b04:	bf00      	nop
}
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000710 	.word	0x20000710

08008b10 <lv_obj_get_coords>:
    lv_obj_set_pos(obj, x, y);

}

void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3314      	adds	r3, #20
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6838      	ldr	r0, [r7, #0]
 8008b22:	f7ff fb01 	bl	8008128 <lv_area_copy>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <lv_obj_get_width>:
    return lv_obj_get_style_y(obj, LV_PART_MAIN);
}


lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3314      	adds	r3, #20
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fb13 	bl	8008166 <lv_area_get_width>
 8008b40:	4603      	mov	r3, r0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <lv_obj_get_height>:

lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3314      	adds	r3, #20
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff fb1c 	bl	8008194 <lv_area_get_height>
 8008b5c:	4603      	mov	r3, r0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8008b6e:	2100      	movs	r1, #0
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff fc58 	bl	8008426 <lv_obj_get_style_pad_left>
 8008b76:	4603      	mov	r3, r0
 8008b78:	81fb      	strh	r3, [r7, #14]
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff fc64 	bl	800844a <lv_obj_get_style_pad_right>
 8008b82:	4603      	mov	r3, r0
 8008b84:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008b86:	2100      	movs	r1, #0
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7ff fc70 	bl	800846e <lv_obj_get_style_border_width>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff ffcb 	bl	8008b2e <lv_obj_get_width>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	89fb      	ldrh	r3, [r7, #14]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	89bb      	ldrh	r3, [r7, #12]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	897b      	ldrh	r3, [r7, #10]
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	b21b      	sxth	r3, r3
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff fc09 	bl	80083de <lv_obj_get_style_pad_top>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	81fb      	strh	r3, [r7, #14]
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff fc15 	bl	8008402 <lv_obj_get_style_pad_bottom>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff fc45 	bl	800846e <lv_obj_get_style_border_width>
 8008be4:	4603      	mov	r3, r0
 8008be6:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff ffae 	bl	8008b4a <lv_obj_get_height>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	89fb      	ldrh	r3, [r7, #14]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	89bb      	ldrh	r3, [r7, #12]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	897b      	ldrh	r3, [r7, #10]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	b21b      	sxth	r3, r3
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff fc25 	bl	800846e <lv_obj_get_style_border_width>
 8008c24:	4603      	mov	r3, r0
 8008c26:	81fb      	strh	r3, [r7, #14]

    lv_obj_get_coords(obj, area);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff ff70 	bl	8008b10 <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8008c30:	89fb      	ldrh	r3, [r7, #14]
 8008c32:	425b      	negs	r3, r3
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	b21b      	sxth	r3, r3
 8008c38:	89fa      	ldrh	r2, [r7, #14]
 8008c3a:	4252      	negs	r2, r2
 8008c3c:	b292      	uxth	r2, r2
 8008c3e:	b212      	sxth	r2, r2
 8008c40:	4619      	mov	r1, r3
 8008c42:	6838      	ldr	r0, [r7, #0]
 8008c44:	f017 fd02 	bl	802064c <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8008c48:	2100      	movs	r1, #0
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fbeb 	bl	8008426 <lv_obj_get_style_pad_left>
 8008c50:	4603      	mov	r3, r0
 8008c52:	4619      	mov	r1, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	b28b      	uxth	r3, r1
 8008c5e:	4413      	add	r3, r2
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	b21a      	sxth	r2, r3
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	801a      	strh	r2, [r3, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8008c68:	2100      	movs	r1, #0
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff fbed 	bl	800844a <lv_obj_get_style_pad_right>
 8008c70:	4603      	mov	r3, r0
 8008c72:	4619      	mov	r1, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	b28b      	uxth	r3, r1
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	b21a      	sxth	r2, r3
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	809a      	strh	r2, [r3, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008c88:	2100      	movs	r1, #0
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff fba7 	bl	80083de <lv_obj_get_style_pad_top>
 8008c90:	4603      	mov	r3, r0
 8008c92:	4619      	mov	r1, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	b28b      	uxth	r3, r1
 8008c9e:	4413      	add	r3, r2
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	b21a      	sxth	r2, r3
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	805a      	strh	r2, [r3, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008ca8:	2100      	movs	r1, #0
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff fba9 	bl	8008402 <lv_obj_get_style_pad_bottom>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	b28b      	uxth	r3, r1
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	b21a      	sxth	r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	80da      	strh	r2, [r3, #6]

}
 8008cc8:	bf00      	nop
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
    lv_point_t p = {0, LV_COORD_MIN};
 8008cd8:	2300      	movs	r3, #0
 8008cda:	81bb      	strh	r3, [r7, #12]
 8008cdc:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008ce0:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008ce2:	f107 030c 	add.w	r3, r7, #12
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	212c      	movs	r1, #44	; 0x2c
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fb ff34 	bl	8004b58 <lv_event_send>
    return p.x;
 8008cf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
    lv_point_t p = {LV_COORD_MIN, 0};
 8008d04:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008d08:	81bb      	strh	r3, [r7, #12]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008d0e:	f107 030c 	add.w	r3, r7, #12
 8008d12:	461a      	mov	r2, r3
 8008d14:	212c      	movs	r1, #44	; 0x2c
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fb ff1e 	bl	8004b58 <lv_event_send>
    return p.y;
 8008d1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8008d30:	2100      	movs	r1, #0
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff fa45 	bl	80081c2 <lv_obj_get_style_width>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff fa75 	bl	800822e <lv_obj_get_style_height>
 8008d44:	4603      	mov	r3, r0
 8008d46:	81bb      	strh	r3, [r7, #12]
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8008d48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d4c:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d007      	beq.n	8008d64 <lv_obj_refresh_self_size+0x3c>
 8008d54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008d58:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d001      	beq.n	8008d64 <lv_obj_refresh_self_size+0x3c>
 8008d60:	2300      	movs	r3, #0
 8008d62:	e003      	b.n	8008d6c <lv_obj_refresh_self_size+0x44>

    lv_obj_mark_layout_as_dirty(obj);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff fe7f 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
    return true;
 8008d6a:	2301      	movs	r3, #1
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <lv_obj_refr_pos>:

void lv_obj_refr_pos(lv_obj_t * obj)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
    if(lv_obj_is_layout_positioned(obj)) return;
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff fe4b 	bl	8008a18 <lv_obj_is_layout_positioned>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 81ef 	bne.w	8009168 <lv_obj_refr_pos+0x3f4>


    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f005 f8ee 	bl	800df6c <lv_obj_get_parent>
 8008d90:	6138      	str	r0, [r7, #16]
    lv_coord_t x = lv_obj_get_style_x(obj, LV_PART_MAIN);
 8008d92:	2100      	movs	r1, #0
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff fa80 	bl	800829a <lv_obj_get_style_x>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	83fb      	strh	r3, [r7, #30]
    lv_coord_t y = lv_obj_get_style_y(obj, LV_PART_MAIN);
 8008d9e:	2100      	movs	r1, #0
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fa8c 	bl	80082be <lv_obj_get_style_y>
 8008da6:	4603      	mov	r3, r0
 8008da8:	83bb      	strh	r3, [r7, #28]

    if(parent == NULL) {
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d108      	bne.n	8008dc2 <lv_obj_refr_pos+0x4e>
        lv_obj_move_to(obj, x, y);
 8008db0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008db4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f9d8 	bl	8009170 <lv_obj_move_to>
        return;
 8008dc0:	e1d3      	b.n	800916a <lv_obj_refr_pos+0x3f6>
    }

    /*Handle percentage value*/
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8008dc2:	6938      	ldr	r0, [r7, #16]
 8008dc4:	f7ff fecf 	bl	8008b66 <lv_obj_get_content_width>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	81fb      	strh	r3, [r7, #14]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8008dcc:	6938      	ldr	r0, [r7, #16]
 8008dce:	f7ff fef5 	bl	8008bbc <lv_obj_get_content_height>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	81bb      	strh	r3, [r7, #12]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8008dd6:	8bfb      	ldrh	r3, [r7, #30]
 8008dd8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de0:	d123      	bne.n	8008e2a <lv_obj_refr_pos+0xb6>
 8008de2:	8bfb      	ldrh	r3, [r7, #30]
 8008de4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008de8:	b21b      	sxth	r3, r3
 8008dea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008dee:	dc1c      	bgt.n	8008e2a <lv_obj_refr_pos+0xb6>
 8008df0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008df4:	8bfb      	ldrh	r3, [r7, #30]
 8008df6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008dfa:	b21b      	sxth	r3, r3
 8008dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e00:	dd06      	ble.n	8008e10 <lv_obj_refr_pos+0x9c>
 8008e02:	8bfb      	ldrh	r3, [r7, #30]
 8008e04:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e08:	b21b      	sxth	r3, r3
 8008e0a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008e0e:	e003      	b.n	8008e18 <lv_obj_refr_pos+0xa4>
 8008e10:	8bfb      	ldrh	r3, [r7, #30]
 8008e12:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e16:	b21b      	sxth	r3, r3
 8008e18:	fb02 f303 	mul.w	r3, r2, r3
 8008e1c:	4aa6      	ldr	r2, [pc, #664]	; (80090b8 <lv_obj_refr_pos+0x344>)
 8008e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8008e22:	1152      	asrs	r2, r2, #5
 8008e24:	17db      	asrs	r3, r3, #31
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	83fb      	strh	r3, [r7, #30]
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8008e2a:	8bbb      	ldrh	r3, [r7, #28]
 8008e2c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e34:	d123      	bne.n	8008e7e <lv_obj_refr_pos+0x10a>
 8008e36:	8bbb      	ldrh	r3, [r7, #28]
 8008e38:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e3c:	b21b      	sxth	r3, r3
 8008e3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e42:	dc1c      	bgt.n	8008e7e <lv_obj_refr_pos+0x10a>
 8008e44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008e48:	8bbb      	ldrh	r3, [r7, #28]
 8008e4a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e4e:	b21b      	sxth	r3, r3
 8008e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e54:	dd06      	ble.n	8008e64 <lv_obj_refr_pos+0xf0>
 8008e56:	8bbb      	ldrh	r3, [r7, #28]
 8008e58:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e5c:	b21b      	sxth	r3, r3
 8008e5e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008e62:	e003      	b.n	8008e6c <lv_obj_refr_pos+0xf8>
 8008e64:	8bbb      	ldrh	r3, [r7, #28]
 8008e66:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e6a:	b21b      	sxth	r3, r3
 8008e6c:	fb02 f303 	mul.w	r3, r2, r3
 8008e70:	4a91      	ldr	r2, [pc, #580]	; (80090b8 <lv_obj_refr_pos+0x344>)
 8008e72:	fb82 1203 	smull	r1, r2, r2, r3
 8008e76:	1152      	asrs	r2, r2, #5
 8008e78:	17db      	asrs	r3, r3, #31
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	83bb      	strh	r3, [r7, #28]

    /*Handle percentage value of translate*/
    lv_coord_t tr_x = lv_obj_get_style_translate_x(obj, LV_PART_MAIN);
 8008e7e:	2100      	movs	r1, #0
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff fa40 	bl	8008306 <lv_obj_get_style_translate_x>
 8008e86:	4603      	mov	r3, r0
 8008e88:	837b      	strh	r3, [r7, #26]
    lv_coord_t tr_y = lv_obj_get_style_translate_y(obj, LV_PART_MAIN);
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fa4c 	bl	800832a <lv_obj_get_style_translate_y>
 8008e92:	4603      	mov	r3, r0
 8008e94:	833b      	strh	r3, [r7, #24]
    lv_coord_t w = lv_obj_get_width(obj);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff fe49 	bl	8008b2e <lv_obj_get_width>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	817b      	strh	r3, [r7, #10]
    lv_coord_t h = lv_obj_get_height(obj);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff fe52 	bl	8008b4a <lv_obj_get_height>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	813b      	strh	r3, [r7, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8008eaa:	8b7b      	ldrh	r3, [r7, #26]
 8008eac:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eb4:	d123      	bne.n	8008efe <lv_obj_refr_pos+0x18a>
 8008eb6:	8b7b      	ldrh	r3, [r7, #26]
 8008eb8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008ebc:	b21b      	sxth	r3, r3
 8008ebe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008ec2:	dc1c      	bgt.n	8008efe <lv_obj_refr_pos+0x18a>
 8008ec4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008ec8:	8b7b      	ldrh	r3, [r7, #26]
 8008eca:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008ece:	b21b      	sxth	r3, r3
 8008ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ed4:	dd06      	ble.n	8008ee4 <lv_obj_refr_pos+0x170>
 8008ed6:	8b7b      	ldrh	r3, [r7, #26]
 8008ed8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008edc:	b21b      	sxth	r3, r3
 8008ede:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008ee2:	e003      	b.n	8008eec <lv_obj_refr_pos+0x178>
 8008ee4:	8b7b      	ldrh	r3, [r7, #26]
 8008ee6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008eea:	b21b      	sxth	r3, r3
 8008eec:	fb02 f303 	mul.w	r3, r2, r3
 8008ef0:	4a71      	ldr	r2, [pc, #452]	; (80090b8 <lv_obj_refr_pos+0x344>)
 8008ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8008ef6:	1152      	asrs	r2, r2, #5
 8008ef8:	17db      	asrs	r3, r3, #31
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	837b      	strh	r3, [r7, #26]
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8008efe:	8b3b      	ldrh	r3, [r7, #24]
 8008f00:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f08:	d123      	bne.n	8008f52 <lv_obj_refr_pos+0x1de>
 8008f0a:	8b3b      	ldrh	r3, [r7, #24]
 8008f0c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008f16:	dc1c      	bgt.n	8008f52 <lv_obj_refr_pos+0x1de>
 8008f18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008f1c:	8b3b      	ldrh	r3, [r7, #24]
 8008f1e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008f22:	b21b      	sxth	r3, r3
 8008f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f28:	dd06      	ble.n	8008f38 <lv_obj_refr_pos+0x1c4>
 8008f2a:	8b3b      	ldrh	r3, [r7, #24]
 8008f2c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008f30:	b21b      	sxth	r3, r3
 8008f32:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008f36:	e003      	b.n	8008f40 <lv_obj_refr_pos+0x1cc>
 8008f38:	8b3b      	ldrh	r3, [r7, #24]
 8008f3a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008f3e:	b21b      	sxth	r3, r3
 8008f40:	fb02 f303 	mul.w	r3, r2, r3
 8008f44:	4a5c      	ldr	r2, [pc, #368]	; (80090b8 <lv_obj_refr_pos+0x344>)
 8008f46:	fb82 1203 	smull	r1, r2, r2, r3
 8008f4a:	1152      	asrs	r2, r2, #5
 8008f4c:	17db      	asrs	r3, r3, #31
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	833b      	strh	r3, [r7, #24]

    /*Use the translation*/
    x += tr_x;
 8008f52:	8bfa      	ldrh	r2, [r7, #30]
 8008f54:	8b7b      	ldrh	r3, [r7, #26]
 8008f56:	4413      	add	r3, r2
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	83fb      	strh	r3, [r7, #30]
    y += tr_y;
 8008f5c:	8bba      	ldrh	r2, [r7, #28]
 8008f5e:	8b3b      	ldrh	r3, [r7, #24]
 8008f60:	4413      	add	r3, r2
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	83bb      	strh	r3, [r7, #28]

    lv_align_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8008f66:	2100      	movs	r1, #0
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff f9ba 	bl	80082e2 <lv_obj_get_style_align>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]

    if(align == LV_ALIGN_DEFAULT) {
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10b      	bne.n	8008f90 <lv_obj_refr_pos+0x21c>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8008f78:	2100      	movs	r1, #0
 8008f7a:	6938      	ldr	r0, [r7, #16]
 8008f7c:	f7ff fa9b 	bl	80084b6 <lv_obj_get_style_base_dir>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d102      	bne.n	8008f8c <lv_obj_refr_pos+0x218>
 8008f86:	2303      	movs	r3, #3
 8008f88:	75fb      	strb	r3, [r7, #23]
 8008f8a:	e001      	b.n	8008f90 <lv_obj_refr_pos+0x21c>
        else align = LV_ALIGN_TOP_LEFT;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]
    }

    if(align == LV_ALIGN_TOP_LEFT) {
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d108      	bne.n	8008fa8 <lv_obj_refr_pos+0x234>
        lv_obj_move_to(obj, x, y);
 8008f96:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008f9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f8e5 	bl	8009170 <lv_obj_move_to>
 8008fa6:	e0e0      	b.n	800916a <lv_obj_refr_pos+0x3f6>
    }
    else {

        switch(align) {
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	3b02      	subs	r3, #2
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	f200 80d1 	bhi.w	8009154 <lv_obj_refr_pos+0x3e0>
 8008fb2:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <lv_obj_refr_pos+0x244>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	08008fd9 	.word	0x08008fd9
 8008fbc:	08009007 	.word	0x08009007
 8008fc0:	08009047 	.word	0x08009047
 8008fc4:	08009059 	.word	0x08009059
 8008fc8:	08009097 	.word	0x08009097
 8008fcc:	08009019 	.word	0x08009019
 8008fd0:	080090bd 	.word	0x080090bd
 8008fd4:	080090fb 	.word	0x080090fb
            case LV_ALIGN_TOP_MID:
                x += pw / 2 - w / 2;
 8008fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	da00      	bge.n	8008fe2 <lv_obj_refr_pos+0x26e>
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	105b      	asrs	r3, r3, #1
 8008fe4:	b21b      	sxth	r3, r3
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	da00      	bge.n	8008ff2 <lv_obj_refr_pos+0x27e>
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	105b      	asrs	r3, r3, #1
 8008ff4:	b21b      	sxth	r3, r3
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	8bfb      	ldrh	r3, [r7, #30]
 8008ffe:	4413      	add	r3, r2
 8009000:	b29b      	uxth	r3, r3
 8009002:	83fb      	strh	r3, [r7, #30]
                break;
 8009004:	e0a7      	b.n	8009156 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_TOP_RIGHT:
                x += pw - w;
 8009006:	89fa      	ldrh	r2, [r7, #14]
 8009008:	897b      	ldrh	r3, [r7, #10]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	b29a      	uxth	r2, r3
 800900e:	8bfb      	ldrh	r3, [r7, #30]
 8009010:	4413      	add	r3, r2
 8009012:	b29b      	uxth	r3, r3
 8009014:	83fb      	strh	r3, [r7, #30]
                break;
 8009016:	e09e      	b.n	8009156 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_LEFT_MID:
                y += ph / 2 - h / 2;
 8009018:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	da00      	bge.n	8009022 <lv_obj_refr_pos+0x2ae>
 8009020:	3301      	adds	r3, #1
 8009022:	105b      	asrs	r3, r3, #1
 8009024:	b21b      	sxth	r3, r3
 8009026:	b29a      	uxth	r2, r3
 8009028:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	da00      	bge.n	8009032 <lv_obj_refr_pos+0x2be>
 8009030:	3301      	adds	r3, #1
 8009032:	105b      	asrs	r3, r3, #1
 8009034:	b21b      	sxth	r3, r3
 8009036:	b29b      	uxth	r3, r3
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	b29a      	uxth	r2, r3
 800903c:	8bbb      	ldrh	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	b29b      	uxth	r3, r3
 8009042:	83bb      	strh	r3, [r7, #28]
                break;
 8009044:	e087      	b.n	8009156 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_LEFT:
                y += ph - h;
 8009046:	89ba      	ldrh	r2, [r7, #12]
 8009048:	893b      	ldrh	r3, [r7, #8]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	b29a      	uxth	r2, r3
 800904e:	8bbb      	ldrh	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	b29b      	uxth	r3, r3
 8009054:	83bb      	strh	r3, [r7, #28]
                break;
 8009056:	e07e      	b.n	8009156 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_MID:
                x += pw / 2 - w / 2;
 8009058:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800905c:	2b00      	cmp	r3, #0
 800905e:	da00      	bge.n	8009062 <lv_obj_refr_pos+0x2ee>
 8009060:	3301      	adds	r3, #1
 8009062:	105b      	asrs	r3, r3, #1
 8009064:	b21b      	sxth	r3, r3
 8009066:	b29a      	uxth	r2, r3
 8009068:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da00      	bge.n	8009072 <lv_obj_refr_pos+0x2fe>
 8009070:	3301      	adds	r3, #1
 8009072:	105b      	asrs	r3, r3, #1
 8009074:	b21b      	sxth	r3, r3
 8009076:	b29b      	uxth	r3, r3
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	b29a      	uxth	r2, r3
 800907c:	8bfb      	ldrh	r3, [r7, #30]
 800907e:	4413      	add	r3, r2
 8009080:	b29b      	uxth	r3, r3
 8009082:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 8009084:	89ba      	ldrh	r2, [r7, #12]
 8009086:	893b      	ldrh	r3, [r7, #8]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	b29a      	uxth	r2, r3
 800908c:	8bbb      	ldrh	r3, [r7, #28]
 800908e:	4413      	add	r3, r2
 8009090:	b29b      	uxth	r3, r3
 8009092:	83bb      	strh	r3, [r7, #28]
                break;
 8009094:	e05f      	b.n	8009156 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_RIGHT:
                x += pw - w;
 8009096:	89fa      	ldrh	r2, [r7, #14]
 8009098:	897b      	ldrh	r3, [r7, #10]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	b29a      	uxth	r2, r3
 800909e:	8bfb      	ldrh	r3, [r7, #30]
 80090a0:	4413      	add	r3, r2
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 80090a6:	89ba      	ldrh	r2, [r7, #12]
 80090a8:	893b      	ldrh	r3, [r7, #8]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	8bbb      	ldrh	r3, [r7, #28]
 80090b0:	4413      	add	r3, r2
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	83bb      	strh	r3, [r7, #28]
                break;
 80090b6:	e04e      	b.n	8009156 <lv_obj_refr_pos+0x3e2>
 80090b8:	51eb851f 	.word	0x51eb851f
            case LV_ALIGN_RIGHT_MID:
                x += pw - w;
 80090bc:	89fa      	ldrh	r2, [r7, #14]
 80090be:	897b      	ldrh	r3, [r7, #10]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	8bfb      	ldrh	r3, [r7, #30]
 80090c6:	4413      	add	r3, r2
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 80090cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	da00      	bge.n	80090d6 <lv_obj_refr_pos+0x362>
 80090d4:	3301      	adds	r3, #1
 80090d6:	105b      	asrs	r3, r3, #1
 80090d8:	b21b      	sxth	r3, r3
 80090da:	b29a      	uxth	r2, r3
 80090dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da00      	bge.n	80090e6 <lv_obj_refr_pos+0x372>
 80090e4:	3301      	adds	r3, #1
 80090e6:	105b      	asrs	r3, r3, #1
 80090e8:	b21b      	sxth	r3, r3
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	8bbb      	ldrh	r3, [r7, #28]
 80090f2:	4413      	add	r3, r2
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	83bb      	strh	r3, [r7, #28]
                break;
 80090f8:	e02d      	b.n	8009156 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_CENTER:
                x += pw / 2 - w / 2;
 80090fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da00      	bge.n	8009104 <lv_obj_refr_pos+0x390>
 8009102:	3301      	adds	r3, #1
 8009104:	105b      	asrs	r3, r3, #1
 8009106:	b21b      	sxth	r3, r3
 8009108:	b29a      	uxth	r2, r3
 800910a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800910e:	2b00      	cmp	r3, #0
 8009110:	da00      	bge.n	8009114 <lv_obj_refr_pos+0x3a0>
 8009112:	3301      	adds	r3, #1
 8009114:	105b      	asrs	r3, r3, #1
 8009116:	b21b      	sxth	r3, r3
 8009118:	b29b      	uxth	r3, r3
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	b29a      	uxth	r2, r3
 800911e:	8bfb      	ldrh	r3, [r7, #30]
 8009120:	4413      	add	r3, r2
 8009122:	b29b      	uxth	r3, r3
 8009124:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 8009126:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	da00      	bge.n	8009130 <lv_obj_refr_pos+0x3bc>
 800912e:	3301      	adds	r3, #1
 8009130:	105b      	asrs	r3, r3, #1
 8009132:	b21b      	sxth	r3, r3
 8009134:	b29a      	uxth	r2, r3
 8009136:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	da00      	bge.n	8009140 <lv_obj_refr_pos+0x3cc>
 800913e:	3301      	adds	r3, #1
 8009140:	105b      	asrs	r3, r3, #1
 8009142:	b21b      	sxth	r3, r3
 8009144:	b29b      	uxth	r3, r3
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	b29a      	uxth	r2, r3
 800914a:	8bbb      	ldrh	r3, [r7, #28]
 800914c:	4413      	add	r3, r2
 800914e:	b29b      	uxth	r3, r3
 8009150:	83bb      	strh	r3, [r7, #28]
                break;
 8009152:	e000      	b.n	8009156 <lv_obj_refr_pos+0x3e2>
            default:
                break;
 8009154:	bf00      	nop
        }
        lv_obj_move_to(obj, x, y);
 8009156:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800915a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f805 	bl	8009170 <lv_obj_move_to>
 8009166:	e000      	b.n	800916a <lv_obj_refr_pos+0x3f6>
    if(lv_obj_is_layout_positioned(obj)) return;
 8009168:	bf00      	nop
    }
}
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <lv_obj_move_to>:

void lv_obj_move_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8009170:	b590      	push	{r4, r7, lr}
 8009172:	b08d      	sub	sp, #52	; 0x34
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	807b      	strh	r3, [r7, #2]
 800917c:	4613      	mov	r3, r2
 800917e:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * parent = obj->parent;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	62bb      	str	r3, [r7, #40]	; 0x28

    if(parent) {
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	2b00      	cmp	r3, #0
 800918a:	d05a      	beq.n	8009242 <lv_obj_move_to+0xd2>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 800918c:	2100      	movs	r1, #0
 800918e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009190:	f7ff f949 	bl	8008426 <lv_obj_get_style_pad_left>
 8009194:	4603      	mov	r3, r0
 8009196:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8009198:	2100      	movs	r1, #0
 800919a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800919c:	f7ff f91f 	bl	80083de <lv_obj_get_style_pad_top>
 80091a0:	4603      	mov	r3, r0
 80091a2:	84bb      	strh	r3, [r7, #36]	; 0x24

        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80091a4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7fc feae 	bl	8005f0a <lv_obj_has_flag>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d016      	beq.n	80091e2 <lv_obj_move_to+0x72>
            x += pad_left + parent->coords.x1;
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091be:	4413      	add	r3, r2
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	887b      	ldrh	r3, [r7, #2]
 80091c4:	4413      	add	r3, r2
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1;
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091d4:	4413      	add	r3, r2
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	883b      	ldrh	r3, [r7, #0]
 80091da:	4413      	add	r3, r2
 80091dc:	b29b      	uxth	r3, r3
 80091de:	803b      	strh	r3, [r7, #0]
 80091e0:	e01f      	b.n	8009222 <lv_obj_move_to+0xb2>
        }
        else {
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80091e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80091e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e8:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80091ec:	189c      	adds	r4, r3, r2
 80091ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091f0:	f001 f968 	bl	800a4c4 <lv_obj_get_scroll_x>
 80091f4:	4603      	mov	r3, r0
 80091f6:	1ae3      	subs	r3, r4, r3
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	887b      	ldrh	r3, [r7, #2]
 80091fc:	4413      	add	r3, r2
 80091fe:	b29b      	uxth	r3, r3
 8009200:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8009202:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009208:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800920c:	189c      	adds	r4, r3, r2
 800920e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009210:	f001 f970 	bl	800a4f4 <lv_obj_get_scroll_y>
 8009214:	4603      	mov	r3, r0
 8009216:	1ae3      	subs	r3, r4, r3
 8009218:	b29a      	uxth	r2, r3
 800921a:	883b      	ldrh	r3, [r7, #0]
 800921c:	4413      	add	r3, r2
 800921e:	b29b      	uxth	r3, r3
 8009220:	803b      	strh	r3, [r7, #0]
        }

        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8009222:	2100      	movs	r1, #0
 8009224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009226:	f7ff f922 	bl	800846e <lv_obj_get_style_border_width>
 800922a:	4603      	mov	r3, r0
 800922c:	847b      	strh	r3, [r7, #34]	; 0x22
        x += border_width;
 800922e:	887a      	ldrh	r2, [r7, #2]
 8009230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009232:	4413      	add	r3, r2
 8009234:	b29b      	uxth	r3, r3
 8009236:	807b      	strh	r3, [r7, #2]
        y += border_width;
 8009238:	883a      	ldrh	r2, [r7, #0]
 800923a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800923c:	4413      	add	r3, r2
 800923e:	b29b      	uxth	r3, r3
 8009240:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 8009242:	887a      	ldrh	r2, [r7, #2]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800924a:	b29b      	uxth	r3, r3
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	b29b      	uxth	r3, r3
 8009250:	b21b      	sxth	r3, r3
 8009252:	83bb      	strh	r3, [r7, #28]
    diff.y = y - obj->coords.y1;
 8009254:	883a      	ldrh	r2, [r7, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800925c:	b29b      	uxth	r3, r3
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	b29b      	uxth	r3, r3
 8009262:	b21b      	sxth	r3, r3
 8009264:	83fb      	strh	r3, [r7, #30]

    /*Do nothing if the position is not changed*/
    /*It is very important else recursive positioning can
     *occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 8009266:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d104      	bne.n	8009278 <lv_obj_move_to+0x108>
 800926e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 808e 	beq.w	8009394 <lv_obj_move_to+0x224>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fa22 	bl	80096c2 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 800927e:	f107 0314 	add.w	r3, r7, #20
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff fc43 	bl	8008b10 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    bool on1 = false;
 800928a:	2300      	movs	r3, #0
 800928c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(parent) {
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	2b00      	cmp	r3, #0
 8009294:	d01a      	beq.n	80092cc <lv_obj_move_to+0x15c>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8009296:	f107 030c 	add.w	r3, r7, #12
 800929a:	4619      	mov	r1, r3
 800929c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800929e:	f7ff fcb8 	bl	8008c12 <lv_obj_get_content_coords>

        /*If the object is already out of the parent and its position is changes
         *surely the scrollbars also changes so invalidate them*/
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 80092a2:	f107 010c 	add.w	r1, r7, #12
 80092a6:	f107 0314 	add.w	r3, r7, #20
 80092aa:	2200      	movs	r2, #0
 80092ac:	4618      	mov	r0, r3
 80092ae:	f017 fc1d 	bl	8020aec <_lv_area_is_in>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 80092b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092bc:	f083 0301 	eor.w	r3, r3, #1
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <lv_obj_move_to+0x15c>
 80092c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092c8:	f002 fb98 	bl	800b9fc <lv_obj_scrollbar_invalidate>
    }

    obj->coords.x1 += diff.x;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4413      	add	r3, r2
 80092dc:	b29b      	uxth	r3, r3
 80092de:	b21a      	sxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	829a      	strh	r2, [r3, #20]
    obj->coords.y1 += diff.y;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	b21a      	sxth	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	82da      	strh	r2, [r3, #22]
    obj->coords.x2 += diff.x;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009302:	b29a      	uxth	r2, r3
 8009304:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009308:	b29b      	uxth	r3, r3
 800930a:	4413      	add	r3, r2
 800930c:	b29b      	uxth	r3, r3
 800930e:	b21a      	sxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	831a      	strh	r2, [r3, #24]
    obj->coords.y2 += diff.y;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800931a:	b29a      	uxth	r2, r3
 800931c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009320:	b29b      	uxth	r3, r3
 8009322:	4413      	add	r3, r2
 8009324:	b29b      	uxth	r3, r3
 8009326:	b21a      	sxth	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	835a      	strh	r2, [r3, #26]

    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 800932c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8009330:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009334:	2300      	movs	r3, #0
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f830 	bl	800939c <lv_obj_move_children_by>

    /*Call the ancestor's event handler to the parent too*/
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <lv_obj_move_to+0x1dc>
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	2122      	movs	r1, #34	; 0x22
 8009346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009348:	f7fb fc06 	bl	8004b58 <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f9b8 	bl	80096c2 <lv_obj_invalidate>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the srollbars*/
    if(parent) {
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	2b00      	cmp	r3, #0
 8009356:	d01e      	beq.n	8009396 <lv_obj_move_to+0x226>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3314      	adds	r3, #20
 800935c:	f107 010c 	add.w	r1, r7, #12
 8009360:	2200      	movs	r2, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f017 fbc2 	bl	8020aec <_lv_area_is_in>
 8009368:	4603      	mov	r3, r0
 800936a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800936e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <lv_obj_move_to+0x21c>
 8009376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800937a:	f083 0301 	eor.w	r3, r3, #1
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	d008      	beq.n	8009396 <lv_obj_move_to+0x226>
 8009384:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <lv_obj_move_to+0x226>
 800938c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800938e:	f002 fb35 	bl	800b9fc <lv_obj_scrollbar_invalidate>
 8009392:	e000      	b.n	8009396 <lv_obj_move_to+0x226>
    if(diff.x == 0 && diff.y == 0) return;
 8009394:	bf00      	nop
    }
}
 8009396:	3734      	adds	r7, #52	; 0x34
 8009398:	46bd      	mov	sp, r7
 800939a:	bd90      	pop	{r4, r7, pc}

0800939c <lv_obj_move_children_by>:

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	461a      	mov	r2, r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	817b      	strh	r3, [r7, #10]
 80093ae:	460b      	mov	r3, r1
 80093b0:	813b      	strh	r3, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f004 fe1c 	bl	800dff4 <lv_obj_get_child_cnt>
 80093bc:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 80093be:	2300      	movs	r3, #0
 80093c0:	61fb      	str	r3, [r7, #28]
 80093c2:	e047      	b.n	8009454 <lv_obj_move_children_by+0xb8>
        lv_obj_t * child = obj->spec_attr->children[i];
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	617b      	str	r3, [r7, #20]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <lv_obj_move_children_by+0x4e>
 80093da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80093de:	6978      	ldr	r0, [r7, #20]
 80093e0:	f7fc fd93 	bl	8005f0a <lv_obj_has_flag>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d130      	bne.n	800944c <lv_obj_move_children_by+0xb0>
        child->coords.x1 += x_diff;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	897b      	ldrh	r3, [r7, #10]
 80093f4:	4413      	add	r3, r2
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	b21a      	sxth	r2, r3
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	829a      	strh	r2, [r3, #20]
        child->coords.y1 += y_diff;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009404:	b29a      	uxth	r2, r3
 8009406:	893b      	ldrh	r3, [r7, #8]
 8009408:	4413      	add	r3, r2
 800940a:	b29b      	uxth	r3, r3
 800940c:	b21a      	sxth	r2, r3
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	82da      	strh	r2, [r3, #22]
        child->coords.x2 += x_diff;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009418:	b29a      	uxth	r2, r3
 800941a:	897b      	ldrh	r3, [r7, #10]
 800941c:	4413      	add	r3, r2
 800941e:	b29b      	uxth	r3, r3
 8009420:	b21a      	sxth	r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	831a      	strh	r2, [r3, #24]
        child->coords.y2 += y_diff;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800942c:	b29a      	uxth	r2, r3
 800942e:	893b      	ldrh	r3, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	b29b      	uxth	r3, r3
 8009434:	b21a      	sxth	r2, r3
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	835a      	strh	r2, [r3, #26]

        lv_obj_move_children_by(child, x_diff, y_diff, false);
 800943a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800943e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009442:	2300      	movs	r3, #0
 8009444:	6978      	ldr	r0, [r7, #20]
 8009446:	f7ff ffa9 	bl	800939c <lv_obj_move_children_by>
 800944a:	e000      	b.n	800944e <lv_obj_move_children_by+0xb2>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 800944c:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	3301      	adds	r3, #1
 8009452:	61fb      	str	r3, [r7, #28]
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	429a      	cmp	r2, r3
 800945a:	d3b3      	bcc.n	80093c4 <lv_obj_move_children_by+0x28>
    }
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	3720      	adds	r7, #32
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <lv_obj_transform_point>:

void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, bool recursive, bool inv)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	4611      	mov	r1, r2
 8009472:	461a      	mov	r2, r3
 8009474:	460b      	mov	r3, r1
 8009476:	71fb      	strb	r3, [r7, #7]
 8009478:	4613      	mov	r3, r2
 800947a:	71bb      	strb	r3, [r7, #6]
    if(obj) {
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d036      	beq.n	80094f0 <lv_obj_transform_point+0x8a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f7fe fe3a 	bl	80080fc <_lv_obj_get_layer_type>
 8009488:	4603      	mov	r3, r0
 800948a:	75fb      	strb	r3, [r7, #23]
        bool do_tranf = layer_type == LV_LAYER_TYPE_TRANSFORM;
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	2b02      	cmp	r3, #2
 8009490:	bf0c      	ite	eq
 8009492:	2301      	moveq	r3, #1
 8009494:	2300      	movne	r3, #0
 8009496:	75bb      	strb	r3, [r7, #22]
        if(inv) {
 8009498:	79bb      	ldrb	r3, [r7, #6]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d014      	beq.n	80094c8 <lv_obj_transform_point+0x62>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d007      	beq.n	80094b4 <lv_obj_transform_point+0x4e>
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f004 fd61 	bl	800df6c <lv_obj_get_parent>
 80094aa:	79bb      	ldrb	r3, [r7, #6]
 80094ac:	79fa      	ldrb	r2, [r7, #7]
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	f7ff ffd9 	bl	8009466 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 80094b4:	7dbb      	ldrb	r3, [r7, #22]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d01a      	beq.n	80094f0 <lv_obj_transform_point+0x8a>
 80094ba:	79bb      	ldrb	r3, [r7, #6]
 80094bc:	461a      	mov	r2, r3
 80094be:	68b9      	ldr	r1, [r7, #8]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 fd8d 	bl	8009fe0 <transform_point>
        else {
            if(do_tranf) transform_point(obj, p, inv);
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
        }
    }
}
 80094c6:	e013      	b.n	80094f0 <lv_obj_transform_point+0x8a>
            if(do_tranf) transform_point(obj, p, inv);
 80094c8:	7dbb      	ldrb	r3, [r7, #22]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d005      	beq.n	80094da <lv_obj_transform_point+0x74>
 80094ce:	79bb      	ldrb	r3, [r7, #6]
 80094d0:	461a      	mov	r2, r3
 80094d2:	68b9      	ldr	r1, [r7, #8]
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 fd83 	bl	8009fe0 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <lv_obj_transform_point+0x8a>
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f004 fd43 	bl	800df6c <lv_obj_get_parent>
 80094e6:	79bb      	ldrb	r3, [r7, #6]
 80094e8:	79fa      	ldrb	r2, [r7, #7]
 80094ea:	68b9      	ldr	r1, [r7, #8]
 80094ec:	f7ff ffbb 	bl	8009466 <lv_obj_transform_point>
}
 80094f0:	bf00      	nop
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <lv_obj_get_transformed_area>:

void lv_obj_get_transformed_area(const lv_obj_t * obj, lv_area_t * area, bool recursive,
                                 bool inv)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	4611      	mov	r1, r2
 8009504:	461a      	mov	r2, r3
 8009506:	460b      	mov	r3, r1
 8009508:	71fb      	strb	r3, [r7, #7]
 800950a:	4613      	mov	r3, r2
 800950c:	71bb      	strb	r3, [r7, #6]
    lv_point_t p[4] = {
        {area->x1, area->y1},
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 8009514:	823b      	strh	r3, [r7, #16]
        {area->x1, area->y1},
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 800951c:	827b      	strh	r3, [r7, #18]
        {area->x1, area->y2},
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 8009524:	82bb      	strh	r3, [r7, #20]
        {area->x1, area->y2},
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 800952c:	82fb      	strh	r3, [r7, #22]
        {area->x2, area->y1},
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 8009534:	833b      	strh	r3, [r7, #24]
        {area->x2, area->y1},
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 800953c:	837b      	strh	r3, [r7, #26]
        {area->x2, area->y2},
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 8009544:	83bb      	strh	r3, [r7, #28]
        {area->x2, area->y2},
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 800954c:	83fb      	strh	r3, [r7, #30]
    };

    lv_obj_transform_point(obj, &p[0], recursive, inv);
 800954e:	79bb      	ldrb	r3, [r7, #6]
 8009550:	79fa      	ldrb	r2, [r7, #7]
 8009552:	f107 0110 	add.w	r1, r7, #16
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f7ff ff85 	bl	8009466 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 800955c:	79b8      	ldrb	r0, [r7, #6]
 800955e:	79fa      	ldrb	r2, [r7, #7]
 8009560:	f107 0310 	add.w	r3, r7, #16
 8009564:	1d19      	adds	r1, r3, #4
 8009566:	4603      	mov	r3, r0
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f7ff ff7c 	bl	8009466 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 800956e:	79b8      	ldrb	r0, [r7, #6]
 8009570:	79fa      	ldrb	r2, [r7, #7]
 8009572:	f107 0310 	add.w	r3, r7, #16
 8009576:	f103 0108 	add.w	r1, r3, #8
 800957a:	4603      	mov	r3, r0
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7ff ff72 	bl	8009466 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 8009582:	79b8      	ldrb	r0, [r7, #6]
 8009584:	79fa      	ldrb	r2, [r7, #7]
 8009586:	f107 0310 	add.w	r3, r7, #16
 800958a:	f103 010c 	add.w	r1, r3, #12
 800958e:	4603      	mov	r3, r0
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f7ff ff68 	bl	8009466 <lv_obj_transform_point>

    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 8009596:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800959a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800959e:	4293      	cmp	r3, r2
 80095a0:	bfa8      	it	ge
 80095a2:	4613      	movge	r3, r2
 80095a4:	b21a      	sxth	r2, r3
 80095a6:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80095aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80095ae:	428b      	cmp	r3, r1
 80095b0:	bfa8      	it	ge
 80095b2:	460b      	movge	r3, r1
 80095b4:	b21b      	sxth	r3, r3
 80095b6:	4293      	cmp	r3, r2
 80095b8:	bfa8      	it	ge
 80095ba:	4613      	movge	r3, r2
 80095bc:	b21a      	sxth	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	801a      	strh	r2, [r3, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 80095c2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80095c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80095ca:	4293      	cmp	r3, r2
 80095cc:	bfb8      	it	lt
 80095ce:	4613      	movlt	r3, r2
 80095d0:	b21a      	sxth	r2, r3
 80095d2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80095d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80095da:	428b      	cmp	r3, r1
 80095dc:	bfb8      	it	lt
 80095de:	460b      	movlt	r3, r1
 80095e0:	b21b      	sxth	r3, r3
 80095e2:	4293      	cmp	r3, r2
 80095e4:	bfb8      	it	lt
 80095e6:	4613      	movlt	r3, r2
 80095e8:	b21a      	sxth	r2, r3
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	809a      	strh	r2, [r3, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 80095ee:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80095f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80095f6:	4293      	cmp	r3, r2
 80095f8:	bfa8      	it	ge
 80095fa:	4613      	movge	r3, r2
 80095fc:	b21a      	sxth	r2, r3
 80095fe:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8009602:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009606:	428b      	cmp	r3, r1
 8009608:	bfa8      	it	ge
 800960a:	460b      	movge	r3, r1
 800960c:	b21b      	sxth	r3, r3
 800960e:	4293      	cmp	r3, r2
 8009610:	bfa8      	it	ge
 8009612:	4613      	movge	r3, r2
 8009614:	b21a      	sxth	r2, r3
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	805a      	strh	r2, [r3, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 800961a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800961e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009622:	4293      	cmp	r3, r2
 8009624:	bfb8      	it	lt
 8009626:	4613      	movlt	r3, r2
 8009628:	b21a      	sxth	r2, r3
 800962a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800962e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009632:	428b      	cmp	r3, r1
 8009634:	bfb8      	it	lt
 8009636:	460b      	movlt	r3, r1
 8009638:	b21b      	sxth	r3, r3
 800963a:	4293      	cmp	r3, r2
 800963c:	bfb8      	it	lt
 800963e:	4613      	movlt	r3, r2
 8009640:	b21a      	sxth	r2, r3
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	80da      	strh	r2, [r3, #6]
    lv_area_increase(area, 5, 5);
 8009646:	2205      	movs	r2, #5
 8009648:	2105      	movs	r1, #5
 800964a:	68b8      	ldr	r0, [r7, #8]
 800964c:	f016 fffe 	bl	802064c <lv_area_increase>
}
 8009650:	bf00      	nop
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <lv_obj_invalidate_area>:


void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f004 fc48 	bl	800def8 <lv_obj_get_disp>
 8009668:	6178      	str	r0, [r7, #20]
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800966a:	6978      	ldr	r0, [r7, #20]
 800966c:	f7fb f96a 	bl	8004944 <lv_disp_is_invalidation_enabled>
 8009670:	4603      	mov	r3, r0
 8009672:	f083 0301 	eor.w	r3, r3, #1
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d11c      	bne.n	80096b6 <lv_obj_invalidate_area+0x5e>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 800967c:	f107 030c 	add.w	r3, r7, #12
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fd50 	bl	8008128 <lv_area_copy>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8009688:	f107 030c 	add.w	r3, r7, #12
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f853 	bl	800973a <lv_obj_area_is_visible>
 8009694:	4603      	mov	r3, r0
 8009696:	f083 0301 	eor.w	r3, r3, #1
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10c      	bne.n	80096ba <lv_obj_invalidate_area+0x62>

    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f004 fc29 	bl	800def8 <lv_obj_get_disp>
 80096a6:	4602      	mov	r2, r0
 80096a8:	f107 030c 	add.w	r3, r7, #12
 80096ac:	4619      	mov	r1, r3
 80096ae:	4610      	mov	r0, r2
 80096b0:	f004 ff3e 	bl	800e530 <_lv_inv_area>
 80096b4:	e002      	b.n	80096bc <lv_obj_invalidate_area+0x64>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 80096b6:	bf00      	nop
 80096b8:	e000      	b.n	80096bc <lv_obj_invalidate_area+0x64>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 80096ba:	bf00      	nop
}
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <lv_obj_invalidate>:

void lv_obj_invalidate(const lv_obj_t * obj)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7fe fd02 	bl	80080d4 <_lv_obj_get_ext_draw_size>
 80096d0:	4603      	mov	r3, r0
 80096d2:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f103 0214 	add.w	r2, r3, #20
 80096da:	f107 030c 	add.w	r3, r7, #12
 80096de:	4611      	mov	r1, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe fd21 	bl	8008128 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 80096e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	8afb      	ldrh	r3, [r7, #22]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	b21b      	sxth	r3, r3
 80096f4:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 80096f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	8afb      	ldrh	r3, [r7, #22]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	b21b      	sxth	r3, r3
 8009704:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 8009706:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800970a:	b29a      	uxth	r2, r3
 800970c:	8afb      	ldrh	r3, [r7, #22]
 800970e:	4413      	add	r3, r2
 8009710:	b29b      	uxth	r3, r3
 8009712:	b21b      	sxth	r3, r3
 8009714:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 8009716:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800971a:	b29a      	uxth	r2, r3
 800971c:	8afb      	ldrh	r3, [r7, #22]
 800971e:	4413      	add	r3, r2
 8009720:	b29b      	uxth	r3, r3
 8009722:	b21b      	sxth	r3, r3
 8009724:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 8009726:	f107 030c 	add.w	r3, r7, #12
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff ff93 	bl	8009658 <lv_obj_invalidate_area>

}
 8009732:	bf00      	nop
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <lv_obj_area_is_visible>:

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b08a      	sub	sp, #40	; 0x28
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8009744:	2101      	movs	r1, #1
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7fc fbdf 	bl	8005f0a <lv_obj_has_flag>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <lv_obj_area_is_visible+0x1c>
 8009752:	2300      	movs	r3, #0
 8009754:	e0b2      	b.n	80098bc <lv_obj_area_is_visible+0x182>

    /*Invalidate the object only if it belongs to the current or previous or one of the layers'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f004 fbba 	bl	800ded0 <lv_obj_get_screen>
 800975c:	6238      	str	r0, [r7, #32]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800975e:	6a38      	ldr	r0, [r7, #32]
 8009760:	f004 fbca 	bl	800def8 <lv_obj_get_disp>
 8009764:	61f8      	str	r0, [r7, #28]
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8009766:	69f8      	ldr	r0, [r7, #28]
 8009768:	f7fa fdf2 	bl	8004350 <lv_disp_get_scr_act>
 800976c:	4602      	mov	r2, r0
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	4293      	cmp	r3, r2
 8009772:	d016      	beq.n	80097a2 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8009774:	69f8      	ldr	r0, [r7, #28]
 8009776:	f7fa fe00 	bl	800437a <lv_disp_get_scr_prev>
 800977a:	4602      	mov	r2, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	4293      	cmp	r3, r2
 8009780:	d00f      	beq.n	80097a2 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8009782:	69f8      	ldr	r0, [r7, #28]
 8009784:	f7fa fe1e 	bl	80043c4 <lv_disp_get_layer_top>
 8009788:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_scr_prev(disp) &&
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	4293      	cmp	r3, r2
 800978e:	d008      	beq.n	80097a2 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8009790:	69f8      	ldr	r0, [r7, #28]
 8009792:	f7fa fe2c 	bl	80043ee <lv_disp_get_layer_sys>
 8009796:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_layer_top(disp) &&
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	4293      	cmp	r3, r2
 800979c:	d001      	beq.n	80097a2 <lv_obj_area_is_visible+0x68>
        return false;
 800979e:	2300      	movs	r3, #0
 80097a0:	e08c      	b.n	80098bc <lv_obj_area_is_visible+0x182>
    }

    /*Truncate the area to the object*/
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80097a2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7fc fbc4 	bl	8005f34 <lv_obj_has_flag_any>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f083 0301 	eor.w	r3, r3, #1
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d03c      	beq.n	8009832 <lv_obj_area_is_visible+0xf8>
        lv_area_t obj_coords;
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7fe fc8b 	bl	80080d4 <_lv_obj_get_ext_draw_size>
 80097be:	4603      	mov	r3, r0
 80097c0:	837b      	strh	r3, [r7, #26]
        lv_area_copy(&obj_coords, &obj->coords);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f103 0214 	add.w	r2, r3, #20
 80097c8:	f107 0310 	add.w	r3, r7, #16
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fcaa 	bl	8008128 <lv_area_copy>
        obj_coords.x1 -= ext_size;
 80097d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80097d8:	b29a      	uxth	r2, r3
 80097da:	8b7b      	ldrh	r3, [r7, #26]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	b29b      	uxth	r3, r3
 80097e0:	b21b      	sxth	r3, r3
 80097e2:	823b      	strh	r3, [r7, #16]
        obj_coords.y1 -= ext_size;
 80097e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	8b7b      	ldrh	r3, [r7, #26]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	b21b      	sxth	r3, r3
 80097f2:	827b      	strh	r3, [r7, #18]
        obj_coords.x2 += ext_size;
 80097f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	8b7b      	ldrh	r3, [r7, #26]
 80097fc:	4413      	add	r3, r2
 80097fe:	b29b      	uxth	r3, r3
 8009800:	b21b      	sxth	r3, r3
 8009802:	82bb      	strh	r3, [r7, #20]
        obj_coords.y2 += ext_size;
 8009804:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009808:	b29a      	uxth	r2, r3
 800980a:	8b7b      	ldrh	r3, [r7, #26]
 800980c:	4413      	add	r3, r2
 800980e:	b29b      	uxth	r3, r3
 8009810:	b21b      	sxth	r3, r3
 8009812:	82fb      	strh	r3, [r7, #22]

        /*The area is not on the object*/
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8009814:	f107 0310 	add.w	r3, r7, #16
 8009818:	461a      	mov	r2, r3
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6838      	ldr	r0, [r7, #0]
 800981e:	f016 ff81 	bl	8020724 <_lv_area_intersect>
 8009822:	4603      	mov	r3, r0
 8009824:	f083 0301 	eor.w	r3, r3, #1
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <lv_obj_area_is_visible+0xf8>
 800982e:	2300      	movs	r3, #0
 8009830:	e044      	b.n	80098bc <lv_obj_area_is_visible+0x182>
    }

    lv_obj_get_transformed_area(obj, area, true, false);
 8009832:	2300      	movs	r3, #0
 8009834:	2201      	movs	r2, #1
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff fe5d 	bl	80094f8 <lv_obj_get_transformed_area>


    /*Truncate recursively to the parents*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f004 fb94 	bl	800df6c <lv_obj_get_parent>
 8009844:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 8009846:	e035      	b.n	80098b4 <lv_obj_area_is_visible+0x17a>
        /*If the parent is hidden then the child is hidden and won't be drawn*/
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 8009848:	2101      	movs	r1, #1
 800984a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800984c:	f7fc fb5d 	bl	8005f0a <lv_obj_has_flag>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <lv_obj_area_is_visible+0x120>
 8009856:	2300      	movs	r3, #0
 8009858:	e030      	b.n	80098bc <lv_obj_area_is_visible+0x182>

        /*Truncate to the parent and if no common parts break*/
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800985a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800985e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009860:	f7fc fb68 	bl	8005f34 <lv_obj_has_flag_any>
 8009864:	4603      	mov	r3, r0
 8009866:	f083 0301 	eor.w	r3, r3, #1
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01d      	beq.n	80098ac <lv_obj_area_is_visible+0x172>
            lv_area_t par_area = par->coords;
 8009870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009872:	f107 0308 	add.w	r3, r7, #8
 8009876:	3214      	adds	r2, #20
 8009878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800987c:	e883 0003 	stmia.w	r3, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 8009880:	f107 0108 	add.w	r1, r7, #8
 8009884:	2300      	movs	r3, #0
 8009886:	2201      	movs	r2, #1
 8009888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800988a:	f7ff fe35 	bl	80094f8 <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 800988e:	f107 0308 	add.w	r3, r7, #8
 8009892:	461a      	mov	r2, r3
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6838      	ldr	r0, [r7, #0]
 8009898:	f016 ff44 	bl	8020724 <_lv_area_intersect>
 800989c:	4603      	mov	r3, r0
 800989e:	f083 0301 	eor.w	r3, r3, #1
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <lv_obj_area_is_visible+0x172>
 80098a8:	2300      	movs	r3, #0
 80098aa:	e007      	b.n	80098bc <lv_obj_area_is_visible+0x182>
        }

        par = lv_obj_get_parent(par);
 80098ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098ae:	f004 fb5d 	bl	800df6c <lv_obj_get_parent>
 80098b2:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1c6      	bne.n	8009848 <lv_obj_area_is_visible+0x10e>
    }

    return true;
 80098ba:	2301      	movs	r3, #1
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3728      	adds	r7, #40	; 0x28
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <lv_clamp_width>:

    return res;
}

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 80098c4:	b490      	push	{r4, r7}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4604      	mov	r4, r0
 80098cc:	4608      	mov	r0, r1
 80098ce:	4611      	mov	r1, r2
 80098d0:	461a      	mov	r2, r3
 80098d2:	4623      	mov	r3, r4
 80098d4:	80fb      	strh	r3, [r7, #6]
 80098d6:	4603      	mov	r3, r0
 80098d8:	80bb      	strh	r3, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	807b      	strh	r3, [r7, #2]
 80098de:	4613      	mov	r3, r2
 80098e0:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80098e2:	88bb      	ldrh	r3, [r7, #4]
 80098e4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80098e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ec:	d123      	bne.n	8009936 <lv_clamp_width+0x72>
 80098ee:	88bb      	ldrh	r3, [r7, #4]
 80098f0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80098f4:	b21b      	sxth	r3, r3
 80098f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80098fa:	dc1c      	bgt.n	8009936 <lv_clamp_width+0x72>
 80098fc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009900:	88bb      	ldrh	r3, [r7, #4]
 8009902:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009906:	b21b      	sxth	r3, r3
 8009908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800990c:	dd06      	ble.n	800991c <lv_clamp_width+0x58>
 800990e:	88bb      	ldrh	r3, [r7, #4]
 8009910:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009914:	b21b      	sxth	r3, r3
 8009916:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800991a:	e003      	b.n	8009924 <lv_clamp_width+0x60>
 800991c:	88bb      	ldrh	r3, [r7, #4]
 800991e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009922:	b21b      	sxth	r3, r3
 8009924:	fb02 f303 	mul.w	r3, r2, r3
 8009928:	4a21      	ldr	r2, [pc, #132]	; (80099b0 <lv_clamp_width+0xec>)
 800992a:	fb82 1203 	smull	r1, r2, r2, r3
 800992e:	1152      	asrs	r2, r2, #5
 8009930:	17db      	asrs	r3, r3, #31
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8009936:	887b      	ldrh	r3, [r7, #2]
 8009938:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800993c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009940:	d123      	bne.n	800998a <lv_clamp_width+0xc6>
 8009942:	887b      	ldrh	r3, [r7, #2]
 8009944:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009948:	b21b      	sxth	r3, r3
 800994a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800994e:	dc1c      	bgt.n	800998a <lv_clamp_width+0xc6>
 8009950:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009954:	887b      	ldrh	r3, [r7, #2]
 8009956:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800995a:	b21b      	sxth	r3, r3
 800995c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009960:	dd06      	ble.n	8009970 <lv_clamp_width+0xac>
 8009962:	887b      	ldrh	r3, [r7, #2]
 8009964:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009968:	b21b      	sxth	r3, r3
 800996a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800996e:	e003      	b.n	8009978 <lv_clamp_width+0xb4>
 8009970:	887b      	ldrh	r3, [r7, #2]
 8009972:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009976:	b21b      	sxth	r3, r3
 8009978:	fb02 f303 	mul.w	r3, r2, r3
 800997c:	4a0c      	ldr	r2, [pc, #48]	; (80099b0 <lv_clamp_width+0xec>)
 800997e:	fb82 1203 	smull	r1, r2, r2, r3
 8009982:	1152      	asrs	r2, r2, #5
 8009984:	17db      	asrs	r3, r3, #31
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_width, width, max_width);
 800998a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800998e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009992:	4293      	cmp	r3, r2
 8009994:	bfa8      	it	ge
 8009996:	4613      	movge	r3, r2
 8009998:	b21b      	sxth	r3, r3
 800999a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800999e:	4293      	cmp	r3, r2
 80099a0:	bfb8      	it	lt
 80099a2:	4613      	movlt	r3, r2
 80099a4:	b21b      	sxth	r3, r3
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bc90      	pop	{r4, r7}
 80099ae:	4770      	bx	lr
 80099b0:	51eb851f 	.word	0x51eb851f

080099b4 <lv_clamp_height>:

lv_coord_t lv_clamp_height(lv_coord_t height, lv_coord_t min_height, lv_coord_t max_height, lv_coord_t ref_height)
{
 80099b4:	b490      	push	{r4, r7}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	4611      	mov	r1, r2
 80099c0:	461a      	mov	r2, r3
 80099c2:	4623      	mov	r3, r4
 80099c4:	80fb      	strh	r3, [r7, #6]
 80099c6:	4603      	mov	r3, r0
 80099c8:	80bb      	strh	r3, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	807b      	strh	r3, [r7, #2]
 80099ce:	4613      	mov	r3, r2
 80099d0:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 80099d2:	88bb      	ldrh	r3, [r7, #4]
 80099d4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80099d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099dc:	d123      	bne.n	8009a26 <lv_clamp_height+0x72>
 80099de:	88bb      	ldrh	r3, [r7, #4]
 80099e0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80099e4:	b21b      	sxth	r3, r3
 80099e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80099ea:	dc1c      	bgt.n	8009a26 <lv_clamp_height+0x72>
 80099ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80099f0:	88bb      	ldrh	r3, [r7, #4]
 80099f2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80099f6:	b21b      	sxth	r3, r3
 80099f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099fc:	dd06      	ble.n	8009a0c <lv_clamp_height+0x58>
 80099fe:	88bb      	ldrh	r3, [r7, #4]
 8009a00:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009a04:	b21b      	sxth	r3, r3
 8009a06:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009a0a:	e003      	b.n	8009a14 <lv_clamp_height+0x60>
 8009a0c:	88bb      	ldrh	r3, [r7, #4]
 8009a0e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009a12:	b21b      	sxth	r3, r3
 8009a14:	fb02 f303 	mul.w	r3, r2, r3
 8009a18:	4a21      	ldr	r2, [pc, #132]	; (8009aa0 <lv_clamp_height+0xec>)
 8009a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8009a1e:	1152      	asrs	r2, r2, #5
 8009a20:	17db      	asrs	r3, r3, #31
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8009a26:	887b      	ldrh	r3, [r7, #2]
 8009a28:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a30:	d123      	bne.n	8009a7a <lv_clamp_height+0xc6>
 8009a32:	887b      	ldrh	r3, [r7, #2]
 8009a34:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009a38:	b21b      	sxth	r3, r3
 8009a3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009a3e:	dc1c      	bgt.n	8009a7a <lv_clamp_height+0xc6>
 8009a40:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009a44:	887b      	ldrh	r3, [r7, #2]
 8009a46:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009a4a:	b21b      	sxth	r3, r3
 8009a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a50:	dd06      	ble.n	8009a60 <lv_clamp_height+0xac>
 8009a52:	887b      	ldrh	r3, [r7, #2]
 8009a54:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009a58:	b21b      	sxth	r3, r3
 8009a5a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009a5e:	e003      	b.n	8009a68 <lv_clamp_height+0xb4>
 8009a60:	887b      	ldrh	r3, [r7, #2]
 8009a62:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009a66:	b21b      	sxth	r3, r3
 8009a68:	fb02 f303 	mul.w	r3, r2, r3
 8009a6c:	4a0c      	ldr	r2, [pc, #48]	; (8009aa0 <lv_clamp_height+0xec>)
 8009a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8009a72:	1152      	asrs	r2, r2, #5
 8009a74:	17db      	asrs	r3, r3, #31
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_height, height, max_height);
 8009a7a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bfa8      	it	ge
 8009a86:	4613      	movge	r3, r2
 8009a88:	b21b      	sxth	r3, r3
 8009a8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	bfb8      	it	lt
 8009a92:	4613      	movlt	r3, r2
 8009a94:	b21b      	sxth	r3, r3
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bc90      	pop	{r4, r7}
 8009a9e:	4770      	bx	lr
 8009aa0:	51eb851f 	.word	0x51eb851f

08009aa4 <calc_content_width>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
 8009aa4:	b590      	push	{r4, r7, lr}
 8009aa6:	b08d      	sub	sp, #52	; 0x34
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 f923 	bl	800acfc <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7fe fcd8 	bl	800846e <lv_obj_get_style_border_width>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7fe fcc0 	bl	800844a <lv_obj_get_style_pad_right>
 8009aca:	4603      	mov	r3, r0
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ad0:	4413      	add	r3, r2
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7fe fca4 	bl	8008426 <lv_obj_get_style_pad_left>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ae4:	4413      	add	r3, r2
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff f8f0 	bl	8008cd0 <lv_obj_get_self_width>
 8009af0:	4603      	mov	r3, r0
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009af6:	4413      	add	r3, r2
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009afc:	4413      	add	r3, r2
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	843b      	strh	r3, [r7, #32]

    lv_coord_t child_res = LV_COORD_MIN;
 8009b02:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009b06:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f004 fa73 	bl	800dff4 <lv_obj_get_child_cnt>
 8009b0e:	61f8      	str	r0, [r7, #28]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8009b10:	2100      	movs	r1, #0
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7fe fccf 	bl	80084b6 <lv_obj_get_style_base_dir>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	f040 8094 	bne.w	8009c48 <calc_content_width+0x1a4>
        for(i = 0; i < child_cnt; i++) {
 8009b20:	2300      	movs	r3, #0
 8009b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b24:	e07f      	b.n	8009c26 <calc_content_width+0x182>
            lv_obj_t * child = obj->spec_attr->children[i];
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	613b      	str	r3, [r7, #16]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009b36:	4994      	ldr	r1, [pc, #592]	; (8009d88 <calc_content_width+0x2e4>)
 8009b38:	6938      	ldr	r0, [r7, #16]
 8009b3a:	f7fc f9fb 	bl	8005f34 <lv_obj_has_flag_any>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d16c      	bne.n	8009c1e <calc_content_width+0x17a>

            if(!lv_obj_is_layout_positioned(child)) {
 8009b44:	6938      	ldr	r0, [r7, #16]
 8009b46:	f7fe ff67 	bl	8008a18 <lv_obj_is_layout_positioned>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f083 0301 	eor.w	r3, r3, #1
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d053      	beq.n	8009bfe <calc_content_width+0x15a>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 8009b56:	2100      	movs	r1, #0
 8009b58:	6938      	ldr	r0, [r7, #16]
 8009b5a:	f7fe fbc2 	bl	80082e2 <lv_obj_get_style_align>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73fb      	strb	r3, [r7, #15]
                switch(align) {
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	d825      	bhi.n	8009bb4 <calc_content_width+0x110>
 8009b68:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <calc_content_width+0xcc>)
 8009b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6e:	bf00      	nop
 8009b70:	08009b95 	.word	0x08009b95
 8009b74:	08009bb5 	.word	0x08009bb5
 8009b78:	08009bb5 	.word	0x08009bb5
 8009b7c:	08009b95 	.word	0x08009b95
 8009b80:	08009bb5 	.word	0x08009bb5
 8009b84:	08009bb5 	.word	0x08009bb5
 8009b88:	08009b95 	.word	0x08009b95
 8009b8c:	08009bb5 	.word	0x08009bb5
 8009b90:	08009b95 	.word	0x08009b95
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_RIGHT:
                    case LV_ALIGN_BOTTOM_RIGHT:
                    case LV_ALIGN_RIGHT_MID:
                        /*Normal right aligns. Other are ignored due to possible circular dependencies*/
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009baa:	4293      	cmp	r3, r2
 8009bac:	bfb8      	it	lt
 8009bae:	4613      	movlt	r3, r2
 8009bb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8009bb2:	e035      	b.n	8009c20 <calc_content_width+0x17c>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	6938      	ldr	r0, [r7, #16]
 8009bb8:	f7fe fb6f 	bl	800829a <lv_obj_get_style_x>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d12e      	bne.n	8009c20 <calc_content_width+0x17c>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8009bc2:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	3314      	adds	r3, #20
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe facb 	bl	8008166 <lv_area_get_width>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009bd8:	4413      	add	r3, r2
 8009bda:	429c      	cmp	r4, r3
 8009bdc:	dc0b      	bgt.n	8009bf6 <calc_content_width+0x152>
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	3314      	adds	r3, #20
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fabf 	bl	8008166 <lv_area_get_width>
 8009be8:	4603      	mov	r3, r0
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bee:	4413      	add	r3, r2
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	b21b      	sxth	r3, r3
 8009bf4:	e001      	b.n	8009bfa <calc_content_width+0x156>
 8009bf6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009bfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009bfc:	e010      	b.n	8009c20 <calc_content_width+0x17c>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009c04:	461a      	mov	r2, r3
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009c14:	4293      	cmp	r3, r2
 8009c16:	bfb8      	it	lt
 8009c18:	4613      	movlt	r3, r2
 8009c1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009c1c:	e000      	b.n	8009c20 <calc_content_width+0x17c>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009c1e:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	3301      	adds	r3, #1
 8009c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	f4ff af7b 	bcc.w	8009b26 <calc_content_width+0x82>
            }
        }
        if(child_res != LV_COORD_MIN) {
 8009c30:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009c34:	4a55      	ldr	r2, [pc, #340]	; (8009d8c <calc_content_width+0x2e8>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	f000 8092 	beq.w	8009d60 <calc_content_width+0x2bc>
            child_res += pad_left;
 8009c3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c40:	4413      	add	r3, r2
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009c46:	e08b      	b.n	8009d60 <calc_content_width+0x2bc>
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 8009c48:	2300      	movs	r3, #0
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c4c:	e07a      	b.n	8009d44 <calc_content_width+0x2a0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	61bb      	str	r3, [r7, #24]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009c5e:	494a      	ldr	r1, [pc, #296]	; (8009d88 <calc_content_width+0x2e4>)
 8009c60:	69b8      	ldr	r0, [r7, #24]
 8009c62:	f7fc f967 	bl	8005f34 <lv_obj_has_flag_any>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d167      	bne.n	8009d3c <calc_content_width+0x298>

            if(!lv_obj_is_layout_positioned(child)) {
 8009c6c:	69b8      	ldr	r0, [r7, #24]
 8009c6e:	f7fe fed3 	bl	8008a18 <lv_obj_is_layout_positioned>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f083 0301 	eor.w	r3, r3, #1
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d04e      	beq.n	8009d1c <calc_content_width+0x278>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 8009c7e:	2100      	movs	r1, #0
 8009c80:	69b8      	ldr	r0, [r7, #24]
 8009c82:	f7fe fb2e 	bl	80082e2 <lv_obj_get_style_align>
 8009c86:	4603      	mov	r3, r0
 8009c88:	75fb      	strb	r3, [r7, #23]
                switch(align) {
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	2b07      	cmp	r3, #7
 8009c8e:	bf8c      	ite	hi
 8009c90:	2201      	movhi	r2, #1
 8009c92:	2200      	movls	r2, #0
 8009c94:	b2d2      	uxtb	r2, r2
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	d11b      	bne.n	8009cd2 <calc_content_width+0x22e>
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca0:	f003 0393 	and.w	r3, r3, #147	; 0x93
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bf14      	ite	ne
 8009ca8:	2301      	movne	r3, #1
 8009caa:	2300      	moveq	r3, #0
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00f      	beq.n	8009cd2 <calc_content_width+0x22e>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	bfb8      	it	lt
 8009ccc:	4613      	movlt	r3, r2
 8009cce:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8009cd0:	e035      	b.n	8009d3e <calc_content_width+0x29a>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	69b8      	ldr	r0, [r7, #24]
 8009cd6:	f7fe faf2 	bl	80082be <lv_obj_get_style_y>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d12e      	bne.n	8009d3e <calc_content_width+0x29a>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8009ce0:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	3314      	adds	r3, #20
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fa3c 	bl	8008166 <lv_area_get_width>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009cf6:	4413      	add	r3, r2
 8009cf8:	429c      	cmp	r4, r3
 8009cfa:	dc0b      	bgt.n	8009d14 <calc_content_width+0x270>
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	3314      	adds	r3, #20
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fa30 	bl	8008166 <lv_area_get_width>
 8009d06:	4603      	mov	r3, r0
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d0c:	4413      	add	r3, r2
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	b21b      	sxth	r3, r3
 8009d12:	e001      	b.n	8009d18 <calc_content_width+0x274>
 8009d14:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009d18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009d1a:	e010      	b.n	8009d3e <calc_content_width+0x29a>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009d32:	4293      	cmp	r3, r2
 8009d34:	bfb8      	it	lt
 8009d36:	4613      	movlt	r3, r2
 8009d38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009d3a:	e000      	b.n	8009d3e <calc_content_width+0x29a>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009d3c:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	3301      	adds	r3, #1
 8009d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d380      	bcc.n	8009c4e <calc_content_width+0x1aa>
            }
        }

        if(child_res != LV_COORD_MIN) {
 8009d4c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009d50:	4a0e      	ldr	r2, [pc, #56]	; (8009d8c <calc_content_width+0x2e8>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d004      	beq.n	8009d60 <calc_content_width+0x2bc>
            child_res += pad_right;
 8009d56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d5a:	4413      	add	r3, r2
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 8009d60:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009d64:	4a09      	ldr	r2, [pc, #36]	; (8009d8c <calc_content_width+0x2e8>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d102      	bne.n	8009d70 <calc_content_width+0x2cc>
 8009d6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009d6e:	e007      	b.n	8009d80 <calc_content_width+0x2dc>
    else return LV_MAX(child_res, self_w);
 8009d70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009d74:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	bfb8      	it	lt
 8009d7c:	4613      	movlt	r3, r2
 8009d7e:	b21b      	sxth	r3, r3
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3734      	adds	r7, #52	; 0x34
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd90      	pop	{r4, r7, pc}
 8009d88:	00040001 	.word	0x00040001
 8009d8c:	ffffe001 	.word	0xffffe001

08009d90 <calc_content_height>:

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
 8009d90:	b590      	push	{r4, r7, lr}
 8009d92:	b08b      	sub	sp, #44	; 0x2c
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 ffd1 	bl	800ad44 <lv_obj_scroll_to_y>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009da2:	2100      	movs	r1, #0
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7fe fb62 	bl	800846e <lv_obj_get_style_border_width>
 8009daa:	4603      	mov	r3, r0
 8009dac:	83fb      	strh	r3, [r7, #30]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8009dae:	2100      	movs	r1, #0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7fe fb14 	bl	80083de <lv_obj_get_style_pad_top>
 8009db6:	4603      	mov	r3, r0
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	8bfb      	ldrh	r3, [r7, #30]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7fe fb1c 	bl	8008402 <lv_obj_get_style_pad_bottom>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	8bfb      	ldrh	r3, [r7, #30]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	837b      	strh	r3, [r7, #26]

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7fe ff90 	bl	8008cfc <lv_obj_get_self_height>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	8bbb      	ldrh	r3, [r7, #28]
 8009de2:	4413      	add	r3, r2
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	8b7b      	ldrh	r3, [r7, #26]
 8009de8:	4413      	add	r3, r2
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = LV_COORD_MIN;
 8009dee:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009df2:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f004 f8fd 	bl	800dff4 <lv_obj_get_child_cnt>
 8009dfa:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	623b      	str	r3, [r7, #32]
 8009e00:	e06b      	b.n	8009eda <calc_content_height+0x14a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	613b      	str	r3, [r7, #16]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009e12:	4940      	ldr	r1, [pc, #256]	; (8009f14 <calc_content_height+0x184>)
 8009e14:	6938      	ldr	r0, [r7, #16]
 8009e16:	f7fc f88d 	bl	8005f34 <lv_obj_has_flag_any>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d156      	bne.n	8009ece <calc_content_height+0x13e>


        if(!lv_obj_is_layout_positioned(child)) {
 8009e20:	6938      	ldr	r0, [r7, #16]
 8009e22:	f7fe fdf9 	bl	8008a18 <lv_obj_is_layout_positioned>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f083 0301 	eor.w	r3, r3, #1
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d03d      	beq.n	8009eae <calc_content_height+0x11e>
            lv_align_t align = lv_obj_get_style_align(child, 0);
 8009e32:	2100      	movs	r1, #0
 8009e34:	6938      	ldr	r0, [r7, #16]
 8009e36:	f7fe fa54 	bl	80082e2 <lv_obj_get_style_align>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73fb      	strb	r3, [r7, #15]
            switch(align) {
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d80f      	bhi.n	8009e64 <calc_content_height+0xd4>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	bfb8      	it	lt
 8009e5e:	4613      	movlt	r3, r2
 8009e60:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 8009e62:	e037      	b.n	8009ed4 <calc_content_height+0x144>
                default:
                    /* Consider other cases only if y=0 and use the height of the object.
                     * With y!=0 circular dependency could occur. */
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8009e64:	2100      	movs	r1, #0
 8009e66:	6938      	ldr	r0, [r7, #16]
 8009e68:	f7fe fa29 	bl	80082be <lv_obj_get_style_y>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d12f      	bne.n	8009ed2 <calc_content_height+0x142>
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 8009e72:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	3314      	adds	r3, #20
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe f98a 	bl	8008194 <lv_area_get_height>
 8009e80:	4603      	mov	r3, r0
 8009e82:	461a      	mov	r2, r3
 8009e84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	dc0b      	bgt.n	8009ea6 <calc_content_height+0x116>
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	3314      	adds	r3, #20
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe f97e 	bl	8008194 <lv_area_get_height>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	8bbb      	ldrh	r3, [r7, #28]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	b21b      	sxth	r3, r3
 8009ea4:	e001      	b.n	8009eaa <calc_content_height+0x11a>
 8009ea6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009eaa:	84fb      	strh	r3, [r7, #38]	; 0x26
                    }
                    break;
 8009eac:	e011      	b.n	8009ed2 <calc_content_height+0x142>
            }
        }
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	bfb8      	it	lt
 8009ec8:	4613      	movlt	r3, r2
 8009eca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009ecc:	e002      	b.n	8009ed4 <calc_content_height+0x144>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009ece:	bf00      	nop
 8009ed0:	e000      	b.n	8009ed4 <calc_content_height+0x144>
                    break;
 8009ed2:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	623b      	str	r3, [r7, #32]
 8009eda:	6a3a      	ldr	r2, [r7, #32]
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d38f      	bcc.n	8009e02 <calc_content_height+0x72>
        }
    }

    if(child_res != LV_COORD_MIN) {
 8009ee2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009ee6:	4a0c      	ldr	r2, [pc, #48]	; (8009f18 <calc_content_height+0x188>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d00d      	beq.n	8009f08 <calc_content_height+0x178>
        child_res += pad_bottom;
 8009eec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009eee:	8b7b      	ldrh	r3, [r7, #26]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	84fb      	strh	r3, [r7, #38]	; 0x26
        return LV_MAX(child_res, self_h);
 8009ef6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009efa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009efe:	4293      	cmp	r3, r2
 8009f00:	bfb8      	it	lt
 8009f02:	4613      	movlt	r3, r2
 8009f04:	b21b      	sxth	r3, r3
 8009f06:	e001      	b.n	8009f0c <calc_content_height+0x17c>
    }
    else {
        return self_h;
 8009f08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    }

}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	372c      	adds	r7, #44	; 0x2c
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd90      	pop	{r4, r7, pc}
 8009f14:	00040001 	.word	0x00040001
 8009f18:	ffffe001 	.word	0xffffe001

08009f1c <layout_update_core>:

static void layout_update_core(lv_obj_t * obj)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f004 f865 	bl	800dff4 <lv_obj_get_child_cnt>
 8009f2a:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	e00d      	b.n	8009f4e <layout_update_core+0x32>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]
        layout_update_core(child);
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f7ff ffea 	bl	8009f1c <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	61fb      	str	r3, [r7, #28]
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d3ed      	bcc.n	8009f32 <layout_update_core+0x16>
    }

    if(obj->layout_inv == 0) return;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d034      	beq.n	8009fd0 <layout_update_core+0xb4>

    obj->layout_inv = 0;
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8009f6c:	f36f 0300 	bfc	r3, #0, #1
 8009f70:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    lv_obj_refr_size(obj);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7fe fb13 	bl	80085a0 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7fe fefa 	bl	8008d74 <lv_obj_refr_pos>

    if(child_cnt > 0) {
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d025      	beq.n	8009fd2 <layout_update_core+0xb6>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8009f86:	2100      	movs	r1, #0
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7fe fa82 	bl	8008492 <lv_obj_get_style_layout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	617b      	str	r3, [r7, #20]
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d01c      	beq.n	8009fd2 <layout_update_core+0xb6>
 8009f98:	4b0f      	ldr	r3, [pc, #60]	; (8009fd8 <layout_update_core+0xbc>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d817      	bhi.n	8009fd2 <layout_update_core+0xb6>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8009fa2:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <layout_update_core+0xc0>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	6979      	ldr	r1, [r7, #20]
 8009fa8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009fac:	440b      	add	r3, r1
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	4413      	add	r3, r2
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	613b      	str	r3, [r7, #16]
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <layout_update_core+0xc0>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	6979      	ldr	r1, [r7, #20]
 8009fbc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009fc0:	440b      	add	r3, r1
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6939      	ldr	r1, [r7, #16]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	4798      	blx	r3
 8009fce:	e000      	b.n	8009fd2 <layout_update_core+0xb6>
    if(obj->layout_inv == 0) return;
 8009fd0:	bf00      	nop
        }
    }
}
 8009fd2:	3720      	adds	r7, #32
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	2000070c 	.word	0x2000070c
 8009fdc:	200008bc 	.word	0x200008bc

08009fe0 <transform_point>:

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 8009fe0:	b590      	push	{r4, r7, lr}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	4613      	mov	r3, r2
 8009fec:	71fb      	strb	r3, [r7, #7]
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
 8009fee:	2100      	movs	r1, #0
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f7fe f9be 	bl	8008372 <lv_obj_get_style_transform_angle>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	82fb      	strh	r3, [r7, #22]
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f7fe f9a6 	bl	800834e <lv_obj_get_style_transform_zoom>
 800a002:	4603      	mov	r3, r0
 800a004:	82bb      	strh	r3, [r7, #20]

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800a006:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d105      	bne.n	800a01a <transform_point+0x3a>
 800a00e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a016:	f000 80a6 	beq.w	800a166 <transform_point+0x186>

    lv_point_t pivot = {
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 800a01a:	2100      	movs	r1, #0
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7fe f9ba 	bl	8008396 <lv_obj_get_style_transform_pivot_x>
 800a022:	4603      	mov	r3, r0
    lv_point_t pivot = {
 800a024:	823b      	strh	r3, [r7, #16]
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800a026:	2100      	movs	r1, #0
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7fe f9c6 	bl	80083ba <lv_obj_get_style_transform_pivot_y>
 800a02e:	4603      	mov	r3, r0
    lv_point_t pivot = {
 800a030:	827b      	strh	r3, [r7, #18]
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 800a032:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a036:	b29b      	uxth	r3, r3
 800a038:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a03c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a040:	d12d      	bne.n	800a09e <transform_point+0xbe>
 800a042:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a046:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a04a:	b21b      	sxth	r3, r3
 800a04c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a050:	dc25      	bgt.n	800a09e <transform_point+0xbe>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800a052:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a056:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a05a:	b21b      	sxth	r3, r3
 800a05c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a060:	dd07      	ble.n	800a072 <transform_point+0x92>
 800a062:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a066:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a06a:	b21b      	sxth	r3, r3
 800a06c:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800a070:	e005      	b.n	800a07e <transform_point+0x9e>
 800a072:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a076:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a07a:	b21b      	sxth	r3, r3
 800a07c:	461c      	mov	r4, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3314      	adds	r3, #20
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe f86f 	bl	8008166 <lv_area_get_width>
 800a088:	4603      	mov	r3, r0
 800a08a:	fb04 f303 	mul.w	r3, r4, r3
 800a08e:	4a38      	ldr	r2, [pc, #224]	; (800a170 <transform_point+0x190>)
 800a090:	fb82 1203 	smull	r1, r2, r2, r3
 800a094:	1152      	asrs	r2, r2, #5
 800a096:	17db      	asrs	r3, r3, #31
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	b21b      	sxth	r3, r3
 800a09c:	823b      	strh	r3, [r7, #16]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 800a09e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ac:	d12d      	bne.n	800a10a <transform_point+0x12a>
 800a0ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0b2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a0b6:	b21b      	sxth	r3, r3
 800a0b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a0bc:	dc25      	bgt.n	800a10a <transform_point+0x12a>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800a0be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0c2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a0c6:	b21b      	sxth	r3, r3
 800a0c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0cc:	dd07      	ble.n	800a0de <transform_point+0xfe>
 800a0ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0d2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a0d6:	b21b      	sxth	r3, r3
 800a0d8:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800a0dc:	e005      	b.n	800a0ea <transform_point+0x10a>
 800a0de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0e2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a0e6:	b21b      	sxth	r3, r3
 800a0e8:	461c      	mov	r4, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3314      	adds	r3, #20
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe f850 	bl	8008194 <lv_area_get_height>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	fb04 f303 	mul.w	r3, r4, r3
 800a0fa:	4a1d      	ldr	r2, [pc, #116]	; (800a170 <transform_point+0x190>)
 800a0fc:	fb82 1203 	smull	r1, r2, r2, r3
 800a100:	1152      	asrs	r2, r2, #5
 800a102:	17db      	asrs	r3, r3, #31
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	b21b      	sxth	r3, r3
 800a108:	827b      	strh	r3, [r7, #18]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a110:	b29a      	uxth	r2, r3
 800a112:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a116:	b29b      	uxth	r3, r3
 800a118:	4413      	add	r3, r2
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	b21b      	sxth	r3, r3
 800a11e:	823b      	strh	r3, [r7, #16]
    pivot.y = obj->coords.y1 + pivot.y;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a126:	b29a      	uxth	r2, r3
 800a128:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	4413      	add	r3, r2
 800a130:	b29b      	uxth	r3, r3
 800a132:	b21b      	sxth	r3, r3
 800a134:	827b      	strh	r3, [r7, #18]

    if(inv) {
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00a      	beq.n	800a152 <transform_point+0x172>
        angle = -angle;
 800a13c:	8afb      	ldrh	r3, [r7, #22]
 800a13e:	425b      	negs	r3, r3
 800a140:	b29b      	uxth	r3, r3
 800a142:	82fb      	strh	r3, [r7, #22]
        zoom = (256 * 256) / zoom;
 800a144:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a148:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a14c:	fb92 f3f3 	sdiv	r3, r2, r3
 800a150:	82bb      	strh	r3, [r7, #20]
    }

    lv_point_transform(p, angle, zoom, &pivot);
 800a152:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800a156:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a15a:	f107 0310 	add.w	r3, r7, #16
 800a15e:	68b8      	ldr	r0, [r7, #8]
 800a160:	f016 fdea 	bl	8020d38 <lv_point_transform>
 800a164:	e000      	b.n	800a168 <transform_point+0x188>
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800a166:	bf00      	nop
}
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd90      	pop	{r4, r7, pc}
 800a16e:	bf00      	nop
 800a170:	51eb851f 	.word	0x51eb851f

0800a174 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	b29b      	uxth	r3, r3
 800a190:	3301      	adds	r3, #1
 800a192:	b29b      	uxth	r3, r3
 800a194:	b21b      	sxth	r3, r3
}
 800a196:	4618      	mov	r0, r3
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b083      	sub	sp, #12
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	3301      	adds	r3, #1
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	b21b      	sxth	r3, r3
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
    a->var = var;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	601a      	str	r2, [r3, #0]
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	605a      	str	r2, [r3, #4]
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <lv_anim_set_path_cb>:
 * Set the path (curve) of the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function to set the current value of the animation.
 */
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	61da      	str	r2, [r3, #28]
}
 800a25e:	bf00      	nop
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b083      	sub	sp, #12
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	60da      	str	r2, [r3, #12]
}
 800a27a:	bf00      	nop
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <lv_obj_get_style_width>:
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800a290:	2201      	movs	r2, #1
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f002 fb5d 	bl	800c954 <lv_obj_get_style_prop>
 800a29a:	4603      	mov	r3, r0
 800a29c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	b21b      	sxth	r3, r3
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <lv_obj_get_style_pad_top>:
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a2b4:	2210      	movs	r2, #16
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f002 fb4b 	bl	800c954 <lv_obj_get_style_prop>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	b21b      	sxth	r3, r3
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <lv_obj_get_style_pad_bottom>:
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a2d8:	2211      	movs	r2, #17
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f002 fb39 	bl	800c954 <lv_obj_get_style_prop>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	b21b      	sxth	r3, r3
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <lv_obj_get_style_pad_left>:
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a2fc:	2212      	movs	r2, #18
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f002 fb27 	bl	800c954 <lv_obj_get_style_prop>
 800a306:	4603      	mov	r3, r0
 800a308:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	b21b      	sxth	r3, r3
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <lv_obj_get_style_pad_right>:
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a320:	2213      	movs	r2, #19
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f002 fb15 	bl	800c954 <lv_obj_get_style_prop>
 800a32a:	4603      	mov	r3, r0
 800a32c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	b21b      	sxth	r3, r3
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <lv_obj_get_style_bg_opa>:
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800a344:	2221      	movs	r2, #33	; 0x21
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f002 fb03 	bl	800c954 <lv_obj_get_style_prop>
 800a34e:	4603      	mov	r3, r0
 800a350:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	b2db      	uxtb	r3, r3
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <lv_obj_get_style_border_opa>:
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800a368:	2231      	movs	r2, #49	; 0x31
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f002 faf1 	bl	800c954 <lv_obj_get_style_prop>
 800a372:	4603      	mov	r3, r0
 800a374:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	b2db      	uxtb	r3, r3
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <lv_obj_get_style_border_width>:
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a38c:	2232      	movs	r2, #50	; 0x32
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f002 fadf 	bl	800c954 <lv_obj_get_style_prop>
 800a396:	4603      	mov	r3, r0
 800a398:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	b21b      	sxth	r3, r3
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <lv_obj_get_style_base_dir>:
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a3b0:	2216      	movs	r2, #22
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f002 facd 	bl	800c954 <lv_obj_get_style_prop>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	b2db      	uxtb	r3, r3
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <lv_obj_set_scrollbar_mode>:
/*=====================
 * Setter functions
 *====================*/

void lv_obj_set_scrollbar_mode(lv_obj_t * obj, lv_scrollbar_mode_t mode)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7fb fde0 	bl	8005f9c <lv_obj_allocate_spec_attr>

    if(obj->spec_attr->scrollbar_mode == mode) return;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	7e1b      	ldrb	r3, [r3, #24]
 800a3e2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	78fb      	ldrb	r3, [r7, #3]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d00d      	beq.n	800a40c <lv_obj_set_scrollbar_mode+0x42>
    obj->spec_attr->scrollbar_mode = mode;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	b2d9      	uxtb	r1, r3
 800a3fc:	7e13      	ldrb	r3, [r2, #24]
 800a3fe:	f361 0301 	bfi	r3, r1, #0, #2
 800a402:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff f95c 	bl	80096c2 <lv_obj_invalidate>
 800a40a:	e000      	b.n	800a40e <lv_obj_set_scrollbar_mode+0x44>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 800a40c:	bf00      	nop
}
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <lv_obj_get_scrollbar_mode>:
/*=====================
 * Getter functions
 *====================*/

lv_scrollbar_mode_t lv_obj_get_scrollbar_mode(const lv_obj_t * obj)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d006      	beq.n	800a432 <lv_obj_get_scrollbar_mode+0x1e>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	7e1b      	ldrb	r3, [r3, #24]
 800a42a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	e000      	b.n	800a434 <lv_obj_get_scrollbar_mode+0x20>
    else return LV_SCROLLBAR_MODE_AUTO;
 800a432:	2303      	movs	r3, #3
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <lv_obj_get_scroll_dir>:

lv_dir_t lv_obj_get_scroll_dir(const lv_obj_t * obj)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d006      	beq.n	800a45e <lv_obj_get_scroll_dir+0x1e>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	7e5b      	ldrb	r3, [r3, #25]
 800a456:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	e000      	b.n	800a460 <lv_obj_get_scroll_dir+0x20>
    else return LV_DIR_ALL;
 800a45e:	230f      	movs	r3, #15
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <lv_obj_get_scroll_snap_x>:

lv_scroll_snap_t lv_obj_get_scroll_snap_x(const lv_obj_t * obj)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d006      	beq.n	800a48a <lv_obj_get_scroll_snap_x+0x1e>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	7e1b      	ldrb	r3, [r3, #24]
 800a482:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a486:	b2db      	uxtb	r3, r3
 800a488:	e000      	b.n	800a48c <lv_obj_get_scroll_snap_x+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <lv_obj_get_scroll_snap_y>:

lv_scroll_snap_t lv_obj_get_scroll_snap_y(const lv_obj_t * obj)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d006      	beq.n	800a4b6 <lv_obj_get_scroll_snap_y+0x1e>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	7e1b      	ldrb	r3, [r3, #24]
 800a4ae:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	e000      	b.n	800a4b8 <lv_obj_get_scroll_snap_y+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <lv_obj_get_scroll_x>:

lv_coord_t lv_obj_get_scroll_x(const lv_obj_t * obj)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <lv_obj_get_scroll_x+0x14>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	e007      	b.n	800a4e8 <lv_obj_get_scroll_x+0x24>
    return -obj->spec_attr->scroll.x;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	425b      	negs	r3, r3
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	b21b      	sxth	r3, r3
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <lv_obj_get_scroll_y>:

lv_coord_t lv_obj_get_scroll_y(const lv_obj_t * obj)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <lv_obj_get_scroll_y+0x14>
 800a504:	2300      	movs	r3, #0
 800a506:	e007      	b.n	800a518 <lv_obj_get_scroll_y+0x24>
    return -obj->spec_attr->scroll.y;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a510:	b29b      	uxth	r3, r3
 800a512:	425b      	negs	r3, r3
 800a514:	b29b      	uxth	r3, r3
 800a516:	b21b      	sxth	r3, r3
}
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <lv_obj_get_scroll_top>:

lv_coord_t lv_obj_get_scroll_top(lv_obj_t * obj)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <lv_obj_get_scroll_top+0x14>
 800a534:	2300      	movs	r3, #0
 800a536:	e007      	b.n	800a548 <lv_obj_get_scroll_top+0x24>
    return -obj->spec_attr->scroll.y;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a540:	b29b      	uxth	r3, r3
 800a542:	425b      	negs	r3, r3
 800a544:	b29b      	uxth	r3, r3
 800a546:	b21b      	sxth	r3, r3
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <lv_obj_get_scroll_bottom>:

lv_coord_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 800a554:	b5b0      	push	{r4, r5, r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t child_res = LV_COORD_MIN;
 800a55c:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a560:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f003 fd46 	bl	800dff4 <lv_obj_get_child_cnt>
 800a568:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a56a:	2300      	movs	r3, #0
 800a56c:	61bb      	str	r3, [r7, #24]
 800a56e:	e01c      	b.n	800a5aa <lv_obj_get_scroll_bottom+0x56>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a580:	4935      	ldr	r1, [pc, #212]	; (800a658 <lv_obj_get_scroll_bottom+0x104>)
 800a582:	68b8      	ldr	r0, [r7, #8]
 800a584:	f7fb fcd6 	bl	8005f34 <lv_obj_has_flag_any>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d109      	bne.n	800a5a2 <lv_obj_get_scroll_bottom+0x4e>
        child_res = LV_MAX(child_res, child->coords.y2);
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a594:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a598:	4293      	cmp	r3, r2
 800a59a:	bfb8      	it	lt
 800a59c:	4613      	movlt	r3, r2
 800a59e:	83fb      	strh	r3, [r7, #30]
 800a5a0:	e000      	b.n	800a5a4 <lv_obj_get_scroll_bottom+0x50>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a5a2:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	61bb      	str	r3, [r7, #24]
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d3de      	bcc.n	800a570 <lv_obj_get_scroll_bottom+0x1c>
    }

    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff fe78 	bl	800a2aa <lv_obj_get_style_pad_top>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 800a5be:	2100      	movs	r1, #0
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff fe84 	bl	800a2ce <lv_obj_get_style_pad_bottom>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff fed8 	bl	800a382 <lv_obj_get_style_border_width>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800a5d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a5da:	4a20      	ldr	r2, [pc, #128]	; (800a65c <lv_obj_get_scroll_bottom+0x108>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d00d      	beq.n	800a5fc <lv_obj_get_scroll_bottom+0xa8>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 800a5e0:	8a3a      	ldrh	r2, [r7, #16]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	89fb      	ldrh	r3, [r7, #14]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	8bfb      	ldrh	r3, [r7, #30]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_h = lv_obj_get_self_height(obj);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7fe fb7d 	bl	8008cfc <lv_obj_get_self_height>
 800a602:	4603      	mov	r3, r0
 800a604:	81bb      	strh	r3, [r7, #12]
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800a606:	89fb      	ldrh	r3, [r7, #14]
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	b29c      	uxth	r4, r3
 800a60c:	8a7d      	ldrh	r5, [r7, #18]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7fe fa9b 	bl	8008b4a <lv_obj_get_height>
 800a614:	4603      	mov	r3, r0
 800a616:	b29b      	uxth	r3, r3
 800a618:	1aeb      	subs	r3, r5, r3
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	8a3b      	ldrh	r3, [r7, #16]
 800a61e:	4413      	add	r3, r2
 800a620:	b29b      	uxth	r3, r3
 800a622:	4423      	add	r3, r4
 800a624:	b29a      	uxth	r2, r3
 800a626:	89bb      	ldrh	r3, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	81bb      	strh	r3, [r7, #12]
    self_h -= lv_obj_get_scroll_y(obj);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff ff60 	bl	800a4f4 <lv_obj_get_scroll_y>
 800a634:	4603      	mov	r3, r0
 800a636:	89ba      	ldrh	r2, [r7, #12]
 800a638:	b29b      	uxth	r3, r3
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_h);
 800a640:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a644:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a648:	4293      	cmp	r3, r2
 800a64a:	bfb8      	it	lt
 800a64c:	4613      	movlt	r3, r2
 800a64e:	b21b      	sxth	r3, r3
}
 800a650:	4618      	mov	r0, r3
 800a652:	3720      	adds	r7, #32
 800a654:	46bd      	mov	sp, r7
 800a656:	bdb0      	pop	{r4, r5, r7, pc}
 800a658:	00040001 	.word	0x00040001
 800a65c:	ffffe001 	.word	0xffffe001

0800a660 <lv_obj_get_scroll_left>:

lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 800a660:	b5b0      	push	{r4, r5, r7, lr}
 800a662:	b08a      	sub	sp, #40	; 0x28
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff fe9b 	bl	800a3a6 <lv_obj_get_style_base_dir>
 800a670:	4603      	mov	r3, r0
 800a672:	2b01      	cmp	r3, #1
 800a674:	d00e      	beq.n	800a694 <lv_obj_get_scroll_left+0x34>
        if(obj->spec_attr == NULL) return 0;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <lv_obj_get_scroll_left+0x22>
 800a67e:	2300      	movs	r3, #0
 800a680:	e08b      	b.n	800a79a <lv_obj_get_scroll_left+0x13a>
        return -obj->spec_attr->scroll.x;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	425b      	negs	r3, r3
 800a68e:	b29b      	uxth	r3, r3
 800a690:	b21b      	sxth	r3, r3
 800a692:	e082      	b.n	800a79a <lv_obj_get_scroll_left+0x13a>
    }

    /*With RTL base direction scrolling the left is normal so find the left most coordinate*/
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800a694:	2100      	movs	r1, #0
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff fe3d 	bl	800a316 <lv_obj_get_style_pad_right>
 800a69c:	4603      	mov	r3, r0
 800a69e:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff fe25 	bl	800a2f2 <lv_obj_get_style_pad_left>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	837b      	strh	r3, [r7, #26]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fe67 	bl	800a382 <lv_obj_get_style_border_width>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint32_t i;
    lv_coord_t x1 = LV_COORD_MAX;
 800a6bc:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800a6c0:	83fb      	strh	r3, [r7, #30]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f003 fc96 	bl	800dff4 <lv_obj_get_child_cnt>
 800a6c8:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	623b      	str	r3, [r7, #32]
 800a6ce:	e01c      	b.n	800a70a <lv_obj_get_scroll_left+0xaa>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a6e0:	4930      	ldr	r1, [pc, #192]	; (800a7a4 <lv_obj_get_scroll_left+0x144>)
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f7fb fc26 	bl	8005f34 <lv_obj_has_flag_any>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d109      	bne.n	800a702 <lv_obj_get_scroll_left+0xa2>
        x1 = LV_MIN(x1, child->coords.x1);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a6f4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	bfa8      	it	ge
 800a6fc:	4613      	movge	r3, r2
 800a6fe:	83fb      	strh	r3, [r7, #30]
 800a700:	e000      	b.n	800a704 <lv_obj_get_scroll_left+0xa4>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a702:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	3301      	adds	r3, #1
 800a708:	623b      	str	r3, [r7, #32]
 800a70a:	6a3a      	ldr	r2, [r7, #32]
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d3de      	bcc.n	800a6d0 <lv_obj_get_scroll_left+0x70>

    }

    if(x1 != LV_COORD_MAX) {
 800a712:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a716:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d010      	beq.n	800a740 <lv_obj_get_scroll_left+0xe0>
        child_res = x1;
 800a71e:	8bfb      	ldrh	r3, [r7, #30]
 800a720:	84fb      	strh	r3, [r7, #38]	; 0x26
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a728:	b29a      	uxth	r2, r3
 800a72a:	8b7b      	ldrh	r3, [r7, #26]
 800a72c:	4413      	add	r3, r2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	8b3b      	ldrh	r3, [r7, #24]
 800a732:	4413      	add	r3, r2
 800a734:	b29a      	uxth	r2, r3
 800a736:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a73e:	e002      	b.n	800a746 <lv_obj_get_scroll_left+0xe6>
    }
    else {
        child_res = LV_COORD_MIN;
 800a740:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a744:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7fe fac2 	bl	8008cd0 <lv_obj_get_self_width>
 800a74c:	4603      	mov	r3, r0
 800a74e:	827b      	strh	r3, [r7, #18]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a750:	8b3b      	ldrh	r3, [r7, #24]
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	b29c      	uxth	r4, r3
 800a756:	8bbd      	ldrh	r5, [r7, #28]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7fe f9e8 	bl	8008b2e <lv_obj_get_width>
 800a75e:	4603      	mov	r3, r0
 800a760:	b29b      	uxth	r3, r3
 800a762:	1aeb      	subs	r3, r5, r3
 800a764:	b29a      	uxth	r2, r3
 800a766:	8b7b      	ldrh	r3, [r7, #26]
 800a768:	4413      	add	r3, r2
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	4423      	add	r3, r4
 800a76e:	b29a      	uxth	r2, r3
 800a770:	8a7b      	ldrh	r3, [r7, #18]
 800a772:	4413      	add	r3, r2
 800a774:	b29b      	uxth	r3, r3
 800a776:	827b      	strh	r3, [r7, #18]
    self_w += lv_obj_get_scroll_x(obj);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff fea3 	bl	800a4c4 <lv_obj_get_scroll_x>
 800a77e:	4603      	mov	r3, r0
 800a780:	b29a      	uxth	r2, r3
 800a782:	8a7b      	ldrh	r3, [r7, #18]
 800a784:	4413      	add	r3, r2
 800a786:	b29b      	uxth	r3, r3
 800a788:	827b      	strh	r3, [r7, #18]

    return LV_MAX(child_res, self_w);
 800a78a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a78e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a792:	4293      	cmp	r3, r2
 800a794:	bfb8      	it	lt
 800a796:	4613      	movlt	r3, r2
 800a798:	b21b      	sxth	r3, r3
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3728      	adds	r7, #40	; 0x28
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	00040001 	.word	0x00040001

0800a7a8 <lv_obj_get_scroll_right>:

lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 800a7a8:	b5b0      	push	{r4, r5, r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7ff fdf7 	bl	800a3a6 <lv_obj_get_style_base_dir>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d10a      	bne.n	800a7d4 <lv_obj_get_scroll_right+0x2c>
        if(obj->spec_attr == NULL) return 0;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <lv_obj_get_scroll_right+0x22>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e07e      	b.n	800a8c8 <lv_obj_get_scroll_right+0x120>
        return obj->spec_attr->scroll.x;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a7d2:	e079      	b.n	800a8c8 <lv_obj_get_scroll_right+0x120>
    }

    /*With other base direction (LTR) scrolling to the right is normal so find the right most coordinate*/
    lv_coord_t child_res = LV_COORD_MIN;
 800a7d4:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a7d8:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f003 fc0a 	bl	800dff4 <lv_obj_get_child_cnt>
 800a7e0:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61bb      	str	r3, [r7, #24]
 800a7e6:	e01c      	b.n	800a822 <lv_obj_get_scroll_right+0x7a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a7f8:	4935      	ldr	r1, [pc, #212]	; (800a8d0 <lv_obj_get_scroll_right+0x128>)
 800a7fa:	68b8      	ldr	r0, [r7, #8]
 800a7fc:	f7fb fb9a 	bl	8005f34 <lv_obj_has_flag_any>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d109      	bne.n	800a81a <lv_obj_get_scroll_right+0x72>
        child_res = LV_MAX(child_res, child->coords.x2);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a80c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a810:	4293      	cmp	r3, r2
 800a812:	bfb8      	it	lt
 800a814:	4613      	movlt	r3, r2
 800a816:	83fb      	strh	r3, [r7, #30]
 800a818:	e000      	b.n	800a81c <lv_obj_get_scroll_right+0x74>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a81a:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	3301      	adds	r3, #1
 800a820:	61bb      	str	r3, [r7, #24]
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	429a      	cmp	r2, r3
 800a828:	d3de      	bcc.n	800a7e8 <lv_obj_get_scroll_right+0x40>
    }

    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800a82a:	2100      	movs	r1, #0
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff fd72 	bl	800a316 <lv_obj_get_style_pad_right>
 800a832:	4603      	mov	r3, r0
 800a834:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800a836:	2100      	movs	r1, #0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff fd5a 	bl	800a2f2 <lv_obj_get_style_pad_left>
 800a83e:	4603      	mov	r3, r0
 800a840:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800a842:	2100      	movs	r1, #0
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff fd9c 	bl	800a382 <lv_obj_get_style_border_width>
 800a84a:	4603      	mov	r3, r0
 800a84c:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800a84e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a852:	4a20      	ldr	r2, [pc, #128]	; (800a8d4 <lv_obj_get_scroll_right+0x12c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d00d      	beq.n	800a874 <lv_obj_get_scroll_right+0xcc>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 800a858:	8a7a      	ldrh	r2, [r7, #18]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a860:	b29b      	uxth	r3, r3
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	b29a      	uxth	r2, r3
 800a866:	89fb      	ldrh	r3, [r7, #14]
 800a868:	4413      	add	r3, r2
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	8bfb      	ldrh	r3, [r7, #30]
 800a86e:	4413      	add	r3, r2
 800a870:	b29b      	uxth	r3, r3
 800a872:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7fe fa2b 	bl	8008cd0 <lv_obj_get_self_width>
 800a87a:	4603      	mov	r3, r0
 800a87c:	81bb      	strh	r3, [r7, #12]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a87e:	89fb      	ldrh	r3, [r7, #14]
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	b29c      	uxth	r4, r3
 800a884:	8a7d      	ldrh	r5, [r7, #18]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7fe f951 	bl	8008b2e <lv_obj_get_width>
 800a88c:	4603      	mov	r3, r0
 800a88e:	b29b      	uxth	r3, r3
 800a890:	1aeb      	subs	r3, r5, r3
 800a892:	b29a      	uxth	r2, r3
 800a894:	8a3b      	ldrh	r3, [r7, #16]
 800a896:	4413      	add	r3, r2
 800a898:	b29b      	uxth	r3, r3
 800a89a:	4423      	add	r3, r4
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	89bb      	ldrh	r3, [r7, #12]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	81bb      	strh	r3, [r7, #12]
    self_w -= lv_obj_get_scroll_x(obj);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fe0c 	bl	800a4c4 <lv_obj_get_scroll_x>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	89ba      	ldrh	r2, [r7, #12]
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_w);
 800a8b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a8bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	bfb8      	it	lt
 800a8c4:	4613      	movlt	r3, r2
 800a8c6:	b21b      	sxth	r3, r3
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a8d0:	00040001 	.word	0x00040001
 800a8d4:	ffffe001 	.word	0xffffe001

0800a8d8 <lv_obj_scroll_by_bounded>:
/*=====================
 * Other functions
 *====================*/

void lv_obj_scroll_by_bounded(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800a8d8:	b590      	push	{r4, r7, lr}
 800a8da:	b089      	sub	sp, #36	; 0x24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	817b      	strh	r3, [r7, #10]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	813b      	strh	r3, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 800a8f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d104      	bne.n	800a904 <lv_obj_scroll_by_bounded+0x2c>
 800a8fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 80b5 	beq.w	800aa6e <lv_obj_scroll_by_bounded+0x196>

    /*We need to know the final sizes for bound check*/
    lv_obj_update_layout(obj);
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7fe f8d7 	bl	8008ab8 <lv_obj_update_layout>

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff fdda 	bl	800a4c4 <lv_obj_get_scroll_x>
 800a910:	4603      	mov	r3, r0
 800a912:	b29b      	uxth	r3, r3
 800a914:	425b      	negs	r3, r3
 800a916:	b29b      	uxth	r3, r3
 800a918:	82bb      	strh	r3, [r7, #20]
    lv_coord_t x_bounded = x_current + dx;
 800a91a:	8aba      	ldrh	r2, [r7, #20]
 800a91c:	897b      	ldrh	r3, [r7, #10]
 800a91e:	4413      	add	r3, r2
 800a920:	b29b      	uxth	r3, r3
 800a922:	83fb      	strh	r3, [r7, #30]

    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800a924:	2100      	movs	r1, #0
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f7ff fd3d 	bl	800a3a6 <lv_obj_get_style_base_dir>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d028      	beq.n	800a984 <lv_obj_scroll_by_bounded+0xac>
        if(x_bounded > 0) x_bounded = 0;
 800a932:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a936:	2b00      	cmp	r3, #0
 800a938:	dd01      	ble.n	800a93e <lv_obj_scroll_by_bounded+0x66>
 800a93a:	2300      	movs	r3, #0
 800a93c:	83fb      	strh	r3, [r7, #30]
        if(x_bounded < 0) {
 800a93e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a942:	2b00      	cmp	r3, #0
 800a944:	da43      	bge.n	800a9ce <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff fe8a 	bl	800a660 <lv_obj_get_scroll_left>
 800a94c:	4603      	mov	r3, r0
 800a94e:	b29c      	uxth	r4, r3
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7ff ff29 	bl	800a7a8 <lv_obj_get_scroll_right>
 800a956:	4603      	mov	r3, r0
 800a958:	b29b      	uxth	r3, r3
 800a95a:	4423      	add	r3, r4
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	83bb      	strh	r3, [r7, #28]
            if(scroll_max < 0) scroll_max = 0;
 800a960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a964:	2b00      	cmp	r3, #0
 800a966:	da01      	bge.n	800a96c <lv_obj_scroll_by_bounded+0x94>
 800a968:	2300      	movs	r3, #0
 800a96a:	83bb      	strh	r3, [r7, #28]

            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800a96c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a970:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a974:	425b      	negs	r3, r3
 800a976:	429a      	cmp	r2, r3
 800a978:	da29      	bge.n	800a9ce <lv_obj_scroll_by_bounded+0xf6>
 800a97a:	8bbb      	ldrh	r3, [r7, #28]
 800a97c:	425b      	negs	r3, r3
 800a97e:	b29b      	uxth	r3, r3
 800a980:	83fb      	strh	r3, [r7, #30]
 800a982:	e024      	b.n	800a9ce <lv_obj_scroll_by_bounded+0xf6>
        }
    }
    else {
        if(x_bounded < 0) x_bounded = 0;
 800a984:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	da01      	bge.n	800a990 <lv_obj_scroll_by_bounded+0xb8>
 800a98c:	2300      	movs	r3, #0
 800a98e:	83fb      	strh	r3, [r7, #30]
        if(x_bounded > 0) {
 800a990:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a994:	2b00      	cmp	r3, #0
 800a996:	dd1a      	ble.n	800a9ce <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fe61 	bl	800a660 <lv_obj_get_scroll_left>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	b29c      	uxth	r4, r3
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff ff00 	bl	800a7a8 <lv_obj_get_scroll_right>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	4423      	add	r3, r4
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	837b      	strh	r3, [r7, #26]
            if(scroll_max < 0) scroll_max = 0;
 800a9b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	da01      	bge.n	800a9be <lv_obj_scroll_by_bounded+0xe6>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	837b      	strh	r3, [r7, #26]

            if(x_bounded > scroll_max) x_bounded = scroll_max;
 800a9be:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a9c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	dd01      	ble.n	800a9ce <lv_obj_scroll_by_bounded+0xf6>
 800a9ca:	8b7b      	ldrh	r3, [r7, #26]
 800a9cc:	83fb      	strh	r3, [r7, #30]
        }
    }

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7ff fd90 	bl	800a4f4 <lv_obj_get_scroll_y>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	425b      	negs	r3, r3
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	827b      	strh	r3, [r7, #18]
    lv_coord_t y_bounded = y_current + dy;
 800a9de:	8a7a      	ldrh	r2, [r7, #18]
 800a9e0:	893b      	ldrh	r3, [r7, #8]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	833b      	strh	r3, [r7, #24]

    if(y_bounded > 0) y_bounded = 0;
 800a9e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	dd01      	ble.n	800a9f4 <lv_obj_scroll_by_bounded+0x11c>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	833b      	strh	r3, [r7, #24]
    if(y_bounded < 0) {
 800a9f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	da1d      	bge.n	800aa38 <lv_obj_scroll_by_bounded+0x160>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff fd91 	bl	800a524 <lv_obj_get_scroll_top>
 800aa02:	4603      	mov	r3, r0
 800aa04:	b29c      	uxth	r4, r3
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7ff fda4 	bl	800a554 <lv_obj_get_scroll_bottom>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	4423      	add	r3, r4
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	82fb      	strh	r3, [r7, #22]
        if(scroll_max < 0) scroll_max = 0;
 800aa16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	da01      	bge.n	800aa22 <lv_obj_scroll_by_bounded+0x14a>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	82fb      	strh	r3, [r7, #22]
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 800aa22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800aa26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800aa2a:	425b      	negs	r3, r3
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	da03      	bge.n	800aa38 <lv_obj_scroll_by_bounded+0x160>
 800aa30:	8afb      	ldrh	r3, [r7, #22]
 800aa32:	425b      	negs	r3, r3
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	833b      	strh	r3, [r7, #24]
    }

    dx = x_bounded - x_current;
 800aa38:	8bfa      	ldrh	r2, [r7, #30]
 800aa3a:	8abb      	ldrh	r3, [r7, #20]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	817b      	strh	r3, [r7, #10]
    dy = y_bounded - y_current;
 800aa42:	8b3a      	ldrh	r2, [r7, #24]
 800aa44:	8a7b      	ldrh	r3, [r7, #18]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	813b      	strh	r3, [r7, #8]
    if(dx || dy) {
 800aa4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <lv_obj_scroll_by_bounded+0x184>
 800aa54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d009      	beq.n	800aa70 <lv_obj_scroll_by_bounded+0x198>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 800aa5c:	79fb      	ldrb	r3, [r7, #7]
 800aa5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800aa62:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 f806 	bl	800aa78 <lv_obj_scroll_by>
 800aa6c:	e000      	b.n	800aa70 <lv_obj_scroll_by_bounded+0x198>
    if(dx == 0 && dy == 0) return;
 800aa6e:	bf00      	nop
    }
}
 800aa70:	3724      	adds	r7, #36	; 0x24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd90      	pop	{r4, r7, pc}
	...

0800aa78 <lv_obj_scroll_by>:


void lv_obj_scroll_by(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b09c      	sub	sp, #112	; 0x70
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	4608      	mov	r0, r1
 800aa82:	4611      	mov	r1, r2
 800aa84:	461a      	mov	r2, r3
 800aa86:	4603      	mov	r3, r0
 800aa88:	817b      	strh	r3, [r7, #10]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	813b      	strh	r3, [r7, #8]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 800aa92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d104      	bne.n	800aaa4 <lv_obj_scroll_by+0x2c>
 800aa9a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 80f7 	beq.w	800ac92 <lv_obj_scroll_by+0x21a>
    if(anim_en == LV_ANIM_ON) {
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	f040 80c4 	bne.w	800ac34 <lv_obj_scroll_by+0x1bc>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f003 fa23 	bl	800def8 <lv_obj_get_disp>
 800aab2:	6638      	str	r0, [r7, #96]	; 0x60
        lv_anim_t a;
        lv_anim_init(&a);
 800aab4:	f107 0314 	add.w	r3, r7, #20
 800aab8:	4618      	mov	r0, r3
 800aaba:	f015 fa49 	bl	801ff50 <lv_anim_init>
        lv_anim_set_var(&a, obj);
 800aabe:	f107 0314 	add.w	r3, r7, #20
 800aac2:	68f9      	ldr	r1, [r7, #12]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7ff fb83 	bl	800a1d0 <lv_anim_set_var>
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);
 800aaca:	f107 0314 	add.w	r3, r7, #20
 800aace:	4977      	ldr	r1, [pc, #476]	; (800acac <lv_obj_scroll_by+0x234>)
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff fbca 	bl	800a26a <lv_anim_set_ready_cb>

        if(dx) {
 800aad6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d052      	beq.n	800ab84 <lv_obj_scroll_by+0x10c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 800aade:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800aae0:	f015 f92c 	bl	801fd3c <lv_disp_get_hor_res>
 800aae4:	4603      	mov	r3, r0
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	109b      	asrs	r3, r3, #2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	f015 fb32 	bl	802015c <lv_anim_speed_to_time>
 800aaf8:	66f8      	str	r0, [r7, #108]	; 0x6c
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800aafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafc:	2bc7      	cmp	r3, #199	; 0xc7
 800aafe:	d801      	bhi.n	800ab04 <lv_obj_scroll_by+0x8c>
 800ab00:	23c8      	movs	r3, #200	; 0xc8
 800ab02:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 800ab04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab06:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ab0a:	d902      	bls.n	800ab12 <lv_obj_scroll_by+0x9a>
 800ab0c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ab10:	66fb      	str	r3, [r7, #108]	; 0x6c
            lv_anim_set_time(&a, t);
 800ab12:	f107 0314 	add.w	r3, r7, #20
 800ab16:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff fb75 	bl	800a208 <lv_anim_set_time>
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff fcd0 	bl	800a4c4 <lv_obj_get_scroll_x>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_anim_set_values(&a, -sx, -sx + dx);
 800ab2a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800ab2e:	4259      	negs	r1, r3
 800ab30:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ab34:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800ab38:	1ad2      	subs	r2, r2, r3
 800ab3a:	f107 0314 	add.w	r3, r7, #20
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff fb70 	bl	800a224 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, scroll_x_anim);
 800ab44:	f107 0314 	add.w	r3, r7, #20
 800ab48:	4959      	ldr	r1, [pc, #356]	; (800acb0 <lv_obj_scroll_by+0x238>)
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff fb4e 	bl	800a1ec <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 800ab50:	f107 0314 	add.w	r3, r7, #20
 800ab54:	4957      	ldr	r1, [pc, #348]	; (800acb4 <lv_obj_scroll_by+0x23c>)
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff fb79 	bl	800a24e <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800ab5c:	f107 0314 	add.w	r3, r7, #20
 800ab60:	461a      	mov	r2, r3
 800ab62:	2109      	movs	r1, #9
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f7f9 fff7 	bl	8004b58 <lv_event_send>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            if(res != LV_RES_OK) return;
 800ab70:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	f040 808e 	bne.w	800ac96 <lv_obj_scroll_by+0x21e>
            lv_anim_start(&a);
 800ab7a:	f107 0314 	add.w	r3, r7, #20
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f015 fa0c 	bl	801ff9c <lv_anim_start>
        }

        if(dy) {
 800ab84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 808b 	beq.w	800aca4 <lv_obj_scroll_by+0x22c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 800ab8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ab90:	f015 f8fa 	bl	801fd88 <lv_disp_get_ver_res>
 800ab94:	4603      	mov	r3, r0
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	109b      	asrs	r3, r3, #2
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aba0:	461a      	mov	r2, r3
 800aba2:	2100      	movs	r1, #0
 800aba4:	f015 fada 	bl	802015c <lv_anim_speed_to_time>
 800aba8:	66b8      	str	r0, [r7, #104]	; 0x68
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800abaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abac:	2bc7      	cmp	r3, #199	; 0xc7
 800abae:	d801      	bhi.n	800abb4 <lv_obj_scroll_by+0x13c>
 800abb0:	23c8      	movs	r3, #200	; 0xc8
 800abb2:	66bb      	str	r3, [r7, #104]	; 0x68
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 800abb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abb6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800abba:	d902      	bls.n	800abc2 <lv_obj_scroll_by+0x14a>
 800abbc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800abc0:	66bb      	str	r3, [r7, #104]	; 0x68
            lv_anim_set_time(&a, t);
 800abc2:	f107 0314 	add.w	r3, r7, #20
 800abc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800abc8:	4618      	mov	r0, r3
 800abca:	f7ff fb1d 	bl	800a208 <lv_anim_set_time>
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f7ff fc90 	bl	800a4f4 <lv_obj_get_scroll_y>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_anim_set_values(&a, -sy, -sy + dy);
 800abda:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800abde:	4259      	negs	r1, r3
 800abe0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800abe4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800abe8:	1ad2      	subs	r2, r2, r3
 800abea:	f107 0314 	add.w	r3, r7, #20
 800abee:	4618      	mov	r0, r3
 800abf0:	f7ff fb18 	bl	800a224 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a,  scroll_y_anim);
 800abf4:	f107 0314 	add.w	r3, r7, #20
 800abf8:	492f      	ldr	r1, [pc, #188]	; (800acb8 <lv_obj_scroll_by+0x240>)
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff faf6 	bl	800a1ec <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 800ac00:	f107 0314 	add.w	r3, r7, #20
 800ac04:	492b      	ldr	r1, [pc, #172]	; (800acb4 <lv_obj_scroll_by+0x23c>)
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff fb21 	bl	800a24e <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800ac0c:	f107 0314 	add.w	r3, r7, #20
 800ac10:	461a      	mov	r2, r3
 800ac12:	2109      	movs	r1, #9
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f7f9 ff9f 	bl	8004b58 <lv_event_send>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(res != LV_RES_OK) return;
 800ac20:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d138      	bne.n	800ac9a <lv_obj_scroll_by+0x222>
            lv_anim_start(&a);
 800ac28:	f107 0314 	add.w	r3, r7, #20
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f015 f9b5 	bl	801ff9c <lv_anim_start>
 800ac32:	e037      	b.n	800aca4 <lv_obj_scroll_by+0x22c>
        }
    }
    else {
        /*Remove pending animations*/
        lv_anim_del(obj, scroll_y_anim);
 800ac34:	4920      	ldr	r1, [pc, #128]	; (800acb8 <lv_obj_scroll_by+0x240>)
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f015 fa28 	bl	802008c <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 800ac3c:	491c      	ldr	r1, [pc, #112]	; (800acb0 <lv_obj_scroll_by+0x238>)
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f015 fa24 	bl	802008c <lv_anim_del>

        lv_res_t res;
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 800ac44:	2200      	movs	r2, #0
 800ac46:	2109      	movs	r1, #9
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f7f9 ff85 	bl	8004b58 <lv_event_send>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800ac54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d120      	bne.n	800ac9e <lv_obj_scroll_by+0x226>

        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 800ac5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ac60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ac64:	4619      	mov	r1, r3
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 f8bb 	bl	800ade2 <_lv_obj_scroll_by_raw>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800ac72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d113      	bne.n	800aca2 <lv_obj_scroll_by+0x22a>

        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	210a      	movs	r1, #10
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7f9 ff6a 	bl	8004b58 <lv_event_send>
 800ac84:	4603      	mov	r3, r0
 800ac86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800ac8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	e008      	b.n	800aca4 <lv_obj_scroll_by+0x22c>
    if(dx == 0 && dy == 0) return;
 800ac92:	bf00      	nop
 800ac94:	e006      	b.n	800aca4 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800ac96:	bf00      	nop
 800ac98:	e004      	b.n	800aca4 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800ac9a:	bf00      	nop
 800ac9c:	e002      	b.n	800aca4 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800ac9e:	bf00      	nop
 800aca0:	e000      	b.n	800aca4 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800aca2:	bf00      	nop
    }
}
 800aca4:	3770      	adds	r7, #112	; 0x70
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	0800bbcb 	.word	0x0800bbcb
 800acb0:	0800bb6b 	.word	0x0800bb6b
 800acb4:	080201ef 	.word	0x080201ef
 800acb8:	0800bb9b 	.word	0x0800bb9b

0800acbc <lv_obj_scroll_to>:

void lv_obj_scroll_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	4608      	mov	r0, r1
 800acc6:	4611      	mov	r1, r2
 800acc8:	461a      	mov	r2, r3
 800acca:	4603      	mov	r3, r0
 800accc:	817b      	strh	r3, [r7, #10]
 800acce:	460b      	mov	r3, r1
 800acd0:	813b      	strh	r3, [r7, #8]
 800acd2:	4613      	mov	r3, r2
 800acd4:	71fb      	strb	r3, [r7, #7]
    lv_obj_scroll_to_x(obj, x, anim_en);
 800acd6:	79fa      	ldrb	r2, [r7, #7]
 800acd8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800acdc:	4619      	mov	r1, r3
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f000 f80c 	bl	800acfc <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 800ace4:	79fa      	ldrb	r2, [r7, #7]
 800ace6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800acea:	4619      	mov	r1, r3
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 f829 	bl	800ad44 <lv_obj_scroll_to_y>
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <lv_obj_scroll_to_x>:

void lv_obj_scroll_to_x(lv_obj_t * obj, lv_coord_t x, lv_anim_enable_t anim_en)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	460b      	mov	r3, r1
 800ad06:	807b      	strh	r3, [r7, #2]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_x_anim);
 800ad0c:	490c      	ldr	r1, [pc, #48]	; (800ad40 <lv_obj_scroll_to_x+0x44>)
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f015 f9bc 	bl	802008c <lv_anim_del>

    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff fbd5 	bl	800a4c4 <lv_obj_get_scroll_x>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -x + scroll_x;
 800ad1e:	89fa      	ldrh	r2, [r7, #14]
 800ad20:	887b      	ldrh	r3, [r7, #2]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 800ad28:	787b      	ldrb	r3, [r7, #1]
 800ad2a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff fdd1 	bl	800a8d8 <lv_obj_scroll_by_bounded>
}
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	0800bb6b 	.word	0x0800bb6b

0800ad44 <lv_obj_scroll_to_y>:

void lv_obj_scroll_to_y(lv_obj_t * obj, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	807b      	strh	r3, [r7, #2]
 800ad50:	4613      	mov	r3, r2
 800ad52:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_y_anim);
 800ad54:	490c      	ldr	r1, [pc, #48]	; (800ad88 <lv_obj_scroll_to_y+0x44>)
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f015 f998 	bl	802008c <lv_anim_del>

    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fbc9 	bl	800a4f4 <lv_obj_get_scroll_y>
 800ad62:	4603      	mov	r3, r0
 800ad64:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -y + scroll_y;
 800ad66:	89fa      	ldrh	r2, [r7, #14]
 800ad68:	887b      	ldrh	r3, [r7, #2]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 800ad70:	787b      	ldrb	r3, [r7, #1]
 800ad72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ad76:	2100      	movs	r1, #0
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff fdad 	bl	800a8d8 <lv_obj_scroll_by_bounded>
}
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	0800bb9b 	.word	0x0800bb9b

0800ad8c <lv_obj_scroll_to_view_recursive>:
    lv_point_t p = {0, 0};
    scroll_area_into_view(&obj->coords, obj, &p, anim_en);
}

void lv_obj_scroll_to_view_recursive(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
    /*Be sure the screens layout is correct*/
    lv_obj_update_layout(obj);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7fd fe8d 	bl	8008ab8 <lv_obj_update_layout>

    lv_point_t p = {0, 0};
 800ad9e:	2300      	movs	r3, #0
 800ada0:	81bb      	strh	r3, [r7, #12]
 800ada2:	2300      	movs	r3, #0
 800ada4:	81fb      	strh	r3, [r7, #14]
    lv_obj_t * child = obj;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	617b      	str	r3, [r7, #20]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800adaa:	6978      	ldr	r0, [r7, #20]
 800adac:	f003 f8de 	bl	800df6c <lv_obj_get_parent>
 800adb0:	6138      	str	r0, [r7, #16]
    while(parent) {
 800adb2:	e00e      	b.n	800add2 <lv_obj_scroll_to_view_recursive+0x46>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f103 0014 	add.w	r0, r3, #20
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	f107 020c 	add.w	r2, r7, #12
 800adc0:	6979      	ldr	r1, [r7, #20]
 800adc2:	f000 ff11 	bl	800bbe8 <scroll_area_into_view>
        child = parent;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	617b      	str	r3, [r7, #20]
        parent = lv_obj_get_parent(parent);
 800adca:	6938      	ldr	r0, [r7, #16]
 800adcc:	f003 f8ce 	bl	800df6c <lv_obj_get_parent>
 800add0:	6138      	str	r0, [r7, #16]
    while(parent) {
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1ed      	bne.n	800adb4 <lv_obj_scroll_to_view_recursive+0x28>
    }
}
 800add8:	bf00      	nop
 800adda:	bf00      	nop
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <_lv_obj_scroll_by_raw>:

lv_res_t _lv_obj_scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	807b      	strh	r3, [r7, #2]
 800adee:	4613      	mov	r3, r2
 800adf0:	803b      	strh	r3, [r7, #0]
    if(x == 0 && y == 0) return LV_RES_OK;
 800adf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d105      	bne.n	800ae06 <_lv_obj_scroll_by_raw+0x24>
 800adfa:	f9b7 3000 	ldrsh.w	r3, [r7]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <_lv_obj_scroll_by_raw+0x24>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e032      	b.n	800ae6c <_lv_obj_scroll_by_raw+0x8a>

    lv_obj_allocate_spec_attr(obj);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7fb f8c8 	bl	8005f9c <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	887b      	ldrh	r3, [r7, #2]
 800ae18:	4413      	add	r3, r2
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	b212      	sxth	r2, r2
 800ae22:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	883b      	ldrh	r3, [r7, #0]
 800ae30:	4413      	add	r3, r2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	b212      	sxth	r2, r2
 800ae3a:	825a      	strh	r2, [r3, #18]

    lv_obj_move_children_by(obj, x, y, true);
 800ae3c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ae40:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800ae44:	2301      	movs	r3, #1
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7fe faa8 	bl	800939c <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	210b      	movs	r1, #11
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7f9 fe81 	bl	8004b58 <lv_event_send>
 800ae56:	4603      	mov	r3, r0
 800ae58:	73fb      	strb	r3, [r7, #15]
    if(res != LV_RES_OK) return res;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d001      	beq.n	800ae64 <_lv_obj_scroll_by_raw+0x82>
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	e003      	b.n	800ae6c <_lv_obj_scroll_by_raw+0x8a>
    lv_obj_invalidate(obj);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fe fc2c 	bl	80096c2 <lv_obj_invalidate>
    return LV_RES_OK;
 800ae6a:	2301      	movs	r3, #1
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <lv_obj_get_scrollbar_area>:
    lv_indev_scroll_get_snap_dist(obj, &p);
    lv_obj_scroll_by(obj, p.x, p.y, anim_en);
}

void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
{
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b095      	sub	sp, #84	; 0x54
 800ae78:	af02      	add	r7, sp, #8
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
    lv_area_set(hor_area, 0, 0, -1, -1);
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	68b8      	ldr	r0, [r7, #8]
 800ae90:	f015 fb84 	bl	802059c <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2100      	movs	r1, #0
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f015 fb7a 	bl	802059c <lv_area_set>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800aea8:	2110      	movs	r1, #16
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7fb f82d 	bl	8005f0a <lv_obj_has_flag>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	f083 0301 	eor.w	r3, r3, #1
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f040 8591 	bne.w	800b9e0 <lv_obj_get_scrollbar_area+0xb6c>

    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff faa8 	bl	800a414 <lv_obj_get_scrollbar_mode>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800aeca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 8588 	beq.w	800b9e4 <lv_obj_get_scrollbar_area+0xb70>

    /*If there is no indev scrolling this object but `mode==active` return*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800aed4:	2000      	movs	r0, #0
 800aed6:	f014 ffb7 	bl	801fe48 <lv_indev_get_next>
 800aeda:	6478      	str	r0, [r7, #68]	; 0x44
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800aedc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d114      	bne.n	800af0e <lv_obj_get_scrollbar_area+0x9a>
        while(indev) {
 800aee4:	e00a      	b.n	800aefc <lv_obj_get_scrollbar_area+0x88>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800aee6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800aee8:	f7fa fc7d 	bl	80057e6 <lv_indev_get_scroll_obj>
 800aeec:	4602      	mov	r2, r0
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d007      	beq.n	800af04 <lv_obj_get_scrollbar_area+0x90>
            indev = lv_indev_get_next(indev);
 800aef4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800aef6:	f014 ffa7 	bl	801fe48 <lv_indev_get_next>
 800aefa:	6478      	str	r0, [r7, #68]	; 0x44
        while(indev) {
 800aefc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1f1      	bne.n	800aee6 <lv_obj_get_scrollbar_area+0x72>
 800af02:	e000      	b.n	800af06 <lv_obj_get_scrollbar_area+0x92>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800af04:	bf00      	nop
        }
        if(indev == NULL)  return;
 800af06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 856d 	beq.w	800b9e8 <lv_obj_get_scrollbar_area+0xb74>
    }

    lv_coord_t st = lv_obj_get_scroll_top(obj);
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f7ff fb08 	bl	800a524 <lv_obj_get_scroll_top>
 800af14:	4603      	mov	r3, r0
 800af16:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7ff fb1b 	bl	800a554 <lv_obj_get_scroll_bottom>
 800af1e:	4603      	mov	r3, r0
 800af20:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f7ff fb9c 	bl	800a660 <lv_obj_get_scroll_left>
 800af28:	4603      	mov	r3, r0
 800af2a:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fc3b 	bl	800a7a8 <lv_obj_get_scroll_right>
 800af32:	4603      	mov	r3, r0
 800af34:	873b      	strh	r3, [r7, #56]	; 0x38

    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f7ff fa82 	bl	800a440 <lv_obj_get_scroll_dir>
 800af3c:	4603      	mov	r3, r0
 800af3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool ver_draw = false;
 800af42:	2300      	movs	r3, #0
 800af44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    if((dir & LV_DIR_VER) &&
 800af48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af4c:	f003 030c 	and.w	r3, r3, #12
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01c      	beq.n	800af8e <lv_obj_get_scrollbar_area+0x11a>
 800af54:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d015      	beq.n	800af88 <lv_obj_get_scrollbar_area+0x114>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800af5c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800af60:	2b03      	cmp	r3, #3
 800af62:	d107      	bne.n	800af74 <lv_obj_get_scrollbar_area+0x100>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800af64:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dc0d      	bgt.n	800af88 <lv_obj_get_scrollbar_area+0x114>
 800af6c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800af70:	2b00      	cmp	r3, #0
 800af72:	dc09      	bgt.n	800af88 <lv_obj_get_scrollbar_area+0x114>
 800af74:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d108      	bne.n	800af8e <lv_obj_get_scrollbar_area+0x11a>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800af7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af7e:	f7fa fc11 	bl	80057a4 <lv_indev_get_scroll_dir>
 800af82:	4603      	mov	r3, r0
 800af84:	2b0c      	cmp	r3, #12
 800af86:	d102      	bne.n	800af8e <lv_obj_get_scrollbar_area+0x11a>
        ver_draw = true;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }


    bool hor_draw = false;
 800af8e:	2300      	movs	r3, #0
 800af90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    if((dir & LV_DIR_HOR) &&
 800af94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af98:	f003 0303 	and.w	r3, r3, #3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d01c      	beq.n	800afda <lv_obj_get_scrollbar_area+0x166>
 800afa0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d015      	beq.n	800afd4 <lv_obj_get_scrollbar_area+0x160>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800afa8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800afac:	2b03      	cmp	r3, #3
 800afae:	d107      	bne.n	800afc0 <lv_obj_get_scrollbar_area+0x14c>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800afb0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dc0d      	bgt.n	800afd4 <lv_obj_get_scrollbar_area+0x160>
 800afb8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dc09      	bgt.n	800afd4 <lv_obj_get_scrollbar_area+0x160>
 800afc0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d108      	bne.n	800afda <lv_obj_get_scrollbar_area+0x166>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800afc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800afca:	f7fa fbeb 	bl	80057a4 <lv_indev_get_scroll_dir>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d102      	bne.n	800afda <lv_obj_get_scrollbar_area+0x166>
        hor_draw = true;
 800afd4:	2301      	movs	r3, #1
 800afd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }

    if(!hor_draw && !ver_draw) return;
 800afda:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800afde:	f083 0301 	eor.w	r3, r3, #1
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d007      	beq.n	800aff8 <lv_obj_get_scrollbar_area+0x184>
 800afe8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800afec:	f083 0301 	eor.w	r3, r3, #1
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f040 84fa 	bne.w	800b9ec <lv_obj_get_scrollbar_area+0xb78>

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 800aff8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff f9d2 	bl	800a3a6 <lv_obj_get_style_base_dir>
 800b002:	4603      	mov	r3, r0
 800b004:	2b01      	cmp	r3, #1
 800b006:	bf0c      	ite	eq
 800b008:	2301      	moveq	r3, #1
 800b00a:	2300      	movne	r3, #0
 800b00c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    lv_coord_t top_space = lv_obj_get_style_pad_top(obj, LV_PART_SCROLLBAR);
 800b010:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f7ff f948 	bl	800a2aa <lv_obj_get_style_pad_top>
 800b01a:	4603      	mov	r3, r0
 800b01c:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_coord_t bottom_space = lv_obj_get_style_pad_bottom(obj, LV_PART_SCROLLBAR);
 800b01e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7ff f953 	bl	800a2ce <lv_obj_get_style_pad_bottom>
 800b028:	4603      	mov	r3, r0
 800b02a:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t left_space = lv_obj_get_style_pad_left(obj, LV_PART_SCROLLBAR);
 800b02c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff f95e 	bl	800a2f2 <lv_obj_get_style_pad_left>
 800b036:	4603      	mov	r3, r0
 800b038:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t right_space = lv_obj_get_style_pad_right(obj, LV_PART_SCROLLBAR);
 800b03a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff f969 	bl	800a316 <lv_obj_get_style_pad_right>
 800b044:	4603      	mov	r3, r0
 800b046:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t tickness = lv_obj_get_style_width(obj, LV_PART_SCROLLBAR);
 800b048:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f7ff f91a 	bl	800a286 <lv_obj_get_style_width>
 800b052:	4603      	mov	r3, r0
 800b054:	85bb      	strh	r3, [r7, #44]	; 0x2c

    lv_coord_t obj_h = lv_obj_get_height(obj);
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f7fd fd77 	bl	8008b4a <lv_obj_get_height>
 800b05c:	4603      	mov	r3, r0
 800b05e:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t obj_w = lv_obj_get_width(obj);
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7fd fd64 	bl	8008b2e <lv_obj_get_width>
 800b066:	4603      	mov	r3, r0
 800b068:	853b      	strh	r3, [r7, #40]	; 0x28

    /*Space required for the vertical and horizontal scrollbars*/
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800b06a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <lv_obj_get_scrollbar_area+0x204>
 800b072:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b076:	e000      	b.n	800b07a <lv_obj_get_scrollbar_area+0x206>
 800b078:	2300      	movs	r3, #0
 800b07a:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 800b07c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <lv_obj_get_scrollbar_area+0x216>
 800b084:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b088:	e000      	b.n	800b08c <lv_obj_get_scrollbar_area+0x218>
 800b08a:	2300      	movs	r3, #0
 800b08c:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t rem;

    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800b08e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f7ff f951 	bl	800a33a <lv_obj_get_style_bg_opa>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d808      	bhi.n	800b0b0 <lv_obj_get_scrollbar_area+0x23c>
       lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN) {
 800b09e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f7ff f95b 	bl	800a35e <lv_obj_get_style_border_opa>
 800b0a8:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	f240 84a0 	bls.w	800b9f0 <lv_obj_get_scrollbar_area+0xb7c>
        return;
    }

    /*Draw vertical scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_h = obj_h + st + sb;
 800b0b0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b0b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b0b4:	4413      	add	r3, r2
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b0ba:	4413      	add	r3, r2
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	847b      	strh	r3, [r7, #34]	; 0x22
    if(ver_draw && content_h) {
 800b0c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f000 81c3 	beq.w	800b450 <lv_obj_get_scrollbar_area+0x5dc>
 800b0ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 81be 	beq.w	800b450 <lv_obj_get_scrollbar_area+0x5dc>
        ver_area->y1 = obj->coords.y1;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	805a      	strh	r2, [r3, #2]
        ver_area->y2 = obj->coords.y2;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	80da      	strh	r2, [r3, #6]
        if(rtl) {
 800b0e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d016      	beq.n	800b11e <lv_obj_get_scrollbar_area+0x2aa>
            ver_area->x1 = obj->coords.x1 + left_space;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b0fa:	4413      	add	r3, r2
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	b21a      	sxth	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	801a      	strh	r2, [r3, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b10e:	4413      	add	r3, r2
 800b110:	b29b      	uxth	r3, r3
 800b112:	3b01      	subs	r3, #1
 800b114:	b29b      	uxth	r3, r3
 800b116:	b21a      	sxth	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	809a      	strh	r2, [r3, #4]
 800b11c:	e015      	b.n	800b14a <lv_obj_get_scrollbar_area+0x2d6>
        }
        else {
            ver_area->x2 = obj->coords.x2 - right_space;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b124:	b29a      	uxth	r2, r3
 800b126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	b21a      	sxth	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	809a      	strh	r2, [r3, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b138:	b29a      	uxth	r2, r3
 800b13a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	b29b      	uxth	r3, r3
 800b140:	3301      	adds	r3, #1
 800b142:	b29b      	uxth	r3, r3
 800b144:	b21a      	sxth	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	801a      	strh	r2, [r3, #0]
        }

        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800b14a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b14e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b152:	1ad2      	subs	r2, r2, r3
 800b154:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b158:	1ad2      	subs	r2, r2, r3
 800b15a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b164:	fb03 f202 	mul.w	r2, r3, r2
 800b168:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b16c:	fb92 f3f3 	sdiv	r3, r2, r3
 800b170:	843b      	strh	r3, [r7, #32]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800b172:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800b176:	2000      	movs	r0, #0
 800b178:	f014 fe2c 	bl	801fdd4 <lv_disp_get_dpi>
 800b17c:	4603      	mov	r3, r0
 800b17e:	461a      	mov	r2, r3
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	2bef      	cmp	r3, #239	; 0xef
 800b18a:	dd10      	ble.n	800b1ae <lv_obj_get_scrollbar_area+0x33a>
 800b18c:	2000      	movs	r0, #0
 800b18e:	f014 fe21 	bl	801fdd4 <lv_disp_get_dpi>
 800b192:	4603      	mov	r3, r0
 800b194:	461a      	mov	r2, r3
 800b196:	4613      	mov	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	3350      	adds	r3, #80	; 0x50
 800b1a0:	4aa7      	ldr	r2, [pc, #668]	; (800b440 <lv_obj_get_scrollbar_area+0x5cc>)
 800b1a2:	fb82 1203 	smull	r1, r2, r2, r3
 800b1a6:	1192      	asrs	r2, r2, #6
 800b1a8:	17db      	asrs	r3, r3, #31
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	e000      	b.n	800b1b0 <lv_obj_get_scrollbar_area+0x33c>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	db1e      	blt.n	800b1f2 <lv_obj_get_scrollbar_area+0x37e>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f014 fe0d 	bl	801fdd4 <lv_disp_get_dpi>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4613      	mov	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	2bef      	cmp	r3, #239	; 0xef
 800b1c8:	dd11      	ble.n	800b1ee <lv_obj_get_scrollbar_area+0x37a>
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	f014 fe02 	bl	801fdd4 <lv_disp_get_dpi>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	3350      	adds	r3, #80	; 0x50
 800b1de:	4a98      	ldr	r2, [pc, #608]	; (800b440 <lv_obj_get_scrollbar_area+0x5cc>)
 800b1e0:	fb82 1203 	smull	r1, r2, r2, r3
 800b1e4:	1192      	asrs	r2, r2, #6
 800b1e6:	17db      	asrs	r3, r3, #31
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	b21b      	sxth	r3, r3
 800b1ec:	e003      	b.n	800b1f6 <lv_obj_get_scrollbar_area+0x382>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e001      	b.n	800b1f6 <lv_obj_get_scrollbar_area+0x382>
 800b1f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b1f6:	843b      	strh	r3, [r7, #32]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800b1f8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b1fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	b29a      	uxth	r2, r3
 800b206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	8c3b      	ldrh	r3, [r7, #32]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	b29b      	uxth	r3, r3
 800b212:	83fb      	strh	r3, [r7, #30]
              sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 800b214:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b216:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	83bb      	strh	r3, [r7, #28]
        if(scroll_h <= 0) {
 800b21e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b222:	2b00      	cmp	r3, #0
 800b224:	dc19      	bgt.n	800b25a <lv_obj_get_scrollbar_area+0x3e6>
            ver_area->y1 = obj->coords.y1 + top_space;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b230:	4413      	add	r3, r2
 800b232:	b29b      	uxth	r3, r3
 800b234:	b21a      	sxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b240:	b29a      	uxth	r2, r3
 800b242:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	b29a      	uxth	r2, r3
 800b248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	3b01      	subs	r3, #1
 800b250:	b29b      	uxth	r3, r3
 800b252:	b21a      	sxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	80da      	strh	r2, [r3, #6]
 800b258:	e0fa      	b.n	800b450 <lv_obj_get_scrollbar_area+0x5dc>
        }
        else {
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800b25a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b25e:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800b262:	fb03 f202 	mul.w	r2, r3, r2
 800b266:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b26a:	fb92 f3f3 	sdiv	r3, r2, r3
 800b26e:	837b      	strh	r3, [r7, #26]
            sb_y = rem - sb_y;
 800b270:	8bfa      	ldrh	r2, [r7, #30]
 800b272:	8b7b      	ldrh	r3, [r7, #26]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	b29b      	uxth	r3, r3
 800b278:	837b      	strh	r3, [r7, #26]

            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b280:	b29a      	uxth	r2, r3
 800b282:	8b7b      	ldrh	r3, [r7, #26]
 800b284:	4413      	add	r3, r2
 800b286:	b29a      	uxth	r2, r3
 800b288:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b28a:	4413      	add	r3, r2
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	b21a      	sxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	8c3b      	ldrh	r3, [r7, #32]
 800b29e:	4413      	add	r3, r2
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	b21a      	sxth	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	80da      	strh	r2, [r3, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b2c0:	440b      	add	r3, r1
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	da57      	bge.n	800b376 <lv_obj_get_scrollbar_area+0x502>
                ver_area->y1 = obj->coords.y1 + top_space;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b2d0:	4413      	add	r3, r2
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	b21a      	sxth	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	805a      	strh	r2, [r3, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2e0:	461c      	mov	r4, r3
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	f014 fd76 	bl	801fdd4 <lv_disp_get_dpi>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	2bef      	cmp	r3, #239	; 0xef
 800b2f6:	dd10      	ble.n	800b31a <lv_obj_get_scrollbar_area+0x4a6>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	f014 fd6b 	bl	801fdd4 <lv_disp_get_dpi>
 800b2fe:	4603      	mov	r3, r0
 800b300:	461a      	mov	r2, r3
 800b302:	4613      	mov	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	005b      	lsls	r3, r3, #1
 800b30a:	3350      	adds	r3, #80	; 0x50
 800b30c:	4a4c      	ldr	r2, [pc, #304]	; (800b440 <lv_obj_get_scrollbar_area+0x5cc>)
 800b30e:	fb82 1203 	smull	r1, r2, r2, r3
 800b312:	1192      	asrs	r2, r2, #6
 800b314:	17db      	asrs	r3, r3, #31
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	e000      	b.n	800b31c <lv_obj_get_scrollbar_area+0x4a8>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4423      	add	r3, r4
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b324:	4293      	cmp	r3, r2
 800b326:	dd26      	ble.n	800b376 <lv_obj_get_scrollbar_area+0x502>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b32e:	b29c      	uxth	r4, r3
 800b330:	2000      	movs	r0, #0
 800b332:	f014 fd4f 	bl	801fdd4 <lv_disp_get_dpi>
 800b336:	4603      	mov	r3, r0
 800b338:	461a      	mov	r2, r3
 800b33a:	4613      	mov	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	2bef      	cmp	r3, #239	; 0xef
 800b344:	dd11      	ble.n	800b36a <lv_obj_get_scrollbar_area+0x4f6>
 800b346:	2000      	movs	r0, #0
 800b348:	f014 fd44 	bl	801fdd4 <lv_disp_get_dpi>
 800b34c:	4603      	mov	r3, r0
 800b34e:	461a      	mov	r2, r3
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	3350      	adds	r3, #80	; 0x50
 800b35a:	4a39      	ldr	r2, [pc, #228]	; (800b440 <lv_obj_get_scrollbar_area+0x5cc>)
 800b35c:	fb82 1203 	smull	r1, r2, r2, r3
 800b360:	1192      	asrs	r2, r2, #6
 800b362:	17db      	asrs	r3, r3, #31
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	b29b      	uxth	r3, r3
 800b368:	e000      	b.n	800b36c <lv_obj_get_scrollbar_area+0x4f8>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4423      	add	r3, r4
 800b36e:	b29b      	uxth	r3, r3
 800b370:	b21a      	sxth	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	80da      	strh	r2, [r3, #6]
                }
            }
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b37c:	4619      	mov	r1, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b384:	461a      	mov	r2, r3
 800b386:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b38a:	1ad2      	subs	r2, r2, r3
 800b38c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	4299      	cmp	r1, r3
 800b394:	dd5c      	ble.n	800b450 <lv_obj_get_scrollbar_area+0x5dc>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	b21a      	sxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	80da      	strh	r2, [r3, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b3b6:	461c      	mov	r4, r3
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	f014 fd0b 	bl	801fdd4 <lv_disp_get_dpi>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	2bef      	cmp	r3, #239	; 0xef
 800b3cc:	dd10      	ble.n	800b3f0 <lv_obj_get_scrollbar_area+0x57c>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	f014 fd00 	bl	801fdd4 <lv_disp_get_dpi>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	3350      	adds	r3, #80	; 0x50
 800b3e2:	4a17      	ldr	r2, [pc, #92]	; (800b440 <lv_obj_get_scrollbar_area+0x5cc>)
 800b3e4:	fb82 1203 	smull	r1, r2, r2, r3
 800b3e8:	1192      	asrs	r2, r2, #6
 800b3ea:	17db      	asrs	r3, r3, #31
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	e000      	b.n	800b3f2 <lv_obj_get_scrollbar_area+0x57e>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	1ae3      	subs	r3, r4, r3
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	da28      	bge.n	800b450 <lv_obj_get_scrollbar_area+0x5dc>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b404:	b29c      	uxth	r4, r3
 800b406:	2000      	movs	r0, #0
 800b408:	f014 fce4 	bl	801fdd4 <lv_disp_get_dpi>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	2bef      	cmp	r3, #239	; 0xef
 800b41a:	dd13      	ble.n	800b444 <lv_obj_get_scrollbar_area+0x5d0>
 800b41c:	2000      	movs	r0, #0
 800b41e:	f014 fcd9 	bl	801fdd4 <lv_disp_get_dpi>
 800b422:	4603      	mov	r3, r0
 800b424:	461a      	mov	r2, r3
 800b426:	4613      	mov	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	3350      	adds	r3, #80	; 0x50
 800b430:	4a03      	ldr	r2, [pc, #12]	; (800b440 <lv_obj_get_scrollbar_area+0x5cc>)
 800b432:	fb82 1203 	smull	r1, r2, r2, r3
 800b436:	1192      	asrs	r2, r2, #6
 800b438:	17db      	asrs	r3, r3, #31
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	e002      	b.n	800b446 <lv_obj_get_scrollbar_area+0x5d2>
 800b440:	66666667 	.word	0x66666667
 800b444:	2301      	movs	r3, #1
 800b446:	1ae3      	subs	r3, r4, r3
 800b448:	b29b      	uxth	r3, r3
 800b44a:	b21a      	sxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    /*Draw horizontal scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_w = obj_w + sl + sr;
 800b450:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b452:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b454:	4413      	add	r3, r2
 800b456:	b29a      	uxth	r2, r3
 800b458:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b45a:	4413      	add	r3, r2
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	833b      	strh	r3, [r7, #24]
    if(hor_draw && content_w) {
 800b460:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 82c4 	beq.w	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
 800b46a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 82bf 	beq.w	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	b29b      	uxth	r3, r3
 800b482:	b21a      	sxth	r2, r3
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	80da      	strh	r2, [r3, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b48e:	b29a      	uxth	r2, r3
 800b490:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	b29b      	uxth	r3, r3
 800b496:	3301      	adds	r3, #1
 800b498:	b29b      	uxth	r3, r3
 800b49a:	b21a      	sxth	r2, r3
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	805a      	strh	r2, [r3, #2]
        hor_area->x1 = obj->coords.x1;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	801a      	strh	r2, [r3, #0]
        hor_area->x2 = obj->coords.x2;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	809a      	strh	r2, [r3, #4]

        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800b4b4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b4b8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b4bc:	1ad2      	subs	r2, r2, r3
 800b4be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b4c2:	1ad2      	subs	r2, r2, r3
 800b4c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b4ce:	fb03 f202 	mul.w	r2, r3, r2
 800b4d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b4d6:	fb92 f3f3 	sdiv	r3, r2, r3
 800b4da:	82fb      	strh	r3, [r7, #22]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800b4dc:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	f014 fc77 	bl	801fdd4 <lv_disp_get_dpi>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	2bef      	cmp	r3, #239	; 0xef
 800b4f4:	dd10      	ble.n	800b518 <lv_obj_get_scrollbar_area+0x6a4>
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f014 fc6c 	bl	801fdd4 <lv_disp_get_dpi>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	461a      	mov	r2, r3
 800b500:	4613      	mov	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4413      	add	r3, r2
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	3350      	adds	r3, #80	; 0x50
 800b50a:	4aa7      	ldr	r2, [pc, #668]	; (800b7a8 <lv_obj_get_scrollbar_area+0x934>)
 800b50c:	fb82 1203 	smull	r1, r2, r2, r3
 800b510:	1192      	asrs	r2, r2, #6
 800b512:	17db      	asrs	r3, r3, #31
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	e000      	b.n	800b51a <lv_obj_get_scrollbar_area+0x6a6>
 800b518:	2301      	movs	r3, #1
 800b51a:	42a3      	cmp	r3, r4
 800b51c:	db1e      	blt.n	800b55c <lv_obj_get_scrollbar_area+0x6e8>
 800b51e:	2000      	movs	r0, #0
 800b520:	f014 fc58 	bl	801fdd4 <lv_disp_get_dpi>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	4613      	mov	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	2bef      	cmp	r3, #239	; 0xef
 800b532:	dd11      	ble.n	800b558 <lv_obj_get_scrollbar_area+0x6e4>
 800b534:	2000      	movs	r0, #0
 800b536:	f014 fc4d 	bl	801fdd4 <lv_disp_get_dpi>
 800b53a:	4603      	mov	r3, r0
 800b53c:	461a      	mov	r2, r3
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	3350      	adds	r3, #80	; 0x50
 800b548:	4a97      	ldr	r2, [pc, #604]	; (800b7a8 <lv_obj_get_scrollbar_area+0x934>)
 800b54a:	fb82 1203 	smull	r1, r2, r2, r3
 800b54e:	1192      	asrs	r2, r2, #6
 800b550:	17db      	asrs	r3, r3, #31
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	b21b      	sxth	r3, r3
 800b556:	e003      	b.n	800b560 <lv_obj_get_scrollbar_area+0x6ec>
 800b558:	2301      	movs	r3, #1
 800b55a:	e001      	b.n	800b560 <lv_obj_get_scrollbar_area+0x6ec>
 800b55c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b560:	82fb      	strh	r3, [r7, #22]
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800b562:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b564:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	b29a      	uxth	r2, r3
 800b56a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	b29a      	uxth	r2, r3
 800b570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	b29a      	uxth	r2, r3
 800b576:	8afb      	ldrh	r3, [r7, #22]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	83fb      	strh	r3, [r7, #30]
              sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800b57e:	8b3a      	ldrh	r2, [r7, #24]
 800b580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	b29b      	uxth	r3, r3
 800b586:	82bb      	strh	r3, [r7, #20]
        if(scroll_w <= 0) {
 800b588:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dc37      	bgt.n	800b600 <lv_obj_get_scrollbar_area+0x78c>
            if(rtl) {
 800b590:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b594:	2b00      	cmp	r3, #0
 800b596:	d019      	beq.n	800b5cc <lv_obj_get_scrollbar_area+0x758>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b5a2:	4413      	add	r3, r2
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5a8:	4413      	add	r3, r2
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	b21a      	sxth	r2, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	b21a      	sxth	r2, r3
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	809a      	strh	r2, [r3, #4]
 800b5ca:	e212      	b.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
            }
            else {
                hor_area->x1 = obj->coords.x1 + left_space;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b5d6:	4413      	add	r3, r2
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	b21a      	sxth	r2, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	b21a      	sxth	r2, r3
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	809a      	strh	r2, [r3, #4]
 800b5fe:	e1f8      	b.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
            }
        }
        else {
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800b600:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b604:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800b608:	fb03 f202 	mul.w	r2, r3, r2
 800b60c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b610:	fb92 f3f3 	sdiv	r3, r2, r3
 800b614:	827b      	strh	r3, [r7, #18]
            sb_x = rem - sb_x;
 800b616:	8bfa      	ldrh	r2, [r7, #30]
 800b618:	8a7b      	ldrh	r3, [r7, #18]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	827b      	strh	r3, [r7, #18]

            if(rtl) {
 800b620:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 80f1 	beq.w	800b80c <lv_obj_get_scrollbar_area+0x998>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b630:	b29a      	uxth	r2, r3
 800b632:	8a7b      	ldrh	r3, [r7, #18]
 800b634:	4413      	add	r3, r2
 800b636:	b29a      	uxth	r2, r3
 800b638:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b63a:	4413      	add	r3, r2
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b640:	4413      	add	r3, r2
 800b642:	b29b      	uxth	r3, r3
 800b644:	b21a      	sxth	r2, r3
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b650:	b29a      	uxth	r2, r3
 800b652:	8afb      	ldrh	r3, [r7, #22]
 800b654:	4413      	add	r3, r2
 800b656:	b29b      	uxth	r3, r3
 800b658:	3b01      	subs	r3, #1
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	b21a      	sxth	r2, r3
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b668:	4619      	mov	r1, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b670:	461a      	mov	r2, r3
 800b672:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b676:	441a      	add	r2, r3
 800b678:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b67c:	4413      	add	r3, r2
 800b67e:	4299      	cmp	r1, r3
 800b680:	da5a      	bge.n	800b738 <lv_obj_get_scrollbar_area+0x8c4>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b688:	b29a      	uxth	r2, r3
 800b68a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b68c:	4413      	add	r3, r2
 800b68e:	b29a      	uxth	r2, r3
 800b690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b692:	4413      	add	r3, r2
 800b694:	b29b      	uxth	r3, r3
 800b696:	b21a      	sxth	r2, r3
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6a2:	461c      	mov	r4, r3
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	f014 fb95 	bl	801fdd4 <lv_disp_get_dpi>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	005b      	lsls	r3, r3, #1
 800b6b6:	2bef      	cmp	r3, #239	; 0xef
 800b6b8:	dd10      	ble.n	800b6dc <lv_obj_get_scrollbar_area+0x868>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	f014 fb8a 	bl	801fdd4 <lv_disp_get_dpi>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	005b      	lsls	r3, r3, #1
 800b6cc:	3350      	adds	r3, #80	; 0x50
 800b6ce:	4a36      	ldr	r2, [pc, #216]	; (800b7a8 <lv_obj_get_scrollbar_area+0x934>)
 800b6d0:	fb82 1203 	smull	r1, r2, r2, r3
 800b6d4:	1192      	asrs	r2, r2, #6
 800b6d6:	17db      	asrs	r3, r3, #31
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	e000      	b.n	800b6de <lv_obj_get_scrollbar_area+0x86a>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	4423      	add	r3, r4
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	dd26      	ble.n	800b738 <lv_obj_get_scrollbar_area+0x8c4>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6f0:	b29c      	uxth	r4, r3
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	f014 fb6e 	bl	801fdd4 <lv_disp_get_dpi>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	2bef      	cmp	r3, #239	; 0xef
 800b706:	dd11      	ble.n	800b72c <lv_obj_get_scrollbar_area+0x8b8>
 800b708:	2000      	movs	r0, #0
 800b70a:	f014 fb63 	bl	801fdd4 <lv_disp_get_dpi>
 800b70e:	4603      	mov	r3, r0
 800b710:	461a      	mov	r2, r3
 800b712:	4613      	mov	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	3350      	adds	r3, #80	; 0x50
 800b71c:	4a22      	ldr	r2, [pc, #136]	; (800b7a8 <lv_obj_get_scrollbar_area+0x934>)
 800b71e:	fb82 1203 	smull	r1, r2, r2, r3
 800b722:	1192      	asrs	r2, r2, #6
 800b724:	17db      	asrs	r3, r3, #31
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	b29b      	uxth	r3, r3
 800b72a:	e000      	b.n	800b72e <lv_obj_get_scrollbar_area+0x8ba>
 800b72c:	2301      	movs	r3, #1
 800b72e:	4423      	add	r3, r4
 800b730:	b29b      	uxth	r3, r3
 800b732:	b21a      	sxth	r2, r3
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b73e:	461a      	mov	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b746:	4619      	mov	r1, r3
 800b748:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b74c:	1acb      	subs	r3, r1, r3
 800b74e:	429a      	cmp	r2, r3
 800b750:	f340 814f 	ble.w	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	b29b      	uxth	r3, r3
 800b762:	b21a      	sxth	r2, r3
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b76e:	461c      	mov	r4, r3
 800b770:	2000      	movs	r0, #0
 800b772:	f014 fb2f 	bl	801fdd4 <lv_disp_get_dpi>
 800b776:	4603      	mov	r3, r0
 800b778:	461a      	mov	r2, r3
 800b77a:	4613      	mov	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	005b      	lsls	r3, r3, #1
 800b782:	2bef      	cmp	r3, #239	; 0xef
 800b784:	dd12      	ble.n	800b7ac <lv_obj_get_scrollbar_area+0x938>
 800b786:	2000      	movs	r0, #0
 800b788:	f014 fb24 	bl	801fdd4 <lv_disp_get_dpi>
 800b78c:	4603      	mov	r3, r0
 800b78e:	461a      	mov	r2, r3
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	3350      	adds	r3, #80	; 0x50
 800b79a:	4a03      	ldr	r2, [pc, #12]	; (800b7a8 <lv_obj_get_scrollbar_area+0x934>)
 800b79c:	fb82 1203 	smull	r1, r2, r2, r3
 800b7a0:	1192      	asrs	r2, r2, #6
 800b7a2:	17db      	asrs	r3, r3, #31
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	e002      	b.n	800b7ae <lv_obj_get_scrollbar_area+0x93a>
 800b7a8:	66666667 	.word	0x66666667
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	1ae3      	subs	r3, r4, r3
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	f280 811b 	bge.w	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b7c2:	b29c      	uxth	r4, r3
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	f014 fb05 	bl	801fdd4 <lv_disp_get_dpi>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	2bef      	cmp	r3, #239	; 0xef
 800b7d8:	dd11      	ble.n	800b7fe <lv_obj_get_scrollbar_area+0x98a>
 800b7da:	2000      	movs	r0, #0
 800b7dc:	f014 fafa 	bl	801fdd4 <lv_disp_get_dpi>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	005b      	lsls	r3, r3, #1
 800b7ec:	3350      	adds	r3, #80	; 0x50
 800b7ee:	4a82      	ldr	r2, [pc, #520]	; (800b9f8 <lv_obj_get_scrollbar_area+0xb84>)
 800b7f0:	fb82 1203 	smull	r1, r2, r2, r3
 800b7f4:	1192      	asrs	r2, r2, #6
 800b7f6:	17db      	asrs	r3, r3, #31
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	e000      	b.n	800b800 <lv_obj_get_scrollbar_area+0x98c>
 800b7fe:	2301      	movs	r3, #1
 800b800:	1ae3      	subs	r3, r4, r3
 800b802:	b29b      	uxth	r3, r3
 800b804:	b21a      	sxth	r2, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	801a      	strh	r2, [r3, #0]
 800b80a:	e0f2      	b.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
                    }
                }
            }
            else {
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b812:	b29a      	uxth	r2, r3
 800b814:	8a7b      	ldrh	r3, [r7, #18]
 800b816:	4413      	add	r3, r2
 800b818:	b29a      	uxth	r2, r3
 800b81a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b81c:	4413      	add	r3, r2
 800b81e:	b29b      	uxth	r3, r3
 800b820:	b21a      	sxth	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	8afb      	ldrh	r3, [r7, #22]
 800b830:	4413      	add	r3, r2
 800b832:	b29b      	uxth	r3, r3
 800b834:	3b01      	subs	r3, #1
 800b836:	b29b      	uxth	r3, r3
 800b838:	b21a      	sxth	r2, r3
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b844:	461a      	mov	r2, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b84c:	4619      	mov	r1, r3
 800b84e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b852:	440b      	add	r3, r1
 800b854:	429a      	cmp	r2, r3
 800b856:	da57      	bge.n	800b908 <lv_obj_get_scrollbar_area+0xa94>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b85e:	b29a      	uxth	r2, r3
 800b860:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b862:	4413      	add	r3, r2
 800b864:	b29b      	uxth	r3, r3
 800b866:	b21a      	sxth	r2, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b872:	461c      	mov	r4, r3
 800b874:	2000      	movs	r0, #0
 800b876:	f014 faad 	bl	801fdd4 <lv_disp_get_dpi>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	2bef      	cmp	r3, #239	; 0xef
 800b888:	dd10      	ble.n	800b8ac <lv_obj_get_scrollbar_area+0xa38>
 800b88a:	2000      	movs	r0, #0
 800b88c:	f014 faa2 	bl	801fdd4 <lv_disp_get_dpi>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	4613      	mov	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	3350      	adds	r3, #80	; 0x50
 800b89e:	4a56      	ldr	r2, [pc, #344]	; (800b9f8 <lv_obj_get_scrollbar_area+0xb84>)
 800b8a0:	fb82 1203 	smull	r1, r2, r2, r3
 800b8a4:	1192      	asrs	r2, r2, #6
 800b8a6:	17db      	asrs	r3, r3, #31
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	e000      	b.n	800b8ae <lv_obj_get_scrollbar_area+0xa3a>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	4423      	add	r3, r4
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	dd26      	ble.n	800b908 <lv_obj_get_scrollbar_area+0xa94>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8c0:	b29c      	uxth	r4, r3
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f014 fa86 	bl	801fdd4 <lv_disp_get_dpi>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	2bef      	cmp	r3, #239	; 0xef
 800b8d6:	dd11      	ble.n	800b8fc <lv_obj_get_scrollbar_area+0xa88>
 800b8d8:	2000      	movs	r0, #0
 800b8da:	f014 fa7b 	bl	801fdd4 <lv_disp_get_dpi>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	3350      	adds	r3, #80	; 0x50
 800b8ec:	4a42      	ldr	r2, [pc, #264]	; (800b9f8 <lv_obj_get_scrollbar_area+0xb84>)
 800b8ee:	fb82 1203 	smull	r1, r2, r2, r3
 800b8f2:	1192      	asrs	r2, r2, #6
 800b8f4:	17db      	asrs	r3, r3, #31
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	e000      	b.n	800b8fe <lv_obj_get_scrollbar_area+0xa8a>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	4423      	add	r3, r4
 800b900:	b29b      	uxth	r3, r3
 800b902:	b21a      	sxth	r2, r3
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b90e:	4619      	mov	r1, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b916:	461a      	mov	r2, r3
 800b918:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b91c:	1ad2      	subs	r2, r2, r3
 800b91e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	4299      	cmp	r1, r3
 800b926:	dd64      	ble.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	b29a      	uxth	r2, r3
 800b936:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	b21a      	sxth	r2, r3
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b948:	461c      	mov	r4, r3
 800b94a:	2000      	movs	r0, #0
 800b94c:	f014 fa42 	bl	801fdd4 <lv_disp_get_dpi>
 800b950:	4603      	mov	r3, r0
 800b952:	461a      	mov	r2, r3
 800b954:	4613      	mov	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	2bef      	cmp	r3, #239	; 0xef
 800b95e:	dd10      	ble.n	800b982 <lv_obj_get_scrollbar_area+0xb0e>
 800b960:	2000      	movs	r0, #0
 800b962:	f014 fa37 	bl	801fdd4 <lv_disp_get_dpi>
 800b966:	4603      	mov	r3, r0
 800b968:	461a      	mov	r2, r3
 800b96a:	4613      	mov	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	005b      	lsls	r3, r3, #1
 800b972:	3350      	adds	r3, #80	; 0x50
 800b974:	4a20      	ldr	r2, [pc, #128]	; (800b9f8 <lv_obj_get_scrollbar_area+0xb84>)
 800b976:	fb82 1203 	smull	r1, r2, r2, r3
 800b97a:	1192      	asrs	r2, r2, #6
 800b97c:	17db      	asrs	r3, r3, #31
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	e000      	b.n	800b984 <lv_obj_get_scrollbar_area+0xb10>
 800b982:	2301      	movs	r3, #1
 800b984:	1ae3      	subs	r3, r4, r3
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b98c:	4293      	cmp	r3, r2
 800b98e:	da30      	bge.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b996:	b29c      	uxth	r4, r3
 800b998:	2000      	movs	r0, #0
 800b99a:	f014 fa1b 	bl	801fdd4 <lv_disp_get_dpi>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	2bef      	cmp	r3, #239	; 0xef
 800b9ac:	dd11      	ble.n	800b9d2 <lv_obj_get_scrollbar_area+0xb5e>
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	f014 fa10 	bl	801fdd4 <lv_disp_get_dpi>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	3350      	adds	r3, #80	; 0x50
 800b9c2:	4a0d      	ldr	r2, [pc, #52]	; (800b9f8 <lv_obj_get_scrollbar_area+0xb84>)
 800b9c4:	fb82 1203 	smull	r1, r2, r2, r3
 800b9c8:	1192      	asrs	r2, r2, #6
 800b9ca:	17db      	asrs	r3, r3, #31
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	e000      	b.n	800b9d4 <lv_obj_get_scrollbar_area+0xb60>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	1ae3      	subs	r3, r4, r3
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	b21a      	sxth	r2, r3
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	801a      	strh	r2, [r3, #0]
 800b9de:	e008      	b.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800b9e0:	bf00      	nop
 800b9e2:	e006      	b.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800b9e4:	bf00      	nop
 800b9e6:	e004      	b.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
        if(indev == NULL)  return;
 800b9e8:	bf00      	nop
 800b9ea:	e002      	b.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
    if(!hor_draw && !ver_draw) return;
 800b9ec:	bf00      	nop
 800b9ee:	e000      	b.n	800b9f2 <lv_obj_get_scrollbar_area+0xb7e>
        return;
 800b9f0:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800b9f2:	374c      	adds	r7, #76	; 0x4c
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd90      	pop	{r4, r7, pc}
 800b9f8:	66666667 	.word	0x66666667

0800b9fc <lv_obj_scrollbar_invalidate>:

void lv_obj_scrollbar_invalidate(lv_obj_t * obj)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800ba04:	f107 0208 	add.w	r2, r7, #8
 800ba08:	f107 0310 	add.w	r3, r7, #16
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff fa30 	bl	800ae74 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800ba14:	f107 0310 	add.w	r3, r7, #16
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f014 fdf6 	bl	802060a <lv_area_get_size>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d107      	bne.n	800ba34 <lv_obj_scrollbar_invalidate+0x38>
 800ba24:	f107 0308 	add.w	r3, r7, #8
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f014 fdee 	bl	802060a <lv_area_get_size>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d01c      	beq.n	800ba6e <lv_obj_scrollbar_invalidate+0x72>

    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800ba34:	f107 0310 	add.w	r3, r7, #16
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f014 fde6 	bl	802060a <lv_area_get_size>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d005      	beq.n	800ba50 <lv_obj_scrollbar_invalidate+0x54>
 800ba44:	f107 0310 	add.w	r3, r7, #16
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7fd fe04 	bl	8009658 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800ba50:	f107 0308 	add.w	r3, r7, #8
 800ba54:	4618      	mov	r0, r3
 800ba56:	f014 fdd8 	bl	802060a <lv_area_get_size>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d007      	beq.n	800ba70 <lv_obj_scrollbar_invalidate+0x74>
 800ba60:	f107 0308 	add.w	r3, r7, #8
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7fd fdf6 	bl	8009658 <lv_obj_invalidate_area>
 800ba6c:	e000      	b.n	800ba70 <lv_obj_scrollbar_invalidate+0x74>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800ba6e:	bf00      	nop
}
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <lv_obj_readjust_scroll>:

void lv_obj_readjust_scroll(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	70fb      	strb	r3, [r7, #3]
    /*Be sure the bottom side is not remains scrolled in*/
    /*With snapping the content can't be scrolled in*/
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7fe fd08 	bl	800a498 <lv_obj_get_scroll_snap_y>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d121      	bne.n	800bad2 <lv_obj_readjust_scroll+0x5c>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f7fe fd48 	bl	800a524 <lv_obj_get_scroll_top>
 800ba94:	4603      	mov	r3, r0
 800ba96:	81fb      	strh	r3, [r7, #14]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7fe fd5b 	bl	800a554 <lv_obj_get_scroll_bottom>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	81bb      	strh	r3, [r7, #12]
        if(sb < 0 && st > 0) {
 800baa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	da13      	bge.n	800bad2 <lv_obj_readjust_scroll+0x5c>
 800baaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd0f      	ble.n	800bad2 <lv_obj_readjust_scroll+0x5c>
            sb = LV_MIN(st, -sb);
 800bab2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bab6:	425a      	negs	r2, r3
 800bab8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800babc:	4293      	cmp	r3, r2
 800babe:	bfa8      	it	ge
 800bac0:	4613      	movge	r3, r2
 800bac2:	81bb      	strh	r3, [r7, #12]
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800baca:	2100      	movs	r1, #0
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7fe ffd3 	bl	800aa78 <lv_obj_scroll_by>
        }
    }

    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7fe fcca 	bl	800a46c <lv_obj_get_scroll_snap_x>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d141      	bne.n	800bb62 <lv_obj_readjust_scroll+0xec>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7fe fdbe 	bl	800a660 <lv_obj_get_scroll_left>
 800bae4:	4603      	mov	r3, r0
 800bae6:	817b      	strh	r3, [r7, #10]
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7fe fe5d 	bl	800a7a8 <lv_obj_get_scroll_right>
 800baee:	4603      	mov	r3, r0
 800baf0:	813b      	strh	r3, [r7, #8]
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800baf2:	2100      	movs	r1, #0
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7fe fc56 	bl	800a3a6 <lv_obj_get_style_base_dir>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d018      	beq.n	800bb32 <lv_obj_readjust_scroll+0xbc>
            /*Be sure the left side is not remains scrolled in*/
            if(sr < 0 && sl > 0) {
 800bb00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	da2c      	bge.n	800bb62 <lv_obj_readjust_scroll+0xec>
 800bb08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	dd28      	ble.n	800bb62 <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sl, -sr);
 800bb10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bb14:	425a      	negs	r2, r3
 800bb16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	bfa8      	it	ge
 800bb1e:	4613      	movge	r3, r2
 800bb20:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800bb22:	78fb      	ldrb	r3, [r7, #3]
 800bb24:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7fe ffa4 	bl	800aa78 <lv_obj_scroll_by>
                sr = LV_MIN(sr, -sl);
                lv_obj_scroll_by(obj, sl, 0, anim_en);
            }
        }
    }
}
 800bb30:	e017      	b.n	800bb62 <lv_obj_readjust_scroll+0xec>
            if(sl < 0 && sr > 0) {
 800bb32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	da13      	bge.n	800bb62 <lv_obj_readjust_scroll+0xec>
 800bb3a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dd0f      	ble.n	800bb62 <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sr, -sl);
 800bb42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bb46:	425a      	negs	r2, r3
 800bb48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	bfa8      	it	ge
 800bb50:	4613      	movge	r3, r2
 800bb52:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800bb54:	78fb      	ldrb	r3, [r7, #3]
 800bb56:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7fe ff8b 	bl	800aa78 <lv_obj_scroll_by>
}
 800bb62:	bf00      	nop
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <scroll_x_anim>:
 *   STATIC FUNCTIONS
 **********************/


static void scroll_x_anim(void * obj, int32_t v)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7fe fca5 	bl	800a4c4 <lv_obj_get_scroll_x>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	4413      	add	r3, r2
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	b21b      	sxth	r3, r3
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7ff f928 	bl	800ade2 <_lv_obj_scroll_by_raw>
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <scroll_y_anim>:

static void scroll_y_anim(void * obj, int32_t v)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7fe fca5 	bl	800a4f4 <lv_obj_get_scroll_y>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	4413      	add	r3, r2
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	b21b      	sxth	r3, r3
 800bbb8:	461a      	mov	r2, r3
 800bbba:	2100      	movs	r1, #0
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff f910 	bl	800ade2 <_lv_obj_scroll_by_raw>
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <scroll_anim_ready_cb>:

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	210a      	movs	r1, #10
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7f8 ffbc 	bl	8004b58 <lv_event_send>
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b092      	sub	sp, #72	; 0x48
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
 800bbf4:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800bbf6:	68b8      	ldr	r0, [r7, #8]
 800bbf8:	f002 f9b8 	bl	800df6c <lv_obj_get_parent>
 800bbfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800bbfe:	2110      	movs	r1, #16
 800bc00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc02:	f7fa f982 	bl	8005f0a <lv_obj_has_flag>
 800bc06:	4603      	mov	r3, r0
 800bc08:	f083 0301 	eor.w	r3, r3, #1
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f040 829f 	bne.w	800c152 <scroll_area_into_view+0x56a>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800bc14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc16:	f7fe fc13 	bl	800a440 <lv_obj_get_scroll_dir>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    lv_coord_t snap_goal = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t act = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 800bc2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc30:	f7fe fc32 	bl	800a498 <lv_obj_get_scroll_snap_y>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800bc3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <scroll_area_into_view+0x62>
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	3314      	adds	r3, #20
 800bc46:	647b      	str	r3, [r7, #68]	; 0x44
 800bc48:	e001      	b.n	800bc4e <scroll_area_into_view+0x66>
    else area_tmp = area;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800bc4e:	2100      	movs	r1, #0
 800bc50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc52:	f7fe fb96 	bl	800a382 <lv_obj_get_style_border_width>
 800bc56:	4603      	mov	r3, r0
 800bc58:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc5e:	f7fe fb24 	bl	800a2aa <lv_obj_get_style_pad_top>
 800bc62:	4603      	mov	r3, r0
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc68:	4413      	add	r3, r2
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800bc6e:	2100      	movs	r1, #0
 800bc70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc72:	f7fe fb2c 	bl	800a2ce <lv_obj_get_style_pad_bottom>
 800bc76:	4603      	mov	r3, r0
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc7c:	4413      	add	r3, r2
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800bc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc84:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bc8c:	4413      	add	r3, r2
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcb4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bcb8:	b299      	uxth	r1, r3
 800bcba:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800bcbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcbe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	1ac3      	subs	r3, r0, r3
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	440b      	add	r3, r1
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	4413      	add	r3, r2
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800bcd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bcd4:	f7fc ff39 	bl	8008b4a <lv_obj_get_height>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	853b      	strh	r3, [r7, #40]	; 0x28
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800bcea:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	db07      	blt.n	800bd02 <scroll_area_into_view+0x11a>
 800bcf2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	db03      	blt.n	800bd02 <scroll_area_into_view+0x11a>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bd00:	e02e      	b.n	800bd60 <scroll_area_into_view+0x178>
    else if(top_diff > 0) {
 800bd02:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dd12      	ble.n	800bd30 <scroll_area_into_view+0x148>
        y_scroll = top_diff;
 800bd0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800bd10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd12:	f7fe fc07 	bl	800a524 <lv_obj_get_scroll_top>
 800bd16:	4603      	mov	r3, r0
 800bd18:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(st - y_scroll < 0) y_scroll = 0;
 800bd1a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800bd1e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	da1b      	bge.n	800bd60 <scroll_area_into_view+0x178>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bd2e:	e017      	b.n	800bd60 <scroll_area_into_view+0x178>
    }
    else if(bottom_diff > 0) {
 800bd30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dd13      	ble.n	800bd60 <scroll_area_into_view+0x178>
        y_scroll = -bottom_diff;
 800bd38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd3a:	425b      	negs	r3, r3
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800bd42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd44:	f7fe fc06 	bl	800a554 <lv_obj_get_scroll_bottom>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	84fb      	strh	r3, [r7, #38]	; 0x26
        if(sb + y_scroll < 0) y_scroll = 0;
 800bd4c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bd50:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800bd54:	4413      	add	r3, r2
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	da02      	bge.n	800bd60 <scroll_area_into_view+0x178>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    switch(snap_y) {
 800bd60:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d03e      	beq.n	800bde6 <scroll_area_into_view+0x1fe>
 800bd68:	2b03      	cmp	r3, #3
 800bd6a:	dc6e      	bgt.n	800be4a <scroll_area_into_view+0x262>
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d002      	beq.n	800bd76 <scroll_area_into_view+0x18e>
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d01c      	beq.n	800bdae <scroll_area_into_view+0x1c6>
 800bd74:	e069      	b.n	800be4a <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
 800bd76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd78:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bd80:	4413      	add	r3, r2
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y1 + y_scroll;
 800bd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd92:	4413      	add	r3, r2
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800bd98:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bd9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bda4:	4413      	add	r3, r2
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800bdac:	e04d      	b.n	800be4a <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
 800bdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y2 + y_scroll;
 800bdbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdc0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdca:	4413      	add	r3, r2
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800bdd0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bdd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bddc:	4413      	add	r3, r2
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800bde4:	e031      	b.n	800be4a <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800bde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bdf0:	4413      	add	r3, r2
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	da00      	bge.n	800bdfe <scroll_area_into_view+0x216>
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	105b      	asrs	r3, r3, #1
 800be00:	b21b      	sxth	r3, r3
 800be02:	b29b      	uxth	r3, r3
 800be04:	4413      	add	r3, r2
 800be06:	b29b      	uxth	r3, r3
 800be08:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800be0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800be0c:	f7fe f9c9 	bl	800a1a2 <lv_area_get_height>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	da00      	bge.n	800be18 <scroll_area_into_view+0x230>
 800be16:	3301      	adds	r3, #1
 800be18:	105b      	asrs	r3, r3, #1
 800be1a:	b21b      	sxth	r3, r3
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be24:	b29b      	uxth	r3, r3
 800be26:	4413      	add	r3, r2
 800be28:	b29a      	uxth	r2, r3
 800be2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be2e:	4413      	add	r3, r2
 800be30:	b29b      	uxth	r3, r3
 800be32:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800be34:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800be36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be40:	4413      	add	r3, r2
 800be42:	b29b      	uxth	r3, r3
 800be44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800be48:	bf00      	nop
    }

    lv_coord_t x_scroll = 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800be50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be52:	f7fe fb0b 	bl	800a46c <lv_obj_get_scroll_snap_x>
 800be56:	4603      	mov	r3, r0
 800be58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800be5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <scroll_area_into_view+0x284>
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	3314      	adds	r3, #20
 800be68:	647b      	str	r3, [r7, #68]	; 0x44
 800be6a:	e001      	b.n	800be70 <scroll_area_into_view+0x288>
    else area_tmp = area;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800be70:	2100      	movs	r1, #0
 800be72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be74:	f7fe fa3d 	bl	800a2f2 <lv_obj_get_style_pad_left>
 800be78:	4603      	mov	r3, r0
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be7e:	4413      	add	r3, r2
 800be80:	b29b      	uxth	r3, r3
 800be82:	843b      	strh	r3, [r7, #32]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800be84:	2100      	movs	r1, #0
 800be86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be88:	f7fe fa45 	bl	800a316 <lv_obj_get_style_pad_right>
 800be8c:	4603      	mov	r3, r0
 800be8e:	b29a      	uxth	r2, r3
 800be90:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be92:	4413      	add	r3, r2
 800be94:	b29b      	uxth	r3, r3
 800be96:	83fb      	strh	r3, [r7, #30]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800be98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	8c3b      	ldrh	r3, [r7, #32]
 800bea2:	4413      	add	r3, r2
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800beac:	b29b      	uxth	r3, r3
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	83bb      	strh	r3, [r7, #28]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bece:	b299      	uxth	r1, r3
 800bed0:	8bf8      	ldrh	r0, [r7, #30]
 800bed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bed8:	b29b      	uxth	r3, r3
 800beda:	1ac3      	subs	r3, r0, r3
 800bedc:	b29b      	uxth	r3, r3
 800bede:	440b      	add	r3, r1
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	4413      	add	r3, r2
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	837b      	strh	r3, [r7, #26]
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800bee8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800beec:	2b00      	cmp	r3, #0
 800beee:	db07      	blt.n	800bf00 <scroll_area_into_view+0x318>
 800bef0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	db03      	blt.n	800bf00 <scroll_area_into_view+0x318>
 800bef8:	2300      	movs	r3, #0
 800befa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800befe:	e02e      	b.n	800bf5e <scroll_area_into_view+0x376>
    else if(left_diff > 0) {
 800bf00:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	dd12      	ble.n	800bf2e <scroll_area_into_view+0x346>
        x_scroll = left_diff;
 800bf08:	8bbb      	ldrh	r3, [r7, #28]
 800bf0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800bf0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf10:	f7fe fba6 	bl	800a660 <lv_obj_get_scroll_left>
 800bf14:	4603      	mov	r3, r0
 800bf16:	82fb      	strh	r3, [r7, #22]
        if(sl - x_scroll < 0) x_scroll = 0;
 800bf18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf1c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	da1b      	bge.n	800bf5e <scroll_area_into_view+0x376>
 800bf26:	2300      	movs	r3, #0
 800bf28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bf2c:	e017      	b.n	800bf5e <scroll_area_into_view+0x376>
    }
    else if(right_diff > 0) {
 800bf2e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	dd13      	ble.n	800bf5e <scroll_area_into_view+0x376>
        x_scroll = -right_diff;
 800bf36:	8b7b      	ldrh	r3, [r7, #26]
 800bf38:	425b      	negs	r3, r3
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800bf40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf42:	f7fe fc31 	bl	800a7a8 <lv_obj_get_scroll_right>
 800bf46:	4603      	mov	r3, r0
 800bf48:	833b      	strh	r3, [r7, #24]
        if(sr + x_scroll < 0) x_scroll = 0;
 800bf4a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800bf4e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800bf52:	4413      	add	r3, r2
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	da02      	bge.n	800bf5e <scroll_area_into_view+0x376>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800bf5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf60:	f7fc fde5 	bl	8008b2e <lv_obj_get_width>
 800bf64:	4603      	mov	r3, r0
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	8c3b      	ldrh	r3, [r7, #32]
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	8bfb      	ldrh	r3, [r7, #30]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	82bb      	strh	r3, [r7, #20]
    switch(snap_x) {
 800bf76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d03e      	beq.n	800bffc <scroll_area_into_view+0x414>
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	dc6e      	bgt.n	800c060 <scroll_area_into_view+0x478>
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d002      	beq.n	800bf8c <scroll_area_into_view+0x3a4>
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d01c      	beq.n	800bfc4 <scroll_area_into_view+0x3dc>
 800bf8a:	e069      	b.n	800c060 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
 800bf8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf8e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	8c3b      	ldrh	r3, [r7, #32]
 800bf96:	4413      	add	r3, r2
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x1 + x_scroll;
 800bf9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bfa8:	4413      	add	r3, r2
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800bfae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bfb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bfba:	4413      	add	r3, r2
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800bfc2:	e04d      	b.n	800c060 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
 800bfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	8bfb      	ldrh	r3, [r7, #30]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x2 + x_scroll;
 800bfd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bfe0:	4413      	add	r3, r2
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800bfe6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bfe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bff2:	4413      	add	r3, r2
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800bffa:	e031      	b.n	800c060 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800bffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c002:	b29a      	uxth	r2, r3
 800c004:	8c3b      	ldrh	r3, [r7, #32]
 800c006:	4413      	add	r3, r2
 800c008:	b29a      	uxth	r2, r3
 800c00a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	da00      	bge.n	800c014 <scroll_area_into_view+0x42c>
 800c012:	3301      	adds	r3, #1
 800c014:	105b      	asrs	r3, r3, #1
 800c016:	b21b      	sxth	r3, r3
 800c018:	b29b      	uxth	r3, r3
 800c01a:	4413      	add	r3, r2
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800c020:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c022:	f7fe f8a7 	bl	800a174 <lv_area_get_width>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	da00      	bge.n	800c02e <scroll_area_into_view+0x446>
 800c02c:	3301      	adds	r3, #1
 800c02e:	105b      	asrs	r3, r3, #1
 800c030:	b21b      	sxth	r3, r3
 800c032:	b29a      	uxth	r2, r3
 800c034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	4413      	add	r3, r2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c044:	4413      	add	r3, r2
 800c046:	b29b      	uxth	r3, r3
 800c048:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800c04a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c04c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	b29a      	uxth	r2, r3
 800c052:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c056:	4413      	add	r3, r2
 800c058:	b29b      	uxth	r3, r3
 800c05a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800c05e:	bf00      	nop
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800c060:	493f      	ldr	r1, [pc, #252]	; (800c160 <scroll_area_into_view+0x578>)
 800c062:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c064:	f014 f812 	bl	802008c <lv_anim_del>
 800c068:	4603      	mov	r3, r0
 800c06a:	74fb      	strb	r3, [r7, #19]
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800c06c:	493d      	ldr	r1, [pc, #244]	; (800c164 <scroll_area_into_view+0x57c>)
 800c06e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c070:	f014 f80c 	bl	802008c <lv_anim_del>
 800c074:	4603      	mov	r3, r0
 800c076:	74bb      	strb	r3, [r7, #18]
    if(y_del || x_del) {
 800c078:	7cfb      	ldrb	r3, [r7, #19]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d102      	bne.n	800c084 <scroll_area_into_view+0x49c>
 800c07e:	7cbb      	ldrb	r3, [r7, #18]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d009      	beq.n	800c098 <scroll_area_into_view+0x4b0>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800c084:	2200      	movs	r2, #0
 800c086:	210a      	movs	r1, #10
 800c088:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c08a:	f7f8 fd65 	bl	8004b58 <lv_event_send>
 800c08e:	4603      	mov	r3, r0
 800c090:	747b      	strb	r3, [r7, #17]
        if(res != LV_RES_OK) return;
 800c092:	7c7b      	ldrb	r3, [r7, #17]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d15e      	bne.n	800c156 <scroll_area_into_view+0x56e>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800c098:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d106      	bne.n	800c0b2 <scroll_area_into_view+0x4ca>
 800c0a4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	da02      	bge.n	800c0b2 <scroll_area_into_view+0x4ca>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800c0b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c0b6:	f003 0302 	and.w	r3, r3, #2
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <scroll_area_into_view+0x4e4>
 800c0be:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	dd02      	ble.n	800c0cc <scroll_area_into_view+0x4e4>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800c0cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c0d0:	f003 0304 	and.w	r3, r3, #4
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d106      	bne.n	800c0e6 <scroll_area_into_view+0x4fe>
 800c0d8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	da02      	bge.n	800c0e6 <scroll_area_into_view+0x4fe>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800c0e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c0ea:	f003 0308 	and.w	r3, r3, #8
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d106      	bne.n	800c100 <scroll_area_into_view+0x518>
 800c0f2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	dd02      	ble.n	800c100 <scroll_area_into_view+0x518>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c106:	b29a      	uxth	r2, r3
 800c108:	78fb      	ldrb	r3, [r7, #3]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <scroll_area_into_view+0x52c>
 800c10e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c112:	e000      	b.n	800c116 <scroll_area_into_view+0x52e>
 800c114:	2300      	movs	r3, #0
 800c116:	4413      	add	r3, r2
 800c118:	b29b      	uxth	r3, r3
 800c11a:	b21a      	sxth	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	801a      	strh	r2, [r3, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c126:	b29a      	uxth	r2, r3
 800c128:	78fb      	ldrb	r3, [r7, #3]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <scroll_area_into_view+0x54c>
 800c12e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c132:	e000      	b.n	800c136 <scroll_area_into_view+0x54e>
 800c134:	2300      	movs	r3, #0
 800c136:	4413      	add	r3, r2
 800c138:	b29b      	uxth	r3, r3
 800c13a:	b21a      	sxth	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	805a      	strh	r2, [r3, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800c146:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 800c14a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c14c:	f7fe fc94 	bl	800aa78 <lv_obj_scroll_by>
 800c150:	e002      	b.n	800c158 <scroll_area_into_view+0x570>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800c152:	bf00      	nop
 800c154:	e000      	b.n	800c158 <scroll_area_into_view+0x570>
        if(res != LV_RES_OK) return;
 800c156:	bf00      	nop
}
 800c158:	3748      	adds	r7, #72	; 0x48
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	0800bb9b 	.word	0x0800bb9b
 800c164:	0800bb6b 	.word	0x0800bb6b

0800c168 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	7138      	strb	r0, [r7, #4]
 800c170:	7039      	strb	r1, [r7, #0]
 800c172:	4613      	mov	r3, r2
 800c174:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800c176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	da01      	bge.n	800c182 <lv_color_mix+0x1a>
 800c17e:	793b      	ldrb	r3, [r7, #4]
 800c180:	e000      	b.n	800c184 <lv_color_mix+0x1c>
 800c182:	783b      	ldrb	r3, [r7, #0]
 800c184:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 800c186:	7b3b      	ldrb	r3, [r7, #12]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <lv_anim_set_var>:
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
    a->var = var;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	601a      	str	r2, [r3, #0]
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <lv_anim_set_exec_cb>:
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	605a      	str	r2, [r3, #4]
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <lv_anim_set_time>:
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <lv_anim_set_delay>:
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	425a      	negs	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <lv_anim_set_values>:
{
 800c206:	b480      	push	{r7}
 800c208:	b085      	sub	sp, #20
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c224:	bf00      	nop
 800c226:	3714      	adds	r7, #20
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <lv_anim_set_path_cb>:
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	61da      	str	r2, [r3, #28]
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <lv_anim_set_start_cb>:
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	609a      	str	r2, [r3, #8]
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <lv_anim_set_ready_cb>:
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	60da      	str	r2, [r3, #12]
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <lv_anim_set_early_apply>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
    a->early_apply = en;
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c296:	78f9      	ldrb	r1, [r7, #3]
 800c298:	f361 0300 	bfi	r3, r1, #0, #1
 800c29c:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <lv_bidi_calculate_align+0x1a>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	701a      	strb	r2, [r3, #0]
}
 800c2c6:	bf00      	nop
 800c2c8:	3714      	adds	r7, #20
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <lv_style_prop_has_flag>:
 * @param prop Property ID
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	4603      	mov	r3, r0
 800c2da:	460a      	mov	r2, r1
 800c2dc:	80fb      	strh	r3, [r7, #6]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	717b      	strb	r3, [r7, #5]
    return _lv_style_prop_lookup_flags(prop) & flag;
 800c2e2:	88fb      	ldrh	r3, [r7, #6]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f016 fde9 	bl	8022ebc <_lv_style_prop_lookup_flags>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	797b      	ldrb	r3, [r7, #5]
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bf14      	ite	ne
 800c2f8:	2301      	movne	r3, #1
 800c2fa:	2300      	moveq	r3, #0
 800c2fc:	b2db      	uxtb	r3, r3
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <lv_obj_get_style_width>:
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b084      	sub	sp, #16
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800c310:	2201      	movs	r2, #1
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fb1d 	bl	800c954 <lv_obj_get_style_prop>
 800c31a:	4603      	mov	r3, r0
 800c31c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	b21b      	sxth	r3, r3
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <lv_obj_get_style_height>:
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800c334:	2204      	movs	r2, #4
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fb0b 	bl	800c954 <lv_obj_get_style_prop>
 800c33e:	4603      	mov	r3, r0
 800c340:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	b21b      	sxth	r3, r3
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <lv_obj_get_style_transform_zoom>:
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800c358:	226c      	movs	r2, #108	; 0x6c
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 faf9 	bl	800c954 <lv_obj_get_style_prop>
 800c362:	4603      	mov	r3, r0
 800c364:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	b21b      	sxth	r3, r3
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <lv_obj_get_style_transform_angle>:
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800c37c:	226d      	movs	r2, #109	; 0x6d
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fae7 	bl	800c954 <lv_obj_get_style_prop>
 800c386:	4603      	mov	r3, r0
 800c388:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	b21b      	sxth	r3, r3
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <lv_obj_get_style_text_align>:
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b084      	sub	sp, #16
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800c3a0:	225b      	movs	r2, #91	; 0x5b
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fad5 	bl	800c954 <lv_obj_get_style_prop>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	60fb      	str	r3, [r7, #12]
    return (lv_text_align_t)v.num;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	b2db      	uxtb	r3, r3
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <lv_obj_get_style_opa>:
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800c3c4:	2260      	movs	r2, #96	; 0x60
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fac3 	bl	800c954 <lv_obj_get_style_prop>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	b2db      	uxtb	r3, r3
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <lv_obj_get_style_color_filter_dsc>:
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b084      	sub	sp, #16
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800c3e8:	2261      	movs	r2, #97	; 0x61
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fab1 	bl	800c954 <lv_obj_get_style_prop>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	60fb      	str	r3, [r7, #12]
    return (const lv_color_filter_dsc_t *)v.ptr;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <lv_obj_get_style_color_filter_opa>:
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800c40a:	2262      	movs	r2, #98	; 0x62
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 faa0 	bl	800c954 <lv_obj_get_style_prop>
 800c414:	4603      	mov	r3, r0
 800c416:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	b2db      	uxtb	r3, r3
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <lv_obj_get_style_blend_mode>:
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800c42e:	2267      	movs	r2, #103	; 0x67
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fa8e 	bl	800c954 <lv_obj_get_style_prop>
 800c438:	4603      	mov	r3, r0
 800c43a:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	b2db      	uxtb	r3, r3
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <lv_obj_get_style_base_dir>:
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800c452:	2216      	movs	r2, #22
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa7c 	bl	800c954 <lv_obj_get_style_prop>
 800c45c:	4603      	mov	r3, r0
 800c45e:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	b2db      	uxtb	r3, r3
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <_lv_obj_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_obj_style_init(void)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800c470:	2114      	movs	r1, #20
 800c472:	4802      	ldr	r0, [pc, #8]	; (800c47c <_lv_obj_style_init+0x10>)
 800c474:	f015 f9d9 	bl	802182a <_lv_ll_init>
}
 800c478:	bf00      	nop
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	200008b0 	.word	0x200008b0

0800c480 <lv_obj_add_style>:

void lv_obj_add_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800c48c:	2300      	movs	r3, #0
 800c48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f001 f9a1 	bl	800d7dc <trans_del>

    uint32_t i;
    /*Go after the transition and local styles*/
    for(i = 0; i < obj->style_cnt; i++) {
 800c49a:	2300      	movs	r3, #0
 800c49c:	617b      	str	r3, [r7, #20]
 800c49e:	e01a      	b.n	800c4d6 <lv_obj_add_style+0x56>
        if(obj->styles[i].is_trans) continue;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	68da      	ldr	r2, [r3, #12]
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	00db      	lsls	r3, r3, #3
 800c4a8:	4413      	add	r3, r2
 800c4aa:	79db      	ldrb	r3, [r3, #7]
 800c4ac:	f003 0302 	and.w	r3, r3, #2
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10b      	bne.n	800c4ce <lv_obj_add_style+0x4e>
        if(obj->styles[i].is_local) continue;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	68da      	ldr	r2, [r3, #12]
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	4413      	add	r3, r2
 800c4c0:	79db      	ldrb	r3, [r3, #7]
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00e      	beq.n	800c4ea <lv_obj_add_style+0x6a>
 800c4cc:	e000      	b.n	800c4d0 <lv_obj_add_style+0x50>
        if(obj->styles[i].is_trans) continue;
 800c4ce:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	617b      	str	r3, [r7, #20]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c4da:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d3db      	bcc.n	800c4a0 <lv_obj_add_style+0x20>
 800c4e8:	e000      	b.n	800c4ec <lv_obj_add_style+0x6c>
        break;
 800c4ea:	bf00      	nop
    }

    /*Now `i` is at the first normal style. Insert the new style before this*/

    /*Allocate space for the new style and shift the rest of the style to the end*/
    obj->style_cnt++;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c4f0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4fc:	b2d9      	uxtb	r1, r3
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c502:	f361 03c8 	bfi	r3, r1, #3, #6
 800c506:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	68da      	ldr	r2, [r3, #12]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c510:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c514:	b2db      	uxtb	r3, r3
 800c516:	00db      	lsls	r3, r3, #3
 800c518:	4619      	mov	r1, r3
 800c51a:	4610      	mov	r0, r2
 800c51c:	f015 fc80 	bl	8021e20 <lv_mem_realloc>
 800c520:	4602      	mov	r2, r0
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	60da      	str	r2, [r3, #12]

    uint32_t j;
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c52a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	3b01      	subs	r3, #1
 800c532:	613b      	str	r3, [r7, #16]
 800c534:	e014      	b.n	800c560 <lv_obj_add_style+0xe0>
        obj->styles[j] = obj->styles[j - 1];
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	68da      	ldr	r2, [r3, #12]
 800c53a:	6939      	ldr	r1, [r7, #16]
 800c53c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c540:	440b      	add	r3, r1
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	18d1      	adds	r1, r2, r3
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68da      	ldr	r2, [r3, #12]
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	4413      	add	r3, r2
 800c550:	460a      	mov	r2, r1
 800c552:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c556:	e883 0003 	stmia.w	r3, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	613b      	str	r3, [r7, #16]
 800c560:	693a      	ldr	r2, [r7, #16]
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	429a      	cmp	r2, r3
 800c566:	d8e6      	bhi.n	800c536 <lv_obj_add_style+0xb6>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	68da      	ldr	r2, [r3, #12]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	4413      	add	r3, r2
 800c572:	2108      	movs	r1, #8
 800c574:	4618      	mov	r0, r3
 800c576:	f016 f829 	bl	80225cc <lv_memset_00>
    obj->styles[i].style = style;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	68da      	ldr	r2, [r3, #12]
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	00db      	lsls	r3, r3, #3
 800c582:	4413      	add	r3, r2
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	601a      	str	r2, [r3, #0]
    obj->styles[i].selector = selector;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	68da      	ldr	r2, [r3, #12]
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	00db      	lsls	r3, r3, #3
 800c590:	441a      	add	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800c598:	6853      	ldr	r3, [r2, #4]
 800c59a:	f361 0317 	bfi	r3, r1, #0, #24
 800c59e:	6053      	str	r3, [r2, #4]

    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 800c5a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f000 f8fa 	bl	800c7a0 <lv_obj_refresh_style>
}
 800c5ac:	bf00      	nop
 800c5ae:	3718      	adds	r7, #24
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <lv_obj_remove_style>:

void lv_obj_remove_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08c      	sub	sp, #48	; 0x30
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
    lv_state_t state = lv_obj_style_get_selector_state(selector);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fe35 	bl	800d230 <lv_obj_style_get_selector_state>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	83fb      	strh	r3, [r7, #30]
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fe3c 	bl	800d248 <lv_obj_style_get_selector_part>
 800c5d0:	61b8      	str	r0, [r7, #24]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800c5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c5d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d005      	beq.n	800c5ea <lv_obj_remove_style+0x36>
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	7adb      	ldrb	r3, [r3, #11]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d101      	bne.n	800c5ea <lv_obj_remove_style+0x36>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint32_t i = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	62bb      	str	r3, [r7, #40]	; 0x28
    bool deleted = false;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800c5f4:	e0b9      	b.n	800c76a <lv_obj_remove_style+0x1b6>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	68da      	ldr	r2, [r3, #12]
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	4413      	add	r3, r2
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fe12 	bl	800d230 <lv_obj_style_get_selector_state>
 800c60c:	4603      	mov	r3, r0
 800c60e:	82fb      	strh	r3, [r7, #22]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	68da      	ldr	r2, [r3, #12]
 800c614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c616:	00db      	lsls	r3, r3, #3
 800c618:	4413      	add	r3, r2
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c620:	4618      	mov	r0, r3
 800c622:	f000 fe11 	bl	800d248 <lv_obj_style_get_selector_part>
 800c626:	6138      	str	r0, [r7, #16]
        if((state != LV_STATE_ANY && state_act != state) ||
 800c628:	8bfb      	ldrh	r3, [r7, #30]
 800c62a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c62e:	4293      	cmp	r3, r2
 800c630:	d003      	beq.n	800c63a <lv_obj_remove_style+0x86>
 800c632:	8afa      	ldrh	r2, [r7, #22]
 800c634:	8bfb      	ldrh	r3, [r7, #30]
 800c636:	429a      	cmp	r2, r3
 800c638:	d113      	bne.n	800c662 <lv_obj_remove_style+0xae>
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c640:	d003      	beq.n	800c64a <lv_obj_remove_style+0x96>
           (part != LV_PART_ANY && part_act != part) ||
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	429a      	cmp	r2, r3
 800c648:	d10b      	bne.n	800c662 <lv_obj_remove_style+0xae>
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00c      	beq.n	800c66a <lv_obj_remove_style+0xb6>
           (style != NULL && style != obj->styles[i].style)) {
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	68da      	ldr	r2, [r3, #12]
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	4413      	add	r3, r2
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d003      	beq.n	800c66a <lv_obj_remove_style+0xb6>
            i++;
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	3301      	adds	r3, #1
 800c666:	62bb      	str	r3, [r7, #40]	; 0x28
            continue;
 800c668:	e07f      	b.n	800c76a <lv_obj_remove_style+0x1b6>
        }

        if(obj->styles[i].is_trans) {
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68da      	ldr	r2, [r3, #12]
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	00db      	lsls	r3, r3, #3
 800c672:	4413      	add	r3, r2
 800c674:	79db      	ldrb	r3, [r3, #7]
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d006      	beq.n	800c68e <lv_obj_remove_style+0xda>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800c680:	2300      	movs	r3, #0
 800c682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c686:	69b9      	ldr	r1, [r7, #24]
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f001 f8a7 	bl	800d7dc <trans_del>
        }

        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	68da      	ldr	r2, [r3, #12]
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	00db      	lsls	r3, r3, #3
 800c696:	4413      	add	r3, r2
 800c698:	79db      	ldrb	r3, [r3, #7]
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10a      	bne.n	800c6ba <lv_obj_remove_style+0x106>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	68da      	ldr	r2, [r3, #12]
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	00db      	lsls	r3, r3, #3
 800c6ac:	4413      	add	r3, r2
 800c6ae:	79db      	ldrb	r3, [r3, #7]
 800c6b0:	f003 0302 	and.w	r3, r3, #2
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d018      	beq.n	800c6ec <lv_obj_remove_style+0x138>
            lv_style_reset(obj->styles[i].style);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	68da      	ldr	r2, [r3, #12]
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	00db      	lsls	r3, r3, #3
 800c6c2:	4413      	add	r3, r2
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f016 f994 	bl	80229f4 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	68da      	ldr	r2, [r3, #12]
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	4413      	add	r3, r2
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f015 fb73 	bl	8021dc4 <lv_mem_free>
            obj->styles[i].style = NULL;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	68da      	ldr	r2, [r3, #12]
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	4413      	add	r3, r2
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
        }

        /*Shift the styles after `i` by one*/
        uint32_t j;
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	623b      	str	r3, [r7, #32]
 800c6f0:	e012      	b.n	800c718 <lv_obj_remove_style+0x164>
            obj->styles[j] = obj->styles[j + 1];
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	68da      	ldr	r2, [r3, #12]
 800c6f6:	6a3b      	ldr	r3, [r7, #32]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	00db      	lsls	r3, r3, #3
 800c6fc:	18d1      	adds	r1, r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	68da      	ldr	r2, [r3, #12]
 800c702:	6a3b      	ldr	r3, [r7, #32]
 800c704:	00db      	lsls	r3, r3, #3
 800c706:	4413      	add	r3, r2
 800c708:	460a      	mov	r2, r1
 800c70a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c70e:	e883 0003 	stmia.w	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	3301      	adds	r3, #1
 800c716:	623b      	str	r3, [r7, #32]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c71c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c720:	b2db      	uxtb	r3, r3
 800c722:	3b01      	subs	r3, #1
 800c724:	6a3a      	ldr	r2, [r7, #32]
 800c726:	429a      	cmp	r2, r3
 800c728:	d3e3      	bcc.n	800c6f2 <lv_obj_remove_style+0x13e>
        }

        obj->style_cnt--;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c72e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c732:	b2db      	uxtb	r3, r3
 800c734:	333f      	adds	r3, #63	; 0x3f
 800c736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c73a:	b2d9      	uxtb	r1, r3
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c740:	f361 03c8 	bfi	r3, r1, #3, #6
 800c744:	8453      	strh	r3, [r2, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68da      	ldr	r2, [r3, #12]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c74e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c752:	b2db      	uxtb	r3, r3
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	4619      	mov	r1, r3
 800c758:	4610      	mov	r0, r2
 800c75a:	f015 fb61 	bl	8021e20 <lv_mem_realloc>
 800c75e:	4602      	mov	r2, r0
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	60da      	str	r2, [r3, #12]

        deleted = true;
 800c764:	2301      	movs	r3, #1
 800c766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c76e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c772:	b2db      	uxtb	r3, r3
 800c774:	461a      	mov	r2, r3
 800c776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c778:	4293      	cmp	r3, r2
 800c77a:	f4ff af3c 	bcc.w	800c5f6 <lv_obj_remove_style+0x42>
        /*The style from the current `i` index is removed, so `i` points to the next style.
         *Therefore it doesn't needs to be incremented*/
    }
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800c77e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c782:	2b00      	cmp	r3, #0
 800c784:	d008      	beq.n	800c798 <lv_obj_remove_style+0x1e4>
 800c786:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <lv_obj_remove_style+0x1e4>
        lv_obj_refresh_style(obj, part, prop);
 800c78c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c78e:	461a      	mov	r2, r3
 800c790:	69b9      	ldr	r1, [r7, #24]
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f000 f804 	bl	800c7a0 <lv_obj_refresh_style>
    }
}
 800c798:	bf00      	nop
 800c79a:	3730      	adds	r7, #48	; 0x30
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <lv_obj_refresh_style>:
        d = lv_disp_get_next(d);
    }
}

void lv_obj_refresh_style(lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b088      	sub	sp, #32
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	80fb      	strh	r3, [r7, #6]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!style_refr) return;
 800c7ae:	4b60      	ldr	r3, [pc, #384]	; (800c930 <lv_obj_refresh_style+0x190>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f083 0301 	eor.w	r3, r3, #1
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f040 80b4 	bne.w	800c926 <lv_obj_refresh_style+0x186>

    lv_obj_invalidate(obj);
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7fc ff7f 	bl	80096c2 <lv_obj_invalidate>

    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800c7c4:	68b8      	ldr	r0, [r7, #8]
 800c7c6:	f000 fd3f 	bl	800d248 <lv_obj_style_get_selector_part>
 800c7ca:	61f8      	str	r0, [r7, #28]

    bool is_layout_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYOUT_REFR);
 800c7cc:	88fb      	ldrh	r3, [r7, #6]
 800c7ce:	2104      	movs	r1, #4
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fd7e 	bl	800c2d2 <lv_style_prop_has_flag>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	76fb      	strb	r3, [r7, #27]
    bool is_ext_draw = lv_style_prop_has_flag(prop, LV_STYLE_PROP_EXT_DRAW);
 800c7da:	88fb      	ldrh	r3, [r7, #6]
 800c7dc:	2102      	movs	r1, #2
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7ff fd77 	bl	800c2d2 <lv_style_prop_has_flag>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	76bb      	strb	r3, [r7, #26]
    bool is_inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800c7e8:	88fb      	ldrh	r3, [r7, #6]
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7ff fd70 	bl	800c2d2 <lv_style_prop_has_flag>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	767b      	strb	r3, [r7, #25]
    bool is_layer_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYER_REFR);
 800c7f6:	88fb      	ldrh	r3, [r7, #6]
 800c7f8:	2110      	movs	r1, #16
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff fd69 	bl	800c2d2 <lv_style_prop_has_flag>
 800c800:	4603      	mov	r3, r0
 800c802:	763b      	strb	r3, [r7, #24]

    if(is_layout_refr) {
 800c804:	7efb      	ldrb	r3, [r7, #27]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d022      	beq.n	800c850 <lv_obj_refresh_style+0xb0>
        if(part == LV_PART_ANY ||
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c810:	d016      	beq.n	800c840 <lv_obj_refresh_style+0xa0>
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d013      	beq.n	800c840 <lv_obj_refresh_style+0xa0>
           part == LV_PART_MAIN ||
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800c818:	2100      	movs	r1, #0
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f7ff fd85 	bl	800c32a <lv_obj_get_style_height>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
           part == LV_PART_MAIN ||
 800c824:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800c828:	429a      	cmp	r2, r3
 800c82a:	d009      	beq.n	800c840 <lv_obj_refresh_style+0xa0>
           lv_obj_get_style_width(obj, 0) == LV_SIZE_CONTENT) {
 800c82c:	2100      	movs	r1, #0
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7ff fd69 	bl	800c306 <lv_obj_get_style_width>
 800c834:	4603      	mov	r3, r0
 800c836:	461a      	mov	r2, r3
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800c838:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d107      	bne.n	800c850 <lv_obj_refresh_style+0xb0>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800c840:	2200      	movs	r2, #0
 800c842:	212a      	movs	r1, #42	; 0x2a
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7f8 f987 	bl	8004b58 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7fc f90c 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
        }
    }
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c856:	d002      	beq.n	800c85e <lv_obj_refresh_style+0xbe>
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d111      	bne.n	800c882 <lv_obj_refresh_style+0xe2>
 800c85e:	88fb      	ldrh	r3, [r7, #6]
 800c860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c864:	4293      	cmp	r3, r2
 800c866:	d002      	beq.n	800c86e <lv_obj_refresh_style+0xce>
 800c868:	7efb      	ldrb	r3, [r7, #27]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d009      	beq.n	800c882 <lv_obj_refresh_style+0xe2>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f001 fb7c 	bl	800df6c <lv_obj_get_parent>
 800c874:	6178      	str	r0, [r7, #20]
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <lv_obj_refresh_style+0xe2>
 800c87c:	6978      	ldr	r0, [r7, #20]
 800c87e:	f7fc f8f3 	bl	8008a68 <lv_obj_mark_layout_as_dirty>
    }

    /*Cache the layer type*/
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c888:	d002      	beq.n	800c890 <lv_obj_refresh_style+0xf0>
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d126      	bne.n	800c8de <lv_obj_refresh_style+0x13e>
 800c890:	7e3b      	ldrb	r3, [r7, #24]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d023      	beq.n	800c8de <lv_obj_refresh_style+0x13e>
        lv_layer_type_t layer_type = calculate_layer_type(obj);
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f001 fa66 	bl	800dd68 <calculate_layer_type>
 800c89c:	4603      	mov	r3, r0
 800c89e:	74fb      	strb	r3, [r7, #19]
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00a      	beq.n	800c8be <lv_obj_refresh_style+0x11e>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	689a      	ldr	r2, [r3, #8]
 800c8ac:	7cfb      	ldrb	r3, [r7, #19]
 800c8ae:	f003 0303 	and.w	r3, r3, #3
 800c8b2:	b2d9      	uxtb	r1, r3
 800c8b4:	7e93      	ldrb	r3, [r2, #26]
 800c8b6:	f361 1387 	bfi	r3, r1, #6, #2
 800c8ba:	7693      	strb	r3, [r2, #26]
 800c8bc:	e00f      	b.n	800c8de <lv_obj_refresh_style+0x13e>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800c8be:	7cfb      	ldrb	r3, [r7, #19]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00c      	beq.n	800c8de <lv_obj_refresh_style+0x13e>
            lv_obj_allocate_spec_attr(obj);
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7f9 fb69 	bl	8005f9c <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	689a      	ldr	r2, [r3, #8]
 800c8ce:	7cfb      	ldrb	r3, [r7, #19]
 800c8d0:	f003 0303 	and.w	r3, r3, #3
 800c8d4:	b2d9      	uxtb	r1, r3
 800c8d6:	7e93      	ldrb	r3, [r2, #26]
 800c8d8:	f361 1387 	bfi	r3, r1, #6, #2
 800c8dc:	7693      	strb	r3, [r2, #26]
        }
    }

    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800c8de:	88fb      	ldrh	r3, [r7, #6]
 800c8e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d002      	beq.n	800c8ee <lv_obj_refresh_style+0x14e>
 800c8e8:	7ebb      	ldrb	r3, [r7, #26]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d002      	beq.n	800c8f4 <lv_obj_refresh_style+0x154>
        lv_obj_refresh_ext_draw_size(obj);
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f7fb fbb2 	bl	8008058 <lv_obj_refresh_ext_draw_size>
    }
    lv_obj_invalidate(obj);
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f7fc fee4 	bl	80096c2 <lv_obj_invalidate>

    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800c8fa:	88fb      	ldrh	r3, [r7, #6]
 800c8fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c900:	4293      	cmp	r3, r2
 800c902:	d008      	beq.n	800c916 <lv_obj_refresh_style+0x176>
 800c904:	7e7b      	ldrb	r3, [r7, #25]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00e      	beq.n	800c928 <lv_obj_refresh_style+0x188>
 800c90a:	7ebb      	ldrb	r3, [r7, #26]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d102      	bne.n	800c916 <lv_obj_refresh_style+0x176>
 800c910:	7efb      	ldrb	r3, [r7, #27]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d008      	beq.n	800c928 <lv_obj_refresh_style+0x188>
        if(part != LV_PART_SCROLLBAR) {
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c91c:	d004      	beq.n	800c928 <lv_obj_refresh_style+0x188>
            refresh_children_style(obj);
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f000 ff2e 	bl	800d780 <refresh_children_style>
 800c924:	e000      	b.n	800c928 <lv_obj_refresh_style+0x188>
    if(!style_refr) return;
 800c926:	bf00      	nop
        }
    }
}
 800c928:	3720      	adds	r7, #32
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	2000000d 	.word	0x2000000d

0800c934 <lv_obj_enable_style_refresh>:

void lv_obj_enable_style_refresh(bool en)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	4603      	mov	r3, r0
 800c93c:	71fb      	strb	r3, [r7, #7]
    style_refr = en;
 800c93e:	4a04      	ldr	r2, [pc, #16]	; (800c950 <lv_obj_enable_style_refresh+0x1c>)
 800c940:	79fb      	ldrb	r3, [r7, #7]
 800c942:	7013      	strb	r3, [r2, #0]
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	2000000d 	.word	0x2000000d

0800c954 <lv_obj_get_style_prop>:

lv_style_value_t lv_obj_get_style_prop(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	4613      	mov	r3, r2
 800c960:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value_act;
    bool inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800c962:	88fb      	ldrh	r3, [r7, #6]
 800c964:	2101      	movs	r1, #1
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff fcb3 	bl	800c2d2 <lv_style_prop_has_flag>
 800c96c:	4603      	mov	r3, r0
 800c96e:	75fb      	strb	r3, [r7, #23]
    lv_style_res_t found = LV_STYLE_RES_NOT_FOUND;
 800c970:	2300      	movs	r3, #0
 800c972:	77fb      	strb	r3, [r7, #31]
    while(obj) {
 800c974:	e01e      	b.n	800c9b4 <lv_obj_get_style_prop+0x60>
        found = get_prop_core(obj, part, prop, &value_act);
 800c976:	f107 0310 	add.w	r3, r7, #16
 800c97a:	88fa      	ldrh	r2, [r7, #6]
 800c97c:	68b9      	ldr	r1, [r7, #8]
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f000 fdfa 	bl	800d578 <get_prop_core>
 800c984:	4603      	mov	r3, r0
 800c986:	77fb      	strb	r3, [r7, #31]
        if(found == LV_STYLE_RES_FOUND) break;
 800c988:	7ffb      	ldrb	r3, [r7, #31]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d016      	beq.n	800c9bc <lv_obj_get_style_prop+0x68>
        if(!inheritable) break;
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	f083 0301 	eor.w	r3, r3, #1
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	d112      	bne.n	800c9c0 <lv_obj_get_style_prop+0x6c>

        /*If not found, check the `MAIN` style first*/
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800c99a:	7ffb      	ldrb	r3, [r7, #31]
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d005      	beq.n	800c9ac <lv_obj_get_style_prop+0x58>
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <lv_obj_get_style_prop+0x58>
            part = LV_PART_MAIN;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60bb      	str	r3, [r7, #8]
            continue;
 800c9aa:	e003      	b.n	800c9b4 <lv_obj_get_style_prop+0x60>
        }

        /*Check the parent too.*/
        obj = lv_obj_get_parent(obj);
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f001 fadd 	bl	800df6c <lv_obj_get_parent>
 800c9b2:	60f8      	str	r0, [r7, #12]
    while(obj) {
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1dd      	bne.n	800c976 <lv_obj_get_style_prop+0x22>
 800c9ba:	e002      	b.n	800c9c2 <lv_obj_get_style_prop+0x6e>
        if(found == LV_STYLE_RES_FOUND) break;
 800c9bc:	bf00      	nop
 800c9be:	e000      	b.n	800c9c2 <lv_obj_get_style_prop+0x6e>
        if(!inheritable) break;
 800c9c0:	bf00      	nop
    }

    if(found != LV_STYLE_RES_FOUND) {
 800c9c2:	7ffb      	ldrb	r3, [r7, #31]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d03a      	beq.n	800ca3e <lv_obj_get_style_prop+0xea>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d131      	bne.n	800ca32 <lv_obj_get_style_prop+0xde>
 800c9ce:	88fb      	ldrh	r3, [r7, #6]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d002      	beq.n	800c9da <lv_obj_get_style_prop+0x86>
 800c9d4:	88fb      	ldrh	r3, [r7, #6]
 800c9d6:	2b04      	cmp	r3, #4
 800c9d8:	d12b      	bne.n	800ca32 <lv_obj_get_style_prop+0xde>
            const lv_obj_class_t * cls = obj->class_p;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800c9e0:	e010      	b.n	800ca04 <lv_obj_get_style_prop+0xb0>
                if(prop == LV_STYLE_WIDTH) {
 800c9e2:	88fb      	ldrh	r3, [r7, #6]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d105      	bne.n	800c9f4 <lv_obj_get_style_prop+0xa0>
                    if(cls->width_def != 0) break;
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <lv_obj_get_style_prop+0xaa>
 800c9f2:	e00c      	b.n	800ca0e <lv_obj_get_style_prop+0xba>
                }
                else {
                    if(cls->height_def != 0) break;
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <lv_obj_get_style_prop+0xb8>
                }
                cls = cls->base_class;
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1eb      	bne.n	800c9e2 <lv_obj_get_style_prop+0x8e>
 800ca0a:	e000      	b.n	800ca0e <lv_obj_get_style_prop+0xba>
                    if(cls->height_def != 0) break;
 800ca0c:	bf00      	nop
            }

            if(cls) {
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00b      	beq.n	800ca2c <lv_obj_get_style_prop+0xd8>
                value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800ca14:	88fb      	ldrh	r3, [r7, #6]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d103      	bne.n	800ca22 <lv_obj_get_style_prop+0xce>
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ca20:	e002      	b.n	800ca28 <lv_obj_get_style_prop+0xd4>
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800ca28:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800ca2a:	e008      	b.n	800ca3e <lv_obj_get_style_prop+0xea>
            }
            else {
                value_act.num = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800ca30:	e005      	b.n	800ca3e <lv_obj_get_style_prop+0xea>
            }
        }
        else {
            value_act = lv_style_prop_get_default(prop);
 800ca32:	88fb      	ldrh	r3, [r7, #6]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f016 f901 	bl	8022c3c <lv_style_prop_get_default>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	613b      	str	r3, [r7, #16]
        }
    }
    return value_act;
 800ca3e:	693b      	ldr	r3, [r7, #16]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3720      	adds	r7, #32
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <lv_obj_set_local_style_prop>:

void lv_obj_set_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t value,
                                 lv_style_selector_t selector)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	607a      	str	r2, [r7, #4]
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	460b      	mov	r3, r1
 800ca56:	817b      	strh	r3, [r7, #10]
    lv_style_t * style = get_local_style(obj, selector);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 fc20 	bl	800d2a0 <get_local_style>
 800ca60:	6178      	str	r0, [r7, #20]
    lv_style_set_prop(style, prop, value);
 800ca62:	897b      	ldrh	r3, [r7, #10]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	4619      	mov	r1, r3
 800ca68:	6978      	ldr	r0, [r7, #20]
 800ca6a:	f016 f8c1 	bl	8022bf0 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 800ca6e:	897b      	ldrh	r3, [r7, #10]
 800ca70:	461a      	mov	r2, r3
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f7ff fe93 	bl	800c7a0 <lv_obj_refresh_style>
}
 800ca7a:	bf00      	nop
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <lv_obj_get_local_style_prop>:
}


lv_style_res_t lv_obj_get_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t * value,
                                           lv_style_selector_t selector)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b086      	sub	sp, #24
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	60f8      	str	r0, [r7, #12]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	603b      	str	r3, [r7, #0]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	817b      	strh	r3, [r7, #10]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800ca92:	2300      	movs	r3, #0
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e026      	b.n	800cae6 <lv_obj_get_local_style_prop+0x64>
        if(obj->styles[i].is_local &&
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	68da      	ldr	r2, [r3, #12]
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	00db      	lsls	r3, r3, #3
 800caa0:	4413      	add	r3, r2
 800caa2:	79db      	ldrb	r3, [r3, #7]
 800caa4:	f003 0301 	and.w	r3, r3, #1
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d018      	beq.n	800cae0 <lv_obj_get_local_style_prop+0x5e>
           obj->styles[i].selector == selector) {
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68da      	ldr	r2, [r3, #12]
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	00db      	lsls	r3, r3, #3
 800cab6:	4413      	add	r3, r2
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800cabe:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d10c      	bne.n	800cae0 <lv_obj_get_local_style_prop+0x5e>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	68da      	ldr	r2, [r3, #12]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	4413      	add	r3, r2
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	8979      	ldrh	r1, [r7, #10]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f016 f89e 	bl	8022c18 <lv_style_get_prop>
 800cadc:	4603      	mov	r3, r0
 800cade:	e00c      	b.n	800cafa <lv_obj_get_local_style_prop+0x78>
    for(i = 0; i < obj->style_cnt; i++) {
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	3301      	adds	r3, #1
 800cae4:	617b      	str	r3, [r7, #20]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800caea:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	461a      	mov	r2, r3
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d3cf      	bcc.n	800ca98 <lv_obj_get_local_style_prop+0x16>
        }
    }

    return LV_STYLE_RES_NOT_FOUND;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <lv_obj_remove_local_style_prop>:

bool lv_obj_remove_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_selector_t selector)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b086      	sub	sp, #24
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	607a      	str	r2, [r7, #4]
 800cb0e:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    uint32_t i;
    /*Find the style*/
    for(i = 0; i < obj->style_cnt; i++) {
 800cb10:	2300      	movs	r3, #0
 800cb12:	617b      	str	r3, [r7, #20]
 800cb14:	e019      	b.n	800cb4a <lv_obj_remove_local_style_prop+0x48>
        if(obj->styles[i].is_local &&
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	68da      	ldr	r2, [r3, #12]
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	4413      	add	r3, r2
 800cb20:	79db      	ldrb	r3, [r3, #7]
 800cb22:	f003 0301 	and.w	r3, r3, #1
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00b      	beq.n	800cb44 <lv_obj_remove_local_style_prop+0x42>
           obj->styles[i].selector == selector) {
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	68da      	ldr	r2, [r3, #12]
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	4413      	add	r3, r2
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800cb3c:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d00c      	beq.n	800cb5e <lv_obj_remove_local_style_prop+0x5c>
    for(i = 0; i < obj->style_cnt; i++) {
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	3301      	adds	r3, #1
 800cb48:	617b      	str	r3, [r7, #20]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cb4e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	461a      	mov	r2, r3
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d3dc      	bcc.n	800cb16 <lv_obj_remove_local_style_prop+0x14>
 800cb5c:	e000      	b.n	800cb60 <lv_obj_remove_local_style_prop+0x5e>
            break;
 800cb5e:	bf00      	nop
        }
    }

    /*The style is not found*/
    if(i == obj->style_cnt) return false;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cb64:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d101      	bne.n	800cb76 <lv_obj_remove_local_style_prop+0x74>
 800cb72:	2300      	movs	r3, #0
 800cb74:	e01b      	b.n	800cbae <lv_obj_remove_local_style_prop+0xac>

    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	68da      	ldr	r2, [r3, #12]
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	4413      	add	r3, r2
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	897a      	ldrh	r2, [r7, #10]
 800cb84:	4611      	mov	r1, r2
 800cb86:	4618      	mov	r0, r3
 800cb88:	f015 ff60 	bl	8022a4c <lv_style_remove_prop>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	74fb      	strb	r3, [r7, #19]
    if(res == LV_RES_OK) {
 800cb90:	7cfb      	ldrb	r3, [r7, #19]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d105      	bne.n	800cba2 <lv_obj_remove_local_style_prop+0xa0>
        lv_obj_refresh_style(obj, selector, prop);
 800cb96:	897b      	ldrh	r3, [r7, #10]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f7ff fdff 	bl	800c7a0 <lv_obj_refresh_style>
    }

    return res;
 800cba2:	7cfb      	ldrb	r3, [r7, #19]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bf14      	ite	ne
 800cba8:	2301      	movne	r3, #1
 800cbaa:	2300      	moveq	r3, #0
 800cbac:	b2db      	uxtb	r3, r3
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
	...

0800cbb8 <_lv_obj_style_create_transition>:

void _lv_obj_style_create_transition(lv_obj_t * obj, lv_part_t part, lv_state_t prev_state, lv_state_t new_state,
                                     const _lv_obj_style_transition_dsc_t * tr_dsc)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b09a      	sub	sp, #104	; 0x68
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	80fb      	strh	r3, [r7, #6]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	80bb      	strh	r3, [r7, #4]
    trans_t * tr;

    /*Get the previous and current values*/
    obj->skip_trans = 1;
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800cbd4:	f043 0304 	orr.w	r3, r3, #4
 800cbd8:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    obj->state = prev_state;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	88fa      	ldrh	r2, [r7, #6]
 800cbe0:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800cbe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbe4:	891b      	ldrh	r3, [r3, #8]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f7ff feb2 	bl	800c954 <lv_obj_get_style_prop>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	88ba      	ldrh	r2, [r7, #4]
 800cbf8:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800cbfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbfc:	891b      	ldrh	r3, [r3, #8]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff fea6 	bl	800c954 <lv_obj_get_style_prop>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	657b      	str	r3, [r7, #84]	; 0x54
    obj->skip_trans = 0;
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800cc12:	f36f 0382 	bfc	r3, #2, #1
 800cc16:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800cc1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d10a      	bne.n	800cc38 <_lv_obj_style_create_transition+0x80>
 800cc22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d106      	bne.n	800cc38 <_lv_obj_style_create_transition+0x80>
 800cc2a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800cc2e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cc32:	429a      	cmp	r2, r3
 800cc34:	f000 80cc 	beq.w	800cdd0 <_lv_obj_style_create_transition+0x218>
    obj->state = prev_state;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	88fa      	ldrh	r2, [r7, #6]
 800cc3c:	841a      	strh	r2, [r3, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800cc3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc40:	891b      	ldrh	r3, [r3, #8]
 800cc42:	461a      	mov	r2, r3
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7ff fe84 	bl	800c954 <lv_obj_get_style_prop>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	88ba      	ldrh	r2, [r7, #4]
 800cc54:	841a      	strh	r2, [r3, #32]

    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f000 fbec 	bl	800d436 <get_trans_style>
 800cc5e:	6678      	str	r0, [r7, #100]	; 0x64
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800cc60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc62:	6818      	ldr	r0, [r3, #0]
 800cc64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc66:	891b      	ldrh	r3, [r3, #8]
 800cc68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	f015 ffc0 	bl	8022bf0 <lv_style_set_prop>

    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800cc70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc72:	891b      	ldrh	r3, [r3, #8]
 800cc74:	2b0b      	cmp	r3, #11
 800cc76:	d143      	bne.n	800cd00 <_lv_obj_style_create_transition+0x148>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800cc78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d004      	beq.n	800cc8c <_lv_obj_style_create_transition+0xd4>
 800cc82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d139      	bne.n	800cd00 <_lv_obj_style_create_transition+0x148>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7fb ff4e 	bl	8008b2e <lv_obj_get_width>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	da00      	bge.n	800cc9a <_lv_obj_style_create_transition+0xe2>
 800cc98:	3301      	adds	r3, #1
 800cc9a:	105b      	asrs	r3, r3, #1
 800cc9c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f7fb ff52 	bl	8008b4a <lv_obj_get_height>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	da00      	bge.n	800ccae <_lv_obj_style_create_transition+0xf6>
 800ccac:	3301      	adds	r3, #1
 800ccae:	105b      	asrs	r3, r3, #1
 800ccb0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800ccb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccb6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d10d      	bne.n	800ccda <_lv_obj_style_create_transition+0x122>
 800ccbe:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800ccc2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	da03      	bge.n	800ccd2 <_lv_obj_style_create_transition+0x11a>
 800ccca:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ccce:	3301      	adds	r3, #1
 800ccd0:	e002      	b.n	800ccd8 <_lv_obj_style_create_transition+0x120>
 800ccd2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	65bb      	str	r3, [r7, #88]	; 0x58
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800ccda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccdc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d10d      	bne.n	800cd00 <_lv_obj_style_create_transition+0x148>
 800cce4:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800cce8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800ccec:	429a      	cmp	r2, r3
 800ccee:	da03      	bge.n	800ccf8 <_lv_obj_style_create_transition+0x140>
 800ccf0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	e002      	b.n	800ccfe <_lv_obj_style_create_transition+0x146>
 800ccf8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800cd00:	4836      	ldr	r0, [pc, #216]	; (800cddc <_lv_obj_style_create_transition+0x224>)
 800cd02:	f014 fdab 	bl	802185c <_lv_ll_ins_head>
 800cd06:	65f8      	str	r0, [r7, #92]	; 0x5c
    LV_ASSERT_MALLOC(tr);
 800cd08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d100      	bne.n	800cd10 <_lv_obj_style_create_transition+0x158>
 800cd0e:	e7fe      	b.n	800cd0e <_lv_obj_style_create_transition+0x156>
    if(tr == NULL) return;
 800cd10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d05e      	beq.n	800cdd4 <_lv_obj_style_create_transition+0x21c>
    tr->start_value = v1;
 800cd16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd1a:	60da      	str	r2, [r3, #12]
    tr->end_value = v2;
 800cd1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd20:	611a      	str	r2, [r3, #16]
    tr->obj = obj;
 800cd22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	601a      	str	r2, [r3, #0]
    tr->prop = tr_dsc->prop;
 800cd28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd2a:	891a      	ldrh	r2, [r3, #8]
 800cd2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd2e:	809a      	strh	r2, [r3, #4]
    tr->selector = part;
 800cd30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	609a      	str	r2, [r3, #8]

    lv_anim_t a;
    lv_anim_init(&a);
 800cd36:	f107 0310 	add.w	r3, r7, #16
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f013 f908 	bl	801ff50 <lv_anim_init>
    lv_anim_set_var(&a, tr);
 800cd40:	f107 0310 	add.w	r3, r7, #16
 800cd44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff fa24 	bl	800c194 <lv_anim_set_var>
    lv_anim_set_exec_cb(&a, trans_anim_cb);
 800cd4c:	f107 0310 	add.w	r3, r7, #16
 800cd50:	4923      	ldr	r1, [pc, #140]	; (800cde0 <_lv_obj_style_create_transition+0x228>)
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff fa2c 	bl	800c1b0 <lv_anim_set_exec_cb>
    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 800cd58:	f107 0310 	add.w	r3, r7, #16
 800cd5c:	4921      	ldr	r1, [pc, #132]	; (800cde4 <_lv_obj_style_create_transition+0x22c>)
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff fa74 	bl	800c24c <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 800cd64:	f107 0310 	add.w	r3, r7, #16
 800cd68:	491f      	ldr	r1, [pc, #124]	; (800cde8 <_lv_obj_style_create_transition+0x230>)
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7ff fa7c 	bl	800c268 <lv_anim_set_ready_cb>
    lv_anim_set_values(&a, 0x00, 0xFF);
 800cd70:	f107 0310 	add.w	r3, r7, #16
 800cd74:	22ff      	movs	r2, #255	; 0xff
 800cd76:	2100      	movs	r1, #0
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7ff fa44 	bl	800c206 <lv_anim_set_values>
    lv_anim_set_time(&a, tr_dsc->time);
 800cd7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	461a      	mov	r2, r3
 800cd84:	f107 0310 	add.w	r3, r7, #16
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7ff fa1e 	bl	800c1cc <lv_anim_set_time>
    lv_anim_set_delay(&a, tr_dsc->delay);
 800cd90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd92:	885b      	ldrh	r3, [r3, #2]
 800cd94:	461a      	mov	r2, r3
 800cd96:	f107 0310 	add.w	r3, r7, #16
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff fa23 	bl	800c1e8 <lv_anim_set_delay>
    lv_anim_set_path_cb(&a, tr_dsc->path_cb);
 800cda2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cda4:	68da      	ldr	r2, [r3, #12]
 800cda6:	f107 0310 	add.w	r3, r7, #16
 800cdaa:	4611      	mov	r1, r2
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7ff fa3f 	bl	800c230 <lv_anim_set_path_cb>
    lv_anim_set_early_apply(&a, false);
 800cdb2:	f107 0310 	add.w	r3, r7, #16
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff fa63 	bl	800c284 <lv_anim_set_early_apply>
#if LV_USE_USER_DATA
    a.user_data = tr_dsc->user_data;
 800cdbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdc0:	691b      	ldr	r3, [r3, #16]
 800cdc2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    lv_anim_start(&a);
 800cdc4:	f107 0310 	add.w	r3, r7, #16
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f013 f8e7 	bl	801ff9c <lv_anim_start>
 800cdce:	e002      	b.n	800cdd6 <_lv_obj_style_create_transition+0x21e>
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800cdd0:	bf00      	nop
 800cdd2:	e000      	b.n	800cdd6 <_lv_obj_style_create_transition+0x21e>
    if(tr == NULL) return;
 800cdd4:	bf00      	nop
}
 800cdd6:	3768      	adds	r7, #104	; 0x68
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	200008b0 	.word	0x200008b0
 800cde0:	0800d8e1 	.word	0x0800d8e1
 800cde4:	0800dbc1 	.word	0x0800dbc1
 800cde8:	0800dc39 	.word	0x0800dc39

0800cdec <_lv_obj_style_apply_color_filter>:


lv_style_value_t _lv_obj_style_apply_color_filter(const lv_obj_t * obj, uint32_t part, lv_style_value_t v)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
    if(obj == NULL) return v;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d101      	bne.n	800ce02 <_lv_obj_style_apply_color_filter+0x16>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	e01c      	b.n	800ce3c <_lv_obj_style_apply_color_filter+0x50>
    const lv_color_filter_dsc_t * f = lv_obj_get_style_color_filter_dsc(obj, part);
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff faea 	bl	800c3de <lv_obj_get_style_color_filter_dsc>
 800ce0a:	6178      	str	r0, [r7, #20]
    if(f && f->filter_cb) {
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d013      	beq.n	800ce3a <_lv_obj_style_apply_color_filter+0x4e>
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00f      	beq.n	800ce3a <_lv_obj_style_apply_color_filter+0x4e>
        lv_opa_t f_opa = lv_obj_get_style_color_filter_opa(obj, part);
 800ce1a:	68b9      	ldr	r1, [r7, #8]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f7ff faef 	bl	800c400 <lv_obj_get_style_color_filter_opa>
 800ce22:	4603      	mov	r3, r0
 800ce24:	74fb      	strb	r3, [r7, #19]
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800ce26:	7cfb      	ldrb	r3, [r7, #19]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d006      	beq.n	800ce3a <_lv_obj_style_apply_color_filter+0x4e>
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	7cfa      	ldrb	r2, [r7, #19]
 800ce32:	7939      	ldrb	r1, [r7, #4]
 800ce34:	6978      	ldr	r0, [r7, #20]
 800ce36:	4798      	blx	r3
 800ce38:	7138      	strb	r0, [r7, #4]
    }
    return v;
 800ce3a:	687b      	ldr	r3, [r7, #4]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <_lv_obj_style_state_compare>:

_lv_style_state_cmp_t _lv_obj_style_state_compare(lv_obj_t * obj, lv_state_t state1, lv_state_t state2)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b088      	sub	sp, #32
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	807b      	strh	r3, [r7, #2]
 800ce50:	4613      	mov	r3, r2
 800ce52:	803b      	strh	r3, [r7, #0]
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800ce54:	2300      	movs	r3, #0
 800ce56:	77fb      	strb	r3, [r7, #31]

    /*Are there any new styles for the new state?*/
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800ce58:	2300      	movs	r3, #0
 800ce5a:	61bb      	str	r3, [r7, #24]
 800ce5c:	e1d9      	b.n	800d212 <_lv_obj_style_state_compare+0x3ce>
        if(obj->styles[i].is_trans) continue;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	68da      	ldr	r2, [r3, #12]
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	4413      	add	r3, r2
 800ce68:	79db      	ldrb	r3, [r3, #7]
 800ce6a:	f003 0302 	and.w	r3, r3, #2
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f040 81ca 	bne.w	800d20a <_lv_obj_style_state_compare+0x3c6>

        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68da      	ldr	r2, [r3, #12]
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	4413      	add	r3, r2
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 f9d2 	bl	800d230 <lv_obj_style_get_selector_state>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	82bb      	strh	r3, [r7, #20]
        /*The style is valid for a state but not the other*/
        bool valid1 = state_act & (~state1) ? false : true;
 800ce90:	8aba      	ldrh	r2, [r7, #20]
 800ce92:	887b      	ldrh	r3, [r7, #2]
 800ce94:	43db      	mvns	r3, r3
 800ce96:	4013      	ands	r3, r2
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	bf0c      	ite	eq
 800ce9c:	2301      	moveq	r3, #1
 800ce9e:	2300      	movne	r3, #0
 800cea0:	74fb      	strb	r3, [r7, #19]
        bool valid2 = state_act & (~state2) ? false : true;
 800cea2:	8aba      	ldrh	r2, [r7, #20]
 800cea4:	883b      	ldrh	r3, [r7, #0]
 800cea6:	43db      	mvns	r3, r3
 800cea8:	4013      	ands	r3, r2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bf0c      	ite	eq
 800ceae:	2301      	moveq	r3, #1
 800ceb0:	2300      	movne	r3, #0
 800ceb2:	74bb      	strb	r3, [r7, #18]
        if(valid1 != valid2) {
 800ceb4:	7cfa      	ldrb	r2, [r7, #19]
 800ceb6:	7cbb      	ldrb	r3, [r7, #18]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	f000 81a7 	beq.w	800d20c <_lv_obj_style_state_compare+0x3c8>
            lv_style_t * style = obj->styles[i].style;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68da      	ldr	r2, [r3, #12]
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	00db      	lsls	r3, r3, #3
 800cec6:	4413      	add	r3, r2
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	60fb      	str	r3, [r7, #12]
            lv_style_value_t v;
            /*If there is layout difference on the main part, return immediately. There is no more serious difference*/
            bool layout_diff = false;
 800cecc:	2300      	movs	r3, #0
 800cece:	75fb      	strb	r3, [r7, #23]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800ced0:	f107 0308 	add.w	r3, r7, #8
 800ced4:	461a      	mov	r2, r3
 800ced6:	2110      	movs	r1, #16
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f015 fe9d 	bl	8022c18 <lv_style_get_prop>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <_lv_obj_style_state_compare+0xa6>
 800cee4:	2301      	movs	r3, #1
 800cee6:	75fb      	strb	r3, [r7, #23]
 800cee8:	e0db      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800ceea:	f107 0308 	add.w	r3, r7, #8
 800ceee:	461a      	mov	r2, r3
 800cef0:	2111      	movs	r1, #17
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f015 fe90 	bl	8022c18 <lv_style_get_prop>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d002      	beq.n	800cf04 <_lv_obj_style_state_compare+0xc0>
 800cefe:	2301      	movs	r3, #1
 800cf00:	75fb      	strb	r3, [r7, #23]
 800cf02:	e0ce      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800cf04:	f107 0308 	add.w	r3, r7, #8
 800cf08:	461a      	mov	r2, r3
 800cf0a:	2112      	movs	r1, #18
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f015 fe83 	bl	8022c18 <lv_style_get_prop>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <_lv_obj_style_state_compare+0xda>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	75fb      	strb	r3, [r7, #23]
 800cf1c:	e0c1      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800cf1e:	f107 0308 	add.w	r3, r7, #8
 800cf22:	461a      	mov	r2, r3
 800cf24:	2113      	movs	r1, #19
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f015 fe76 	bl	8022c18 <lv_style_get_prop>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d002      	beq.n	800cf38 <_lv_obj_style_state_compare+0xf4>
 800cf32:	2301      	movs	r3, #1
 800cf34:	75fb      	strb	r3, [r7, #23]
 800cf36:	e0b4      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800cf38:	f107 0308 	add.w	r3, r7, #8
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	2115      	movs	r1, #21
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f015 fe69 	bl	8022c18 <lv_style_get_prop>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <_lv_obj_style_state_compare+0x10e>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	75fb      	strb	r3, [r7, #23]
 800cf50:	e0a7      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800cf52:	f107 0308 	add.w	r3, r7, #8
 800cf56:	461a      	mov	r2, r3
 800cf58:	2114      	movs	r1, #20
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f015 fe5c 	bl	8022c18 <lv_style_get_prop>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d002      	beq.n	800cf6c <_lv_obj_style_state_compare+0x128>
 800cf66:	2301      	movs	r3, #1
 800cf68:	75fb      	strb	r3, [r7, #23]
 800cf6a:	e09a      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800cf6c:	f107 0308 	add.w	r3, r7, #8
 800cf70:	461a      	mov	r2, r3
 800cf72:	210a      	movs	r1, #10
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f015 fe4f 	bl	8022c18 <lv_style_get_prop>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <_lv_obj_style_state_compare+0x142>
 800cf80:	2301      	movs	r3, #1
 800cf82:	75fb      	strb	r3, [r7, #23]
 800cf84:	e08d      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800cf86:	f107 0308 	add.w	r3, r7, #8
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	216a      	movs	r1, #106	; 0x6a
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f015 fe42 	bl	8022c18 <lv_style_get_prop>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d002      	beq.n	800cfa0 <_lv_obj_style_state_compare+0x15c>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	75fb      	strb	r3, [r7, #23]
 800cf9e:	e080      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800cfa0:	f107 0308 	add.w	r3, r7, #8
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	216b      	movs	r1, #107	; 0x6b
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f015 fe35 	bl	8022c18 <lv_style_get_prop>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <_lv_obj_style_state_compare+0x176>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	75fb      	strb	r3, [r7, #23]
 800cfb8:	e073      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800cfba:	f107 0308 	add.w	r3, r7, #8
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f015 fe28 	bl	8022c18 <lv_style_get_prop>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <_lv_obj_style_state_compare+0x190>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	75fb      	strb	r3, [r7, #23]
 800cfd2:	e066      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800cfd4:	f107 0308 	add.w	r3, r7, #8
 800cfd8:	461a      	mov	r2, r3
 800cfda:	2104      	movs	r1, #4
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f015 fe1b 	bl	8022c18 <lv_style_get_prop>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <_lv_obj_style_state_compare+0x1aa>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	75fb      	strb	r3, [r7, #23]
 800cfec:	e059      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800cfee:	f107 0308 	add.w	r3, r7, #8
 800cff2:	461a      	mov	r2, r3
 800cff4:	2102      	movs	r1, #2
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f015 fe0e 	bl	8022c18 <lv_style_get_prop>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <_lv_obj_style_state_compare+0x1c4>
 800d002:	2301      	movs	r3, #1
 800d004:	75fb      	strb	r3, [r7, #23]
 800d006:	e04c      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800d008:	f107 0308 	add.w	r3, r7, #8
 800d00c:	461a      	mov	r2, r3
 800d00e:	2103      	movs	r1, #3
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f015 fe01 	bl	8022c18 <lv_style_get_prop>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <_lv_obj_style_state_compare+0x1de>
 800d01c:	2301      	movs	r3, #1
 800d01e:	75fb      	strb	r3, [r7, #23]
 800d020:	e03f      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800d022:	f107 0308 	add.w	r3, r7, #8
 800d026:	461a      	mov	r2, r3
 800d028:	2105      	movs	r1, #5
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f015 fdf4 	bl	8022c18 <lv_style_get_prop>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <_lv_obj_style_state_compare+0x1f8>
 800d036:	2301      	movs	r3, #1
 800d038:	75fb      	strb	r3, [r7, #23]
 800d03a:	e032      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800d03c:	f107 0308 	add.w	r3, r7, #8
 800d040:	461a      	mov	r2, r3
 800d042:	2106      	movs	r1, #6
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f015 fde7 	bl	8022c18 <lv_style_get_prop>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <_lv_obj_style_state_compare+0x212>
 800d050:	2301      	movs	r3, #1
 800d052:	75fb      	strb	r3, [r7, #23]
 800d054:	e025      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800d056:	f107 0308 	add.w	r3, r7, #8
 800d05a:	461a      	mov	r2, r3
 800d05c:	2132      	movs	r1, #50	; 0x32
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f015 fdda 	bl	8022c18 <lv_style_get_prop>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <_lv_obj_style_state_compare+0x22c>
 800d06a:	2301      	movs	r3, #1
 800d06c:	75fb      	strb	r3, [r7, #23]
 800d06e:	e018      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800d070:	f107 0308 	add.w	r3, r7, #8
 800d074:	461a      	mov	r2, r3
 800d076:	216d      	movs	r1, #109	; 0x6d
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f015 fdcd 	bl	8022c18 <lv_style_get_prop>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d002      	beq.n	800d08a <_lv_obj_style_state_compare+0x246>
 800d084:	2301      	movs	r3, #1
 800d086:	75fb      	strb	r3, [r7, #23]
 800d088:	e00b      	b.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800d08a:	f107 0308 	add.w	r3, r7, #8
 800d08e:	461a      	mov	r2, r3
 800d090:	216c      	movs	r1, #108	; 0x6c
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f015 fdc0 	bl	8022c18 <lv_style_get_prop>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d001      	beq.n	800d0a2 <_lv_obj_style_state_compare+0x25e>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	75fb      	strb	r3, [r7, #23]

            if(layout_diff) {
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <_lv_obj_style_state_compare+0x268>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e0bd      	b.n	800d228 <_lv_obj_style_state_compare+0x3e4>
            }

            /*Check for draw pad changes*/
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d0ac:	f107 0308 	add.w	r3, r7, #8
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	2168      	movs	r1, #104	; 0x68
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f015 fdaf 	bl	8022c18 <lv_style_get_prop>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d002      	beq.n	800d0c6 <_lv_obj_style_state_compare+0x282>
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	77fb      	strb	r3, [r7, #31]
 800d0c4:	e0a2      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d0c6:	f107 0308 	add.w	r3, r7, #8
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	2169      	movs	r1, #105	; 0x69
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f015 fda2 	bl	8022c18 <lv_style_get_prop>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d002      	beq.n	800d0e0 <_lv_obj_style_state_compare+0x29c>
 800d0da:	2302      	movs	r3, #2
 800d0dc:	77fb      	strb	r3, [r7, #31]
 800d0de:	e095      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d0e0:	f107 0308 	add.w	r3, r7, #8
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	216d      	movs	r1, #109	; 0x6d
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f015 fd95 	bl	8022c18 <lv_style_get_prop>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <_lv_obj_style_state_compare+0x2b6>
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	77fb      	strb	r3, [r7, #31]
 800d0f8:	e088      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d0fa:	f107 0308 	add.w	r3, r7, #8
 800d0fe:	461a      	mov	r2, r3
 800d100:	216c      	movs	r1, #108	; 0x6c
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f015 fd88 	bl	8022c18 <lv_style_get_prop>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d002      	beq.n	800d114 <_lv_obj_style_state_compare+0x2d0>
 800d10e:	2302      	movs	r3, #2
 800d110:	77fb      	strb	r3, [r7, #31]
 800d112:	e07b      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d114:	f107 0308 	add.w	r3, r7, #8
 800d118:	461a      	mov	r2, r3
 800d11a:	2137      	movs	r1, #55	; 0x37
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f015 fd7b 	bl	8022c18 <lv_style_get_prop>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <_lv_obj_style_state_compare+0x2ea>
 800d128:	2302      	movs	r3, #2
 800d12a:	77fb      	strb	r3, [r7, #31]
 800d12c:	e06e      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d12e:	f107 0308 	add.w	r3, r7, #8
 800d132:	461a      	mov	r2, r3
 800d134:	2138      	movs	r1, #56	; 0x38
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f015 fd6e 	bl	8022c18 <lv_style_get_prop>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d002      	beq.n	800d148 <_lv_obj_style_state_compare+0x304>
 800d142:	2302      	movs	r3, #2
 800d144:	77fb      	strb	r3, [r7, #31]
 800d146:	e061      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d148:	f107 0308 	add.w	r3, r7, #8
 800d14c:	461a      	mov	r2, r3
 800d14e:	2135      	movs	r1, #53	; 0x35
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f015 fd61 	bl	8022c18 <lv_style_get_prop>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <_lv_obj_style_state_compare+0x31e>
 800d15c:	2302      	movs	r3, #2
 800d15e:	77fb      	strb	r3, [r7, #31]
 800d160:	e054      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d162:	f107 0308 	add.w	r3, r7, #8
 800d166:	461a      	mov	r2, r3
 800d168:	2140      	movs	r1, #64	; 0x40
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f015 fd54 	bl	8022c18 <lv_style_get_prop>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <_lv_obj_style_state_compare+0x338>
 800d176:	2302      	movs	r3, #2
 800d178:	77fb      	strb	r3, [r7, #31]
 800d17a:	e047      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d17c:	f107 0308 	add.w	r3, r7, #8
 800d180:	461a      	mov	r2, r3
 800d182:	2145      	movs	r1, #69	; 0x45
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f015 fd47 	bl	8022c18 <lv_style_get_prop>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <_lv_obj_style_state_compare+0x352>
 800d190:	2302      	movs	r3, #2
 800d192:	77fb      	strb	r3, [r7, #31]
 800d194:	e03a      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d196:	f107 0308 	add.w	r3, r7, #8
 800d19a:	461a      	mov	r2, r3
 800d19c:	2141      	movs	r1, #65	; 0x41
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f015 fd3a 	bl	8022c18 <lv_style_get_prop>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <_lv_obj_style_state_compare+0x36c>
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	77fb      	strb	r3, [r7, #31]
 800d1ae:	e02d      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d1b0:	f107 0308 	add.w	r3, r7, #8
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2142      	movs	r1, #66	; 0x42
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f015 fd2d 	bl	8022c18 <lv_style_get_prop>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <_lv_obj_style_state_compare+0x386>
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	77fb      	strb	r3, [r7, #31]
 800d1c8:	e020      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d1ca:	f107 0308 	add.w	r3, r7, #8
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	2143      	movs	r1, #67	; 0x43
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f015 fd20 	bl	8022c18 <lv_style_get_prop>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <_lv_obj_style_state_compare+0x3a0>
 800d1de:	2302      	movs	r3, #2
 800d1e0:	77fb      	strb	r3, [r7, #31]
 800d1e2:	e013      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d1e4:	f107 0308 	add.w	r3, r7, #8
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	2149      	movs	r1, #73	; 0x49
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f015 fd13 	bl	8022c18 <lv_style_get_prop>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <_lv_obj_style_state_compare+0x3ba>
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	77fb      	strb	r3, [r7, #31]
 800d1fc:	e006      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800d1fe:	7ffb      	ldrb	r3, [r7, #31]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d103      	bne.n	800d20c <_lv_obj_style_state_compare+0x3c8>
 800d204:	2301      	movs	r3, #1
 800d206:	77fb      	strb	r3, [r7, #31]
 800d208:	e000      	b.n	800d20c <_lv_obj_style_state_compare+0x3c8>
        if(obj->styles[i].is_trans) continue;
 800d20a:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	3301      	adds	r3, #1
 800d210:	61bb      	str	r3, [r7, #24]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d216:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	461a      	mov	r2, r3
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	4293      	cmp	r3, r2
 800d222:	f4ff ae1c 	bcc.w	800ce5e <_lv_obj_style_state_compare+0x1a>
        }
    }

    return res;
 800d226:	7ffb      	ldrb	r3, [r7, #31]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3720      	adds	r7, #32
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <lv_obj_style_get_selector_state>:
    lv_anim_set_delay(&a, delay);
    lv_anim_start(&a);
}

lv_state_t lv_obj_style_get_selector_state(lv_style_selector_t selector)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
    return selector & 0xFFFF;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	b29b      	uxth	r3, r3
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <lv_obj_style_get_selector_part>:

lv_part_t lv_obj_style_get_selector_part(lv_style_selector_t selector)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
    return selector & 0xFF0000;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
 800d256:	4618      	mov	r0, r3
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <lv_obj_calculate_style_text_align>:


lv_text_align_t lv_obj_calculate_style_text_align(const struct _lv_obj_t * obj, lv_part_t part, const char * txt)
{
 800d262:	b580      	push	{r7, lr}
 800d264:	b086      	sub	sp, #24
 800d266:	af00      	add	r7, sp, #0
 800d268:	60f8      	str	r0, [r7, #12]
 800d26a:	60b9      	str	r1, [r7, #8]
 800d26c:	607a      	str	r2, [r7, #4]
    lv_text_align_t align = lv_obj_get_style_text_align(obj, part);
 800d26e:	68b9      	ldr	r1, [r7, #8]
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f7ff f890 	bl	800c396 <lv_obj_get_style_text_align>
 800d276:	4603      	mov	r3, r0
 800d278:	75fb      	strb	r3, [r7, #23]
    lv_base_dir_t base_dir = lv_obj_get_style_base_dir(obj, part);
 800d27a:	68b9      	ldr	r1, [r7, #8]
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f7ff f8e3 	bl	800c448 <lv_obj_get_style_base_dir>
 800d282:	4603      	mov	r3, r0
 800d284:	75bb      	strb	r3, [r7, #22]
    lv_bidi_calculate_align(&align, &base_dir, txt);
 800d286:	f107 0116 	add.w	r1, r7, #22
 800d28a:	f107 0317 	add.w	r3, r7, #23
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	4618      	mov	r0, r3
 800d292:	f7ff f80b 	bl	800c2ac <lv_bidi_calculate_align>
    return align;
 800d296:	7dfb      	ldrb	r3, [r7, #23]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <get_local_style>:
 * @param obj pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the local style
 */
static lv_style_t * get_local_style(lv_obj_t * obj, lv_style_selector_t selector)
{
 800d2a0:	b590      	push	{r4, r7, lr}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	e020      	b.n	800d2f2 <get_local_style+0x52>
        if(obj->styles[i].is_local &&
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68da      	ldr	r2, [r3, #12]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	4413      	add	r3, r2
 800d2ba:	79db      	ldrb	r3, [r3, #7]
 800d2bc:	f003 0301 	and.w	r3, r3, #1
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d012      	beq.n	800d2ec <get_local_style+0x4c>
           obj->styles[i].selector == selector) {
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68da      	ldr	r2, [r3, #12]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	00db      	lsls	r3, r3, #3
 800d2ce:	4413      	add	r3, r2
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d2d6:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d106      	bne.n	800d2ec <get_local_style+0x4c>
            return obj->styles[i].style;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	68da      	ldr	r2, [r3, #12]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	4413      	add	r3, r2
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	e0a0      	b.n	800d42e <get_local_style+0x18e>
    for(i = 0; i < obj->style_cnt; i++) {
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	60fb      	str	r3, [r7, #12]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d2f6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	4293      	cmp	r3, r2
 800d302:	d3d5      	bcc.n	800d2b0 <get_local_style+0x10>
        }
    }

    obj->style_cnt++;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d308:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	3301      	adds	r3, #1
 800d310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d314:	b2d9      	uxtb	r1, r3
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800d31a:	f361 03c8 	bfi	r3, r1, #3, #6
 800d31e:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68da      	ldr	r2, [r3, #12]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d328:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	00db      	lsls	r3, r3, #3
 800d330:	4619      	mov	r1, r3
 800d332:	4610      	mov	r0, r2
 800d334:	f014 fd74 	bl	8021e20 <lv_mem_realloc>
 800d338:	4602      	mov	r2, r0
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	60da      	str	r2, [r3, #12]
    LV_ASSERT_MALLOC(obj->styles);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d100      	bne.n	800d348 <get_local_style+0xa8>
 800d346:	e7fe      	b.n	800d346 <get_local_style+0xa6>

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d34c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d350:	b2db      	uxtb	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	60fb      	str	r3, [r7, #12]
 800d356:	e030      	b.n	800d3ba <get_local_style+0x11a>
        /*Copy only normal styles (not local and transition).
         *The new local style will be added as the last local style*/
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	68da      	ldr	r2, [r3, #12]
 800d35c:	68f9      	ldr	r1, [r7, #12]
 800d35e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d362:	440b      	add	r3, r1
 800d364:	00db      	lsls	r3, r3, #3
 800d366:	4413      	add	r3, r2
 800d368:	79db      	ldrb	r3, [r3, #7]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d125      	bne.n	800d3c0 <get_local_style+0x120>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68da      	ldr	r2, [r3, #12]
 800d378:	68f9      	ldr	r1, [r7, #12]
 800d37a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d37e:	440b      	add	r3, r1
 800d380:	00db      	lsls	r3, r3, #3
 800d382:	4413      	add	r3, r2
 800d384:	79db      	ldrb	r3, [r3, #7]
 800d386:	f003 0302 	and.w	r3, r3, #2
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d117      	bne.n	800d3c0 <get_local_style+0x120>
        obj->styles[i] = obj->styles[i - 1];
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	68da      	ldr	r2, [r3, #12]
 800d394:	68f9      	ldr	r1, [r7, #12]
 800d396:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d39a:	440b      	add	r3, r1
 800d39c:	00db      	lsls	r3, r3, #3
 800d39e:	18d1      	adds	r1, r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68da      	ldr	r2, [r3, #12]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	00db      	lsls	r3, r3, #3
 800d3a8:	4413      	add	r3, r2
 800d3aa:	460a      	mov	r2, r1
 800d3ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3b0:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1cb      	bne.n	800d358 <get_local_style+0xb8>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	68da      	ldr	r2, [r3, #12]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	4413      	add	r3, r2
 800d3ca:	2108      	movs	r1, #8
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f015 f8fd 	bl	80225cc <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68da      	ldr	r2, [r3, #12]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	00db      	lsls	r3, r3, #3
 800d3da:	18d4      	adds	r4, r2, r3
 800d3dc:	200c      	movs	r0, #12
 800d3de:	f014 fcc1 	bl	8021d64 <lv_mem_alloc>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[i].style);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	68da      	ldr	r2, [r3, #12]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	00db      	lsls	r3, r3, #3
 800d3ee:	4413      	add	r3, r2
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f015 fae8 	bl	80229c8 <lv_style_init>
    obj->styles[i].is_local = 1;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68da      	ldr	r2, [r3, #12]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	441a      	add	r2, r3
 800d402:	79d3      	ldrb	r3, [r2, #7]
 800d404:	f043 0301 	orr.w	r3, r3, #1
 800d408:	71d3      	strb	r3, [r2, #7]
    obj->styles[i].selector = selector;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68da      	ldr	r2, [r3, #12]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	00db      	lsls	r3, r3, #3
 800d412:	441a      	add	r2, r3
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d41a:	6853      	ldr	r3, [r2, #4]
 800d41c:	f361 0317 	bfi	r3, r1, #0, #24
 800d420:	6053      	str	r3, [r2, #4]
    return obj->styles[i].style;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68da      	ldr	r2, [r3, #12]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	00db      	lsls	r3, r3, #3
 800d42a:	4413      	add	r3, r2
 800d42c:	681b      	ldr	r3, [r3, #0]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	bd90      	pop	{r4, r7, pc}

0800d436 <get_trans_style>:
 * @param obj   pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the transition style
 */
static _lv_obj_style_t * get_trans_style(lv_obj_t * obj,  lv_style_selector_t selector)
{
 800d436:	b590      	push	{r4, r7, lr}
 800d438:	b085      	sub	sp, #20
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d440:	2300      	movs	r3, #0
 800d442:	60fb      	str	r3, [r7, #12]
 800d444:	e019      	b.n	800d47a <get_trans_style+0x44>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	68da      	ldr	r2, [r3, #12]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	4413      	add	r3, r2
 800d450:	79db      	ldrb	r3, [r3, #7]
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	b2db      	uxtb	r3, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00b      	beq.n	800d474 <get_trans_style+0x3e>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	68da      	ldr	r2, [r3, #12]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	4413      	add	r3, r2
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d46c:	461a      	mov	r2, r3
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	4293      	cmp	r3, r2
 800d472:	d00c      	beq.n	800d48e <get_trans_style+0x58>
    for(i = 0; i < obj->style_cnt; i++) {
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	3301      	adds	r3, #1
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d47e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d482:	b2db      	uxtb	r3, r3
 800d484:	461a      	mov	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	4293      	cmp	r3, r2
 800d48a:	d3dc      	bcc.n	800d446 <get_trans_style+0x10>
 800d48c:	e000      	b.n	800d490 <get_trans_style+0x5a>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800d48e:	bf00      	nop
    }

    /*Already have a transition style for it*/
    if(i != obj->style_cnt) return &obj->styles[i];
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d494:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	461a      	mov	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d005      	beq.n	800d4ae <get_trans_style+0x78>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	68da      	ldr	r2, [r3, #12]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	00db      	lsls	r3, r3, #3
 800d4aa:	4413      	add	r3, r2
 800d4ac:	e060      	b.n	800d570 <get_trans_style+0x13a>

    obj->style_cnt++;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d4b2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4be:	b2d9      	uxtb	r1, r3
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800d4c4:	f361 03c8 	bfi	r3, r1, #3, #6
 800d4c8:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d4d2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	4619      	mov	r1, r3
 800d4dc:	4610      	mov	r0, r2
 800d4de:	f014 fc9f 	bl	8021e20 <lv_mem_realloc>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	60da      	str	r2, [r3, #12]

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d4ec:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	e014      	b.n	800d522 <get_trans_style+0xec>
        obj->styles[i] = obj->styles[i - 1];
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	68f9      	ldr	r1, [r7, #12]
 800d4fe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d502:	440b      	add	r3, r1
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	18d1      	adds	r1, r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	68da      	ldr	r2, [r3, #12]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	4413      	add	r3, r2
 800d512:	460a      	mov	r2, r1
 800d514:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d518:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	3b01      	subs	r3, #1
 800d520:	60fb      	str	r3, [r7, #12]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1e7      	bne.n	800d4f8 <get_trans_style+0xc2>
    }

    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	2108      	movs	r1, #8
 800d52e:	4618      	mov	r0, r3
 800d530:	f015 f84c 	bl	80225cc <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	68dc      	ldr	r4, [r3, #12]
 800d538:	200c      	movs	r0, #12
 800d53a:	f014 fc13 	bl	8021d64 <lv_mem_alloc>
 800d53e:	4603      	mov	r3, r0
 800d540:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[0].style);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4618      	mov	r0, r3
 800d54a:	f015 fa3d 	bl	80229c8 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68da      	ldr	r2, [r3, #12]
 800d552:	79d3      	ldrb	r3, [r2, #7]
 800d554:	f043 0302 	orr.w	r3, r3, #2
 800d558:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68da      	ldr	r2, [r3, #12]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d564:	6853      	ldr	r3, [r2, #4]
 800d566:	f361 0317 	bfi	r3, r1, #0, #24
 800d56a:	6053      	str	r3, [r2, #4]
    return &obj->styles[0];
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68db      	ldr	r3, [r3, #12]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	bd90      	pop	{r4, r7, pc}

0800d578 <get_prop_core>:


static lv_style_res_t get_prop_core(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, lv_style_value_t * v)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b090      	sub	sp, #64	; 0x40
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	603b      	str	r3, [r7, #0]
 800d584:	4613      	mov	r3, r2
 800d586:	80fb      	strh	r3, [r7, #6]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800d588:	88fb      	ldrh	r3, [r7, #6]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f015 fc7e 	bl	8022e8c <_lv_style_get_prop_group>
 800d590:	4603      	mov	r3, r0
 800d592:	461a      	mov	r2, r3
 800d594:	2301      	movs	r3, #1
 800d596:	4093      	lsls	r3, r2
 800d598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t weight = -1;
 800d59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_state_t state = obj->state;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	8c1b      	ldrh	r3, [r3, #32]
 800d5a6:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_state_t state_inv = ~state;
 800d5a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d5aa:	43db      	mvns	r3, r3
 800d5ac:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_style_value_t value_tmp;
    bool skip_trans = obj->skip_trans;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d5b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	bf14      	ite	ne
 800d5be:	2301      	movne	r3, #1
 800d5c0:	2300      	moveq	r3, #0
 800d5c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    uint32_t i;
    lv_style_res_t found;
    for(i = 0; i < obj->style_cnt; i++) {
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5ca:	e04b      	b.n	800d664 <get_prop_core+0xec>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68da      	ldr	r2, [r3, #12]
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	4413      	add	r3, r2
 800d5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(obj_style->is_trans == false) break;
 800d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5da:	79db      	ldrb	r3, [r3, #7]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d048      	beq.n	800d678 <get_prop_core+0x100>
        if(skip_trans) continue;
 800d5e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d132      	bne.n	800d654 <get_prop_core+0xdc>

        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	68da      	ldr	r2, [r3, #12]
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f4:	00db      	lsls	r3, r3, #3
 800d5f6:	4413      	add	r3, r2
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7ff fe22 	bl	800d248 <lv_obj_style_get_selector_part>
 800d604:	62b8      	str	r0, [r7, #40]	; 0x28

        if(part_act != part) continue;
 800d606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d124      	bne.n	800d658 <get_prop_core+0xe0>
        if((obj_style->style->has_group & group) == 0) continue;
 800d60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	7a9a      	ldrb	r2, [r3, #10]
 800d614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d618:	4013      	ands	r3, r2
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01d      	beq.n	800d65c <get_prop_core+0xe4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f107 0214 	add.w	r2, r7, #20
 800d628:	88f9      	ldrh	r1, [r7, #6]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f015 faf4 	bl	8022c18 <lv_style_get_prop>
 800d630:	4603      	mov	r3, r0
 800d632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(found == LV_STYLE_RES_FOUND) {
 800d636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d104      	bne.n	800d648 <get_prop_core+0xd0>
            *v = value_tmp;
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	601a      	str	r2, [r3, #0]
            return LV_STYLE_RES_FOUND;
 800d644:	2301      	movs	r3, #1
 800d646:	e097      	b.n	800d778 <get_prop_core+0x200>
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800d648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d106      	bne.n	800d65e <get_prop_core+0xe6>
            return LV_STYLE_RES_INHERIT;
 800d650:	2302      	movs	r3, #2
 800d652:	e091      	b.n	800d778 <get_prop_core+0x200>
        if(skip_trans) continue;
 800d654:	bf00      	nop
 800d656:	e002      	b.n	800d65e <get_prop_core+0xe6>
        if(part_act != part) continue;
 800d658:	bf00      	nop
 800d65a:	e000      	b.n	800d65e <get_prop_core+0xe6>
        if((obj_style->style->has_group & group) == 0) continue;
 800d65c:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800d65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d660:	3301      	adds	r3, #1
 800d662:	63bb      	str	r3, [r7, #56]	; 0x38
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d668:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	461a      	mov	r2, r3
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	4293      	cmp	r3, r2
 800d674:	d3aa      	bcc.n	800d5cc <get_prop_core+0x54>
 800d676:	e06d      	b.n	800d754 <get_prop_core+0x1dc>
        if(obj_style->is_trans == false) break;
 800d678:	bf00      	nop
        }
    }

    for(; i < obj->style_cnt; i++) {
 800d67a:	e06b      	b.n	800d754 <get_prop_core+0x1dc>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	68da      	ldr	r2, [r3, #12]
 800d680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d682:	00db      	lsls	r3, r3, #3
 800d684:	4413      	add	r3, r2
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	7a9a      	ldrb	r2, [r3, #10]
 800d68a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d68e:	4013      	ands	r3, r2
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d054      	beq.n	800d740 <get_prop_core+0x1c8>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	00db      	lsls	r3, r3, #3
 800d69e:	4413      	add	r3, r2
 800d6a0:	623b      	str	r3, [r7, #32]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	68da      	ldr	r2, [r3, #12]
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	4413      	add	r3, r2
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7ff fdc8 	bl	800d248 <lv_obj_style_get_selector_part>
 800d6b8:	61f8      	str	r0, [r7, #28]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	68da      	ldr	r2, [r3, #12]
 800d6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c0:	00db      	lsls	r3, r3, #3
 800d6c2:	4413      	add	r3, r2
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7ff fdb0 	bl	800d230 <lv_obj_style_get_selector_state>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	837b      	strh	r3, [r7, #26]
        if(part_act != part) continue;
 800d6d4:	69fa      	ldr	r2, [r7, #28]
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d133      	bne.n	800d744 <get_prop_core+0x1cc>

        /*Be sure the style not specifies other state than the requested.
         *E.g. For HOVER+PRESS object state, HOVER style only is OK, but HOVER+FOCUS style is not*/
        if((state_act & state_inv)) continue;
 800d6dc:	8b7a      	ldrh	r2, [r7, #26]
 800d6de:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d12f      	bne.n	800d748 <get_prop_core+0x1d0>

        /*Check only better candidates*/
        if(state_act <= weight) continue;
 800d6e8:	8b7b      	ldrh	r3, [r7, #26]
 800d6ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	da2d      	bge.n	800d74c <get_prop_core+0x1d4>

        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800d6f0:	6a3b      	ldr	r3, [r7, #32]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f107 0214 	add.w	r2, r7, #20
 800d6f8:	88f9      	ldrh	r1, [r7, #6]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f015 fa8c 	bl	8022c18 <lv_style_get_prop>
 800d700:	4603      	mov	r3, r0
 800d702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(found == LV_STYLE_RES_FOUND) {
 800d706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d112      	bne.n	800d734 <get_prop_core+0x1bc>
            if(state_act == state) {
 800d70e:	8b7a      	ldrh	r2, [r7, #26]
 800d710:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d712:	429a      	cmp	r2, r3
 800d714:	d104      	bne.n	800d720 <get_prop_core+0x1a8>
                *v = value_tmp;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 800d71c:	2301      	movs	r3, #1
 800d71e:	e02b      	b.n	800d778 <get_prop_core+0x200>
            }
            if(weight < state_act) {
 800d720:	8b7b      	ldrh	r3, [r7, #26]
 800d722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d724:	429a      	cmp	r2, r3
 800d726:	da12      	bge.n	800d74e <get_prop_core+0x1d6>
                weight = state_act;
 800d728:	8b7b      	ldrh	r3, [r7, #26]
 800d72a:	63fb      	str	r3, [r7, #60]	; 0x3c
                *v = value_tmp;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	e00c      	b.n	800d74e <get_prop_core+0x1d6>
            }
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800d734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d108      	bne.n	800d74e <get_prop_core+0x1d6>
            return LV_STYLE_RES_INHERIT;
 800d73c:	2302      	movs	r3, #2
 800d73e:	e01b      	b.n	800d778 <get_prop_core+0x200>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800d740:	bf00      	nop
 800d742:	e004      	b.n	800d74e <get_prop_core+0x1d6>
        if(part_act != part) continue;
 800d744:	bf00      	nop
 800d746:	e002      	b.n	800d74e <get_prop_core+0x1d6>
        if((state_act & state_inv)) continue;
 800d748:	bf00      	nop
 800d74a:	e000      	b.n	800d74e <get_prop_core+0x1d6>
        if(state_act <= weight) continue;
 800d74c:	bf00      	nop
    for(; i < obj->style_cnt; i++) {
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	3301      	adds	r3, #1
 800d752:	63bb      	str	r3, [r7, #56]	; 0x38
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d758:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	461a      	mov	r2, r3
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	4293      	cmp	r3, r2
 800d764:	d38a      	bcc.n	800d67c <get_prop_core+0x104>
        }
    }

    if(weight >= 0) {
 800d766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d768:	2b00      	cmp	r3, #0
 800d76a:	db04      	blt.n	800d776 <get_prop_core+0x1fe>
        *v = value_tmp;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	697a      	ldr	r2, [r7, #20]
 800d770:	601a      	str	r2, [r3, #0]
        return LV_STYLE_RES_FOUND;
 800d772:	2301      	movs	r3, #1
 800d774:	e000      	b.n	800d778 <get_prop_core+0x200>
    }
    else return LV_STYLE_RES_NOT_FOUND;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3740      	adds	r7, #64	; 0x40
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fc33 	bl	800dff4 <lv_obj_get_child_cnt>
 800d78e:	6138      	str	r0, [r7, #16]
    for(i = 0; i < child_cnt; i++) {
 800d790:	2300      	movs	r3, #0
 800d792:	617b      	str	r3, [r7, #20]
 800d794:	e018      	b.n	800d7c8 <refresh_children_style+0x48>
        lv_obj_t * child = obj->spec_attr->children[i];
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4413      	add	r3, r2
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	60fb      	str	r3, [r7, #12]
        lv_obj_invalidate(child);
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f7fb ff8b 	bl	80096c2 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	212a      	movs	r1, #42	; 0x2a
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f7f7 f9d1 	bl	8004b58 <lv_event_send>
        lv_obj_invalidate(child);
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7fb ff83 	bl	80096c2 <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f7ff ffdf 	bl	800d780 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	617b      	str	r3, [r7, #20]
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d3e2      	bcc.n	800d796 <refresh_children_style+0x16>
    }
}
 800d7d0:	bf00      	nop
 800d7d2:	bf00      	nop
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
	...

0800d7dc <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	603b      	str	r3, [r7, #0]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	80fb      	strh	r3, [r7, #6]
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	76fb      	strb	r3, [r7, #27]
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800d7f0:	483a      	ldr	r0, [pc, #232]	; (800d8dc <trans_del+0x100>)
 800d7f2:	f014 f909 	bl	8021a08 <_lv_ll_get_tail>
 800d7f6:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 800d7f8:	e065      	b.n	800d8c6 <trans_del+0xea>
        if(tr == tr_limit) break;
 800d7fa:	69fa      	ldr	r2, [r7, #28]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d065      	beq.n	800d8ce <trans_del+0xf2>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800d802:	69f9      	ldr	r1, [r7, #28]
 800d804:	4835      	ldr	r0, [pc, #212]	; (800d8dc <trans_del+0x100>)
 800d806:	f014 f925 	bl	8021a54 <_lv_ll_get_prev>
 800d80a:	6138      	str	r0, [r7, #16]

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	429a      	cmp	r2, r3
 800d814:	d155      	bne.n	800d8c2 <trans_del+0xe6>
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d003      	beq.n	800d828 <trans_del+0x4c>
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800d826:	d14c      	bne.n	800d8c2 <trans_del+0xe6>
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	889b      	ldrh	r3, [r3, #4]
 800d82c:	88fa      	ldrh	r2, [r7, #6]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d004      	beq.n	800d83c <trans_del+0x60>
 800d832:	88fb      	ldrh	r3, [r7, #6]
 800d834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d838:	4293      	cmp	r3, r2
 800d83a:	d142      	bne.n	800d8c2 <trans_del+0xe6>
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
 800d83c:	2300      	movs	r3, #0
 800d83e:	617b      	str	r3, [r7, #20]
 800d840:	e029      	b.n	800d896 <trans_del+0xba>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	68da      	ldr	r2, [r3, #12]
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	4413      	add	r3, r2
 800d84c:	79db      	ldrb	r3, [r3, #7]
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b00      	cmp	r3, #0
 800d856:	d01b      	beq.n	800d890 <trans_del+0xb4>
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800d85e:	d00b      	beq.n	800d878 <trans_del+0x9c>
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	68da      	ldr	r2, [r3, #12]
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	4413      	add	r3, r2
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d870:	461a      	mov	r2, r3
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	4293      	cmp	r3, r2
 800d876:	d10b      	bne.n	800d890 <trans_del+0xb4>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	68da      	ldr	r2, [r3, #12]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	00db      	lsls	r3, r3, #3
 800d880:	4413      	add	r3, r2
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	889b      	ldrh	r3, [r3, #4]
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f015 f8de 	bl	8022a4c <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	3301      	adds	r3, #1
 800d894:	617b      	str	r3, [r7, #20]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d89a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d3cc      	bcc.n	800d842 <trans_del+0x66>
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	69f8      	ldr	r0, [r7, #28]
 800d8ac:	f012 fbee 	bl	802008c <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800d8b0:	69f9      	ldr	r1, [r7, #28]
 800d8b2:	480a      	ldr	r0, [pc, #40]	; (800d8dc <trans_del+0x100>)
 800d8b4:	f014 f83a 	bl	802192c <_lv_ll_remove>
            lv_mem_free(tr);
 800d8b8:	69f8      	ldr	r0, [r7, #28]
 800d8ba:	f014 fa83 	bl	8021dc4 <lv_mem_free>
            removed = true;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	76fb      	strb	r3, [r7, #27]

        }
        tr = tr_prev;
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d196      	bne.n	800d7fa <trans_del+0x1e>
 800d8cc:	e000      	b.n	800d8d0 <trans_del+0xf4>
        if(tr == tr_limit) break;
 800d8ce:	bf00      	nop
    }
    return removed;
 800d8d0:	7efb      	ldrb	r3, [r7, #27]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3720      	adds	r7, #32
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	200008b0 	.word	0x200008b0

0800d8e0 <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
    trans_t * tr = _tr;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	617b      	str	r3, [r7, #20]
    lv_obj_t * obj = tr->obj;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	613b      	str	r3, [r7, #16]

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	61fb      	str	r3, [r7, #28]
 800d8f8:	e152      	b.n	800dba0 <trans_anim_cb+0x2c0>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	68da      	ldr	r2, [r3, #12]
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	00db      	lsls	r3, r3, #3
 800d902:	4413      	add	r3, r2
 800d904:	79db      	ldrb	r3, [r3, #7]
 800d906:	f003 0302 	and.w	r3, r3, #2
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00c      	beq.n	800d92a <trans_anim_cb+0x4a>
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	68da      	ldr	r2, [r3, #12]
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	00db      	lsls	r3, r3, #3
 800d918:	4413      	add	r3, r2
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d920:	461a      	mov	r2, r3
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	429a      	cmp	r2, r3
 800d928:	d003      	beq.n	800d932 <trans_anim_cb+0x52>
    for(i = 0; i < obj->style_cnt; i++) {
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	3301      	adds	r3, #1
 800d92e:	61fb      	str	r3, [r7, #28]
 800d930:	e136      	b.n	800dba0 <trans_anim_cb+0x2c0>

        lv_style_value_t value_final;
        switch(tr->prop) {
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	889b      	ldrh	r3, [r3, #4]
 800d936:	3b20      	subs	r3, #32
 800d938:	2b47      	cmp	r3, #71	; 0x47
 800d93a:	f200 80dc 	bhi.w	800daf6 <trans_anim_cb+0x216>
 800d93e:	a201      	add	r2, pc, #4	; (adr r2, 800d944 <trans_anim_cb+0x64>)
 800d940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d944:	0800dac7 	.word	0x0800dac7
 800d948:	0800daf7 	.word	0x0800daf7
 800d94c:	0800daf7 	.word	0x0800daf7
 800d950:	0800daf7 	.word	0x0800daf7
 800d954:	0800daf7 	.word	0x0800daf7
 800d958:	0800daf7 	.word	0x0800daf7
 800d95c:	0800daf7 	.word	0x0800daf7
 800d960:	0800daf7 	.word	0x0800daf7
 800d964:	0800daf7 	.word	0x0800daf7
 800d968:	0800daf7 	.word	0x0800daf7
 800d96c:	0800daf7 	.word	0x0800daf7
 800d970:	0800daf7 	.word	0x0800daf7
 800d974:	0800daf7 	.word	0x0800daf7
 800d978:	0800daf7 	.word	0x0800daf7
 800d97c:	0800daf7 	.word	0x0800daf7
 800d980:	0800daf7 	.word	0x0800daf7
 800d984:	0800dac7 	.word	0x0800dac7
 800d988:	0800daf7 	.word	0x0800daf7
 800d98c:	0800daf7 	.word	0x0800daf7
 800d990:	0800da65 	.word	0x0800da65
 800d994:	0800da65 	.word	0x0800da65
 800d998:	0800daf7 	.word	0x0800daf7
 800d99c:	0800dac7 	.word	0x0800dac7
 800d9a0:	0800daf7 	.word	0x0800daf7
 800d9a4:	0800daf7 	.word	0x0800daf7
 800d9a8:	0800daf7 	.word	0x0800daf7
 800d9ac:	0800daf7 	.word	0x0800daf7
 800d9b0:	0800daf7 	.word	0x0800daf7
 800d9b4:	0800daf7 	.word	0x0800daf7
 800d9b8:	0800daf7 	.word	0x0800daf7
 800d9bc:	0800daf7 	.word	0x0800daf7
 800d9c0:	0800daf7 	.word	0x0800daf7
 800d9c4:	0800daf7 	.word	0x0800daf7
 800d9c8:	0800daf7 	.word	0x0800daf7
 800d9cc:	0800daf7 	.word	0x0800daf7
 800d9d0:	0800daf7 	.word	0x0800daf7
 800d9d4:	0800dac7 	.word	0x0800dac7
 800d9d8:	0800daf7 	.word	0x0800daf7
 800d9dc:	0800daf7 	.word	0x0800daf7
 800d9e0:	0800dac7 	.word	0x0800dac7
 800d9e4:	0800daf7 	.word	0x0800daf7
 800d9e8:	0800daf7 	.word	0x0800daf7
 800d9ec:	0800daf7 	.word	0x0800daf7
 800d9f0:	0800daf7 	.word	0x0800daf7
 800d9f4:	0800daf7 	.word	0x0800daf7
 800d9f8:	0800daf7 	.word	0x0800daf7
 800d9fc:	0800daf7 	.word	0x0800daf7
 800da00:	0800daf7 	.word	0x0800daf7
 800da04:	0800daf7 	.word	0x0800daf7
 800da08:	0800daf7 	.word	0x0800daf7
 800da0c:	0800daf7 	.word	0x0800daf7
 800da10:	0800daf7 	.word	0x0800daf7
 800da14:	0800daf7 	.word	0x0800daf7
 800da18:	0800dac7 	.word	0x0800dac7
 800da1c:	0800daf7 	.word	0x0800daf7
 800da20:	0800da7b 	.word	0x0800da7b
 800da24:	0800daf7 	.word	0x0800daf7
 800da28:	0800daf7 	.word	0x0800daf7
 800da2c:	0800daf7 	.word	0x0800daf7
 800da30:	0800daf7 	.word	0x0800daf7
 800da34:	0800daf7 	.word	0x0800daf7
 800da38:	0800daf7 	.word	0x0800daf7
 800da3c:	0800daf7 	.word	0x0800daf7
 800da40:	0800daf7 	.word	0x0800daf7
 800da44:	0800daf7 	.word	0x0800daf7
 800da48:	0800da91 	.word	0x0800da91
 800da4c:	0800daf7 	.word	0x0800daf7
 800da50:	0800daf7 	.word	0x0800daf7
 800da54:	0800daf7 	.word	0x0800daf7
 800da58:	0800daf7 	.word	0x0800daf7
 800da5c:	0800da7b 	.word	0x0800da7b
 800da60:	0800da65 	.word	0x0800da65

            case LV_STYLE_BORDER_SIDE:
            case LV_STYLE_BORDER_POST:
            case LV_STYLE_BLEND_MODE:
                if(v < 255) value_final.num = tr->start_value.num;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	2bfe      	cmp	r3, #254	; 0xfe
 800da68:	dc03      	bgt.n	800da72 <trans_anim_cb+0x192>
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	60fb      	str	r3, [r7, #12]
                else value_final.num = tr->end_value.num;
                break;
 800da70:	e05d      	b.n	800db2e <trans_anim_cb+0x24e>
                else value_final.num = tr->end_value.num;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	60fb      	str	r3, [r7, #12]
                break;
 800da78:	e059      	b.n	800db2e <trans_anim_cb+0x24e>
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2bfe      	cmp	r3, #254	; 0xfe
 800da7e:	dc03      	bgt.n	800da88 <trans_anim_cb+0x1a8>
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	60fb      	str	r3, [r7, #12]
                else value_final.ptr = tr->end_value.ptr;
                break;
 800da86:	e052      	b.n	800db2e <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	60fb      	str	r3, [r7, #12]
                break;
 800da8e:	e04e      	b.n	800db2e <trans_anim_cb+0x24e>
            case LV_STYLE_COLOR_FILTER_DSC:
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d103      	bne.n	800daa0 <trans_anim_cb+0x1c0>
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	60fb      	str	r3, [r7, #12]
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
                else value_final.ptr = tr->end_value.ptr;
                break;
 800da9e:	e046      	b.n	800db2e <trans_anim_cb+0x24e>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d103      	bne.n	800dab0 <trans_anim_cb+0x1d0>
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	60fb      	str	r3, [r7, #12]
                break;
 800daae:	e03e      	b.n	800db2e <trans_anim_cb+0x24e>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	2b7f      	cmp	r3, #127	; 0x7f
 800dab4:	dc03      	bgt.n	800dabe <trans_anim_cb+0x1de>
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	60fb      	str	r3, [r7, #12]
                break;
 800dabc:	e037      	b.n	800db2e <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	60fb      	str	r3, [r7, #12]
                break;
 800dac4:	e033      	b.n	800db2e <trans_anim_cb+0x24e>
            case LV_STYLE_BORDER_COLOR:
            case LV_STYLE_TEXT_COLOR:
            case LV_STYLE_SHADOW_COLOR:
            case LV_STYLE_OUTLINE_COLOR:
            case LV_STYLE_IMG_RECOLOR:
                if(v <= 0) value_final.color = tr->start_value.color;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dc03      	bgt.n	800dad4 <trans_anim_cb+0x1f4>
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	7b1b      	ldrb	r3, [r3, #12]
 800dad0:	733b      	strb	r3, [r7, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
                break;
 800dad2:	e02c      	b.n	800db2e <trans_anim_cb+0x24e>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	2bfe      	cmp	r3, #254	; 0xfe
 800dad8:	dd03      	ble.n	800dae2 <trans_anim_cb+0x202>
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	7c1b      	ldrb	r3, [r3, #16]
 800dade:	733b      	strb	r3, [r7, #12]
                break;
 800dae0:	e025      	b.n	800db2e <trans_anim_cb+0x24e>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	6979      	ldr	r1, [r7, #20]
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	7b09      	ldrb	r1, [r1, #12]
 800daec:	7c18      	ldrb	r0, [r3, #16]
 800daee:	f7fe fb3b 	bl	800c168 <lv_color_mix>
 800daf2:	7338      	strb	r0, [r7, #12]
                break;
 800daf4:	e01b      	b.n	800db2e <trans_anim_cb+0x24e>

            default:
                if(v == 0) value_final.num = tr->start_value.num;
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d103      	bne.n	800db04 <trans_anim_cb+0x224>
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	60fb      	str	r3, [r7, #12]
                else if(v == 255) value_final.num = tr->end_value.num;
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
                break;
 800db02:	e013      	b.n	800db2c <trans_anim_cb+0x24c>
                else if(v == 255) value_final.num = tr->end_value.num;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2bff      	cmp	r3, #255	; 0xff
 800db08:	d103      	bne.n	800db12 <trans_anim_cb+0x232>
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	60fb      	str	r3, [r7, #12]
                break;
 800db10:	e00c      	b.n	800db2c <trans_anim_cb+0x24c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	6919      	ldr	r1, [r3, #16]
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	1acb      	subs	r3, r1, r3
 800db20:	6839      	ldr	r1, [r7, #0]
 800db22:	fb01 f303 	mul.w	r3, r1, r3
 800db26:	121b      	asrs	r3, r3, #8
 800db28:	4413      	add	r3, r2
 800db2a:	60fb      	str	r3, [r7, #12]
                break;
 800db2c:	bf00      	nop
        }

        lv_style_value_t old_value;
        bool refr = true;
 800db2e:	2301      	movs	r3, #1
 800db30:	76fb      	strb	r3, [r7, #27]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	68da      	ldr	r2, [r3, #12]
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	4413      	add	r3, r2
 800db3c:	6818      	ldr	r0, [r3, #0]
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	889b      	ldrh	r3, [r3, #4]
 800db42:	f107 0208 	add.w	r2, r7, #8
 800db46:	4619      	mov	r1, r3
 800db48:	f015 f866 	bl	8022c18 <lv_style_get_prop>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00d      	beq.n	800db6e <trans_anim_cb+0x28e>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	429a      	cmp	r2, r3
 800db58:	d109      	bne.n	800db6e <trans_anim_cb+0x28e>
 800db5a:	7b3a      	ldrb	r2, [r7, #12]
 800db5c:	7a3b      	ldrb	r3, [r7, #8]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d105      	bne.n	800db6e <trans_anim_cb+0x28e>
               value_final.num == old_value.num) {
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	68bb      	ldr	r3, [r7, #8]
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800db66:	429a      	cmp	r2, r3
 800db68:	d101      	bne.n	800db6e <trans_anim_cb+0x28e>
                refr = false;
 800db6a:	2300      	movs	r3, #0
 800db6c:	76fb      	strb	r3, [r7, #27]
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	68da      	ldr	r2, [r3, #12]
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	4413      	add	r3, r2
 800db78:	6818      	ldr	r0, [r3, #0]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	889b      	ldrh	r3, [r3, #4]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	4619      	mov	r1, r3
 800db82:	f015 f835 	bl	8022bf0 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800db86:	7efb      	ldrb	r3, [r7, #27]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d014      	beq.n	800dbb6 <trans_anim_cb+0x2d6>
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	6818      	ldr	r0, [r3, #0]
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	6899      	ldr	r1, [r3, #8]
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	889b      	ldrh	r3, [r3, #4]
 800db98:	461a      	mov	r2, r3
 800db9a:	f7fe fe01 	bl	800c7a0 <lv_obj_refresh_style>
        break;

    }

}
 800db9e:	e00b      	b.n	800dbb8 <trans_anim_cb+0x2d8>
    for(i = 0; i < obj->style_cnt; i++) {
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800dba4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	461a      	mov	r2, r3
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	f4ff aea3 	bcc.w	800d8fa <trans_anim_cb+0x1a>
}
 800dbb4:	e000      	b.n	800dbb8 <trans_anim_cb+0x2d8>
        break;
 800dbb6:	bf00      	nop
}
 800dbb8:	bf00      	nop
 800dbba:	3720      	adds	r7, #32
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 800dbc0:	b590      	push	{r4, r7, lr}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	617b      	str	r3, [r7, #20]

    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff fb38 	bl	800d248 <lv_obj_style_get_selector_part>
 800dbd8:	6138      	str	r0, [r7, #16]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	6818      	ldr	r0, [r3, #0]
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	889b      	ldrh	r3, [r3, #4]
 800dbe2:	697c      	ldr	r4, [r7, #20]
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	6939      	ldr	r1, [r7, #16]
 800dbe8:	f7fe feb4 	bl	800c954 <lv_obj_get_style_prop>
 800dbec:	60e0      	str	r0, [r4, #12]

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    lv_style_prop_t prop_tmp = tr->prop;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	889b      	ldrh	r3, [r3, #4]
 800dbf2:	81fb      	strh	r3, [r7, #14]
    tr->prop = LV_STYLE_PROP_INV;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	809a      	strh	r2, [r3, #4]

    /*Delete the related transitions if any*/
    trans_del(tr->obj, part, prop_tmp, tr);
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	6818      	ldr	r0, [r3, #0]
 800dbfe:	89fa      	ldrh	r2, [r7, #14]
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	6939      	ldr	r1, [r7, #16]
 800dc04:	f7ff fdea 	bl	800d7dc <trans_del>

    tr->prop = prop_tmp;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	89fa      	ldrh	r2, [r7, #14]
 800dc0c:	809a      	strh	r2, [r3, #4]

    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	4619      	mov	r1, r3
 800dc18:	4610      	mov	r0, r2
 800dc1a:	f7ff fc0c 	bl	800d436 <get_trans_style>
 800dc1e:	60b8      	str	r0, [r7, #8]
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	6818      	ldr	r0, [r3, #0]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	8899      	ldrh	r1, [r3, #4]
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	68da      	ldr	r2, [r3, #12]
 800dc2c:	f014 ffe0 	bl	8022bf0 <lv_style_set_prop>

}
 800dc30:	bf00      	nop
 800dc32:	371c      	adds	r7, #28
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd90      	pop	{r4, r7, pc}

0800dc38 <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08a      	sub	sp, #40	; 0x28
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	61bb      	str	r3, [r7, #24]
    lv_obj_t * obj = tr->obj;
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	617b      	str	r3, [r7, #20]
    lv_style_prop_t prop = tr->prop;
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	889b      	ldrh	r3, [r3, #4]
 800dc50:	827b      	strh	r3, [r7, #18]

    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
 800dc52:	2300      	movs	r3, #0
 800dc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800dc58:	4842      	ldr	r0, [pc, #264]	; (800dd64 <trans_anim_ready_cb+0x12c>)
 800dc5a:	f013 fec4 	bl	80219e6 <_lv_ll_get_head>
 800dc5e:	6238      	str	r0, [r7, #32]
 800dc60:	e01e      	b.n	800dca0 <trans_anim_ready_cb+0x68>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800dc62:	6a3a      	ldr	r2, [r7, #32]
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d015      	beq.n	800dc96 <trans_anim_ready_cb+0x5e>
 800dc6a:	6a3b      	ldr	r3, [r7, #32]
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d10f      	bne.n	800dc96 <trans_anim_ready_cb+0x5e>
 800dc76:	6a3b      	ldr	r3, [r7, #32]
 800dc78:	689a      	ldr	r2, [r3, #8]
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d109      	bne.n	800dc96 <trans_anim_ready_cb+0x5e>
 800dc82:	6a3b      	ldr	r3, [r7, #32]
 800dc84:	889a      	ldrh	r2, [r3, #4]
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	889b      	ldrh	r3, [r3, #4]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d103      	bne.n	800dc96 <trans_anim_ready_cb+0x5e>
            running = true;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800dc94:	e007      	b.n	800dca6 <trans_anim_ready_cb+0x6e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800dc96:	6a39      	ldr	r1, [r7, #32]
 800dc98:	4832      	ldr	r0, [pc, #200]	; (800dd64 <trans_anim_ready_cb+0x12c>)
 800dc9a:	f013 fec6 	bl	8021a2a <_lv_ll_get_next>
 800dc9e:	6238      	str	r0, [r7, #32]
 800dca0:	6a3b      	ldr	r3, [r7, #32]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1dd      	bne.n	800dc62 <trans_anim_ready_cb+0x2a>
        }
    }

    if(!running) {
 800dca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcaa:	f083 0301 	eor.w	r3, r3, #1
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d053      	beq.n	800dd5c <trans_anim_ready_cb+0x124>
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	61fb      	str	r3, [r7, #28]
 800dcb8:	e045      	b.n	800dd46 <trans_anim_ready_cb+0x10e>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	68da      	ldr	r2, [r3, #12]
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	00db      	lsls	r3, r3, #3
 800dcc2:	4413      	add	r3, r2
 800dcc4:	79db      	ldrb	r3, [r3, #7]
 800dcc6:	f003 0302 	and.w	r3, r3, #2
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d037      	beq.n	800dd40 <trans_anim_ready_cb+0x108>
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	68da      	ldr	r2, [r3, #12]
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	4413      	add	r3, r2
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800dce0:	461a      	mov	r2, r3
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d12a      	bne.n	800dd40 <trans_anim_ready_cb+0x108>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800dcea:	69b9      	ldr	r1, [r7, #24]
 800dcec:	481d      	ldr	r0, [pc, #116]	; (800dd64 <trans_anim_ready_cb+0x12c>)
 800dcee:	f013 fe1d 	bl	802192c <_lv_ll_remove>
                lv_mem_free(tr);
 800dcf2:	69b8      	ldr	r0, [r7, #24]
 800dcf4:	f014 f866 	bl	8021dc4 <lv_mem_free>

                _lv_obj_style_t * obj_style = &obj->styles[i];
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	68da      	ldr	r2, [r3, #12]
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	4413      	add	r3, r2
 800dd02:	60fb      	str	r3, [r7, #12]
                lv_style_remove_prop(obj_style->style, prop);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	8a7a      	ldrh	r2, [r7, #18]
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f014 fe9d 	bl	8022a4c <lv_style_remove_prop>

                if(lv_style_is_empty(obj->styles[i].style)) {
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	68da      	ldr	r2, [r3, #12]
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	00db      	lsls	r3, r3, #3
 800dd1a:	4413      	add	r3, r2
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f015 f896 	bl	8022e50 <lv_style_is_empty>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d017      	beq.n	800dd5a <trans_anim_ready_cb+0x122>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6819      	ldr	r1, [r3, #0]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800dd36:	461a      	mov	r2, r3
 800dd38:	6978      	ldr	r0, [r7, #20]
 800dd3a:	f7fe fc3b 	bl	800c5b4 <lv_obj_remove_style>

                }
                break;
 800dd3e:	e00c      	b.n	800dd5a <trans_anim_ready_cb+0x122>
        for(i = 0; i < obj->style_cnt; i++) {
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	3301      	adds	r3, #1
 800dd44:	61fb      	str	r3, [r7, #28]
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800dd4a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	461a      	mov	r2, r3
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d3b0      	bcc.n	800dcba <trans_anim_ready_cb+0x82>
            }
        }
    }
}
 800dd58:	e000      	b.n	800dd5c <trans_anim_ready_cb+0x124>
                break;
 800dd5a:	bf00      	nop
}
 800dd5c:	bf00      	nop
 800dd5e:	3728      	adds	r7, #40	; 0x28
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	200008b0 	.word	0x200008b0

0800dd68 <calculate_layer_type>:

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800dd70:	2100      	movs	r1, #0
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7fe fafd 	bl	800c372 <lv_obj_get_style_transform_angle>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <calculate_layer_type+0x1a>
 800dd7e:	2302      	movs	r3, #2
 800dd80:	e01c      	b.n	800ddbc <calculate_layer_type+0x54>
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800dd82:	2100      	movs	r1, #0
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7fe fae2 	bl	800c34e <lv_obj_get_style_transform_zoom>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd90:	d001      	beq.n	800dd96 <calculate_layer_type+0x2e>
 800dd92:	2302      	movs	r3, #2
 800dd94:	e012      	b.n	800ddbc <calculate_layer_type+0x54>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800dd96:	2100      	movs	r1, #0
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7fe fb0e 	bl	800c3ba <lv_obj_get_style_opa>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2bff      	cmp	r3, #255	; 0xff
 800dda2:	d001      	beq.n	800dda8 <calculate_layer_type+0x40>
 800dda4:	2301      	movs	r3, #1
 800dda6:	e009      	b.n	800ddbc <calculate_layer_type+0x54>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800dda8:	2100      	movs	r1, #0
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7fe fb3a 	bl	800c424 <lv_obj_get_style_blend_mode>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <calculate_layer_type+0x52>
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e000      	b.n	800ddbc <calculate_layer_type+0x54>
#endif
    return LV_LAYER_TYPE_NONE;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	817b      	strh	r3, [r7, #10]
    lv_style_value_t v = {
        .num = (int32_t)value
 800ddd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    lv_style_value_t v = {
 800ddd6:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	697a      	ldr	r2, [r7, #20]
 800dddc:	2107      	movs	r1, #7
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f7fe fe32 	bl	800ca48 <lv_obj_set_local_style_prop>
}
 800dde4:	bf00      	nop
 800dde6:	3718      	adds	r7, #24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	607a      	str	r2, [r7, #4]
 800ddf8:	817b      	strh	r3, [r7, #10]
    lv_style_value_t v = {
        .num = (int32_t)value
 800ddfa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    lv_style_value_t v = {
 800ddfe:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	697a      	ldr	r2, [r7, #20]
 800de04:	2108      	movs	r1, #8
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7fe fe1e 	bl	800ca48 <lv_obj_set_local_style_prop>
}
 800de0c:	bf00      	nop
 800de0e:	3718      	adds	r7, #24
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <lv_obj_set_style_opa>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_CLIP_CORNER, v, selector);
}

void lv_obj_set_style_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b086      	sub	sp, #24
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	460b      	mov	r3, r1
 800de1e:	607a      	str	r2, [r7, #4]
 800de20:	72fb      	strb	r3, [r7, #11]
    lv_style_value_t v = {
        .num = (int32_t)value
 800de22:	7afb      	ldrb	r3, [r7, #11]
    lv_style_value_t v = {
 800de24:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OPA, v, selector);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	2160      	movs	r1, #96	; 0x60
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f7fe fe0b 	bl	800ca48 <lv_obj_set_local_style_prop>
}
 800de32:	bf00      	nop
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <lv_obj_del>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_del(lv_obj_t * obj)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b086      	sub	sp, #24
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("begin (delete %p)", (void *)obj);
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_obj_invalidate(obj);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7fb fc3d 	bl	80096c2 <lv_obj_invalidate>

    lv_obj_t * par = lv_obj_get_parent(obj);
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 f88f 	bl	800df6c <lv_obj_get_parent>
 800de4e:	60f8      	str	r0, [r7, #12]
    if(par) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <lv_obj_del+0x22>
        lv_obj_scrollbar_invalidate(par);
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7fd fdd0 	bl	800b9fc <lv_obj_scrollbar_invalidate>
    }

    lv_disp_t * disp = NULL;
 800de5c:	2300      	movs	r3, #0
 800de5e:	617b      	str	r3, [r7, #20]
    bool act_scr_del = false;
 800de60:	2300      	movs	r3, #0
 800de62:	74fb      	strb	r3, [r7, #19]
    if(par == NULL) {
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10d      	bne.n	800de86 <lv_obj_del+0x4c>
        disp = lv_obj_get_disp(obj);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 f844 	bl	800def8 <lv_obj_get_disp>
 800de70:	6178      	str	r0, [r7, #20]
        if(!disp) return;   /*Shouldn't happen*/
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d027      	beq.n	800dec8 <lv_obj_del+0x8e>
        if(disp->act_scr == obj) act_scr_del = true;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d101      	bne.n	800de86 <lv_obj_del+0x4c>
 800de82:	2301      	movs	r3, #1
 800de84:	74fb      	strb	r3, [r7, #19]
    }

    obj_del_core(obj);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f8f4 	bl	800e074 <obj_del_core>

    /*Call the ancestor's event handler to the parent to notify it about the child delete*/
    if(par) {
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d013      	beq.n	800deba <lv_obj_del+0x80>
        lv_obj_update_layout(par);
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f7fa fe10 	bl	8008ab8 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 800de98:	2100      	movs	r1, #0
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f7fd fdeb 	bl	800ba76 <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f7fd fdab 	bl	800b9fc <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 800dea6:	2200      	movs	r2, #0
 800dea8:	2122      	movs	r1, #34	; 0x22
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7f6 fe54 	bl	8004b58 <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 800deb0:	2200      	movs	r2, #0
 800deb2:	2124      	movs	r1, #36	; 0x24
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f7f6 fe4f 	bl	8004b58 <lv_event_send>
    }

    /*Handle if the active screen was deleted*/
    if(act_scr_del) {
 800deba:	7cfb      	ldrb	r3, [r7, #19]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d004      	beq.n	800deca <lv_obj_del+0x90>
        LV_LOG_WARN("the active screen was deleted");
        disp->act_scr = NULL;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	2200      	movs	r2, #0
 800dec4:	611a      	str	r2, [r3, #16]
 800dec6:	e000      	b.n	800deca <lv_obj_del+0x90>
        if(!disp) return;   /*Shouldn't happen*/
 800dec8:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
    LV_LOG_TRACE("finished (delete %p)", (void *)obj);
}
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <lv_obj_get_screen>:
    }
    lv_group_swap_obj(obj1, obj2);
}

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_par;

    do {
        act_par = par;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	60bb      	str	r3, [r7, #8]
        par = lv_obj_get_parent(act_par);
 800dee0:	68b8      	ldr	r0, [r7, #8]
 800dee2:	f000 f843 	bl	800df6c <lv_obj_get_parent>
 800dee6:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1f6      	bne.n	800dedc <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_par;
 800deee:	68bb      	ldr	r3, [r7, #8]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3710      	adds	r7, #16
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <lv_obj_get_disp>:

lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d102      	bne.n	800df0e <lv_obj_get_disp+0x16>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	617b      	str	r3, [r7, #20]
 800df0c:	e003      	b.n	800df16 <lv_obj_get_disp+0x1e>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7ff ffde 	bl	800ded0 <lv_obj_get_screen>
 800df14:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800df16:	4814      	ldr	r0, [pc, #80]	; (800df68 <lv_obj_get_disp+0x70>)
 800df18:	f013 fd65 	bl	80219e6 <_lv_ll_get_head>
 800df1c:	6138      	str	r0, [r7, #16]
 800df1e:	e01a      	b.n	800df56 <lv_obj_get_disp+0x5e>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 800df20:	2300      	movs	r3, #0
 800df22:	60fb      	str	r3, [r7, #12]
 800df24:	e00d      	b.n	800df42 <lv_obj_get_disp+0x4a>
            if(d->screens[i] == scr) return d;
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	68da      	ldr	r2, [r3, #12]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	697a      	ldr	r2, [r7, #20]
 800df34:	429a      	cmp	r2, r3
 800df36:	d101      	bne.n	800df3c <lv_obj_get_disp+0x44>
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	e010      	b.n	800df5e <lv_obj_get_disp+0x66>
        for(i = 0; i < d->screen_cnt; i++) {
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	3301      	adds	r3, #1
 800df40:	60fb      	str	r3, [r7, #12]
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df46:	68fa      	ldr	r2, [r7, #12]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d3ec      	bcc.n	800df26 <lv_obj_get_disp+0x2e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800df4c:	6939      	ldr	r1, [r7, #16]
 800df4e:	4806      	ldr	r0, [pc, #24]	; (800df68 <lv_obj_get_disp+0x70>)
 800df50:	f013 fd6b 	bl	8021a2a <_lv_ll_get_next>
 800df54:	6138      	str	r0, [r7, #16]
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d1e1      	bne.n	800df20 <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	20000868 	.word	0x20000868

0800df6c <lv_obj_get_parent>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <lv_obj_get_parent+0x12>
 800df7a:	2300      	movs	r3, #0
 800df7c:	e001      	b.n	800df82 <lv_obj_get_parent+0x16>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
}
 800df82:	4618      	mov	r0, r3
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
 800df8e:	b480      	push	{r7}
 800df90:	b085      	sub	sp, #20
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <lv_obj_get_child+0x16>
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	e021      	b.n	800dfe8 <lv_obj_get_child+0x5a>

    uint32_t idu;
    if(id < 0) {
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	da0d      	bge.n	800dfc6 <lv_obj_get_child+0x38>
        id = obj->spec_attr->child_cnt + id;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	4413      	add	r3, r2
 800dfb4:	603b      	str	r3, [r7, #0]
        if(id < 0) return NULL;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	da01      	bge.n	800dfc0 <lv_obj_get_child+0x32>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e013      	b.n	800dfe8 <lv_obj_get_child+0x5a>
        idu = (uint32_t) id;
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	60fb      	str	r3, [r7, #12]
 800dfc4:	e001      	b.n	800dfca <lv_obj_get_child+0x3c>
    }
    else {
        idu = id;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	60fb      	str	r3, [r7, #12]
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	689b      	ldr	r3, [r3, #8]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d301      	bcc.n	800dfda <lv_obj_get_child+0x4c>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	e006      	b.n	800dfe8 <lv_obj_get_child+0x5a>
    else return obj->spec_attr->children[id];
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4413      	add	r3, r2
 800dfe6:	681b      	ldr	r3, [r3, #0]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3714      	adds	r7, #20
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d101      	bne.n	800e008 <lv_obj_get_child_cnt+0x14>
 800e004:	2300      	movs	r3, #0
 800e006:	e002      	b.n	800e00e <lv_obj_get_child_cnt+0x1a>
    return obj->spec_attr->child_cnt;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	685b      	ldr	r3, [r3, #4]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff ffa2 	bl	800df6c <lv_obj_get_parent>
 800e028:	60b8      	str	r0, [r7, #8]
    if(parent == NULL) return 0;
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d101      	bne.n	800e034 <lv_obj_get_index+0x1a>
 800e030:	2300      	movs	r3, #0
 800e032:	e01b      	b.n	800e06c <lv_obj_get_index+0x52>

    uint32_t i = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800e038:	2300      	movs	r3, #0
 800e03a:	60fb      	str	r3, [r7, #12]
 800e03c:	e00d      	b.n	800e05a <lv_obj_get_index+0x40>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	4619      	mov	r1, r3
 800e042:	68b8      	ldr	r0, [r7, #8]
 800e044:	f7ff ffa3 	bl	800df8e <lv_obj_get_child>
 800e048:	4602      	mov	r2, r0
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d101      	bne.n	800e054 <lv_obj_get_index+0x3a>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	e00b      	b.n	800e06c <lv_obj_get_index+0x52>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3301      	adds	r3, #1
 800e058:	60fb      	str	r3, [r7, #12]
 800e05a:	68b8      	ldr	r0, [r7, #8]
 800e05c:	f7ff ffca 	bl	800dff4 <lv_obj_get_child_cnt>
 800e060:	4602      	mov	r2, r0
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	4293      	cmp	r3, r2
 800e066:	d3ea      	bcc.n	800e03e <lv_obj_get_index+0x24>
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 800e068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 800e074:	b590      	push	{r4, r7, lr}
 800e076:	b08d      	sub	sp, #52	; 0x34
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800e07c:	2200      	movs	r2, #0
 800e07e:	2121      	movs	r1, #33	; 0x21
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7f6 fd69 	bl	8004b58 <lv_event_send>
 800e086:	4603      	mov	r3, r0
 800e088:	77fb      	strb	r3, [r7, #31]
    if(res == LV_RES_INV) return;
 800e08a:	7ffb      	ldrb	r3, [r7, #31]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f000 80d2 	beq.w	800e236 <obj_del_core+0x1c2>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
 800e092:	2100      	movs	r1, #0
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff ff7a 	bl	800df8e <lv_obj_get_child>
 800e09a:	62f8      	str	r0, [r7, #44]	; 0x2c
    while(child) {
 800e09c:	e007      	b.n	800e0ae <obj_del_core+0x3a>
        obj_del_core(child);
 800e09e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0a0:	f7ff ffe8 	bl	800e074 <obj_del_core>
        child = lv_obj_get_child(obj, 0);
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff ff71 	bl	800df8e <lv_obj_get_child>
 800e0ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    while(child) {
 800e0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1f4      	bne.n	800e09e <obj_del_core+0x2a>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7f7 ff5d 	bl	8005f74 <lv_obj_get_group>
 800e0ba:	61b8      	str	r0, [r7, #24]

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800e0bc:	2000      	movs	r0, #0
 800e0be:	f011 fec3 	bl	801fe48 <lv_indev_get_next>
 800e0c2:	62b8      	str	r0, [r7, #40]	; 0x28
    while(indev) {
 800e0c4:	e028      	b.n	800e118 <obj_del_core+0xa4>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d004      	beq.n	800e0da <obj_del_core+0x66>
 800e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d103      	bne.n	800e0e2 <obj_del_core+0x6e>
            lv_indev_reset(indev, obj);
 800e0da:	6879      	ldr	r1, [r7, #4]
 800e0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0de:	f7f7 fad9 	bl	8005694 <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 800e0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d102      	bne.n	800e0f2 <obj_del_core+0x7e>
            indev->proc.types.pointer.last_pressed = NULL;
 800e0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	635a      	str	r2, [r3, #52]	; 0x34
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800e0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0f6:	69ba      	ldr	r2, [r7, #24]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d109      	bne.n	800e110 <obj_del_core+0x9c>
 800e0fc:	f7f7 fb90 	bl	8005820 <lv_indev_get_obj_act>
 800e100:	4602      	mov	r2, r0
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	4293      	cmp	r3, r2
 800e106:	d103      	bne.n	800e110 <obj_del_core+0x9c>
            lv_indev_reset(indev, obj);
 800e108:	6879      	ldr	r1, [r7, #4]
 800e10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e10c:	f7f7 fac2 	bl	8005694 <lv_indev_reset>
        }
        indev = lv_indev_get_next(indev);
 800e110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e112:	f011 fe99 	bl	801fe48 <lv_indev_get_next>
 800e116:	62b8      	str	r0, [r7, #40]	; 0x28
    while(indev) {
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1d3      	bne.n	800e0c6 <obj_del_core+0x52>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7f9 f908 	bl	8007334 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d146      	bne.n	800e1ba <obj_del_core+0x146>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7ff fee3 	bl	800def8 <lv_obj_get_disp>
 800e132:	6138      	str	r0, [r7, #16]
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 800e134:	2300      	movs	r3, #0
 800e136:	627b      	str	r3, [r7, #36]	; 0x24
 800e138:	e00b      	b.n	800e152 <obj_del_core+0xde>
            if(disp->screens[i] == obj) break;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	68da      	ldr	r2, [r3, #12]
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d008      	beq.n	800e15e <obj_del_core+0xea>
        for(i = 0; i < disp->screen_cnt; i++) {
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14e:	3301      	adds	r3, #1
 800e150:	627b      	str	r3, [r7, #36]	; 0x24
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e158:	429a      	cmp	r2, r3
 800e15a:	d3ee      	bcc.n	800e13a <obj_del_core+0xc6>
 800e15c:	e000      	b.n	800e160 <obj_del_core+0xec>
            if(disp->screens[i] == obj) break;
 800e15e:	bf00      	nop
        }

        uint32_t id = i;
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	60fb      	str	r3, [r7, #12]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	627b      	str	r3, [r7, #36]	; 0x24
 800e168:	e00f      	b.n	800e18a <obj_del_core+0x116>
            disp->screens[i] = disp->screens[i + 1];
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	68da      	ldr	r2, [r3, #12]
 800e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e170:	3301      	adds	r3, #1
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	441a      	add	r2, r3
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	68d9      	ldr	r1, [r3, #12]
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	440b      	add	r3, r1
 800e180:	6812      	ldr	r2, [r2, #0]
 800e182:	601a      	str	r2, [r3, #0]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	3301      	adds	r3, #1
 800e188:	627b      	str	r3, [r7, #36]	; 0x24
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18e:	3b01      	subs	r3, #1
 800e190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e192:	429a      	cmp	r2, r3
 800e194:	d3e9      	bcc.n	800e16a <obj_del_core+0xf6>
        }
        disp->screen_cnt--;
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19a:	1e5a      	subs	r2, r3, #1
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	625a      	str	r2, [r3, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	68da      	ldr	r2, [r3, #12]
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	f013 fe37 	bl	8021e20 <lv_mem_realloc>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	60da      	str	r2, [r3, #12]
 800e1b8:	e039      	b.n	800e22e <obj_del_core+0x1ba>
    }
    /*Remove the object from the child list of its parent*/
    else {
        uint32_t id = lv_obj_get_index(obj);
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff ff2d 	bl	800e01a <lv_obj_get_index>
 800e1c0:	6178      	str	r0, [r7, #20]
        uint32_t i;
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	623b      	str	r3, [r7, #32]
 800e1c6:	e013      	b.n	800e1f0 <obj_del_core+0x17c>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	6a3b      	ldr	r3, [r7, #32]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	441a      	add	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	6819      	ldr	r1, [r3, #0]
 800e1e0:	6a3b      	ldr	r3, [r7, #32]
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	440b      	add	r3, r1
 800e1e6:	6812      	ldr	r2, [r2, #0]
 800e1e8:	601a      	str	r2, [r3, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800e1ea:	6a3b      	ldr	r3, [r7, #32]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	623b      	str	r3, [r7, #32]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	6a3a      	ldr	r2, [r7, #32]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d3e3      	bcc.n	800e1c8 <obj_del_core+0x154>
        }
        obj->parent->spec_attr->child_cnt--;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	685a      	ldr	r2, [r3, #4]
 800e208:	3a01      	subs	r2, #1
 800e20a:	605a      	str	r2, [r3, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	681a      	ldr	r2, [r3, #0]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	0099      	lsls	r1, r3, #2
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	689c      	ldr	r4, [r3, #8]
 800e224:	4610      	mov	r0, r2
 800e226:	f013 fdfb 	bl	8021e20 <lv_mem_realloc>
 800e22a:	4603      	mov	r3, r0
 800e22c:	6023      	str	r3, [r4, #0]
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f013 fdc8 	bl	8021dc4 <lv_mem_free>
 800e234:	e000      	b.n	800e238 <obj_del_core+0x1c4>
    if(res == LV_RES_INV) return;
 800e236:	bf00      	nop
}
 800e238:	3734      	adds	r7, #52	; 0x34
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd90      	pop	{r4, r7, pc}

0800e23e <lv_area_copy>:
{
 800e23e:	b480      	push	{r7}
 800e240:	b083      	sub	sp, #12
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
 800e246:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	80da      	strh	r2, [r3, #6]
}
 800e270:	bf00      	nop
 800e272:	370c      	adds	r7, #12
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <lv_area_get_width>:
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e28a:	b29a      	uxth	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e292:	b29b      	uxth	r3, r3
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	b29b      	uxth	r3, r3
 800e298:	3301      	adds	r3, #1
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	b21b      	sxth	r3, r3
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <lv_area_get_height>:
{
 800e2aa:	b480      	push	{r7}
 800e2ac:	b083      	sub	sp, #12
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	b21b      	sxth	r3, r3
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <lv_obj_get_style_transform_zoom>:
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800e2e2:	226c      	movs	r2, #108	; 0x6c
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7fe fb34 	bl	800c954 <lv_obj_get_style_prop>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	b21b      	sxth	r3, r3
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <lv_obj_get_style_transform_angle>:
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800e306:	226d      	movs	r2, #109	; 0x6d
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7fe fb22 	bl	800c954 <lv_obj_get_style_prop>
 800e310:	4603      	mov	r3, r0
 800e312:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	b21b      	sxth	r3, r3
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <lv_obj_get_style_transform_pivot_x>:
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800e32a:	226e      	movs	r2, #110	; 0x6e
 800e32c:	6839      	ldr	r1, [r7, #0]
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f7fe fb10 	bl	800c954 <lv_obj_get_style_prop>
 800e334:	4603      	mov	r3, r0
 800e336:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	b21b      	sxth	r3, r3
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3710      	adds	r7, #16
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <lv_obj_get_style_transform_pivot_y>:
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800e34e:	226f      	movs	r2, #111	; 0x6f
 800e350:	6839      	ldr	r1, [r7, #0]
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f7fe fafe 	bl	800c954 <lv_obj_get_style_prop>
 800e358:	4603      	mov	r3, r0
 800e35a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	b21b      	sxth	r3, r3
}
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <lv_obj_get_style_opa>:
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800e372:	2260      	movs	r2, #96	; 0x60
 800e374:	6839      	ldr	r1, [r7, #0]
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7fe faec 	bl	800c954 <lv_obj_get_style_prop>
 800e37c:	4603      	mov	r3, r0
 800e37e:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	b2db      	uxtb	r3, r3
}
 800e384:	4618      	mov	r0, r3
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <lv_obj_get_style_blend_mode>:
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800e396:	2267      	movs	r2, #103	; 0x67
 800e398:	6839      	ldr	r1, [r7, #0]
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7fe fada 	bl	800c954 <lv_obj_get_style_prop>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	b2db      	uxtb	r3, r3
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	af00      	add	r7, sp, #0
    perf_monitor_init(&perf_monitor);
#endif
#if LV_USE_MEM_MONITOR
    mem_monitor_init(&mem_monitor);
#endif
}
 800e3b4:	bf00      	nop
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr

0800e3be <lv_obj_redraw>:
        }
    }
}

void lv_obj_redraw(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b08e      	sub	sp, #56	; 0x38
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	6039      	str	r1, [r7, #0]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_area_t clip_coords_for_obj;

    /*Truncate the clip area to `obj size + ext size` area*/
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800e3ce:	f107 0310 	add.w	r3, r7, #16
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	6838      	ldr	r0, [r7, #0]
 800e3d6:	f7fa fb9b 	bl	8008b10 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800e3da:	6838      	ldr	r0, [r7, #0]
 800e3dc:	f7f9 fe7a 	bl	80080d4 <_lv_obj_get_ext_draw_size>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800e3e4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800e3e8:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800e3ec:	f107 0310 	add.w	r3, r7, #16
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f012 f92b 	bl	802064c <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800e3f6:	f107 0210 	add.w	r2, r7, #16
 800e3fa:	f107 0318 	add.w	r3, r7, #24
 800e3fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e400:	4618      	mov	r0, r3
 800e402:	f012 f98f 	bl	8020724 <_lv_area_intersect>
 800e406:	4603      	mov	r3, r0
 800e408:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    /*If the object is visible on the current clip area OR has overflow visible draw it.
     *With overflow visible drawing should happen to apply the masks which might affect children */
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800e40c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e410:	2b00      	cmp	r3, #0
 800e412:	d107      	bne.n	800e424 <lv_obj_redraw+0x66>
 800e414:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e418:	6838      	ldr	r0, [r7, #0]
 800e41a:	f7f7 fd76 	bl	8005f0a <lv_obj_has_flag>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	d001      	beq.n	800e428 <lv_obj_redraw+0x6a>
 800e424:	2301      	movs	r3, #1
 800e426:	e000      	b.n	800e42a <lv_obj_redraw+0x6c>
 800e428:	2300      	movs	r3, #0
 800e42a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800e42e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e432:	f003 0301 	and.w	r3, r3, #1
 800e436:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(should_draw) {
 800e43a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d012      	beq.n	800e468 <lv_obj_redraw+0xaa>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f107 0218 	add.w	r2, r7, #24
 800e448:	609a      	str	r2, [r3, #8]

        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	2114      	movs	r1, #20
 800e44e:	6838      	ldr	r0, [r7, #0]
 800e450:	f7f6 fb82 	bl	8004b58 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	2115      	movs	r1, #21
 800e458:	6838      	ldr	r0, [r7, #0]
 800e45a:	f7f6 fb7d 	bl	8004b58 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	2116      	movs	r1, #22
 800e462:	6838      	ldr	r0, [r7, #0]
 800e464:	f7f6 fb78 	bl	8004b58 <lv_event_send>
    }

    /*With overflow visible keep the previous clip area to let the children visible out of this object too
     *With not overflow visible limit the clip are to the object's coordinates to clip the children*/
    lv_area_t clip_coords_for_children;
    bool refr_children = true;
 800e468:	2301      	movs	r3, #1
 800e46a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e46e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e472:	6838      	ldr	r0, [r7, #0]
 800e474:	f7f7 fd49 	bl	8005f0a <lv_obj_has_flag>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d006      	beq.n	800e48c <lv_obj_redraw+0xce>
        clip_coords_for_children  = *clip_area_ori;
 800e47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e480:	f107 0308 	add.w	r3, r7, #8
 800e484:	6810      	ldr	r0, [r2, #0]
 800e486:	6851      	ldr	r1, [r2, #4]
 800e488:	c303      	stmia	r3!, {r0, r1}
 800e48a:	e011      	b.n	800e4b0 <lv_obj_redraw+0xf2>
    }
    else {
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	f103 0214 	add.w	r2, r3, #20
 800e492:	f107 0308 	add.w	r3, r7, #8
 800e496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e498:	4618      	mov	r0, r3
 800e49a:	f012 f943 	bl	8020724 <_lv_area_intersect>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	f083 0301 	eor.w	r3, r3, #1
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d002      	beq.n	800e4b0 <lv_obj_redraw+0xf2>
            refr_children = false;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if(refr_children) {
 800e4b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d01d      	beq.n	800e4f4 <lv_obj_redraw+0x136>
        draw_ctx->clip_area = &clip_coords_for_children;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f107 0208 	add.w	r2, r7, #8
 800e4be:	609a      	str	r2, [r3, #8]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800e4c0:	6838      	ldr	r0, [r7, #0]
 800e4c2:	f7ff fd97 	bl	800dff4 <lv_obj_get_child_cnt>
 800e4c6:	6278      	str	r0, [r7, #36]	; 0x24
        for(i = 0; i < child_cnt; i++) {
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	633b      	str	r3, [r7, #48]	; 0x30
 800e4cc:	e00e      	b.n	800e4ec <lv_obj_redraw+0x12e>
            lv_obj_t * child = obj->spec_attr->children[i];
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4413      	add	r3, r2
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	623b      	str	r3, [r7, #32]
            refr_obj(draw_ctx, child);
 800e4de:	6a39      	ldr	r1, [r7, #32]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 fef1 	bl	800f2c8 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	633b      	str	r3, [r7, #48]	; 0x30
 800e4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d3ec      	bcc.n	800e4ce <lv_obj_redraw+0x110>
        }
    }

    /*If the object was visible on the clip area call the post draw events too*/
    if(should_draw) {
 800e4f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d012      	beq.n	800e522 <lv_obj_redraw+0x164>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f107 0218 	add.w	r2, r7, #24
 800e502:	609a      	str	r2, [r3, #8]

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	2117      	movs	r1, #23
 800e508:	6838      	ldr	r0, [r7, #0]
 800e50a:	f7f6 fb25 	bl	8004b58 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	2118      	movs	r1, #24
 800e512:	6838      	ldr	r0, [r7, #0]
 800e514:	f7f6 fb20 	bl	8004b58 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	2119      	movs	r1, #25
 800e51c:	6838      	ldr	r0, [r7, #0]
 800e51e:	f7f6 fb1b 	bl	8004b58 <lv_event_send>
    }

    draw_ctx->clip_area = clip_area_ori;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e526:	609a      	str	r2, [r3, #8]
}
 800e528:	bf00      	nop
 800e52a:	3738      	adds	r7, #56	; 0x38
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b088      	sub	sp, #32
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d102      	bne.n	800e546 <_lv_inv_area+0x16>
 800e540:	f011 fbf0 	bl	801fd24 <lv_disp_get_default>
 800e544:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f000 80be 	beq.w	800e6ca <_lv_inv_area+0x19a>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7f6 f9f8 	bl	8004944 <lv_disp_is_invalidation_enabled>
 800e554:	4603      	mov	r3, r0
 800e556:	f083 0301 	eor.w	r3, r3, #1
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f040 80b6 	bne.w	800e6ce <_lv_inv_area+0x19e>

    if(disp->rendering_in_progress) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e568:	f003 0304 	and.w	r3, r3, #4
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f040 80af 	bne.w	800e6d2 <_lv_inv_area+0x1a2>
        LV_LOG_ERROR("detected modifying dirty areas in render");
        return;
    }

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d104      	bne.n	800e584 <_lv_inv_area+0x54>
        disp->inv_p = 0;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        return;
 800e582:	e0ad      	b.n	800e6e0 <_lv_inv_area+0x1b0>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f011 fbd5 	bl	801fd3c <lv_disp_get_hor_res>
 800e592:	4603      	mov	r3, r0
 800e594:	b29b      	uxth	r3, r3
 800e596:	3b01      	subs	r3, #1
 800e598:	b29b      	uxth	r3, r3
 800e59a:	b21b      	sxth	r3, r3
 800e59c:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f011 fbf2 	bl	801fd88 <lv_disp_get_ver_res>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	b21b      	sxth	r3, r3
 800e5ae:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800e5b0:	f107 0214 	add.w	r2, r7, #20
 800e5b4:	f107 030c 	add.w	r3, r7, #12
 800e5b8:	6839      	ldr	r1, [r7, #0]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f012 f8b2 	bl	8020724 <_lv_area_intersect>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	777b      	strb	r3, [r7, #29]
    if(suc == false)  return; /*Out of the screen*/
 800e5c4:	7f7b      	ldrb	r3, [r7, #29]
 800e5c6:	f083 0301 	eor.w	r3, r3, #1
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	f040 8082 	bne.w	800e6d6 <_lv_inv_area+0x1a6>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->driver->full_refresh) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	7c1b      	ldrb	r3, [r3, #16]
 800e5d8:	f003 0302 	and.w	r3, r3, #2
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d015      	beq.n	800e60e <_lv_inv_area+0xde>
        disp->inv_areas[0] = scr_area;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	3330      	adds	r3, #48	; 0x30
 800e5e6:	f107 0214 	add.w	r2, r7, #20
 800e5ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5ee:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d06b      	beq.n	800e6da <_lv_inv_area+0x1aa>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	4618      	mov	r0, r3
 800e608:	f014 ff11 	bl	802342e <lv_timer_resume>
        return;
 800e60c:	e065      	b.n	800e6da <_lv_inv_area+0x1aa>
    }

    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	699b      	ldr	r3, [r3, #24]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d008      	beq.n	800e62a <_lv_inv_area+0xfa>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	699b      	ldr	r3, [r3, #24]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	6812      	ldr	r2, [r2, #0]
 800e622:	f107 010c 	add.w	r1, r7, #12
 800e626:	4610      	mov	r0, r2
 800e628:	4798      	blx	r3

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
 800e62a:	2300      	movs	r3, #0
 800e62c:	83fb      	strh	r3, [r7, #30]
 800e62e:	e010      	b.n	800e652 <_lv_inv_area+0x122>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800e630:	8bfb      	ldrh	r3, [r7, #30]
 800e632:	3306      	adds	r3, #6
 800e634:	00db      	lsls	r3, r3, #3
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	18d1      	adds	r1, r2, r3
 800e63a:	f107 030c 	add.w	r3, r7, #12
 800e63e:	2200      	movs	r2, #0
 800e640:	4618      	mov	r0, r3
 800e642:	f012 fa53 	bl	8020aec <_lv_area_is_in>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d148      	bne.n	800e6de <_lv_inv_area+0x1ae>
    for(i = 0; i < disp->inv_p; i++) {
 800e64c:	8bfb      	ldrh	r3, [r7, #30]
 800e64e:	3301      	adds	r3, #1
 800e650:	83fb      	strh	r3, [r7, #30]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e658:	8bfa      	ldrh	r2, [r7, #30]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d3e8      	bcc.n	800e630 <_lv_inv_area+0x100>
    }

    /*Save the area*/
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e664:	2b1f      	cmp	r3, #31
 800e666:	d80d      	bhi.n	800e684 <_lv_inv_area+0x154>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e66e:	3306      	adds	r3, #6
 800e670:	00db      	lsls	r3, r3, #3
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	4413      	add	r3, r2
 800e676:	f107 020c 	add.w	r2, r7, #12
 800e67a:	4611      	mov	r1, r2
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7ff fdde 	bl	800e23e <lv_area_copy>
 800e682:	e010      	b.n	800e6a6 <_lv_inv_area+0x176>
    }
    else {   /*If no place for the area add the screen*/
        disp->inv_p = 0;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e692:	3306      	adds	r3, #6
 800e694:	00db      	lsls	r3, r3, #3
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	4413      	add	r3, r2
 800e69a:	f107 0214 	add.w	r2, r7, #20
 800e69e:	4611      	mov	r1, r2
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7ff fdcc 	bl	800e23e <lv_area_copy>
    }
    disp->inv_p++;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d010      	beq.n	800e6e0 <_lv_inv_area+0x1b0>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f014 feb3 	bl	802342e <lv_timer_resume>
 800e6c8:	e00a      	b.n	800e6e0 <_lv_inv_area+0x1b0>
    if(!disp) return;
 800e6ca:	bf00      	nop
 800e6cc:	e008      	b.n	800e6e0 <_lv_inv_area+0x1b0>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800e6ce:	bf00      	nop
 800e6d0:	e006      	b.n	800e6e0 <_lv_inv_area+0x1b0>
        return;
 800e6d2:	bf00      	nop
 800e6d4:	e004      	b.n	800e6e0 <_lv_inv_area+0x1b0>
    if(suc == false)  return; /*Out of the screen*/
 800e6d6:	bf00      	nop
 800e6d8:	e002      	b.n	800e6e0 <_lv_inv_area+0x1b0>
        return;
 800e6da:	bf00      	nop
 800e6dc:	e000      	b.n	800e6e0 <_lv_inv_area+0x1b0>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800e6de:	bf00      	nop
}
 800e6e0:	3720      	adds	r7, #32
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
	...

0800e6e8 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	af00      	add	r7, sp, #0
    return disp_refr;
 800e6ec:	4b03      	ldr	r3, [pc, #12]	; (800e6fc <_lv_refr_get_disp_refreshing+0x14>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	20000718 	.word	0x20000718

0800e700 <_lv_disp_refr_timer>:
/**
 * Called periodically to handle the refreshing
 * @param tmr pointer to the timer itself
 */
void _lv_disp_refr_timer(lv_timer_t * tmr)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
    REFR_TRACE("begin");

    uint32_t start = lv_tick_get();
 800e708:	f011 fbce 	bl	801fea8 <lv_tick_get>
 800e70c:	60f8      	str	r0, [r7, #12]
    volatile uint32_t elaps = 0;
 800e70e:	2300      	movs	r3, #0
 800e710:	60bb      	str	r3, [r7, #8]

    if(tmr) {
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d007      	beq.n	800e728 <_lv_disp_refr_timer+0x28>
        disp_refr = tmr->user_data;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	4a38      	ldr	r2, [pc, #224]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e71e:	6013      	str	r3, [r2, #0]
#if LV_USE_PERF_MONITOR == 0 && LV_USE_MEM_MONITOR == 0
        /**
         * Ensure the timer does not run again automatically.
         * This is done before refreshing in case refreshing invalidates something else.
         */
        lv_timer_pause(tmr);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f014 fe75 	bl	8023410 <lv_timer_pause>
 800e726:	e004      	b.n	800e732 <_lv_disp_refr_timer+0x32>
#endif
    }
    else {
        disp_refr = lv_disp_get_default();
 800e728:	f011 fafc 	bl	801fd24 <lv_disp_get_default>
 800e72c:	4603      	mov	r3, r0
 800e72e:	4a34      	ldr	r2, [pc, #208]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e730:	6013      	str	r3, [r2, #0]
    }

    /*Refresh the screen's layout if required*/
    lv_obj_update_layout(disp_refr->act_scr);
 800e732:	4b33      	ldr	r3, [pc, #204]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	691b      	ldr	r3, [r3, #16]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fa f9bd 	bl	8008ab8 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800e73e:	4b30      	ldr	r3, [pc, #192]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	695b      	ldr	r3, [r3, #20]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d005      	beq.n	800e754 <_lv_disp_refr_timer+0x54>
 800e748:	4b2d      	ldr	r3, [pc, #180]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fa f9b2 	bl	8008ab8 <lv_obj_update_layout>

    lv_obj_update_layout(disp_refr->top_layer);
 800e754:	4b2a      	ldr	r3, [pc, #168]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	69db      	ldr	r3, [r3, #28]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fa f9ac 	bl	8008ab8 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800e760:	4b27      	ldr	r3, [pc, #156]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6a1b      	ldr	r3, [r3, #32]
 800e766:	4618      	mov	r0, r3
 800e768:	f7fa f9a6 	bl	8008ab8 <lv_obj_update_layout>

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 800e76c:	4b24      	ldr	r3, [pc, #144]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d105      	bne.n	800e782 <_lv_disp_refr_timer+0x82>
        disp_refr->inv_p = 0;
 800e776:	4b22      	ldr	r3, [pc, #136]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        LV_LOG_WARN("there is no active screen");
        REFR_TRACE("finished");
        return;
 800e780:	e03a      	b.n	800e7f8 <_lv_disp_refr_timer+0xf8>
    }

    lv_refr_join_area();
 800e782:	f000 f841 	bl	800e808 <lv_refr_join_area>

    refr_invalid_areas();
 800e786:	f000 f8d7 	bl	800e938 <refr_invalid_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800e78a:	4b1d      	ldr	r3, [pc, #116]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e792:	2b00      	cmp	r3, #0
 800e794:	d02a      	beq.n	800e7ec <_lv_disp_refr_timer+0xec>

        /*Clean up*/
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800e796:	4b1a      	ldr	r3, [pc, #104]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	3330      	adds	r3, #48	; 0x30
 800e79c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f013 ff13 	bl	80225cc <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800e7a6:	4b16      	ldr	r3, [pc, #88]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e7ae:	2120      	movs	r1, #32
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f013 ff0b 	bl	80225cc <lv_memset_00>
        disp_refr->inv_p = 0;
 800e7b6:	4b12      	ldr	r3, [pc, #72]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150

        elaps = lv_tick_elaps(start);
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f011 fb8b 	bl	801fedc <lv_tick_elaps>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	60bb      	str	r3, [r7, #8]

        /*Call monitor cb if present*/
        if(disp_refr->driver->monitor_cb) {
 800e7ca:	4b0d      	ldr	r3, [pc, #52]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00a      	beq.n	800e7ec <_lv_disp_refr_timer+0xec>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800e7d6:	4b0a      	ldr	r3, [pc, #40]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7de:	4a08      	ldr	r2, [pc, #32]	; (800e800 <_lv_disp_refr_timer+0x100>)
 800e7e0:	6812      	ldr	r2, [r2, #0]
 800e7e2:	6810      	ldr	r0, [r2, #0]
 800e7e4:	68b9      	ldr	r1, [r7, #8]
 800e7e6:	4a07      	ldr	r2, [pc, #28]	; (800e804 <_lv_disp_refr_timer+0x104>)
 800e7e8:	6812      	ldr	r2, [r2, #0]
 800e7ea:	4798      	blx	r3
        }
    }

    lv_mem_buf_free_all();
 800e7ec:	f013 fc14 	bl	8022018 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800e7f0:	f010 fed6 	bl	801f5a0 <_lv_font_clean_up_fmt_txt>

#if LV_DRAW_COMPLEX
    _lv_draw_mask_cleanup();
 800e7f4:	f003 f94e 	bl	8011a94 <_lv_draw_mask_cleanup>
                              mon.frag_pct);
    }
#endif

    REFR_TRACE("finished");
}
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20000718 	.word	0x20000718
 800e804:	20000714 	.word	0x20000714

0800e808 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800e808:	b5b0      	push	{r4, r5, r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800e80e:	2300      	movs	r3, #0
 800e810:	60bb      	str	r3, [r7, #8]
 800e812:	e080      	b.n	800e916 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800e814:	4b47      	ldr	r3, [pc, #284]	; (800e934 <lv_refr_join_area+0x12c>)
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	4413      	add	r3, r2
 800e81c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d173      	bne.n	800e90e <lv_refr_join_area+0x106>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800e826:	2300      	movs	r3, #0
 800e828:	60fb      	str	r3, [r7, #12]
 800e82a:	e067      	b.n	800e8fc <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800e82c:	4b41      	ldr	r3, [pc, #260]	; (800e934 <lv_refr_join_area+0x12c>)
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	4413      	add	r3, r2
 800e834:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d158      	bne.n	800e8f0 <lv_refr_join_area+0xe8>
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	429a      	cmp	r2, r3
 800e844:	d054      	beq.n	800e8f0 <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800e846:	4b3b      	ldr	r3, [pc, #236]	; (800e934 <lv_refr_join_area+0x12c>)
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	3306      	adds	r3, #6
 800e84e:	00db      	lsls	r3, r3, #3
 800e850:	18d0      	adds	r0, r2, r3
 800e852:	4b38      	ldr	r3, [pc, #224]	; (800e934 <lv_refr_join_area+0x12c>)
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	3306      	adds	r3, #6
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	4413      	add	r3, r2
 800e85e:	4619      	mov	r1, r3
 800e860:	f012 f916 	bl	8020a90 <_lv_area_is_on>
 800e864:	4603      	mov	r3, r0
 800e866:	f083 0301 	eor.w	r3, r3, #1
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d141      	bne.n	800e8f4 <lv_refr_join_area+0xec>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800e870:	4b30      	ldr	r3, [pc, #192]	; (800e934 <lv_refr_join_area+0x12c>)
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	3306      	adds	r3, #6
 800e878:	00db      	lsls	r3, r3, #3
 800e87a:	18d1      	adds	r1, r2, r3
 800e87c:	4b2d      	ldr	r3, [pc, #180]	; (800e934 <lv_refr_join_area+0x12c>)
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	3306      	adds	r3, #6
 800e884:	00db      	lsls	r3, r3, #3
 800e886:	441a      	add	r2, r3
 800e888:	463b      	mov	r3, r7
 800e88a:	4618      	mov	r0, r3
 800e88c:	f011 ff9b 	bl	80207c6 <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800e890:	463b      	mov	r3, r7
 800e892:	4618      	mov	r0, r3
 800e894:	f011 feb9 	bl	802060a <lv_area_get_size>
 800e898:	4604      	mov	r4, r0
 800e89a:	4b26      	ldr	r3, [pc, #152]	; (800e934 <lv_refr_join_area+0x12c>)
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	3306      	adds	r3, #6
 800e8a2:	00db      	lsls	r3, r3, #3
 800e8a4:	4413      	add	r3, r2
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f011 feaf 	bl	802060a <lv_area_get_size>
 800e8ac:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800e8ae:	4b21      	ldr	r3, [pc, #132]	; (800e934 <lv_refr_join_area+0x12c>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	3306      	adds	r3, #6
 800e8b6:	00db      	lsls	r3, r3, #3
 800e8b8:	4413      	add	r3, r2
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f011 fea5 	bl	802060a <lv_area_get_size>
 800e8c0:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800e8c2:	442b      	add	r3, r5
 800e8c4:	429c      	cmp	r4, r3
 800e8c6:	d216      	bcs.n	800e8f6 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800e8c8:	4b1a      	ldr	r3, [pc, #104]	; (800e934 <lv_refr_join_area+0x12c>)
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	3306      	adds	r3, #6
 800e8d0:	00db      	lsls	r3, r3, #3
 800e8d2:	4413      	add	r3, r2
 800e8d4:	463a      	mov	r2, r7
 800e8d6:	4611      	mov	r1, r2
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7ff fcb0 	bl	800e23e <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800e8de:	4b15      	ldr	r3, [pc, #84]	; (800e934 <lv_refr_join_area+0x12c>)
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	701a      	strb	r2, [r3, #0]
 800e8ee:	e002      	b.n	800e8f6 <lv_refr_join_area+0xee>
                continue;
 800e8f0:	bf00      	nop
 800e8f2:	e000      	b.n	800e8f6 <lv_refr_join_area+0xee>
                continue;
 800e8f4:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	60fb      	str	r3, [r7, #12]
 800e8fc:	4b0d      	ldr	r3, [pc, #52]	; (800e934 <lv_refr_join_area+0x12c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e904:	461a      	mov	r2, r3
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	4293      	cmp	r3, r2
 800e90a:	d38f      	bcc.n	800e82c <lv_refr_join_area+0x24>
 800e90c:	e000      	b.n	800e910 <lv_refr_join_area+0x108>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800e90e:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	3301      	adds	r3, #1
 800e914:	60bb      	str	r3, [r7, #8]
 800e916:	4b07      	ldr	r3, [pc, #28]	; (800e934 <lv_refr_join_area+0x12c>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e91e:	461a      	mov	r2, r3
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	4293      	cmp	r3, r2
 800e924:	f4ff af76 	bcc.w	800e814 <lv_refr_join_area+0xc>
            }
        }
    }
}
 800e928:	bf00      	nop
 800e92a:	bf00      	nop
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bdb0      	pop	{r4, r5, r7, pc}
 800e932:	bf00      	nop
 800e934:	20000718 	.word	0x20000718

0800e938 <refr_invalid_areas>:

/**
 * Refresh the joined areas
 */
static void refr_invalid_areas(void)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
    px_num = 0;
 800e93e:	4b4e      	ldr	r3, [pc, #312]	; (800ea78 <refr_invalid_areas+0x140>)
 800e940:	2200      	movs	r2, #0
 800e942:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 800e944:	4b4d      	ldr	r3, [pc, #308]	; (800ea7c <refr_invalid_areas+0x144>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f000 808e 	beq.w	800ea6e <refr_invalid_areas+0x136>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 800e952:	2300      	movs	r3, #0
 800e954:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800e956:	4b49      	ldr	r3, [pc, #292]	; (800ea7c <refr_invalid_areas+0x144>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e95e:	3b01      	subs	r3, #1
 800e960:	607b      	str	r3, [r7, #4]
 800e962:	e00e      	b.n	800e982 <refr_invalid_areas+0x4a>
        if(disp_refr->inv_area_joined[i] == 0) {
 800e964:	4b45      	ldr	r3, [pc, #276]	; (800ea7c <refr_invalid_areas+0x144>)
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4413      	add	r3, r2
 800e96c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d102      	bne.n	800e97c <refr_invalid_areas+0x44>
            last_i = i;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
            break;
 800e97a:	e005      	b.n	800e988 <refr_invalid_areas+0x50>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3b01      	subs	r3, #1
 800e980:	607b      	str	r3, [r7, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b00      	cmp	r3, #0
 800e986:	daed      	bge.n	800e964 <refr_invalid_areas+0x2c>
        }
    }

    /*Notify the display driven rendering has started*/
    if(disp_refr->driver->render_start_cb) {
 800e988:	4b3c      	ldr	r3, [pc, #240]	; (800ea7c <refr_invalid_areas+0x144>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e990:	2b00      	cmp	r3, #0
 800e992:	d008      	beq.n	800e9a6 <refr_invalid_areas+0x6e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800e994:	4b39      	ldr	r3, [pc, #228]	; (800ea7c <refr_invalid_areas+0x144>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99c:	4a37      	ldr	r2, [pc, #220]	; (800ea7c <refr_invalid_areas+0x144>)
 800e99e:	6812      	ldr	r2, [r2, #0]
 800e9a0:	6812      	ldr	r2, [r2, #0]
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	4798      	blx	r3
    }

    disp_refr->driver->draw_buf->last_area = 0;
 800e9a6:	4b35      	ldr	r3, [pc, #212]	; (800ea7c <refr_invalid_areas+0x144>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68da      	ldr	r2, [r3, #12]
 800e9ae:	7e13      	ldrb	r3, [r2, #24]
 800e9b0:	f36f 0300 	bfc	r3, #0, #1
 800e9b4:	7613      	strb	r3, [r2, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800e9b6:	4b31      	ldr	r3, [pc, #196]	; (800ea7c <refr_invalid_areas+0x144>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68da      	ldr	r2, [r3, #12]
 800e9be:	7e13      	ldrb	r3, [r2, #24]
 800e9c0:	f36f 0341 	bfc	r3, #1, #1
 800e9c4:	7613      	strb	r3, [r2, #24]
    disp_refr->rendering_in_progress = true;
 800e9c6:	4b2d      	ldr	r3, [pc, #180]	; (800ea7c <refr_invalid_areas+0x144>)
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800e9ce:	f043 0304 	orr.w	r3, r3, #4
 800e9d2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    for(i = 0; i < disp_refr->inv_p; i++) {
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	607b      	str	r3, [r7, #4]
 800e9da:	e037      	b.n	800ea4c <refr_invalid_areas+0x114>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800e9dc:	4b27      	ldr	r3, [pc, #156]	; (800ea7c <refr_invalid_areas+0x144>)
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d12b      	bne.n	800ea46 <refr_invalid_areas+0x10e>

            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d107      	bne.n	800ea06 <refr_invalid_areas+0xce>
 800e9f6:	4b21      	ldr	r3, [pc, #132]	; (800ea7c <refr_invalid_areas+0x144>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	7e13      	ldrb	r3, [r2, #24]
 800ea00:	f043 0301 	orr.w	r3, r3, #1
 800ea04:	7613      	strb	r3, [r2, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 800ea06:	4b1d      	ldr	r3, [pc, #116]	; (800ea7c <refr_invalid_areas+0x144>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68da      	ldr	r2, [r3, #12]
 800ea0e:	7e13      	ldrb	r3, [r2, #24]
 800ea10:	f36f 0341 	bfc	r3, #1, #1
 800ea14:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800ea16:	4b19      	ldr	r3, [pc, #100]	; (800ea7c <refr_invalid_areas+0x144>)
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3306      	adds	r3, #6
 800ea1e:	00db      	lsls	r3, r3, #3
 800ea20:	4413      	add	r3, r2
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 f82c 	bl	800ea80 <refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800ea28:	4b14      	ldr	r3, [pc, #80]	; (800ea7c <refr_invalid_areas+0x144>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3306      	adds	r3, #6
 800ea30:	00db      	lsls	r3, r3, #3
 800ea32:	4413      	add	r3, r2
 800ea34:	4618      	mov	r0, r3
 800ea36:	f011 fde8 	bl	802060a <lv_area_get_size>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	4b0e      	ldr	r3, [pc, #56]	; (800ea78 <refr_invalid_areas+0x140>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4413      	add	r3, r2
 800ea42:	4a0d      	ldr	r2, [pc, #52]	; (800ea78 <refr_invalid_areas+0x140>)
 800ea44:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	607b      	str	r3, [r7, #4]
 800ea4c:	4b0b      	ldr	r3, [pc, #44]	; (800ea7c <refr_invalid_areas+0x144>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800ea54:	461a      	mov	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	dbbf      	blt.n	800e9dc <refr_invalid_areas+0xa4>
        }
    }

    disp_refr->rendering_in_progress = false;
 800ea5c:	4b07      	ldr	r3, [pc, #28]	; (800ea7c <refr_invalid_areas+0x144>)
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800ea64:	f36f 0382 	bfc	r3, #2, #1
 800ea68:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800ea6c:	e000      	b.n	800ea70 <refr_invalid_areas+0x138>
    if(disp_refr->inv_p == 0) return;
 800ea6e:	bf00      	nop
}
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	20000714 	.word	0x20000714
 800ea7c:	20000718 	.word	0x20000718

0800ea80 <refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void refr_area(const lv_area_t * area_p)
{
 800ea80:	b590      	push	{r4, r7, lr}
 800ea82:	b08f      	sub	sp, #60	; 0x3c
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	6078      	str	r0, [r7, #4]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800ea88:	4b8e      	ldr	r3, [pc, #568]	; (800ecc4 <refr_area+0x244>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea90:	62bb      	str	r3, [r7, #40]	; 0x28
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ea92:	4b8c      	ldr	r3, [pc, #560]	; (800ecc4 <refr_area+0x244>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	689a      	ldr	r2, [r3, #8]
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	601a      	str	r2, [r3, #0]

    /*With full refresh just redraw directly into the buffer*/
    /*In direct mode draw directly on the absolute coordinates of the buffer*/
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800eaa0:	4b88      	ldr	r3, [pc, #544]	; (800ecc4 <refr_area+0x244>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	7c1b      	ldrb	r3, [r3, #16]
 800eaa8:	f003 0302 	and.w	r3, r3, #2
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d108      	bne.n	800eac4 <refr_area+0x44>
 800eab2:	4b84      	ldr	r3, [pc, #528]	; (800ecc4 <refr_area+0x244>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	7c1b      	ldrb	r3, [r3, #16]
 800eaba:	f003 0301 	and.w	r3, r3, #1
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d04f      	beq.n	800eb64 <refr_area+0xe4>
        lv_area_t disp_area;
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800eac4:	4b7f      	ldr	r3, [pc, #508]	; (800ecc4 <refr_area+0x244>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4618      	mov	r0, r3
 800eaca:	f011 f937 	bl	801fd3c <lv_disp_get_hor_res>
 800eace:	4603      	mov	r3, r0
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	3b01      	subs	r3, #1
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	b21c      	sxth	r4, r3
 800ead8:	4b7a      	ldr	r3, [pc, #488]	; (800ecc4 <refr_area+0x244>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4618      	mov	r0, r3
 800eade:	f011 f953 	bl	801fd88 <lv_disp_get_ver_res>
 800eae2:	4603      	mov	r3, r0
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	3b01      	subs	r3, #1
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	b21b      	sxth	r3, r3
 800eaec:	f107 000c 	add.w	r0, r7, #12
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	4623      	mov	r3, r4
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	2100      	movs	r1, #0
 800eaf8:	f011 fd50 	bl	802059c <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 800eafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafe:	f107 020c 	add.w	r2, r7, #12
 800eb02:	605a      	str	r2, [r3, #4]

        if(disp_refr->driver->full_refresh) {
 800eb04:	4b6f      	ldr	r3, [pc, #444]	; (800ecc4 <refr_area+0x244>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	7c1b      	ldrb	r3, [r3, #16]
 800eb0c:	f003 0302 	and.w	r3, r3, #2
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00f      	beq.n	800eb36 <refr_area+0xb6>
            disp_refr->driver->draw_buf->last_part = 1;
 800eb16:	4b6b      	ldr	r3, [pc, #428]	; (800ecc4 <refr_area+0x244>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	7e13      	ldrb	r3, [r2, #24]
 800eb20:	f043 0302 	orr.w	r3, r3, #2
 800eb24:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	f107 020c 	add.w	r2, r7, #12
 800eb2c:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800eb2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb30:	f000 f8ca 	bl	800ecc8 <refr_area_part>
 800eb34:	e0c3      	b.n	800ecbe <refr_area+0x23e>
        }
        else {
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800eb36:	4b63      	ldr	r3, [pc, #396]	; (800ecc4 <refr_area+0x244>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	4a61      	ldr	r2, [pc, #388]	; (800ecc4 <refr_area+0x244>)
 800eb40:	6812      	ldr	r2, [r2, #0]
 800eb42:	6812      	ldr	r2, [r2, #0]
 800eb44:	68d2      	ldr	r2, [r2, #12]
 800eb46:	699b      	ldr	r3, [r3, #24]
 800eb48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eb4c:	b2d9      	uxtb	r1, r3
 800eb4e:	7e13      	ldrb	r3, [r2, #24]
 800eb50:	f361 0341 	bfi	r3, r1, #1, #1
 800eb54:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = area_p;
 800eb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800eb5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb5e:	f000 f8b3 	bl	800ecc8 <refr_area_part>
 800eb62:	e0ac      	b.n	800ecbe <refr_area+0x23e>
        return;
    }

    /*Normal refresh: draw the area in parts*/
    /*Calculate the max row num*/
    lv_coord_t w = lv_area_get_width(area_p);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7ff fb89 	bl	800e27c <lv_area_get_width>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h = lv_area_get_height(area_p);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7ff fb9b 	bl	800e2aa <lv_area_get_height>
 800eb74:	4603      	mov	r3, r0
 800eb76:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800eb7e:	4b51      	ldr	r3, [pc, #324]	; (800ecc4 <refr_area+0x244>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f011 f900 	bl	801fd88 <lv_disp_get_ver_res>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	429c      	cmp	r4, r3
 800eb8c:	db0a      	blt.n	800eba4 <refr_area+0x124>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800eb8e:	4b4d      	ldr	r3, [pc, #308]	; (800ecc4 <refr_area+0x244>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f011 f8f8 	bl	801fd88 <lv_disp_get_ver_res>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	b29b      	uxth	r3, r3
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800eba0:	b21b      	sxth	r3, r3
 800eba2:	e002      	b.n	800ebaa <refr_area+0x12a>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ebaa:	847b      	strh	r3, [r7, #34]	; 0x22

    int32_t max_row = get_max_row(disp_refr, w, h);
 800ebac:	4b45      	ldr	r3, [pc, #276]	; (800ecc4 <refr_area+0x244>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ebb4:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 fd59 	bl	800f670 <get_max_row>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	61fb      	str	r3, [r7, #28]

    lv_coord_t row;
    lv_coord_t row_last = 0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_area_t sub_area;
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	885b      	ldrh	r3, [r3, #2]
 800ebca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ebcc:	e042      	b.n	800ec54 <refr_area+0x1d4>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebd4:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ebdc:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800ebde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ebe0:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = row + max_row - 1;
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ebe8:	4413      	add	r3, r2
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	3b01      	subs	r3, #1
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	b21b      	sxth	r3, r3
 800ebf2:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800ebf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf6:	f107 0214 	add.w	r2, r7, #20
 800ebfa:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	f107 0214 	add.w	r2, r7, #20
 800ec02:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ec04:	4b2f      	ldr	r3, [pc, #188]	; (800ecc4 <refr_area+0x244>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	689a      	ldr	r2, [r3, #8]
 800ec0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec10:	601a      	str	r2, [r3, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800ec12:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ec16:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	da01      	bge.n	800ec22 <refr_area+0x1a2>
 800ec1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec20:	837b      	strh	r3, [r7, #26]
        row_last = sub_area.y2;
 800ec22:	8b7b      	ldrh	r3, [r7, #26]
 800ec24:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800ec26:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ec2a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d107      	bne.n	800ec42 <refr_area+0x1c2>
 800ec32:	4b24      	ldr	r3, [pc, #144]	; (800ecc4 <refr_area+0x244>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68da      	ldr	r2, [r3, #12]
 800ec3a:	7e13      	ldrb	r3, [r2, #24]
 800ec3c:	f043 0302 	orr.w	r3, r3, #2
 800ec40:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800ec42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec44:	f000 f840 	bl	800ecc8 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800ec48:	69fb      	ldr	r3, [r7, #28]
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec4e:	4413      	add	r3, r2
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ec54:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	1e5a      	subs	r2, r3, #1
 800ec5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec62:	429a      	cmp	r2, r3
 800ec64:	ddb3      	ble.n	800ebce <refr_area+0x14e>
    }

    /*If the last y coordinates are not handled yet ...*/
    if(y2 != row_last) {
 800ec66:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ec6a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d025      	beq.n	800ecbe <refr_area+0x23e>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec78:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ec80:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800ec82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec84:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = y2;
 800ec86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec88:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800ec8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8c:	f107 0214 	add.w	r2, r7, #20
 800ec90:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800ec92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec94:	f107 0214 	add.w	r2, r7, #20
 800ec98:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ec9a:	4b0a      	ldr	r3, [pc, #40]	; (800ecc4 <refr_area+0x244>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	689a      	ldr	r2, [r3, #8]
 800eca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca6:	601a      	str	r2, [r3, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800eca8:	4b06      	ldr	r3, [pc, #24]	; (800ecc4 <refr_area+0x244>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68da      	ldr	r2, [r3, #12]
 800ecb0:	7e13      	ldrb	r3, [r2, #24]
 800ecb2:	f043 0302 	orr.w	r3, r3, #2
 800ecb6:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800ecb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecba:	f000 f805 	bl	800ecc8 <refr_area_part>
    }
}
 800ecbe:	3734      	adds	r7, #52	; 0x34
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd90      	pop	{r4, r7, pc}
 800ecc4:	20000718 	.word	0x20000718

0800ecc8 <refr_area_part>:

static void refr_area_part(lv_draw_ctx_t * draw_ctx)
{
 800ecc8:	b590      	push	{r4, r7, lr}
 800ecca:	b09d      	sub	sp, #116	; 0x74
 800eccc:	af02      	add	r7, sp, #8
 800ecce:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800ecd0:	4b89      	ldr	r3, [pc, #548]	; (800eef8 <refr_area_part+0x230>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f011 f8a9 	bl	801fe2c <lv_disp_get_draw_buf>
 800ecda:	65f8      	str	r0, [r7, #92]	; 0x5c

    /* Below the `area_p` area will be redrawn into the draw buffer.
     * In single buffered mode wait here until the buffer is freed.
     * In full double buffered mode wait here while the buffers are swapped and a buffer becomes available*/
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800ecdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecde:	68da      	ldr	r2, [r3, #12]
 800ece0:	4b85      	ldr	r3, [pc, #532]	; (800eef8 <refr_area_part+0x230>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecea:	4619      	mov	r1, r3
 800ecec:	4b82      	ldr	r3, [pc, #520]	; (800eef8 <refr_area_part+0x230>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ecf6:	fb01 f303 	mul.w	r3, r1, r3
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	bf0c      	ite	eq
 800ecfe:	2301      	moveq	r3, #1
 800ed00:	2300      	movne	r3, #0
 800ed02:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800ed06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d003      	beq.n	800ed16 <refr_area_part+0x4e>
 800ed0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d01b      	beq.n	800ed4e <refr_area_part+0x86>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800ed16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed18:	681b      	ldr	r3, [r3, #0]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d01b      	beq.n	800ed56 <refr_area_part+0x8e>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800ed1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d017      	beq.n	800ed56 <refr_area_part+0x8e>
 800ed26:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d013      	beq.n	800ed56 <refr_area_part+0x8e>
        while(draw_buf->flushing) {
 800ed2e:	e00e      	b.n	800ed4e <refr_area_part+0x86>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800ed30:	4b71      	ldr	r3, [pc, #452]	; (800eef8 <refr_area_part+0x230>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d008      	beq.n	800ed4e <refr_area_part+0x86>
 800ed3c:	4b6e      	ldr	r3, [pc, #440]	; (800eef8 <refr_area_part+0x230>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed44:	4a6c      	ldr	r2, [pc, #432]	; (800eef8 <refr_area_part+0x230>)
 800ed46:	6812      	ldr	r2, [r2, #0]
 800ed48:	6812      	ldr	r2, [r2, #0]
 800ed4a:	4610      	mov	r0, r2
 800ed4c:	4798      	blx	r3
        while(draw_buf->flushing) {
 800ed4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed50:	691b      	ldr	r3, [r3, #16]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1ec      	bne.n	800ed30 <refr_area_part+0x68>
            }
        }
#endif
    }

    lv_obj_t * top_act_scr = NULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	667b      	str	r3, [r7, #100]	; 0x64
    lv_obj_t * top_prev_scr = NULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	663b      	str	r3, [r7, #96]	; 0x60

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685c      	ldr	r4, [r3, #4]
 800ed62:	4b65      	ldr	r3, [pc, #404]	; (800eef8 <refr_area_part+0x230>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7f5 faf2 	bl	8004350 <lv_disp_get_scr_act>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4620      	mov	r0, r4
 800ed72:	f000 f8fd 	bl	800ef70 <lv_refr_get_top_obj>
 800ed76:	6678      	str	r0, [r7, #100]	; 0x64
    if(disp_refr->prev_scr) {
 800ed78:	4b5f      	ldr	r3, [pc, #380]	; (800eef8 <refr_area_part+0x230>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d009      	beq.n	800ed96 <refr_area_part+0xce>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	685a      	ldr	r2, [r3, #4]
 800ed86:	4b5c      	ldr	r3, [pc, #368]	; (800eef8 <refr_area_part+0x230>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	695b      	ldr	r3, [r3, #20]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	4610      	mov	r0, r2
 800ed90:	f000 f8ee 	bl	800ef70 <lv_refr_get_top_obj>
 800ed94:	6638      	str	r0, [r7, #96]	; 0x60
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800ed96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f040 8087 	bne.w	800eeac <refr_area_part+0x1e4>
 800ed9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f040 8083 	bne.w	800eeac <refr_area_part+0x1e4>
        lv_area_t a;
        lv_area_set(&a, 0, 0,
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800eda6:	4b54      	ldr	r3, [pc, #336]	; (800eef8 <refr_area_part+0x230>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4618      	mov	r0, r3
 800edac:	f010 ffc6 	bl	801fd3c <lv_disp_get_hor_res>
 800edb0:	4603      	mov	r3, r0
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	3b01      	subs	r3, #1
 800edb6:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800edb8:	b21c      	sxth	r4, r3
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800edba:	4b4f      	ldr	r3, [pc, #316]	; (800eef8 <refr_area_part+0x230>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f010 ffe2 	bl	801fd88 <lv_disp_get_ver_res>
 800edc4:	4603      	mov	r3, r0
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	3b01      	subs	r3, #1
 800edca:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800edcc:	b21b      	sxth	r3, r3
 800edce:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	4623      	mov	r3, r4
 800edd6:	2200      	movs	r2, #0
 800edd8:	2100      	movs	r1, #0
 800edda:	f011 fbdf 	bl	802059c <lv_area_set>
        if(draw_ctx->draw_bg) {
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d020      	beq.n	800ee28 <refr_area_part+0x160>
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800ede6:	f107 0308 	add.w	r3, r7, #8
 800edea:	4618      	mov	r0, r3
 800edec:	f005 f91e 	bl	801402c <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800edf0:	4b41      	ldr	r3, [pc, #260]	; (800eef8 <refr_area_part+0x230>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf6:	617b      	str	r3, [r7, #20]
            dsc.bg_img_opa = disp_refr->bg_opa;
 800edf8:	4b3f      	ldr	r3, [pc, #252]	; (800eef8 <refr_area_part+0x230>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ee00:	777b      	strb	r3, [r7, #29]
            dsc.bg_color = disp_refr->bg_color;
 800ee02:	4b3d      	ldr	r3, [pc, #244]	; (800eef8 <refr_area_part+0x230>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800ee0a:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800ee0c:	4b3a      	ldr	r3, [pc, #232]	; (800eef8 <refr_area_part+0x230>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ee14:	72fb      	strb	r3, [r7, #11]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ee1e:	f107 0108 	add.w	r1, r7, #8
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	4798      	blx	r3
 800ee26:	e041      	b.n	800eeac <refr_area_part+0x1e4>
        }
        else if(disp_refr->bg_img) {
 800ee28:	4b33      	ldr	r3, [pc, #204]	; (800eef8 <refr_area_part+0x230>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d025      	beq.n	800ee7e <refr_area_part+0x1b6>
            lv_img_header_t header;
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800ee32:	4b31      	ldr	r3, [pc, #196]	; (800eef8 <refr_area_part+0x230>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee38:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f005 fb00 	bl	8014444 <lv_img_decoder_get_info>
 800ee44:	4603      	mov	r3, r0
 800ee46:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if(res == LV_RES_OK) {
 800ee4a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d12c      	bne.n	800eeac <refr_area_part+0x1e4>
                lv_draw_img_dsc_t dsc;
                lv_draw_img_dsc_init(&dsc);
 800ee52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee56:	4618      	mov	r0, r3
 800ee58:	f001 f997 	bl	801018a <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800ee5c:	4b26      	ldr	r3, [pc, #152]	; (800eef8 <refr_area_part+0x230>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ee64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800ee68:	4b23      	ldr	r3, [pc, #140]	; (800eef8 <refr_area_part+0x230>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ee72:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f001 f9a4 	bl	80101c4 <lv_draw_img>
 800ee7c:	e016      	b.n	800eeac <refr_area_part+0x1e4>
                LV_LOG_WARN("Can't draw the background image");
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800ee7e:	f107 0308 	add.w	r3, r7, #8
 800ee82:	4618      	mov	r0, r3
 800ee84:	f005 f8d2 	bl	801402c <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800ee88:	4b1b      	ldr	r3, [pc, #108]	; (800eef8 <refr_area_part+0x230>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800ee90:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800ee92:	4b19      	ldr	r3, [pc, #100]	; (800eef8 <refr_area_part+0x230>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ee9a:	72fb      	strb	r3, [r7, #11]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	f107 0308 	add.w	r3, r7, #8
 800eea4:	4619      	mov	r1, r3
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f005 f904 	bl	80140b4 <lv_draw_rect>
        }
    }

    if(disp_refr->draw_prev_over_act) {
 800eeac:	4b12      	ldr	r3, [pc, #72]	; (800eef8 <refr_area_part+0x230>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d01e      	beq.n	800eefc <refr_area_part+0x234>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800eebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d103      	bne.n	800eecc <refr_area_part+0x204>
 800eec4:	4b0c      	ldr	r3, [pc, #48]	; (800eef8 <refr_area_part+0x230>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800eecc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f000 f8b4 	bl	800f03c <refr_obj_and_children>

        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800eed4:	4b08      	ldr	r3, [pc, #32]	; (800eef8 <refr_area_part+0x230>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	695b      	ldr	r3, [r3, #20]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d029      	beq.n	800ef32 <refr_area_part+0x26a>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800eede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d103      	bne.n	800eeec <refr_area_part+0x224>
 800eee4:	4b04      	ldr	r3, [pc, #16]	; (800eef8 <refr_area_part+0x230>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800eeec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 f8a4 	bl	800f03c <refr_obj_and_children>
 800eef4:	e01d      	b.n	800ef32 <refr_area_part+0x26a>
 800eef6:	bf00      	nop
 800eef8:	20000718 	.word	0x20000718
        }
    }
    else {
        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800eefc:	4b1b      	ldr	r3, [pc, #108]	; (800ef6c <refr_area_part+0x2a4>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d00a      	beq.n	800ef1c <refr_area_part+0x254>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800ef06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d103      	bne.n	800ef14 <refr_area_part+0x24c>
 800ef0c:	4b17      	ldr	r3, [pc, #92]	; (800ef6c <refr_area_part+0x2a4>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	695b      	ldr	r3, [r3, #20]
 800ef12:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800ef14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 f890 	bl	800f03c <refr_obj_and_children>
        }

        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800ef1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d103      	bne.n	800ef2a <refr_area_part+0x262>
 800ef22:	4b12      	ldr	r3, [pc, #72]	; (800ef6c <refr_area_part+0x2a4>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	691b      	ldr	r3, [r3, #16]
 800ef28:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800ef2a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 f885 	bl	800f03c <refr_obj_and_children>
    }

    /*Also refresh top and sys layer unconditionally*/
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800ef32:	4b0e      	ldr	r3, [pc, #56]	; (800ef6c <refr_area_part+0x2a4>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7f5 fa44 	bl	80043c4 <lv_disp_get_layer_top>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	4619      	mov	r1, r3
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f87b 	bl	800f03c <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800ef46:	4b09      	ldr	r3, [pc, #36]	; (800ef6c <refr_area_part+0x2a4>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7f5 fa4f 	bl	80043ee <lv_disp_get_layer_sys>
 800ef50:	4603      	mov	r3, r0
 800ef52:	4619      	mov	r1, r3
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 f871 	bl	800f03c <refr_obj_and_children>

    draw_buf_flush(disp_refr);
 800ef5a:	4b04      	ldr	r3, [pc, #16]	; (800ef6c <refr_area_part+0x2a4>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f000 ff22 	bl	800fda8 <draw_buf_flush>
}
 800ef64:	bf00      	nop
 800ef66:	376c      	adds	r7, #108	; 0x6c
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd90      	pop	{r4, r7, pc}
 800ef6c:	20000718 	.word	0x20000718

0800ef70 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b088      	sub	sp, #32
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	61fb      	str	r3, [r7, #28]

    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	3314      	adds	r3, #20
 800ef82:	2200      	movs	r2, #0
 800ef84:	4619      	mov	r1, r3
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f011 fdb0 	bl	8020aec <_lv_area_is_in>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	f083 0301 	eor.w	r3, r3, #1
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d001      	beq.n	800ef9c <lv_refr_get_top_obj+0x2c>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	e04a      	b.n	800f032 <lv_refr_get_top_obj+0xc2>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	6838      	ldr	r0, [r7, #0]
 800efa0:	f7f6 ffb3 	bl	8005f0a <lv_obj_has_flag>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d001      	beq.n	800efae <lv_refr_get_top_obj+0x3e>
 800efaa:	2300      	movs	r3, #0
 800efac:	e041      	b.n	800f032 <lv_refr_get_top_obj+0xc2>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800efae:	6838      	ldr	r0, [r7, #0]
 800efb0:	f7f9 f8a4 	bl	80080fc <_lv_obj_get_layer_type>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <lv_refr_get_top_obj+0x4e>
 800efba:	2300      	movs	r3, #0
 800efbc:	e039      	b.n	800f032 <lv_refr_get_top_obj+0xc2>

    /*If this object is fully cover the draw area then check the children too*/
    lv_cover_check_info_t info;
    info.res = LV_COVER_RES_COVER;
 800efbe:	2300      	movs	r3, #0
 800efc0:	723b      	strb	r3, [r7, #8]
    info.area = area_p;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	60fb      	str	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800efc6:	f107 0308 	add.w	r3, r7, #8
 800efca:	461a      	mov	r2, r3
 800efcc:	2112      	movs	r1, #18
 800efce:	6838      	ldr	r0, [r7, #0]
 800efd0:	f7f5 fdc2 	bl	8004b58 <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800efd4:	7a3b      	ldrb	r3, [r7, #8]
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	d101      	bne.n	800efde <lv_refr_get_top_obj+0x6e>
 800efda:	2300      	movs	r3, #0
 800efdc:	e029      	b.n	800f032 <lv_refr_get_top_obj+0xc2>

    int32_t i;
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800efde:	6838      	ldr	r0, [r7, #0]
 800efe0:	f7ff f808 	bl	800dff4 <lv_obj_get_child_cnt>
 800efe4:	4603      	mov	r3, r0
 800efe6:	617b      	str	r3, [r7, #20]
    for(i = child_cnt - 1; i >= 0; i--) {
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	3b01      	subs	r3, #1
 800efec:	61bb      	str	r3, [r7, #24]
 800efee:	e012      	b.n	800f016 <lv_refr_get_top_obj+0xa6>
        lv_obj_t * child = obj->spec_attr->children[i];
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	009b      	lsls	r3, r3, #2
 800effa:	4413      	add	r3, r2
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	613b      	str	r3, [r7, #16]
        found_p = lv_refr_get_top_obj(area_p, child);
 800f000:	6939      	ldr	r1, [r7, #16]
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7ff ffb4 	bl	800ef70 <lv_refr_get_top_obj>
 800f008:	61f8      	str	r0, [r7, #28]

        /*If a children is ok then break*/
        if(found_p != NULL) {
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d106      	bne.n	800f01e <lv_refr_get_top_obj+0xae>
    for(i = child_cnt - 1; i >= 0; i--) {
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	3b01      	subs	r3, #1
 800f014:	61bb      	str	r3, [r7, #24]
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	dae9      	bge.n	800eff0 <lv_refr_get_top_obj+0x80>
 800f01c:	e000      	b.n	800f020 <lv_refr_get_top_obj+0xb0>
            break;
 800f01e:	bf00      	nop
        }
    }

    /*If no better children use this object*/
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d104      	bne.n	800f030 <lv_refr_get_top_obj+0xc0>
 800f026:	7a3b      	ldrb	r3, [r7, #8]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d101      	bne.n	800f030 <lv_refr_get_top_obj+0xc0>
        found_p = obj;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	61fb      	str	r3, [r7, #28]
    }

    return found_p;
 800f030:	69fb      	ldr	r3, [r7, #28]
}
 800f032:	4618      	mov	r0, r3
 800f034:	3720      	adds	r7, #32
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
	...

0800f03c <refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void refr_obj_and_children(lv_draw_ctx_t * draw_ctx, lv_obj_t * top_obj)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b088      	sub	sp, #32
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
    /*Normally always will be a top_obj (at least the screen)
     *but in special cases (e.g. if the screen has alpha) it won't.
     *In this case use the screen directly*/
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d105      	bne.n	800f058 <refr_obj_and_children+0x1c>
 800f04c:	4b2c      	ldr	r3, [pc, #176]	; (800f100 <refr_obj_and_children+0xc4>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4618      	mov	r0, r3
 800f052:	f7f5 f97d 	bl	8004350 <lv_disp_get_scr_act>
 800f056:	6038      	str	r0, [r7, #0]
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d04c      	beq.n	800f0f8 <refr_obj_and_children+0xbc>

    /*Refresh the top object and its children*/
    refr_obj(draw_ctx, top_obj);
 800f05e:	6839      	ldr	r1, [r7, #0]
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 f931 	bl	800f2c8 <refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj*/
    lv_obj_t * parent;
    lv_obj_t * border_p = top_obj;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	61bb      	str	r3, [r7, #24]

    parent = lv_obj_get_parent(top_obj);
 800f06a:	6838      	ldr	r0, [r7, #0]
 800f06c:	f7fe ff7e 	bl	800df6c <lv_obj_get_parent>
 800f070:	61f8      	str	r0, [r7, #28]

    /*Do until not reach the screen*/
    while(parent != NULL) {
 800f072:	e03d      	b.n	800f0f0 <refr_obj_and_children+0xb4>
        bool go = false;
 800f074:	2300      	movs	r3, #0
 800f076:	75fb      	strb	r3, [r7, #23]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800f078:	69f8      	ldr	r0, [r7, #28]
 800f07a:	f7fe ffbb 	bl	800dff4 <lv_obj_get_child_cnt>
 800f07e:	60f8      	str	r0, [r7, #12]
        for(i = 0; i < child_cnt; i++) {
 800f080:	2300      	movs	r3, #0
 800f082:	613b      	str	r3, [r7, #16]
 800f084:	e01b      	b.n	800f0be <refr_obj_and_children+0x82>
            lv_obj_t * child = parent->spec_attr->children[i];
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4413      	add	r3, r2
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	60bb      	str	r3, [r7, #8]
            if(!go) {
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	f083 0301 	eor.w	r3, r3, #1
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d006      	beq.n	800f0b0 <refr_obj_and_children+0x74>
                if(child == border_p) go = true;
 800f0a2:	68ba      	ldr	r2, [r7, #8]
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d106      	bne.n	800f0b8 <refr_obj_and_children+0x7c>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	75fb      	strb	r3, [r7, #23]
 800f0ae:	e003      	b.n	800f0b8 <refr_obj_and_children+0x7c>
            }
            else {
                /*Refresh the objects*/
                refr_obj(draw_ctx, child);
 800f0b0:	68b9      	ldr	r1, [r7, #8]
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 f908 	bl	800f2c8 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	613b      	str	r3, [r7, #16]
 800f0be:	693a      	ldr	r2, [r7, #16]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d3df      	bcc.n	800f086 <refr_obj_and_children+0x4a>
            }
        }

        /*Call the post draw draw function of the parents of the to object*/
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	2117      	movs	r1, #23
 800f0ca:	69f8      	ldr	r0, [r7, #28]
 800f0cc:	f7f5 fd44 	bl	8004b58 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	2118      	movs	r1, #24
 800f0d4:	69f8      	ldr	r0, [r7, #28]
 800f0d6:	f7f5 fd3f 	bl	8004b58 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	2119      	movs	r1, #25
 800f0de:	69f8      	ldr	r0, [r7, #28]
 800f0e0:	f7f5 fd3a 	bl	8004b58 <lv_event_send>

        /*The new border will be the last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = parent;
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	61bb      	str	r3, [r7, #24]
        /*Go a level deeper*/
        parent = lv_obj_get_parent(parent);
 800f0e8:	69f8      	ldr	r0, [r7, #28]
 800f0ea:	f7fe ff3f 	bl	800df6c <lv_obj_get_parent>
 800f0ee:	61f8      	str	r0, [r7, #28]
    while(parent != NULL) {
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1be      	bne.n	800f074 <refr_obj_and_children+0x38>
 800f0f6:	e000      	b.n	800f0fa <refr_obj_and_children+0xbe>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800f0f8:	bf00      	nop
    }
}
 800f0fa:	3720      	adds	r7, #32
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	20000718 	.word	0x20000718

0800f104 <layer_get_area>:


static lv_res_t layer_get_area(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj, lv_layer_type_t layer_type,
                               lv_area_t * layer_area_out)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b090      	sub	sp, #64	; 0x40
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	603b      	str	r3, [r7, #0]
 800f110:	4613      	mov	r3, r2
 800f112:	71fb      	strb	r3, [r7, #7]
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800f114:	68b8      	ldr	r0, [r7, #8]
 800f116:	f7f8 ffdd 	bl	80080d4 <_lv_obj_get_ext_draw_size>
 800f11a:	4603      	mov	r3, r0
 800f11c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800f11e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f122:	4619      	mov	r1, r3
 800f124:	68b8      	ldr	r0, [r7, #8]
 800f126:	f7f9 fcf3 	bl	8008b10 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800f12a:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800f12e:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800f132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f136:	4618      	mov	r0, r3
 800f138:	f011 fa88 	bl	802064c <lv_area_increase>

    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d147      	bne.n	800f1d2 <layer_get_area+0xce>
        /*Get the transformed area and clip it to the current clip area.
         *This area needs to be updated on the screen.*/
        lv_area_t clip_coords_for_obj;
        lv_area_t tranf_coords = obj_coords_ext;
 800f142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f146:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f14a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f14e:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800f152:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f156:	2300      	movs	r3, #0
 800f158:	2200      	movs	r2, #0
 800f15a:	68b8      	ldr	r0, [r7, #8]
 800f15c:	f7fa f9cc 	bl	80094f8 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6899      	ldr	r1, [r3, #8]
 800f164:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f16c:	4618      	mov	r0, r3
 800f16e:	f011 fad9 	bl	8020724 <_lv_area_intersect>
 800f172:	4603      	mov	r3, r0
 800f174:	f083 0301 	eor.w	r3, r3, #1
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d001      	beq.n	800f182 <layer_get_area+0x7e>
            return LV_RES_INV;
 800f17e:	2300      	movs	r3, #0
 800f180:	e046      	b.n	800f210 <layer_get_area+0x10c>
        }

        /*Transform back (inverse) the transformed area.
         *It will tell which area of the non-transformed widget needs to be redrawn
         *in order to cover transformed area after transformation.*/
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800f182:	f107 031c 	add.w	r3, r7, #28
 800f186:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f18a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f18e:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800f192:	f107 011c 	add.w	r1, r7, #28
 800f196:	2301      	movs	r3, #1
 800f198:	2200      	movs	r2, #0
 800f19a:	68b8      	ldr	r0, [r7, #8]
 800f19c:	f7fa f9ac 	bl	80094f8 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800f1a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f1a4:	f107 011c 	add.w	r1, r7, #28
 800f1a8:	f107 031c 	add.w	r3, r7, #28
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f011 fab9 	bl	8020724 <_lv_area_intersect>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	f083 0301 	eor.w	r3, r3, #1
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <layer_get_area+0xbe>
            return LV_RES_INV;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e026      	b.n	800f210 <layer_get_area+0x10c>
        }

        *layer_area_out = inverse_clip_coords_for_obj;
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	f107 031c 	add.w	r3, r7, #28
 800f1ca:	cb03      	ldmia	r3!, {r0, r1}
 800f1cc:	6010      	str	r0, [r2, #0]
 800f1ce:	6051      	str	r1, [r2, #4]
 800f1d0:	e01d      	b.n	800f20e <layer_get_area+0x10a>
    }
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d118      	bne.n	800f20a <layer_get_area+0x106>
        lv_area_t clip_coords_for_obj;
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6899      	ldr	r1, [r3, #8]
 800f1dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f1e0:	f107 0314 	add.w	r3, r7, #20
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f011 fa9d 	bl	8020724 <_lv_area_intersect>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	f083 0301 	eor.w	r3, r3, #1
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d001      	beq.n	800f1fa <layer_get_area+0xf6>
            return LV_RES_INV;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	e00a      	b.n	800f210 <layer_get_area+0x10c>
        }
        *layer_area_out = clip_coords_for_obj;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	f107 0314 	add.w	r3, r7, #20
 800f202:	cb03      	ldmia	r3!, {r0, r1}
 800f204:	6010      	str	r0, [r2, #0]
 800f206:	6051      	str	r1, [r2, #4]
 800f208:	e001      	b.n	800f20e <layer_get_area+0x10a>
    }
    else {
        LV_LOG_WARN("Unhandled intermediate layer type");
        return LV_RES_INV;
 800f20a:	2300      	movs	r3, #0
 800f20c:	e000      	b.n	800f210 <layer_get_area+0x10c>
    }

    return LV_RES_OK;
 800f20e:	2301      	movs	r3, #1
}
 800f210:	4618      	mov	r0, r3
 800f212:	3740      	adds	r7, #64	; 0x40
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <layer_alpha_test>:

static void layer_alpha_test(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b088      	sub	sp, #32
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	70fb      	strb	r3, [r7, #3]
    bool has_alpha;
    /*If globally the layer has alpha maybe this smaller section has not (e.g. not on a rounded corner)
     *If turns out that this section has no alpha renderer can choose faster algorithms*/
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800f226:	78fb      	ldrb	r3, [r7, #3]
 800f228:	f003 0301 	and.w	r3, r3, #1
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d031      	beq.n	800f294 <layer_alpha_test+0x7c>
        /*Test for alpha by assuming there is no alpha. If it fails, fall back to rendering with alpha*/
        has_alpha = true;
 800f230:	2301      	movs	r3, #1
 800f232:	77fb      	strb	r3, [r7, #31]
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f103 0008 	add.w	r0, r3, #8
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	3314      	adds	r3, #20
 800f23e:	2200      	movs	r2, #0
 800f240:	4619      	mov	r1, r3
 800f242:	f011 fc53 	bl	8020aec <_lv_area_is_in>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d010      	beq.n	800f26e <layer_alpha_test+0x56>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800f24c:	2300      	movs	r3, #0
 800f24e:	753b      	strb	r3, [r7, #20]
            info.area = &layer_ctx->area_act;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	3308      	adds	r3, #8
 800f254:	61bb      	str	r3, [r7, #24]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800f256:	f107 0314 	add.w	r3, r7, #20
 800f25a:	461a      	mov	r2, r3
 800f25c:	2112      	movs	r1, #18
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7f5 fc7a 	bl	8004b58 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800f264:	7d3b      	ldrb	r3, [r7, #20]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d101      	bne.n	800f26e <layer_alpha_test+0x56>
 800f26a:	2300      	movs	r3, #0
 800f26c:	77fb      	strb	r3, [r7, #31]
        }

        if(has_alpha) {
 800f26e:	7ffb      	ldrb	r3, [r7, #31]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d011      	beq.n	800f298 <layer_alpha_test+0x80>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f282:	b29b      	uxth	r3, r3
 800f284:	4413      	add	r3, r2
 800f286:	b29b      	uxth	r3, r3
 800f288:	3b01      	subs	r3, #1
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	b21a      	sxth	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	81da      	strh	r2, [r3, #14]
 800f292:	e001      	b.n	800f298 <layer_alpha_test+0x80>
        }
    }
    else {
        has_alpha = false;
 800f294:	2300      	movs	r3, #0
 800f296:	77fb      	strb	r3, [r7, #31]
    }

    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	dd04      	ble.n	800f2b2 <layer_alpha_test+0x9a>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	81da      	strh	r2, [r3, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800f2b2:	7ffb      	ldrb	r3, [r7, #31]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	6879      	ldr	r1, [r7, #4]
 800f2b8:	68b8      	ldr	r0, [r7, #8]
 800f2ba:	f002 f9ef 	bl	801169c <lv_draw_layer_adjust>
}
 800f2be:	bf00      	nop
 800f2c0:	3720      	adds	r7, #32
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
	...

0800f2c8 <refr_obj>:


void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800f2c8:	b590      	push	{r4, r7, lr}
 800f2ca:	b08f      	sub	sp, #60	; 0x3c
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800f2d2:	2101      	movs	r1, #1
 800f2d4:	6838      	ldr	r0, [r7, #0]
 800f2d6:	f7f6 fe18 	bl	8005f0a <lv_obj_has_flag>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f040 81b8 	bne.w	800f652 <refr_obj+0x38a>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800f2e2:	6838      	ldr	r0, [r7, #0]
 800f2e4:	f7f8 ff0a 	bl	80080fc <_lv_obj_get_layer_type>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800f2ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d104      	bne.n	800f300 <refr_obj+0x38>
        lv_obj_redraw(draw_ctx, obj);
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7ff f860 	bl	800e3be <lv_obj_redraw>
 800f2fe:	e1af      	b.n	800f660 <refr_obj+0x398>
    }
    else {
        lv_opa_t opa = lv_obj_get_style_opa(obj, 0);
 800f300:	2100      	movs	r1, #0
 800f302:	6838      	ldr	r0, [r7, #0]
 800f304:	f7ff f830 	bl	800e368 <lv_obj_get_style_opa>
 800f308:	4603      	mov	r3, r0
 800f30a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(opa < LV_OPA_MIN) return;
 800f30e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f312:	2b01      	cmp	r3, #1
 800f314:	f240 819f 	bls.w	800f656 <refr_obj+0x38e>

        lv_area_t layer_area_full;
        lv_res_t res = layer_get_area(draw_ctx, obj, layer_type, &layer_area_full);
 800f318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f31c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7ff feee 	bl	800f104 <layer_get_area>
 800f328:	4603      	mov	r3, r0
 800f32a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        if(res != LV_RES_OK) return;
 800f32e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f332:	2b01      	cmp	r3, #1
 800f334:	f040 8191 	bne.w	800f65a <refr_obj+0x392>

        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800f338:	2301      	movs	r3, #1
 800f33a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	f103 0114 	add.w	r1, r3, #20
 800f344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f348:	2200      	movs	r2, #0
 800f34a:	4618      	mov	r0, r3
 800f34c:	f011 fbce 	bl	8020aec <_lv_area_is_in>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d014      	beq.n	800f380 <refr_obj+0xb8>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800f356:	2300      	movs	r3, #0
 800f358:	723b      	strb	r3, [r7, #8]
            info.area = &layer_area_full;
 800f35a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f35e:	60fb      	str	r3, [r7, #12]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800f360:	f107 0308 	add.w	r3, r7, #8
 800f364:	461a      	mov	r2, r3
 800f366:	2112      	movs	r1, #18
 800f368:	6838      	ldr	r0, [r7, #0]
 800f36a:	f7f5 fbf5 	bl	8004b58 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800f36e:	7a3b      	ldrb	r3, [r7, #8]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d105      	bne.n	800f380 <refr_obj+0xb8>
 800f374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f378:	f023 0301 	bic.w	r3, r3, #1
 800f37c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800f380:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f384:	2b01      	cmp	r3, #1
 800f386:	d105      	bne.n	800f394 <refr_obj+0xcc>
 800f388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f38c:	f043 0302 	orr.w	r3, r3, #2
 800f390:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800f394:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f39c:	4619      	mov	r1, r3
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f002 f926 	bl	80115f0 <lv_draw_layer_create>
 800f3a4:	6338      	str	r0, [r7, #48]	; 0x30
        if(layer_ctx == NULL) {
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f000 8158 	beq.w	800f65e <refr_obj+0x396>
            LV_LOG_WARN("Couldn't create a new layer context");
            return;
        }
        lv_point_t pivot = {
            .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 800f3ae:	2100      	movs	r1, #0
 800f3b0:	6838      	ldr	r0, [r7, #0]
 800f3b2:	f7fe ffb5 	bl	800e320 <lv_obj_get_style_transform_pivot_x>
 800f3b6:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800f3b8:	84bb      	strh	r3, [r7, #36]	; 0x24
            .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	6838      	ldr	r0, [r7, #0]
 800f3be:	f7fe ffc1 	bl	800e344 <lv_obj_get_style_transform_pivot_y>
 800f3c2:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800f3c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        };

        if(LV_COORD_IS_PCT(pivot.x)) {
 800f3c6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f3d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3d4:	d12d      	bne.n	800f432 <refr_obj+0x16a>
 800f3d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f3da:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f3de:	b21b      	sxth	r3, r3
 800f3e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f3e4:	dc25      	bgt.n	800f432 <refr_obj+0x16a>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800f3e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f3ea:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f3ee:	b21b      	sxth	r3, r3
 800f3f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f3f4:	dd07      	ble.n	800f406 <refr_obj+0x13e>
 800f3f6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f3fa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f3fe:	b21b      	sxth	r3, r3
 800f400:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800f404:	e005      	b.n	800f412 <refr_obj+0x14a>
 800f406:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f40a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f40e:	b21b      	sxth	r3, r3
 800f410:	461c      	mov	r4, r3
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	3314      	adds	r3, #20
 800f416:	4618      	mov	r0, r3
 800f418:	f7fe ff30 	bl	800e27c <lv_area_get_width>
 800f41c:	4603      	mov	r3, r0
 800f41e:	fb04 f303 	mul.w	r3, r4, r3
 800f422:	4a91      	ldr	r2, [pc, #580]	; (800f668 <refr_obj+0x3a0>)
 800f424:	fb82 1203 	smull	r1, r2, r2, r3
 800f428:	1152      	asrs	r2, r2, #5
 800f42a:	17db      	asrs	r3, r3, #31
 800f42c:	1ad3      	subs	r3, r2, r3
 800f42e:	b21b      	sxth	r3, r3
 800f430:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        if(LV_COORD_IS_PCT(pivot.y)) {
 800f432:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f436:	b29b      	uxth	r3, r3
 800f438:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f43c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f440:	d12d      	bne.n	800f49e <refr_obj+0x1d6>
 800f442:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f446:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f44a:	b21b      	sxth	r3, r3
 800f44c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f450:	dc25      	bgt.n	800f49e <refr_obj+0x1d6>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800f452:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f456:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f45a:	b21b      	sxth	r3, r3
 800f45c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f460:	dd07      	ble.n	800f472 <refr_obj+0x1aa>
 800f462:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f466:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f46a:	b21b      	sxth	r3, r3
 800f46c:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800f470:	e005      	b.n	800f47e <refr_obj+0x1b6>
 800f472:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f476:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f47a:	b21b      	sxth	r3, r3
 800f47c:	461c      	mov	r4, r3
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	3314      	adds	r3, #20
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe ff11 	bl	800e2aa <lv_area_get_height>
 800f488:	4603      	mov	r3, r0
 800f48a:	fb04 f303 	mul.w	r3, r4, r3
 800f48e:	4a76      	ldr	r2, [pc, #472]	; (800f668 <refr_obj+0x3a0>)
 800f490:	fb82 1203 	smull	r1, r2, r2, r3
 800f494:	1152      	asrs	r2, r2, #5
 800f496:	17db      	asrs	r3, r3, #31
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	b21b      	sxth	r3, r3
 800f49c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        lv_draw_img_dsc_t draw_dsc;
        lv_draw_img_dsc_init(&draw_dsc);
 800f49e:	f107 0310 	add.w	r3, r7, #16
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fe71 	bl	801018a <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800f4a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f4ac:	76bb      	strb	r3, [r7, #26]
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	6838      	ldr	r0, [r7, #0]
 800f4b2:	f7fe ff23 	bl	800e2fc <lv_obj_get_style_transform_angle>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	823b      	strh	r3, [r7, #16]
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800f4ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f4be:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800f4c2:	dd08      	ble.n	800f4d6 <refr_obj+0x20e>
 800f4c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	b21b      	sxth	r3, r3
 800f4d2:	823b      	strh	r3, [r7, #16]
 800f4d4:	e00b      	b.n	800f4ee <refr_obj+0x226>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800f4d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	da07      	bge.n	800f4ee <refr_obj+0x226>
 800f4de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	b21b      	sxth	r3, r3
 800f4ec:	823b      	strh	r3, [r7, #16]

        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	6838      	ldr	r0, [r7, #0]
 800f4f2:	f7fe fef1 	bl	800e2d8 <lv_obj_get_style_transform_zoom>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	827b      	strh	r3, [r7, #18]
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	6838      	ldr	r0, [r7, #0]
 800f500:	f7fe ff44 	bl	800e38c <lv_obj_get_style_blend_mode>
 800f504:	4603      	mov	r3, r0
 800f506:	f003 030f 	and.w	r3, r3, #15
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	7efb      	ldrb	r3, [r7, #27]
 800f50e:	f362 0303 	bfi	r3, r2, #0, #4
 800f512:	76fb      	strb	r3, [r7, #27]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800f514:	4b55      	ldr	r3, [pc, #340]	; (800f66c <refr_obj+0x3a4>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	7c1b      	ldrb	r3, [r3, #16]
 800f51c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f520:	b2da      	uxtb	r2, r3
 800f522:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f526:	f362 0300 	bfi	r3, r2, #0, #1
 800f52a:	f887 3020 	strb.w	r3, [r7, #32]

        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800f52e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f532:	f003 0302 	and.w	r3, r3, #2
 800f536:	2b00      	cmp	r3, #0
 800f538:	d07d      	beq.n	800f636 <refr_obj+0x36e>
            layer_ctx->area_act = layer_ctx->area_full;
 800f53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f53e:	3308      	adds	r3, #8
 800f540:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f544:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800f548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f54e:	b29a      	uxth	r2, r3
 800f550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f552:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f556:	b29b      	uxth	r3, r3
 800f558:	4413      	add	r3, r2
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	3b01      	subs	r3, #1
 800f55e:	b29b      	uxth	r3, r3
 800f560:	b21a      	sxth	r2, r3
 800f562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f564:	81da      	strh	r2, [r3, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f568:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f572:	429a      	cmp	r2, r3
 800f574:	dd5f      	ble.n	800f636 <refr_obj+0x36e>
 800f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f578:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	81da      	strh	r2, [r3, #14]
        }

        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800f580:	e059      	b.n	800f636 <refr_obj+0x36e>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800f582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f586:	f003 0302 	and.w	r3, r3, #2
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d006      	beq.n	800f59c <refr_obj+0x2d4>
                layer_alpha_test(obj, draw_ctx, layer_ctx, flags);
 800f58e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f594:	6879      	ldr	r1, [r7, #4]
 800f596:	6838      	ldr	r0, [r7, #0]
 800f598:	f7ff fe3e 	bl	800f218 <layer_alpha_test>
            }

            lv_obj_redraw(draw_ctx, obj);
 800f59c:	6839      	ldr	r1, [r7, #0]
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7fe ff0d 	bl	800e3be <lv_obj_redraw>

            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	4413      	add	r3, r2
 800f5b4:	b29a      	uxth	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	1ad3      	subs	r3, r2, r3
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	b21b      	sxth	r3, r3
 800f5c6:	82bb      	strh	r3, [r7, #20]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	4413      	add	r3, r2
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	b21b      	sxth	r3, r3
 800f5ea:	82fb      	strh	r3, [r7, #22]

            /*With LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE it should also go the next chunk*/
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800f5ec:	f107 0310 	add.w	r3, r7, #16
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f002 f866 	bl	80116c6 <lv_draw_layer_blend>

            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800f5fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5fe:	f003 0302 	and.w	r3, r3, #2
 800f602:	2b00      	cmp	r3, #0
 800f604:	d01f      	beq.n	800f646 <refr_obj+0x37e>

            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800f606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f608:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	3301      	adds	r3, #1
 800f610:	b29b      	uxth	r3, r3
 800f612:	b21a      	sxth	r2, r3
 800f614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f616:	815a      	strh	r2, [r3, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800f618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f61e:	b29a      	uxth	r2, r3
 800f620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f622:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f626:	b29b      	uxth	r3, r3
 800f628:	4413      	add	r3, r2
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	3b01      	subs	r3, #1
 800f62e:	b29b      	uxth	r3, r3
 800f630:	b21a      	sxth	r2, r3
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	81da      	strh	r2, [r3, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f63c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800f640:	429a      	cmp	r2, r3
 800f642:	dd9e      	ble.n	800f582 <refr_obj+0x2ba>
 800f644:	e000      	b.n	800f648 <refr_obj+0x380>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800f646:	bf00      	nop
        }

        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800f648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f002 f84f 	bl	80116ee <lv_draw_layer_destroy>
 800f650:	e006      	b.n	800f660 <refr_obj+0x398>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800f652:	bf00      	nop
 800f654:	e004      	b.n	800f660 <refr_obj+0x398>
        if(opa < LV_OPA_MIN) return;
 800f656:	bf00      	nop
 800f658:	e002      	b.n	800f660 <refr_obj+0x398>
        if(res != LV_RES_OK) return;
 800f65a:	bf00      	nop
 800f65c:	e000      	b.n	800f660 <refr_obj+0x398>
            return;
 800f65e:	bf00      	nop
    }
}
 800f660:	373c      	adds	r7, #60	; 0x3c
 800f662:	46bd      	mov	sp, r7
 800f664:	bd90      	pop	{r4, r7, pc}
 800f666:	bf00      	nop
 800f668:	51eb851f 	.word	0x51eb851f
 800f66c:	20000718 	.word	0x20000718

0800f670 <get_max_row>:


static uint32_t get_max_row(lv_disp_t * disp, lv_coord_t area_w, lv_coord_t area_h)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	460b      	mov	r3, r1
 800f67a:	807b      	strh	r3, [r7, #2]
 800f67c:	4613      	mov	r3, r2
 800f67e:	803b      	strh	r3, [r7, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	68da      	ldr	r2, [r3, #12]
 800f688:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f690:	617b      	str	r3, [r7, #20]

    if(max_row > area_h) max_row = area_h;
 800f692:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	429a      	cmp	r2, r3
 800f69a:	dd02      	ble.n	800f6a2 <get_max_row+0x32>
 800f69c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f6a0:	617b      	str	r3, [r7, #20]

    /*Round down the lines of draw_buf if rounding is added*/
    if(disp_refr->driver->rounder_cb) {
 800f6a2:	4b21      	ldr	r3, [pc, #132]	; (800f728 <get_max_row+0xb8>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	699b      	ldr	r3, [r3, #24]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d037      	beq.n	800f71e <get_max_row+0xae>
        lv_area_t tmp;
        tmp.x1 = 0;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	813b      	strh	r3, [r7, #8]
        tmp.x2 = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	81bb      	strh	r3, [r7, #12]
        tmp.y1 = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	817b      	strh	r3, [r7, #10]

        lv_coord_t h_tmp = max_row;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	827b      	strh	r3, [r7, #18]
        do {
            tmp.y2 = h_tmp - 1;
 800f6be:	8a7b      	ldrh	r3, [r7, #18]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	b21b      	sxth	r3, r3
 800f6c6:	81fb      	strh	r3, [r7, #14]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800f6c8:	4b17      	ldr	r3, [pc, #92]	; (800f728 <get_max_row+0xb8>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	699b      	ldr	r3, [r3, #24]
 800f6d0:	4a15      	ldr	r2, [pc, #84]	; (800f728 <get_max_row+0xb8>)
 800f6d2:	6812      	ldr	r2, [r2, #0]
 800f6d4:	6812      	ldr	r2, [r2, #0]
 800f6d6:	f107 0108 	add.w	r1, r7, #8
 800f6da:	4610      	mov	r0, r2
 800f6dc:	4798      	blx	r3

            /*If this height fits into `max_row` then fine*/
            if(lv_area_get_height(&tmp) <= max_row) break;
 800f6de:	f107 0308 	add.w	r3, r7, #8
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe fde1 	bl	800e2aa <lv_area_get_height>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	da0a      	bge.n	800f708 <get_max_row+0x98>

            /*Decrement the height of the area until it fits into `max_row` after rounding*/
            h_tmp--;
 800f6f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	827b      	strh	r3, [r7, #18]
        } while(h_tmp > 0);
 800f6fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f702:	2b00      	cmp	r3, #0
 800f704:	dcdb      	bgt.n	800f6be <get_max_row+0x4e>
 800f706:	e000      	b.n	800f70a <get_max_row+0x9a>
            if(lv_area_get_height(&tmp) <= max_row) break;
 800f708:	bf00      	nop

        if(h_tmp <= 0) {
 800f70a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	dc01      	bgt.n	800f716 <get_max_row+0xa6>
            LV_LOG_WARN("Can't set draw_buf height using the round function. (Wrong round_cb or to "
                        "small draw_buf)");
            return 0;
 800f712:	2300      	movs	r3, #0
 800f714:	e004      	b.n	800f720 <get_max_row+0xb0>
        }
        else {
            max_row = tmp.y2 + 1;
 800f716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f71a:	3301      	adds	r3, #1
 800f71c:	617b      	str	r3, [r7, #20]
        }
    }

    return max_row;
 800f71e:	697b      	ldr	r3, [r7, #20]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3718      	adds	r7, #24
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	20000718 	.word	0x20000718

0800f72c <draw_buf_rotate_180>:

static void draw_buf_rotate_180(lv_disp_drv_t * drv, lv_area_t * area, lv_color_t * color_p)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08a      	sub	sp, #40	; 0x28
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
    lv_coord_t area_w = lv_area_get_width(area);
 800f738:	68b8      	ldr	r0, [r7, #8]
 800f73a:	f7fe fd9f 	bl	800e27c <lv_area_get_width>
 800f73e:	4603      	mov	r3, r0
 800f740:	83fb      	strh	r3, [r7, #30]
    lv_coord_t area_h = lv_area_get_height(area);
 800f742:	68b8      	ldr	r0, [r7, #8]
 800f744:	f7fe fdb1 	bl	800e2aa <lv_area_get_height>
 800f748:	4603      	mov	r3, r0
 800f74a:	83bb      	strh	r3, [r7, #28]
    uint32_t total = area_w * area_h;
 800f74c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f750:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f754:	fb02 f303 	mul.w	r3, r2, r3
 800f758:	61bb      	str	r3, [r7, #24]
    /*Swap the beginning and end values*/
    lv_color_t tmp;
    uint32_t i = total - 1, j = 0;
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	3b01      	subs	r3, #1
 800f75e:	627b      	str	r3, [r7, #36]	; 0x24
 800f760:	2300      	movs	r3, #0
 800f762:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800f764:	e017      	b.n	800f796 <draw_buf_rotate_180+0x6a>
        tmp = color_p[i];
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	4413      	add	r3, r2
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	753b      	strb	r3, [r7, #20]
        color_p[i] = color_p[j];
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	6a3b      	ldr	r3, [r7, #32]
 800f774:	441a      	add	r2, r3
 800f776:	6879      	ldr	r1, [r7, #4]
 800f778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77a:	440b      	add	r3, r1
 800f77c:	7812      	ldrb	r2, [r2, #0]
 800f77e:	701a      	strb	r2, [r3, #0]
        color_p[j] = tmp;
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	6a3b      	ldr	r3, [r7, #32]
 800f784:	4413      	add	r3, r2
 800f786:	7d3a      	ldrb	r2, [r7, #20]
 800f788:	701a      	strb	r2, [r3, #0]
        i--;
 800f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78c:	3b01      	subs	r3, #1
 800f78e:	627b      	str	r3, [r7, #36]	; 0x24
        j++;
 800f790:	6a3b      	ldr	r3, [r7, #32]
 800f792:	3301      	adds	r3, #1
 800f794:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800f796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f798:	6a3b      	ldr	r3, [r7, #32]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d8e3      	bhi.n	800f766 <draw_buf_rotate_180+0x3a>
    }
    lv_coord_t tmp_coord;
    tmp_coord = area->y2;
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	88db      	ldrh	r3, [r3, #6]
 800f7a2:	82fb      	strh	r3, [r7, #22]
    area->y2 = drv->ver_res - area->y1 - 1;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	1ad3      	subs	r3, r2, r3
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	b21a      	sxth	r2, r3
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	80da      	strh	r2, [r3, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	8afb      	ldrh	r3, [r7, #22]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	b21a      	sxth	r2, r3
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	805a      	strh	r2, [r3, #2]
    tmp_coord = area->x2;
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	889b      	ldrh	r3, [r3, #4]
 800f7de:	82fb      	strh	r3, [r7, #22]
    area->x2 = drv->hor_res - area->x1 - 1;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	1ad3      	subs	r3, r2, r3
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	b21a      	sxth	r2, r3
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	809a      	strh	r2, [r3, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f804:	b29a      	uxth	r2, r3
 800f806:	8afb      	ldrh	r3, [r7, #22]
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	3b01      	subs	r3, #1
 800f80e:	b29b      	uxth	r3, r3
 800f810:	b21a      	sxth	r2, r3
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	801a      	strh	r2, [r3, #0]
}
 800f816:	bf00      	nop
 800f818:	3728      	adds	r7, #40	; 0x28
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <draw_buf_rotate_90>:

static LV_ATTRIBUTE_FAST_MEM void draw_buf_rotate_90(bool invert_i, lv_coord_t area_w, lv_coord_t area_h,
                                                     lv_color_t * orig_color_p, lv_color_t * rot_buf)
{
 800f81e:	b480      	push	{r7}
 800f820:	b08b      	sub	sp, #44	; 0x2c
 800f822:	af00      	add	r7, sp, #0
 800f824:	607b      	str	r3, [r7, #4]
 800f826:	4603      	mov	r3, r0
 800f828:	73fb      	strb	r3, [r7, #15]
 800f82a:	460b      	mov	r3, r1
 800f82c:	81bb      	strh	r3, [r7, #12]
 800f82e:	4613      	mov	r3, r2
 800f830:	817b      	strh	r3, [r7, #10]

    uint32_t invert = (area_w * area_h) - 1;
 800f832:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f836:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f83a:	fb02 f303 	mul.w	r3, r2, r3
 800f83e:	3b01      	subs	r3, #1
 800f840:	61bb      	str	r3, [r7, #24]
    uint32_t initial_i = ((area_w - 1) * area_h);
 800f842:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f846:	3b01      	subs	r3, #1
 800f848:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f84c:	fb02 f303 	mul.w	r3, r2, r3
 800f850:	617b      	str	r3, [r7, #20]
    for(lv_coord_t y = 0; y < area_h; y++) {
 800f852:	2300      	movs	r3, #0
 800f854:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f856:	e036      	b.n	800f8c6 <draw_buf_rotate_90+0xa8>
        uint32_t i = initial_i + y;
 800f858:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f85c:	697a      	ldr	r2, [r7, #20]
 800f85e:	4413      	add	r3, r2
 800f860:	623b      	str	r3, [r7, #32]
        if(invert_i)
 800f862:	7bfb      	ldrb	r3, [r7, #15]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d003      	beq.n	800f870 <draw_buf_rotate_90+0x52>
            i = invert - i;
 800f868:	69ba      	ldr	r2, [r7, #24]
 800f86a:	6a3b      	ldr	r3, [r7, #32]
 800f86c:	1ad3      	subs	r3, r2, r3
 800f86e:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800f870:	2300      	movs	r3, #0
 800f872:	83fb      	strh	r3, [r7, #30]
 800f874:	e01b      	b.n	800f8ae <draw_buf_rotate_90+0x90>
            rot_buf[i] = *(orig_color_p++);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	1c5a      	adds	r2, r3, #1
 800f87a:	607a      	str	r2, [r7, #4]
 800f87c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f87e:	6a3a      	ldr	r2, [r7, #32]
 800f880:	440a      	add	r2, r1
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	7013      	strb	r3, [r2, #0]
            if(invert_i)
 800f886:	7bfb      	ldrb	r3, [r7, #15]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d005      	beq.n	800f898 <draw_buf_rotate_90+0x7a>
                i += area_h;
 800f88c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f890:	6a3a      	ldr	r2, [r7, #32]
 800f892:	4413      	add	r3, r2
 800f894:	623b      	str	r3, [r7, #32]
 800f896:	e004      	b.n	800f8a2 <draw_buf_rotate_90+0x84>
            else
                i -= area_h;
 800f898:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f89c:	6a3a      	ldr	r2, [r7, #32]
 800f89e:	1ad3      	subs	r3, r2, r3
 800f8a0:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800f8a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	83fb      	strh	r3, [r7, #30]
 800f8ae:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800f8b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	dbdd      	blt.n	800f876 <draw_buf_rotate_90+0x58>
    for(lv_coord_t y = 0; y < area_h; y++) {
 800f8ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f8c6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f8ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	dbc2      	blt.n	800f858 <draw_buf_rotate_90+0x3a>
        }
    }
}
 800f8d2:	bf00      	nop
 800f8d4:	bf00      	nop
 800f8d6:	372c      	adds	r7, #44	; 0x2c
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <draw_buf_rotate4>:

/**
 * Helper function for draw_buf_rotate_90_sqr. Given a list of four numbers, rotate the entire list to the left.
 */
static inline void draw_buf_rotate4(lv_color_t * a, lv_color_t * b, lv_color_t * c, lv_color_t * d)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b087      	sub	sp, #28
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]
 800f8ec:	603b      	str	r3, [r7, #0]
    lv_color_t tmp;
    tmp = *a;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	753b      	strb	r3, [r7, #20]
    *a = *b;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	7812      	ldrb	r2, [r2, #0]
 800f8fa:	701a      	strb	r2, [r3, #0]
    *b = *c;
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	7812      	ldrb	r2, [r2, #0]
 800f902:	701a      	strb	r2, [r3, #0]
    *c = *d;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	683a      	ldr	r2, [r7, #0]
 800f908:	7812      	ldrb	r2, [r2, #0]
 800f90a:	701a      	strb	r2, [r3, #0]
    *d = tmp;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	7d3a      	ldrb	r2, [r7, #20]
 800f910:	701a      	strb	r2, [r3, #0]
}
 800f912:	bf00      	nop
 800f914:	371c      	adds	r7, #28
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr

0800f91e <draw_buf_rotate_90_sqr>:
/**
 * Rotate a square image 90/270 degrees in place.
 * @note inspired by https://stackoverflow.com/a/43694906
 */
static void draw_buf_rotate_90_sqr(bool is_270, lv_coord_t w, lv_color_t * color_p)
{
 800f91e:	b590      	push	{r4, r7, lr}
 800f920:	b085      	sub	sp, #20
 800f922:	af00      	add	r7, sp, #0
 800f924:	4603      	mov	r3, r0
 800f926:	603a      	str	r2, [r7, #0]
 800f928:	71fb      	strb	r3, [r7, #7]
 800f92a:	460b      	mov	r3, r1
 800f92c:	80bb      	strh	r3, [r7, #4]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800f92e:	2300      	movs	r3, #0
 800f930:	81fb      	strh	r3, [r7, #14]
 800f932:	e092      	b.n	800fa5a <draw_buf_rotate_90_sqr+0x13c>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800f934:	2300      	movs	r3, #0
 800f936:	81bb      	strh	r3, [r7, #12]
 800f938:	e07d      	b.n	800fa36 <draw_buf_rotate_90_sqr+0x118>
            lv_coord_t inv_i = (w - 1) - i;
 800f93a:	88ba      	ldrh	r2, [r7, #4]
 800f93c:	89fb      	ldrh	r3, [r7, #14]
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	b29b      	uxth	r3, r3
 800f942:	3b01      	subs	r3, #1
 800f944:	b29b      	uxth	r3, r3
 800f946:	817b      	strh	r3, [r7, #10]
            lv_coord_t inv_j = (w - 1) - j;
 800f948:	88ba      	ldrh	r2, [r7, #4]
 800f94a:	89bb      	ldrh	r3, [r7, #12]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	b29b      	uxth	r3, r3
 800f950:	3b01      	subs	r3, #1
 800f952:	b29b      	uxth	r3, r3
 800f954:	813b      	strh	r3, [r7, #8]
            if(is_270) {
 800f956:	79fb      	ldrb	r3, [r7, #7]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d033      	beq.n	800f9c4 <draw_buf_rotate_90_sqr+0xa6>
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800f95c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f960:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f964:	fb03 f202 	mul.w	r2, r3, r2
 800f968:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f96c:	4413      	add	r3, r2
 800f96e:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	1898      	adds	r0, r3, r2
                    &color_p[inv_j * w + i],
 800f974:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f978:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f97c:	fb03 f202 	mul.w	r2, r3, r2
 800f980:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f984:	4413      	add	r3, r2
 800f986:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800f98c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f990:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f994:	fb03 f202 	mul.w	r2, r3, r2
 800f998:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f99c:	4413      	add	r3, r2
 800f99e:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	189c      	adds	r4, r3, r2
                    &color_p[j * w + inv_i]
 800f9a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f9a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f9ac:	fb03 f202 	mul.w	r2, r3, r2
 800f9b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	4622      	mov	r2, r4
 800f9be:	f7ff ff8f 	bl	800f8e0 <draw_buf_rotate4>
 800f9c2:	e032      	b.n	800fa2a <draw_buf_rotate_90_sqr+0x10c>
                );
            }
            else {
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800f9c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f9cc:	fb03 f202 	mul.w	r2, r3, r2
 800f9d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	1898      	adds	r0, r3, r2
                    &color_p[j * w + inv_i],
 800f9dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f9e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f9e4:	fb03 f202 	mul.w	r2, r3, r2
 800f9e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800f9f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f9f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f9fc:	fb03 f202 	mul.w	r2, r3, r2
 800fa00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fa04:	4413      	add	r3, r2
 800fa06:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	189c      	adds	r4, r3, r2
                    &color_p[inv_j * w + i]
 800fa0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fa10:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fa14:	fb03 f202 	mul.w	r2, r3, r2
 800fa18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	4413      	add	r3, r2
 800fa24:	4622      	mov	r2, r4
 800fa26:	f7ff ff5b 	bl	800f8e0 <draw_buf_rotate4>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800fa2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	3301      	adds	r3, #1
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	81bb      	strh	r3, [r7, #12]
 800fa36:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fa3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	da00      	bge.n	800fa46 <draw_buf_rotate_90_sqr+0x128>
 800fa44:	3301      	adds	r3, #1
 800fa46:	105b      	asrs	r3, r3, #1
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	f6ff af76 	blt.w	800f93a <draw_buf_rotate_90_sqr+0x1c>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800fa4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	3301      	adds	r3, #1
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	81fb      	strh	r3, [r7, #14]
 800fa5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	da00      	bge.n	800fa64 <draw_buf_rotate_90_sqr+0x146>
 800fa62:	3301      	adds	r3, #1
 800fa64:	105b      	asrs	r3, r3, #1
 800fa66:	b21b      	sxth	r3, r3
 800fa68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	f6ff af61 	blt.w	800f934 <draw_buf_rotate_90_sqr+0x16>
                );
            }

        }
    }
}
 800fa72:	bf00      	nop
 800fa74:	bf00      	nop
 800fa76:	3714      	adds	r7, #20
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd90      	pop	{r4, r7, pc}

0800fa7c <draw_buf_rotate>:

/**
 * Rotate the draw_buf to the display's native orientation.
 */
static void draw_buf_rotate(lv_area_t * area, lv_color_t * color_p)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08a      	sub	sp, #40	; 0x28
 800fa80:	af02      	add	r7, sp, #8
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]
    lv_disp_drv_t * drv = disp_refr->driver;
 800fa86:	4b8e      	ldr	r3, [pc, #568]	; (800fcc0 <draw_buf_rotate+0x244>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	617b      	str	r3, [r7, #20]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800fa8e:	4b8c      	ldr	r3, [pc, #560]	; (800fcc0 <draw_buf_rotate+0x244>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	7c1b      	ldrb	r3, [r3, #16]
 800fa96:	f003 0302 	and.w	r3, r3, #2
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <draw_buf_rotate+0x34>
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	7c1b      	ldrb	r3, [r3, #16]
 800faa4:	f003 0304 	and.w	r3, r3, #4
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	2b00      	cmp	r3, #0
 800faac:	f040 8178 	bne.w	800fda0 <draw_buf_rotate+0x324>
        LV_LOG_ERROR("cannot rotate a full refreshed display!");
        return;
    }
    if(drv->rotated == LV_DISP_ROT_180) {
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	7c1b      	ldrb	r3, [r3, #16]
 800fab4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	2b20      	cmp	r3, #32
 800fabc:	d10a      	bne.n	800fad4 <draw_buf_rotate+0x58>
        draw_buf_rotate_180(drv, area, color_p);
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	6879      	ldr	r1, [r7, #4]
 800fac2:	6978      	ldr	r0, [r7, #20]
 800fac4:	f7ff fe32 	bl	800f72c <draw_buf_rotate_180>
        call_flush_cb(drv, area, color_p);
 800fac8:	683a      	ldr	r2, [r7, #0]
 800faca:	6879      	ldr	r1, [r7, #4]
 800facc:	6978      	ldr	r0, [r7, #20]
 800face:	f000 fa2b 	bl	800ff28 <call_flush_cb>
 800fad2:	e166      	b.n	800fda2 <draw_buf_rotate+0x326>
    }
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	7c1b      	ldrb	r3, [r3, #16]
 800fad8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	2b10      	cmp	r3, #16
 800fae0:	d007      	beq.n	800faf2 <draw_buf_rotate+0x76>
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	7c1b      	ldrb	r3, [r3, #16]
 800fae6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800faea:	b2db      	uxtb	r3, r3
 800faec:	2b30      	cmp	r3, #48	; 0x30
 800faee:	f040 8158 	bne.w	800fda2 <draw_buf_rotate+0x326>
        /*Allocate a temporary buffer to store rotated image*/
        lv_color_t * rot_buf = NULL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	61fb      	str	r3, [r7, #28]
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800faf6:	4b72      	ldr	r3, [pc, #456]	; (800fcc0 <draw_buf_rotate+0x244>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f010 f996 	bl	801fe2c <lv_disp_get_draw_buf>
 800fb00:	6138      	str	r0, [r7, #16]
        lv_coord_t area_w = lv_area_get_width(area);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7fe fbba 	bl	800e27c <lv_area_get_width>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	81fb      	strh	r3, [r7, #14]
        lv_coord_t area_h = lv_area_get_height(area);
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7fe fbcc 	bl	800e2aa <lv_area_get_height>
 800fb12:	4603      	mov	r3, r0
 800fb14:	81bb      	strh	r3, [r7, #12]
        /*Determine the maximum number of rows that can be rotated at a time*/
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800fb16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb1a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800fb1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb22:	b21b      	sxth	r3, r3
 800fb24:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	bfa8      	it	ge
 800fb2c:	4613      	movge	r3, r2
 800fb2e:	817b      	strh	r3, [r7, #10]
        lv_coord_t init_y_off;
        init_y_off = area->y1;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	885b      	ldrh	r3, [r3, #2]
 800fb34:	813b      	strh	r3, [r7, #8]
        if(drv->rotated == LV_DISP_ROT_90) {
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	7c1b      	ldrb	r3, [r3, #16]
 800fb3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	2b10      	cmp	r3, #16
 800fb42:	d11b      	bne.n	800fb7c <draw_buf_rotate+0x100>
            area->y2 = drv->ver_res - area->x1 - 1;
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	1ad3      	subs	r3, r2, r3
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	b21a      	sxth	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	80da      	strh	r2, [r3, #6]
            area->y1 = area->y2 - area_w + 1;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	89fb      	ldrh	r3, [r7, #14]
 800fb6c:	1ad3      	subs	r3, r2, r3
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	3301      	adds	r3, #1
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	b21a      	sxth	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	805a      	strh	r2, [r3, #2]
 800fb7a:	e010      	b.n	800fb9e <draw_buf_rotate+0x122>
        }
        else {
            area->y1 = area->x1;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	805a      	strh	r2, [r3, #2]
            area->y2 = area->y1 + area_w - 1;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	89fb      	ldrh	r3, [r7, #14]
 800fb90:	4413      	add	r3, r2
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	3b01      	subs	r3, #1
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	b21a      	sxth	r2, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	80da      	strh	r2, [r3, #6]
        }

        /*Rotate the screen in chunks, flushing after each one*/
        lv_coord_t row = 0;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800fba2:	e0ef      	b.n	800fd84 <draw_buf_rotate+0x308>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800fba4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fba8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fbac:	1ad2      	subs	r2, r2, r3
 800fbae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	bfa8      	it	ge
 800fbb6:	4613      	movge	r3, r2
 800fbb8:	833b      	strh	r3, [r7, #24]
            draw_buf->flushing = 1;
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	611a      	str	r2, [r3, #16]
            if((row == 0) && (area_h >= area_w)) {
 800fbc0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d144      	bne.n	800fc52 <draw_buf_rotate+0x1d6>
 800fbc8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fbcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	db3e      	blt.n	800fc52 <draw_buf_rotate+0x1d6>
                /*Rotate the initial area as a square*/
                height = area_w;
 800fbd4:	89fb      	ldrh	r3, [r7, #14]
 800fbd6:	833b      	strh	r3, [r7, #24]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	7c1b      	ldrb	r3, [r3, #16]
 800fbdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b30      	cmp	r3, #48	; 0x30
 800fbe4:	bf0c      	ite	eq
 800fbe6:	2301      	moveq	r3, #1
 800fbe8:	2300      	movne	r3, #0
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fbf0:	683a      	ldr	r2, [r7, #0]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7ff fe93 	bl	800f91e <draw_buf_rotate_90_sqr>
                if(drv->rotated == LV_DISP_ROT_90) {
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	7c1b      	ldrb	r3, [r3, #16]
 800fbfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b10      	cmp	r3, #16
 800fc04:	d10c      	bne.n	800fc20 <draw_buf_rotate+0x1a4>
                    area->x1 = init_y_off;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	893a      	ldrh	r2, [r7, #8]
 800fc0a:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800fc0c:	893a      	ldrh	r2, [r7, #8]
 800fc0e:	89fb      	ldrh	r3, [r7, #14]
 800fc10:	4413      	add	r3, r2
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	3b01      	subs	r3, #1
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	b21a      	sxth	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	809a      	strh	r2, [r3, #4]
                if(drv->rotated == LV_DISP_ROT_90) {
 800fc1e:	e06c      	b.n	800fcfa <draw_buf_rotate+0x27e>
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	893b      	ldrh	r3, [r7, #8]
 800fc2a:	1ad3      	subs	r3, r2, r3
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	b21a      	sxth	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - area_w + 1;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	89fb      	ldrh	r3, [r7, #14]
 800fc42:	1ad3      	subs	r3, r2, r3
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	3301      	adds	r3, #1
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	b21a      	sxth	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	801a      	strh	r2, [r3, #0]
                if(drv->rotated == LV_DISP_ROT_90) {
 800fc50:	e053      	b.n	800fcfa <draw_buf_rotate+0x27e>
                }
            }
            else {
                /*Rotate other areas using a maximum buffer size*/
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800fc52:	69fb      	ldr	r3, [r7, #28]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d104      	bne.n	800fc62 <draw_buf_rotate+0x1e6>
 800fc58:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800fc5c:	f012 f90c 	bl	8021e78 <lv_mem_buf_get>
 800fc60:	61f8      	str	r0, [r7, #28]
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	7c1b      	ldrb	r3, [r3, #16]
 800fc66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b30      	cmp	r3, #48	; 0x30
 800fc6e:	bf0c      	ite	eq
 800fc70:	2301      	moveq	r3, #1
 800fc72:	2300      	movne	r3, #0
 800fc74:	b2d8      	uxtb	r0, r3
 800fc76:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800fc7a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	9300      	str	r3, [sp, #0]
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	f7ff fdcb 	bl	800f81e <draw_buf_rotate_90>

                if(drv->rotated == LV_DISP_ROT_90) {
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	7c1b      	ldrb	r3, [r3, #16]
 800fc8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	2b10      	cmp	r3, #16
 800fc94:	d116      	bne.n	800fcc4 <draw_buf_rotate+0x248>
                    area->x1 = init_y_off + row;
 800fc96:	893a      	ldrh	r2, [r7, #8]
 800fc98:	8b7b      	ldrh	r3, [r7, #26]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	b21a      	sxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + row + height - 1;
 800fca4:	893a      	ldrh	r2, [r7, #8]
 800fca6:	8b7b      	ldrh	r3, [r7, #26]
 800fca8:	4413      	add	r3, r2
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	8b3b      	ldrh	r3, [r7, #24]
 800fcae:	4413      	add	r3, r2
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	b21a      	sxth	r2, r3
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	809a      	strh	r2, [r3, #4]
 800fcbc:	e01d      	b.n	800fcfa <draw_buf_rotate+0x27e>
 800fcbe:	bf00      	nop
 800fcc0:	20000718 	.word	0x20000718
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	893b      	ldrh	r3, [r7, #8]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	8b7b      	ldrh	r3, [r7, #26]
 800fcd4:	1ad3      	subs	r3, r2, r3
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	b21a      	sxth	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - height + 1;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	8b3b      	ldrh	r3, [r7, #24]
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	b21a      	sxth	r2, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	801a      	strh	r2, [r3, #0]
                }
            }

            /* The original part (chunk of the current area) were split into more parts here.
             * Set the original last_part flag on the last part of rotation. */
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800fcfa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fcfe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800fd02:	441a      	add	r2, r3
 800fd04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	db11      	blt.n	800fd30 <draw_buf_rotate+0x2b4>
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00a      	beq.n	800fd30 <draw_buf_rotate+0x2b4>
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	699b      	ldr	r3, [r3, #24]
 800fd1e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d003      	beq.n	800fd30 <draw_buf_rotate+0x2b4>
                draw_buf->flushing_last = 1;
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	615a      	str	r2, [r3, #20]
 800fd2e:	e002      	b.n	800fd36 <draw_buf_rotate+0x2ba>
            }
            else {
                draw_buf->flushing_last = 0;
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	2200      	movs	r2, #0
 800fd34:	615a      	str	r2, [r3, #20]
            }

            /*Flush the completed area to the display*/
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d101      	bne.n	800fd40 <draw_buf_rotate+0x2c4>
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	e000      	b.n	800fd42 <draw_buf_rotate+0x2c6>
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	461a      	mov	r2, r3
 800fd44:	6879      	ldr	r1, [r7, #4]
 800fd46:	6978      	ldr	r0, [r7, #20]
 800fd48:	f000 f8ee 	bl	800ff28 <call_flush_cb>
            /*FIXME: Rotation forces legacy behavior where rendering and flushing are done serially*/
            while(draw_buf->flushing) {
 800fd4c:	e007      	b.n	800fd5e <draw_buf_rotate+0x2e2>
                if(drv->wait_cb) drv->wait_cb(drv);
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d003      	beq.n	800fd5e <draw_buf_rotate+0x2e2>
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd5a:	6978      	ldr	r0, [r7, #20]
 800fd5c:	4798      	blx	r3
            while(draw_buf->flushing) {
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	691b      	ldr	r3, [r3, #16]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1f3      	bne.n	800fd4e <draw_buf_rotate+0x2d2>
            }
            color_p += area_w * height;
 800fd66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fd6a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800fd6e:	fb02 f303 	mul.w	r3, r2, r3
 800fd72:	461a      	mov	r2, r3
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	4413      	add	r3, r2
 800fd78:	603b      	str	r3, [r7, #0]
            row += height;
 800fd7a:	8b7a      	ldrh	r2, [r7, #26]
 800fd7c:	8b3b      	ldrh	r3, [r7, #24]
 800fd7e:	4413      	add	r3, r2
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800fd84:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fd88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	f6ff af09 	blt.w	800fba4 <draw_buf_rotate+0x128>
        }
        /*Free the allocated buffer at the end if necessary*/
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d004      	beq.n	800fda2 <draw_buf_rotate+0x326>
 800fd98:	69f8      	ldr	r0, [r7, #28]
 800fd9a:	f012 f919 	bl	8021fd0 <lv_mem_buf_release>
 800fd9e:	e000      	b.n	800fda2 <draw_buf_rotate+0x326>
        return;
 800fda0:	bf00      	nop
    }
}
 800fda2:	3720      	adds	r7, #32
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b086      	sub	sp, #24
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800fdb0:	4b5c      	ldr	r3, [pc, #368]	; (800ff24 <draw_buf_flush+0x17c>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f010 f839 	bl	801fe2c <lv_disp_get_draw_buf>
 800fdba:	6178      	str	r0, [r7, #20]

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdc2:	613b      	str	r3, [r7, #16]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d003      	beq.n	800fdd4 <draw_buf_flush+0x2c>
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd0:	6938      	ldr	r0, [r7, #16]
 800fdd2:	4798      	blx	r3

    /* In partial double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	68da      	ldr	r2, [r3, #12]
 800fdd8:	4b52      	ldr	r3, [pc, #328]	; (800ff24 <draw_buf_flush+0x17c>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fde2:	4619      	mov	r1, r3
 800fde4:	4b4f      	ldr	r3, [pc, #316]	; (800ff24 <draw_buf_flush+0x17c>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fdee:	fb01 f303 	mul.w	r3, r1, r3
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	bf0c      	ite	eq
 800fdf6:	2301      	moveq	r3, #1
 800fdf8:	2300      	movne	r3, #0
 800fdfa:	73fb      	strb	r3, [r7, #15]
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d01d      	beq.n	800fe40 <draw_buf_flush+0x98>
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d019      	beq.n	800fe40 <draw_buf_flush+0x98>
 800fe0c:	7bfb      	ldrb	r3, [r7, #15]
 800fe0e:	f083 0301 	eor.w	r3, r3, #1
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d013      	beq.n	800fe40 <draw_buf_flush+0x98>
        while(draw_buf->flushing) {
 800fe18:	e00e      	b.n	800fe38 <draw_buf_flush+0x90>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800fe1a:	4b42      	ldr	r3, [pc, #264]	; (800ff24 <draw_buf_flush+0x17c>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d008      	beq.n	800fe38 <draw_buf_flush+0x90>
 800fe26:	4b3f      	ldr	r3, [pc, #252]	; (800ff24 <draw_buf_flush+0x17c>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe2e:	4a3d      	ldr	r2, [pc, #244]	; (800ff24 <draw_buf_flush+0x17c>)
 800fe30:	6812      	ldr	r2, [r2, #0]
 800fe32:	6812      	ldr	r2, [r2, #0]
 800fe34:	4610      	mov	r0, r2
 800fe36:	4798      	blx	r3
        while(draw_buf->flushing) {
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	691b      	ldr	r3, [r3, #16]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1ec      	bne.n	800fe1a <draw_buf_flush+0x72>
        }
    }

    draw_buf->flushing = 1;
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	2201      	movs	r2, #1
 800fe44:	611a      	str	r2, [r3, #16]

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800fe46:	4b37      	ldr	r3, [pc, #220]	; (800ff24 <draw_buf_flush+0x17c>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	699b      	ldr	r3, [r3, #24]
 800fe50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d00d      	beq.n	800fe76 <draw_buf_flush+0xce>
 800fe5a:	4b32      	ldr	r3, [pc, #200]	; (800ff24 <draw_buf_flush+0x17c>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	699b      	ldr	r3, [r3, #24]
 800fe64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d003      	beq.n	800fe76 <draw_buf_flush+0xce>
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	2201      	movs	r2, #1
 800fe72:	615a      	str	r2, [r3, #20]
 800fe74:	e002      	b.n	800fe7c <draw_buf_flush+0xd4>
    else draw_buf->flushing_last = 0;
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	615a      	str	r2, [r3, #20]

    bool flushing_last = draw_buf->flushing_last;
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	695b      	ldr	r3, [r3, #20]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	bf14      	ite	ne
 800fe84:	2301      	movne	r3, #1
 800fe86:	2300      	moveq	r3, #0
 800fe88:	73bb      	strb	r3, [r7, #14]

    if(disp->driver->flush_cb) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	695b      	ldr	r3, [r3, #20]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d021      	beq.n	800fed8 <draw_buf_flush+0x130>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	7c1b      	ldrb	r3, [r3, #16]
 800fe9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d010      	beq.n	800fec6 <draw_buf_flush+0x11e>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	7c1b      	ldrb	r3, [r3, #16]
 800feaa:	f003 0304 	and.w	r3, r3, #4
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d008      	beq.n	800fec6 <draw_buf_flush+0x11e>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	685a      	ldr	r2, [r3, #4]
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4619      	mov	r1, r3
 800febe:	4610      	mov	r0, r2
 800fec0:	f7ff fddc 	bl	800fa7c <draw_buf_rotate>
 800fec4:	e008      	b.n	800fed8 <draw_buf_flush+0x130>
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6818      	ldr	r0, [r3, #0]
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	6859      	ldr	r1, [r3, #4]
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	f000 f828 	bl	800ff28 <call_flush_cb>
        }
    }

    /*If there are 2 buffers swap them. With direct mode swap only on the last area*/
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d01d      	beq.n	800ff1c <draw_buf_flush+0x174>
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d019      	beq.n	800ff1c <draw_buf_flush+0x174>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	7c1b      	ldrb	r3, [r3, #16]
 800feee:	f003 0301 	and.w	r3, r3, #1
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d002      	beq.n	800fefe <draw_buf_flush+0x156>
 800fef8:	7bbb      	ldrb	r3, [r7, #14]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00e      	beq.n	800ff1c <draw_buf_flush+0x174>
        if(draw_buf->buf_act == draw_buf->buf1)
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	689a      	ldr	r2, [r3, #8]
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d104      	bne.n	800ff14 <draw_buf_flush+0x16c>
            draw_buf->buf_act = draw_buf->buf2;
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	685a      	ldr	r2, [r3, #4]
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	609a      	str	r2, [r3, #8]
        else
            draw_buf->buf_act = draw_buf->buf1;
    }
}
 800ff12:	e003      	b.n	800ff1c <draw_buf_flush+0x174>
            draw_buf->buf_act = draw_buf->buf1;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	609a      	str	r2, [r3, #8]
}
 800ff1c:	bf00      	nop
 800ff1e:	3718      	adds	r7, #24
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	20000718 	.word	0x20000718

0800ff28 <call_flush_cb>:

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b086      	sub	sp, #24
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	4413      	add	r3, r2
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ff4a:	823b      	strh	r3, [r7, #16]
        .y1 = area->y1 + drv->offset_y,
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	4413      	add	r3, r2
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ff62:	827b      	strh	r3, [r7, #18]
        .x2 = area->x2 + drv->offset_x,
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ff6a:	b29a      	uxth	r2, r3
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	4413      	add	r3, r2
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ff7a:	82bb      	strh	r3, [r7, #20]
        .y2 = area->y2 + drv->offset_y
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ff82:	b29a      	uxth	r2, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4413      	add	r3, r2
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ff92:	82fb      	strh	r3, [r7, #22]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	695b      	ldr	r3, [r3, #20]
 800ff98:	f107 0110 	add.w	r1, r7, #16
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	4798      	blx	r3
}
 800ffa2:	bf00      	nop
 800ffa4:	3718      	adds	r7, #24
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
	...

0800ffac <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800ffb4:	4a04      	ldr	r2, [pc, #16]	; (800ffc8 <lv_obj_remove_style_all+0x1c>)
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7fc fafb 	bl	800c5b4 <lv_obj_remove_style>
}
 800ffbe:	bf00      	nop
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	000fffff 	.word	0x000fffff

0800ffcc <lv_theme_get_from_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_theme_t  * lv_theme_get_from_obj(lv_obj_t * obj)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d004      	beq.n	800ffe4 <lv_theme_get_from_obj+0x18>
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7fd ff8c 	bl	800def8 <lv_obj_get_disp>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	e002      	b.n	800ffea <lv_theme_get_from_obj+0x1e>
 800ffe4:	f00f fe9e 	bl	801fd24 <lv_disp_get_default>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	60fb      	str	r3, [r7, #12]
    return lv_disp_get_theme(disp);
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	f7f4 fa13 	bl	8004418 <lv_disp_get_theme>
 800fff2:	4603      	mov	r3, r0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3710      	adds	r7, #16
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7ff ffe1 	bl	800ffcc <lv_theme_get_from_obj>
 801000a:	60f8      	str	r0, [r7, #12]
    if(th == NULL) return;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d007      	beq.n	8010022 <lv_theme_apply+0x26>

    lv_obj_remove_style_all(obj);
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7ff ffca 	bl	800ffac <lv_obj_remove_style_all>

    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8010018:	6879      	ldr	r1, [r7, #4]
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f000 f805 	bl	801002a <apply_theme>
 8010020:	e000      	b.n	8010024 <lv_theme_apply+0x28>
    if(th == NULL) return;
 8010022:	bf00      	nop
}
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}

0801002a <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 801002a:	b580      	push	{r7, lr}
 801002c:	b082      	sub	sp, #8
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
 8010032:	6039      	str	r1, [r7, #0]
    if(th->parent) apply_theme(th->parent, obj);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d005      	beq.n	8010048 <apply_theme+0x1e>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	4618      	mov	r0, r3
 8010044:	f7ff fff1 	bl	801002a <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d004      	beq.n	801005a <apply_theme+0x30>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	6839      	ldr	r1, [r7, #0]
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	4798      	blx	r3
}
 801005a:	bf00      	nop
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <lv_draw_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_init(void)
{
 8010062:	b480      	push	{r7}
 8010064:	af00      	add	r7, sp, #0
    /*Nothing to init now*/
}
 8010066:	bf00      	nop
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801007c:	2b00      	cmp	r3, #0
 801007e:	d003      	beq.n	8010088 <lv_draw_wait_for_finish+0x18>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	4798      	blx	r3
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	4603      	mov	r3, r0
 8010098:	71fb      	strb	r3, [r7, #7]
 801009a:	460b      	mov	r3, r1
 801009c:	71bb      	strb	r3, [r7, #6]
 801009e:	4613      	mov	r3, r2
 80100a0:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80100a2:	797b      	ldrb	r3, [r7, #5]
 80100a4:	09db      	lsrs	r3, r3, #7
 80100a6:	b2da      	uxtb	r2, r3
 80100a8:	79bb      	ldrb	r3, [r7, #6]
 80100aa:	09db      	lsrs	r3, r3, #7
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	4313      	orrs	r3, r2
 80100b0:	b2da      	uxtb	r2, r3
 80100b2:	79fb      	ldrb	r3, [r7, #7]
 80100b4:	09db      	lsrs	r3, r3, #7
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	4313      	orrs	r3, r2
 80100ba:	b2db      	uxtb	r3, r3
}
 80100bc:	4618      	mov	r0, r3
 80100be:	370c      	adds	r7, #12
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr

080100c8 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 80100cc:	22ff      	movs	r2, #255	; 0xff
 80100ce:	21ff      	movs	r1, #255	; 0xff
 80100d0:	20ff      	movs	r0, #255	; 0xff
 80100d2:	f7ff ffdd 	bl	8010090 <lv_color_make>
 80100d6:	4603      	mov	r3, r0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	bd80      	pop	{r7, pc}

080100dc <lv_color_black>:
static inline lv_color_t lv_color_black(void)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80100e0:	2200      	movs	r2, #0
 80100e2:	2100      	movs	r1, #0
 80100e4:	2000      	movs	r0, #0
 80100e6:	f7ff ffd3 	bl	8010090 <lv_color_make>
 80100ea:	4603      	mov	r3, r0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80100f0:	b480      	push	{r7}
 80100f2:	b083      	sub	sp, #12
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	80da      	strh	r2, [r3, #6]
}
 8010122:	bf00      	nop
 8010124:	370c      	adds	r7, #12
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr

0801012e <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801012e:	b480      	push	{r7}
 8010130:	b083      	sub	sp, #12
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801013c:	b29a      	uxth	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010144:	b29b      	uxth	r3, r3
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	b29b      	uxth	r3, r3
 801014a:	3301      	adds	r3, #1
 801014c:	b29b      	uxth	r3, r3
 801014e:	b21b      	sxth	r3, r3
}
 8010150:	4618      	mov	r0, r3
 8010152:	370c      	adds	r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801015c:	b480      	push	{r7}
 801015e:	b083      	sub	sp, #12
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801016a:	b29a      	uxth	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010172:	b29b      	uxth	r3, r3
 8010174:	1ad3      	subs	r3, r2, r3
 8010176:	b29b      	uxth	r3, r3
 8010178:	3301      	adds	r3, #1
 801017a:	b29b      	uxth	r3, r3
 801017c:	b21b      	sxth	r3, r3
}
 801017e:	4618      	mov	r0, r3
 8010180:	370c      	adds	r7, #12
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr

0801018a <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 801018a:	b590      	push	{r4, r7, lr}
 801018c:	b083      	sub	sp, #12
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8010192:	2114      	movs	r1, #20
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f012 fa19 	bl	80225cc <lv_memset_00>
    dsc->recolor = lv_color_black();
 801019a:	687c      	ldr	r4, [r7, #4]
 801019c:	f7ff ff9e 	bl	80100dc <lv_color_black>
 80101a0:	7220      	strb	r0, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	22ff      	movs	r2, #255	; 0xff
 80101a6:	729a      	strb	r2, [r3, #10]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80101ae:	805a      	strh	r2, [r3, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	7c13      	ldrb	r3, [r2, #16]
 80101b4:	f36f 0300 	bfc	r3, #0, #1
 80101b8:	7413      	strb	r3, [r2, #16]
}
 80101ba:	bf00      	nop
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd90      	pop	{r4, r7, pc}
	...

080101c4 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc, const lv_area_t * coords, const void * src)
{
 80101c4:	b590      	push	{r4, r7, lr}
 80101c6:	b087      	sub	sp, #28
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	607a      	str	r2, [r7, #4]
 80101d0:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d105      	bne.n	80101e4 <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(draw_ctx, coords, "No\ndata");
 80101d8:	4a16      	ldr	r2, [pc, #88]	; (8010234 <lv_draw_img+0x70>)
 80101da:	6879      	ldr	r1, [r7, #4]
 80101dc:	68f8      	ldr	r0, [r7, #12]
 80101de:	f000 fab3 	bl	8010748 <show_error>
        return;
 80101e2:	e023      	b.n	801022c <lv_draw_img+0x68>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	7a9b      	ldrb	r3, [r3, #10]
 80101e8:	2b02      	cmp	r3, #2
 80101ea:	d91e      	bls.n	801022a <lv_draw_img+0x66>

    lv_res_t res;
    if(draw_ctx->draw_img) {
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	699b      	ldr	r3, [r3, #24]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d009      	beq.n	8010208 <lv_draw_img+0x44>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	699c      	ldr	r4, [r3, #24]
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	68b9      	ldr	r1, [r7, #8]
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	47a0      	blx	r4
 8010202:	4603      	mov	r3, r0
 8010204:	75fb      	strb	r3, [r7, #23]
 8010206:	e007      	b.n	8010218 <lv_draw_img+0x54>
    }
    else {
        res = decode_and_draw(draw_ctx, dsc, coords, src);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	68b9      	ldr	r1, [r7, #8]
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 f8e3 	bl	80103da <decode_and_draw>
 8010214:	4603      	mov	r3, r0
 8010216:	75fb      	strb	r3, [r7, #23]
    }

    if(res == LV_RES_INV) {
 8010218:	7dfb      	ldrb	r3, [r7, #23]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d106      	bne.n	801022c <lv_draw_img+0x68>
        LV_LOG_WARN("Image draw error");
        show_error(draw_ctx, coords, "No\ndata");
 801021e:	4a05      	ldr	r2, [pc, #20]	; (8010234 <lv_draw_img+0x70>)
 8010220:	6879      	ldr	r1, [r7, #4]
 8010222:	68f8      	ldr	r0, [r7, #12]
 8010224:	f000 fa90 	bl	8010748 <show_error>
        return;
 8010228:	e000      	b.n	801022c <lv_draw_img+0x68>
    if(dsc->opa <= LV_OPA_MIN) return;
 801022a:	bf00      	nop
    }
}
 801022c:	371c      	adds	r7, #28
 801022e:	46bd      	mov	sp, r7
 8010230:	bd90      	pop	{r4, r7, pc}
 8010232:	bf00      	nop
 8010234:	08026774 	.word	0x08026774

08010238 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 8010238:	b480      	push	{r7}
 801023a:	b085      	sub	sp, #20
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	2b0e      	cmp	r3, #14
 801024a:	d836      	bhi.n	80102ba <lv_img_cf_get_px_size+0x82>
 801024c:	a201      	add	r2, pc, #4	; (adr r2, 8010254 <lv_img_cf_get_px_size+0x1c>)
 801024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010252:	bf00      	nop
 8010254:	08010291 	.word	0x08010291
 8010258:	08010291 	.word	0x08010291
 801025c:	080102bb 	.word	0x080102bb
 8010260:	080102bb 	.word	0x080102bb
 8010264:	08010297 	.word	0x08010297
 8010268:	0801029d 	.word	0x0801029d
 801026c:	08010297 	.word	0x08010297
 8010270:	080102a3 	.word	0x080102a3
 8010274:	080102a9 	.word	0x080102a9
 8010278:	080102af 	.word	0x080102af
 801027c:	080102b5 	.word	0x080102b5
 8010280:	080102a3 	.word	0x080102a3
 8010284:	080102a9 	.word	0x080102a9
 8010288:	080102af 	.word	0x080102af
 801028c:	080102b5 	.word	0x080102b5
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 8010290:	2300      	movs	r3, #0
 8010292:	73fb      	strb	r3, [r7, #15]
            break;
 8010294:	e014      	b.n	80102c0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 8010296:	2308      	movs	r3, #8
 8010298:	73fb      	strb	r3, [r7, #15]
            break;
 801029a:	e011      	b.n	80102c0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 801029c:	2310      	movs	r3, #16
 801029e:	73fb      	strb	r3, [r7, #15]
            break;
 80102a0:	e00e      	b.n	80102c0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 80102a2:	2301      	movs	r3, #1
 80102a4:	73fb      	strb	r3, [r7, #15]
            break;
 80102a6:	e00b      	b.n	80102c0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 80102a8:	2302      	movs	r3, #2
 80102aa:	73fb      	strb	r3, [r7, #15]
            break;
 80102ac:	e008      	b.n	80102c0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 80102ae:	2304      	movs	r3, #4
 80102b0:	73fb      	strb	r3, [r7, #15]
            break;
 80102b2:	e005      	b.n	80102c0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 80102b4:	2308      	movs	r3, #8
 80102b6:	73fb      	strb	r3, [r7, #15]
            break;
 80102b8:	e002      	b.n	80102c0 <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 80102ba:	2300      	movs	r3, #0
 80102bc:	73fb      	strb	r3, [r7, #15]
            break;
 80102be:	bf00      	nop
    }

    return px_size;
 80102c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3714      	adds	r7, #20
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop

080102d0 <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b085      	sub	sp, #20
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4603      	mov	r3, r0
 80102d8:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 80102da:	2300      	movs	r3, #0
 80102dc:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d001      	beq.n	80102e8 <lv_img_cf_is_chroma_keyed+0x18>
 80102e4:	2b06      	cmp	r3, #6
 80102e6:	d102      	bne.n	80102ee <lv_img_cf_is_chroma_keyed+0x1e>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
            is_chroma_keyed = true;
 80102e8:	2301      	movs	r3, #1
 80102ea:	73fb      	strb	r3, [r7, #15]
            break;
 80102ec:	e002      	b.n	80102f4 <lv_img_cf_is_chroma_keyed+0x24>

        default:
            is_chroma_keyed = false;
 80102ee:	2300      	movs	r3, #0
 80102f0:	73fb      	strb	r3, [r7, #15]
            break;
 80102f2:	bf00      	nop
    }

    return is_chroma_keyed;
 80102f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3714      	adds	r7, #20
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 8010302:	b480      	push	{r7}
 8010304:	b085      	sub	sp, #20
 8010306:	af00      	add	r7, sp, #0
 8010308:	4603      	mov	r3, r0
 801030a:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 801030c:	2300      	movs	r3, #0
 801030e:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 8010310:	79fb      	ldrb	r3, [r7, #7]
 8010312:	2b0e      	cmp	r3, #14
 8010314:	bf8c      	ite	hi
 8010316:	2201      	movhi	r2, #1
 8010318:	2200      	movls	r2, #0
 801031a:	b2d2      	uxtb	r2, r2
 801031c:	2a00      	cmp	r2, #0
 801031e:	d10e      	bne.n	801033e <lv_img_cf_has_alpha+0x3c>
 8010320:	2201      	movs	r2, #1
 8010322:	409a      	lsls	r2, r3
 8010324:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 8010328:	4013      	ands	r3, r2
 801032a:	2b00      	cmp	r3, #0
 801032c:	bf14      	ite	ne
 801032e:	2301      	movne	r3, #1
 8010330:	2300      	moveq	r3, #0
 8010332:	b2db      	uxtb	r3, r3
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <lv_img_cf_has_alpha+0x3c>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 8010338:	2301      	movs	r3, #1
 801033a:	73fb      	strb	r3, [r7, #15]
            break;
 801033c:	e002      	b.n	8010344 <lv_img_cf_has_alpha+0x42>
        default:
            has_alpha = false;
 801033e:	2300      	movs	r3, #0
 8010340:	73fb      	strb	r3, [r7, #15]
            break;
 8010342:	bf00      	nop
    }

    return has_alpha;
 8010344:	7bfb      	ldrb	r3, [r7, #15]
}
 8010346:	4618      	mov	r0, r3
 8010348:	3714      	adds	r7, #20
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 8010352:	b480      	push	{r7}
 8010354:	b085      	sub	sp, #20
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 801035a:	2303      	movs	r3, #3
 801035c:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d101      	bne.n	8010368 <lv_img_src_get_type+0x16>
 8010364:	7bfb      	ldrb	r3, [r7, #15]
 8010366:	e018      	b.n	801039a <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2b1f      	cmp	r3, #31
 8010372:	d907      	bls.n	8010384 <lv_img_src_get_type+0x32>
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	b25b      	sxtb	r3, r3
 801037a:	2b00      	cmp	r3, #0
 801037c:	db02      	blt.n	8010384 <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 801037e:	2301      	movs	r3, #1
 8010380:	73fb      	strb	r3, [r7, #15]
 8010382:	e009      	b.n	8010398 <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	b25b      	sxtb	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	da02      	bge.n	8010394 <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 801038e:	2302      	movs	r3, #2
 8010390:	73fb      	strb	r3, [r7, #15]
 8010392:	e001      	b.n	8010398 <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 8010394:	2300      	movs	r3, #0
 8010396:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 8010398:	7bfb      	ldrb	r3, [r7, #15]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr

080103a6 <lv_draw_img_decoded>:

void lv_draw_img_decoded(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc,
                         const lv_area_t * coords, const uint8_t * map_p, lv_img_cf_t color_format)
{
 80103a6:	b590      	push	{r4, r7, lr}
 80103a8:	b087      	sub	sp, #28
 80103aa:	af02      	add	r7, sp, #8
 80103ac:	60f8      	str	r0, [r7, #12]
 80103ae:	60b9      	str	r1, [r7, #8]
 80103b0:	607a      	str	r2, [r7, #4]
 80103b2:	603b      	str	r3, [r7, #0]
    if(draw_ctx->draw_img_decoded == NULL) return;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00a      	beq.n	80103d2 <lv_draw_img_decoded+0x2c>

    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	695c      	ldr	r4, [r3, #20]
 80103c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	68b9      	ldr	r1, [r7, #8]
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	47a0      	blx	r4
 80103d0:	e000      	b.n	80103d4 <lv_draw_img_decoded+0x2e>
    if(draw_ctx->draw_img_decoded == NULL) return;
 80103d2:	bf00      	nop
}
 80103d4:	3714      	adds	r7, #20
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd90      	pop	{r4, r7, pc}

080103da <decode_and_draw>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
 80103da:	b5b0      	push	{r4, r5, r7, lr}
 80103dc:	b09e      	sub	sp, #120	; 0x78
 80103de:	af02      	add	r7, sp, #8
 80103e0:	60f8      	str	r0, [r7, #12]
 80103e2:	60b9      	str	r1, [r7, #8]
 80103e4:	607a      	str	r2, [r7, #4]
 80103e6:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	7a9b      	ldrb	r3, [r3, #10]
 80103ec:	2b02      	cmp	r3, #2
 80103ee:	d801      	bhi.n	80103f4 <decode_and_draw+0x1a>
 80103f0:	2301      	movs	r3, #1
 80103f2:	e1a5      	b.n	8010740 <decode_and_draw+0x366>

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	68da      	ldr	r2, [r3, #12]
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	7a19      	ldrb	r1, [r3, #8]
 80103fc:	6838      	ldr	r0, [r7, #0]
 80103fe:	f003 ff6b 	bl	80142d8 <_lv_img_cache_open>
 8010402:	6638      	str	r0, [r7, #96]	; 0x60

    if(cdsc == NULL) return LV_RES_INV;
 8010404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010406:	2b00      	cmp	r3, #0
 8010408:	d101      	bne.n	801040e <decode_and_draw+0x34>
 801040a:	2300      	movs	r3, #0
 801040c:	e198      	b.n	8010740 <decode_and_draw+0x366>

    lv_img_cf_t cf;
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 801040e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010410:	7d1b      	ldrb	r3, [r3, #20]
 8010412:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8010416:	b2db      	uxtb	r3, r3
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff ff59 	bl	80102d0 <lv_img_cf_is_chroma_keyed>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d003      	beq.n	801042c <decode_and_draw+0x52>
 8010424:	2306      	movs	r3, #6
 8010426:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801042a:	e027      	b.n	801047c <decode_and_draw+0xa2>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 801042c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801042e:	7d1b      	ldrb	r3, [r3, #20]
 8010430:	f003 031f 	and.w	r3, r3, #31
 8010434:	b2db      	uxtb	r3, r3
 8010436:	2b0e      	cmp	r3, #14
 8010438:	d103      	bne.n	8010442 <decode_and_draw+0x68>
 801043a:	230e      	movs	r3, #14
 801043c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010440:	e01c      	b.n	801047c <decode_and_draw+0xa2>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 8010442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010444:	7d1b      	ldrb	r3, [r3, #20]
 8010446:	f003 031f 	and.w	r3, r3, #31
 801044a:	b2db      	uxtb	r3, r3
 801044c:	2b14      	cmp	r3, #20
 801044e:	d103      	bne.n	8010458 <decode_and_draw+0x7e>
 8010450:	2314      	movs	r3, #20
 8010452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010456:	e011      	b.n	801047c <decode_and_draw+0xa2>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8010458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801045a:	7d1b      	ldrb	r3, [r3, #20]
 801045c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8010460:	b2db      	uxtb	r3, r3
 8010462:	4618      	mov	r0, r3
 8010464:	f7ff ff4d 	bl	8010302 <lv_img_cf_has_alpha>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d003      	beq.n	8010476 <decode_and_draw+0x9c>
 801046e:	2305      	movs	r3, #5
 8010470:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010474:	e002      	b.n	801047c <decode_and_draw+0xa2>
    else cf = LV_IMG_CF_TRUE_COLOR;
 8010476:	2304      	movs	r3, #4
 8010478:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if(cf == LV_IMG_CF_ALPHA_8BIT) {
 801047c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010480:	2b0e      	cmp	r3, #14
 8010482:	d10f      	bne.n	80104a4 <decode_and_draw+0xca>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	f9b3 3000 	ldrsh.w	r3, [r3]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d104      	bne.n	8010498 <decode_and_draw+0xbe>
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	885b      	ldrh	r3, [r3, #2]
 8010492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010496:	d005      	beq.n	80104a4 <decode_and_draw+0xca>
            /* resume normal method */
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8010498:	2305      	movs	r3, #5
 801049a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            cdsc->dec_dsc.img_data = NULL;
 801049e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104a0:	2200      	movs	r2, #0
 80104a2:	619a      	str	r2, [r3, #24]
        }
    }

    if(cdsc->dec_dsc.error_msg != NULL) {
 80104a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104a6:	6a1b      	ldr	r3, [r3, #32]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d007      	beq.n	80104bc <decode_and_draw+0xe2>
        LV_LOG_WARN("Image draw error");

        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 80104ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104ae:	6a1b      	ldr	r3, [r3, #32]
 80104b0:	461a      	mov	r2, r3
 80104b2:	6879      	ldr	r1, [r7, #4]
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f000 f947 	bl	8010748 <show_error>
 80104ba:	e13d      	b.n	8010738 <decode_and_draw+0x35e>
    }
    /*The decoder could open the image and gave the entire uncompressed image.
     *Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 80104bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104be:	699b      	ldr	r3, [r3, #24]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f000 8087 	beq.w	80105d4 <decode_and_draw+0x1fa>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 80104c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80104ca:	6879      	ldr	r1, [r7, #4]
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7ff fe0f 	bl	80100f0 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d104      	bne.n	80104e6 <decode_and_draw+0x10c>
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	885b      	ldrh	r3, [r3, #2]
 80104e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104e4:	d048      	beq.n	8010578 <decode_and_draw+0x19e>
            int32_t w = lv_area_get_width(coords);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f7ff fe21 	bl	801012e <lv_area_get_width>
 80104ec:	4603      	mov	r3, r0
 80104ee:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7ff fe33 	bl	801015c <lv_area_get_height>
 80104f6:	4603      	mov	r3, r0
 80104f8:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 80104fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104fc:	b219      	sxth	r1, r3
 80104fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010500:	b21c      	sxth	r4, r3
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	885b      	ldrh	r3, [r3, #2]
 801050c:	68ba      	ldr	r2, [r7, #8]
 801050e:	3204      	adds	r2, #4
 8010510:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010514:	9201      	str	r2, [sp, #4]
 8010516:	9300      	str	r3, [sp, #0]
 8010518:	462b      	mov	r3, r5
 801051a:	4622      	mov	r2, r4
 801051c:	f003 fe13 	bl	8014146 <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 8010520:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f9b3 3000 	ldrsh.w	r3, [r3]
 801052c:	b29b      	uxth	r3, r3
 801052e:	4413      	add	r3, r2
 8010530:	b29b      	uxth	r3, r3
 8010532:	b21b      	sxth	r3, r3
 8010534:	863b      	strh	r3, [r7, #48]	; 0x30
            map_area_rot.y1 += coords->y1;
 8010536:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801053a:	b29a      	uxth	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010542:	b29b      	uxth	r3, r3
 8010544:	4413      	add	r3, r2
 8010546:	b29b      	uxth	r3, r3
 8010548:	b21b      	sxth	r3, r3
 801054a:	867b      	strh	r3, [r7, #50]	; 0x32
            map_area_rot.x2 += coords->x1;
 801054c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010550:	b29a      	uxth	r2, r3
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010558:	b29b      	uxth	r3, r3
 801055a:	4413      	add	r3, r2
 801055c:	b29b      	uxth	r3, r3
 801055e:	b21b      	sxth	r3, r3
 8010560:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y2 += coords->y1;
 8010562:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010566:	b29a      	uxth	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801056e:	b29b      	uxth	r3, r3
 8010570:	4413      	add	r3, r2
 8010572:	b29b      	uxth	r3, r3
 8010574:	b21b      	sxth	r3, r3
 8010576:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        lv_area_t clip_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6899      	ldr	r1, [r3, #8]
 801057c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010584:	4618      	mov	r0, r3
 8010586:	f010 f8cd 	bl	8020724 <_lv_area_intersect>
 801058a:	4603      	mov	r3, r0
 801058c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 8010590:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010594:	f083 0301 	eor.w	r3, r3, #1
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b00      	cmp	r3, #0
 801059c:	d004      	beq.n	80105a8 <decode_and_draw+0x1ce>
            draw_cleanup(cdsc);
 801059e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80105a0:	f000 f8fa 	bl	8010798 <draw_cleanup>
            return LV_RES_OK;
 80105a4:	2301      	movs	r3, #1
 80105a6:	e0cb      	b.n	8010740 <decode_and_draw+0x366>
        }

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	689b      	ldr	r3, [r3, #8]
 80105ac:	63bb      	str	r3, [r7, #56]	; 0x38
        draw_ctx->clip_area = &clip_com;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80105b4:	609a      	str	r2, [r3, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 80105b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105b8:	699a      	ldr	r2, [r3, #24]
 80105ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	4613      	mov	r3, r2
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	68b9      	ldr	r1, [r7, #8]
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f7ff feed 	bl	80103a6 <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105d0:	609a      	str	r2, [r3, #8]
 80105d2:	e0b1      	b.n	8010738 <decode_and_draw+0x35e>
    }
    /*The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	6899      	ldr	r1, [r3, #8]
 80105d8:	f107 0320 	add.w	r3, r7, #32
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	4618      	mov	r0, r3
 80105e0:	f010 f8a0 	bl	8020724 <_lv_area_intersect>
 80105e4:	4603      	mov	r3, r0
 80105e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 80105ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105ee:	f083 0301 	eor.w	r3, r3, #1
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d004      	beq.n	8010602 <decode_and_draw+0x228>
            draw_cleanup(cdsc);
 80105f8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80105fa:	f000 f8cd 	bl	8010798 <draw_cleanup>
            return LV_RES_OK;
 80105fe:	2301      	movs	r3, #1
 8010600:	e09e      	b.n	8010740 <decode_and_draw+0x366>
        }

        int32_t width = lv_area_get_width(&mask_com);
 8010602:	f107 0320 	add.w	r3, r7, #32
 8010606:	4618      	mov	r0, r3
 8010608:	f7ff fd91 	bl	801012e <lv_area_get_width>
 801060c:	4603      	mov	r3, r0
 801060e:	65bb      	str	r3, [r7, #88]	; 0x58

        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8010610:	f107 0320 	add.w	r3, r7, #32
 8010614:	4618      	mov	r0, r3
 8010616:	f7ff fd8a 	bl	801012e <lv_area_get_width>
 801061a:	4603      	mov	r3, r0
 801061c:	005b      	lsls	r3, r3, #1
 801061e:	4618      	mov	r0, r3
 8010620:	f011 fc2a 	bl	8021e78 <lv_mem_buf_get>
 8010624:	6578      	str	r0, [r7, #84]	; 0x54
                                        LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	689b      	ldr	r3, [r3, #8]
 801062a:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 801062c:	f107 0220 	add.w	r2, r7, #32
 8010630:	f107 0318 	add.w	r3, r7, #24
 8010634:	4611      	mov	r1, r2
 8010636:	4618      	mov	r0, r3
 8010638:	f7ff fd5a 	bl	80100f0 <lv_area_copy>
        lv_area_set_height(&line, 1);
 801063c:	f107 0318 	add.w	r3, r7, #24
 8010640:	2101      	movs	r1, #1
 8010642:	4618      	mov	r0, r3
 8010644:	f00f ffc9 	bl	80205da <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8010648:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801064c:	461a      	mov	r2, r3
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 8010658:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801065c:	461a      	mov	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010664:	1ad3      	subs	r3, r2, r3
 8010666:	66bb      	str	r3, [r7, #104]	; 0x68
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8010668:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801066c:	667b      	str	r3, [r7, #100]	; 0x64
 801066e:	e057      	b.n	8010720 <decode_and_draw+0x346>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 8010670:	f107 0218 	add.w	r2, r7, #24
 8010674:	f107 0310 	add.w	r3, r7, #16
 8010678:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801067a:	4618      	mov	r0, r3
 801067c:	f010 f852 	bl	8020724 <_lv_area_intersect>
 8010680:	4603      	mov	r3, r0
 8010682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if(union_ok == false) continue;
 8010686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801068a:	f083 0301 	eor.w	r3, r3, #1
 801068e:	b2db      	uxtb	r3, r3
 8010690:	2b00      	cmp	r3, #0
 8010692:	d141      	bne.n	8010718 <decode_and_draw+0x33e>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8010694:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010698:	b219      	sxth	r1, r3
 801069a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801069c:	b21a      	sxth	r2, r3
 801069e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106a0:	b21c      	sxth	r4, r3
 80106a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106a4:	9300      	str	r3, [sp, #0]
 80106a6:	4623      	mov	r3, r4
 80106a8:	f003 ffc0 	bl	801462c <lv_img_decoder_read_line>
 80106ac:	4603      	mov	r3, r0
 80106ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 80106b2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d00e      	beq.n	80106d8 <decode_and_draw+0x2fe>
                lv_img_decoder_close(&cdsc->dec_dsc);
 80106ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106bc:	4618      	mov	r0, r3
 80106be:	f003 ffe1 	bl	8014684 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                lv_mem_buf_release(buf);
 80106c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80106c4:	f011 fc84 	bl	8021fd0 <lv_mem_buf_release>
                draw_cleanup(cdsc);
 80106c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80106ca:	f000 f865 	bl	8010798 <draw_cleanup>
                draw_ctx->clip_area = clip_area_ori;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80106d2:	609a      	str	r2, [r3, #8]
                return LV_RES_INV;
 80106d4:	2300      	movs	r3, #0
            return LV_RES_OK;
 80106d6:	e033      	b.n	8010740 <decode_and_draw+0x366>
            }

            draw_ctx->clip_area = &mask_line;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f107 0210 	add.w	r2, r7, #16
 80106de:	609a      	str	r2, [r3, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 80106e0:	f107 0218 	add.w	r2, r7, #24
 80106e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80106e8:	9300      	str	r3, [sp, #0]
 80106ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106ec:	68b9      	ldr	r1, [r7, #8]
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7ff fe59 	bl	80103a6 <lv_draw_img_decoded>
            line.y1++;
 80106f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	3301      	adds	r3, #1
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	b21b      	sxth	r3, r3
 8010700:	837b      	strh	r3, [r7, #26]
            line.y2++;
 8010702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010706:	b29b      	uxth	r3, r3
 8010708:	3301      	adds	r3, #1
 801070a:	b29b      	uxth	r3, r3
 801070c:	b21b      	sxth	r3, r3
 801070e:	83fb      	strh	r3, [r7, #30]
            y++;
 8010710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010712:	3301      	adds	r3, #1
 8010714:	66bb      	str	r3, [r7, #104]	; 0x68
 8010716:	e000      	b.n	801071a <decode_and_draw+0x340>
            if(union_ok == false) continue;
 8010718:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 801071a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801071c:	3301      	adds	r3, #1
 801071e:	667b      	str	r3, [r7, #100]	; 0x64
 8010720:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010724:	461a      	mov	r2, r3
 8010726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010728:	4293      	cmp	r3, r2
 801072a:	dda1      	ble.n	8010670 <decode_and_draw+0x296>
        }
        draw_ctx->clip_area = clip_area_ori;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010730:	609a      	str	r2, [r3, #8]
        lv_mem_buf_release(buf);
 8010732:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010734:	f011 fc4c 	bl	8021fd0 <lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 8010738:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801073a:	f000 f82d 	bl	8010798 <draw_cleanup>
    return LV_RES_OK;
 801073e:	2301      	movs	r3, #1
}
 8010740:	4618      	mov	r0, r3
 8010742:	3770      	adds	r7, #112	; 0x70
 8010744:	46bd      	mov	sp, r7
 8010746:	bdb0      	pop	{r4, r5, r7, pc}

08010748 <show_error>:


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b09a      	sub	sp, #104	; 0x68
 801074c:	af02      	add	r7, sp, #8
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8010754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010758:	4618      	mov	r0, r3
 801075a:	f003 fc67 	bl	801402c <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 801075e:	f7ff fcb3 	bl	80100c8 <lv_color_white>
 8010762:	f887 0034 	strb.w	r0, [r7, #52]	; 0x34
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8010766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	4619      	mov	r1, r3
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f003 fca0 	bl	80140b4 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 8010774:	f107 0310 	add.w	r3, r7, #16
 8010778:	4618      	mov	r0, r3
 801077a:	f000 f899 	bl	80108b0 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 801077e:	f107 0110 	add.w	r1, r7, #16
 8010782:	2300      	movs	r3, #0
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	68f8      	ldr	r0, [r7, #12]
 801078c:	f000 f8bc 	bl	8010908 <lv_draw_label>
}
 8010790:	bf00      	nop
 8010792:	3760      	adds	r7, #96	; 0x60
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <draw_cleanup>:

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f003 ff6e 	bl	8014684 <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 80107a8:	bf00      	nop
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b083      	sub	sp, #12
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80107be:	b29a      	uxth	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	3301      	adds	r3, #1
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	b21b      	sxth	r3, r3
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	370c      	adds	r7, #12
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 80107de:	b480      	push	{r7}
 80107e0:	b083      	sub	sp, #12
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b087      	sub	sp, #28
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	613b      	str	r3, [r7, #16]

    while(len) {
 801080c:	e00c      	b.n	8010828 <lv_memcpy_small+0x30>
        *d8 = *s8;
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	781a      	ldrb	r2, [r3, #0]
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	701a      	strb	r2, [r3, #0]
        d8++;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	3301      	adds	r3, #1
 801081a:	617b      	str	r3, [r7, #20]
        s8++;
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	3301      	adds	r3, #1
 8010820:	613b      	str	r3, [r7, #16]
        len--;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	3b01      	subs	r3, #1
 8010826:	607b      	str	r3, [r7, #4]
    while(len) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1ef      	bne.n	801080e <lv_memcpy_small+0x16>
    }

    return dst;
 801082e:	68fb      	ldr	r3, [r7, #12]
}
 8010830:	4618      	mov	r0, r3
 8010832:	371c      	adds	r7, #28
 8010834:	46bd      	mov	sp, r7
 8010836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083a:	4770      	bx	lr

0801083c <lv_color_make>:
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	4603      	mov	r3, r0
 8010844:	71fb      	strb	r3, [r7, #7]
 8010846:	460b      	mov	r3, r1
 8010848:	71bb      	strb	r3, [r7, #6]
 801084a:	4613      	mov	r3, r2
 801084c:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801084e:	797b      	ldrb	r3, [r7, #5]
 8010850:	09db      	lsrs	r3, r3, #7
 8010852:	b2da      	uxtb	r2, r3
 8010854:	79bb      	ldrb	r3, [r7, #6]
 8010856:	09db      	lsrs	r3, r3, #7
 8010858:	b2db      	uxtb	r3, r3
 801085a:	4313      	orrs	r3, r2
 801085c:	b2da      	uxtb	r2, r3
 801085e:	79fb      	ldrb	r3, [r7, #7]
 8010860:	09db      	lsrs	r3, r3, #7
 8010862:	b2db      	uxtb	r3, r3
 8010864:	4313      	orrs	r3, r2
 8010866:	b2db      	uxtb	r3, r3
}
 8010868:	4618      	mov	r0, r3
 801086a:	370c      	adds	r7, #12
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr

08010874 <lv_color_black>:
{
 8010874:	b580      	push	{r7, lr}
 8010876:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8010878:	2200      	movs	r2, #0
 801087a:	2100      	movs	r1, #0
 801087c:	2000      	movs	r0, #0
 801087e:	f7ff ffdd 	bl	801083c <lv_color_make>
 8010882:	4603      	mov	r3, r0
}
 8010884:	4618      	mov	r0, r3
 8010886:	bd80      	pop	{r7, pc}

08010888 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 8010888:	b480      	push	{r7}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d102      	bne.n	80108a2 <lv_bidi_calculate_align+0x1a>
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2201      	movs	r2, #1
 80108a0:	701a      	strb	r2, [r3, #0]
}
 80108a2:	bf00      	nop
 80108a4:	3714      	adds	r7, #20
 80108a6:	46bd      	mov	sp, r7
 80108a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ac:	4770      	bx	lr
	...

080108b0 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 80108b0:	b590      	push	{r4, r7, lr}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 80108b8:	2120      	movs	r1, #32
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f011 fe86 	bl	80225cc <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	22ff      	movs	r2, #255	; 0xff
 80108c4:	761a      	strb	r2, [r3, #24]
    dsc->color = lv_color_black();
 80108c6:	687c      	ldr	r4, [r7, #4]
 80108c8:	f7ff ffd4 	bl	8010874 <lv_color_black>
 80108cc:	7320      	strb	r0, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4a0c      	ldr	r2, [pc, #48]	; (8010904 <lv_draw_label_dsc_init+0x54>)
 80108d2:	601a      	str	r2, [r3, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108da:	605a      	str	r2, [r3, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108e2:	609a      	str	r2, [r3, #8]
    dsc->sel_color = lv_color_black();
 80108e4:	687c      	ldr	r4, [r7, #4]
 80108e6:	f7ff ffc5 	bl	8010874 <lv_color_black>
 80108ea:	7360      	strb	r0, [r4, #13]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 80108ec:	687c      	ldr	r4, [r7, #4]
 80108ee:	2005      	movs	r0, #5
 80108f0:	f010 fc66 	bl	80211c0 <lv_palette_main>
 80108f4:	73a0      	strb	r0, [r4, #14]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	765a      	strb	r2, [r3, #25]
}
 80108fc:	bf00      	nop
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	bd90      	pop	{r4, r7, pc}
 8010904:	0802d92c 	.word	0x0802d92c

08010908 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 8010908:	b5b0      	push	{r4, r5, r7, lr}
 801090a:	b0c8      	sub	sp, #288	; 0x120
 801090c:	af04      	add	r7, sp, #16
 801090e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8010912:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8010916:	6020      	str	r0, [r4, #0]
 8010918:	f507 7088 	add.w	r0, r7, #272	; 0x110
 801091c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8010920:	6001      	str	r1, [r0, #0]
 8010922:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8010926:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801092a:	600a      	str	r2, [r1, #0]
 801092c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010930:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8010934:	6013      	str	r3, [r2, #0]
    if(dsc->opa <= LV_OPA_MIN) return;
 8010936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801093a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	7e1b      	ldrb	r3, [r3, #24]
 8010942:	2b02      	cmp	r3, #2
 8010944:	f240 85ea 	bls.w	801151c <lv_draw_label+0xc14>
    if(dsc->font == NULL) {
 8010948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801094c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	f000 85e3 	beq.w	8011520 <lv_draw_label+0xc18>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 801095a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801095e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	69db      	ldr	r3, [r3, #28]
 8010966:	2b00      	cmp	r3, #0
 8010968:	f000 85dc 	beq.w	8011524 <lv_draw_label+0xc1c>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 801096c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f107 0494 	add.w	r4, r7, #148	; 0x94
 801097a:	461d      	mov	r5, r3
 801097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801097e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010980:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const lv_font_t * font = dsc->font;
 8010988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801098c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 8010998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801099c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 85c0 	beq.w	8011528 <lv_draw_label+0xc20>
 80109a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f000 85b7 	beq.w	8011528 <lv_draw_label+0xc20>
        return;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 80109ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	689a      	ldr	r2, [r3, #8]
 80109c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80109ce:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80109d2:	6819      	ldr	r1, [r3, #0]
 80109d4:	f00f fea6 	bl	8020724 <_lv_area_intersect>
 80109d8:	4603      	mov	r3, r0
 80109da:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    if(!clip_ok) return;
 80109de:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80109e2:	f083 0301 	eor.w	r3, r3, #1
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	f040 859f 	bne.w	801152c <lv_draw_label+0xc24>

    lv_text_align_t align = dsc->align;
 80109ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	7e9b      	ldrb	r3, [r3, #26]
 80109fa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_base_dir_t base_dir = dsc->bidi_dir;
 80109fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	7e5b      	ldrb	r3, [r3, #25]
 8010a0a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    lv_bidi_calculate_align(&align, &base_dir, txt);
 8010a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010a16:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 8010a1a:	f107 008b 	add.w	r0, r7, #139	; 0x8b
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	f7ff ff32 	bl	8010888 <lv_bidi_calculate_align>

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8010a24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	7edb      	ldrb	r3, [r3, #27]
 8010a30:	f003 0302 	and.w	r3, r3, #2
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d10a      	bne.n	8010a4e <lv_draw_label+0x146>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 8010a38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a40:	6818      	ldr	r0, [r3, #0]
 8010a42:	f7ff feb5 	bl	80107b0 <lv_area_get_width>
 8010a46:	4603      	mov	r3, r0
 8010a48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010a4c:	e02d      	b.n	8010aaa <lv_draw_label+0x1a2>
    }
    else {
        /*If EXPAND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8010a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681c      	ldr	r4, [r3, #0]
 8010a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 8010a68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010a76:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010a7a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8010a7e:	6812      	ldr	r2, [r2, #0]
 8010a80:	7ed2      	ldrb	r2, [r2, #27]
 8010a82:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8010a86:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8010a8a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010a8e:	9202      	str	r2, [sp, #8]
 8010a90:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8010a94:	9201      	str	r2, [sp, #4]
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	462b      	mov	r3, r5
 8010a9a:	4622      	mov	r2, r4
 8010a9c:	6809      	ldr	r1, [r1, #0]
 8010a9e:	f013 fbe3 	bl	8024268 <lv_txt_get_size>
                        dsc->flag);
        w = p.x;
 8010aa2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8010aa6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 8010aaa:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8010aae:	f7ff fe96 	bl	80107de <lv_font_get_line_height>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int32_t line_height = line_height_font + dsc->line_space;
 8010ab8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010acc:	4413      	add	r3, r2
 8010ace:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /*Init variables for the first line*/
    int32_t line_width = 0;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    lv_point_t pos;
    pos.x = coords->x1;
 8010ad8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010adc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ae6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    pos.y = coords->y1;
 8010aea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010aee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010af8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t x_ofs = 0;
 8010afc:	2300      	movs	r3, #0
 8010afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int32_t y_ofs = 0;
 8010b02:	2300      	movs	r3, #0
 8010b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    x_ofs = dsc->ofs_x;
 8010b08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y_ofs = dsc->ofs_y;
 8010b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8010b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    pos.y += y_ofs;
 8010b2c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	4413      	add	r3, r2
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	b21b      	sxth	r3, r3
 8010b3e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    uint32_t line_start     = 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    int32_t last_line_start = -1;
 8010b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8010b50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d02c      	beq.n	8010bb2 <lv_draw_label+0x2aa>
 8010b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d128      	bne.n	8010bb2 <lv_draw_label+0x2aa>
 8010b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	da1f      	bge.n	8010bb2 <lv_draw_label+0x2aa>
        /*If the label changed too much recalculate the hint.*/
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8010b72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010b7c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8010b80:	6812      	ldr	r2, [r2, #0]
 8010b82:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010b86:	1a9b      	subs	r3, r3, r2
 8010b88:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010b8c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b94:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	dd04      	ble.n	8010ba8 <lv_draw_label+0x2a0>
            hint->line_start = -1;
 8010b9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ba6:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 8010ba8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 8010bb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d013      	beq.n	8010be2 <lv_draw_label+0x2da>
 8010bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	db0f      	blt.n	8010be2 <lv_draw_label+0x2da>
        line_start = last_line_start;
 8010bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        pos.y += hint->y;
 8010bca:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	4413      	add	r3, r2
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	b21b      	sxth	r3, r3
 8010bde:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8010be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010be6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010bf0:	18d0      	adds	r0, r2, r3
 8010bf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010c04:	b219      	sxth	r1, r3
 8010c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	7edb      	ldrb	r3, [r3, #27]
 8010c12:	9301      	str	r3, [sp, #4]
 8010c14:	2300      	movs	r3, #0
 8010c16:	9300      	str	r3, [sp, #0]
 8010c18:	460b      	mov	r3, r1
 8010c1a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8010c1e:	f013 fcbf 	bl	80245a0 <_lv_txt_get_next_line>
 8010c22:	4602      	mov	r2, r0
 8010c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010c28:	4413      	add	r3, r2
 8010c2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8010c2e:	e06c      	b.n	8010d0a <lv_draw_label+0x402>
        /*Go to next line*/
        line_start = line_end;
 8010c30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010c34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8010c38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010c46:	18d0      	adds	r0, r2, r3
 8010c48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010c5a:	b219      	sxth	r1, r3
 8010c5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	7edb      	ldrb	r3, [r3, #27]
 8010c68:	9301      	str	r3, [sp, #4]
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	9300      	str	r3, [sp, #0]
 8010c6e:	460b      	mov	r3, r1
 8010c70:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8010c74:	f013 fc94 	bl	80245a0 <_lv_txt_get_next_line>
 8010c78:	4602      	mov	r2, r0
 8010c7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010c7e:	4413      	add	r3, r2
 8010c80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        pos.y += line_height;
 8010c84:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4413      	add	r3, r2
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	b21b      	sxth	r3, r3
 8010c96:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8010c9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d027      	beq.n	8010cf2 <lv_draw_label+0x3ea>
 8010ca2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010ca6:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8010caa:	db22      	blt.n	8010cf2 <lv_draw_label+0x3ea>
 8010cac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	da1d      	bge.n	8010cf2 <lv_draw_label+0x3ea>
            hint->line_start = line_start;
 8010cb6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010cba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010cbe:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 8010cc0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010cd4:	1ad2      	subs	r2, r2, r3
 8010cd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010cda:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 8010cdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ce0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010cea:	461a      	mov	r2, r3
 8010cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010cf0:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 8010cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cf6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010d00:	4413      	add	r3, r2
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f000 8413 	beq.w	8011530 <lv_draw_label+0xc28>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8010d0a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010d0e:	461a      	mov	r2, r3
 8010d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d14:	4413      	add	r3, r2
 8010d16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010d1a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8010d1e:	6812      	ldr	r2, [r2, #0]
 8010d20:	6892      	ldr	r2, [r2, #8]
 8010d22:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010d26:	4293      	cmp	r3, r2
 8010d28:	db82      	blt.n	8010c30 <lv_draw_label+0x328>
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
 8010d2a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8010d2e:	2b02      	cmp	r3, #2
 8010d30:	d13d      	bne.n	8010dae <lv_draw_label+0x4a6>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8010d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d36:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010d40:	18d0      	adds	r0, r2, r3
 8010d42:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010d46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010d4a:	1ad1      	subs	r1, r2, r3
 8010d4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010d5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	7edb      	ldrb	r3, [r3, #27]
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	4613      	mov	r3, r2
 8010d6a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010d6e:	f013 fcf5 	bl	802475c <lv_txt_get_width>
 8010d72:	4603      	mov	r3, r0
 8010d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8010d78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010d80:	6818      	ldr	r0, [r3, #0]
 8010d82:	f7ff fd15 	bl	80107b0 <lv_area_get_width>
 8010d86:	4603      	mov	r3, r0
 8010d88:	461a      	mov	r2, r3
 8010d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d8e:	1ad3      	subs	r3, r2, r3
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	da00      	bge.n	8010d96 <lv_draw_label+0x48e>
 8010d94:	3301      	adds	r3, #1
 8010d96:	105b      	asrs	r3, r3, #1
 8010d98:	4619      	mov	r1, r3
 8010d9a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	b28b      	uxth	r3, r1
 8010da2:	4413      	add	r3, r2
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	b21b      	sxth	r3, r3
 8010da8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8010dac:	e03b      	b.n	8010e26 <lv_draw_label+0x51e>

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8010dae:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8010db2:	2b03      	cmp	r3, #3
 8010db4:	d137      	bne.n	8010e26 <lv_draw_label+0x51e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8010db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010dba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010dbe:	681a      	ldr	r2, [r3, #0]
 8010dc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010dc4:	18d0      	adds	r0, r2, r3
 8010dc6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010dca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010dce:	1ad1      	subs	r1, r2, r3
 8010dd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010dde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	7edb      	ldrb	r3, [r3, #27]
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	4613      	mov	r3, r2
 8010dee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010df2:	f013 fcb3 	bl	802475c <lv_txt_get_width>
 8010df6:	4603      	mov	r3, r0
 8010df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        pos.x += lv_area_get_width(coords) - line_width;
 8010dfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010e04:	6818      	ldr	r0, [r3, #0]
 8010e06:	f7ff fcd3 	bl	80107b0 <lv_area_get_width>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010e12:	1ad3      	subs	r3, r2, r3
 8010e14:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8010e18:	b292      	uxth	r2, r2
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	4413      	add	r3, r2
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	b21b      	sxth	r3, r3
 8010e22:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    }
    uint32_t sel_start = dsc->sel_start;
 8010e26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    uint32_t sel_end = dsc->sel_end;
 8010e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	689b      	ldr	r3, [r3, #8]
 8010e42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    if(sel_start > sel_end) {
 8010e46:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d90b      	bls.n	8010e6a <lv_draw_label+0x562>
        uint32_t tmp = sel_start;
 8010e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        sel_start = sel_end;
 8010e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010e5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        sel_end = tmp;
 8010e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010e66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8010e6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	7f1b      	ldrb	r3, [r3, #28]
 8010e76:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	f003 0301 	and.w	r3, r3, #1
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d10c      	bne.n	8010e9e <lv_draw_label+0x596>
 8010e84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	7f1b      	ldrb	r3, [r3, #28]
 8010e90:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	f003 0302 	and.w	r3, r3, #2
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d035      	beq.n	8010f0a <lv_draw_label+0x602>
        lv_draw_line_dsc_init(&line_dsc);
 8010e9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 fc79 	bl	801179a <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 8010ea8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	7b1b      	ldrb	r3, [r3, #12]
 8010eb4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8010eb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010ebc:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d005      	beq.n	8010ed0 <lv_draw_label+0x5c8>
 8010ec4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010ec8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8010ecc:	b21b      	sxth	r3, r3
 8010ece:	e000      	b.n	8010ed2 <lv_draw_label+0x5ca>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        line_dsc.opa = dsc->opa;
 8010ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	7e1b      	ldrb	r3, [r3, #24]
 8010ee2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        line_dsc.blend_mode = dsc->blend_mode;
 8010ee6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	7f1b      	ldrb	r3, [r3, #28]
 8010ef2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	f003 0303 	and.w	r3, r3, #3
 8010efc:	b2da      	uxtb	r2, r3
 8010efe:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f02:	f362 0301 	bfi	r3, r2, #0, #2
 8010f06:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
    uint32_t i;
    uint32_t par_start = 0;
 8010f10:	2300      	movs	r3, #0
 8010f12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_color_t recolor  = lv_color_black();
 8010f16:	f7ff fcad 	bl	8010874 <lv_color_black>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    lv_color_t color = lv_color_black();
 8010f20:	f7ff fca8 	bl	8010874 <lv_color_black>
 8010f24:	4603      	mov	r3, r0
 8010f26:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8010f2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f003 f87c 	bl	801402c <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8010f34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	7b9b      	ldrb	r3, [r3, #14]
 8010f40:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    int32_t pos_x_start = pos.x;
 8010f44:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8010f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 8010f4c:	e2d9      	b.n	8011502 <lv_draw_label+0xbfa>
        pos.x += x_ofs;
 8010f4e:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8010f52:	b29a      	uxth	r2, r3
 8010f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	4413      	add	r3, r2
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	b21b      	sxth	r3, r3
 8010f60:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 8010f64:	2300      	movs	r3, #0
 8010f66:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
        i         = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	677b      	str	r3, [r7, #116]	; 0x74
#if LV_USE_BIDI
        char * bidi_txt = lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, base_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 8010f6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010f7c:	4413      	add	r3, r2
 8010f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
#endif

        while(i < line_end - line_start) {
 8010f82:	e154      	b.n	801122e <lv_draw_label+0x926>
            uint32_t logical_char_pos = 0;
 8010f84:	2300      	movs	r3, #0
 8010f86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8010f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d013      	beq.n	8010fbe <lv_draw_label+0x6b6>
 8010f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d00d      	beq.n	8010fbe <lv_draw_label+0x6b6>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, base_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 8010fa2:	4ba1      	ldr	r3, [pc, #644]	; (8011228 <lv_draw_label+0x920>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010fa8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010fac:	4411      	add	r1, r2
 8010fae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010fb2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8010fb6:	6810      	ldr	r0, [r2, #0]
 8010fb8:	4798      	blx	r3
 8010fba:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
#endif
            }

            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8010fbe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010fc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010fc6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8010fca:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8010fce:	f013 fc63 	bl	8024898 <_lv_txt_encoded_letter_next_2>
            /*Handle the re-color command*/
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8010fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	7edb      	ldrb	r3, [r3, #27]
 8010fde:	f003 0301 	and.w	r3, r3, #1
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f000 8088 	beq.w	80110f8 <lv_draw_label+0x7f0>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8010fe8:	2323      	movs	r3, #35	; 0x23
 8010fea:	461a      	mov	r2, r3
 8010fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d11a      	bne.n	8011028 <lv_draw_label+0x720>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8010ff2:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d106      	bne.n	8011008 <lv_draw_label+0x700>
                        par_start = i;
 8010ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ffc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                        cmd_state = CMD_STATE_PAR;
 8011000:	2301      	movs	r3, #1
 8011002:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 8011006:	e112      	b.n	801122e <lv_draw_label+0x926>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 8011008:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 801100c:	2b01      	cmp	r3, #1
 801100e:	d103      	bne.n	8011018 <lv_draw_label+0x710>
                        cmd_state = CMD_STATE_WAIT;
 8011010:	2300      	movs	r3, #0
 8011012:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8011016:	e007      	b.n	8011028 <lv_draw_label+0x720>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 8011018:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 801101c:	2b02      	cmp	r3, #2
 801101e:	d103      	bne.n	8011028 <lv_draw_label+0x720>
                        cmd_state = CMD_STATE_WAIT;
 8011020:	2300      	movs	r3, #0
 8011022:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 8011026:	e102      	b.n	801122e <lv_draw_label+0x926>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 8011028:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 801102c:	2b01      	cmp	r3, #1
 801102e:	d163      	bne.n	80110f8 <lv_draw_label+0x7f0>
                    if(letter == ' ') {
 8011030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011032:	2b20      	cmp	r3, #32
 8011034:	f040 80fa 	bne.w	801122c <lv_draw_label+0x924>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8011038:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801103a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	2b07      	cmp	r3, #7
 8011042:	d14d      	bne.n	80110e0 <lv_draw_label+0x7d8>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8011044:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011048:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801104c:	18d1      	adds	r1, r2, r3
 801104e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011052:	2206      	movs	r2, #6
 8011054:	4618      	mov	r0, r3
 8011056:	f7ff fbcf 	bl	80107f8 <lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 801105a:	2300      	movs	r3, #0
 801105c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8011060:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011064:	4618      	mov	r0, r3
 8011066:	f000 fa7d 	bl	8011564 <hex_char_to_num>
 801106a:	4603      	mov	r3, r0
 801106c:	011c      	lsls	r4, r3, #4
 801106e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011072:	4618      	mov	r0, r3
 8011074:	f000 fa76 	bl	8011564 <hex_char_to_num>
 8011078:	4603      	mov	r3, r0
 801107a:	4423      	add	r3, r4
 801107c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8011080:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8011084:	4618      	mov	r0, r3
 8011086:	f000 fa6d 	bl	8011564 <hex_char_to_num>
 801108a:	4603      	mov	r3, r0
 801108c:	011c      	lsls	r4, r3, #4
 801108e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011092:	4618      	mov	r0, r3
 8011094:	f000 fa66 	bl	8011564 <hex_char_to_num>
 8011098:	4603      	mov	r3, r0
 801109a:	4423      	add	r3, r4
 801109c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 80110a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80110a4:	4618      	mov	r0, r3
 80110a6:	f000 fa5d 	bl	8011564 <hex_char_to_num>
 80110aa:	4603      	mov	r3, r0
 80110ac:	011c      	lsls	r4, r3, #4
 80110ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80110b2:	4618      	mov	r0, r3
 80110b4:	f000 fa56 	bl	8011564 <hex_char_to_num>
 80110b8:	4603      	mov	r3, r0
 80110ba:	4423      	add	r3, r4
 80110bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                            recolor = lv_color_make(r, g, b);
 80110c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80110ca:	b2d1      	uxtb	r1, r2
 80110cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80110d0:	b2d2      	uxtb	r2, r2
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7ff fbb2 	bl	801083c <lv_color_make>
 80110d8:	4603      	mov	r3, r0
 80110da:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 80110de:	e007      	b.n	80110f0 <lv_draw_label+0x7e8>
                        }
                        else {
                            recolor.full = dsc->color.full;
 80110e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80110e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	7b1b      	ldrb	r3, [r3, #12]
 80110ec:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 80110f0:	2302      	movs	r3, #2
 80110f2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                    }
                    continue;
 80110f6:	e099      	b.n	801122c <lv_draw_label+0x924>
                }
            }

            color = dsc->color;
 80110f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80110fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	7b1b      	ldrb	r3, [r3, #12]
 8011104:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            if(cmd_state == CMD_STATE_IN) color = recolor;
 8011108:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 801110c:	2b02      	cmp	r3, #2
 801110e:	d103      	bne.n	8011118 <lv_draw_label+0x810>
 8011110:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011114:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8011118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801111a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801111c:	4619      	mov	r1, r3
 801111e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8011122:	f00e f965 	bl	801f3f0 <lv_font_get_glyph_width>
 8011126:	4603      	mov	r3, r0
 8011128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 801112c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011134:	4293      	cmp	r3, r2
 8011136:	d04c      	beq.n	80111d2 <lv_draw_label+0x8ca>
 8011138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011140:	4293      	cmp	r3, r2
 8011142:	d046      	beq.n	80111d2 <lv_draw_label+0x8ca>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 8011144:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801114c:	429a      	cmp	r2, r3
 801114e:	d340      	bcc.n	80111d2 <lv_draw_label+0x8ca>
 8011150:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011154:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011158:	429a      	cmp	r2, r3
 801115a:	d23a      	bcs.n	80111d2 <lv_draw_label+0x8ca>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 801115c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8011160:	843b      	strh	r3, [r7, #32]
                    sel_coords.y1 = pos.y;
 8011162:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011166:	847b      	strh	r3, [r7, #34]	; 0x22
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8011168:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801116c:	b29a      	uxth	r2, r3
 801116e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011172:	b29b      	uxth	r3, r3
 8011174:	4413      	add	r3, r2
 8011176:	b29a      	uxth	r2, r3
 8011178:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801117c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011186:	b29b      	uxth	r3, r3
 8011188:	4413      	add	r3, r2
 801118a:	b29b      	uxth	r3, r3
 801118c:	3b01      	subs	r3, #1
 801118e:	b29b      	uxth	r3, r3
 8011190:	b21b      	sxth	r3, r3
 8011192:	84bb      	strh	r3, [r7, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
 8011194:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011198:	b29a      	uxth	r2, r3
 801119a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801119e:	b29b      	uxth	r3, r3
 80111a0:	4413      	add	r3, r2
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	3b01      	subs	r3, #1
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	b21b      	sxth	r3, r3
 80111aa:	84fb      	strh	r3, [r7, #38]	; 0x26
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 80111ac:	f107 0220 	add.w	r2, r7, #32
 80111b0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80111b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80111b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111bc:	6818      	ldr	r0, [r3, #0]
 80111be:	f002 ff79 	bl	80140b4 <lv_draw_rect>
                    color = dsc->sel_color;
 80111c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80111c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	7b5b      	ldrb	r3, [r3, #13]
 80111ce:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                }
            }

            dsc_mod.color = color;
 80111d2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80111d6:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 80111da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111dc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80111e0:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80111e4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80111e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80111ec:	6800      	ldr	r0, [r0, #0]
 80111ee:	f000 f9a7 	bl	8011540 <lv_draw_letter>

            if(letter_w > 0) {
 80111f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	dd19      	ble.n	801122e <lv_draw_label+0x926>
                pos.x += letter_w + dsc->letter_space;
 80111fa:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80111fe:	b29a      	uxth	r2, r3
 8011200:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801120e:	b299      	uxth	r1, r3
 8011210:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011214:	b29b      	uxth	r3, r3
 8011216:	440b      	add	r3, r1
 8011218:	b29b      	uxth	r3, r3
 801121a:	4413      	add	r3, r2
 801121c:	b29b      	uxth	r3, r3
 801121e:	b21b      	sxth	r3, r3
 8011220:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8011224:	e003      	b.n	801122e <lv_draw_label+0x926>
 8011226:	bf00      	nop
 8011228:	20000028 	.word	0x20000028
                    continue;
 801122c:	bf00      	nop
        while(i < line_end - line_start) {
 801122e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011232:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011236:	1ad2      	subs	r2, r2, r3
 8011238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801123a:	429a      	cmp	r2, r3
 801123c:	f63f aea2 	bhi.w	8010f84 <lv_draw_label+0x67c>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 8011240:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	7f1b      	ldrb	r3, [r3, #28]
 801124c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011250:	b2db      	uxtb	r3, r3
 8011252:	f003 0302 	and.w	r3, r3, #2
 8011256:	2b00      	cmp	r3, #0
 8011258:	d039      	beq.n	80112ce <lv_draw_label+0x9c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 801125a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801125e:	b21b      	sxth	r3, r3
 8011260:	83bb      	strh	r3, [r7, #28]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8011262:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011266:	b29a      	uxth	r2, r3
 8011268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801126c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011278:	2b00      	cmp	r3, #0
 801127a:	da00      	bge.n	801127e <lv_draw_label+0x976>
 801127c:	3301      	adds	r3, #1
 801127e:	105b      	asrs	r3, r3, #1
 8011280:	b21b      	sxth	r3, r3
 8011282:	b29b      	uxth	r3, r3
 8011284:	4413      	add	r3, r2
 8011286:	b29a      	uxth	r2, r3
 8011288:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801128c:	2b00      	cmp	r3, #0
 801128e:	da00      	bge.n	8011292 <lv_draw_label+0x98a>
 8011290:	3301      	adds	r3, #1
 8011292:	105b      	asrs	r3, r3, #1
 8011294:	b21b      	sxth	r3, r3
 8011296:	b29b      	uxth	r3, r3
 8011298:	4413      	add	r3, r2
 801129a:	b29b      	uxth	r3, r3
 801129c:	b21b      	sxth	r3, r3
 801129e:	83fb      	strh	r3, [r7, #30]
            p2.x = pos.x;
 80112a0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80112a4:	833b      	strh	r3, [r7, #24]
            p2.y = p1.y;
 80112a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80112aa:	837b      	strh	r3, [r7, #26]
            line_dsc.color = color;
 80112ac:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80112b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80112b4:	f107 0318 	add.w	r3, r7, #24
 80112b8:	f107 021c 	add.w	r2, r7, #28
 80112bc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80112c0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80112c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80112c8:	6800      	ldr	r0, [r0, #0]
 80112ca:	f000 fa7c 	bl	80117c6 <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 80112ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80112d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	7f1b      	ldrb	r3, [r3, #28]
 80112da:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80112de:	b2db      	uxtb	r3, r3
 80112e0:	f003 0301 	and.w	r3, r3, #1
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d044      	beq.n	8011372 <lv_draw_label+0xa6a>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 80112e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80112ec:	b21b      	sxth	r3, r3
 80112ee:	82bb      	strh	r3, [r7, #20]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 80112f0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80112fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011306:	b29b      	uxth	r3, r3
 8011308:	4413      	add	r3, r2
 801130a:	b29a      	uxth	r2, r3
 801130c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801131c:	b29b      	uxth	r3, r3
 801131e:	1ad3      	subs	r3, r2, r3
 8011320:	b29a      	uxth	r2, r3
 8011322:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011326:	f993 300d 	ldrsb.w	r3, [r3, #13]
 801132a:	b29b      	uxth	r3, r3
 801132c:	1ad3      	subs	r3, r2, r3
 801132e:	b29b      	uxth	r3, r3
 8011330:	b21b      	sxth	r3, r3
 8011332:	82fb      	strh	r3, [r7, #22]
            p2.x = pos.x;
 8011334:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8011338:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801133c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8011340:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 8011342:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801134a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801134e:	805a      	strh	r2, [r3, #2]
            line_dsc.color = color;
 8011350:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8011354:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8011358:	f107 0310 	add.w	r3, r7, #16
 801135c:	f107 0214 	add.w	r2, r7, #20
 8011360:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8011364:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011368:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801136c:	6800      	ldr	r0, [r0, #0]
 801136e:	f000 fa2a 	bl	80117c6 <lv_draw_line>
#if LV_USE_BIDI
        lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 8011372:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011376:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 801137a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801137e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011388:	18d0      	adds	r0, r2, r3
 801138a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801138e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8011398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801139c:	b219      	sxth	r1, r3
 801139e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	7edb      	ldrb	r3, [r3, #27]
 80113aa:	9301      	str	r3, [sp, #4]
 80113ac:	2300      	movs	r3, #0
 80113ae:	9300      	str	r3, [sp, #0]
 80113b0:	460b      	mov	r3, r1
 80113b2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80113b6:	f013 f8f3 	bl	80245a0 <_lv_txt_get_next_line>
 80113ba:	4602      	mov	r2, r0
 80113bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80113c0:	4413      	add	r3, r2
 80113c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        pos.x = coords->x1;
 80113c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113d4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        /*Align to middle*/
        if(align == LV_TEXT_ALIGN_CENTER) {
 80113d8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d13d      	bne.n	801145c <lv_draw_label+0xb54>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 80113e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80113ee:	18d0      	adds	r0, r2, r3
 80113f0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80113f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80113f8:	1ad1      	subs	r1, r2, r3
 80113fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8011408:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801140c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	7edb      	ldrb	r3, [r3, #27]
 8011414:	9300      	str	r3, [sp, #0]
 8011416:	4613      	mov	r3, r2
 8011418:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801141c:	f013 f99e 	bl	802475c <lv_txt_get_width>
 8011420:	4603      	mov	r3, r0
            line_width =
 8011422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8011426:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801142a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801142e:	6818      	ldr	r0, [r3, #0]
 8011430:	f7ff f9be 	bl	80107b0 <lv_area_get_width>
 8011434:	4603      	mov	r3, r0
 8011436:	461a      	mov	r2, r3
 8011438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	2b00      	cmp	r3, #0
 8011440:	da00      	bge.n	8011444 <lv_draw_label+0xb3c>
 8011442:	3301      	adds	r3, #1
 8011444:	105b      	asrs	r3, r3, #1
 8011446:	4619      	mov	r1, r3
 8011448:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801144c:	b29a      	uxth	r2, r3
 801144e:	b28b      	uxth	r3, r1
 8011450:	4413      	add	r3, r2
 8011452:	b29b      	uxth	r3, r3
 8011454:	b21b      	sxth	r3, r3
 8011456:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 801145a:	e03b      	b.n	80114d4 <lv_draw_label+0xbcc>

        }
        /*Align to the right*/
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 801145c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011460:	2b03      	cmp	r3, #3
 8011462:	d137      	bne.n	80114d4 <lv_draw_label+0xbcc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8011464:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011468:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011472:	18d0      	adds	r0, r2, r3
 8011474:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011478:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801147c:	1ad1      	subs	r1, r2, r3
 801147e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801148c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	7edb      	ldrb	r3, [r3, #27]
 8011498:	9300      	str	r3, [sp, #0]
 801149a:	4613      	mov	r3, r2
 801149c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80114a0:	f013 f95c 	bl	802475c <lv_txt_get_width>
 80114a4:	4603      	mov	r3, r0
            line_width =
 80114a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            pos.x += lv_area_get_width(coords) - line_width;
 80114aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80114b2:	6818      	ldr	r0, [r3, #0]
 80114b4:	f7ff f97c 	bl	80107b0 <lv_area_get_width>
 80114b8:	4603      	mov	r3, r0
 80114ba:	461a      	mov	r2, r3
 80114bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80114c6:	b292      	uxth	r2, r2
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	4413      	add	r3, r2
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	b21b      	sxth	r3, r3
 80114d0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        /*Go the next line position*/
        pos.y += line_height;
 80114d4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80114d8:	b29a      	uxth	r2, r3
 80114da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80114de:	b29b      	uxth	r3, r3
 80114e0:	4413      	add	r3, r2
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	b21b      	sxth	r3, r3
 80114e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if(pos.y > draw_ctx->clip_area->y2) return;
 80114ea:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 80114ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	689b      	ldr	r3, [r3, #8]
 80114fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80114fe:	429a      	cmp	r2, r3
 8011500:	dc18      	bgt.n	8011534 <lv_draw_label+0xc2c>
    while(txt[line_start] != '\0') {
 8011502:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011506:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011510:	4413      	add	r3, r2
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	f47f ad1a 	bne.w	8010f4e <lv_draw_label+0x646>
 801151a:	e00c      	b.n	8011536 <lv_draw_label+0xc2e>
    if(dsc->opa <= LV_OPA_MIN) return;
 801151c:	bf00      	nop
 801151e:	e00a      	b.n	8011536 <lv_draw_label+0xc2e>
        return;
 8011520:	bf00      	nop
 8011522:	e008      	b.n	8011536 <lv_draw_label+0xc2e>
        return;
 8011524:	bf00      	nop
 8011526:	e006      	b.n	8011536 <lv_draw_label+0xc2e>
        return;
 8011528:	bf00      	nop
 801152a:	e004      	b.n	8011536 <lv_draw_label+0xc2e>
    if(!clip_ok) return;
 801152c:	bf00      	nop
 801152e:	e002      	b.n	8011536 <lv_draw_label+0xc2e>
        if(txt[line_start] == '\0') return;
 8011530:	bf00      	nop
 8011532:	e000      	b.n	8011536 <lv_draw_label+0xc2e>
        if(pos.y > draw_ctx->clip_area->y2) return;
 8011534:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 8011536:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801153a:	46bd      	mov	sp, r7
 801153c:	bdb0      	pop	{r4, r5, r7, pc}
 801153e:	bf00      	nop

08011540 <lv_draw_letter>:

void lv_draw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                    uint32_t letter)
{
 8011540:	b590      	push	{r4, r7, lr}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
 801154c:	603b      	str	r3, [r7, #0]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	69dc      	ldr	r4, [r3, #28]
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	68b9      	ldr	r1, [r7, #8]
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	47a0      	blx	r4
}
 801155c:	bf00      	nop
 801155e:	3714      	adds	r7, #20
 8011560:	46bd      	mov	sp, r7
 8011562:	bd90      	pop	{r4, r7, pc}

08011564 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8011564:	b480      	push	{r7}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	4603      	mov	r3, r0
 801156c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 801156e:	2300      	movs	r3, #0
 8011570:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 8011572:	79fb      	ldrb	r3, [r7, #7]
 8011574:	2b2f      	cmp	r3, #47	; 0x2f
 8011576:	d906      	bls.n	8011586 <hex_char_to_num+0x22>
 8011578:	79fb      	ldrb	r3, [r7, #7]
 801157a:	2b39      	cmp	r3, #57	; 0x39
 801157c:	d803      	bhi.n	8011586 <hex_char_to_num+0x22>
        result = hex - '0';
 801157e:	79fb      	ldrb	r3, [r7, #7]
 8011580:	3b30      	subs	r3, #48	; 0x30
 8011582:	73fb      	strb	r3, [r7, #15]
 8011584:	e02d      	b.n	80115e2 <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8011586:	79fb      	ldrb	r3, [r7, #7]
 8011588:	2b60      	cmp	r3, #96	; 0x60
 801158a:	d902      	bls.n	8011592 <hex_char_to_num+0x2e>
 801158c:	79fb      	ldrb	r3, [r7, #7]
 801158e:	3b20      	subs	r3, #32
 8011590:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 8011592:	79fb      	ldrb	r3, [r7, #7]
 8011594:	3b41      	subs	r3, #65	; 0x41
 8011596:	2b05      	cmp	r3, #5
 8011598:	d820      	bhi.n	80115dc <hex_char_to_num+0x78>
 801159a:	a201      	add	r2, pc, #4	; (adr r2, 80115a0 <hex_char_to_num+0x3c>)
 801159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115a0:	080115b9 	.word	0x080115b9
 80115a4:	080115bf 	.word	0x080115bf
 80115a8:	080115c5 	.word	0x080115c5
 80115ac:	080115cb 	.word	0x080115cb
 80115b0:	080115d1 	.word	0x080115d1
 80115b4:	080115d7 	.word	0x080115d7
            case 'A':
                result = 10;
 80115b8:	230a      	movs	r3, #10
 80115ba:	73fb      	strb	r3, [r7, #15]
                break;
 80115bc:	e011      	b.n	80115e2 <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 80115be:	230b      	movs	r3, #11
 80115c0:	73fb      	strb	r3, [r7, #15]
                break;
 80115c2:	e00e      	b.n	80115e2 <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 80115c4:	230c      	movs	r3, #12
 80115c6:	73fb      	strb	r3, [r7, #15]
                break;
 80115c8:	e00b      	b.n	80115e2 <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 80115ca:	230d      	movs	r3, #13
 80115cc:	73fb      	strb	r3, [r7, #15]
                break;
 80115ce:	e008      	b.n	80115e2 <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 80115d0:	230e      	movs	r3, #14
 80115d2:	73fb      	strb	r3, [r7, #15]
                break;
 80115d4:	e005      	b.n	80115e2 <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 80115d6:	230f      	movs	r3, #15
 80115d8:	73fb      	strb	r3, [r7, #15]
                break;
 80115da:	e002      	b.n	80115e2 <hex_char_to_num+0x7e>
            default:
                result = 0;
 80115dc:	2300      	movs	r3, #0
 80115de:	73fb      	strb	r3, [r7, #15]
                break;
 80115e0:	bf00      	nop
        }
    }

    return result;
 80115e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3714      	adds	r7, #20
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr

080115f0 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b088      	sub	sp, #32
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	60f8      	str	r0, [r7, #12]
 80115f8:	60b9      	str	r1, [r7, #8]
 80115fa:	4613      	mov	r3, r2
 80115fc:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_init == NULL) return NULL;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011602:	2b00      	cmp	r3, #0
 8011604:	d101      	bne.n	801160a <lv_draw_layer_create+0x1a>
 8011606:	2300      	movs	r3, #0
 8011608:	e044      	b.n	8011694 <lv_draw_layer_create+0xa4>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801160e:	4618      	mov	r0, r3
 8011610:	f010 fba8 	bl	8021d64 <lv_mem_alloc>
 8011614:	61f8      	str	r0, [r7, #28]
    LV_ASSERT_MALLOC(layer_ctx);
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d100      	bne.n	801161e <lv_draw_layer_create+0x2e>
 801161c:	e7fe      	b.n	801161c <lv_draw_layer_create+0x2c>
    if(layer_ctx == NULL) {
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d101      	bne.n	8011628 <lv_draw_layer_create+0x38>
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
 8011624:	2300      	movs	r3, #0
 8011626:	e035      	b.n	8011694 <lv_draw_layer_create+0xa4>
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801162c:	4619      	mov	r1, r3
 801162e:	69f8      	ldr	r0, [r7, #28]
 8011630:	f010 ffcc 	bl	80225cc <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8011634:	f7fd f858 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 8011638:	61b8      	str	r0, [r7, #24]
    layer_ctx->original.buf = draw_ctx->buf;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	621a      	str	r2, [r3, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	69fb      	ldr	r3, [r7, #28]
 8011648:	61da      	str	r2, [r3, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	689a      	ldr	r2, [r3, #8]
 801164e:	69fb      	ldr	r3, [r7, #28]
 8011650:	619a      	str	r2, [r3, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	7c1b      	ldrb	r3, [r3, #16]
 8011658:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801165c:	b2db      	uxtb	r3, r3
 801165e:	2b00      	cmp	r3, #0
 8011660:	bf14      	ite	ne
 8011662:	2301      	movne	r3, #1
 8011664:	2300      	moveq	r3, #0
 8011666:	b2da      	uxtb	r2, r3
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	68ba      	ldr	r2, [r7, #8]
 8011672:	6810      	ldr	r0, [r2, #0]
 8011674:	6851      	ldr	r1, [r2, #4]
 8011676:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801167c:	79fa      	ldrb	r2, [r7, #7]
 801167e:	69f9      	ldr	r1, [r7, #28]
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	4798      	blx	r3
 8011684:	6178      	str	r0, [r7, #20]
    if(NULL == init_layer_ctx) {
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d102      	bne.n	8011692 <lv_draw_layer_create+0xa2>
        lv_mem_free(layer_ctx);
 801168c:	69f8      	ldr	r0, [r7, #28]
 801168e:	f010 fb99 	bl	8021dc4 <lv_mem_free>
    }
    return init_layer_ctx;
 8011692:	697b      	ldr	r3, [r7, #20]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3720      	adds	r7, #32
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	4613      	mov	r3, r2
 80116a8:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d005      	beq.n	80116be <lv_draw_layer_adjust+0x22>
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116b6:	79fa      	ldrb	r2, [r7, #7]
 80116b8:	68b9      	ldr	r1, [r7, #8]
 80116ba:	68f8      	ldr	r0, [r7, #12]
 80116bc:	4798      	blx	r3
}
 80116be:	bf00      	nop
 80116c0:	3710      	adds	r7, #16
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}

080116c6 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 80116c6:	b580      	push	{r7, lr}
 80116c8:	b084      	sub	sp, #16
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	60f8      	str	r0, [r7, #12]
 80116ce:	60b9      	str	r1, [r7, #8]
 80116d0:	607a      	str	r2, [r7, #4]
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d005      	beq.n	80116e6 <lv_draw_layer_blend+0x20>
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	68b9      	ldr	r1, [r7, #8]
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	4798      	blx	r3
}
 80116e6:	bf00      	nop
 80116e8:	3710      	adds	r7, #16
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}

080116ee <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 80116ee:	b580      	push	{r7, lr}
 80116f0:	b084      	sub	sp, #16
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	6039      	str	r1, [r7, #0]

    lv_draw_wait_for_finish(draw_ctx);
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7fe fcb9 	bl	8010070 <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	6a1a      	ldr	r2, [r3, #32]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	69da      	ldr	r2, [r3, #28]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	699a      	ldr	r2, [r3, #24]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8011716:	f7fc ffe7 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 801171a:	60f8      	str	r0, [r7, #12]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	681a      	ldr	r2, [r3, #0]
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8011726:	7c13      	ldrb	r3, [r2, #16]
 8011728:	f361 1386 	bfi	r3, r1, #6, #1
 801172c:	7413      	strb	r3, [r2, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011732:	2b00      	cmp	r3, #0
 8011734:	d004      	beq.n	8011740 <lv_draw_layer_destroy+0x52>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801173a:	6839      	ldr	r1, [r7, #0]
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 8011740:	6838      	ldr	r0, [r7, #0]
 8011742:	f010 fb3f 	bl	8021dc4 <lv_mem_free>
}
 8011746:	bf00      	nop
 8011748:	3710      	adds	r7, #16
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801174e:	b480      	push	{r7}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	4603      	mov	r3, r0
 8011756:	71fb      	strb	r3, [r7, #7]
 8011758:	460b      	mov	r3, r1
 801175a:	71bb      	strb	r3, [r7, #6]
 801175c:	4613      	mov	r3, r2
 801175e:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8011760:	797b      	ldrb	r3, [r7, #5]
 8011762:	09db      	lsrs	r3, r3, #7
 8011764:	b2da      	uxtb	r2, r3
 8011766:	79bb      	ldrb	r3, [r7, #6]
 8011768:	09db      	lsrs	r3, r3, #7
 801176a:	b2db      	uxtb	r3, r3
 801176c:	4313      	orrs	r3, r2
 801176e:	b2da      	uxtb	r2, r3
 8011770:	79fb      	ldrb	r3, [r7, #7]
 8011772:	09db      	lsrs	r3, r3, #7
 8011774:	b2db      	uxtb	r3, r3
 8011776:	4313      	orrs	r3, r2
 8011778:	b2db      	uxtb	r3, r3
}
 801177a:	4618      	mov	r0, r3
 801177c:	370c      	adds	r7, #12
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr

08011786 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801178a:	2200      	movs	r2, #0
 801178c:	2100      	movs	r1, #0
 801178e:	2000      	movs	r0, #0
 8011790:	f7ff ffdd 	bl	801174e <lv_color_make>
 8011794:	4603      	mov	r3, r0
}
 8011796:	4618      	mov	r0, r3
 8011798:	bd80      	pop	{r7, pc}

0801179a <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 801179a:	b590      	push	{r4, r7, lr}
 801179c:	b083      	sub	sp, #12
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 80117a2:	210a      	movs	r1, #10
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f010 ff11 	bl	80225cc <lv_memset_00>
    dsc->width = 1;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2201      	movs	r2, #1
 80117ae:	805a      	strh	r2, [r3, #2]
    dsc->opa = LV_OPA_COVER;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	22ff      	movs	r2, #255	; 0xff
 80117b4:	721a      	strb	r2, [r3, #8]
    dsc->color = lv_color_black();
 80117b6:	687c      	ldr	r4, [r7, #4]
 80117b8:	f7ff ffe5 	bl	8011786 <lv_color_black>
 80117bc:	7020      	strb	r0, [r4, #0]
}
 80117be:	bf00      	nop
 80117c0:	370c      	adds	r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd90      	pop	{r4, r7, pc}

080117c6 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 80117c6:	b590      	push	{r4, r7, lr}
 80117c8:	b085      	sub	sp, #20
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	60f8      	str	r0, [r7, #12]
 80117ce:	60b9      	str	r1, [r7, #8]
 80117d0:	607a      	str	r2, [r7, #4]
 80117d2:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00b      	beq.n	80117f6 <lv_draw_line+0x30>
    if(dsc->opa <= LV_OPA_MIN) return;
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	7a1b      	ldrb	r3, [r3, #8]
 80117e2:	2b02      	cmp	r3, #2
 80117e4:	d909      	bls.n	80117fa <lv_draw_line+0x34>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6a1c      	ldr	r4, [r3, #32]
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	68b9      	ldr	r1, [r7, #8]
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	47a0      	blx	r4
 80117f4:	e002      	b.n	80117fc <lv_draw_line+0x36>
    if(dsc->width == 0) return;
 80117f6:	bf00      	nop
 80117f8:	e000      	b.n	80117fc <lv_draw_line+0x36>
    if(dsc->opa <= LV_OPA_MIN) return;
 80117fa:	bf00      	nop
}
 80117fc:	3714      	adds	r7, #20
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd90      	pop	{r4, r7, pc}

08011802 <lv_area_copy>:
{
 8011802:	b480      	push	{r7}
 8011804:	b083      	sub	sp, #12
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	80da      	strh	r2, [r3, #6]
}
 8011834:	bf00      	nop
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr

08011840 <lv_area_get_width>:
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801184e:	b29a      	uxth	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011856:	b29b      	uxth	r3, r3
 8011858:	1ad3      	subs	r3, r2, r3
 801185a:	b29b      	uxth	r3, r3
 801185c:	3301      	adds	r3, #1
 801185e:	b29b      	uxth	r3, r3
 8011860:	b21b      	sxth	r3, r3
}
 8011862:	4618      	mov	r0, r3
 8011864:	370c      	adds	r7, #12
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr

0801186e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801186e:	b480      	push	{r7}
 8011870:	b083      	sub	sp, #12
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801187c:	b29a      	uxth	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011884:	b29b      	uxth	r3, r3
 8011886:	1ad3      	subs	r3, r2, r3
 8011888:	b29b      	uxth	r3, r3
 801188a:	3301      	adds	r3, #1
 801188c:	b29b      	uxth	r3, r3
 801188e:	b21b      	sxth	r3, r3
}
 8011890:	4618      	mov	r0, r3
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr

0801189c <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 801189c:	b480      	push	{r7}
 801189e:	b085      	sub	sp, #20
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80118a6:	2300      	movs	r3, #0
 80118a8:	73fb      	strb	r3, [r7, #15]
 80118aa:	e008      	b.n	80118be <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80118ac:	7bfb      	ldrb	r3, [r7, #15]
 80118ae:	4a13      	ldr	r2, [pc, #76]	; (80118fc <lv_draw_mask_add+0x60>)
 80118b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d006      	beq.n	80118c6 <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80118b8:	7bfb      	ldrb	r3, [r7, #15]
 80118ba:	3301      	adds	r3, #1
 80118bc:	73fb      	strb	r3, [r7, #15]
 80118be:	7bfb      	ldrb	r3, [r7, #15]
 80118c0:	2b0f      	cmp	r3, #15
 80118c2:	d9f3      	bls.n	80118ac <lv_draw_mask_add+0x10>
 80118c4:	e000      	b.n	80118c8 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80118c6:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 80118c8:	7bfb      	ldrb	r3, [r7, #15]
 80118ca:	2b0f      	cmp	r3, #15
 80118cc:	d902      	bls.n	80118d4 <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 80118ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118d2:	e00c      	b.n	80118ee <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	4909      	ldr	r1, [pc, #36]	; (80118fc <lv_draw_mask_add+0x60>)
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 80118de:	7bfb      	ldrb	r3, [r7, #15]
 80118e0:	4a06      	ldr	r2, [pc, #24]	; (80118fc <lv_draw_mask_add+0x60>)
 80118e2:	00db      	lsls	r3, r3, #3
 80118e4:	4413      	add	r3, r2
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	605a      	str	r2, [r3, #4]

    return i;
 80118ea:	7bfb      	ldrb	r3, [r7, #15]
 80118ec:	b21b      	sxth	r3, r3
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3714      	adds	r7, #20
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr
 80118fa:	bf00      	nop
 80118fc:	200009e0 	.word	0x200009e0

08011900 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 8011900:	b590      	push	{r4, r7, lr}
 8011902:	b08b      	sub	sp, #44	; 0x2c
 8011904:	af02      	add	r7, sp, #8
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	4608      	mov	r0, r1
 801190a:	4611      	mov	r1, r2
 801190c:	461a      	mov	r2, r3
 801190e:	4603      	mov	r3, r0
 8011910:	817b      	strh	r3, [r7, #10]
 8011912:	460b      	mov	r3, r1
 8011914:	813b      	strh	r3, [r7, #8]
 8011916:	4613      	mov	r3, r2
 8011918:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 801191a:	2300      	movs	r3, #0
 801191c:	77fb      	strb	r3, [r7, #31]
    _lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 801191e:	4b19      	ldr	r3, [pc, #100]	; (8011984 <lv_draw_mask_apply+0x84>)
 8011920:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 8011922:	e021      	b.n	8011968 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 801192a:	2301      	movs	r3, #1
 801192c:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	681c      	ldr	r4, [r3, #0]
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801193a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801193e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011942:	9300      	str	r3, [sp, #0]
 8011944:	4603      	mov	r3, r0
 8011946:	68f8      	ldr	r0, [r7, #12]
 8011948:	47a0      	blx	r4
 801194a:	4603      	mov	r3, r0
 801194c:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801194e:	7cfb      	ldrb	r3, [r7, #19]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d101      	bne.n	8011958 <lv_draw_mask_apply+0x58>
 8011954:	2300      	movs	r3, #0
 8011956:	e011      	b.n	801197c <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8011958:	7cfb      	ldrb	r3, [r7, #19]
 801195a:	2b02      	cmp	r3, #2
 801195c:	d101      	bne.n	8011962 <lv_draw_mask_apply+0x62>
 801195e:	2301      	movs	r3, #1
 8011960:	77fb      	strb	r3, [r7, #31]

        m++;
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	3308      	adds	r3, #8
 8011966:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 8011968:	69bb      	ldr	r3, [r7, #24]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1d9      	bne.n	8011924 <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8011970:	7ffb      	ldrb	r3, [r7, #31]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d001      	beq.n	801197a <lv_draw_mask_apply+0x7a>
 8011976:	2302      	movs	r3, #2
 8011978:	e000      	b.n	801197c <lv_draw_mask_apply+0x7c>
 801197a:	2301      	movs	r3, #1
}
 801197c:	4618      	mov	r0, r3
 801197e:	3724      	adds	r7, #36	; 0x24
 8011980:	46bd      	mov	sp, r7
 8011982:	bd90      	pop	{r4, r7, pc}
 8011984:	200009e0 	.word	0x200009e0

08011988 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 8011988:	b480      	push	{r7}
 801198a:	b085      	sub	sp, #20
 801198c:	af00      	add	r7, sp, #0
 801198e:	4603      	mov	r3, r0
 8011990:	80fb      	strh	r3, [r7, #6]
    _lv_draw_mask_common_dsc_t * p = NULL;
 8011992:	2300      	movs	r3, #0
 8011994:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 8011996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801199a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801199e:	d012      	beq.n	80119c6 <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 80119a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119a4:	4a0b      	ldr	r2, [pc, #44]	; (80119d4 <lv_draw_mask_remove_id+0x4c>)
 80119a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80119aa:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 80119ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119b0:	4a08      	ldr	r2, [pc, #32]	; (80119d4 <lv_draw_mask_remove_id+0x4c>)
 80119b2:	2100      	movs	r1, #0
 80119b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 80119b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119bc:	4a05      	ldr	r2, [pc, #20]	; (80119d4 <lv_draw_mask_remove_id+0x4c>)
 80119be:	00db      	lsls	r3, r3, #3
 80119c0:	4413      	add	r3, r2
 80119c2:	2200      	movs	r2, #0
 80119c4:	605a      	str	r2, [r3, #4]
    }

    return p;
 80119c6:	68fb      	ldr	r3, [r7, #12]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3714      	adds	r7, #20
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr
 80119d4:	200009e0 	.word	0x200009e0

080119d8 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b084      	sub	sp, #16
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * p = NULL;
 80119e0:	2300      	movs	r3, #0
 80119e2:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80119e4:	2300      	movs	r3, #0
 80119e6:	72fb      	strb	r3, [r7, #11]
 80119e8:	e014      	b.n	8011a14 <lv_draw_mask_remove_custom+0x3c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 80119ea:	7afb      	ldrb	r3, [r7, #11]
 80119ec:	4a0d      	ldr	r2, [pc, #52]	; (8011a24 <lv_draw_mask_remove_custom+0x4c>)
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	4413      	add	r3, r2
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d109      	bne.n	8011a0e <lv_draw_mask_remove_custom+0x36>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 80119fa:	7afb      	ldrb	r3, [r7, #11]
 80119fc:	4a09      	ldr	r2, [pc, #36]	; (8011a24 <lv_draw_mask_remove_custom+0x4c>)
 80119fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011a02:	60fb      	str	r3, [r7, #12]
            lv_draw_mask_remove_id(i);
 8011a04:	7afb      	ldrb	r3, [r7, #11]
 8011a06:	b21b      	sxth	r3, r3
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7ff ffbd 	bl	8011988 <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011a0e:	7afb      	ldrb	r3, [r7, #11]
 8011a10:	3301      	adds	r3, #1
 8011a12:	72fb      	strb	r3, [r7, #11]
 8011a14:	7afb      	ldrb	r3, [r7, #11]
 8011a16:	2b0f      	cmp	r3, #15
 8011a18:	d9e7      	bls.n	80119ea <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	200009e0 	.word	0x200009e0

08011a28 <lv_draw_mask_free_param>:
 * Needs to be called only in special cases when the mask is not added by `lv_draw_mask_add`
 * and not removed by `lv_draw_mask_remove_id` or `lv_draw_mask_remove_custom`
 * @param p pointer to a mask parameter
 */
void lv_draw_mask_free_param(void * p)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b086      	sub	sp, #24
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * pdsc = p;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	617b      	str	r3, [r7, #20]
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	791b      	ldrb	r3, [r3, #4]
 8011a38:	2b02      	cmp	r3, #2
 8011a3a:	d11c      	bne.n	8011a76 <lv_draw_mask_free_param+0x4e>
        lv_draw_mask_radius_param_t * radius_p = (lv_draw_mask_radius_param_t *) p;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	60fb      	str	r3, [r7, #12]
        if(radius_p->circle) {
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	695b      	ldr	r3, [r3, #20]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d021      	beq.n	8011a8c <lv_draw_mask_free_param+0x64>
            if(radius_p->circle->life < 0) {
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	695b      	ldr	r3, [r3, #20]
 8011a4c:	691b      	ldr	r3, [r3, #16]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	da0b      	bge.n	8011a6a <lv_draw_mask_free_param+0x42>
                lv_mem_free(radius_p->circle->cir_opa);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	695b      	ldr	r3, [r3, #20]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f010 f9b3 	bl	8021dc4 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	695b      	ldr	r3, [r3, #20]
 8011a62:	4618      	mov	r0, r3
 8011a64:	f010 f9ae 	bl	8021dc4 <lv_mem_free>
    }
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
        lv_mem_free(poly_p->cfg.points);
    }
}
 8011a68:	e010      	b.n	8011a8c <lv_draw_mask_free_param+0x64>
                radius_p->circle->used_cnt--;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	695b      	ldr	r3, [r3, #20]
 8011a6e:	695a      	ldr	r2, [r3, #20]
 8011a70:	3a01      	subs	r2, #1
 8011a72:	615a      	str	r2, [r3, #20]
}
 8011a74:	e00a      	b.n	8011a8c <lv_draw_mask_free_param+0x64>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	791b      	ldrb	r3, [r3, #4]
 8011a7a:	2b05      	cmp	r3, #5
 8011a7c:	d106      	bne.n	8011a8c <lv_draw_mask_free_param+0x64>
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	613b      	str	r3, [r7, #16]
        lv_mem_free(poly_p->cfg.points);
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	4618      	mov	r0, r3
 8011a88:	f010 f99c 	bl	8021dc4 <lv_mem_free>
}
 8011a8c:	bf00      	nop
 8011a8e:	3718      	adds	r7, #24
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <_lv_draw_mask_cleanup>:

void _lv_draw_mask_cleanup(void)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	71fb      	strb	r3, [r7, #7]
 8011a9e:	e022      	b.n	8011ae6 <_lv_draw_mask_cleanup+0x52>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 8011aa0:	79fa      	ldrb	r2, [r7, #7]
 8011aa2:	4915      	ldr	r1, [pc, #84]	; (8011af8 <_lv_draw_mask_cleanup+0x64>)
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	00db      	lsls	r3, r3, #3
 8011aa8:	1a9b      	subs	r3, r3, r2
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	440b      	add	r3, r1
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d00a      	beq.n	8011aca <_lv_draw_mask_cleanup+0x36>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 8011ab4:	79fa      	ldrb	r2, [r7, #7]
 8011ab6:	4910      	ldr	r1, [pc, #64]	; (8011af8 <_lv_draw_mask_cleanup+0x64>)
 8011ab8:	4613      	mov	r3, r2
 8011aba:	00db      	lsls	r3, r3, #3
 8011abc:	1a9b      	subs	r3, r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	440b      	add	r3, r1
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f010 f97d 	bl	8021dc4 <lv_mem_free>
        }
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8011aca:	79fa      	ldrb	r2, [r7, #7]
 8011acc:	4613      	mov	r3, r2
 8011ace:	00db      	lsls	r3, r3, #3
 8011ad0:	1a9b      	subs	r3, r3, r2
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	4a08      	ldr	r2, [pc, #32]	; (8011af8 <_lv_draw_mask_cleanup+0x64>)
 8011ad6:	4413      	add	r3, r2
 8011ad8:	211c      	movs	r1, #28
 8011ada:	4618      	mov	r0, r3
 8011adc:	f010 fd76 	bl	80225cc <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8011ae0:	79fb      	ldrb	r3, [r7, #7]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	71fb      	strb	r3, [r7, #7]
 8011ae6:	79fb      	ldrb	r3, [r7, #7]
 8011ae8:	2b03      	cmp	r3, #3
 8011aea:	d9d9      	bls.n	8011aa0 <_lv_draw_mask_cleanup+0xc>
    }
}
 8011aec:	bf00      	nop
 8011aee:	bf00      	nop
 8011af0:	3708      	adds	r7, #8
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	20000970 	.word	0x20000970

08011afc <lv_draw_mask_is_any>:
    }
    return cnt;
}

bool lv_draw_mask_is_any(const lv_area_t * a)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b086      	sub	sp, #24
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d107      	bne.n	8011b1a <lv_draw_mask_is_any+0x1e>
 8011b0a:	4b2a      	ldr	r3, [pc, #168]	; (8011bb4 <lv_draw_mask_is_any+0xb8>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	bf14      	ite	ne
 8011b12:	2301      	movne	r3, #1
 8011b14:	2300      	moveq	r3, #0
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	e048      	b.n	8011bac <lv_draw_mask_is_any+0xb0>

    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	75fb      	strb	r3, [r7, #23]
 8011b1e:	e041      	b.n	8011ba4 <lv_draw_mask_is_any+0xa8>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011b20:	7dfb      	ldrb	r3, [r7, #23]
 8011b22:	4a24      	ldr	r2, [pc, #144]	; (8011bb4 <lv_draw_mask_is_any+0xb8>)
 8011b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b28:	613b      	str	r3, [r7, #16]
        if(comm_param == NULL) continue;
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d035      	beq.n	8011b9c <lv_draw_mask_is_any+0xa0>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	791b      	ldrb	r3, [r3, #4]
 8011b34:	2b02      	cmp	r3, #2
 8011b36:	d12f      	bne.n	8011b98 <lv_draw_mask_is_any+0x9c>
            lv_draw_mask_radius_param_t * radius_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011b38:	7dfb      	ldrb	r3, [r7, #23]
 8011b3a:	4a1e      	ldr	r2, [pc, #120]	; (8011bb4 <lv_draw_mask_is_any+0xb8>)
 8011b3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b40:	60fb      	str	r3, [r7, #12]
            if(radius_param->cfg.outer) {
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	7c9b      	ldrb	r3, [r3, #18]
 8011b46:	f003 0301 	and.w	r3, r3, #1
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d011      	beq.n	8011b74 <lv_draw_mask_is_any+0x78>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	f103 0108 	add.w	r1, r3, #8
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f00f f862 	bl	8020c28 <_lv_area_is_out>
 8011b64:	4603      	mov	r3, r0
 8011b66:	f083 0301 	eor.w	r3, r3, #1
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d016      	beq.n	8011b9e <lv_draw_mask_is_any+0xa2>
 8011b70:	2301      	movs	r3, #1
 8011b72:	e01b      	b.n	8011bac <lv_draw_mask_is_any+0xb0>
            }
            else {
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f103 0108 	add.w	r1, r3, #8
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011b80:	461a      	mov	r2, r3
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f00e ffb2 	bl	8020aec <_lv_area_is_in>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	f083 0301 	eor.w	r3, r3, #1
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d004      	beq.n	8011b9e <lv_draw_mask_is_any+0xa2>
 8011b94:	2301      	movs	r3, #1
 8011b96:	e009      	b.n	8011bac <lv_draw_mask_is_any+0xb0>
            }
        }
        else {
            return true;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	e007      	b.n	8011bac <lv_draw_mask_is_any+0xb0>
        if(comm_param == NULL) continue;
 8011b9c:	bf00      	nop
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011b9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	75fb      	strb	r3, [r7, #23]
 8011ba4:	7dfb      	ldrb	r3, [r7, #23]
 8011ba6:	2b0f      	cmp	r3, #15
 8011ba8:	d9ba      	bls.n	8011b20 <lv_draw_mask_is_any+0x24>
        }
    }

    return false;
 8011baa:	2300      	movs	r3, #0

}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3718      	adds	r7, #24
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	200009e0 	.word	0x200009e0

08011bb8 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b08a      	sub	sp, #40	; 0x28
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	4608      	mov	r0, r1
 8011bc2:	4611      	mov	r1, r2
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	817b      	strh	r3, [r7, #10]
 8011bca:	460b      	mov	r3, r1
 8011bcc:	813b      	strh	r3, [r7, #8]
 8011bce:	4613      	mov	r3, r2
 8011bd0:	80fb      	strh	r3, [r7, #6]
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8011bd2:	212c      	movs	r1, #44	; 0x2c
 8011bd4:	68f8      	ldr	r0, [r7, #12]
 8011bd6:	f010 fcf9 	bl	80225cc <lv_memset_00>

    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8011bda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011bde:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d10f      	bne.n	8011c06 <lv_draw_mask_line_points_init+0x4e>
 8011be6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011bea:	2b03      	cmp	r3, #3
 8011bec:	d10b      	bne.n	8011c06 <lv_draw_mask_line_points_init+0x4e>
        p1y--;
 8011bee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	3b01      	subs	r3, #1
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	813b      	strh	r3, [r7, #8]
        p2y--;
 8011bfa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	3b01      	subs	r3, #1
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    if(p1y > p2y) {
 8011c06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011c0a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	dd0b      	ble.n	8011c2a <lv_draw_mask_line_points_init+0x72>
        lv_coord_t t;
        t = p2x;
 8011c12:	88fb      	ldrh	r3, [r7, #6]
 8011c14:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 8011c16:	897b      	ldrh	r3, [r7, #10]
 8011c18:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 8011c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c1c:	817b      	strh	r3, [r7, #10]

        t = p2y;
 8011c1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011c20:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 8011c22:	893b      	ldrh	r3, [r7, #8]
 8011c24:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 8011c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011c28:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	897a      	ldrh	r2, [r7, #10]
 8011c2e:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	893a      	ldrh	r2, [r7, #8]
 8011c34:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	88fa      	ldrh	r2, [r7, #6]
 8011c3a:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011c40:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 8011c42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011c46:	f003 0303 	and.w	r3, r3, #3
 8011c4a:	b2d9      	uxtb	r1, r3
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	7c13      	ldrb	r3, [r2, #16]
 8011c50:	f361 0301 	bfi	r3, r1, #0, #2
 8011c54:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	897a      	ldrh	r2, [r7, #10]
 8011c5a:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	893a      	ldrh	r2, [r7, #8]
 8011c60:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8011c62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011c66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011c6a:	1ad3      	subs	r3, r2, r3
 8011c6c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011c70:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011c74:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8011c78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011c7c:	1acb      	subs	r3, r1, r3
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	bfb8      	it	lt
 8011c82:	425b      	neglt	r3, r3
 8011c84:	429a      	cmp	r2, r3
 8011c86:	bfcc      	ite	gt
 8011c88:	2301      	movgt	r3, #1
 8011c8a:	2300      	movle	r3, #0
 8011c8c:	b2d9      	uxtb	r1, r3
 8011c8e:	68fa      	ldr	r2, [r7, #12]
 8011c90:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011c94:	f361 0300 	bfi	r3, r1, #0, #1
 8011c98:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	4a63      	ldr	r2, [pc, #396]	; (8011e38 <lv_draw_mask_line_points_init+0x280>)
 8011cac:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 8011cb4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011cb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011cbc:	1ad3      	subs	r3, r2, r3
 8011cbe:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 8011cc0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8011cc4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011cc8:	1ad3      	subs	r3, r2, r3
 8011cca:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cd2:	f003 0301 	and.w	r3, r3, #1
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d024      	beq.n	8011d26 <lv_draw_mask_line_points_init+0x16e>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00c      	beq.n	8011cfc <lv_draw_mask_line_points_init+0x144>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8011ce2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011ce6:	6a3b      	ldr	r3, [r7, #32]
 8011ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8011cec:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	69fa      	ldr	r2, [r7, #28]
 8011cf2:	fb02 f303 	mul.w	r3, r2, r3
 8011cf6:	129a      	asrs	r2, r3, #10
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00c      	beq.n	8011d1c <lv_draw_mask_line_points_init+0x164>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011d02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d0c:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	6a3a      	ldr	r2, [r7, #32]
 8011d12:	fb02 f303 	mul.w	r3, r2, r3
 8011d16:	129a      	asrs	r2, r3, #10
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	69da      	ldr	r2, [r3, #28]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	621a      	str	r2, [r3, #32]
 8011d24:	e023      	b.n	8011d6e <lv_draw_mask_line_points_init+0x1b6>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00c      	beq.n	8011d46 <lv_draw_mask_line_points_init+0x18e>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011d2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d36:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	6a3a      	ldr	r2, [r7, #32]
 8011d3c:	fb02 f303 	mul.w	r3, r2, r3
 8011d40:	129a      	asrs	r2, r3, #10
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 8011d46:	6a3b      	ldr	r3, [r7, #32]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d00c      	beq.n	8011d66 <lv_draw_mask_line_points_init+0x1ae>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011d4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011d50:	6a3b      	ldr	r3, [r7, #32]
 8011d52:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d56:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	69fa      	ldr	r2, [r7, #28]
 8011d5c:	fb02 f303 	mul.w	r3, r2, r3
 8011d60:	129a      	asrs	r2, r3, #10
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	699a      	ldr	r2, [r3, #24]
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	7c1b      	ldrb	r3, [r3, #16]
 8011d72:	f003 0303 	and.w	r3, r3, #3
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d107      	bne.n	8011d8c <lv_draw_mask_line_points_init+0x1d4>
 8011d7c:	68fa      	ldr	r2, [r7, #12]
 8011d7e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011d82:	f36f 0341 	bfc	r3, #1, #1
 8011d86:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011d8a:	e043      	b.n	8011e14 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	7c1b      	ldrb	r3, [r3, #16]
 8011d90:	f003 0303 	and.w	r3, r3, #3
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d107      	bne.n	8011daa <lv_draw_mask_line_points_init+0x1f2>
 8011d9a:	68fa      	ldr	r2, [r7, #12]
 8011d9c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011da0:	f043 0302 	orr.w	r3, r3, #2
 8011da4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011da8:	e034      	b.n	8011e14 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	7c1b      	ldrb	r3, [r3, #16]
 8011dae:	f003 0303 	and.w	r3, r3, #3
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	2b02      	cmp	r3, #2
 8011db6:	d113      	bne.n	8011de0 <lv_draw_mask_line_points_init+0x228>
        if(param->steep > 0) param->inv = 1;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	6a1b      	ldr	r3, [r3, #32]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	dd07      	ble.n	8011dd0 <lv_draw_mask_line_points_init+0x218>
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011dc6:	f043 0302 	orr.w	r3, r3, #2
 8011dca:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011dce:	e021      	b.n	8011e14 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 0;
 8011dd0:	68fa      	ldr	r2, [r7, #12]
 8011dd2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011dd6:	f36f 0341 	bfc	r3, #1, #1
 8011dda:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011dde:	e019      	b.n	8011e14 <lv_draw_mask_line_points_init+0x25c>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	7c1b      	ldrb	r3, [r3, #16]
 8011de4:	f003 0303 	and.w	r3, r3, #3
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	2b03      	cmp	r3, #3
 8011dec:	d112      	bne.n	8011e14 <lv_draw_mask_line_points_init+0x25c>
        if(param->steep > 0) param->inv = 0;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	6a1b      	ldr	r3, [r3, #32]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	dd07      	ble.n	8011e06 <lv_draw_mask_line_points_init+0x24e>
 8011df6:	68fa      	ldr	r2, [r7, #12]
 8011df8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011dfc:	f36f 0341 	bfc	r3, #1, #1
 8011e00:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011e04:	e006      	b.n	8011e14 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 1;
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011e0c:	f043 0302 	orr.w	r3, r3, #2
 8011e10:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6a1b      	ldr	r3, [r3, #32]
 8011e18:	109a      	asrs	r2, r3, #2
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	6a1b      	ldr	r3, [r3, #32]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	da04      	bge.n	8011e30 <lv_draw_mask_line_points_init+0x278>
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e2a:	425a      	negs	r2, r3
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011e30:	bf00      	nop
 8011e32:	3728      	adds	r7, #40	; 0x28
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	0801226d 	.word	0x0801226d

08011e3c <lv_draw_mask_line_angle_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_angle_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t py, int16_t angle,
                                  lv_draw_mask_line_side_t side)
{
 8011e3c:	b590      	push	{r4, r7, lr}
 8011e3e:	b089      	sub	sp, #36	; 0x24
 8011e40:	af02      	add	r7, sp, #8
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	4608      	mov	r0, r1
 8011e46:	4611      	mov	r1, r2
 8011e48:	461a      	mov	r2, r3
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	817b      	strh	r3, [r7, #10]
 8011e4e:	460b      	mov	r3, r1
 8011e50:	813b      	strh	r3, [r7, #8]
 8011e52:	4613      	mov	r3, r2
 8011e54:	80fb      	strh	r3, [r7, #6]
    /*Find an optimal degree.
     *lv_mask_line_points_init will swap the points to keep the smaller y in p1
     *Theoretically a line with `angle` or `angle+180` is the same only the points are swapped
     *Find the degree which keeps the origo in place*/
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 8011e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e5a:	2bb4      	cmp	r3, #180	; 0xb4
 8011e5c:	dd03      	ble.n	8011e66 <lv_draw_mask_line_angle_init+0x2a>
 8011e5e:	88fb      	ldrh	r3, [r7, #6]
 8011e60:	3bb4      	subs	r3, #180	; 0xb4
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	80fb      	strh	r3, [r7, #6]

    int32_t p2x;
    int32_t p2y;

    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 8011e66:	88fb      	ldrh	r3, [r7, #6]
 8011e68:	335a      	adds	r3, #90	; 0x5a
 8011e6a:	b29b      	uxth	r3, r3
 8011e6c:	b21b      	sxth	r3, r3
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f00f fe5e 	bl	8021b30 <lv_trigo_sin>
 8011e74:	4603      	mov	r3, r0
 8011e76:	115b      	asrs	r3, r3, #5
 8011e78:	b21b      	sxth	r3, r3
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011e80:	4413      	add	r3, r2
 8011e82:	617b      	str	r3, [r7, #20]
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 8011e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f00f fe51 	bl	8021b30 <lv_trigo_sin>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	115b      	asrs	r3, r3, #5
 8011e92:	b21b      	sxth	r3, r3
 8011e94:	461a      	mov	r2, r3
 8011e96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	613b      	str	r3, [r7, #16]

    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	b21c      	sxth	r4, r3
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	b21b      	sxth	r3, r3
 8011ea6:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8011eaa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011eae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011eb2:	9201      	str	r2, [sp, #4]
 8011eb4:	9300      	str	r3, [sp, #0]
 8011eb6:	4623      	mov	r3, r4
 8011eb8:	4602      	mov	r2, r0
 8011eba:	68f8      	ldr	r0, [r7, #12]
 8011ebc:	f7ff fe7c 	bl	8011bb8 <lv_draw_mask_line_points_init>
}
 8011ec0:	bf00      	nop
 8011ec2:	371c      	adds	r7, #28
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd90      	pop	{r4, r7, pc}

08011ec8 <lv_draw_mask_angle_init>:
 * @param start_angle start angle in degrees. 0 deg on the right, 90 deg, on the bottom
 * @param end_angle end angle
 */
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,
                             lv_coord_t start_angle, lv_coord_t end_angle)
{
 8011ec8:	b590      	push	{r4, r7, lr}
 8011eca:	b089      	sub	sp, #36	; 0x24
 8011ecc:	af02      	add	r7, sp, #8
 8011ece:	60f8      	str	r0, [r7, #12]
 8011ed0:	4608      	mov	r0, r1
 8011ed2:	4611      	mov	r1, r2
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	817b      	strh	r3, [r7, #10]
 8011eda:	460b      	mov	r3, r1
 8011edc:	813b      	strh	r3, [r7, #8]
 8011ede:	4613      	mov	r3, r2
 8011ee0:	80fb      	strh	r3, [r7, #6]
    lv_draw_mask_line_side_t start_side;
    lv_draw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
 8011ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	da02      	bge.n	8011ef0 <lv_draw_mask_angle_init+0x28>
        start_angle = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	80fb      	strh	r3, [r7, #6]
 8011eee:	e007      	b.n	8011f00 <lv_draw_mask_angle_init+0x38>
    else if(start_angle > 359)
 8011ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ef4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011ef8:	db02      	blt.n	8011f00 <lv_draw_mask_angle_init+0x38>
        start_angle = 359;
 8011efa:	f240 1367 	movw	r3, #359	; 0x167
 8011efe:	80fb      	strh	r3, [r7, #6]

    if(end_angle < 0)
 8011f00:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	da02      	bge.n	8011f0e <lv_draw_mask_angle_init+0x46>
        end_angle = 0;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8011f0c:	e007      	b.n	8011f1e <lv_draw_mask_angle_init+0x56>
    else if(end_angle > 359)
 8011f0e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011f12:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011f16:	db02      	blt.n	8011f1e <lv_draw_mask_angle_init+0x56>
        end_angle = 359;
 8011f18:	f240 1367 	movw	r3, #359	; 0x167
 8011f1c:	853b      	strh	r3, [r7, #40]	; 0x28

    if(end_angle < start_angle) {
 8011f1e:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8011f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f26:	429a      	cmp	r2, r3
 8011f28:	da0a      	bge.n	8011f40 <lv_draw_mask_angle_init+0x78>
        param->delta_deg = 360 - start_angle + end_angle;
 8011f2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011f2c:	88fb      	ldrh	r3, [r7, #6]
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011f3e:	e00b      	b.n	8011f58 <lv_draw_mask_angle_init+0x90>
    }
    else {
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8011f40:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8011f44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f48:	1ad3      	subs	r3, r2, r3
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	bfb8      	it	lt
 8011f4e:	425b      	neglt	r3, r3
 8011f50:	b29a      	uxth	r2, r3
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    }

    param->cfg.start_angle = start_angle;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	88fa      	ldrh	r2, [r7, #6]
 8011f5c:	819a      	strh	r2, [r3, #12]
    param->cfg.end_angle = end_angle;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011f62:	81da      	strh	r2, [r3, #14]
    param->cfg.vertex_p.x = vertex_x;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	897a      	ldrh	r2, [r7, #10]
 8011f68:	811a      	strh	r2, [r3, #8]
    param->cfg.vertex_p.y = vertex_y;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	893a      	ldrh	r2, [r7, #8]
 8011f6e:	815a      	strh	r2, [r3, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	4a2f      	ldr	r2, [pc, #188]	; (8012030 <lv_draw_mask_angle_init+0x168>)
 8011f74:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2201      	movs	r2, #1
 8011f7a:	711a      	strb	r2, [r3, #4]

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");
 8011f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	db04      	blt.n	8011f8e <lv_draw_mask_angle_init+0xc6>
 8011f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f88:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011f8c:	dd00      	ble.n	8011f90 <lv_draw_mask_angle_init+0xc8>
 8011f8e:	e7fe      	b.n	8011f8e <lv_draw_mask_angle_init+0xc6>

    if(start_angle >= 0 && start_angle < 180) {
 8011f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	db06      	blt.n	8011fa6 <lv_draw_mask_angle_init+0xde>
 8011f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f9c:	2bb3      	cmp	r3, #179	; 0xb3
 8011f9e:	dc02      	bgt.n	8011fa6 <lv_draw_mask_angle_init+0xde>
        start_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	75fb      	strb	r3, [r7, #23]
 8011fa4:	e001      	b.n	8011faa <lv_draw_mask_angle_init+0xe2>
    }
    else
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	75fb      	strb	r3, [r7, #23]

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");
 8011faa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	db04      	blt.n	8011fbc <lv_draw_mask_angle_init+0xf4>
 8011fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011fb6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011fba:	dd00      	ble.n	8011fbe <lv_draw_mask_angle_init+0xf6>
 8011fbc:	e7fe      	b.n	8011fbc <lv_draw_mask_angle_init+0xf4>

    if(end_angle >= 0 && end_angle < 180) {
 8011fbe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	db06      	blt.n	8011fd4 <lv_draw_mask_angle_init+0x10c>
 8011fc6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011fca:	2bb3      	cmp	r3, #179	; 0xb3
 8011fcc:	dc02      	bgt.n	8011fd4 <lv_draw_mask_angle_init+0x10c>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
 8011fce:	2301      	movs	r3, #1
 8011fd0:	75bb      	strb	r3, [r7, #22]
 8011fd2:	e00d      	b.n	8011ff0 <lv_draw_mask_angle_init+0x128>
    }
    else if(end_angle >= 180 && end_angle < 360) {
 8011fd4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011fd8:	2bb3      	cmp	r3, #179	; 0xb3
 8011fda:	dd07      	ble.n	8011fec <lv_draw_mask_angle_init+0x124>
 8011fdc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011fe0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011fe4:	da02      	bge.n	8011fec <lv_draw_mask_angle_init+0x124>
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	75bb      	strb	r3, [r7, #22]
 8011fea:	e001      	b.n	8011ff0 <lv_draw_mask_angle_init+0x128>
    }
    else
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8011fec:	2301      	movs	r3, #1
 8011fee:	75bb      	strb	r3, [r7, #22]

    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f103 0010 	add.w	r0, r3, #16
 8011ff6:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8011ffa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011ffe:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012002:	7dfb      	ldrb	r3, [r7, #23]
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	4623      	mov	r3, r4
 8012008:	f7ff ff18 	bl	8011e3c <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8012012:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8012016:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801201a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801201e:	7dbb      	ldrb	r3, [r7, #22]
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	4623      	mov	r3, r4
 8012024:	f7ff ff0a 	bl	8011e3c <lv_draw_mask_line_angle_init>
}
 8012028:	bf00      	nop
 801202a:	371c      	adds	r7, #28
 801202c:	46bd      	mov	sp, r7
 801202e:	bd90      	pop	{r4, r7, pc}
 8012030:	08012bed 	.word	0x08012bed

08012034 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b088      	sub	sp, #32
 8012038:	af00      	add	r7, sp, #0
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	4611      	mov	r1, r2
 8012040:	461a      	mov	r2, r3
 8012042:	460b      	mov	r3, r1
 8012044:	80fb      	strh	r3, [r7, #6]
 8012046:	4613      	mov	r3, r2
 8012048:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 801204a:	68b8      	ldr	r0, [r7, #8]
 801204c:	f7ff fbf8 	bl	8011840 <lv_area_get_width>
 8012050:	4603      	mov	r3, r0
 8012052:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 8012054:	68b8      	ldr	r0, [r7, #8]
 8012056:	f7ff fc0a 	bl	801186e <lv_area_get_height>
 801205a:	4603      	mov	r3, r0
 801205c:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MIN(w, h);
 801205e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8012062:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012066:	4293      	cmp	r3, r2
 8012068:	bfa8      	it	ge
 801206a:	4613      	movge	r3, r2
 801206c:	b21b      	sxth	r3, r3
 801206e:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 8012070:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	105b      	asrs	r3, r3, #1
 8012078:	429a      	cmp	r2, r3
 801207a:	dd02      	ble.n	8012082 <lv_draw_mask_radius_init+0x4e>
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	105b      	asrs	r3, r3, #1
 8012080:	80fb      	strh	r3, [r7, #6]
    if(radius < 0) radius = 0;
 8012082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012086:	2b00      	cmp	r3, #0
 8012088:	da01      	bge.n	801208e <lv_draw_mask_radius_init+0x5a>
 801208a:	2300      	movs	r3, #0
 801208c:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	3308      	adds	r3, #8
 8012092:	68b9      	ldr	r1, [r7, #8]
 8012094:	4618      	mov	r0, r3
 8012096:	f7ff fbb4 	bl	8011802 <lv_area_copy>
    param->cfg.radius = radius;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	88fa      	ldrh	r2, [r7, #6]
 801209e:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 80120a0:	7979      	ldrb	r1, [r7, #5]
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	7c93      	ldrb	r3, [r2, #18]
 80120a6:	f361 0300 	bfi	r3, r1, #0, #1
 80120aa:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	4a6d      	ldr	r2, [pc, #436]	; (8012264 <lv_draw_mask_radius_init+0x230>)
 80120b0:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	2202      	movs	r2, #2
 80120b6:	711a      	strb	r2, [r3, #4]

    if(radius == 0) {
 80120b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d103      	bne.n	80120c8 <lv_draw_mask_radius_init+0x94>
        param->circle = NULL;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2200      	movs	r2, #0
 80120c4:	615a      	str	r2, [r3, #20]
        return;
 80120c6:	e0c9      	b.n	801225c <lv_draw_mask_radius_init+0x228>
    }

    uint32_t i;

    /*Try to reuse a circle cache entry*/
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80120c8:	2300      	movs	r3, #0
 80120ca:	61fb      	str	r3, [r7, #28]
 80120cc:	e050      	b.n	8012170 <lv_draw_mask_radius_init+0x13c>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 80120ce:	4966      	ldr	r1, [pc, #408]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 80120d0:	69fa      	ldr	r2, [r7, #28]
 80120d2:	4613      	mov	r3, r2
 80120d4:	00db      	lsls	r3, r3, #3
 80120d6:	1a9b      	subs	r3, r3, r2
 80120d8:	009b      	lsls	r3, r3, #2
 80120da:	440b      	add	r3, r1
 80120dc:	3318      	adds	r3, #24
 80120de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d13f      	bne.n	801216a <lv_draw_mask_radius_init+0x136>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 80120ea:	495f      	ldr	r1, [pc, #380]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 80120ec:	69fa      	ldr	r2, [r7, #28]
 80120ee:	4613      	mov	r3, r2
 80120f0:	00db      	lsls	r3, r3, #3
 80120f2:	1a9b      	subs	r3, r3, r2
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	440b      	add	r3, r1
 80120f8:	3314      	adds	r3, #20
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	1c59      	adds	r1, r3, #1
 80120fe:	485a      	ldr	r0, [pc, #360]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 8012100:	69fa      	ldr	r2, [r7, #28]
 8012102:	4613      	mov	r3, r2
 8012104:	00db      	lsls	r3, r3, #3
 8012106:	1a9b      	subs	r3, r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4403      	add	r3, r0
 801210c:	3314      	adds	r3, #20
 801210e:	6019      	str	r1, [r3, #0]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8012110:	4955      	ldr	r1, [pc, #340]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 8012112:	69fa      	ldr	r2, [r7, #28]
 8012114:	4613      	mov	r3, r2
 8012116:	00db      	lsls	r3, r3, #3
 8012118:	1a9b      	subs	r3, r3, r2
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	440b      	add	r3, r1
 801211e:	3310      	adds	r3, #16
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012126:	2a0f      	cmp	r2, #15
 8012128:	dd04      	ble.n	8012134 <lv_draw_mask_radius_init+0x100>
 801212a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801212e:	1112      	asrs	r2, r2, #4
 8012130:	b212      	sxth	r2, r2
 8012132:	e000      	b.n	8012136 <lv_draw_mask_radius_init+0x102>
 8012134:	2201      	movs	r2, #1
 8012136:	4413      	add	r3, r2
 8012138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801213c:	bfa8      	it	ge
 801213e:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8012142:	4619      	mov	r1, r3
 8012144:	4848      	ldr	r0, [pc, #288]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 8012146:	69fa      	ldr	r2, [r7, #28]
 8012148:	4613      	mov	r3, r2
 801214a:	00db      	lsls	r3, r3, #3
 801214c:	1a9b      	subs	r3, r3, r2
 801214e:	009b      	lsls	r3, r3, #2
 8012150:	4403      	add	r3, r0
 8012152:	3310      	adds	r3, #16
 8012154:	6019      	str	r1, [r3, #0]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 8012156:	69fa      	ldr	r2, [r7, #28]
 8012158:	4613      	mov	r3, r2
 801215a:	00db      	lsls	r3, r3, #3
 801215c:	1a9b      	subs	r3, r3, r2
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	4a41      	ldr	r2, [pc, #260]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 8012162:	441a      	add	r2, r3
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	615a      	str	r2, [r3, #20]
            return;
 8012168:	e078      	b.n	801225c <lv_draw_mask_radius_init+0x228>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	3301      	adds	r3, #1
 801216e:	61fb      	str	r3, [r7, #28]
 8012170:	69fb      	ldr	r3, [r7, #28]
 8012172:	2b03      	cmp	r3, #3
 8012174:	d9ab      	bls.n	80120ce <lv_draw_mask_radius_init+0x9a>
        }
    }

    /*If not found find a free entry with lowest life*/
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 8012176:	2300      	movs	r3, #0
 8012178:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 801217a:	2300      	movs	r3, #0
 801217c:	61fb      	str	r3, [r7, #28]
 801217e:	e02e      	b.n	80121de <lv_draw_mask_radius_init+0x1aa>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 8012180:	4939      	ldr	r1, [pc, #228]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 8012182:	69fa      	ldr	r2, [r7, #28]
 8012184:	4613      	mov	r3, r2
 8012186:	00db      	lsls	r3, r3, #3
 8012188:	1a9b      	subs	r3, r3, r2
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	440b      	add	r3, r1
 801218e:	3314      	adds	r3, #20
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d120      	bne.n	80121d8 <lv_draw_mask_radius_init+0x1a4>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d108      	bne.n	80121ae <lv_draw_mask_radius_init+0x17a>
 801219c:	69fa      	ldr	r2, [r7, #28]
 801219e:	4613      	mov	r3, r2
 80121a0:	00db      	lsls	r3, r3, #3
 80121a2:	1a9b      	subs	r3, r3, r2
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	4a30      	ldr	r2, [pc, #192]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 80121a8:	4413      	add	r3, r2
 80121aa:	61bb      	str	r3, [r7, #24]
 80121ac:	e014      	b.n	80121d8 <lv_draw_mask_radius_init+0x1a4>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80121ae:	492e      	ldr	r1, [pc, #184]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 80121b0:	69fa      	ldr	r2, [r7, #28]
 80121b2:	4613      	mov	r3, r2
 80121b4:	00db      	lsls	r3, r3, #3
 80121b6:	1a9b      	subs	r3, r3, r2
 80121b8:	009b      	lsls	r3, r3, #2
 80121ba:	440b      	add	r3, r1
 80121bc:	3310      	adds	r3, #16
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	691b      	ldr	r3, [r3, #16]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	da07      	bge.n	80121d8 <lv_draw_mask_radius_init+0x1a4>
 80121c8:	69fa      	ldr	r2, [r7, #28]
 80121ca:	4613      	mov	r3, r2
 80121cc:	00db      	lsls	r3, r3, #3
 80121ce:	1a9b      	subs	r3, r3, r2
 80121d0:	009b      	lsls	r3, r3, #2
 80121d2:	4a25      	ldr	r2, [pc, #148]	; (8012268 <lv_draw_mask_radius_init+0x234>)
 80121d4:	4413      	add	r3, r2
 80121d6:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	3301      	adds	r3, #1
 80121dc:	61fb      	str	r3, [r7, #28]
 80121de:	69fb      	ldr	r3, [r7, #28]
 80121e0:	2b03      	cmp	r3, #3
 80121e2:	d9cd      	bls.n	8012180 <lv_draw_mask_radius_init+0x14c>
        }
    }

    if(!entry) {
 80121e4:	69bb      	ldr	r3, [r7, #24]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d110      	bne.n	801220c <lv_draw_mask_radius_init+0x1d8>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 80121ea:	201c      	movs	r0, #28
 80121ec:	f00f fdba 	bl	8021d64 <lv_mem_alloc>
 80121f0:	61b8      	str	r0, [r7, #24]
        LV_ASSERT_MALLOC(entry);
 80121f2:	69bb      	ldr	r3, [r7, #24]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d100      	bne.n	80121fa <lv_draw_mask_radius_init+0x1c6>
 80121f8:	e7fe      	b.n	80121f8 <lv_draw_mask_radius_init+0x1c4>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 80121fa:	211c      	movs	r1, #28
 80121fc:	69b8      	ldr	r0, [r7, #24]
 80121fe:	f010 f9e5 	bl	80225cc <lv_memset_00>
        entry->life = -1;
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012208:	611a      	str	r2, [r3, #16]
 801220a:	e01c      	b.n	8012246 <lv_draw_mask_radius_init+0x212>
    }
    else {
        entry->used_cnt++;
 801220c:	69bb      	ldr	r3, [r7, #24]
 801220e:	695b      	ldr	r3, [r3, #20]
 8012210:	1c5a      	adds	r2, r3, #1
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	615a      	str	r2, [r3, #20]
        entry->life = 0;
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	2200      	movs	r2, #0
 801221a:	611a      	str	r2, [r3, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	691b      	ldr	r3, [r3, #16]
 8012220:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012224:	2a0f      	cmp	r2, #15
 8012226:	dd04      	ble.n	8012232 <lv_draw_mask_radius_init+0x1fe>
 8012228:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801222c:	1112      	asrs	r2, r2, #4
 801222e:	b212      	sxth	r2, r2
 8012230:	e000      	b.n	8012234 <lv_draw_mask_radius_init+0x200>
 8012232:	2201      	movs	r2, #1
 8012234:	4413      	add	r3, r2
 8012236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801223a:	bfa8      	it	ge
 801223c:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8012240:	461a      	mov	r2, r3
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	611a      	str	r2, [r3, #16]
    }

    param->circle = entry;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	69ba      	ldr	r2, [r7, #24]
 801224a:	615a      	str	r2, [r3, #20]

    circ_calc_aa4(param->circle, radius);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	695b      	ldr	r3, [r3, #20]
 8012250:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012254:	4611      	mov	r1, r2
 8012256:	4618      	mov	r0, r3
 8012258:	f001 fae6 	bl	8013828 <circ_calc_aa4>
}
 801225c:	3720      	adds	r7, #32
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	080131ed 	.word	0x080131ed
 8012268:	20000970 	.word	0x20000970

0801226c <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b08a      	sub	sp, #40	; 0x28
 8012270:	af02      	add	r7, sp, #8
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	4608      	mov	r0, r1
 8012276:	4611      	mov	r1, r2
 8012278:	461a      	mov	r2, r3
 801227a:	4603      	mov	r3, r0
 801227c:	817b      	strh	r3, [r7, #10]
 801227e:	460b      	mov	r3, r1
 8012280:	813b      	strh	r3, [r7, #8]
 8012282:	4613      	mov	r3, r2
 8012284:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 8012286:	893a      	ldrh	r2, [r7, #8]
 8012288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801228a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801228e:	b29b      	uxth	r3, r3
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	b29b      	uxth	r3, r3
 8012294:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 8012296:	897a      	ldrh	r2, [r7, #10]
 8012298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801229e:	b29b      	uxth	r3, r3
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 80122a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a8:	6a1b      	ldr	r3, [r3, #32]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	f040 80a7 	bne.w	80123fe <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 80122b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122b6:	f003 0301 	and.w	r3, r3, #1
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d02c      	beq.n	801231a <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 80122c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c2:	7c1b      	ldrb	r3, [r3, #16]
 80122c4:	f003 0303 	and.w	r3, r3, #3
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d006      	beq.n	80122dc <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80122ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d0:	7c1b      	ldrb	r3, [r3, #16]
 80122d2:	f003 0303 	and.w	r3, r3, #3
 80122d6:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d101      	bne.n	80122e0 <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80122dc:	2301      	movs	r3, #1
 80122de:	e0b4      	b.n	801244a <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80122e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e2:	7c1b      	ldrb	r3, [r3, #16]
 80122e4:	f003 0303 	and.w	r3, r3, #3
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	2b02      	cmp	r3, #2
 80122ec:	d106      	bne.n	80122fc <lv_draw_mask_line+0x90>
 80122ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80122f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122f6:	da01      	bge.n	80122fc <lv_draw_mask_line+0x90>
 80122f8:	2301      	movs	r3, #1
 80122fa:	e0a6      	b.n	801244a <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80122fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fe:	7c1b      	ldrb	r3, [r3, #16]
 8012300:	f003 0303 	and.w	r3, r3, #3
 8012304:	b2db      	uxtb	r3, r3
 8012306:	2b03      	cmp	r3, #3
 8012308:	d105      	bne.n	8012316 <lv_draw_mask_line+0xaa>
 801230a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801230e:	2b00      	cmp	r3, #0
 8012310:	dd01      	ble.n	8012316 <lv_draw_mask_line+0xaa>
 8012312:	2301      	movs	r3, #1
 8012314:	e099      	b.n	801244a <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8012316:	2300      	movs	r3, #0
 8012318:	e097      	b.n	801244a <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 801231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231c:	7c1b      	ldrb	r3, [r3, #16]
 801231e:	f003 0303 	and.w	r3, r3, #3
 8012322:	b2db      	uxtb	r3, r3
 8012324:	2b02      	cmp	r3, #2
 8012326:	d006      	beq.n	8012336 <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8012328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232a:	7c1b      	ldrb	r3, [r3, #16]
 801232c:	f003 0303 	and.w	r3, r3, #3
 8012330:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8012332:	2b03      	cmp	r3, #3
 8012334:	d101      	bne.n	801233a <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8012336:	2301      	movs	r3, #1
 8012338:	e087      	b.n	801244a <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233c:	7c1b      	ldrb	r3, [r3, #16]
 801233e:	f003 0303 	and.w	r3, r3, #3
 8012342:	b2db      	uxtb	r3, r3
 8012344:	2b01      	cmp	r3, #1
 8012346:	d105      	bne.n	8012354 <lv_draw_mask_line+0xe8>
 8012348:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801234c:	2b00      	cmp	r3, #0
 801234e:	dd01      	ble.n	8012354 <lv_draw_mask_line+0xe8>
 8012350:	2301      	movs	r3, #1
 8012352:	e07a      	b.n	801244a <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	7c1b      	ldrb	r3, [r3, #16]
 8012358:	f003 0303 	and.w	r3, r3, #3
 801235c:	b2db      	uxtb	r3, r3
 801235e:	2b00      	cmp	r3, #0
 8012360:	d125      	bne.n	80123ae <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8012362:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801236a:	4413      	add	r3, r2
 801236c:	2b00      	cmp	r3, #0
 801236e:	da01      	bge.n	8012374 <lv_draw_mask_line+0x108>
 8012370:	2301      	movs	r3, #1
 8012372:	e06a      	b.n	801244a <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 8012374:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012378:	425b      	negs	r3, r3
 801237a:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	2b00      	cmp	r3, #0
 8012380:	da01      	bge.n	8012386 <lv_draw_mask_line+0x11a>
 8012382:	2300      	movs	r3, #0
 8012384:	e061      	b.n	801244a <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	2b00      	cmp	r3, #0
 801238a:	db0e      	blt.n	80123aa <lv_draw_mask_line+0x13e>
 801238c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012390:	697a      	ldr	r2, [r7, #20]
 8012392:	429a      	cmp	r2, r3
 8012394:	da09      	bge.n	80123aa <lv_draw_mask_line+0x13e>
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	18d0      	adds	r0, r2, r3
 801239c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	1ad3      	subs	r3, r2, r3
 80123a4:	4619      	mov	r1, r3
 80123a6:	f010 f911 	bl	80225cc <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 80123aa:	2302      	movs	r3, #2
 80123ac:	e04d      	b.n	801244a <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 80123ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80123b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123b6:	4413      	add	r3, r2
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	da01      	bge.n	80123c0 <lv_draw_mask_line+0x154>
 80123bc:	2300      	movs	r3, #0
 80123be:	e044      	b.n	801244a <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 80123c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80123c4:	425b      	negs	r3, r3
 80123c6:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	da01      	bge.n	80123d2 <lv_draw_mask_line+0x166>
 80123ce:	2300      	movs	r3, #0
 80123d0:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 80123d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123d6:	69fa      	ldr	r2, [r7, #28]
 80123d8:	429a      	cmp	r2, r3
 80123da:	db01      	blt.n	80123e0 <lv_draw_mask_line+0x174>
 80123dc:	2300      	movs	r3, #0
 80123de:	e034      	b.n	801244a <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	db09      	blt.n	80123fa <lv_draw_mask_line+0x18e>
 80123e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123ea:	69fa      	ldr	r2, [r7, #28]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	da04      	bge.n	80123fa <lv_draw_mask_line+0x18e>
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	4619      	mov	r1, r3
 80123f4:	68f8      	ldr	r0, [r7, #12]
 80123f6:	f010 f8e9 	bl	80225cc <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 80123fa:	2302      	movs	r3, #2
 80123fc:	e025      	b.n	801244a <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 80123fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012404:	f003 0301 	and.w	r3, r3, #1
 8012408:	b2db      	uxtb	r3, r3
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00e      	beq.n	801242c <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 801240e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012412:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012416:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	4603      	mov	r3, r0
 8012420:	68f8      	ldr	r0, [r7, #12]
 8012422:	f000 f816 	bl	8012452 <line_mask_flat>
 8012426:	4603      	mov	r3, r0
 8012428:	76fb      	strb	r3, [r7, #27]
 801242a:	e00d      	b.n	8012448 <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 801242c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012430:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012434:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243a:	9300      	str	r3, [sp, #0]
 801243c:	4603      	mov	r3, r0
 801243e:	68f8      	ldr	r0, [r7, #12]
 8012440:	f000 f991 	bl	8012766 <line_mask_steep>
 8012444:	4603      	mov	r3, r0
 8012446:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 8012448:	7efb      	ldrb	r3, [r7, #27]
}
 801244a:	4618      	mov	r0, r3
 801244c:	3720      	adds	r7, #32
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}

08012452 <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 8012452:	b590      	push	{r4, r7, lr}
 8012454:	b08d      	sub	sp, #52	; 0x34
 8012456:	af00      	add	r7, sp, #0
 8012458:	60f8      	str	r0, [r7, #12]
 801245a:	4608      	mov	r0, r1
 801245c:	4611      	mov	r1, r2
 801245e:	461a      	mov	r2, r3
 8012460:	4603      	mov	r3, r0
 8012462:	817b      	strh	r3, [r7, #10]
 8012464:	460b      	mov	r3, r1
 8012466:	813b      	strh	r3, [r7, #8]
 8012468:	4613      	mov	r3, r2
 801246a:	80fb      	strh	r3, [r7, #6]

    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 801246c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801246e:	69db      	ldr	r3, [r3, #28]
 8012470:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012474:	fb02 f303 	mul.w	r3, r2, r3
 8012478:	129b      	asrs	r3, r3, #10
 801247a:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 801247c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801247e:	69db      	ldr	r3, [r3, #28]
 8012480:	2b00      	cmp	r3, #0
 8012482:	dd10      	ble.n	80124a6 <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 8012484:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012488:	69fa      	ldr	r2, [r7, #28]
 801248a:	429a      	cmp	r2, r3
 801248c:	dd1c      	ble.n	80124c8 <line_mask_flat+0x76>
            if(p->inv) {
 801248e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012494:	f003 0302 	and.w	r3, r3, #2
 8012498:	b2db      	uxtb	r3, r3
 801249a:	2b00      	cmp	r3, #0
 801249c:	d001      	beq.n	80124a2 <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 801249e:	2301      	movs	r3, #1
 80124a0:	e15d      	b.n	801275e <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80124a2:	2300      	movs	r3, #0
 80124a4:	e15b      	b.n	801275e <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 80124a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80124aa:	69fa      	ldr	r2, [r7, #28]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	da0b      	bge.n	80124c8 <line_mask_flat+0x76>
            if(p->inv) {
 80124b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124b6:	f003 0302 	and.w	r3, r3, #2
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d001      	beq.n	80124c4 <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80124c0:	2301      	movs	r3, #1
 80124c2:	e14c      	b.n	801275e <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80124c4:	2300      	movs	r3, #0
 80124c6:	e14a      	b.n	801275e <line_mask_flat+0x30c>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 80124c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124ca:	69db      	ldr	r3, [r3, #28]
 80124cc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80124d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124d4:	440a      	add	r2, r1
 80124d6:	fb02 f303 	mul.w	r3, r2, r3
 80124da:	129b      	asrs	r3, r3, #10
 80124dc:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 80124de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124e0:	69db      	ldr	r3, [r3, #28]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	dd10      	ble.n	8012508 <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 80124e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80124ea:	69fa      	ldr	r2, [r7, #28]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	da1c      	bge.n	801252a <line_mask_flat+0xd8>
            if(p->inv) {
 80124f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124f6:	f003 0302 	and.w	r3, r3, #2
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d001      	beq.n	8012504 <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 8012500:	2300      	movs	r3, #0
 8012502:	e12c      	b.n	801275e <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8012504:	2301      	movs	r3, #1
 8012506:	e12a      	b.n	801275e <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 8012508:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801250c:	69fa      	ldr	r2, [r7, #28]
 801250e:	429a      	cmp	r2, r3
 8012510:	dd0b      	ble.n	801252a <line_mask_flat+0xd8>
            if(p->inv) {
 8012512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012518:	f003 0302 	and.w	r3, r3, #2
 801251c:	b2db      	uxtb	r3, r3
 801251e:	2b00      	cmp	r3, #0
 8012520:	d001      	beq.n	8012526 <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 8012522:	2300      	movs	r3, #0
 8012524:	e11b      	b.n	801275e <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8012526:	2301      	movs	r3, #1
 8012528:	e119      	b.n	801275e <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 801252a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801252c:	69db      	ldr	r3, [r3, #28]
 801252e:	2b00      	cmp	r3, #0
 8012530:	dd09      	ble.n	8012546 <line_mask_flat+0xf4>
 8012532:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012536:	021b      	lsls	r3, r3, #8
 8012538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801253a:	6992      	ldr	r2, [r2, #24]
 801253c:	fb02 f303 	mul.w	r3, r2, r3
 8012540:	129b      	asrs	r3, r3, #10
 8012542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012544:	e009      	b.n	801255a <line_mask_flat+0x108>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8012546:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801254a:	3301      	adds	r3, #1
 801254c:	021b      	lsls	r3, r3, #8
 801254e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012550:	6992      	ldr	r2, [r2, #24]
 8012552:	fb02 f303 	mul.w	r3, r2, r3
 8012556:	129b      	asrs	r3, r3, #10
 8012558:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 801255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255c:	121b      	asrs	r3, r3, #8
 801255e:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 8012560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012562:	b2db      	uxtb	r3, r3
 8012564:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d102      	bne.n	8012572 <line_mask_flat+0x120>
 801256c:	23ff      	movs	r3, #255	; 0xff
 801256e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012570:	e00a      	b.n	8012588 <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801257a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801257c:	fb02 f303 	mul.w	r3, r2, r3
 8012580:	121b      	asrs	r3, r3, #8
 8012582:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012586:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 8012588:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801258c:	69ba      	ldr	r2, [r7, #24]
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d06c      	beq.n	8012672 <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 8012598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259a:	2b00      	cmp	r3, #0
 801259c:	db2c      	blt.n	80125f8 <line_mask_flat+0x1a6>
 801259e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125a4:	429a      	cmp	r2, r3
 80125a6:	da27      	bge.n	80125f8 <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80125ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125b0:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80125b4:	fb02 f303 	mul.w	r3, r2, r3
 80125b8:	125b      	asrs	r3, r3, #9
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	43db      	mvns	r3, r3
 80125be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 80125c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125c8:	f003 0302 	and.w	r3, r3, #2
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d004      	beq.n	80125dc <line_mask_flat+0x18a>
 80125d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80125d6:	43db      	mvns	r3, r3
 80125d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80125dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125de:	68fa      	ldr	r2, [r7, #12]
 80125e0:	4413      	add	r3, r2
 80125e2:	7818      	ldrb	r0, [r3, #0]
 80125e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e6:	68fa      	ldr	r2, [r7, #12]
 80125e8:	18d4      	adds	r4, r2, r3
 80125ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80125ee:	4619      	mov	r1, r3
 80125f0:	f001 fc9a 	bl	8013f28 <mask_mix>
 80125f4:	4603      	mov	r3, r0
 80125f6:	7023      	strb	r3, [r4, #0]
        }
        k++;
 80125f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fa:	3301      	adds	r3, #1
 80125fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 80125fe:	e038      	b.n	8012672 <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 8012600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012602:	2b00      	cmp	r3, #0
 8012604:	db28      	blt.n	8012658 <line_mask_flat+0x206>
 8012606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801260c:	429a      	cmp	r2, r3
 801260e:	da23      	bge.n	8012658 <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 8012610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012612:	b2da      	uxtb	r2, r3
 8012614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012618:	105b      	asrs	r3, r3, #1
 801261a:	b2db      	uxtb	r3, r3
 801261c:	1ad3      	subs	r3, r2, r3
 801261e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 8012622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012628:	f003 0302 	and.w	r3, r3, #2
 801262c:	b2db      	uxtb	r3, r3
 801262e:	2b00      	cmp	r3, #0
 8012630:	d004      	beq.n	801263c <line_mask_flat+0x1ea>
 8012632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012636:	43db      	mvns	r3, r3
 8012638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263e:	68fa      	ldr	r2, [r7, #12]
 8012640:	4413      	add	r3, r2
 8012642:	7818      	ldrb	r0, [r3, #0]
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012646:	68fa      	ldr	r2, [r7, #12]
 8012648:	18d4      	adds	r4, r2, r3
 801264a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801264e:	4619      	mov	r1, r3
 8012650:	f001 fc6a 	bl	8013f28 <mask_mix>
 8012654:	4603      	mov	r3, r0
 8012656:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 8012658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801265e:	1ad3      	subs	r3, r2, r3
 8012660:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 8012662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012664:	3301      	adds	r3, #1
 8012666:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 8012668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801266c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801266e:	429a      	cmp	r2, r3
 8012670:	da05      	bge.n	801267e <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 8012672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012678:	429a      	cmp	r2, r3
 801267a:	dcc1      	bgt.n	8012600 <line_mask_flat+0x1ae>
 801267c:	e000      	b.n	8012680 <line_mask_flat+0x22e>
        if(k >= len) break;
 801267e:	bf00      	nop
    }

    if(k < len && k >= 0) {
 8012680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012686:	429a      	cmp	r2, r3
 8012688:	da34      	bge.n	80126f4 <line_mask_flat+0x2a2>
 801268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268c:	2b00      	cmp	r3, #0
 801268e:	db31      	blt.n	80126f4 <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 8012690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012692:	699b      	ldr	r3, [r3, #24]
 8012694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012696:	fb02 f303 	mul.w	r3, r2, r3
 801269a:	129b      	asrs	r3, r3, #10
 801269c:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126a2:	fb02 f303 	mul.w	r3, r2, r3
 80126a6:	125b      	asrs	r3, r3, #9
 80126a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 80126ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126ae:	69db      	ldr	r3, [r3, #28]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	da04      	bge.n	80126be <line_mask_flat+0x26c>
 80126b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126b8:	43db      	mvns	r3, r3
 80126ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 80126be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126c4:	f003 0302 	and.w	r3, r3, #2
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d004      	beq.n	80126d8 <line_mask_flat+0x286>
 80126ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126d2:	43db      	mvns	r3, r3
 80126d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 80126d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126da:	68fa      	ldr	r2, [r7, #12]
 80126dc:	4413      	add	r3, r2
 80126de:	7818      	ldrb	r0, [r3, #0]
 80126e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e2:	68fa      	ldr	r2, [r7, #12]
 80126e4:	18d4      	adds	r4, r2, r3
 80126e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126ea:	4619      	mov	r1, r3
 80126ec:	f001 fc1c 	bl	8013f28 <mask_mix>
 80126f0:	4603      	mov	r3, r0
 80126f2:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 80126f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126fa:	f003 0302 	and.w	r3, r3, #2
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	2b00      	cmp	r3, #0
 8012702:	d014      	beq.n	801272e <line_mask_flat+0x2dc>
        k = xei - abs_x;
 8012704:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012708:	69ba      	ldr	r2, [r7, #24]
 801270a:	1ad3      	subs	r3, r2, r3
 801270c:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 801270e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012714:	429a      	cmp	r2, r3
 8012716:	dd01      	ble.n	801271c <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 8012718:	2300      	movs	r3, #0
 801271a:	e020      	b.n	801275e <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 801271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271e:	2b00      	cmp	r3, #0
 8012720:	db1c      	blt.n	801275c <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[0], k);
 8012722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012724:	4619      	mov	r1, r3
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	f00f ff50 	bl	80225cc <lv_memset_00>
 801272c:	e016      	b.n	801275c <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 801272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012730:	3301      	adds	r3, #1
 8012732:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 8012734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012736:	2b00      	cmp	r3, #0
 8012738:	da01      	bge.n	801273e <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 801273a:	2300      	movs	r3, #0
 801273c:	e00f      	b.n	801275e <line_mask_flat+0x30c>
        }
        if(k <= len) {
 801273e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012744:	429a      	cmp	r2, r3
 8012746:	dc09      	bgt.n	801275c <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[k], len - k);
 8012748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274a:	68fa      	ldr	r2, [r7, #12]
 801274c:	18d0      	adds	r0, r2, r3
 801274e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012754:	1ad3      	subs	r3, r2, r3
 8012756:	4619      	mov	r1, r3
 8012758:	f00f ff38 	bl	80225cc <lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 801275c:	2302      	movs	r3, #2
}
 801275e:	4618      	mov	r0, r3
 8012760:	3734      	adds	r7, #52	; 0x34
 8012762:	46bd      	mov	sp, r7
 8012764:	bd90      	pop	{r4, r7, pc}

08012766 <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 8012766:	b590      	push	{r4, r7, lr}
 8012768:	b091      	sub	sp, #68	; 0x44
 801276a:	af00      	add	r7, sp, #0
 801276c:	60f8      	str	r0, [r7, #12]
 801276e:	4608      	mov	r0, r1
 8012770:	4611      	mov	r1, r2
 8012772:	461a      	mov	r2, r3
 8012774:	4603      	mov	r3, r0
 8012776:	817b      	strh	r3, [r7, #10]
 8012778:	460b      	mov	r3, r1
 801277a:	813b      	strh	r3, [r7, #8]
 801277c:	4613      	mov	r3, r2
 801277e:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /*At the beginning of the mask if the limit line is greater than the mask's y.
     *Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 8012780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012782:	699b      	ldr	r3, [r3, #24]
 8012784:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012788:	fb02 f303 	mul.w	r3, r2, r3
 801278c:	129b      	asrs	r3, r3, #10
 801278e:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 8012790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012792:	699b      	ldr	r3, [r3, #24]
 8012794:	2b00      	cmp	r3, #0
 8012796:	dd02      	ble.n	801279e <line_mask_steep+0x38>
 8012798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801279a:	3301      	adds	r3, #1
 801279c:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 801279e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80127a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127a4:	429a      	cmp	r2, r3
 80127a6:	da0b      	bge.n	80127c0 <line_mask_steep+0x5a>
        if(p->inv) {
 80127a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127ae:	f003 0302 	and.w	r3, r3, #2
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d001      	beq.n	80127bc <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80127b8:	2301      	movs	r3, #1
 80127ba:	e213      	b.n	8012be4 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 80127bc:	2300      	movs	r3, #0
 80127be:	e211      	b.n	8012be4 <line_mask_steep+0x47e>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 80127c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127c2:	699b      	ldr	r3, [r3, #24]
 80127c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80127c8:	fb02 f303 	mul.w	r3, r2, r3
 80127cc:	129b      	asrs	r3, r3, #10
 80127ce:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 80127d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80127d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127d8:	4413      	add	r3, r2
 80127da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127dc:	429a      	cmp	r2, r3
 80127de:	dd0b      	ble.n	80127f8 <line_mask_steep+0x92>
        if(p->inv) {
 80127e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127e6:	f003 0302 	and.w	r3, r3, #2
 80127ea:	b2db      	uxtb	r3, r3
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d001      	beq.n	80127f4 <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 80127f0:	2300      	movs	r3, #0
 80127f2:	e1f7      	b.n	8012be4 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 80127f4:	2301      	movs	r3, #1
 80127f6:	e1f5      	b.n	8012be4 <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y * 256) * p->xy_steep) >> 10;
 80127f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80127fc:	021b      	lsls	r3, r3, #8
 80127fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012800:	6992      	ldr	r2, [r2, #24]
 8012802:	fb02 f303 	mul.w	r3, r2, r3
 8012806:	129b      	asrs	r3, r3, #10
 8012808:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 801280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280c:	121b      	asrs	r3, r3, #8
 801280e:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 8012810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012812:	b2db      	uxtb	r3, r3
 8012814:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8012816:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801281a:	3301      	adds	r3, #1
 801281c:	021b      	lsls	r3, r3, #8
 801281e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012820:	6992      	ldr	r2, [r2, #24]
 8012822:	fb02 f303 	mul.w	r3, r2, r3
 8012826:	129b      	asrs	r3, r3, #10
 8012828:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 801282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282c:	121b      	asrs	r3, r3, #8
 801282e:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 8012830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012832:	b2db      	uxtb	r3, r3
 8012834:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 8012836:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801283a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801283c:	1ad3      	subs	r3, r2, r3
 801283e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 8012840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012842:	6a3b      	ldr	r3, [r7, #32]
 8012844:	429a      	cmp	r2, r3
 8012846:	d00d      	beq.n	8012864 <line_mask_steep+0xfe>
 8012848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801284a:	699b      	ldr	r3, [r3, #24]
 801284c:	2b00      	cmp	r3, #0
 801284e:	da09      	bge.n	8012864 <line_mask_steep+0xfe>
 8012850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012852:	2b00      	cmp	r3, #0
 8012854:	d106      	bne.n	8012864 <line_mask_steep+0xfe>
        xsf = 0xFF;
 8012856:	23ff      	movs	r3, #255	; 0xff
 8012858:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 801285a:	6a3b      	ldr	r3, [r7, #32]
 801285c:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 801285e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012860:	3b01      	subs	r3, #1
 8012862:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 8012864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012866:	6a3b      	ldr	r3, [r7, #32]
 8012868:	429a      	cmp	r2, r3
 801286a:	d165      	bne.n	8012938 <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 801286c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801286e:	2b00      	cmp	r3, #0
 8012870:	db25      	blt.n	80128be <line_mask_steep+0x158>
 8012872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012878:	429a      	cmp	r2, r3
 801287a:	da20      	bge.n	80128be <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 801287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	4413      	add	r3, r2
 8012882:	105b      	asrs	r3, r3, #1
 8012884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 8012888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801288e:	f003 0302 	and.w	r3, r3, #2
 8012892:	b2db      	uxtb	r3, r3
 8012894:	2b00      	cmp	r3, #0
 8012896:	d004      	beq.n	80128a2 <line_mask_steep+0x13c>
 8012898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801289c:	43db      	mvns	r3, r3
 801289e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80128a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	4413      	add	r3, r2
 80128a8:	7818      	ldrb	r0, [r3, #0]
 80128aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	18d4      	adds	r4, r2, r3
 80128b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128b4:	4619      	mov	r1, r3
 80128b6:	f001 fb37 	bl	8013f28 <mask_mix>
 80128ba:	4603      	mov	r3, r0
 80128bc:	7023      	strb	r3, [r4, #0]
        }
        k++;
 80128be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128c0:	3301      	adds	r3, #1
 80128c2:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 80128c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128ca:	f003 0302 	and.w	r3, r3, #2
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d015      	beq.n	8012900 <line_mask_steep+0x19a>
            k = xsi - abs_x;
 80128d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80128d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80128da:	1ad3      	subs	r3, r2, r3
 80128dc:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 80128de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128e4:	429a      	cmp	r2, r3
 80128e6:	db01      	blt.n	80128ec <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 80128e8:	2300      	movs	r3, #0
 80128ea:	e17b      	b.n	8012be4 <line_mask_steep+0x47e>
            }
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 80128ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f2c0 8177 	blt.w	8012be2 <line_mask_steep+0x47c>
 80128f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f6:	4619      	mov	r1, r3
 80128f8:	68f8      	ldr	r0, [r7, #12]
 80128fa:	f00f fe67 	bl	80225cc <lv_memset_00>
 80128fe:	e170      	b.n	8012be2 <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 8012900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012906:	429a      	cmp	r2, r3
 8012908:	dd02      	ble.n	8012910 <line_mask_steep+0x1aa>
 801290a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801290e:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8012910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012912:	2b00      	cmp	r3, #0
 8012914:	d101      	bne.n	801291a <line_mask_steep+0x1b4>
 8012916:	2300      	movs	r3, #0
 8012918:	e164      	b.n	8012be4 <line_mask_steep+0x47e>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 801291a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801291c:	2b00      	cmp	r3, #0
 801291e:	f340 8160 	ble.w	8012be2 <line_mask_steep+0x47c>
 8012922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012924:	68fa      	ldr	r2, [r7, #12]
 8012926:	18d0      	adds	r0, r2, r3
 8012928:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801292c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801292e:	1ad3      	subs	r3, r2, r3
 8012930:	4619      	mov	r1, r3
 8012932:	f00f fe4b 	bl	80225cc <lv_memset_00>
 8012936:	e154      	b.n	8012be2 <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 8012938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801293a:	699b      	ldr	r3, [r3, #24]
 801293c:	2b00      	cmp	r3, #0
 801293e:	f280 80a7 	bge.w	8012a90 <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 8012942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012944:	69db      	ldr	r3, [r3, #28]
 8012946:	425b      	negs	r3, r3
 8012948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801294a:	fb02 f303 	mul.w	r3, r2, r3
 801294e:	129b      	asrs	r3, r3, #10
 8012950:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8012952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012954:	2b00      	cmp	r3, #0
 8012956:	db26      	blt.n	80129a6 <line_mask_steep+0x240>
 8012958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801295c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801295e:	429a      	cmp	r2, r3
 8012960:	da21      	bge.n	80129a6 <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012966:	fb02 f303 	mul.w	r3, r2, r3
 801296a:	125b      	asrs	r3, r3, #9
 801296c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012976:	f003 0302 	and.w	r3, r3, #2
 801297a:	b2db      	uxtb	r3, r3
 801297c:	2b00      	cmp	r3, #0
 801297e:	d004      	beq.n	801298a <line_mask_steep+0x224>
 8012980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012984:	43db      	mvns	r3, r3
 8012986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801298c:	68fa      	ldr	r2, [r7, #12]
 801298e:	4413      	add	r3, r2
 8012990:	7818      	ldrb	r0, [r3, #0]
 8012992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012994:	68fa      	ldr	r2, [r7, #12]
 8012996:	18d4      	adds	r4, r2, r3
 8012998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801299c:	4619      	mov	r1, r3
 801299e:	f001 fac3 	bl	8013f28 <mask_mix>
 80129a2:	4603      	mov	r3, r0
 80129a4:	7023      	strb	r3, [r4, #0]
            }
            k--;
 80129a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129a8:	3b01      	subs	r3, #1
 80129aa:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 80129ac:	69bb      	ldr	r3, [r7, #24]
 80129ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80129b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129b4:	6992      	ldr	r2, [r2, #24]
 80129b6:	4252      	negs	r2, r2
 80129b8:	fb02 f303 	mul.w	r3, r2, r3
 80129bc:	129b      	asrs	r3, r3, #10
 80129be:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 80129c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	db2a      	blt.n	8012a1c <line_mask_steep+0x2b6>
 80129c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129cc:	429a      	cmp	r2, r3
 80129ce:	da25      	bge.n	8012a1c <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80129d6:	693a      	ldr	r2, [r7, #16]
 80129d8:	fb02 f303 	mul.w	r3, r2, r3
 80129dc:	125b      	asrs	r3, r3, #9
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	43db      	mvns	r3, r3
 80129e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 80129e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129ec:	f003 0302 	and.w	r3, r3, #2
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d004      	beq.n	8012a00 <line_mask_steep+0x29a>
 80129f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129fa:	43db      	mvns	r3, r3
 80129fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a02:	68fa      	ldr	r2, [r7, #12]
 8012a04:	4413      	add	r3, r2
 8012a06:	7818      	ldrb	r0, [r3, #0]
 8012a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a0a:	68fa      	ldr	r2, [r7, #12]
 8012a0c:	18d4      	adds	r4, r2, r3
 8012a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a12:	4619      	mov	r1, r3
 8012a14:	f001 fa88 	bl	8013f28 <mask_mix>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 8012a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a1e:	3302      	adds	r3, #2
 8012a20:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8012a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a28:	f003 0302 	and.w	r3, r3, #2
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d018      	beq.n	8012a64 <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 8012a32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a38:	1ad3      	subs	r3, r2, r3
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 8012a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a44:	429a      	cmp	r2, r3
 8012a46:	dd03      	ble.n	8012a50 <line_mask_steep+0x2ea>
 8012a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a4e:	e0c8      	b.n	8012be2 <line_mask_steep+0x47c>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 8012a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f340 80c5 	ble.w	8012be2 <line_mask_steep+0x47c>
 8012a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	68f8      	ldr	r0, [r7, #12]
 8012a5e:	f00f fdb5 	bl	80225cc <lv_memset_00>
 8012a62:	e0be      	b.n	8012be2 <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8012a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	dd01      	ble.n	8012a72 <line_mask_steep+0x30c>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e0b8      	b.n	8012be4 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8012a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	f2c0 80b4 	blt.w	8012be2 <line_mask_steep+0x47c>
 8012a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a7c:	68fa      	ldr	r2, [r7, #12]
 8012a7e:	18d0      	adds	r0, r2, r3
 8012a80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	4619      	mov	r1, r3
 8012a8a:	f00f fd9f 	bl	80225cc <lv_memset_00>
 8012a8e:	e0a8      	b.n	8012be2 <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 8012a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a92:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012a96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a98:	69d2      	ldr	r2, [r2, #28]
 8012a9a:	fb02 f303 	mul.w	r3, r2, r3
 8012a9e:	129b      	asrs	r3, r3, #10
 8012aa0:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8012aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	db2a      	blt.n	8012afe <line_mask_steep+0x398>
 8012aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	da25      	bge.n	8012afe <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8012ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012ab8:	69ba      	ldr	r2, [r7, #24]
 8012aba:	fb02 f303 	mul.w	r3, r2, r3
 8012abe:	125b      	asrs	r3, r3, #9
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	43db      	mvns	r3, r3
 8012ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ace:	f003 0302 	and.w	r3, r3, #2
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d004      	beq.n	8012ae2 <line_mask_steep+0x37c>
 8012ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012adc:	43db      	mvns	r3, r3
 8012ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ae4:	68fa      	ldr	r2, [r7, #12]
 8012ae6:	4413      	add	r3, r2
 8012ae8:	7818      	ldrb	r0, [r3, #0]
 8012aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aec:	68fa      	ldr	r2, [r7, #12]
 8012aee:	18d4      	adds	r4, r2, r3
 8012af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012af4:	4619      	mov	r1, r3
 8012af6:	f001 fa17 	bl	8013f28 <mask_mix>
 8012afa:	4603      	mov	r3, r0
 8012afc:	7023      	strb	r3, [r4, #0]
            }

            k++;
 8012afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b00:	3301      	adds	r3, #1
 8012b02:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012b0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b0c:	6992      	ldr	r2, [r2, #24]
 8012b0e:	fb02 f303 	mul.w	r3, r2, r3
 8012b12:	129b      	asrs	r3, r3, #10
 8012b14:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 8012b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	db28      	blt.n	8012b6e <line_mask_steep+0x408>
 8012b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b22:	429a      	cmp	r2, r3
 8012b24:	da23      	bge.n	8012b6e <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 8012b26:	69bb      	ldr	r3, [r7, #24]
 8012b28:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012b2c:	697a      	ldr	r2, [r7, #20]
 8012b2e:	fb02 f303 	mul.w	r3, r2, r3
 8012b32:	125b      	asrs	r3, r3, #9
 8012b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b3e:	f003 0302 	and.w	r3, r3, #2
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d004      	beq.n	8012b52 <line_mask_steep+0x3ec>
 8012b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b4c:	43db      	mvns	r3, r3
 8012b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b54:	68fa      	ldr	r2, [r7, #12]
 8012b56:	4413      	add	r3, r2
 8012b58:	7818      	ldrb	r0, [r3, #0]
 8012b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b5c:	68fa      	ldr	r2, [r7, #12]
 8012b5e:	18d4      	adds	r4, r2, r3
 8012b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b64:	4619      	mov	r1, r3
 8012b66:	f001 f9df 	bl	8013f28 <mask_mix>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	7023      	strb	r3, [r4, #0]
            }
            k++;
 8012b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b70:	3301      	adds	r3, #1
 8012b72:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8012b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b7a:	f003 0302 	and.w	r3, r3, #2
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d014      	beq.n	8012bae <line_mask_steep+0x448>
                k = xsi - abs_x;
 8012b84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 8012b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b94:	429a      	cmp	r2, r3
 8012b96:	dd01      	ble.n	8012b9c <line_mask_steep+0x436>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	e023      	b.n	8012be4 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 8012b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	db1f      	blt.n	8012be2 <line_mask_steep+0x47c>
 8012ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	68f8      	ldr	r0, [r7, #12]
 8012ba8:	f00f fd10 	bl	80225cc <lv_memset_00>
 8012bac:	e019      	b.n	8012be2 <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 8012bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	dd02      	ble.n	8012bbe <line_mask_steep+0x458>
 8012bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8012bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d101      	bne.n	8012bc8 <line_mask_steep+0x462>
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	e00d      	b.n	8012be4 <line_mask_steep+0x47e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8012bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	dd09      	ble.n	8012be2 <line_mask_steep+0x47c>
 8012bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bd0:	68fa      	ldr	r2, [r7, #12]
 8012bd2:	18d0      	adds	r0, r2, r3
 8012bd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bda:	1ad3      	subs	r3, r2, r3
 8012bdc:	4619      	mov	r1, r3
 8012bde:	f00f fcf5 	bl	80225cc <lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012be2:	2302      	movs	r3, #2
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3744      	adds	r7, #68	; 0x44
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd90      	pop	{r4, r7, pc}

08012bec <lv_draw_mask_angle>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_angle(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                   lv_coord_t abs_y, lv_coord_t len,
                                                                   lv_draw_mask_angle_param_t * p)
{
 8012bec:	b590      	push	{r4, r7, lr}
 8012bee:	b097      	sub	sp, #92	; 0x5c
 8012bf0:	af02      	add	r7, sp, #8
 8012bf2:	60f8      	str	r0, [r7, #12]
 8012bf4:	4608      	mov	r0, r1
 8012bf6:	4611      	mov	r1, r2
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	817b      	strh	r3, [r7, #10]
 8012bfe:	460b      	mov	r3, r1
 8012c00:	813b      	strh	r3, [r7, #8]
 8012c02:	4613      	mov	r3, r2
 8012c04:	80fb      	strh	r3, [r7, #6]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8012c06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012c0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c0c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8012c10:	1a9b      	subs	r3, r3, r2
 8012c12:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8012c14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c1a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8012c1e:	1a9b      	subs	r3, r3, r2
 8012c20:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8012c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c28:	2bb3      	cmp	r3, #179	; 0xb3
 8012c2a:	f300 810c 	bgt.w	8012e46 <lv_draw_mask_angle+0x25a>
 8012c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c30:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012c34:	2bb3      	cmp	r3, #179	; 0xb3
 8012c36:	f300 8106 	bgt.w	8012e46 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f000 8100 	beq.w	8012e46 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	f000 80fa 	beq.w	8012e46 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle > p->cfg.end_angle) {
 8012c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c5a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	f340 80f1 	ble.w	8012e46 <lv_draw_mask_angle+0x25a>

        if(abs_y < p->cfg.vertex_p.y) {
 8012c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012c6a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	da01      	bge.n	8012c76 <lv_draw_mask_angle+0x8a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012c72:	2301      	movs	r3, #1
 8012c74:	e2b6      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8012c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c7c:	fb02 f303 	mul.w	r3, r2, r3
 8012c80:	129b      	asrs	r3, r3, #10
 8012c82:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8012c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c86:	3301      	adds	r3, #1
 8012c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c8a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8012c8c:	fb02 f303 	mul.w	r3, r2, r3
 8012c90:	129b      	asrs	r3, r3, #10
 8012c92:	64fb      	str	r3, [r7, #76]	; 0x4c

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c9a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c9e:	dd0b      	ble.n	8012cb8 <lv_draw_mask_angle+0xcc>
 8012ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ca2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ca6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012caa:	da05      	bge.n	8012cb8 <lv_draw_mask_angle+0xcc>
 8012cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	da02      	bge.n	8012cb8 <lv_draw_mask_angle+0xcc>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012cb6:	e01f      	b.n	8012cf8 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	dd0a      	ble.n	8012cd8 <lv_draw_mask_angle+0xec>
 8012cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cc4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012cc8:	2b5a      	cmp	r3, #90	; 0x5a
 8012cca:	dc05      	bgt.n	8012cd8 <lv_draw_mask_angle+0xec>
 8012ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	da02      	bge.n	8012cd8 <lv_draw_mask_angle+0xec>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012cd6:	e00f      	b.n	8012cf8 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012cde:	2b5a      	cmp	r3, #90	; 0x5a
 8012ce0:	dd0a      	ble.n	8012cf8 <lv_draw_mask_angle+0x10c>
 8012ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ce4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ce8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012cec:	da04      	bge.n	8012cf8 <lv_draw_mask_angle+0x10c>
 8012cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	dd01      	ble.n	8012cf8 <lv_draw_mask_angle+0x10c>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cfa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012cfe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012d02:	dd0b      	ble.n	8012d1c <lv_draw_mask_angle+0x130>
 8012d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d06:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012d0a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012d0e:	da05      	bge.n	8012d1c <lv_draw_mask_angle+0x130>
 8012d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	da02      	bge.n	8012d1c <lv_draw_mask_angle+0x130>
 8012d16:	2300      	movs	r3, #0
 8012d18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d1a:	e01f      	b.n	8012d5c <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d1e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	dd0a      	ble.n	8012d3c <lv_draw_mask_angle+0x150>
 8012d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d28:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012d2c:	2b5a      	cmp	r3, #90	; 0x5a
 8012d2e:	dc05      	bgt.n	8012d3c <lv_draw_mask_angle+0x150>
 8012d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	da02      	bge.n	8012d3c <lv_draw_mask_angle+0x150>
 8012d36:	2300      	movs	r3, #0
 8012d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d3a:	e00f      	b.n	8012d5c <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d3e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012d42:	2b5a      	cmp	r3, #90	; 0x5a
 8012d44:	dd0a      	ble.n	8012d5c <lv_draw_mask_angle+0x170>
 8012d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012d4c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012d50:	da04      	bge.n	8012d5c <lv_draw_mask_angle+0x170>
 8012d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	dd01      	ble.n	8012d5c <lv_draw_mask_angle+0x170>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	64fb      	str	r3, [r7, #76]	; 0x4c

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8012d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	105b      	asrs	r3, r3, #1
 8012d64:	627b      	str	r3, [r7, #36]	; 0x24

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8012d66:	2301      	movs	r3, #1
 8012d68:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        int32_t tmp = start_angle_last + dist - rel_x;
 8012d72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d76:	441a      	add	r2, r3
 8012d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d7a:	1ad3      	subs	r3, r2, r3
 8012d7c:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > len) tmp = len;
 8012d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d84:	429a      	cmp	r2, r3
 8012d86:	dd02      	ble.n	8012d8e <lv_draw_mask_angle+0x1a2>
 8012d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d8c:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > 0) {
 8012d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	dd18      	ble.n	8012dc6 <lv_draw_mask_angle+0x1da>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 8012d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d96:	b218      	sxth	r0, r3
 8012d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d9a:	3310      	adds	r3, #16
 8012d9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012da0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012da4:	9300      	str	r3, [sp, #0]
 8012da6:	4603      	mov	r3, r0
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f7ff fa5f 	bl	801226c <lv_draw_mask_line>
 8012dae:	4603      	mov	r3, r0
 8012db0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8012db4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d104      	bne.n	8012dc6 <lv_draw_mask_angle+0x1da>
                lv_memset_00(&mask_buf[0], tmp);
 8012dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	68f8      	ldr	r0, [r7, #12]
 8012dc2:	f00f fc03 	bl	80225cc <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 8012dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	dd02      	ble.n	8012dd6 <lv_draw_mask_angle+0x1ea>
 8012dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dd4:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp < 0) tmp = 0;
 8012dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	da01      	bge.n	8012de0 <lv_draw_mask_angle+0x1f4>
 8012ddc:	2300      	movs	r3, #0
 8012dde:	647b      	str	r3, [r7, #68]	; 0x44
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 8012de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012de2:	68fa      	ldr	r2, [r7, #12]
 8012de4:	18d0      	adds	r0, r2, r3
 8012de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012de8:	b29a      	uxth	r2, r3
 8012dea:	897b      	ldrh	r3, [r7, #10]
 8012dec:	4413      	add	r3, r2
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	b219      	sxth	r1, r3
 8012df2:	88fa      	ldrh	r2, [r7, #6]
 8012df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	1ad3      	subs	r3, r2, r3
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	b21c      	sxth	r4, r3
 8012dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e00:	333c      	adds	r3, #60	; 0x3c
 8012e02:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	4623      	mov	r3, r4
 8012e0a:	f7ff fa2f 	bl	801226c <lv_draw_mask_line>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8012e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d109      	bne.n	8012e30 <lv_draw_mask_angle+0x244>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8012e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e1e:	68fa      	ldr	r2, [r7, #12]
 8012e20:	18d0      	adds	r0, r2, r3
 8012e22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e28:	1ad3      	subs	r3, r2, r3
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	f00f fbce 	bl	80225cc <lv_memset_00>
        }
        if(res1 == res2) return res1;
 8012e30:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d102      	bne.n	8012e42 <lv_draw_mask_angle+0x256>
 8012e3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012e40:	e1d0      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8012e42:	2302      	movs	r3, #2
 8012e44:	e1ce      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
    }
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 8012e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e4c:	2bb4      	cmp	r3, #180	; 0xb4
 8012e4e:	f340 80fc 	ble.w	801304a <lv_draw_mask_angle+0x45e>
 8012e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e54:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012e58:	2bb4      	cmp	r3, #180	; 0xb4
 8012e5a:	f340 80f6 	ble.w	801304a <lv_draw_mask_angle+0x45e>
 8012e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e60:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e66:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	f340 80ed 	ble.w	801304a <lv_draw_mask_angle+0x45e>

        if(abs_y > p->cfg.vertex_p.y) {
 8012e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012e76:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	dd01      	ble.n	8012e82 <lv_draw_mask_angle+0x296>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012e7e:	2301      	movs	r3, #1
 8012e80:	e1b0      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8012e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e88:	fb02 f303 	mul.w	r3, r2, r3
 8012e8c:	129b      	asrs	r3, r3, #10
 8012e8e:	61fb      	str	r3, [r7, #28]
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8012e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e92:	3301      	adds	r3, #1
 8012e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e96:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8012e98:	fb02 f303 	mul.w	r3, r2, r3
 8012e9c:	129b      	asrs	r3, r3, #10
 8012e9e:	643b      	str	r3, [r7, #64]	; 0x40

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ea2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ea6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012eaa:	dd0b      	ble.n	8012ec4 <lv_draw_mask_angle+0x2d8>
 8012eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012eae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012eb2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012eb6:	da05      	bge.n	8012ec4 <lv_draw_mask_angle+0x2d8>
 8012eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	da02      	bge.n	8012ec4 <lv_draw_mask_angle+0x2d8>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8012ec2:	e01f      	b.n	8012f04 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ec6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	dd0a      	ble.n	8012ee4 <lv_draw_mask_angle+0x2f8>
 8012ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ed0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ed4:	2b5a      	cmp	r3, #90	; 0x5a
 8012ed6:	dc05      	bgt.n	8012ee4 <lv_draw_mask_angle+0x2f8>
 8012ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	da02      	bge.n	8012ee4 <lv_draw_mask_angle+0x2f8>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8012ee2:	e00f      	b.n	8012f04 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012ee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ee6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012eea:	2b5a      	cmp	r3, #90	; 0x5a
 8012eec:	dd0a      	ble.n	8012f04 <lv_draw_mask_angle+0x318>
 8012eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ef0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ef4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012ef8:	da04      	bge.n	8012f04 <lv_draw_mask_angle+0x318>
 8012efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	dd01      	ble.n	8012f04 <lv_draw_mask_angle+0x318>
 8012f00:	2300      	movs	r3, #0
 8012f02:	643b      	str	r3, [r7, #64]	; 0x40

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f06:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f0a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012f0e:	dd0b      	ble.n	8012f28 <lv_draw_mask_angle+0x33c>
 8012f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f16:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012f1a:	da05      	bge.n	8012f28 <lv_draw_mask_angle+0x33c>
 8012f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	da02      	bge.n	8012f28 <lv_draw_mask_angle+0x33c>
 8012f22:	2300      	movs	r3, #0
 8012f24:	643b      	str	r3, [r7, #64]	; 0x40
 8012f26:	e01f      	b.n	8012f68 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	dd0a      	ble.n	8012f48 <lv_draw_mask_angle+0x35c>
 8012f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f38:	2b5a      	cmp	r3, #90	; 0x5a
 8012f3a:	dc05      	bgt.n	8012f48 <lv_draw_mask_angle+0x35c>
 8012f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	da02      	bge.n	8012f48 <lv_draw_mask_angle+0x35c>
 8012f42:	2300      	movs	r3, #0
 8012f44:	643b      	str	r3, [r7, #64]	; 0x40
 8012f46:	e00f      	b.n	8012f68 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f4e:	2b5a      	cmp	r3, #90	; 0x5a
 8012f50:	dd0a      	ble.n	8012f68 <lv_draw_mask_angle+0x37c>
 8012f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f54:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f58:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012f5c:	da04      	bge.n	8012f68 <lv_draw_mask_angle+0x37c>
 8012f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	dd01      	ble.n	8012f68 <lv_draw_mask_angle+0x37c>
 8012f64:	2300      	movs	r3, #0
 8012f66:	643b      	str	r3, [r7, #64]	; 0x40

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8012f68:	69fa      	ldr	r2, [r7, #28]
 8012f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f6c:	1ad3      	subs	r3, r2, r3
 8012f6e:	105b      	asrs	r3, r3, #1
 8012f70:	61bb      	str	r3, [r7, #24]

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8012f72:	2301      	movs	r3, #1
 8012f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8012f78:	2301      	movs	r3, #1
 8012f7a:	75fb      	strb	r3, [r7, #23]

        int32_t tmp = start_angle_last + dist - rel_x;
 8012f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	441a      	add	r2, r3
 8012f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f84:	1ad3      	subs	r3, r2, r3
 8012f86:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > len) tmp = len;
 8012f88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	dd02      	ble.n	8012f98 <lv_draw_mask_angle+0x3ac>
 8012f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f96:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > 0) {
 8012f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	dd18      	ble.n	8012fd0 <lv_draw_mask_angle+0x3e4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 8012f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa0:	b218      	sxth	r0, r3
 8012fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012fa4:	333c      	adds	r3, #60	; 0x3c
 8012fa6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012faa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012fae:	9300      	str	r3, [sp, #0]
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	68f8      	ldr	r0, [r7, #12]
 8012fb4:	f7ff f95a 	bl	801226c <lv_draw_mask_line>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8012fbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d104      	bne.n	8012fd0 <lv_draw_mask_angle+0x3e4>
                lv_memset_00(&mask_buf[0], tmp);
 8012fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc8:	4619      	mov	r1, r3
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	f00f fafe 	bl	80225cc <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 8012fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	dd02      	ble.n	8012fe0 <lv_draw_mask_angle+0x3f4>
 8012fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fde:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp < 0) tmp = 0;
 8012fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	da01      	bge.n	8012fea <lv_draw_mask_angle+0x3fe>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	63bb      	str	r3, [r7, #56]	; 0x38
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 8012fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fec:	68fa      	ldr	r2, [r7, #12]
 8012fee:	18d0      	adds	r0, r2, r3
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff2:	b29a      	uxth	r2, r3
 8012ff4:	897b      	ldrh	r3, [r7, #10]
 8012ff6:	4413      	add	r3, r2
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	b219      	sxth	r1, r3
 8012ffc:	88fa      	ldrh	r2, [r7, #6]
 8012ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013000:	b29b      	uxth	r3, r3
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	b29b      	uxth	r3, r3
 8013006:	b21c      	sxth	r4, r3
 8013008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801300a:	3310      	adds	r3, #16
 801300c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013010:	9300      	str	r3, [sp, #0]
 8013012:	4623      	mov	r3, r4
 8013014:	f7ff f92a 	bl	801226c <lv_draw_mask_line>
 8013018:	4603      	mov	r3, r0
 801301a:	75fb      	strb	r3, [r7, #23]
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 801301c:	7dfb      	ldrb	r3, [r7, #23]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d109      	bne.n	8013036 <lv_draw_mask_angle+0x44a>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8013022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	18d0      	adds	r0, r2, r3
 8013028:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302e:	1ad3      	subs	r3, r2, r3
 8013030:	4619      	mov	r1, r3
 8013032:	f00f facb 	bl	80225cc <lv_memset_00>
        }
        if(res1 == res2) return res1;
 8013036:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801303a:	7dfb      	ldrb	r3, [r7, #23]
 801303c:	429a      	cmp	r2, r3
 801303e:	d102      	bne.n	8013046 <lv_draw_mask_angle+0x45a>
 8013040:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013044:	e0ce      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8013046:	2302      	movs	r3, #2
 8013048:	e0cc      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
    }
    else  {

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801304a:	2301      	movs	r3, #1
 801304c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8013050:	2301      	movs	r3, #1
 8013052:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        if(p->cfg.start_angle == 180) {
 8013056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013058:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801305c:	2bb4      	cmp	r3, #180	; 0xb4
 801305e:	d10e      	bne.n	801307e <lv_draw_mask_angle+0x492>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8013060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013062:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013066:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801306a:	429a      	cmp	r2, r3
 801306c:	da03      	bge.n	8013076 <lv_draw_mask_angle+0x48a>
 801306e:	2301      	movs	r3, #1
 8013070:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013074:	e043      	b.n	80130fe <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8013076:	2303      	movs	r3, #3
 8013078:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801307c:	e03f      	b.n	80130fe <lv_draw_mask_angle+0x512>
        }
        else if(p->cfg.start_angle == 0) {
 801307e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013080:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d10e      	bne.n	80130a6 <lv_draw_mask_angle+0x4ba>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8013088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801308a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801308e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013092:	429a      	cmp	r2, r3
 8013094:	da03      	bge.n	801309e <lv_draw_mask_angle+0x4b2>
 8013096:	2303      	movs	r3, #3
 8013098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801309c:	e02f      	b.n	80130fe <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801309e:	2301      	movs	r3, #1
 80130a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80130a4:	e02b      	b.n	80130fe <lv_draw_mask_angle+0x512>
        }
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 80130a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130a8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80130ac:	2bb3      	cmp	r3, #179	; 0xb3
 80130ae:	dc06      	bgt.n	80130be <lv_draw_mask_angle+0x4d2>
 80130b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80130b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	db0b      	blt.n	80130d6 <lv_draw_mask_angle+0x4ea>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 80130be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 80130c4:	2bb4      	cmp	r3, #180	; 0xb4
 80130c6:	dd0a      	ble.n	80130de <lv_draw_mask_angle+0x4f2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 80130c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80130ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	db03      	blt.n	80130de <lv_draw_mask_angle+0x4f2>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 80130d6:	2303      	movs	r3, #3
 80130d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80130dc:	e00f      	b.n	80130fe <lv_draw_mask_angle+0x512>
        }
        else  {
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 80130de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130e0:	3310      	adds	r3, #16
 80130e2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80130e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80130ea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80130ee:	9300      	str	r3, [sp, #0]
 80130f0:	4603      	mov	r3, r0
 80130f2:	68f8      	ldr	r0, [r7, #12]
 80130f4:	f7ff f8ba 	bl	801226c <lv_draw_mask_line>
 80130f8:	4603      	mov	r3, r0
 80130fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(p->cfg.end_angle == 180) {
 80130fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013100:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013104:	2bb4      	cmp	r3, #180	; 0xb4
 8013106:	d10e      	bne.n	8013126 <lv_draw_mask_angle+0x53a>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8013108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801310a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801310e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013112:	429a      	cmp	r2, r3
 8013114:	da03      	bge.n	801311e <lv_draw_mask_angle+0x532>
 8013116:	2303      	movs	r3, #3
 8013118:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801311c:	e043      	b.n	80131a6 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801311e:	2301      	movs	r3, #1
 8013120:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013124:	e03f      	b.n	80131a6 <lv_draw_mask_angle+0x5ba>
        }
        else if(p->cfg.end_angle == 0) {
 8013126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013128:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d10e      	bne.n	801314e <lv_draw_mask_angle+0x562>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8013130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013132:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013136:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801313a:	429a      	cmp	r2, r3
 801313c:	da03      	bge.n	8013146 <lv_draw_mask_angle+0x55a>
 801313e:	2301      	movs	r3, #1
 8013140:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013144:	e02f      	b.n	80131a6 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8013146:	2303      	movs	r3, #3
 8013148:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801314c:	e02b      	b.n	80131a6 <lv_draw_mask_angle+0x5ba>
        }
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801314e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013150:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013154:	2bb3      	cmp	r3, #179	; 0xb3
 8013156:	dc06      	bgt.n	8013166 <lv_draw_mask_angle+0x57a>
 8013158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801315a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801315e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013162:	429a      	cmp	r2, r3
 8013164:	db0b      	blt.n	801317e <lv_draw_mask_angle+0x592>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8013166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013168:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801316c:	2bb4      	cmp	r3, #180	; 0xb4
 801316e:	dd0a      	ble.n	8013186 <lv_draw_mask_angle+0x59a>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8013170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013172:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013176:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801317a:	429a      	cmp	r2, r3
 801317c:	db03      	blt.n	8013186 <lv_draw_mask_angle+0x59a>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 801317e:	2303      	movs	r3, #3
 8013180:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013184:	e00f      	b.n	80131a6 <lv_draw_mask_angle+0x5ba>
        }
        else {
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 8013186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013188:	333c      	adds	r3, #60	; 0x3c
 801318a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801318e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013192:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8013196:	9300      	str	r3, [sp, #0]
 8013198:	4603      	mov	r3, r0
 801319a:	68f8      	ldr	r0, [r7, #12]
 801319c:	f7ff f866 	bl	801226c <lv_draw_mask_line>
 80131a0:	4603      	mov	r3, r0
 80131a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        }

        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 80131a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d003      	beq.n	80131b6 <lv_draw_mask_angle+0x5ca>
 80131ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d101      	bne.n	80131ba <lv_draw_mask_angle+0x5ce>
 80131b6:	2300      	movs	r3, #0
 80131b8:	e014      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 80131ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131be:	2b03      	cmp	r3, #3
 80131c0:	d105      	bne.n	80131ce <lv_draw_mask_angle+0x5e2>
 80131c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80131c6:	2b03      	cmp	r3, #3
 80131c8:	d101      	bne.n	80131ce <lv_draw_mask_angle+0x5e2>
 80131ca:	2300      	movs	r3, #0
 80131cc:	e00a      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 80131ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d105      	bne.n	80131e2 <lv_draw_mask_angle+0x5f6>
 80131d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80131da:	2b01      	cmp	r3, #1
 80131dc:	d101      	bne.n	80131e2 <lv_draw_mask_angle+0x5f6>
 80131de:	2301      	movs	r3, #1
 80131e0:	e000      	b.n	80131e4 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 80131e2:	2302      	movs	r3, #2
    }
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3754      	adds	r7, #84	; 0x54
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd90      	pop	{r4, r7, pc}

080131ec <lv_draw_mask_radius>:


LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 80131ec:	b590      	push	{r4, r7, lr}
 80131ee:	b097      	sub	sp, #92	; 0x5c
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	4608      	mov	r0, r1
 80131f6:	4611      	mov	r1, r2
 80131f8:	461a      	mov	r2, r3
 80131fa:	4603      	mov	r3, r0
 80131fc:	817b      	strh	r3, [r7, #10]
 80131fe:	460b      	mov	r3, r1
 8013200:	813b      	strh	r3, [r7, #8]
 8013202:	4613      	mov	r3, r2
 8013204:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 8013206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013208:	7c9b      	ldrb	r3, [r3, #18]
 801320a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801320e:	b2db      	uxtb	r3, r3
 8013210:	2b00      	cmp	r3, #0
 8013212:	bf14      	ite	ne
 8013214:	2301      	movne	r3, #1
 8013216:	2300      	moveq	r3, #0
 8013218:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t radius = p->cfg.radius;
 801321c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801321e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013222:	647b      	str	r3, [r7, #68]	; 0x44
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 8013224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013226:	f103 0208 	add.w	r2, r3, #8
 801322a:	f107 0318 	add.w	r3, r7, #24
 801322e:	4611      	mov	r1, r2
 8013230:	4618      	mov	r0, r3
 8013232:	f7fe fae6 	bl	8011802 <lv_area_copy>

    if(outer == false) {
 8013236:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801323a:	f083 0301 	eor.w	r3, r3, #1
 801323e:	b2db      	uxtb	r3, r3
 8013240:	2b00      	cmp	r3, #0
 8013242:	d00d      	beq.n	8013260 <lv_draw_mask_radius+0x74>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 8013244:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013248:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801324c:	429a      	cmp	r2, r3
 801324e:	db05      	blt.n	801325c <lv_draw_mask_radius+0x70>
 8013250:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013254:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013258:	429a      	cmp	r2, r3
 801325a:	dd0f      	ble.n	801327c <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_TRANSP;
 801325c:	2300      	movs	r3, #0
 801325e:	e266      	b.n	801372e <lv_draw_mask_radius+0x542>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8013260:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013264:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013268:	429a      	cmp	r2, r3
 801326a:	db05      	blt.n	8013278 <lv_draw_mask_radius+0x8c>
 801326c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013270:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013274:	429a      	cmp	r2, r3
 8013276:	dd01      	ble.n	801327c <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8013278:	2301      	movs	r3, #1
 801327a:	e258      	b.n	801372e <lv_draw_mask_radius+0x542>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 801327c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013280:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8013284:	4619      	mov	r1, r3
 8013286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013288:	440b      	add	r3, r1
 801328a:	429a      	cmp	r2, r3
 801328c:	db0b      	blt.n	80132a6 <lv_draw_mask_radius+0xba>
 801328e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013296:	441a      	add	r2, r3
 8013298:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801329c:	4619      	mov	r1, r3
 801329e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132a0:	1acb      	subs	r3, r1, r3
 80132a2:	429a      	cmp	r2, r3
 80132a4:	dd12      	ble.n	80132cc <lv_draw_mask_radius+0xe0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80132a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80132aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80132ae:	4619      	mov	r1, r3
 80132b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132b2:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80132b4:	429a      	cmp	r2, r3
 80132b6:	f2c0 8082 	blt.w	80133be <lv_draw_mask_radius+0x1d2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80132ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80132be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80132c2:	4619      	mov	r1, r3
 80132c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132c6:	1acb      	subs	r3, r1, r3
 80132c8:	429a      	cmp	r2, r3
 80132ca:	dc78      	bgt.n	80133be <lv_draw_mask_radius+0x1d2>
        if(outer == false) {
 80132cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80132d0:	f083 0301 	eor.w	r3, r3, #1
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d03d      	beq.n	8013356 <lv_draw_mask_radius+0x16a>
            /*Remove the edges*/
            int32_t last = rect.x1 - abs_x;
 80132da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80132de:	461a      	mov	r2, r3
 80132e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80132e4:	1ad3      	subs	r3, r2, r3
 80132e6:	627b      	str	r3, [r7, #36]	; 0x24
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 80132e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80132ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132ee:	429a      	cmp	r2, r3
 80132f0:	dd01      	ble.n	80132f6 <lv_draw_mask_radius+0x10a>
 80132f2:	2300      	movs	r3, #0
 80132f4:	e21b      	b.n	801372e <lv_draw_mask_radius+0x542>
            if(last >= 0) {
 80132f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	db04      	blt.n	8013306 <lv_draw_mask_radius+0x11a>
                lv_memset_00(&mask_buf[0], last);
 80132fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fe:	4619      	mov	r1, r3
 8013300:	68f8      	ldr	r0, [r7, #12]
 8013302:	f00f f963 	bl	80225cc <lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 8013306:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801330a:	461a      	mov	r2, r3
 801330c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013310:	1ad3      	subs	r3, r2, r3
 8013312:	3301      	adds	r3, #1
 8013314:	623b      	str	r3, [r7, #32]
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8013316:	6a3b      	ldr	r3, [r7, #32]
 8013318:	2b00      	cmp	r3, #0
 801331a:	dc01      	bgt.n	8013320 <lv_draw_mask_radius+0x134>
 801331c:	2300      	movs	r3, #0
 801331e:	e206      	b.n	801372e <lv_draw_mask_radius+0x542>
            else if(first < len) {
 8013320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013324:	6a3a      	ldr	r2, [r7, #32]
 8013326:	429a      	cmp	r2, r3
 8013328:	da09      	bge.n	801333e <lv_draw_mask_radius+0x152>
                lv_memset_00(&mask_buf[first], len - first);
 801332a:	6a3b      	ldr	r3, [r7, #32]
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	18d0      	adds	r0, r2, r3
 8013330:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013334:	6a3b      	ldr	r3, [r7, #32]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	4619      	mov	r1, r3
 801333a:	f00f f947 	bl	80225cc <lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 801333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013340:	2b00      	cmp	r3, #0
 8013342:	d106      	bne.n	8013352 <lv_draw_mask_radius+0x166>
 8013344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013348:	6a3a      	ldr	r2, [r7, #32]
 801334a:	429a      	cmp	r2, r3
 801334c:	d101      	bne.n	8013352 <lv_draw_mask_radius+0x166>
 801334e:	2301      	movs	r3, #1
 8013350:	e1ed      	b.n	801372e <lv_draw_mask_radius+0x542>
            else return LV_DRAW_MASK_RES_CHANGED;
 8013352:	2302      	movs	r3, #2
 8013354:	e1eb      	b.n	801372e <lv_draw_mask_radius+0x542>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 8013356:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801335a:	461a      	mov	r2, r3
 801335c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	657b      	str	r3, [r7, #84]	; 0x54
            if(first < 0) first = 0;
 8013364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013366:	2b00      	cmp	r3, #0
 8013368:	da01      	bge.n	801336e <lv_draw_mask_radius+0x182>
 801336a:	2300      	movs	r3, #0
 801336c:	657b      	str	r3, [r7, #84]	; 0x54
            if(first <= len) {
 801336e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013372:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013374:	429a      	cmp	r2, r3
 8013376:	dc20      	bgt.n	80133ba <lv_draw_mask_radius+0x1ce>
                int32_t last = rect.x2 - abs_x - first + 1;
 8013378:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801337c:	461a      	mov	r2, r3
 801337e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013382:	1ad2      	subs	r2, r2, r3
 8013384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013386:	1ad3      	subs	r3, r2, r3
 8013388:	3301      	adds	r3, #1
 801338a:	653b      	str	r3, [r7, #80]	; 0x50
                if(first + last > len) last = len - first;
 801338c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801338e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013390:	441a      	add	r2, r3
 8013392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013396:	429a      	cmp	r2, r3
 8013398:	dd04      	ble.n	80133a4 <lv_draw_mask_radius+0x1b8>
 801339a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801339e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133a0:	1ad3      	subs	r3, r2, r3
 80133a2:	653b      	str	r3, [r7, #80]	; 0x50
                if(last >= 0) {
 80133a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	db07      	blt.n	80133ba <lv_draw_mask_radius+0x1ce>
                    lv_memset_00(&mask_buf[first], last);
 80133aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133ac:	68fa      	ldr	r2, [r7, #12]
 80133ae:	4413      	add	r3, r2
 80133b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80133b2:	4611      	mov	r1, r2
 80133b4:	4618      	mov	r0, r3
 80133b6:	f00f f909 	bl	80225cc <lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 80133ba:	2302      	movs	r3, #2
 80133bc:	e1b7      	b.n	801372e <lv_draw_mask_radius+0x542>
    //    if( abs_x == 276 && abs_x + len - 1 == 479 && abs_y == 63 && p->cfg.radius == 5 && p->cfg.outer == 1) {
    //        char x = 0;
    //    }
    //exec: x:276.. 479, y:63: r:5, inv)

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 80133be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80133c2:	461a      	mov	r2, r3
 80133c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80133c8:	1ad3      	subs	r3, r2, r3
 80133ca:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t w = lv_area_get_width(&rect);
 80133cc:	f107 0318 	add.w	r3, r7, #24
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7fe fa35 	bl	8011840 <lv_area_get_width>
 80133d6:	4603      	mov	r3, r0
 80133d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h = lv_area_get_height(&rect);
 80133da:	f107 0318 	add.w	r3, r7, #24
 80133de:	4618      	mov	r0, r3
 80133e0:	f7fe fa45 	bl	801186e <lv_area_get_height>
 80133e4:	4603      	mov	r3, r0
 80133e6:	63bb      	str	r3, [r7, #56]	; 0x38
    abs_x -= rect.x1;
 80133e8:	897a      	ldrh	r2, [r7, #10]
 80133ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	1ad3      	subs	r3, r2, r3
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 80133f6:	893a      	ldrh	r2, [r7, #8]
 80133f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	1ad3      	subs	r3, r2, r3
 8013400:	b29b      	uxth	r3, r3
 8013402:	813b      	strh	r3, [r7, #8]

    lv_coord_t aa_len;
    lv_coord_t x_start;
    lv_coord_t cir_y;
    if(abs_y < radius) {
 8013404:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801340a:	429a      	cmp	r2, r3
 801340c:	dd09      	ble.n	8013422 <lv_draw_mask_radius+0x236>
        cir_y = radius - abs_y - 1;
 801340e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013410:	b29a      	uxth	r2, r3
 8013412:	893b      	ldrh	r3, [r7, #8]
 8013414:	1ad3      	subs	r3, r2, r3
 8013416:	b29b      	uxth	r3, r3
 8013418:	3b01      	subs	r3, #1
 801341a:	b29b      	uxth	r3, r3
 801341c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013420:	e00a      	b.n	8013438 <lv_draw_mask_radius+0x24c>
    }
    else {
        cir_y = abs_y - (h - radius);
 8013422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013424:	b29a      	uxth	r2, r3
 8013426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013428:	b29b      	uxth	r3, r3
 801342a:	1ad3      	subs	r3, r2, r3
 801342c:	b29a      	uxth	r2, r3
 801342e:	893b      	ldrh	r3, [r7, #8]
 8013430:	4413      	add	r3, r2
 8013432:	b29b      	uxth	r3, r3
 8013434:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 8013438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801343a:	6958      	ldr	r0, [r3, #20]
 801343c:	f107 0314 	add.w	r3, r7, #20
 8013440:	f107 0216 	add.w	r2, r7, #22
 8013444:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8013448:	f000 fd38 	bl	8013ebc <get_next_line>
 801344c:	6378      	str	r0, [r7, #52]	; 0x34
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801344e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013450:	b29a      	uxth	r2, r3
 8013452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013454:	b29b      	uxth	r3, r3
 8013456:	4413      	add	r3, r2
 8013458:	b29a      	uxth	r2, r3
 801345a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801345c:	b29b      	uxth	r3, r3
 801345e:	1ad3      	subs	r3, r2, r3
 8013460:	b29a      	uxth	r2, r3
 8013462:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013466:	b29b      	uxth	r3, r3
 8013468:	4413      	add	r3, r2
 801346a:	b29b      	uxth	r3, r3
 801346c:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 801346e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013470:	b29a      	uxth	r2, r3
 8013472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013474:	b29b      	uxth	r3, r3
 8013476:	4413      	add	r3, r2
 8013478:	b29a      	uxth	r2, r3
 801347a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801347e:	b29b      	uxth	r3, r3
 8013480:	1ad3      	subs	r3, r2, r3
 8013482:	b29b      	uxth	r3, r3
 8013484:	3b01      	subs	r3, #1
 8013486:	b29b      	uxth	r3, r3
 8013488:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t i;

    if(outer == false) {
 801348a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801348e:	f083 0301 	eor.w	r3, r3, #1
 8013492:	b2db      	uxtb	r3, r3
 8013494:	2b00      	cmp	r3, #0
 8013496:	f000 809b 	beq.w	80135d0 <lv_draw_mask_radius+0x3e4>
        for(i = 0; i < aa_len; i++) {
 801349a:	2300      	movs	r3, #0
 801349c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80134a0:	e062      	b.n	8013568 <lv_draw_mask_radius+0x37c>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 80134a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80134a6:	461a      	mov	r2, r3
 80134a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134ac:	1ad3      	subs	r3, r2, r3
 80134ae:	3b01      	subs	r3, #1
 80134b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134b2:	4413      	add	r3, r2
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 80134ba:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80134be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134c2:	4413      	add	r3, r2
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	db20      	blt.n	801350a <lv_draw_mask_radius+0x31e>
 80134c8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80134cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134d0:	441a      	add	r2, r3
 80134d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80134d6:	429a      	cmp	r2, r3
 80134d8:	da17      	bge.n	801350a <lv_draw_mask_radius+0x31e>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 80134da:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80134de:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134e2:	4413      	add	r3, r2
 80134e4:	461a      	mov	r2, r3
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	4413      	add	r3, r2
 80134ea:	7819      	ldrb	r1, [r3, #0]
 80134ec:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80134f0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134f4:	4413      	add	r3, r2
 80134f6:	461a      	mov	r2, r3
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	189c      	adds	r4, r3, r2
 80134fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8013500:	4618      	mov	r0, r3
 8013502:	f000 fd11 	bl	8013f28 <mask_mix>
 8013506:	4603      	mov	r3, r0
 8013508:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 801350a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801350e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013512:	1ad3      	subs	r3, r2, r3
 8013514:	2b00      	cmp	r3, #0
 8013516:	db20      	blt.n	801355a <lv_draw_mask_radius+0x36e>
 8013518:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801351c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013520:	1ad2      	subs	r2, r2, r3
 8013522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013526:	429a      	cmp	r2, r3
 8013528:	da17      	bge.n	801355a <lv_draw_mask_radius+0x36e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801352a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801352e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013532:	1ad3      	subs	r3, r2, r3
 8013534:	461a      	mov	r2, r3
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	4413      	add	r3, r2
 801353a:	7819      	ldrb	r1, [r3, #0]
 801353c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013540:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013544:	1ad3      	subs	r3, r2, r3
 8013546:	461a      	mov	r2, r3
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	189c      	adds	r4, r3, r2
 801354c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8013550:	4618      	mov	r0, r3
 8013552:	f000 fce9 	bl	8013f28 <mask_mix>
 8013556:	4603      	mov	r3, r0
 8013558:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 801355a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801355e:	b29b      	uxth	r3, r3
 8013560:	3301      	adds	r3, #1
 8013562:	b29b      	uxth	r3, r3
 8013564:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8013568:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801356c:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8013570:	429a      	cmp	r2, r3
 8013572:	db96      	blt.n	80134a2 <lv_draw_mask_radius+0x2b6>
            }
        }

        /*Clean the right side*/
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 8013574:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013578:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 801357c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013580:	440b      	add	r3, r1
 8013582:	4293      	cmp	r3, r2
 8013584:	bfa8      	it	ge
 8013586:	4613      	movge	r3, r2
 8013588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801358c:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 801358e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8013592:	68fa      	ldr	r2, [r7, #12]
 8013594:	18d0      	adds	r0, r2, r3
 8013596:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801359a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	4619      	mov	r1, r3
 80135a2:	f00f f813 	bl	80225cc <lv_memset_00>

        /*Clean the left side*/
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 80135a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80135aa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80135ae:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80135b2:	1a5b      	subs	r3, r3, r1
 80135b4:	3301      	adds	r3, #1
 80135b6:	4293      	cmp	r3, r2
 80135b8:	bfa8      	it	ge
 80135ba:	4613      	movge	r3, r2
 80135bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80135c0:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_memset_00(&mask_buf[0], cir_x_left);
 80135c2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80135c6:	4619      	mov	r1, r3
 80135c8:	68f8      	ldr	r0, [r7, #12]
 80135ca:	f00e ffff 	bl	80225cc <lv_memset_00>
 80135ce:	e0ad      	b.n	801372c <lv_draw_mask_radius+0x540>
    }
    else {
        for(i = 0; i < aa_len; i++) {
 80135d0:	2300      	movs	r3, #0
 80135d2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80135d6:	e063      	b.n	80136a0 <lv_draw_mask_radius+0x4b4>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 80135d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80135dc:	1e5a      	subs	r2, r3, #1
 80135de:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80135e2:	1ad3      	subs	r3, r2, r3
 80135e4:	461a      	mov	r2, r3
 80135e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135e8:	4413      	add	r3, r2
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	43db      	mvns	r3, r3
 80135ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 80135f2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80135f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80135fa:	4413      	add	r3, r2
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	db20      	blt.n	8013642 <lv_draw_mask_radius+0x456>
 8013600:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013604:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013608:	441a      	add	r2, r3
 801360a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801360e:	429a      	cmp	r2, r3
 8013610:	da17      	bge.n	8013642 <lv_draw_mask_radius+0x456>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8013612:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013616:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801361a:	4413      	add	r3, r2
 801361c:	461a      	mov	r2, r3
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	4413      	add	r3, r2
 8013622:	7819      	ldrb	r1, [r3, #0]
 8013624:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013628:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801362c:	4413      	add	r3, r2
 801362e:	461a      	mov	r2, r3
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	189c      	adds	r4, r3, r2
 8013634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013638:	4618      	mov	r0, r3
 801363a:	f000 fc75 	bl	8013f28 <mask_mix>
 801363e:	4603      	mov	r3, r0
 8013640:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8013642:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013646:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801364a:	1ad3      	subs	r3, r2, r3
 801364c:	2b00      	cmp	r3, #0
 801364e:	db20      	blt.n	8013692 <lv_draw_mask_radius+0x4a6>
 8013650:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013654:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013658:	1ad2      	subs	r2, r2, r3
 801365a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801365e:	429a      	cmp	r2, r3
 8013660:	da17      	bge.n	8013692 <lv_draw_mask_radius+0x4a6>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8013662:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013666:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	461a      	mov	r2, r3
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	4413      	add	r3, r2
 8013672:	7819      	ldrb	r1, [r3, #0]
 8013674:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013678:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801367c:	1ad3      	subs	r3, r2, r3
 801367e:	461a      	mov	r2, r3
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	189c      	adds	r4, r3, r2
 8013684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013688:	4618      	mov	r0, r3
 801368a:	f000 fc4d 	bl	8013f28 <mask_mix>
 801368e:	4603      	mov	r3, r0
 8013690:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 8013692:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013696:	b29b      	uxth	r3, r3
 8013698:	3301      	adds	r3, #1
 801369a:	b29b      	uxth	r3, r3
 801369c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80136a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80136a4:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 80136a8:	429a      	cmp	r2, r3
 80136aa:	db95      	blt.n	80135d8 <lv_draw_mask_radius+0x3ec>
            }
        }

        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 80136ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80136b0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80136b4:	3301      	adds	r3, #1
 80136b6:	4293      	cmp	r3, r2
 80136b8:	bfa8      	it	ge
 80136ba:	4613      	movge	r3, r2
 80136bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 80136c2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80136c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	da07      	bge.n	80136de <lv_draw_mask_radius+0x4f2>
 80136ce:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80136d2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	0fdb      	lsrs	r3, r3, #31
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	e006      	b.n	80136ec <lv_draw_mask_radius+0x500>
 80136de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80136e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80136e6:	1ad3      	subs	r3, r2, r3
 80136e8:	0fdb      	lsrs	r3, r3, #31
 80136ea:	b2db      	uxtb	r3, r3
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d001      	beq.n	80136f4 <lv_draw_mask_radius+0x508>
 80136f0:	2300      	movs	r3, #0
 80136f2:	e010      	b.n	8013716 <lv_draw_mask_radius+0x52a>
 80136f4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80136f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	da05      	bge.n	801370c <lv_draw_mask_radius+0x520>
 8013700:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013702:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013704:	1ad3      	subs	r3, r2, r3
 8013706:	b29b      	uxth	r3, r3
 8013708:	b21b      	sxth	r3, r3
 801370a:	e004      	b.n	8013716 <lv_draw_mask_radius+0x52a>
 801370c:	88fa      	ldrh	r2, [r7, #6]
 801370e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013710:	1ad3      	subs	r3, r2, r3
 8013712:	b29b      	uxth	r3, r3
 8013714:	b21b      	sxth	r3, r3
 8013716:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_memset_00(&mask_buf[clr_start], clr_len);
 8013718:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801371c:	68fa      	ldr	r2, [r7, #12]
 801371e:	4413      	add	r3, r2
 8013720:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8013724:	4611      	mov	r1, r2
 8013726:	4618      	mov	r0, r3
 8013728:	f00e ff50 	bl	80225cc <lv_memset_00>
    }

    return LV_DRAW_MASK_RES_CHANGED;
 801372c:	2302      	movs	r3, #2
}
 801372e:	4618      	mov	r0, r3
 8013730:	375c      	adds	r7, #92	; 0x5c
 8013732:	46bd      	mov	sp, r7
 8013734:	bd90      	pop	{r4, r7, pc}

08013736 <circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 8013736:	b480      	push	{r7}
 8013738:	b085      	sub	sp, #20
 801373a:	af00      	add	r7, sp, #0
 801373c:	60f8      	str	r0, [r7, #12]
 801373e:	60b9      	str	r1, [r7, #8]
 8013740:	4613      	mov	r3, r2
 8013742:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	88fa      	ldrh	r2, [r7, #6]
 8013748:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2200      	movs	r2, #0
 801374e:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 8013750:	88fb      	ldrh	r3, [r7, #6]
 8013752:	f1c3 0301 	rsb	r3, r3, #1
 8013756:	b29b      	uxth	r3, r3
 8013758:	b21a      	sxth	r2, r3
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	801a      	strh	r2, [r3, #0]
}
 801375e:	bf00      	nop
 8013760:	3714      	adds	r7, #20
 8013762:	46bd      	mov	sp, r7
 8013764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013768:	4770      	bx	lr

0801376a <circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
 801376a:	b480      	push	{r7}
 801376c:	b083      	sub	sp, #12
 801376e:	af00      	add	r7, sp, #0
 8013770:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801377e:	429a      	cmp	r2, r3
 8013780:	bfd4      	ite	le
 8013782:	2301      	movle	r3, #1
 8013784:	2300      	movgt	r3, #0
 8013786:	b2db      	uxtb	r3, r3
}
 8013788:	4618      	mov	r0, r3
 801378a:	370c      	adds	r7, #12
 801378c:	46bd      	mov	sp, r7
 801378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013792:	4770      	bx	lr

08013794 <circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 8013794:	b480      	push	{r7}
 8013796:	b083      	sub	sp, #12
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6039      	str	r1, [r7, #0]

    if(*tmp <= 0) {
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	dc11      	bgt.n	80137cc <circ_next+0x38>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	005b      	lsls	r3, r3, #1
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	4413      	add	r3, r2
 80137be:	b29b      	uxth	r3, r3
 80137c0:	3303      	adds	r3, #3
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	b21a      	sxth	r2, r3
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	801a      	strh	r2, [r3, #0]
 80137ca:	e01e      	b.n	801380a <circ_next+0x76>
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80137da:	4619      	mov	r1, r3
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137e2:	1acb      	subs	r3, r1, r3
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	b29b      	uxth	r3, r3
 80137ea:	4413      	add	r3, r2
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	3305      	adds	r3, #5
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	b21a      	sxth	r2, r3
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	801a      	strh	r2, [r3, #0]
        c->x--;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137fe:	b29b      	uxth	r3, r3
 8013800:	3b01      	subs	r3, #1
 8013802:	b29b      	uxth	r3, r3
 8013804:	b21a      	sxth	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	801a      	strh	r2, [r3, #0]
    }
    c->y++;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013810:	b29b      	uxth	r3, r3
 8013812:	3301      	adds	r3, #1
 8013814:	b29b      	uxth	r3, r3
 8013816:	b21a      	sxth	r2, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	805a      	strh	r2, [r3, #2]
}
 801381c:	bf00      	nop
 801381e:	370c      	adds	r7, #12
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr

08013828 <circ_calc_aa4>:

static void circ_calc_aa4(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t radius)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b096      	sub	sp, #88	; 0x58
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	460b      	mov	r3, r1
 8013832:	807b      	strh	r3, [r7, #2]
    if(radius == 0) return;
 8013834:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013838:	2b00      	cmp	r3, #0
 801383a:	f000 833b 	beq.w	8013eb4 <circ_calc_aa4+0x68c>
    c->radius = radius;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	887a      	ldrh	r2, [r7, #2]
 8013842:	831a      	strh	r2, [r3, #24]

    /*Allocate buffers*/
    if(c->buf) lv_mem_free(c->buf);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d004      	beq.n	8013856 <circ_calc_aa4+0x2e>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	4618      	mov	r0, r3
 8013852:	f00e fab7 	bl	8021dc4 <lv_mem_free>

    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8013856:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801385a:	1c5a      	adds	r2, r3, #1
 801385c:	4613      	mov	r3, r2
 801385e:	005b      	lsls	r3, r3, #1
 8013860:	4413      	add	r3, r2
 8013862:	005b      	lsls	r3, r3, #1
 8013864:	4618      	mov	r0, r3
 8013866:	f00e fa7d 	bl	8021d64 <lv_mem_alloc>
 801386a:	4602      	mov	r2, r0
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MALLOC(c->buf);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d100      	bne.n	801387a <circ_calc_aa4+0x52>
 8013878:	e7fe      	b.n	8013878 <circ_calc_aa4+0x50>
    c->cir_opa = c->buf;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	605a      	str	r2, [r3, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801388a:	005b      	lsls	r3, r3, #1
 801388c:	3302      	adds	r3, #2
 801388e:	441a      	add	r2, r3
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	60da      	str	r2, [r3, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	3304      	adds	r3, #4
 80138a0:	441a      	add	r2, r3
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	609a      	str	r2, [r3, #8]

    /*Special case, handle manually*/
    if(radius == 1) {
 80138a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80138aa:	2b01      	cmp	r3, #1
 80138ac:	d111      	bne.n	80138d2 <circ_calc_aa4+0xaa>
        c->cir_opa[0] = 180;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	22b4      	movs	r2, #180	; 0xb4
 80138b4:	701a      	strb	r2, [r3, #0]
        c->opa_start_on_y[0] = 0;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	68db      	ldr	r3, [r3, #12]
 80138ba:	2200      	movs	r2, #0
 80138bc:	801a      	strh	r2, [r3, #0]
        c->opa_start_on_y[1] = 1;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	68db      	ldr	r3, [r3, #12]
 80138c2:	3302      	adds	r3, #2
 80138c4:	2201      	movs	r2, #1
 80138c6:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[0] = 0;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	689b      	ldr	r3, [r3, #8]
 80138cc:	2200      	movs	r2, #0
 80138ce:	801a      	strh	r2, [r3, #0]
        return;
 80138d0:	e2f1      	b.n	8013eb6 <circ_calc_aa4+0x68e>
    }

    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 80138d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80138d6:	3301      	adds	r3, #1
 80138d8:	00db      	lsls	r3, r3, #3
 80138da:	4618      	mov	r0, r3
 80138dc:	f00e facc 	bl	8021e78 <lv_mem_buf_get>
 80138e0:	6438      	str	r0, [r7, #64]	; 0x40
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 80138e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80138e6:	3301      	adds	r3, #1
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80138ec:	4413      	add	r3, r2
 80138ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    uint32_t y_8th_cnt = 0;
 80138f0:	2300      	movs	r3, #0
 80138f2:	657b      	str	r3, [r7, #84]	; 0x54
    lv_point_t cp;
    lv_coord_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 80138f4:	887b      	ldrh	r3, [r7, #2]
 80138f6:	009b      	lsls	r3, r3, #2
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	b21a      	sxth	r2, r3
 80138fc:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8013900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013904:	4618      	mov	r0, r3
 8013906:	f7ff ff16 	bl	8013736 <circ_init>
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    lv_coord_t cir_size = 0;
 801390a:	2300      	movs	r3, #0
 801390c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    x_int[0] = cp.x >> 2;
 8013910:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013914:	109b      	asrs	r3, r3, #2
 8013916:	b21b      	sxth	r3, r3
 8013918:	61fb      	str	r3, [r7, #28]
    x_fract[0] = 0;
 801391a:	2300      	movs	r3, #0
 801391c:	60fb      	str	r3, [r7, #12]

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 801391e:	e1b7      	b.n	8013c90 <circ_calc_aa4+0x468>
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 8013920:	2300      	movs	r3, #0
 8013922:	653b      	str	r3, [r7, #80]	; 0x50
 8013924:	e02b      	b.n	801397e <circ_calc_aa4+0x156>
            circ_next(&cp, &tmp);
 8013926:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801392a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801392e:	4611      	mov	r1, r2
 8013930:	4618      	mov	r0, r3
 8013932:	f7ff ff2f 	bl	8013794 <circ_next>
            if(circ_cont(&cp) == false) break;
 8013936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801393a:	4618      	mov	r0, r3
 801393c:	f7ff ff15 	bl	801376a <circ_cont>
 8013940:	4603      	mov	r3, r0
 8013942:	f083 0301 	eor.w	r3, r3, #1
 8013946:	b2db      	uxtb	r3, r3
 8013948:	2b00      	cmp	r3, #0
 801394a:	d11c      	bne.n	8013986 <circ_calc_aa4+0x15e>
            x_int[i] = cp.x >> 2;
 801394c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013950:	109b      	asrs	r3, r3, #2
 8013952:	b21b      	sxth	r3, r3
 8013954:	461a      	mov	r2, r3
 8013956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013958:	009b      	lsls	r3, r3, #2
 801395a:	3358      	adds	r3, #88	; 0x58
 801395c:	443b      	add	r3, r7
 801395e:	f843 2c3c 	str.w	r2, [r3, #-60]
            x_fract[i] = cp.x & 0x3;
 8013962:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013966:	b29b      	uxth	r3, r3
 8013968:	f003 0203 	and.w	r2, r3, #3
 801396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801396e:	009b      	lsls	r3, r3, #2
 8013970:	3358      	adds	r3, #88	; 0x58
 8013972:	443b      	add	r3, r7
 8013974:	f843 2c4c 	str.w	r2, [r3, #-76]
        for(i = 0; i < 4; i++) {
 8013978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801397a:	3301      	adds	r3, #1
 801397c:	653b      	str	r3, [r7, #80]	; 0x50
 801397e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013980:	2b03      	cmp	r3, #3
 8013982:	ddd0      	ble.n	8013926 <circ_calc_aa4+0xfe>
 8013984:	e000      	b.n	8013988 <circ_calc_aa4+0x160>
            if(circ_cont(&cp) == false) break;
 8013986:	bf00      	nop
        }
        if(i != 4) break;
 8013988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801398a:	2b04      	cmp	r3, #4
 801398c:	f040 818a 	bne.w	8013ca4 <circ_calc_aa4+0x47c>

        /*All lines on the same x when downscaled*/
        if(x_int[0] == x_int[3]) {
 8013990:	69fa      	ldr	r2, [r7, #28]
 8013992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013994:	429a      	cmp	r2, r3
 8013996:	d139      	bne.n	8013a0c <circ_calc_aa4+0x1e4>
            cir_x[cir_size] = x_int[0];
 8013998:	69f9      	ldr	r1, [r7, #28]
 801399a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801399e:	005b      	lsls	r3, r3, #1
 80139a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80139a2:	4413      	add	r3, r2
 80139a4:	b20a      	sxth	r2, r1
 80139a6:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 80139a8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139ac:	005b      	lsls	r3, r3, #1
 80139ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139b0:	4413      	add	r3, r2
 80139b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80139b4:	b212      	sxth	r2, r2
 80139b6:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	b2da      	uxtb	r2, r3
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	4413      	add	r3, r2
 80139c2:	b2da      	uxtb	r2, r3
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	b2db      	uxtb	r3, r3
 80139c8:	4413      	add	r3, r2
 80139ca:	b2d9      	uxtb	r1, r3
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	b2da      	uxtb	r2, r3
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6858      	ldr	r0, [r3, #4]
 80139d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139d8:	4403      	add	r3, r0
 80139da:	440a      	add	r2, r1
 80139dc:	b2d2      	uxtb	r2, r2
 80139de:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	685a      	ldr	r2, [r3, #4]
 80139e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139e8:	4413      	add	r3, r2
 80139ea:	781a      	ldrb	r2, [r3, #0]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6859      	ldr	r1, [r3, #4]
 80139f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139f4:	440b      	add	r3, r1
 80139f6:	0112      	lsls	r2, r2, #4
 80139f8:	b2d2      	uxtb	r2, r2
 80139fa:	701a      	strb	r2, [r3, #0]
            cir_size++;
 80139fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	3301      	adds	r3, #1
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013a0a:	e13e      	b.n	8013c8a <circ_calc_aa4+0x462>
        }
        /*Second line on new x when downscaled*/
        else if(x_int[0] != x_int[1]) {
 8013a0c:	69fa      	ldr	r2, [r7, #28]
 8013a0e:	6a3b      	ldr	r3, [r7, #32]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d067      	beq.n	8013ae4 <circ_calc_aa4+0x2bc>
            cir_x[cir_size] = x_int[0];
 8013a14:	69f9      	ldr	r1, [r7, #28]
 8013a16:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a1e:	4413      	add	r3, r2
 8013a20:	b20a      	sxth	r2, r1
 8013a22:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013a24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a28:	005b      	lsls	r3, r3, #1
 8013a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013a2c:	4413      	add	r3, r2
 8013a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a30:	b212      	sxth	r2, r2
 8013a32:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0];
 8013a34:	68f9      	ldr	r1, [r7, #12]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	685a      	ldr	r2, [r3, #4]
 8013a3a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a3e:	4413      	add	r3, r2
 8013a40:	b2ca      	uxtb	r2, r1
 8013a42:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	685a      	ldr	r2, [r3, #4]
 8013a48:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a4c:	4413      	add	r3, r2
 8013a4e:	781a      	ldrb	r2, [r3, #0]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6859      	ldr	r1, [r3, #4]
 8013a54:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a58:	440b      	add	r3, r1
 8013a5a:	0112      	lsls	r2, r2, #4
 8013a5c:	b2d2      	uxtb	r2, r2
 8013a5e:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013a60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	3301      	adds	r3, #1
 8013a68:	b29b      	uxth	r3, r3
 8013a6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013a6e:	69fb      	ldr	r3, [r7, #28]
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	3b01      	subs	r3, #1
 8013a74:	b299      	uxth	r1, r3
 8013a76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a7a:	005b      	lsls	r3, r3, #1
 8013a7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a7e:	4413      	add	r3, r2
 8013a80:	b20a      	sxth	r2, r1
 8013a82:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013a84:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a88:	005b      	lsls	r3, r3, #1
 8013a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013a8c:	4413      	add	r3, r2
 8013a8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a90:	b212      	sxth	r2, r2
 8013a92:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	b2da      	uxtb	r2, r3
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	4413      	add	r3, r2
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	69bb      	ldr	r3, [r7, #24]
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	4413      	add	r3, r2
 8013aa6:	b2da      	uxtb	r2, r3
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6859      	ldr	r1, [r3, #4]
 8013aac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ab0:	440b      	add	r3, r1
 8013ab2:	3204      	adds	r2, #4
 8013ab4:	b2d2      	uxtb	r2, r2
 8013ab6:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	685a      	ldr	r2, [r3, #4]
 8013abc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ac0:	4413      	add	r3, r2
 8013ac2:	781a      	ldrb	r2, [r3, #0]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	6859      	ldr	r1, [r3, #4]
 8013ac8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013acc:	440b      	add	r3, r1
 8013ace:	0112      	lsls	r2, r2, #4
 8013ad0:	b2d2      	uxtb	r2, r2
 8013ad2:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013ad4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	3301      	adds	r3, #1
 8013adc:	b29b      	uxth	r3, r3
 8013ade:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013ae2:	e0d2      	b.n	8013c8a <circ_calc_aa4+0x462>
        }
        /*Third line on new x when downscaled*/
        else if(x_int[0] != x_int[2]) {
 8013ae4:	69fa      	ldr	r2, [r7, #28]
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d067      	beq.n	8013bbc <circ_calc_aa4+0x394>
            cir_x[cir_size] = x_int[0];
 8013aec:	69f9      	ldr	r1, [r7, #28]
 8013aee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013af2:	005b      	lsls	r3, r3, #1
 8013af4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013af6:	4413      	add	r3, r2
 8013af8:	b20a      	sxth	r2, r1
 8013afa:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013afc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b00:	005b      	lsls	r3, r3, #1
 8013b02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b04:	4413      	add	r3, r2
 8013b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b08:	b212      	sxth	r2, r2
 8013b0a:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	b2d9      	uxtb	r1, r3
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	b2da      	uxtb	r2, r3
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6858      	ldr	r0, [r3, #4]
 8013b18:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b1c:	4403      	add	r3, r0
 8013b1e:	440a      	add	r2, r1
 8013b20:	b2d2      	uxtb	r2, r2
 8013b22:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	685a      	ldr	r2, [r3, #4]
 8013b28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b2c:	4413      	add	r3, r2
 8013b2e:	781a      	ldrb	r2, [r3, #0]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6859      	ldr	r1, [r3, #4]
 8013b34:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b38:	440b      	add	r3, r1
 8013b3a:	0112      	lsls	r2, r2, #4
 8013b3c:	b2d2      	uxtb	r2, r2
 8013b3e:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013b40:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	3301      	adds	r3, #1
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	3b01      	subs	r3, #1
 8013b54:	b299      	uxth	r1, r3
 8013b56:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b5a:	005b      	lsls	r3, r3, #1
 8013b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b5e:	4413      	add	r3, r2
 8013b60:	b20a      	sxth	r2, r1
 8013b62:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013b64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b68:	005b      	lsls	r3, r3, #1
 8013b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b6c:	4413      	add	r3, r2
 8013b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b70:	b212      	sxth	r2, r2
 8013b72:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	b2da      	uxtb	r2, r3
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	4413      	add	r3, r2
 8013b7e:	b2da      	uxtb	r2, r3
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6859      	ldr	r1, [r3, #4]
 8013b84:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b88:	440b      	add	r3, r1
 8013b8a:	3208      	adds	r2, #8
 8013b8c:	b2d2      	uxtb	r2, r2
 8013b8e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	685a      	ldr	r2, [r3, #4]
 8013b94:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b98:	4413      	add	r3, r2
 8013b9a:	781a      	ldrb	r2, [r3, #0]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6859      	ldr	r1, [r3, #4]
 8013ba0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ba4:	440b      	add	r3, r1
 8013ba6:	0112      	lsls	r2, r2, #4
 8013ba8:	b2d2      	uxtb	r2, r2
 8013baa:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013bac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	3301      	adds	r3, #1
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013bba:	e066      	b.n	8013c8a <circ_calc_aa4+0x462>
        }
        /*Forth line on new x when downscaled*/
        else {
            cir_x[cir_size] = x_int[0];
 8013bbc:	69f9      	ldr	r1, [r7, #28]
 8013bbe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bc2:	005b      	lsls	r3, r3, #1
 8013bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013bc6:	4413      	add	r3, r2
 8013bc8:	b20a      	sxth	r2, r1
 8013bca:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013bcc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bd0:	005b      	lsls	r3, r3, #1
 8013bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013bd4:	4413      	add	r3, r2
 8013bd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013bd8:	b212      	sxth	r2, r2
 8013bda:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	b2da      	uxtb	r2, r3
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	4413      	add	r3, r2
 8013be6:	b2d9      	uxtb	r1, r3
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	b2da      	uxtb	r2, r3
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6858      	ldr	r0, [r3, #4]
 8013bf0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bf4:	4403      	add	r3, r0
 8013bf6:	440a      	add	r2, r1
 8013bf8:	b2d2      	uxtb	r2, r2
 8013bfa:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	685a      	ldr	r2, [r3, #4]
 8013c00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c04:	4413      	add	r3, r2
 8013c06:	781a      	ldrb	r2, [r3, #0]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6859      	ldr	r1, [r3, #4]
 8013c0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c10:	440b      	add	r3, r1
 8013c12:	0112      	lsls	r2, r2, #4
 8013c14:	b2d2      	uxtb	r2, r2
 8013c16:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013c18:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	3301      	adds	r3, #1
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	3b01      	subs	r3, #1
 8013c2c:	b299      	uxth	r1, r3
 8013c2e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c32:	005b      	lsls	r3, r3, #1
 8013c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c36:	4413      	add	r3, r2
 8013c38:	b20a      	sxth	r2, r1
 8013c3a:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013c3c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c40:	005b      	lsls	r3, r3, #1
 8013c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c44:	4413      	add	r3, r2
 8013c46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c48:	b212      	sxth	r2, r2
 8013c4a:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8013c4c:	69bb      	ldr	r3, [r7, #24]
 8013c4e:	b2da      	uxtb	r2, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6859      	ldr	r1, [r3, #4]
 8013c54:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c58:	440b      	add	r3, r1
 8013c5a:	320c      	adds	r2, #12
 8013c5c:	b2d2      	uxtb	r2, r2
 8013c5e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	685a      	ldr	r2, [r3, #4]
 8013c64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c68:	4413      	add	r3, r2
 8013c6a:	781a      	ldrb	r2, [r3, #0]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6859      	ldr	r1, [r3, #4]
 8013c70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c74:	440b      	add	r3, r1
 8013c76:	0112      	lsls	r2, r2, #4
 8013c78:	b2d2      	uxtb	r2, r2
 8013c7a:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013c7c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c80:	b29b      	uxth	r3, r3
 8013c82:	3301      	adds	r3, #1
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        y_8th_cnt++;
 8013c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c8c:	3301      	adds	r3, #1
 8013c8e:	657b      	str	r3, [r7, #84]	; 0x54
    while(circ_cont(&cp)) {
 8013c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7ff fd68 	bl	801376a <circ_cont>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	f47f ae3f 	bne.w	8013920 <circ_calc_aa4+0xf8>
 8013ca2:	e000      	b.n	8013ca6 <circ_calc_aa4+0x47e>
        if(i != 4) break;
 8013ca4:	bf00      	nop
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
 8013ca6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013caa:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013cae:	fb02 f303 	mul.w	r3, r2, r3
 8013cb2:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t mid_int = mid >> 10;
 8013cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb6:	129b      	asrs	r3, r3, #10
 8013cb8:	637b      	str	r3, [r7, #52]	; 0x34
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8013cba:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8013cbe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013cc2:	4413      	add	r3, r2
 8013cc4:	005b      	lsls	r3, r3, #1
 8013cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013cc8:	4413      	add	r3, r2
 8013cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cce:	461a      	mov	r2, r3
 8013cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	d10d      	bne.n	8013cf2 <circ_calc_aa4+0x4ca>
 8013cd6:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8013cda:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013cde:	4413      	add	r3, r2
 8013ce0:	005b      	lsls	r3, r3, #1
 8013ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ce4:	4413      	add	r3, r2
 8013ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cea:	461a      	mov	r2, r3
 8013cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cee:	4293      	cmp	r3, r2
 8013cf0:	d04e      	beq.n	8013d90 <circ_calc_aa4+0x568>
        int32_t tmp_val = mid - (mid_int << 10);
 8013cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cf4:	029b      	lsls	r3, r3, #10
 8013cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	64bb      	str	r3, [r7, #72]	; 0x48
        if(tmp_val <= 512) {
 8013cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d02:	dc08      	bgt.n	8013d16 <circ_calc_aa4+0x4ee>
            tmp_val = tmp_val * tmp_val * 2;
 8013d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d06:	fb03 f303 	mul.w	r3, r3, r3
 8013d0a:	005b      	lsls	r3, r3, #1
 8013d0c:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8013d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d10:	141b      	asrs	r3, r3, #16
 8013d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d14:	e00f      	b.n	8013d36 <circ_calc_aa4+0x50e>
        }
        else {
            tmp_val = 1024 - tmp_val;
 8013d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d18:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8013d1c:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val * tmp_val * 2;
 8013d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d20:	fb03 f303 	mul.w	r3, r3, r3
 8013d24:	005b      	lsls	r3, r3, #1
 8013d26:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8013d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d2a:	141b      	asrs	r3, r3, #16
 8013d2c:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = 15 - tmp_val;
 8013d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d30:	f1c3 030f 	rsb	r3, r3, #15
 8013d34:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        cir_x[cir_size] = mid_int;
 8013d36:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d3a:	005b      	lsls	r3, r3, #1
 8013d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d3e:	4413      	add	r3, r2
 8013d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d42:	b212      	sxth	r2, r2
 8013d44:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = mid_int;
 8013d46:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d4a:	005b      	lsls	r3, r3, #1
 8013d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d4e:	4413      	add	r3, r2
 8013d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d52:	b212      	sxth	r2, r2
 8013d54:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = tmp_val;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	685a      	ldr	r2, [r3, #4]
 8013d5a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d5e:	4413      	add	r3, r2
 8013d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d62:	b2d2      	uxtb	r2, r2
 8013d64:	701a      	strb	r2, [r3, #0]
        c->cir_opa[cir_size] *= 16;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	685a      	ldr	r2, [r3, #4]
 8013d6a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d6e:	4413      	add	r3, r2
 8013d70:	781a      	ldrb	r2, [r3, #0]
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	6859      	ldr	r1, [r3, #4]
 8013d76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d7a:	440b      	add	r3, r1
 8013d7c:	0112      	lsls	r2, r2, #4
 8013d7e:	b2d2      	uxtb	r2, r2
 8013d80:	701a      	strb	r2, [r3, #0]
        cir_size++;
 8013d82:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	3301      	adds	r3, #1
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8013d90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d94:	3b02      	subs	r3, #2
 8013d96:	653b      	str	r3, [r7, #80]	; 0x50
 8013d98:	e02c      	b.n	8013df4 <circ_calc_aa4+0x5cc>
        cir_x[cir_size] = cir_y[i];
 8013d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d9c:	005b      	lsls	r3, r3, #1
 8013d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013da0:	441a      	add	r2, r3
 8013da2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013da6:	005b      	lsls	r3, r3, #1
 8013da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013daa:	440b      	add	r3, r1
 8013dac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013db0:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = cir_x[i];
 8013db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013db4:	005b      	lsls	r3, r3, #1
 8013db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013db8:	441a      	add	r2, r3
 8013dba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013dbe:	005b      	lsls	r3, r3, #1
 8013dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013dc2:	440b      	add	r3, r1
 8013dc4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013dc8:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = c->cir_opa[i];
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	685a      	ldr	r2, [r3, #4]
 8013dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dd0:	441a      	add	r2, r3
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6859      	ldr	r1, [r3, #4]
 8013dd6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013dda:	440b      	add	r3, r1
 8013ddc:	7812      	ldrb	r2, [r2, #0]
 8013dde:	701a      	strb	r2, [r3, #0]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8013de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013de2:	3b01      	subs	r3, #1
 8013de4:	653b      	str	r3, [r7, #80]	; 0x50
 8013de6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	3301      	adds	r3, #1
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	dacf      	bge.n	8013d9a <circ_calc_aa4+0x572>
    }

    lv_coord_t y = 0;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    i = 0;
 8013e00:	2300      	movs	r3, #0
 8013e02:	653b      	str	r3, [r7, #80]	; 0x50
    c->opa_start_on_y[0] = 0;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 8013e0c:	e049      	b.n	8013ea2 <circ_calc_aa4+0x67a>
        c->opa_start_on_y[y] = i;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	68da      	ldr	r2, [r3, #12]
 8013e12:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013e16:	005b      	lsls	r3, r3, #1
 8013e18:	4413      	add	r3, r2
 8013e1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e1c:	b292      	uxth	r2, r2
 8013e1e:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[y] = cir_x[i];
 8013e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e22:	005b      	lsls	r3, r3, #1
 8013e24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e26:	4413      	add	r3, r2
 8013e28:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	689a      	ldr	r2, [r3, #8]
 8013e30:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013e34:	005b      	lsls	r3, r3, #1
 8013e36:	4413      	add	r3, r2
 8013e38:	b28a      	uxth	r2, r1
 8013e3a:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8013e3c:	e01b      	b.n	8013e76 <circ_calc_aa4+0x64e>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 8013e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e40:	005b      	lsls	r3, r3, #1
 8013e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e44:	4413      	add	r3, r2
 8013e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	689a      	ldr	r2, [r3, #8]
 8013e50:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013e54:	005b      	lsls	r3, r3, #1
 8013e56:	4413      	add	r3, r2
 8013e58:	881b      	ldrh	r3, [r3, #0]
 8013e5a:	4299      	cmp	r1, r3
 8013e5c:	bfa8      	it	ge
 8013e5e:	4619      	movge	r1, r3
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	689a      	ldr	r2, [r3, #8]
 8013e64:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013e68:	005b      	lsls	r3, r3, #1
 8013e6a:	4413      	add	r3, r2
 8013e6c:	b28a      	uxth	r2, r1
 8013e6e:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8013e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e72:	3301      	adds	r3, #1
 8013e74:	653b      	str	r3, [r7, #80]	; 0x50
 8013e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e78:	005b      	lsls	r3, r3, #1
 8013e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e7c:	4413      	add	r3, r2
 8013e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e82:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d104      	bne.n	8013e94 <circ_calc_aa4+0x66c>
 8013e8a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e90:	429a      	cmp	r2, r3
 8013e92:	dbd4      	blt.n	8013e3e <circ_calc_aa4+0x616>
        }
        y++;
 8013e94:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while(i < cir_size) {
 8013ea2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ea6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	dbb0      	blt.n	8013e0e <circ_calc_aa4+0x5e6>
    }

    lv_mem_buf_release(cir_x);
 8013eac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013eae:	f00e f88f 	bl	8021fd0 <lv_mem_buf_release>
 8013eb2:	e000      	b.n	8013eb6 <circ_calc_aa4+0x68e>
    if(radius == 0) return;
 8013eb4:	bf00      	nop
}
 8013eb6:	3758      	adds	r7, #88	; 0x58
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <get_next_line>:

static lv_opa_t * get_next_line(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t y, lv_coord_t * len,
                                lv_coord_t * x_start)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b085      	sub	sp, #20
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	607a      	str	r2, [r7, #4]
 8013ec6:	603b      	str	r3, [r7, #0]
 8013ec8:	460b      	mov	r3, r1
 8013eca:	817b      	strh	r3, [r7, #10]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	68da      	ldr	r2, [r3, #12]
 8013ed0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	4413      	add	r3, r2
 8013eda:	881a      	ldrh	r2, [r3, #0]
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	68d9      	ldr	r1, [r3, #12]
 8013ee0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013ee4:	005b      	lsls	r3, r3, #1
 8013ee6:	440b      	add	r3, r1
 8013ee8:	881b      	ldrh	r3, [r3, #0]
 8013eea:	1ad3      	subs	r3, r2, r3
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	b21a      	sxth	r2, r3
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	801a      	strh	r2, [r3, #0]
    *x_start = c->x_start_on_y[y];
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	689a      	ldr	r2, [r3, #8]
 8013ef8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013efc:	005b      	lsls	r3, r3, #1
 8013efe:	4413      	add	r3, r2
 8013f00:	881b      	ldrh	r3, [r3, #0]
 8013f02:	b21a      	sxth	r2, r3
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	801a      	strh	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	685b      	ldr	r3, [r3, #4]
 8013f0c:	68fa      	ldr	r2, [r7, #12]
 8013f0e:	68d1      	ldr	r1, [r2, #12]
 8013f10:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013f14:	0052      	lsls	r2, r2, #1
 8013f16:	440a      	add	r2, r1
 8013f18:	8812      	ldrh	r2, [r2, #0]
 8013f1a:	4413      	add	r3, r2
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3714      	adds	r7, #20
 8013f20:	46bd      	mov	sp, r7
 8013f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f26:	4770      	bx	lr

08013f28 <mask_mix>:


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 8013f28:	b480      	push	{r7}
 8013f2a:	b083      	sub	sp, #12
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	4603      	mov	r3, r0
 8013f30:	460a      	mov	r2, r1
 8013f32:	71fb      	strb	r3, [r7, #7]
 8013f34:	4613      	mov	r3, r2
 8013f36:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8013f38:	79bb      	ldrb	r3, [r7, #6]
 8013f3a:	2bfc      	cmp	r3, #252	; 0xfc
 8013f3c:	d901      	bls.n	8013f42 <mask_mix+0x1a>
 8013f3e:	79fb      	ldrb	r3, [r7, #7]
 8013f40:	e010      	b.n	8013f64 <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 8013f42:	79bb      	ldrb	r3, [r7, #6]
 8013f44:	2b02      	cmp	r3, #2
 8013f46:	d801      	bhi.n	8013f4c <mask_mix+0x24>
 8013f48:	2300      	movs	r3, #0
 8013f4a:	e00b      	b.n	8013f64 <mask_mix+0x3c>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8013f4c:	79fb      	ldrb	r3, [r7, #7]
 8013f4e:	79ba      	ldrb	r2, [r7, #6]
 8013f50:	fb02 f303 	mul.w	r3, r2, r3
 8013f54:	461a      	mov	r2, r3
 8013f56:	4613      	mov	r3, r2
 8013f58:	021b      	lsls	r3, r3, #8
 8013f5a:	4413      	add	r3, r2
 8013f5c:	01db      	lsls	r3, r3, #7
 8013f5e:	4413      	add	r3, r2
 8013f60:	0ddb      	lsrs	r3, r3, #23
 8013f62:	b2db      	uxtb	r3, r3
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <lv_area_get_width>:
{
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f7e:	b29a      	uxth	r2, r3
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	1ad3      	subs	r3, r2, r3
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	3301      	adds	r3, #1
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	b21b      	sxth	r3, r3
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	370c      	adds	r7, #12
 8013f96:	46bd      	mov	sp, r7
 8013f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9c:	4770      	bx	lr

08013f9e <lv_area_get_height>:
{
 8013f9e:	b480      	push	{r7}
 8013fa0:	b083      	sub	sp, #12
 8013fa2:	af00      	add	r7, sp, #0
 8013fa4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	1ad3      	subs	r3, r2, r3
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	3301      	adds	r3, #1
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	b21b      	sxth	r3, r3
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	370c      	adds	r7, #12
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fca:	4770      	bx	lr

08013fcc <lv_color_make>:
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b083      	sub	sp, #12
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	71fb      	strb	r3, [r7, #7]
 8013fd6:	460b      	mov	r3, r1
 8013fd8:	71bb      	strb	r3, [r7, #6]
 8013fda:	4613      	mov	r3, r2
 8013fdc:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8013fde:	797b      	ldrb	r3, [r7, #5]
 8013fe0:	09db      	lsrs	r3, r3, #7
 8013fe2:	b2da      	uxtb	r2, r3
 8013fe4:	79bb      	ldrb	r3, [r7, #6]
 8013fe6:	09db      	lsrs	r3, r3, #7
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	4313      	orrs	r3, r2
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	79fb      	ldrb	r3, [r7, #7]
 8013ff0:	09db      	lsrs	r3, r3, #7
 8013ff2:	b2db      	uxtb	r3, r3
 8013ff4:	4313      	orrs	r3, r2
 8013ff6:	b2db      	uxtb	r3, r3
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	370c      	adds	r7, #12
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014002:	4770      	bx	lr

08014004 <lv_color_white>:
{
 8014004:	b580      	push	{r7, lr}
 8014006:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8014008:	22ff      	movs	r2, #255	; 0xff
 801400a:	21ff      	movs	r1, #255	; 0xff
 801400c:	20ff      	movs	r0, #255	; 0xff
 801400e:	f7ff ffdd 	bl	8013fcc <lv_color_make>
 8014012:	4603      	mov	r3, r0
}
 8014014:	4618      	mov	r0, r3
 8014016:	bd80      	pop	{r7, pc}

08014018 <lv_color_black>:
{
 8014018:	b580      	push	{r7, lr}
 801401a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801401c:	2200      	movs	r2, #0
 801401e:	2100      	movs	r1, #0
 8014020:	2000      	movs	r0, #0
 8014022:	f7ff ffd3 	bl	8013fcc <lv_color_make>
 8014026:	4603      	mov	r3, r0
}
 8014028:	4618      	mov	r0, r3
 801402a:	bd80      	pop	{r7, pc}

0801402c <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 801402c:	b590      	push	{r4, r7, lr}
 801402e:	b083      	sub	sp, #12
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8014034:	2130      	movs	r1, #48	; 0x30
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f00e fac8 	bl	80225cc <lv_memset_00>
    dsc->bg_color = lv_color_white();
 801403c:	687c      	ldr	r4, [r7, #4]
 801403e:	f7ff ffe1 	bl	8014004 <lv_color_white>
 8014042:	7120      	strb	r0, [r4, #4]
    dsc->bg_grad.stops[0].color = lv_color_white();
 8014044:	687c      	ldr	r4, [r7, #4]
 8014046:	f7ff ffdd 	bl	8014004 <lv_color_white>
 801404a:	7160      	strb	r0, [r4, #5]
    dsc->bg_grad.stops[1].color = lv_color_black();
 801404c:	687c      	ldr	r4, [r7, #4]
 801404e:	f7ff ffe3 	bl	8014018 <lv_color_black>
 8014052:	71e0      	strb	r0, [r4, #7]
    dsc->bg_grad.stops[1].frac = 0xFF;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	22ff      	movs	r2, #255	; 0xff
 8014058:	721a      	strb	r2, [r3, #8]
    dsc->bg_grad.stops_count = 2;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2202      	movs	r2, #2
 801405e:	725a      	strb	r2, [r3, #9]
    dsc->border_color = lv_color_black();
 8014060:	687c      	ldr	r4, [r7, #4]
 8014062:	f7ff ffd9 	bl	8014018 <lv_color_black>
 8014066:	7620      	strb	r0, [r4, #24]
    dsc->shadow_color = lv_color_black();
 8014068:	687c      	ldr	r4, [r7, #4]
 801406a:	f7ff ffd5 	bl	8014018 <lv_color_black>
 801406e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	4a0e      	ldr	r2, [pc, #56]	; (80140b0 <lv_draw_rect_dsc_init+0x84>)
 8014076:	611a      	str	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	22ff      	movs	r2, #255	; 0xff
 801407c:	70da      	strb	r2, [r3, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	22ff      	movs	r2, #255	; 0xff
 8014082:	755a      	strb	r2, [r3, #21]
    dsc->outline_opa = LV_OPA_COVER;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	22ff      	movs	r2, #255	; 0xff
 8014088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    dsc->border_opa = LV_OPA_COVER;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	22ff      	movs	r2, #255	; 0xff
 8014090:	771a      	strb	r2, [r3, #28]
    dsc->shadow_opa = LV_OPA_COVER;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	22ff      	movs	r2, #255	; 0xff
 8014096:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    dsc->border_side = LV_BORDER_SIDE_FULL;
 801409a:	687a      	ldr	r2, [r7, #4]
 801409c:	7f53      	ldrb	r3, [r2, #29]
 801409e:	210f      	movs	r1, #15
 80140a0:	f361 0345 	bfi	r3, r1, #1, #5
 80140a4:	7753      	strb	r3, [r2, #29]
}
 80140a6:	bf00      	nop
 80140a8:	370c      	adds	r7, #12
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd90      	pop	{r4, r7, pc}
 80140ae:	bf00      	nop
 80140b0:	0802d92c 	.word	0x0802d92c

080140b4 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	60b9      	str	r1, [r7, #8]
 80140be:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f7ff ff6c 	bl	8013f9e <lv_area_get_height>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	dd0c      	ble.n	80140e6 <lv_draw_rect+0x32>
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f7ff ff4f 	bl	8013f70 <lv_area_get_width>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	dd06      	ble.n	80140e6 <lv_draw_rect+0x32>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	68b9      	ldr	r1, [r7, #8]
 80140e0:	68f8      	ldr	r0, [r7, #12]
 80140e2:	4798      	blx	r3
 80140e4:	e000      	b.n	80140e8 <lv_draw_rect+0x34>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80140e6:	bf00      	nop

    LV_ASSERT_MEM_INTEGRITY();
}
 80140e8:	3710      	adds	r7, #16
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}

080140ee <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 80140ee:	b590      	push	{r4, r7, lr}
 80140f0:	b08b      	sub	sp, #44	; 0x2c
 80140f2:	af06      	add	r7, sp, #24
 80140f4:	60f8      	str	r0, [r7, #12]
 80140f6:	60b9      	str	r1, [r7, #8]
 80140f8:	607a      	str	r2, [r7, #4]
 80140fa:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_NULL(draw_ctx);
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d100      	bne.n	8014104 <lv_draw_transform+0x16>
 8014102:	e7fe      	b.n	8014102 <lv_draw_transform+0x14>
    if(draw_ctx->draw_transform == NULL) {
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014108:	2b00      	cmp	r3, #0
 801410a:	d018      	beq.n	801413e <lv_draw_transform+0x50>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8014110:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014116:	9305      	str	r3, [sp, #20]
 8014118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411a:	9304      	str	r3, [sp, #16]
 801411c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014120:	9303      	str	r3, [sp, #12]
 8014122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014124:	9302      	str	r3, [sp, #8]
 8014126:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801412a:	9301      	str	r3, [sp, #4]
 801412c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014130:	9300      	str	r3, [sp, #0]
 8014132:	4613      	mov	r3, r2
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	68b9      	ldr	r1, [r7, #8]
 8014138:	68f8      	ldr	r0, [r7, #12]
 801413a:	47a0      	blx	r4
 801413c:	e000      	b.n	8014140 <lv_draw_transform+0x52>
        return;
 801413e:	bf00      	nop

}
 8014140:	3714      	adds	r7, #20
 8014142:	46bd      	mov	sp, r7
 8014144:	bd90      	pop	{r4, r7, pc}

08014146 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b088      	sub	sp, #32
 801414a:	af00      	add	r7, sp, #0
 801414c:	60f8      	str	r0, [r7, #12]
 801414e:	4608      	mov	r0, r1
 8014150:	4611      	mov	r1, r2
 8014152:	461a      	mov	r2, r3
 8014154:	4603      	mov	r3, r0
 8014156:	817b      	strh	r3, [r7, #10]
 8014158:	460b      	mov	r3, r1
 801415a:	813b      	strh	r3, [r7, #8]
 801415c:	4613      	mov	r3, r2
 801415e:	80fb      	strh	r3, [r7, #6]
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 8014160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d116      	bne.n	8014196 <_lv_img_buf_get_transformed_area+0x50>
 8014168:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801416a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801416e:	d112      	bne.n	8014196 <_lv_img_buf_get_transformed_area+0x50>
        res->x1 = 0;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	2200      	movs	r2, #0
 8014174:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	2200      	movs	r2, #0
 801417a:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 801417c:	897b      	ldrh	r3, [r7, #10]
 801417e:	3b01      	subs	r3, #1
 8014180:	b29b      	uxth	r3, r3
 8014182:	b21a      	sxth	r2, r3
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 8014188:	893b      	ldrh	r3, [r7, #8]
 801418a:	3b01      	subs	r3, #1
 801418c:	b29b      	uxth	r3, r3
 801418e:	b21a      	sxth	r2, r3
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	80da      	strh	r2, [r3, #6]
 8014194:	e09c      	b.n	80142d0 <_lv_img_buf_get_transformed_area+0x18a>
        return;
    }

    lv_point_t p[4] = {
 8014196:	2300      	movs	r3, #0
 8014198:	823b      	strh	r3, [r7, #16]
 801419a:	2300      	movs	r3, #0
 801419c:	827b      	strh	r3, [r7, #18]
 801419e:	897b      	ldrh	r3, [r7, #10]
 80141a0:	82bb      	strh	r3, [r7, #20]
 80141a2:	2300      	movs	r3, #0
 80141a4:	82fb      	strh	r3, [r7, #22]
 80141a6:	2300      	movs	r3, #0
 80141a8:	833b      	strh	r3, [r7, #24]
 80141aa:	893b      	ldrh	r3, [r7, #8]
 80141ac:	837b      	strh	r3, [r7, #26]
 80141ae:	897b      	ldrh	r3, [r7, #10]
 80141b0:	83bb      	strh	r3, [r7, #28]
 80141b2:	893b      	ldrh	r3, [r7, #8]
 80141b4:	83fb      	strh	r3, [r7, #30]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 80141b6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80141ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80141bc:	f107 0010 	add.w	r0, r7, #16
 80141c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c2:	f00c fdb9 	bl	8020d38 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 80141c6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80141ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80141cc:	f107 0310 	add.w	r3, r7, #16
 80141d0:	1d18      	adds	r0, r3, #4
 80141d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d4:	f00c fdb0 	bl	8020d38 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 80141d8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80141dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80141de:	f107 0310 	add.w	r3, r7, #16
 80141e2:	f103 0008 	add.w	r0, r3, #8
 80141e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e8:	f00c fda6 	bl	8020d38 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 80141ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80141f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80141f2:	f107 0310 	add.w	r3, r7, #16
 80141f6:	f103 000c 	add.w	r0, r3, #12
 80141fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141fc:	f00c fd9c 	bl	8020d38 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 8014200:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8014204:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8014208:	4293      	cmp	r3, r2
 801420a:	bfa8      	it	ge
 801420c:	4613      	movge	r3, r2
 801420e:	b21a      	sxth	r2, r3
 8014210:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8014214:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8014218:	428b      	cmp	r3, r1
 801421a:	bfa8      	it	ge
 801421c:	460b      	movge	r3, r1
 801421e:	b21b      	sxth	r3, r3
 8014220:	4293      	cmp	r3, r2
 8014222:	bfa8      	it	ge
 8014224:	4613      	movge	r3, r2
 8014226:	b21b      	sxth	r3, r3
 8014228:	b29b      	uxth	r3, r3
 801422a:	3b02      	subs	r3, #2
 801422c:	b29b      	uxth	r3, r3
 801422e:	b21a      	sxth	r2, r3
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 8014234:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8014238:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801423c:	4293      	cmp	r3, r2
 801423e:	bfb8      	it	lt
 8014240:	4613      	movlt	r3, r2
 8014242:	b21a      	sxth	r2, r3
 8014244:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8014248:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801424c:	428b      	cmp	r3, r1
 801424e:	bfb8      	it	lt
 8014250:	460b      	movlt	r3, r1
 8014252:	b21b      	sxth	r3, r3
 8014254:	4293      	cmp	r3, r2
 8014256:	bfb8      	it	lt
 8014258:	4613      	movlt	r3, r2
 801425a:	b21b      	sxth	r3, r3
 801425c:	b29b      	uxth	r3, r3
 801425e:	3302      	adds	r3, #2
 8014260:	b29b      	uxth	r3, r3
 8014262:	b21a      	sxth	r2, r3
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 8014268:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801426c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014270:	4293      	cmp	r3, r2
 8014272:	bfa8      	it	ge
 8014274:	4613      	movge	r3, r2
 8014276:	b21a      	sxth	r2, r3
 8014278:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801427c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014280:	428b      	cmp	r3, r1
 8014282:	bfa8      	it	ge
 8014284:	460b      	movge	r3, r1
 8014286:	b21b      	sxth	r3, r3
 8014288:	4293      	cmp	r3, r2
 801428a:	bfa8      	it	ge
 801428c:	4613      	movge	r3, r2
 801428e:	b21b      	sxth	r3, r3
 8014290:	b29b      	uxth	r3, r3
 8014292:	3b02      	subs	r3, #2
 8014294:	b29b      	uxth	r3, r3
 8014296:	b21a      	sxth	r2, r3
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801429c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80142a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80142a4:	4293      	cmp	r3, r2
 80142a6:	bfb8      	it	lt
 80142a8:	4613      	movlt	r3, r2
 80142aa:	b21a      	sxth	r2, r3
 80142ac:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80142b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80142b4:	428b      	cmp	r3, r1
 80142b6:	bfb8      	it	lt
 80142b8:	460b      	movlt	r3, r1
 80142ba:	b21b      	sxth	r3, r3
 80142bc:	4293      	cmp	r3, r2
 80142be:	bfb8      	it	lt
 80142c0:	4613      	movlt	r3, r2
 80142c2:	b21b      	sxth	r3, r3
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	3302      	adds	r3, #2
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	b21a      	sxth	r2, r3
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 80142d0:	3720      	adds	r7, #32
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
	...

080142d8 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b088      	sub	sp, #32
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	7239      	strb	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
    /*Is the image cached?*/
    _lv_img_cache_entry_t * cached_src = NULL;
 80142e4:	2300      	movs	r3, #0
 80142e6:	61fb      	str	r3, [r7, #28]
    }
    else {
        LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
 80142e8:	4b19      	ldr	r3, [pc, #100]	; (8014350 <_lv_img_cache_open+0x78>)
 80142ea:	61fb      	str	r3, [r7, #28]
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 80142ec:	f00b fddc 	bl	801fea8 <lv_tick_get>
 80142f0:	61b8      	str	r0, [r7, #24]
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 80142f2:	69f8      	ldr	r0, [r7, #28]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	7a3a      	ldrb	r2, [r7, #8]
 80142f8:	68f9      	ldr	r1, [r7, #12]
 80142fa:	f000 f8e9 	bl	80144d0 <lv_img_decoder_open>
 80142fe:	4603      	mov	r3, r0
 8014300:	75fb      	strb	r3, [r7, #23]
    if(open_res == LV_RES_INV) {
 8014302:	7dfb      	ldrb	r3, [r7, #23]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d109      	bne.n	801431c <_lv_img_cache_open+0x44>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 8014308:	212c      	movs	r1, #44	; 0x2c
 801430a:	69f8      	ldr	r0, [r7, #28]
 801430c:	f00e f95e 	bl	80225cc <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 8014310:	69fb      	ldr	r3, [r7, #28]
 8014312:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014316:	629a      	str	r2, [r3, #40]	; 0x28
        return NULL;
 8014318:	2300      	movs	r3, #0
 801431a:	e014      	b.n	8014346 <_lv_img_cache_open+0x6e>
    }

    cached_src->life = 0;
 801431c:	69fb      	ldr	r3, [r7, #28]
 801431e:	2200      	movs	r2, #0
 8014320:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	69db      	ldr	r3, [r3, #28]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d105      	bne.n	8014336 <_lv_img_cache_open+0x5e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 801432a:	69b8      	ldr	r0, [r7, #24]
 801432c:	f00b fdd6 	bl	801fedc <lv_tick_elaps>
 8014330:	4602      	mov	r2, r0
 8014332:	69fb      	ldr	r3, [r7, #28]
 8014334:	61da      	str	r2, [r3, #28]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8014336:	69fb      	ldr	r3, [r7, #28]
 8014338:	69db      	ldr	r3, [r3, #28]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d102      	bne.n	8014344 <_lv_img_cache_open+0x6c>
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	2201      	movs	r2, #1
 8014342:	61da      	str	r2, [r3, #28]

    return cached_src;
 8014344:	69fb      	ldr	r3, [r7, #28]
}
 8014346:	4618      	mov	r0, r3
 8014348:	3720      	adds	r7, #32
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	200008c0 	.word	0x200008c0

08014354 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 801435c:	bf00      	nop
 801435e:	370c      	adds	r7, #12
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr

08014368 <lv_memcpy_small>:
{
 8014368:	b480      	push	{r7}
 801436a:	b087      	sub	sp, #28
 801436c:	af00      	add	r7, sp, #0
 801436e:	60f8      	str	r0, [r7, #12]
 8014370:	60b9      	str	r1, [r7, #8]
 8014372:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	613b      	str	r3, [r7, #16]
    while(len) {
 801437c:	e00c      	b.n	8014398 <lv_memcpy_small+0x30>
        *d8 = *s8;
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	781a      	ldrb	r2, [r3, #0]
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	701a      	strb	r2, [r3, #0]
        d8++;
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	3301      	adds	r3, #1
 801438a:	617b      	str	r3, [r7, #20]
        s8++;
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	3301      	adds	r3, #1
 8014390:	613b      	str	r3, [r7, #16]
        len--;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	3b01      	subs	r3, #1
 8014396:	607b      	str	r3, [r7, #4]
    while(len) {
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d1ef      	bne.n	801437e <lv_memcpy_small+0x16>
    return dst;
 801439e:	68fb      	ldr	r3, [r7, #12]
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	371c      	adds	r7, #28
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <lv_color_make>:
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	4603      	mov	r3, r0
 80143b4:	71fb      	strb	r3, [r7, #7]
 80143b6:	460b      	mov	r3, r1
 80143b8:	71bb      	strb	r3, [r7, #6]
 80143ba:	4613      	mov	r3, r2
 80143bc:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80143be:	797b      	ldrb	r3, [r7, #5]
 80143c0:	09db      	lsrs	r3, r3, #7
 80143c2:	b2da      	uxtb	r2, r3
 80143c4:	79bb      	ldrb	r3, [r7, #6]
 80143c6:	09db      	lsrs	r3, r3, #7
 80143c8:	b2db      	uxtb	r3, r3
 80143ca:	4313      	orrs	r3, r2
 80143cc:	b2da      	uxtb	r2, r3
 80143ce:	79fb      	ldrb	r3, [r7, #7]
 80143d0:	09db      	lsrs	r3, r3, #7
 80143d2:	b2db      	uxtb	r3, r3
 80143d4:	4313      	orrs	r3, r2
 80143d6:	b2db      	uxtb	r3, r3
}
 80143d8:	4618      	mov	r0, r3
 80143da:	370c      	adds	r7, #12
 80143dc:	46bd      	mov	sp, r7
 80143de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e2:	4770      	bx	lr

080143e4 <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 */
void _lv_img_decoder_init(void)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 80143ea:	2114      	movs	r1, #20
 80143ec:	4810      	ldr	r0, [pc, #64]	; (8014430 <_lv_img_decoder_init+0x4c>)
 80143ee:	f00d fa1c 	bl	802182a <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 80143f2:	f000 f96d 	bl	80146d0 <lv_img_decoder_create>
 80143f6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d100      	bne.n	8014400 <_lv_img_decoder_init+0x1c>
 80143fe:	e7fe      	b.n	80143fe <_lv_img_decoder_init+0x1a>
    if(decoder == NULL) {
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d010      	beq.n	8014428 <_lv_img_decoder_init+0x44>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8014406:	490b      	ldr	r1, [pc, #44]	; (8014434 <_lv_img_decoder_init+0x50>)
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f000 f97d 	bl	8014708 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 801440e:	490a      	ldr	r1, [pc, #40]	; (8014438 <_lv_img_decoder_init+0x54>)
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f000 f987 	bl	8014724 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8014416:	4909      	ldr	r1, [pc, #36]	; (801443c <_lv_img_decoder_init+0x58>)
 8014418:	6878      	ldr	r0, [r7, #4]
 801441a:	f000 f991 	bl	8014740 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 801441e:	4908      	ldr	r1, [pc, #32]	; (8014440 <_lv_img_decoder_init+0x5c>)
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f000 f99b 	bl	801475c <lv_img_decoder_set_close_cb>
 8014426:	e000      	b.n	801442a <_lv_img_decoder_init+0x46>
        return;
 8014428:	bf00      	nop
}
 801442a:	3708      	adds	r7, #8
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	200008a4 	.word	0x200008a4
 8014434:	08014779 	.word	0x08014779
 8014438:	080148c9 	.word	0x080148c9
 801443c:	08014b8d 	.word	0x08014b8d
 8014440:	08014cb1 	.word	0x08014cb1

08014444 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const void * src, lv_img_header_t * header)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b086      	sub	sp, #24
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
    lv_memset_00(header, sizeof(lv_img_header_t));
 801444e:	2104      	movs	r1, #4
 8014450:	6838      	ldr	r0, [r7, #0]
 8014452:	f00e f8bb 	bl	80225cc <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d101      	bne.n	8014460 <lv_img_decoder_get_info+0x1c>
 801445c:	2300      	movs	r3, #0
 801445e:	e030      	b.n	80144c2 <lv_img_decoder_get_info+0x7e>

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7fb ff76 	bl	8010352 <lv_img_src_get_type>
 8014466:	4603      	mov	r3, r0
 8014468:	73fb      	strb	r3, [r7, #15]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801446a:	7bfb      	ldrb	r3, [r7, #15]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d107      	bne.n	8014480 <lv_img_decoder_get_info+0x3c>
        const lv_img_dsc_t * img_dsc = src;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	60bb      	str	r3, [r7, #8]
        if(img_dsc->data == NULL) return LV_RES_INV;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	689b      	ldr	r3, [r3, #8]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d101      	bne.n	8014480 <lv_img_decoder_get_info+0x3c>
 801447c:	2300      	movs	r3, #0
 801447e:	e020      	b.n	80144c2 <lv_img_decoder_get_info+0x7e>
    }

    lv_res_t res = LV_RES_INV;
 8014480:	2300      	movs	r3, #0
 8014482:	75fb      	strb	r3, [r7, #23]
    lv_img_decoder_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8014484:	4811      	ldr	r0, [pc, #68]	; (80144cc <lv_img_decoder_get_info+0x88>)
 8014486:	f00d faae 	bl	80219e6 <_lv_ll_get_head>
 801448a:	6138      	str	r0, [r7, #16]
 801448c:	e013      	b.n	80144b6 <lv_img_decoder_get_info+0x72>
        if(d->info_cb) {
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d00a      	beq.n	80144ac <lv_img_decoder_get_info+0x68>
            res = d->info_cb(d, src, header);
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	683a      	ldr	r2, [r7, #0]
 801449c:	6879      	ldr	r1, [r7, #4]
 801449e:	6938      	ldr	r0, [r7, #16]
 80144a0:	4798      	blx	r3
 80144a2:	4603      	mov	r3, r0
 80144a4:	75fb      	strb	r3, [r7, #23]
            if(res == LV_RES_OK) break;
 80144a6:	7dfb      	ldrb	r3, [r7, #23]
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	d008      	beq.n	80144be <lv_img_decoder_get_info+0x7a>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80144ac:	6939      	ldr	r1, [r7, #16]
 80144ae:	4807      	ldr	r0, [pc, #28]	; (80144cc <lv_img_decoder_get_info+0x88>)
 80144b0:	f00d fabb 	bl	8021a2a <_lv_ll_get_next>
 80144b4:	6138      	str	r0, [r7, #16]
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d1e8      	bne.n	801448e <lv_img_decoder_get_info+0x4a>
 80144bc:	e000      	b.n	80144c0 <lv_img_decoder_get_info+0x7c>
            if(res == LV_RES_OK) break;
 80144be:	bf00      	nop
        }
    }

    return res;
 80144c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3718      	adds	r7, #24
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}
 80144ca:	bf00      	nop
 80144cc:	200008a4 	.word	0x200008a4

080144d0 <lv_img_decoder_open>:

lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color, int32_t frame_id)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b08a      	sub	sp, #40	; 0x28
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	60b9      	str	r1, [r7, #8]
 80144da:	713a      	strb	r2, [r7, #4]
 80144dc:	603b      	str	r3, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 80144de:	2128      	movs	r1, #40	; 0x28
 80144e0:	68f8      	ldr	r0, [r7, #12]
 80144e2:	f00e f873 	bl	80225cc <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d101      	bne.n	80144f0 <lv_img_decoder_open+0x20>
 80144ec:	2300      	movs	r3, #0
 80144ee:	e096      	b.n	801461e <lv_img_decoder_open+0x14e>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80144f0:	68b8      	ldr	r0, [r7, #8]
 80144f2:	f7fb ff2e 	bl	8010352 <lv_img_src_get_type>
 80144f6:	4603      	mov	r3, r0
 80144f8:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80144fa:	7ffb      	ldrb	r3, [r7, #31]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d107      	bne.n	8014510 <lv_img_decoder_open+0x40>
        const lv_img_dsc_t * img_dsc = src;
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	61bb      	str	r3, [r7, #24]
        if(img_dsc->data == NULL) return LV_RES_INV;
 8014504:	69bb      	ldr	r3, [r7, #24]
 8014506:	689b      	ldr	r3, [r3, #8]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d101      	bne.n	8014510 <lv_img_decoder_open+0x40>
 801450c:	2300      	movs	r3, #0
 801450e:	e086      	b.n	801461e <lv_img_decoder_open+0x14e>
    }

    dsc->color    = color;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	793a      	ldrb	r2, [r7, #4]
 8014514:	721a      	strb	r2, [r3, #8]
    dsc->src_type = src_type;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	7ffa      	ldrb	r2, [r7, #31]
 801451a:	741a      	strb	r2, [r3, #16]
    dsc->frame_id = frame_id;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	683a      	ldr	r2, [r7, #0]
 8014520:	60da      	str	r2, [r3, #12]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	7c1b      	ldrb	r3, [r3, #16]
 8014526:	2b01      	cmp	r3, #1
 8014528:	d11d      	bne.n	8014566 <lv_img_decoder_open+0x96>
        size_t fnlen = strlen(src);
 801452a:	68b8      	ldr	r0, [r7, #8]
 801452c:	f7eb fe8e 	bl	800024c <strlen>
 8014530:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	3301      	adds	r3, #1
 8014536:	4618      	mov	r0, r3
 8014538:	f00d fc14 	bl	8021d64 <lv_mem_alloc>
 801453c:	4602      	mov	r2, r0
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MALLOC(dsc->src);
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d100      	bne.n	801454c <lv_img_decoder_open+0x7c>
 801454a:	e7fe      	b.n	801454a <lv_img_decoder_open+0x7a>
        if(dsc->src == NULL) {
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d101      	bne.n	8014558 <lv_img_decoder_open+0x88>
            LV_LOG_WARN("lv_img_decoder_open: out of memory");
            return LV_RES_INV;
 8014554:	2300      	movs	r3, #0
 8014556:	e062      	b.n	801461e <lv_img_decoder_open+0x14e>
        }
        strcpy((char *)dsc->src, src);
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	68b9      	ldr	r1, [r7, #8]
 801455e:	4618      	mov	r0, r3
 8014560:	f012 f8ee 	bl	8026740 <strcpy>
 8014564:	e002      	b.n	801456c <lv_img_decoder_open+0x9c>
    }
    else {
        dsc->src = src;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	68ba      	ldr	r2, [r7, #8]
 801456a:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 801456c:	2300      	movs	r3, #0
 801456e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    lv_img_decoder_t * decoder;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8014572:	482d      	ldr	r0, [pc, #180]	; (8014628 <lv_img_decoder_open+0x158>)
 8014574:	f00d fa37 	bl	80219e6 <_lv_ll_get_head>
 8014578:	6238      	str	r0, [r7, #32]
 801457a:	e042      	b.n	8014602 <lv_img_decoder_open+0x132>
        /*Info and Open callbacks are required*/
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 801457c:	6a3b      	ldr	r3, [r7, #32]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d036      	beq.n	80145f2 <lv_img_decoder_open+0x122>
 8014584:	6a3b      	ldr	r3, [r7, #32]
 8014586:	685b      	ldr	r3, [r3, #4]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d032      	beq.n	80145f2 <lv_img_decoder_open+0x122>

        res = decoder->info_cb(decoder, src, &dsc->header);
 801458c:	6a3b      	ldr	r3, [r7, #32]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	68fa      	ldr	r2, [r7, #12]
 8014592:	3214      	adds	r2, #20
 8014594:	68b9      	ldr	r1, [r7, #8]
 8014596:	6a38      	ldr	r0, [r7, #32]
 8014598:	4798      	blx	r3
 801459a:	4603      	mov	r3, r0
 801459c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(res != LV_RES_OK) continue;
 80145a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145a4:	2b01      	cmp	r3, #1
 80145a6:	d126      	bne.n	80145f6 <lv_img_decoder_open+0x126>

        dsc->decoder = decoder;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	6a3a      	ldr	r2, [r7, #32]
 80145ac:	601a      	str	r2, [r3, #0]
        res = decoder->open_cb(decoder, dsc);
 80145ae:	6a3b      	ldr	r3, [r7, #32]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	68f9      	ldr	r1, [r7, #12]
 80145b4:	6a38      	ldr	r0, [r7, #32]
 80145b6:	4798      	blx	r3
 80145b8:	4603      	mov	r3, r0
 80145ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /*Opened successfully. It is a good decoder for this image source*/
        if(res == LV_RES_OK) return res;
 80145be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d102      	bne.n	80145cc <lv_img_decoder_open+0xfc>
 80145c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145ca:	e028      	b.n	801461e <lv_img_decoder_open+0x14e>

        /*Prepare for the next loop*/
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	3314      	adds	r3, #20
 80145d0:	2104      	movs	r1, #4
 80145d2:	4618      	mov	r0, r3
 80145d4:	f00d fffa 	bl	80225cc <lv_memset_00>

        dsc->error_msg = NULL;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2200      	movs	r2, #0
 80145dc:	621a      	str	r2, [r3, #32]
        dsc->img_data  = NULL;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2200      	movs	r2, #0
 80145e2:	619a      	str	r2, [r3, #24]
        dsc->user_data = NULL;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	2200      	movs	r2, #0
 80145e8:	625a      	str	r2, [r3, #36]	; 0x24
        dsc->time_to_open = 0;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2200      	movs	r2, #0
 80145ee:	61da      	str	r2, [r3, #28]
 80145f0:	e002      	b.n	80145f8 <lv_img_decoder_open+0x128>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 80145f2:	bf00      	nop
 80145f4:	e000      	b.n	80145f8 <lv_img_decoder_open+0x128>
        if(res != LV_RES_OK) continue;
 80145f6:	bf00      	nop
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 80145f8:	6a39      	ldr	r1, [r7, #32]
 80145fa:	480b      	ldr	r0, [pc, #44]	; (8014628 <lv_img_decoder_open+0x158>)
 80145fc:	f00d fa15 	bl	8021a2a <_lv_ll_get_next>
 8014600:	6238      	str	r0, [r7, #32]
 8014602:	6a3b      	ldr	r3, [r7, #32]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d1b9      	bne.n	801457c <lv_img_decoder_open+0xac>
    }

    if(dsc->src_type == LV_IMG_SRC_FILE)
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	7c1b      	ldrb	r3, [r3, #16]
 801460c:	2b01      	cmp	r3, #1
 801460e:	d104      	bne.n	801461a <lv_img_decoder_open+0x14a>
        lv_mem_free((void *)dsc->src);
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	4618      	mov	r0, r3
 8014616:	f00d fbd5 	bl	8021dc4 <lv_mem_free>

    return res;
 801461a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801461e:	4618      	mov	r0, r3
 8014620:	3728      	adds	r7, #40	; 0x28
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
 8014626:	bf00      	nop
 8014628:	200008a4 	.word	0x200008a4

0801462c <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 801462c:	b590      	push	{r4, r7, lr}
 801462e:	b089      	sub	sp, #36	; 0x24
 8014630:	af02      	add	r7, sp, #8
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	4608      	mov	r0, r1
 8014636:	4611      	mov	r1, r2
 8014638:	461a      	mov	r2, r3
 801463a:	4603      	mov	r3, r0
 801463c:	817b      	strh	r3, [r7, #10]
 801463e:	460b      	mov	r3, r1
 8014640:	813b      	strh	r3, [r7, #8]
 8014642:	4613      	mov	r3, r2
 8014644:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8014646:	2300      	movs	r3, #0
 8014648:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	689b      	ldr	r3, [r3, #8]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d012      	beq.n	801467a <lv_img_decoder_read_line+0x4e>
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	689c      	ldr	r4, [r3, #8]
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	6818      	ldr	r0, [r3, #0]
 801465e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8014662:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014668:	9301      	str	r3, [sp, #4]
 801466a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	460b      	mov	r3, r1
 8014672:	68f9      	ldr	r1, [r7, #12]
 8014674:	47a0      	blx	r4
 8014676:	4603      	mov	r3, r0
 8014678:	75fb      	strb	r3, [r7, #23]

    return res;
 801467a:	7dfb      	ldrb	r3, [r7, #23]
}
 801467c:	4618      	mov	r0, r3
 801467e:	371c      	adds	r7, #28
 8014680:	46bd      	mov	sp, r7
 8014682:	bd90      	pop	{r4, r7, pc}

08014684 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d018      	beq.n	80146c6 <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	68db      	ldr	r3, [r3, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d007      	beq.n	80146ae <lv_img_decoder_close+0x2a>
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	6812      	ldr	r2, [r2, #0]
 80146a8:	6879      	ldr	r1, [r7, #4]
 80146aa:	4610      	mov	r0, r2
 80146ac:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	7c1b      	ldrb	r3, [r3, #16]
 80146b2:	2b01      	cmp	r3, #1
 80146b4:	d107      	bne.n	80146c6 <lv_img_decoder_close+0x42>
            lv_mem_free((void *)dsc->src);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	685b      	ldr	r3, [r3, #4]
 80146ba:	4618      	mov	r0, r3
 80146bc:	f00d fb82 	bl	8021dc4 <lv_mem_free>
            dsc->src = NULL;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2200      	movs	r2, #0
 80146c4:	605a      	str	r2, [r3, #4]
        }
    }
}
 80146c6:	bf00      	nop
 80146c8:	3708      	adds	r7, #8
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
	...

080146d0 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b082      	sub	sp, #8
 80146d4:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 80146d6:	480b      	ldr	r0, [pc, #44]	; (8014704 <lv_img_decoder_create+0x34>)
 80146d8:	f00d f8c0 	bl	802185c <_lv_ll_ins_head>
 80146dc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d100      	bne.n	80146e6 <lv_img_decoder_create+0x16>
 80146e4:	e7fe      	b.n	80146e4 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d101      	bne.n	80146f0 <lv_img_decoder_create+0x20>
 80146ec:	2300      	movs	r3, #0
 80146ee:	e004      	b.n	80146fa <lv_img_decoder_create+0x2a>

    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80146f0:	2114      	movs	r1, #20
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f00d ff6a 	bl	80225cc <lv_memset_00>

    return decoder;
 80146f8:	687b      	ldr	r3, [r7, #4]
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3708      	adds	r7, #8
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}
 8014702:	bf00      	nop
 8014704:	200008a4 	.word	0x200008a4

08014708 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8014708:	b480      	push	{r7}
 801470a:	b083      	sub	sp, #12
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	683a      	ldr	r2, [r7, #0]
 8014716:	601a      	str	r2, [r3, #0]
}
 8014718:	bf00      	nop
 801471a:	370c      	adds	r7, #12
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr

08014724 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8014724:	b480      	push	{r7}
 8014726:	b083      	sub	sp, #12
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	683a      	ldr	r2, [r7, #0]
 8014732:	605a      	str	r2, [r3, #4]
}
 8014734:	bf00      	nop
 8014736:	370c      	adds	r7, #12
 8014738:	46bd      	mov	sp, r7
 801473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473e:	4770      	bx	lr

08014740 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	683a      	ldr	r2, [r7, #0]
 801474e:	609a      	str	r2, [r3, #8]
}
 8014750:	bf00      	nop
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr

0801475c <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	683a      	ldr	r2, [r7, #0]
 801476a:	60da      	str	r2, [r3, #12]
}
 801476c:	bf00      	nop
 801476e:	370c      	adds	r7, #12
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr

08014778 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b08a      	sub	sp, #40	; 0x28
 801477c:	af00      	add	r7, sp, #0
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	607a      	str	r2, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8014784:	68b8      	ldr	r0, [r7, #8]
 8014786:	f7fb fde4 	bl	8010352 <lv_img_src_get_type>
 801478a:	4603      	mov	r3, r0
 801478c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8014790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014794:	2b00      	cmp	r3, #0
 8014796:	d12f      	bne.n	80147f8 <lv_img_decoder_built_in_info+0x80>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80147a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80147aa:	2b03      	cmp	r3, #3
 80147ac:	d903      	bls.n	80147b6 <lv_img_decoder_built_in_info+0x3e>
 80147ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80147b2:	2b14      	cmp	r3, #20
 80147b4:	d901      	bls.n	80147ba <lv_img_decoder_built_in_info+0x42>
 80147b6:	2300      	movs	r3, #0
 80147b8:	e080      	b.n	80148bc <lv_img_decoder_built_in_info+0x144>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80147c2:	b299      	uxth	r1, r3
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	6813      	ldr	r3, [r2, #0]
 80147c8:	f361 2394 	bfi	r3, r1, #10, #11
 80147cc:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	885b      	ldrh	r3, [r3, #2]
 80147d2:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80147d6:	b299      	uxth	r1, r3
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	8853      	ldrh	r3, [r2, #2]
 80147dc:	f361 134f 	bfi	r3, r1, #5, #11
 80147e0:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80147ea:	b2d9      	uxtb	r1, r3
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	7813      	ldrb	r3, [r2, #0]
 80147f0:	f361 0304 	bfi	r3, r1, #0, #5
 80147f4:	7013      	strb	r3, [r2, #0]
 80147f6:	e060      	b.n	80148ba <lv_img_decoder_built_in_info+0x142>
    }
    else if(src_type == LV_IMG_SRC_FILE) {
 80147f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d143      	bne.n	8014888 <lv_img_decoder_built_in_info+0x110>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8014800:	68b8      	ldr	r0, [r7, #8]
 8014802:	f00c ffcd 	bl	80217a0 <lv_fs_get_ext>
 8014806:	4603      	mov	r3, r0
 8014808:	492e      	ldr	r1, [pc, #184]	; (80148c4 <lv_img_decoder_built_in_info+0x14c>)
 801480a:	4618      	mov	r0, r3
 801480c:	f7eb fd14 	bl	8000238 <strcmp>
 8014810:	4603      	mov	r3, r0
 8014812:	2b00      	cmp	r3, #0
 8014814:	d001      	beq.n	801481a <lv_img_decoder_built_in_info+0xa2>
 8014816:	2300      	movs	r3, #0
 8014818:	e050      	b.n	80148bc <lv_img_decoder_built_in_info+0x144>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 801481a:	f107 0318 	add.w	r3, r7, #24
 801481e:	2202      	movs	r2, #2
 8014820:	68b9      	ldr	r1, [r7, #8]
 8014822:	4618      	mov	r0, r3
 8014824:	f00c fcec 	bl	8021200 <lv_fs_open>
 8014828:	4603      	mov	r3, r0
 801482a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if(res == LV_FS_RES_OK) {
 801482e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014832:	2b00      	cmp	r3, #0
 8014834:	d118      	bne.n	8014868 <lv_img_decoder_built_in_info+0xf0>
            uint32_t rn;
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8014836:	f107 0314 	add.w	r3, r7, #20
 801483a:	f107 0018 	add.w	r0, r7, #24
 801483e:	2204      	movs	r2, #4
 8014840:	6879      	ldr	r1, [r7, #4]
 8014842:	f00c fe9b 	bl	802157c <lv_fs_read>
 8014846:	4603      	mov	r3, r0
 8014848:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            lv_fs_close(&f);
 801484c:	f107 0318 	add.w	r3, r7, #24
 8014850:	4618      	mov	r0, r3
 8014852:	f00c fd42 	bl	80212da <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8014856:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801485a:	2b00      	cmp	r3, #0
 801485c:	d102      	bne.n	8014864 <lv_img_decoder_built_in_info+0xec>
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	2b04      	cmp	r3, #4
 8014862:	d001      	beq.n	8014868 <lv_img_decoder_built_in_info+0xf0>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 8014864:	2300      	movs	r3, #0
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8014866:	e029      	b.n	80148bc <lv_img_decoder_built_in_info+0x144>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014870:	b2db      	uxtb	r3, r3
 8014872:	2b03      	cmp	r3, #3
 8014874:	d906      	bls.n	8014884 <lv_img_decoder_built_in_info+0x10c>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801487e:	b2db      	uxtb	r3, r3
 8014880:	2b14      	cmp	r3, #20
 8014882:	d91a      	bls.n	80148ba <lv_img_decoder_built_in_info+0x142>
 8014884:	2300      	movs	r3, #0
 8014886:	e019      	b.n	80148bc <lv_img_decoder_built_in_info+0x144>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8014888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801488c:	2b02      	cmp	r3, #2
 801488e:	d112      	bne.n	80148b6 <lv_img_decoder_built_in_info+0x13e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         *function*/
        header->w = 1;
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	6813      	ldr	r3, [r2, #0]
 8014894:	2101      	movs	r1, #1
 8014896:	f361 2394 	bfi	r3, r1, #10, #11
 801489a:	6013      	str	r3, [r2, #0]
        header->h = 1;
 801489c:	687a      	ldr	r2, [r7, #4]
 801489e:	8853      	ldrh	r3, [r2, #2]
 80148a0:	2101      	movs	r1, #1
 80148a2:	f361 134f 	bfi	r3, r1, #5, #11
 80148a6:	8053      	strh	r3, [r2, #2]
        /*Symbols always have transparent parts. Important because of cover check in the draw
         *function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 80148a8:	687a      	ldr	r2, [r7, #4]
 80148aa:	7813      	ldrb	r3, [r2, #0]
 80148ac:	210b      	movs	r1, #11
 80148ae:	f361 0304 	bfi	r3, r1, #0, #5
 80148b2:	7013      	strb	r3, [r2, #0]
 80148b4:	e001      	b.n	80148ba <lv_img_decoder_built_in_info+0x142>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 80148b6:	2300      	movs	r3, #0
 80148b8:	e000      	b.n	80148bc <lv_img_decoder_built_in_info+0x144>
    }
    return LV_RES_OK;
 80148ba:	2301      	movs	r3, #1
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3728      	adds	r7, #40	; 0x28
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}
 80148c4:	0802677c 	.word	0x0802677c

080148c8 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `color` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80148c8:	b5b0      	push	{r4, r5, r7, lr}
 80148ca:	b08e      	sub	sp, #56	; 0x38
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
 80148d0:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	7c1b      	ldrb	r3, [r3, #16]
 80148d6:	2b01      	cmp	r3, #1
 80148d8:	d14a      	bne.n	8014970 <lv_img_decoder_built_in_open+0xa8>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	4618      	mov	r0, r3
 80148e0:	f00c ff5e 	bl	80217a0 <lv_fs_get_ext>
 80148e4:	4603      	mov	r3, r0
 80148e6:	499c      	ldr	r1, [pc, #624]	; (8014b58 <lv_img_decoder_built_in_open+0x290>)
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7eb fca5 	bl	8000238 <strcmp>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d001      	beq.n	80148f8 <lv_img_decoder_built_in_open+0x30>
 80148f4:	2300      	movs	r3, #0
 80148f6:	e144      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	6859      	ldr	r1, [r3, #4]
 80148fc:	f107 030c 	add.w	r3, r7, #12
 8014900:	2202      	movs	r2, #2
 8014902:	4618      	mov	r0, r3
 8014904:	f00c fc7c 	bl	8021200 <lv_fs_open>
 8014908:	4603      	mov	r3, r0
 801490a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 801490e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014912:	2b00      	cmp	r3, #0
 8014914:	d001      	beq.n	801491a <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 8014916:	2300      	movs	r3, #0
 8014918:	e133      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 801491a:	683b      	ldr	r3, [r7, #0]
 801491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801491e:	2b00      	cmp	r3, #0
 8014920:	d11b      	bne.n	801495a <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8014922:	2014      	movs	r0, #20
 8014924:	f00d fa1e 	bl	8021d64 <lv_mem_alloc>
 8014928:	4602      	mov	r2, r0
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014932:	2b00      	cmp	r3, #0
 8014934:	d100      	bne.n	8014938 <lv_img_decoder_built_in_open+0x70>
 8014936:	e7fe      	b.n	8014936 <lv_img_decoder_built_in_open+0x6e>
            if(dsc->user_data == NULL) {
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801493c:	2b00      	cmp	r3, #0
 801493e:	d106      	bne.n	801494e <lv_img_decoder_built_in_open+0x86>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_fs_close(&f);
 8014940:	f107 030c 	add.w	r3, r7, #12
 8014944:	4618      	mov	r0, r3
 8014946:	f00c fcc8 	bl	80212da <lv_fs_close>
                return LV_RES_INV;
 801494a:	2300      	movs	r3, #0
 801494c:	e119      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014952:	2114      	movs	r1, #20
 8014954:	4618      	mov	r0, r3
 8014956:	f00d fe39 	bl	80225cc <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801495e:	62bb      	str	r3, [r7, #40]	; 0x28
        lv_memcpy_small(&user_data->f, &f, sizeof(f));
 8014960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014962:	f107 010c 	add.w	r1, r7, #12
 8014966:	220c      	movs	r2, #12
 8014968:	4618      	mov	r0, r3
 801496a:	f7ff fcfd 	bl	8014368 <lv_memcpy_small>
 801496e:	e00a      	b.n	8014986 <lv_img_decoder_built_in_open+0xbe>
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	7c1b      	ldrb	r3, [r3, #16]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d106      	bne.n	8014986 <lv_img_decoder_built_in_open+0xbe>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	689b      	ldr	r3, [r3, #8]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d101      	bne.n	8014986 <lv_img_decoder_built_in_open+0xbe>
            return LV_RES_INV;
 8014982:	2300      	movs	r3, #0
 8014984:	e0fd      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	7d1b      	ldrb	r3, [r3, #20]
 801498a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801498e:	b2db      	uxtb	r3, r3
 8014990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014998:	2b04      	cmp	r3, #4
 801499a:	d00f      	beq.n	80149bc <lv_img_decoder_built_in_open+0xf4>
 801499c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149a0:	2b05      	cmp	r3, #5
 80149a2:	d00b      	beq.n	80149bc <lv_img_decoder_built_in_open+0xf4>
 80149a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149a8:	2b06      	cmp	r3, #6
 80149aa:	d007      	beq.n	80149bc <lv_img_decoder_built_in_open+0xf4>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 80149ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149b0:	2b14      	cmp	r3, #20
 80149b2:	d003      	beq.n	80149bc <lv_img_decoder_built_in_open+0xf4>
 80149b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149b8:	2b0e      	cmp	r3, #14
 80149ba:	d10c      	bne.n	80149d6 <lv_img_decoder_built_in_open+0x10e>
       cf == LV_IMG_CF_ALPHA_8BIT) {
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	7c1b      	ldrb	r3, [r3, #16]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d106      	bne.n	80149d2 <lv_img_decoder_built_in_open+0x10a>
            /*In case of uncompressed formats the image stored in the ROM/RAM.
             *So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	689a      	ldr	r2, [r3, #8]
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	619a      	str	r2, [r3, #24]
            return LV_RES_OK;
 80149ce:	2301      	movs	r3, #1
 80149d0:	e0d7      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            return LV_RES_OK;
 80149d2:	2301      	movs	r3, #1
 80149d4:	e0d5      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80149d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149da:	2b07      	cmp	r3, #7
 80149dc:	d00c      	beq.n	80149f8 <lv_img_decoder_built_in_open+0x130>
 80149de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149e2:	2b08      	cmp	r3, #8
 80149e4:	d008      	beq.n	80149f8 <lv_img_decoder_built_in_open+0x130>
 80149e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149ea:	2b09      	cmp	r3, #9
 80149ec:	d004      	beq.n	80149f8 <lv_img_decoder_built_in_open+0x130>
 80149ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149f2:	2b0a      	cmp	r3, #10
 80149f4:	f040 80b2 	bne.w	8014b5c <lv_img_decoder_built_in_open+0x294>
            cf == LV_IMG_CF_INDEXED_8BIT) {
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 80149f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7fb fc1b 	bl	8010238 <lv_img_cf_get_px_size>
 8014a02:	4603      	mov	r3, r0
 8014a04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 8014a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8014a12:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d116      	bne.n	8014a4a <lv_img_decoder_built_in_open+0x182>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8014a1c:	2014      	movs	r0, #20
 8014a1e:	f00d f9a1 	bl	8021d64 <lv_mem_alloc>
 8014a22:	4602      	mov	r2, r0
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d100      	bne.n	8014a32 <lv_img_decoder_built_in_open+0x16a>
 8014a30:	e7fe      	b.n	8014a30 <lv_img_decoder_built_in_open+0x168>
            if(dsc->user_data == NULL) {
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d101      	bne.n	8014a3e <lv_img_decoder_built_in_open+0x176>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	e0a1      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a42:	2114      	movs	r1, #20
 8014a44:	4618      	mov	r0, r3
 8014a46:	f00d fdc1 	bl	80225cc <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a4e:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8014a50:	6a38      	ldr	r0, [r7, #32]
 8014a52:	f00d f987 	bl	8021d64 <lv_mem_alloc>
 8014a56:	4602      	mov	r2, r0
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	60da      	str	r2, [r3, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	68db      	ldr	r3, [r3, #12]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d100      	bne.n	8014a66 <lv_img_decoder_built_in_open+0x19e>
 8014a64:	e7fe      	b.n	8014a64 <lv_img_decoder_built_in_open+0x19c>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8014a66:	6a38      	ldr	r0, [r7, #32]
 8014a68:	f00d f97c 	bl	8021d64 <lv_mem_alloc>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	69fb      	ldr	r3, [r7, #28]
 8014a70:	611a      	str	r2, [r3, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8014a72:	69fb      	ldr	r3, [r7, #28]
 8014a74:	691b      	ldr	r3, [r3, #16]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d100      	bne.n	8014a7c <lv_img_decoder_built_in_open+0x1b4>
 8014a7a:	e7fe      	b.n	8014a7a <lv_img_decoder_built_in_open+0x1b2>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d003      	beq.n	8014a8c <lv_img_decoder_built_in_open+0x1c4>
 8014a84:	69fb      	ldr	r3, [r7, #28]
 8014a86:	691b      	ldr	r3, [r3, #16]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d105      	bne.n	8014a98 <lv_img_decoder_built_in_open+0x1d0>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8014a8c:	6839      	ldr	r1, [r7, #0]
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f000 f90e 	bl	8014cb0 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8014a94:	2300      	movs	r3, #0
 8014a96:	e074      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	7c1b      	ldrb	r3, [r3, #16]
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d129      	bne.n	8014af4 <lv_img_decoder_built_in_open+0x22c>
            /*Read the palette from file*/
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8014aa0:	69fb      	ldr	r3, [r7, #28]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	2104      	movs	r1, #4
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f00c fdad 	bl	8021606 <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8014aac:	2300      	movs	r3, #0
 8014aae:	637b      	str	r3, [r7, #52]	; 0x34
 8014ab0:	e01b      	b.n	8014aea <lv_img_decoder_built_in_open+0x222>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8014ab2:	69f8      	ldr	r0, [r7, #28]
 8014ab4:	f107 0108 	add.w	r1, r7, #8
 8014ab8:	2300      	movs	r3, #0
 8014aba:	2204      	movs	r2, #4
 8014abc:	f00c fd5e 	bl	802157c <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8014ac0:	7ab8      	ldrb	r0, [r7, #10]
 8014ac2:	7a79      	ldrb	r1, [r7, #9]
 8014ac4:	7a3d      	ldrb	r5, [r7, #8]
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	68da      	ldr	r2, [r3, #12]
 8014aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014acc:	18d4      	adds	r4, r2, r3
 8014ace:	462a      	mov	r2, r5
 8014ad0:	f7ff fc6c 	bl	80143ac <lv_color_make>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	691a      	ldr	r2, [r3, #16]
 8014adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ade:	4413      	add	r3, r2
 8014ae0:	7afa      	ldrb	r2, [r7, #11]
 8014ae2:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8014ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8014aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014aec:	6a3b      	ldr	r3, [r7, #32]
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d3df      	bcc.n	8014ab2 <lv_img_decoder_built_in_open+0x1ea>
 8014af2:	e02f      	b.n	8014b54 <lv_img_decoder_built_in_open+0x28c>
            }
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	689b      	ldr	r3, [r3, #8]
 8014afa:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8014afc:	2300      	movs	r3, #0
 8014afe:	633b      	str	r3, [r7, #48]	; 0x30
 8014b00:	e024      	b.n	8014b4c <lv_img_decoder_built_in_open+0x284>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8014b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	69ba      	ldr	r2, [r7, #24]
 8014b08:	4413      	add	r3, r2
 8014b0a:	7898      	ldrb	r0, [r3, #2]
 8014b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b0e:	009b      	lsls	r3, r3, #2
 8014b10:	69ba      	ldr	r2, [r7, #24]
 8014b12:	4413      	add	r3, r2
 8014b14:	7859      	ldrb	r1, [r3, #1]
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	009b      	lsls	r3, r3, #2
 8014b1a:	69ba      	ldr	r2, [r7, #24]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	781d      	ldrb	r5, [r3, #0]
 8014b20:	69fb      	ldr	r3, [r7, #28]
 8014b22:	68da      	ldr	r2, [r3, #12]
 8014b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b26:	18d4      	adds	r4, r2, r3
 8014b28:	462a      	mov	r2, r5
 8014b2a:	f7ff fc3f 	bl	80143ac <lv_color_make>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8014b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b34:	009b      	lsls	r3, r3, #2
 8014b36:	69ba      	ldr	r2, [r7, #24]
 8014b38:	441a      	add	r2, r3
 8014b3a:	69fb      	ldr	r3, [r7, #28]
 8014b3c:	6919      	ldr	r1, [r3, #16]
 8014b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b40:	440b      	add	r3, r1
 8014b42:	78d2      	ldrb	r2, [r2, #3]
 8014b44:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8014b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b48:	3301      	adds	r3, #1
 8014b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8014b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b4e:	6a3b      	ldr	r3, [r7, #32]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d3d6      	bcc.n	8014b02 <lv_img_decoder_built_in_open+0x23a>
            }
        }

        return LV_RES_OK;
 8014b54:	2301      	movs	r3, #1
 8014b56:	e014      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
 8014b58:	0802677c 	.word	0x0802677c
    }
    /*Alpha indexed images.*/
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 8014b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b60:	2b0b      	cmp	r3, #11
 8014b62:	d007      	beq.n	8014b74 <lv_img_decoder_built_in_open+0x2ac>
 8014b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b68:	2b0c      	cmp	r3, #12
 8014b6a:	d003      	beq.n	8014b74 <lv_img_decoder_built_in_open+0x2ac>
 8014b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b70:	2b0d      	cmp	r3, #13
 8014b72:	d101      	bne.n	8014b78 <lv_img_decoder_built_in_open+0x2b0>
        return LV_RES_OK; /*Nothing to process*/
 8014b74:	2301      	movs	r3, #1
 8014b76:	e004      	b.n	8014b82 <lv_img_decoder_built_in_open+0x2ba>
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8014b78:	6839      	ldr	r1, [r7, #0]
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 f898 	bl	8014cb0 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format");
        return LV_RES_INV;
 8014b80:	2300      	movs	r3, #0
    }
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3738      	adds	r7, #56	; 0x38
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bdb0      	pop	{r4, r5, r7, pc}
 8014b8a:	bf00      	nop

08014b8c <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b088      	sub	sp, #32
 8014b90:	af02      	add	r7, sp, #8
 8014b92:	60f8      	str	r0, [r7, #12]
 8014b94:	60b9      	str	r1, [r7, #8]
 8014b96:	4611      	mov	r1, r2
 8014b98:	461a      	mov	r2, r3
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	80fb      	strh	r3, [r7, #6]
 8014b9e:	4613      	mov	r3, r2
 8014ba0:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_res_t res = LV_RES_INV;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	7d1b      	ldrb	r3, [r3, #20]
 8014baa:	f003 031f 	and.w	r3, r3, #31
 8014bae:	b2db      	uxtb	r3, r3
 8014bb0:	2b04      	cmp	r3, #4
 8014bb2:	d00d      	beq.n	8014bd0 <lv_img_decoder_built_in_read_line+0x44>
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	7d1b      	ldrb	r3, [r3, #20]
 8014bb8:	f003 031f 	and.w	r3, r3, #31
 8014bbc:	b2db      	uxtb	r3, r3
 8014bbe:	2b05      	cmp	r3, #5
 8014bc0:	d006      	beq.n	8014bd0 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	7d1b      	ldrb	r3, [r3, #20]
 8014bc6:	f003 031f 	and.w	r3, r3, #31
 8014bca:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014bcc:	2b06      	cmp	r3, #6
 8014bce:	d112      	bne.n	8014bf6 <lv_img_decoder_built_in_read_line+0x6a>
        /*For TRUE_COLOR images read line required only for files.
         *For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	7c1b      	ldrb	r3, [r3, #16]
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d166      	bne.n	8014ca6 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8014bd8:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014bdc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014be0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	4603      	mov	r3, r0
 8014bea:	68b8      	ldr	r0, [r7, #8]
 8014bec:	f000 f88f 	bl	8014d0e <lv_img_decoder_built_in_line_true_color>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014bf4:	e057      	b.n	8014ca6 <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	7d1b      	ldrb	r3, [r3, #20]
 8014bfa:	f003 031f 	and.w	r3, r3, #31
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	2b0b      	cmp	r3, #11
 8014c02:	d014      	beq.n	8014c2e <lv_img_decoder_built_in_read_line+0xa2>
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	7d1b      	ldrb	r3, [r3, #20]
 8014c08:	f003 031f 	and.w	r3, r3, #31
 8014c0c:	b2db      	uxtb	r3, r3
 8014c0e:	2b0c      	cmp	r3, #12
 8014c10:	d00d      	beq.n	8014c2e <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	7d1b      	ldrb	r3, [r3, #20]
 8014c16:	f003 031f 	and.w	r3, r3, #31
 8014c1a:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8014c1c:	2b0d      	cmp	r3, #13
 8014c1e:	d006      	beq.n	8014c2e <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	7d1b      	ldrb	r3, [r3, #20]
 8014c24:	f003 031f 	and.w	r3, r3, #31
 8014c28:	b2db      	uxtb	r3, r3
 8014c2a:	2b0e      	cmp	r3, #14
 8014c2c:	d10e      	bne.n	8014c4c <lv_img_decoder_built_in_read_line+0xc0>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8014c2e:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014c32:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014c36:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3c:	9300      	str	r3, [sp, #0]
 8014c3e:	4603      	mov	r3, r0
 8014c40:	68b8      	ldr	r0, [r7, #8]
 8014c42:	f000 f8c3 	bl	8014dcc <lv_img_decoder_built_in_line_alpha>
 8014c46:	4603      	mov	r3, r0
 8014c48:	75fb      	strb	r3, [r7, #23]
 8014c4a:	e02c      	b.n	8014ca6 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	7d1b      	ldrb	r3, [r3, #20]
 8014c50:	f003 031f 	and.w	r3, r3, #31
 8014c54:	b2db      	uxtb	r3, r3
 8014c56:	2b07      	cmp	r3, #7
 8014c58:	d014      	beq.n	8014c84 <lv_img_decoder_built_in_read_line+0xf8>
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	7d1b      	ldrb	r3, [r3, #20]
 8014c5e:	f003 031f 	and.w	r3, r3, #31
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	2b08      	cmp	r3, #8
 8014c66:	d00d      	beq.n	8014c84 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	7d1b      	ldrb	r3, [r3, #20]
 8014c6c:	f003 031f 	and.w	r3, r3, #31
 8014c70:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8014c72:	2b09      	cmp	r3, #9
 8014c74:	d006      	beq.n	8014c84 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	7d1b      	ldrb	r3, [r3, #20]
 8014c7a:	f003 031f 	and.w	r3, r3, #31
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	2b0a      	cmp	r3, #10
 8014c82:	d10e      	bne.n	8014ca2 <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8014c84:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014c88:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014c8c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c92:	9300      	str	r3, [sp, #0]
 8014c94:	4603      	mov	r3, r0
 8014c96:	68b8      	ldr	r0, [r7, #8]
 8014c98:	f000 fa0a 	bl	80150b0 <lv_img_decoder_built_in_line_indexed>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	75fb      	strb	r3, [r7, #23]
 8014ca0:	e001      	b.n	8014ca6 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	e000      	b.n	8014ca8 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8014ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3718      	adds	r7, #24
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b084      	sub	sp, #16
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cbe:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d01f      	beq.n	8014d06 <lv_img_decoder_built_in_close+0x56>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	7c1b      	ldrb	r3, [r3, #16]
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d103      	bne.n	8014cd6 <lv_img_decoder_built_in_close+0x26>
            lv_fs_close(&user_data->f);
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f00c fb02 	bl	80212da <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	68db      	ldr	r3, [r3, #12]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d004      	beq.n	8014ce8 <lv_img_decoder_built_in_close+0x38>
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f00d f86e 	bl	8021dc4 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	691b      	ldr	r3, [r3, #16]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d004      	beq.n	8014cfa <lv_img_decoder_built_in_close+0x4a>
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	691b      	ldr	r3, [r3, #16]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f00d f865 	bl	8021dc4 <lv_mem_free>

        lv_mem_free(user_data);
 8014cfa:	68f8      	ldr	r0, [r7, #12]
 8014cfc:	f00d f862 	bl	8021dc4 <lv_mem_free>
        dsc->user_data = NULL;
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	2200      	movs	r2, #0
 8014d04:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8014d06:	bf00      	nop
 8014d08:	3710      	adds	r7, #16
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}

08014d0e <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8014d0e:	b580      	push	{r7, lr}
 8014d10:	b08a      	sub	sp, #40	; 0x28
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	60f8      	str	r0, [r7, #12]
 8014d16:	4608      	mov	r0, r1
 8014d18:	4611      	mov	r1, r2
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	817b      	strh	r3, [r7, #10]
 8014d20:	460b      	mov	r3, r1
 8014d22:	813b      	strh	r3, [r7, #8]
 8014d24:	4613      	mov	r3, r2
 8014d26:	80fb      	strh	r3, [r7, #6]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d2c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	7d1b      	ldrb	r3, [r3, #20]
 8014d32:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7fb fa7d 	bl	8010238 <lv_img_cf_get_px_size>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8014d44:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014d48:	68fa      	ldr	r2, [r7, #12]
 8014d4a:	6952      	ldr	r2, [r2, #20]
 8014d4c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8014d50:	b292      	uxth	r2, r2
 8014d52:	fb03 f202 	mul.w	r2, r3, r2
 8014d56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014d60:	fb02 f303 	mul.w	r3, r2, r3
 8014d64:	10db      	asrs	r3, r3, #3
 8014d66:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8014d68:	69fb      	ldr	r3, [r7, #28]
 8014d6a:	3304      	adds	r3, #4
 8014d6c:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d70:	2200      	movs	r2, #0
 8014d72:	69f9      	ldr	r1, [r7, #28]
 8014d74:	4618      	mov	r0, r3
 8014d76:	f00c fc46 	bl	8021606 <lv_fs_seek>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8014d7e:	7efb      	ldrb	r3, [r7, #27]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d001      	beq.n	8014d88 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8014d84:	2300      	movs	r3, #0
 8014d86:	e01d      	b.n	8014dc4 <lv_img_decoder_built_in_line_true_color+0xb6>
    }
    uint32_t btr = len * (px_size >> 3);
 8014d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014d90:	08d2      	lsrs	r2, r2, #3
 8014d92:	b2d2      	uxtb	r2, r2
 8014d94:	fb02 f303 	mul.w	r3, r2, r3
 8014d98:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8014d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014da0:	f107 0310 	add.w	r3, r7, #16
 8014da4:	697a      	ldr	r2, [r7, #20]
 8014da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014da8:	f00c fbe8 	bl	802157c <lv_fs_read>
 8014dac:	4603      	mov	r3, r0
 8014dae:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 8014db0:	7efb      	ldrb	r3, [r7, #27]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d103      	bne.n	8014dbe <lv_img_decoder_built_in_line_true_color+0xb0>
 8014db6:	693b      	ldr	r3, [r7, #16]
 8014db8:	697a      	ldr	r2, [r7, #20]
 8014dba:	429a      	cmp	r2, r3
 8014dbc:	d001      	beq.n	8014dc2 <lv_img_decoder_built_in_line_true_color+0xb4>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	e000      	b.n	8014dc4 <lv_img_decoder_built_in_line_true_color+0xb6>
    }

    return LV_RES_OK;
 8014dc2:	2301      	movs	r3, #1
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3728      	adds	r7, #40	; 0x28
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8014dcc:	b590      	push	{r4, r7, lr}
 8014dce:	b097      	sub	sp, #92	; 0x5c
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	60f8      	str	r0, [r7, #12]
 8014dd4:	4608      	mov	r0, r1
 8014dd6:	4611      	mov	r1, r2
 8014dd8:	461a      	mov	r2, r3
 8014dda:	4603      	mov	r3, r0
 8014ddc:	817b      	strh	r3, [r7, #10]
 8014dde:	460b      	mov	r3, r1
 8014de0:	813b      	strh	r3, [r7, #8]
 8014de2:	4613      	mov	r3, r2
 8014de4:	80fb      	strh	r3, [r7, #6]
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8014de6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8014dea:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8014dec:	4bae      	ldr	r3, [pc, #696]	; (80150a8 <lv_img_decoder_built_in_line_alpha+0x2dc>)
 8014dee:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8014df0:	4bae      	ldr	r3, [pc, #696]	; (80150ac <lv_img_decoder_built_in_line_alpha+0x2e0>)
 8014df2:	f107 0418 	add.w	r4, r7, #24
 8014df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	7a1b      	ldrb	r3, [r3, #8]
 8014e00:	753b      	strb	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8014e02:	2300      	movs	r3, #0
 8014e04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8014e08:	e00e      	b.n	8014e28 <lv_img_decoder_built_in_line_alpha+0x5c>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
 8014e0a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8014e0e:	005b      	lsls	r3, r3, #1
 8014e10:	461a      	mov	r2, r3
 8014e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014e14:	4413      	add	r3, r2
 8014e16:	7d3a      	ldrb	r2, [r7, #20]
 8014e18:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8014e1a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	3301      	adds	r3, #1
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8014e28:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8014e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	dbea      	blt.n	8014e0a <lv_img_decoder_built_in_line_alpha+0x3e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8014e34:	2300      	movs	r3, #0
 8014e36:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	7d1b      	ldrb	r3, [r3, #20]
 8014e3c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7fb f9f8 	bl	8010238 <lv_img_cf_get_px_size>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8014e4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014e52:	2201      	movs	r2, #1
 8014e54:	fa02 f303 	lsl.w	r3, r2, r3
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	3b01      	subs	r3, #1
 8014e5c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 8014e64:	2300      	movs	r3, #0
 8014e66:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	7d1b      	ldrb	r3, [r3, #20]
 8014e72:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014e76:	b2db      	uxtb	r3, r3
 8014e78:	3b0b      	subs	r3, #11
 8014e7a:	2b03      	cmp	r3, #3
 8014e7c:	f200 8094 	bhi.w	8014fa8 <lv_img_decoder_built_in_line_alpha+0x1dc>
 8014e80:	a201      	add	r2, pc, #4	; (adr r2, 8014e88 <lv_img_decoder_built_in_line_alpha+0xbc>)
 8014e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e86:	bf00      	nop
 8014e88:	08014e99 	.word	0x08014e99
 8014e8c:	08014ee1 	.word	0x08014ee1
 8014e90:	08014f2d 	.word	0x08014f2d
 8014e94:	08014f79 	.word	0x08014f79
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	695b      	ldr	r3, [r3, #20]
 8014e9c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014ea0:	b29b      	uxth	r3, r3
 8014ea2:	3307      	adds	r3, #7
 8014ea4:	10db      	asrs	r3, r3, #3
 8014ea6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 8014eaa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014eae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014eb2:	fb02 f303 	mul.w	r3, r2, r3
 8014eb6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014eba:	10d2      	asrs	r2, r2, #3
 8014ebc:	b212      	sxth	r2, r2
 8014ebe:	4413      	add	r3, r2
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ec4:	4413      	add	r3, r2
 8014ec6:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 7 - (x & 0x7);
 8014ec8:	897b      	ldrh	r3, [r7, #10]
 8014eca:	b25b      	sxtb	r3, r3
 8014ecc:	43db      	mvns	r3, r3
 8014ece:	b25b      	sxtb	r3, r3
 8014ed0:	f003 0307 	and.w	r3, r3, #7
 8014ed4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 8014ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014edc:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8014ede:	e063      	b.n	8014fa8 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	695b      	ldr	r3, [r3, #20]
 8014ee4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014ee8:	b29b      	uxth	r3, r3
 8014eea:	3303      	adds	r3, #3
 8014eec:	109b      	asrs	r3, r3, #2
 8014eee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 8014ef2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014ef6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014efa:	fb02 f303 	mul.w	r3, r2, r3
 8014efe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014f02:	1092      	asrs	r2, r2, #2
 8014f04:	b212      	sxth	r2, r2
 8014f06:	4413      	add	r3, r2
 8014f08:	461a      	mov	r2, r3
 8014f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f0c:	4413      	add	r3, r2
 8014f0e:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 6 - (x & 0x3) * 2;
 8014f10:	897b      	ldrh	r3, [r7, #10]
 8014f12:	43db      	mvns	r3, r3
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	f003 0303 	and.w	r3, r3, #3
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	005b      	lsls	r3, r3, #1
 8014f1e:	b2db      	uxtb	r3, r3
 8014f20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 8014f24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014f28:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8014f2a:	e03d      	b.n	8014fa8 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	695b      	ldr	r3, [r3, #20]
 8014f30:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	3301      	adds	r3, #1
 8014f38:	105b      	asrs	r3, r3, #1
 8014f3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 8014f3e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014f42:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014f46:	fb02 f303 	mul.w	r3, r2, r3
 8014f4a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014f4e:	1052      	asrs	r2, r2, #1
 8014f50:	b212      	sxth	r2, r2
 8014f52:	4413      	add	r3, r2
 8014f54:	461a      	mov	r2, r3
 8014f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f58:	4413      	add	r3, r2
 8014f5a:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 4 - (x & 0x1) * 4;
 8014f5c:	897b      	ldrh	r3, [r7, #10]
 8014f5e:	f003 0301 	and.w	r3, r3, #1
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d101      	bne.n	8014f6a <lv_img_decoder_built_in_line_alpha+0x19e>
 8014f66:	2304      	movs	r3, #4
 8014f68:	e000      	b.n	8014f6c <lv_img_decoder_built_in_line_alpha+0x1a0>
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 8014f70:	f107 0318 	add.w	r3, r7, #24
 8014f74:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8014f76:	e017      	b.n	8014fa8 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	695b      	ldr	r3, [r3, #20]
 8014f7c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 8014f86:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014f8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014f8e:	fb03 f202 	mul.w	r2, r3, r2
 8014f92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014f96:	4413      	add	r3, r2
 8014f98:	461a      	mov	r2, r3
 8014f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f9c:	4413      	add	r3, r2
 8014f9e:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8014fa6:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fac:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8014fae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f00c ff60 	bl	8021e78 <lv_mem_buf_get>
 8014fb8:	6378      	str	r0, [r7, #52]	; 0x34
    if(fs_buf == NULL) return LV_RES_INV;
 8014fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d101      	bne.n	8014fc4 <lv_img_decoder_built_in_line_alpha+0x1f8>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	e06d      	b.n	80150a0 <lv_img_decoder_built_in_line_alpha+0x2d4>

    const uint8_t * data_tmp = NULL;
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	7c1b      	ldrb	r3, [r3, #16]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d108      	bne.n	8014fe2 <lv_img_decoder_built_in_line_alpha+0x216>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 8014fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd8:	689a      	ldr	r2, [r3, #8]
 8014fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fdc:	4413      	add	r3, r2
 8014fde:	643b      	str	r3, [r7, #64]	; 0x40
 8014fe0:	e00f      	b.n	8015002 <lv_img_decoder_built_in_line_alpha+0x236>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8014fe2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fe6:	3304      	adds	r3, #4
 8014fe8:	2200      	movs	r2, #0
 8014fea:	4619      	mov	r1, r3
 8014fec:	f00c fb0b 	bl	8021606 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8014ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014ff2:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ffa:	f00c fabf 	bl	802157c <lv_fs_read>
        data_tmp = fs_buf;
 8014ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015000:	643b      	str	r3, [r7, #64]	; 0x40
    }

    for(i = 0; i < len; i++) {
 8015002:	2300      	movs	r3, #0
 8015004:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8015008:	e040      	b.n	801508c <lv_img_decoder_built_in_line_alpha+0x2c0>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 801500a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	461a      	mov	r2, r3
 8015010:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8015014:	fa42 f303 	asr.w	r3, r2, r3
 8015018:	b25a      	sxtb	r2, r3
 801501a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801501c:	b25b      	sxtb	r3, r3
 801501e:	4013      	ands	r3, r2
 8015020:	b25b      	sxtb	r3, r3
 8015022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	7d1b      	ldrb	r3, [r3, #20]
 801502a:	f003 031f 	and.w	r3, r3, #31
 801502e:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8015030:	2b0e      	cmp	r3, #14
 8015032:	d005      	beq.n	8015040 <lv_img_decoder_built_in_line_alpha+0x274>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8015034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801503a:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	e001      	b.n	8015044 <lv_img_decoder_built_in_line_alpha+0x278>
 8015040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015044:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8015048:	0052      	lsls	r2, r2, #1
 801504a:	3201      	adds	r2, #1
 801504c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801504e:	440a      	add	r2, r1
 8015050:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 8015052:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8015056:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801505a:	1ad3      	subs	r3, r2, r3
 801505c:	b2db      	uxtb	r3, r3
 801505e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 8015062:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8015066:	2b00      	cmp	r3, #0
 8015068:	da09      	bge.n	801507e <lv_img_decoder_built_in_line_alpha+0x2b2>
            pos = 8 - px_size;
 801506a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801506e:	f1c3 0308 	rsb	r3, r3, #8
 8015072:	b2db      	uxtb	r3, r3
 8015074:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 8015078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801507a:	3301      	adds	r3, #1
 801507c:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 801507e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8015082:	b29b      	uxth	r3, r3
 8015084:	3301      	adds	r3, #1
 8015086:	b29b      	uxth	r3, r3
 8015088:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801508c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8015090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015094:	429a      	cmp	r2, r3
 8015096:	dbb8      	blt.n	801500a <lv_img_decoder_built_in_line_alpha+0x23e>
        }
    }
    lv_mem_buf_release(fs_buf);
 8015098:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801509a:	f00c ff99 	bl	8021fd0 <lv_mem_buf_release>
    return LV_RES_OK;
 801509e:	2301      	movs	r3, #1
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	375c      	adds	r7, #92	; 0x5c
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd90      	pop	{r4, r7, pc}
 80150a8:	ffaa5500 	.word	0xffaa5500
 80150ac:	08026780 	.word	0x08026780

080150b0 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b08e      	sub	sp, #56	; 0x38
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	4608      	mov	r0, r1
 80150ba:	4611      	mov	r1, r2
 80150bc:	461a      	mov	r2, r3
 80150be:	4603      	mov	r3, r0
 80150c0:	817b      	strh	r3, [r7, #10]
 80150c2:	460b      	mov	r3, r1
 80150c4:	813b      	strh	r3, [r7, #8]
 80150c6:	4613      	mov	r3, r2
 80150c8:	80fb      	strh	r3, [r7, #6]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	7d1b      	ldrb	r3, [r3, #20]
 80150ce:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80150d2:	b2db      	uxtb	r3, r3
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7fb f8af 	bl	8010238 <lv_img_cf_get_px_size>
 80150da:	4603      	mov	r3, r0
 80150dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80150e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80150e4:	2201      	movs	r2, #1
 80150e6:	fa02 f303 	lsl.w	r3, r2, r3
 80150ea:	b29b      	uxth	r3, r3
 80150ec:	3b01      	subs	r3, #1
 80150ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 80150f0:	2300      	movs	r3, #0
 80150f2:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 80150f4:	2300      	movs	r3, #0
 80150f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 80150fa:	2300      	movs	r3, #0
 80150fc:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	7d1b      	ldrb	r3, [r3, #20]
 8015102:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8015106:	b2db      	uxtb	r3, r3
 8015108:	3b07      	subs	r3, #7
 801510a:	2b03      	cmp	r3, #3
 801510c:	f200 8094 	bhi.w	8015238 <lv_img_decoder_built_in_line_indexed+0x188>
 8015110:	a201      	add	r2, pc, #4	; (adr r2, 8015118 <lv_img_decoder_built_in_line_indexed+0x68>)
 8015112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015116:	bf00      	nop
 8015118:	08015129 	.word	0x08015129
 801511c:	0801516f 	.word	0x0801516f
 8015120:	080151b9 	.word	0x080151b9
 8015124:	08015203 	.word	0x08015203
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	695b      	ldr	r3, [r3, #20]
 801512c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015130:	b29b      	uxth	r3, r3
 8015132:	3307      	adds	r3, #7
 8015134:	10db      	asrs	r3, r3, #3
 8015136:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 8015138:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801513c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015140:	fb02 f303 	mul.w	r3, r2, r3
 8015144:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015148:	10d2      	asrs	r2, r2, #3
 801514a:	b212      	sxth	r2, r2
 801514c:	4413      	add	r3, r2
 801514e:	461a      	mov	r2, r3
 8015150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015152:	4413      	add	r3, r2
 8015154:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 8015156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015158:	3308      	adds	r3, #8
 801515a:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 801515c:	897b      	ldrh	r3, [r7, #10]
 801515e:	b25b      	sxtb	r3, r3
 8015160:	43db      	mvns	r3, r3
 8015162:	b25b      	sxtb	r3, r3
 8015164:	f003 0307 	and.w	r3, r3, #7
 8015168:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801516c:	e064      	b.n	8015238 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	695b      	ldr	r3, [r3, #20]
 8015172:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015176:	b29b      	uxth	r3, r3
 8015178:	3303      	adds	r3, #3
 801517a:	109b      	asrs	r3, r3, #2
 801517c:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 801517e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015182:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015186:	fb02 f303 	mul.w	r3, r2, r3
 801518a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801518e:	1092      	asrs	r2, r2, #2
 8015190:	b212      	sxth	r2, r2
 8015192:	4413      	add	r3, r2
 8015194:	461a      	mov	r2, r3
 8015196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015198:	4413      	add	r3, r2
 801519a:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 801519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801519e:	3310      	adds	r3, #16
 80151a0:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - (x & 0x3) * 2;
 80151a2:	897b      	ldrh	r3, [r7, #10]
 80151a4:	43db      	mvns	r3, r3
 80151a6:	b2db      	uxtb	r3, r3
 80151a8:	f003 0303 	and.w	r3, r3, #3
 80151ac:	b2db      	uxtb	r3, r3
 80151ae:	005b      	lsls	r3, r3, #1
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80151b6:	e03f      	b.n	8015238 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	695b      	ldr	r3, [r3, #20]
 80151bc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	3301      	adds	r3, #1
 80151c4:	105b      	asrs	r3, r3, #1
 80151c6:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 80151c8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80151cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80151d0:	fb02 f303 	mul.w	r3, r2, r3
 80151d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80151d8:	1052      	asrs	r2, r2, #1
 80151da:	b212      	sxth	r2, r2
 80151dc:	4413      	add	r3, r2
 80151de:	461a      	mov	r2, r3
 80151e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e2:	4413      	add	r3, r2
 80151e4:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 80151e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e8:	3340      	adds	r3, #64	; 0x40
 80151ea:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - (x & 0x1) * 4;
 80151ec:	897b      	ldrh	r3, [r7, #10]
 80151ee:	f003 0301 	and.w	r3, r3, #1
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d101      	bne.n	80151fa <lv_img_decoder_built_in_line_indexed+0x14a>
 80151f6:	2304      	movs	r3, #4
 80151f8:	e000      	b.n	80151fc <lv_img_decoder_built_in_line_indexed+0x14c>
 80151fa:	2300      	movs	r3, #0
 80151fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015200:	e01a      	b.n	8015238 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	695b      	ldr	r3, [r3, #20]
 8015206:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801520a:	b29b      	uxth	r3, r3
 801520c:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 801520e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015212:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015216:	fb03 f202 	mul.w	r2, r3, r2
 801521a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801521e:	4413      	add	r3, r2
 8015220:	461a      	mov	r2, r3
 8015222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015224:	4413      	add	r3, r2
 8015226:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 8015228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801522a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801522e:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 8015230:	2300      	movs	r3, #0
 8015232:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015236:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801523c:	623b      	str	r3, [r7, #32]

    uint8_t * fs_buf = lv_mem_buf_get(w);
 801523e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015242:	4618      	mov	r0, r3
 8015244:	f00c fe18 	bl	8021e78 <lv_mem_buf_get>
 8015248:	61f8      	str	r0, [r7, #28]
    if(fs_buf == NULL) return LV_RES_INV;
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d101      	bne.n	8015254 <lv_img_decoder_built_in_line_indexed+0x1a4>
 8015250:	2300      	movs	r3, #0
 8015252:	e06e      	b.n	8015332 <lv_img_decoder_built_in_line_indexed+0x282>
    const uint8_t * data_tmp = NULL;
 8015254:	2300      	movs	r3, #0
 8015256:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	7c1b      	ldrb	r3, [r3, #16]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d108      	bne.n	8015272 <lv_img_decoder_built_in_line_indexed+0x1c2>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	689a      	ldr	r2, [r3, #8]
 801526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526c:	4413      	add	r3, r2
 801526e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015270:	e00f      	b.n	8015292 <lv_img_decoder_built_in_line_indexed+0x1e2>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8015272:	6a38      	ldr	r0, [r7, #32]
 8015274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015276:	3304      	adds	r3, #4
 8015278:	2200      	movs	r2, #0
 801527a:	4619      	mov	r1, r3
 801527c:	f00c f9c3 	bl	8021606 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8015280:	6a38      	ldr	r0, [r7, #32]
 8015282:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8015286:	2300      	movs	r3, #0
 8015288:	69f9      	ldr	r1, [r7, #28]
 801528a:	f00c f977 	bl	802157c <lv_fs_read>
        data_tmp = fs_buf;
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8015292:	2300      	movs	r3, #0
 8015294:	857b      	strh	r3, [r7, #42]	; 0x2a
 8015296:	e042      	b.n	801531e <lv_img_decoder_built_in_line_indexed+0x26e>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8015298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	461a      	mov	r2, r3
 801529e:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80152a2:	fa42 f303 	asr.w	r3, r2, r3
 80152a6:	b25a      	sxtb	r2, r3
 80152a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80152aa:	b25b      	sxtb	r3, r3
 80152ac:	4013      	ands	r3, r2
 80152ae:	b25b      	sxtb	r3, r3
 80152b0:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 80152b2:	6a3b      	ldr	r3, [r7, #32]
 80152b4:	68da      	ldr	r2, [r3, #12]
 80152b6:	7dfb      	ldrb	r3, [r7, #23]
 80152b8:	4413      	add	r3, r2
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	753b      	strb	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
 80152be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80152c2:	005b      	lsls	r3, r3, #1
 80152c4:	461a      	mov	r2, r3
 80152c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80152c8:	4413      	add	r3, r2
 80152ca:	7d3a      	ldrb	r2, [r7, #20]
 80152cc:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 80152ce:	6a3b      	ldr	r3, [r7, #32]
 80152d0:	691a      	ldr	r2, [r3, #16]
 80152d2:	7dfb      	ldrb	r3, [r7, #23]
 80152d4:	441a      	add	r2, r3
 80152d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80152da:	005b      	lsls	r3, r3, #1
 80152dc:	3301      	adds	r3, #1
 80152de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80152e0:	440b      	add	r3, r1
 80152e2:	7812      	ldrb	r2, [r2, #0]
 80152e4:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 80152e6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80152ea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80152ee:	1ad3      	subs	r3, r2, r3
 80152f0:	b2db      	uxtb	r3, r3
 80152f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 80152f6:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	da09      	bge.n	8015312 <lv_img_decoder_built_in_line_indexed+0x262>
            pos = 8 - px_size;
 80152fe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8015302:	f1c3 0308 	rsb	r3, r3, #8
 8015306:	b2db      	uxtb	r3, r3
 8015308:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 801530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801530e:	3301      	adds	r3, #1
 8015310:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 8015312:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015316:	b29b      	uxth	r3, r3
 8015318:	3301      	adds	r3, #1
 801531a:	b29b      	uxth	r3, r3
 801531c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801531e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8015322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015326:	429a      	cmp	r2, r3
 8015328:	dbb6      	blt.n	8015298 <lv_img_decoder_built_in_line_indexed+0x1e8>
        }
    }
    lv_mem_buf_release(fs_buf);
 801532a:	69f8      	ldr	r0, [r7, #28]
 801532c:	f00c fe50 	bl	8021fd0 <lv_mem_buf_release>
    return LV_RES_OK;
 8015330:	2301      	movs	r3, #1
}
 8015332:	4618      	mov	r0, r3
 8015334:	3738      	adds	r7, #56	; 0x38
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop

0801533c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801533c:	b480      	push	{r7}
 801533e:	b083      	sub	sp, #12
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801534a:	b29a      	uxth	r2, r3
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015352:	b29b      	uxth	r3, r3
 8015354:	1ad3      	subs	r3, r2, r3
 8015356:	b29b      	uxth	r3, r3
 8015358:	3301      	adds	r3, #1
 801535a:	b29b      	uxth	r3, r3
 801535c:	b21b      	sxth	r3, r3
}
 801535e:	4618      	mov	r0, r3
 8015360:	370c      	adds	r7, #12
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr
	...

0801536c <lv_draw_sw_init_ctx>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init_ctx(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b084      	sub	sp, #16
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
    LV_UNUSED(drv);

    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	60fb      	str	r3, [r7, #12]
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 801537a:	2154      	movs	r1, #84	; 0x54
 801537c:	68f8      	ldr	r0, [r7, #12]
 801537e:	f00d f925 	bl	80225cc <lv_memset_00>

    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	4a19      	ldr	r2, [pc, #100]	; (80153ec <lv_draw_sw_init_ctx+0x80>)
 8015386:	611a      	str	r2, [r3, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	4a19      	ldr	r2, [pc, #100]	; (80153f0 <lv_draw_sw_init_ctx+0x84>)
 801538c:	60da      	str	r2, [r3, #12]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	4a18      	ldr	r2, [pc, #96]	; (80153f4 <lv_draw_sw_init_ctx+0x88>)
 8015392:	62da      	str	r2, [r3, #44]	; 0x2c
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	4a18      	ldr	r2, [pc, #96]	; (80153f8 <lv_draw_sw_init_ctx+0x8c>)
 8015398:	61da      	str	r2, [r3, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	4a17      	ldr	r2, [pc, #92]	; (80153fc <lv_draw_sw_init_ctx+0x90>)
 801539e:	615a      	str	r2, [r3, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	4a17      	ldr	r2, [pc, #92]	; (8015400 <lv_draw_sw_init_ctx+0x94>)
 80153a4:	621a      	str	r2, [r3, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	4a16      	ldr	r2, [pc, #88]	; (8015404 <lv_draw_sw_init_ctx+0x98>)
 80153aa:	625a      	str	r2, [r3, #36]	; 0x24
#if LV_DRAW_COMPLEX
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	4a16      	ldr	r2, [pc, #88]	; (8015408 <lv_draw_sw_init_ctx+0x9c>)
 80153b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	4a15      	ldr	r2, [pc, #84]	; (801540c <lv_draw_sw_init_ctx+0xa0>)
 80153b6:	631a      	str	r2, [r3, #48]	; 0x30
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	4a15      	ldr	r2, [pc, #84]	; (8015410 <lv_draw_sw_init_ctx+0xa4>)
 80153bc:	635a      	str	r2, [r3, #52]	; 0x34
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	4a14      	ldr	r2, [pc, #80]	; (8015414 <lv_draw_sw_init_ctx+0xa8>)
 80153c2:	639a      	str	r2, [r3, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	4a14      	ldr	r2, [pc, #80]	; (8015418 <lv_draw_sw_init_ctx+0xac>)
 80153c8:	63da      	str	r2, [r3, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	4a13      	ldr	r2, [pc, #76]	; (801541c <lv_draw_sw_init_ctx+0xb0>)
 80153ce:	641a      	str	r2, [r3, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	4a13      	ldr	r2, [pc, #76]	; (8015420 <lv_draw_sw_init_ctx+0xb4>)
 80153d4:	645a      	str	r2, [r3, #68]	; 0x44
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	4a12      	ldr	r2, [pc, #72]	; (8015424 <lv_draw_sw_init_ctx+0xb8>)
 80153da:	651a      	str	r2, [r3, #80]	; 0x50
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	222c      	movs	r2, #44	; 0x2c
 80153e0:	649a      	str	r2, [r3, #72]	; 0x48
}
 80153e2:	bf00      	nop
 80153e4:	3710      	adds	r7, #16
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	0801558d 	.word	0x0801558d
 80153f0:	0801b5df 	.word	0x0801b5df
 80153f4:	0801b625 	.word	0x0801b625
 80153f8:	080198c1 	.word	0x080198c1
 80153fc:	08018d65 	.word	0x08018d65
 8015400:	0801a02f 	.word	0x0801a02f
 8015404:	0801afcd 	.word	0x0801afcd
 8015408:	0801e829 	.word	0x0801e829
 801540c:	08015429 	.word	0x08015429
 8015410:	0801543d 	.word	0x0801543d
 8015414:	080194fb 	.word	0x080194fb
 8015418:	080196df 	.word	0x080196df
 801541c:	0801976f 	.word	0x0801976f
 8015420:	08019839 	.word	0x08019839
 8015424:	080170f5 	.word	0x080170f5

08015428 <lv_draw_sw_wait_for_finish>:
    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
}

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 8015430:	bf00      	nop
 8015432:	370c      	adds	r7, #12
 8015434:	46bd      	mov	sp, r7
 8015436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543a:	4770      	bx	lr

0801543c <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b088      	sub	sp, #32
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	603b      	str	r3, [r7, #0]
 8015448:	4613      	mov	r3, r2
 801544a:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(draw_ctx);

    lv_color_t * dest_bufc =  dest_buf;
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	61fb      	str	r3, [r7, #28]
    lv_color_t * src_bufc =  src_buf;
 8015450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015452:	61bb      	str	r3, [r7, #24]

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 8015454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015458:	683a      	ldr	r2, [r7, #0]
 801545a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801545e:	fb02 f303 	mul.w	r3, r2, r3
 8015462:	461a      	mov	r2, r3
 8015464:	69fb      	ldr	r3, [r7, #28]
 8015466:	4413      	add	r3, r2
 8015468:	61fb      	str	r3, [r7, #28]
    dest_bufc += dest_area->x1;
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015470:	461a      	mov	r2, r3
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	4413      	add	r3, r2
 8015476:	61fb      	str	r3, [r7, #28]

    src_bufc += src_stride * src_area->y1;
 8015478:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801547c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801547e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015482:	fb02 f303 	mul.w	r3, r2, r3
 8015486:	461a      	mov	r2, r3
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	4413      	add	r3, r2
 801548c:	61bb      	str	r3, [r7, #24]
    src_bufc += src_area->x1;
 801548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015494:	461a      	mov	r2, r3
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	4413      	add	r3, r2
 801549a:	61bb      	str	r3, [r7, #24]

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 801549c:	6838      	ldr	r0, [r7, #0]
 801549e:	f7ff ff4d 	bl	801533c <lv_area_get_width>
 80154a2:	4603      	mov	r3, r0
 80154a4:	613b      	str	r3, [r7, #16]
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	885b      	ldrh	r3, [r3, #2]
 80154aa:	82fb      	strh	r3, [r7, #22]
 80154ac:	e014      	b.n	80154d8 <lv_draw_sw_buffer_copy+0x9c>
        lv_memcpy(dest_bufc, src_bufc, line_length);
 80154ae:	693a      	ldr	r2, [r7, #16]
 80154b0:	69b9      	ldr	r1, [r7, #24]
 80154b2:	69f8      	ldr	r0, [r7, #28]
 80154b4:	f00c fde4 	bl	8022080 <lv_memcpy>
        dest_bufc += dest_stride;
 80154b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80154bc:	69fa      	ldr	r2, [r7, #28]
 80154be:	4413      	add	r3, r2
 80154c0:	61fb      	str	r3, [r7, #28]
        src_bufc += src_stride;
 80154c2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80154c6:	69ba      	ldr	r2, [r7, #24]
 80154c8:	4413      	add	r3, r2
 80154ca:	61bb      	str	r3, [r7, #24]
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80154cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80154d0:	b29b      	uxth	r3, r3
 80154d2:	3301      	adds	r3, #1
 80154d4:	b29b      	uxth	r3, r3
 80154d6:	82fb      	strh	r3, [r7, #22]
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80154de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	dde3      	ble.n	80154ae <lv_draw_sw_buffer_copy+0x72>
    }
}
 80154e6:	bf00      	nop
 80154e8:	bf00      	nop
 80154ea:	3720      	adds	r7, #32
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}

080154f0 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	80da      	strh	r2, [r3, #6]
}
 8015522:	bf00      	nop
 8015524:	370c      	adds	r7, #12
 8015526:	46bd      	mov	sp, r7
 8015528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552c:	4770      	bx	lr

0801552e <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801552e:	b480      	push	{r7}
 8015530:	b083      	sub	sp, #12
 8015532:	af00      	add	r7, sp, #0
 8015534:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801553c:	b29a      	uxth	r2, r3
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015544:	b29b      	uxth	r3, r3
 8015546:	1ad3      	subs	r3, r2, r3
 8015548:	b29b      	uxth	r3, r3
 801554a:	3301      	adds	r3, #1
 801554c:	b29b      	uxth	r3, r3
 801554e:	b21b      	sxth	r3, r3
}
 8015550:	4618      	mov	r0, r3
 8015552:	370c      	adds	r7, #12
 8015554:	46bd      	mov	sp, r7
 8015556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555a:	4770      	bx	lr

0801555c <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801555c:	b480      	push	{r7}
 801555e:	b083      	sub	sp, #12
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801556a:	b29a      	uxth	r2, r3
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015572:	b29b      	uxth	r3, r3
 8015574:	1ad3      	subs	r3, r2, r3
 8015576:	b29b      	uxth	r3, r3
 8015578:	3301      	adds	r3, #1
 801557a:	b29b      	uxth	r3, r3
 801557c:	b21b      	sxth	r3, r3
}
 801557e:	4618      	mov	r0, r3
 8015580:	370c      	adds	r7, #12
 8015582:	46bd      	mov	sp, r7
 8015584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015588:	4770      	bx	lr
	...

0801558c <lv_draw_sw_arc>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                    uint16_t start_angle, uint16_t end_angle)
{
 801558c:	b590      	push	{r4, r7, lr}
 801558e:	b0d5      	sub	sp, #340	; 0x154
 8015590:	af02      	add	r7, sp, #8
 8015592:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8015596:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 801559a:	6020      	str	r0, [r4, #0]
 801559c:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80155a0:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80155a4:	6001      	str	r1, [r0, #0]
 80155a6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80155aa:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80155ae:	600a      	str	r2, [r1, #0]
 80155b0:	461a      	mov	r2, r3
 80155b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155b6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80155ba:	801a      	strh	r2, [r3, #0]
#if LV_DRAW_COMPLEX
    if(dsc->opa <= LV_OPA_MIN) return;
 80155bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	7b1b      	ldrb	r3, [r3, #12]
 80155c8:	2b02      	cmp	r3, #2
 80155ca:	f240 83e4 	bls.w	8015d96 <lv_draw_sw_arc+0x80a>
    if(dsc->width == 0) return;
 80155ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f000 83dc 	beq.w	8015d9a <lv_draw_sw_arc+0x80e>
    if(start_angle == end_angle) return;
 80155e2:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80155e6:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80155ea:	429a      	cmp	r2, r3
 80155ec:	f000 83d7 	beq.w	8015d9e <lv_draw_sw_arc+0x812>

    lv_coord_t width = dsc->width;
 80155f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	885b      	ldrh	r3, [r3, #2]
 80155fc:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if(width > radius) width = radius;
 8015600:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 8015604:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015608:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 801560c:	881b      	ldrh	r3, [r3, #0]
 801560e:	429a      	cmp	r2, r3
 8015610:	dd06      	ble.n	8015620 <lv_draw_sw_arc+0x94>
 8015612:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015616:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 801561a:	881b      	ldrh	r3, [r3, #0]
 801561c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    lv_draw_rect_dsc_t cir_dsc;
    lv_draw_rect_dsc_init(&cir_dsc);
 8015620:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8015624:	4618      	mov	r0, r3
 8015626:	f7fe fd01 	bl	801402c <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 801562a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801562e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	7b5b      	ldrb	r3, [r3, #13]
 8015636:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801563a:	b2db      	uxtb	r3, r3
 801563c:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
    if(dsc->img_src) {
 8015640:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015644:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	689b      	ldr	r3, [r3, #8]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d013      	beq.n	8015678 <lv_draw_sw_arc+0xec>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 8015650:	2300      	movs	r3, #0
 8015652:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_img_src = dsc->img_src;
 8015656:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801565a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	689b      	ldr	r3, [r3, #8]
 8015662:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        cir_dsc.bg_img_opa = dsc->opa;
 8015666:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801566a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	7b1b      	ldrb	r3, [r3, #12]
 8015672:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8015676:	e00f      	b.n	8015698 <lv_draw_sw_arc+0x10c>
    }
    else {
        cir_dsc.bg_opa = dsc->opa;
 8015678:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801567c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	7b1b      	ldrb	r3, [r3, #12]
 8015684:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_color = dsc->color;
 8015688:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801568c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    }

    lv_area_t area_out;
    area_out.x1 = center->x - radius;
 8015698:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801569c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156a6:	b29a      	uxth	r2, r3
 80156a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156ac:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80156b0:	881b      	ldrh	r3, [r3, #0]
 80156b2:	1ad3      	subs	r3, r2, r3
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	b21b      	sxth	r3, r3
 80156b8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    area_out.y1 = center->y - radius;
 80156bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156c0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80156ca:	b29a      	uxth	r2, r3
 80156cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156d0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80156d4:	881b      	ldrh	r3, [r3, #0]
 80156d6:	1ad3      	subs	r3, r2, r3
 80156d8:	b29b      	uxth	r3, r3
 80156da:	b21b      	sxth	r3, r3
 80156dc:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80156e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156e4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156f4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80156f8:	881b      	ldrh	r3, [r3, #0]
 80156fa:	4413      	add	r3, r2
 80156fc:	b29b      	uxth	r3, r3
 80156fe:	3b01      	subs	r3, #1
 8015700:	b29b      	uxth	r3, r3
 8015702:	b21b      	sxth	r3, r3
 8015704:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
    area_out.y2 = center->y + radius - 1;
 8015708:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801570c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015716:	b29a      	uxth	r2, r3
 8015718:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801571c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015720:	881b      	ldrh	r3, [r3, #0]
 8015722:	4413      	add	r3, r2
 8015724:	b29b      	uxth	r3, r3
 8015726:	3b01      	subs	r3, #1
 8015728:	b29b      	uxth	r3, r3
 801572a:	b21b      	sxth	r3, r3
 801572c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    lv_area_t area_in;
    lv_area_copy(&area_in, &area_out);
 8015730:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015734:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8015738:	4611      	mov	r1, r2
 801573a:	4618      	mov	r0, r3
 801573c:	f7ff fed8 	bl	80154f0 <lv_area_copy>
    area_in.x1 += dsc->width;
 8015740:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
 8015744:	b29a      	uxth	r2, r3
 8015746:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801574a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015754:	b29b      	uxth	r3, r3
 8015756:	4413      	add	r3, r2
 8015758:	b29b      	uxth	r3, r3
 801575a:	b21b      	sxth	r3, r3
 801575c:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
    area_in.y1 += dsc->width;
 8015760:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	; 0xf2
 8015764:	b29a      	uxth	r2, r3
 8015766:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801576a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015774:	b29b      	uxth	r3, r3
 8015776:	4413      	add	r3, r2
 8015778:	b29b      	uxth	r3, r3
 801577a:	b21b      	sxth	r3, r3
 801577c:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    area_in.x2 -= dsc->width;
 8015780:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 8015784:	b29a      	uxth	r2, r3
 8015786:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801578a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015794:	b29b      	uxth	r3, r3
 8015796:	1ad3      	subs	r3, r2, r3
 8015798:	b29b      	uxth	r3, r3
 801579a:	b21b      	sxth	r3, r3
 801579c:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
    area_in.y2 -= dsc->width;
 80157a0:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80157a4:	b29a      	uxth	r2, r3
 80157a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80157aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80157b4:	b29b      	uxth	r3, r3
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	b29b      	uxth	r3, r3
 80157ba:	b21b      	sxth	r3, r3
 80157bc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

    /*Create inner the mask*/
    int16_t mask_in_id = LV_MASK_ID_INV;
 80157c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80157c4:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    lv_draw_mask_radius_param_t mask_in_param;
    bool mask_in_param_valid = false;
 80157c8:	2300      	movs	r3, #0
 80157ca:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 80157ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7ff feab 	bl	801552e <lv_area_get_width>
 80157d8:	4603      	mov	r3, r0
 80157da:	2b00      	cmp	r3, #0
 80157dc:	dd1c      	ble.n	8015818 <lv_draw_sw_arc+0x28c>
 80157de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7ff feba 	bl	801555c <lv_area_get_height>
 80157e8:	4603      	mov	r3, r0
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	dd14      	ble.n	8015818 <lv_draw_sw_arc+0x28c>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 80157ee:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80157f2:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80157f6:	2301      	movs	r3, #1
 80157f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80157fc:	f7fc fc1a 	bl	8012034 <lv_draw_mask_radius_init>
        mask_in_param_valid = true;
 8015800:	2301      	movs	r3, #1
 8015802:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 8015806:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801580a:	2100      	movs	r1, #0
 801580c:	4618      	mov	r0, r3
 801580e:	f7fc f845 	bl	801189c <lv_draw_mask_add>
 8015812:	4603      	mov	r3, r0
 8015814:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    }

    lv_draw_mask_radius_param_t mask_out_param;
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8015818:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801581c:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8015820:	2300      	movs	r3, #0
 8015822:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015826:	f7fc fc05 	bl	8012034 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 801582a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801582e:	2100      	movs	r1, #0
 8015830:	4618      	mov	r0, r3
 8015832:	f7fc f833 	bl	801189c <lv_draw_mask_add>
 8015836:	4603      	mov	r3, r0
 8015838:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

    /*Draw a full ring*/
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 801583c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015840:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8015844:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015848:	429a      	cmp	r2, r3
 801584a:	d007      	beq.n	801585c <lv_draw_sw_arc+0x2d0>
 801584c:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8015850:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015854:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8015858:	429a      	cmp	r2, r3
 801585a:	d133      	bne.n	80158c4 <lv_draw_sw_arc+0x338>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801585c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015860:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015864:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015868:	f507 7180 	add.w	r1, r7, #256	; 0x100
 801586c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015870:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015874:	6818      	ldr	r0, [r3, #0]
 8015876:	f7fe fc1d 	bl	80140b4 <lv_draw_rect>

        lv_draw_mask_remove_id(mask_out_id);
 801587a:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 801587e:	4618      	mov	r0, r3
 8015880:	f7fc f882 	bl	8011988 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8015884:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801588c:	d004      	beq.n	8015898 <lv_draw_sw_arc+0x30c>
 801588e:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015892:	4618      	mov	r0, r3
 8015894:	f7fc f878 	bl	8011988 <lv_draw_mask_remove_id>

        lv_draw_mask_free_param(&mask_out_param);
 8015898:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801589c:	4618      	mov	r0, r3
 801589e:	f7fc f8c3 	bl	8011a28 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 80158a2:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f000 827b 	beq.w	8015da2 <lv_draw_sw_arc+0x816>
            lv_draw_mask_free_param(&mask_in_param);
 80158ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fc f8b9 	bl	8011a28 <lv_draw_mask_free_param>
        }

        return;
 80158b6:	e274      	b.n	8015da2 <lv_draw_sw_arc+0x816>
    }

    while(start_angle >= 360) start_angle -= 360;
 80158b8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80158bc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80158c0:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 80158c4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80158c8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80158cc:	d2f4      	bcs.n	80158b8 <lv_draw_sw_arc+0x32c>
    while(end_angle >= 360) end_angle -= 360;
 80158ce:	e005      	b.n	80158dc <lv_draw_sw_arc+0x350>
 80158d0:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80158d4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80158d8:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 80158dc:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80158e0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80158e4:	d2f4      	bcs.n	80158d0 <lv_draw_sw_arc+0x344>

    lv_draw_mask_angle_param_t mask_angle_param;
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 80158e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80158f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158f8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015902:	f9b7 4158 	ldrsh.w	r4, [r7, #344]	; 0x158
 8015906:	f9b7 315c 	ldrsh.w	r3, [r7, #348]	; 0x15c
 801590a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801590e:	9300      	str	r3, [sp, #0]
 8015910:	4623      	mov	r3, r4
 8015912:	f7fc fad9 	bl	8011ec8 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 8015916:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801591a:	2100      	movs	r1, #0
 801591c:	4618      	mov	r0, r3
 801591e:	f7fb ffbd 	bl	801189c <lv_draw_mask_add>
 8015922:	4603      	mov	r3, r0
 8015924:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

    int32_t angle_gap;
    if(end_angle > start_angle) {
 8015928:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 801592c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015930:	429a      	cmp	r2, r3
 8015932:	d909      	bls.n	8015948 <lv_draw_sw_arc+0x3bc>
        angle_gap = 360 - (end_angle - start_angle);
 8015934:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8015938:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 801593c:	1ad3      	subs	r3, r2, r3
 801593e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8015942:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8015946:	e006      	b.n	8015956 <lv_draw_sw_arc+0x3ca>
    }
    else {
        angle_gap = start_angle - end_angle;
 8015948:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 801594c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015950:	1ad3      	subs	r3, r2, r3
 8015952:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015956:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801595a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	689b      	ldr	r3, [r3, #8]
 8015962:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8015966:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801596a:	2b3c      	cmp	r3, #60	; 0x3c
 801596c:	f340 8080 	ble.w	8015a70 <lv_draw_sw_arc+0x4e4>
 8015970:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015974:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015978:	881b      	ldrh	r3, [r3, #0]
 801597a:	2b0a      	cmp	r3, #10
 801597c:	d978      	bls.n	8015a70 <lv_draw_sw_arc+0x4e4>
        /*Handle each quarter individually and skip which is empty*/
        quarter_draw_dsc_t q_dsc;
        q_dsc.center = center;
 801597e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015982:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015986:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801598a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 801598e:	6812      	ldr	r2, [r2, #0]
 8015990:	601a      	str	r2, [r3, #0]
        q_dsc.radius = radius;
 8015992:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015996:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 801599a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801599e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80159a6:	809a      	strh	r2, [r3, #4]
        q_dsc.start_angle = start_angle;
 80159a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80159b0:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80159b4:	80da      	strh	r2, [r3, #6]
        q_dsc.end_angle = end_angle;
 80159b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80159be:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80159c2:	811a      	strh	r2, [r3, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 80159c4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80159c8:	085b      	lsrs	r3, r3, #1
 80159ca:	4a28      	ldr	r2, [pc, #160]	; (8015a6c <lv_draw_sw_arc+0x4e0>)
 80159cc:	fba2 2303 	umull	r2, r3, r2, r3
 80159d0:	095b      	lsrs	r3, r3, #5
 80159d2:	b29b      	uxth	r3, r3
 80159d4:	f003 0303 	and.w	r3, r3, #3
 80159d8:	b29a      	uxth	r2, r3
 80159da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80159e2:	815a      	strh	r2, [r3, #10]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 80159e4:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80159e8:	085b      	lsrs	r3, r3, #1
 80159ea:	4a20      	ldr	r2, [pc, #128]	; (8015a6c <lv_draw_sw_arc+0x4e0>)
 80159ec:	fba2 2303 	umull	r2, r3, r2, r3
 80159f0:	095b      	lsrs	r3, r3, #5
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	f003 0303 	and.w	r3, r3, #3
 80159f8:	b29a      	uxth	r2, r3
 80159fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015a02:	819a      	strh	r2, [r3, #12]
        q_dsc.width = width;
 8015a04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015a0c:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8015a10:	81da      	strh	r2, [r3, #14]
        q_dsc.draw_dsc = &cir_dsc;
 8015a12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015a1a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8015a1e:	611a      	str	r2, [r3, #16]
        q_dsc.draw_area = &area_out;
 8015a20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015a28:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015a2c:	615a      	str	r2, [r3, #20]
        q_dsc.draw_ctx = draw_ctx;
 8015a2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a32:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015a36:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8015a3a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8015a3e:	6812      	ldr	r2, [r2, #0]
 8015a40:	619a      	str	r2, [r3, #24]

        draw_quarter_0(&q_dsc);
 8015a42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a46:	4618      	mov	r0, r3
 8015a48:	f000 f9b0 	bl	8015dac <draw_quarter_0>
        draw_quarter_1(&q_dsc);
 8015a4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 fb9d 	bl	8016190 <draw_quarter_1>
        draw_quarter_2(&q_dsc);
 8015a56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f000 fd92 	bl	8016584 <draw_quarter_2>
        draw_quarter_3(&q_dsc);
 8015a60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a64:	4618      	mov	r0, r3
 8015a66:	f000 ff90 	bl	801698a <draw_quarter_3>
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8015a6a:	e00c      	b.n	8015a86 <lv_draw_sw_arc+0x4fa>
 8015a6c:	b60b60b7 	.word	0xb60b60b7
    }
    else {
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015a70:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015a74:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015a78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015a80:	6818      	ldr	r0, [r3, #0]
 8015a82:	f7fe fb17 	bl	80140b4 <lv_draw_rect>
    }

    lv_draw_mask_free_param(&mask_angle_param);
 8015a86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7fb ffcc 	bl	8011a28 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 8015a90:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fb ffc7 	bl	8011a28 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 8015a9a:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d004      	beq.n	8015aac <lv_draw_sw_arc+0x520>
        lv_draw_mask_free_param(&mask_in_param);
 8015aa2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7fb ffbe 	bl	8011a28 <lv_draw_mask_free_param>
    }

    lv_draw_mask_remove_id(mask_angle_id);
 8015aac:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	; 0x138
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7fb ff69 	bl	8011988 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8015ab6:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7fb ff64 	bl	8011988 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8015ac0:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ac8:	d004      	beq.n	8015ad4 <lv_draw_sw_arc+0x548>
 8015aca:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7fb ff5a 	bl	8011988 <lv_draw_mask_remove_id>

    if(dsc->rounded) {
 8015ad4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ad8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	7b5b      	ldrb	r3, [r3, #13]
 8015ae0:	f003 0304 	and.w	r3, r3, #4
 8015ae4:	b2db      	uxtb	r3, r3
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	f000 815c 	beq.w	8015da4 <lv_draw_sw_arc+0x818>

        lv_draw_mask_radius_param_t mask_end_param;

        lv_area_t round_area;
        get_rounded_area(start_angle, radius, width, &round_area);
 8015aec:	f9b7 0158 	ldrsh.w	r0, [r7, #344]	; 0x158
 8015af0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015af4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015af8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015afc:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8015b00:	b2da      	uxtb	r2, r3
 8015b02:	f107 0318 	add.w	r3, r7, #24
 8015b06:	f001 f93a 	bl	8016d7e <get_rounded_area>
        round_area.x1 += center->x;
 8015b0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b16:	b29a      	uxth	r2, r3
 8015b18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b1c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b26:	b29b      	uxth	r3, r3
 8015b28:	4413      	add	r3, r2
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	b21a      	sxth	r2, r3
 8015b2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b36:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8015b38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b44:	b29a      	uxth	r2, r3
 8015b46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b54:	b29b      	uxth	r3, r3
 8015b56:	4413      	add	r3, r2
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	b21a      	sxth	r2, r3
 8015b5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b64:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8015b66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b78:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b82:	b29b      	uxth	r3, r3
 8015b84:	4413      	add	r3, r2
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	b21a      	sxth	r2, r3
 8015b8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b92:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8015b94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ba6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015bb0:	b29b      	uxth	r3, r3
 8015bb2:	4413      	add	r3, r2
 8015bb4:	b29b      	uxth	r3, r3
 8015bb6:	b21a      	sxth	r2, r3
 8015bb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015bc0:	80da      	strh	r2, [r3, #6]
        lv_area_t clip_area2;
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8015bc2:	f107 0218 	add.w	r2, r7, #24
 8015bc6:	f107 0310 	add.w	r3, r7, #16
 8015bca:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f00a fda8 	bl	8020724 <_lv_area_intersect>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d02e      	beq.n	8015c38 <lv_draw_sw_arc+0x6ac>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8015bda:	f107 0118 	add.w	r1, r7, #24
 8015bde:	f107 0020 	add.w	r0, r7, #32
 8015be2:	2300      	movs	r3, #0
 8015be4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015be8:	f7fc fa24 	bl	8012034 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8015bec:	f107 0320 	add.w	r3, r7, #32
 8015bf0:	2100      	movs	r1, #0
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f7fb fe52 	bl	801189c <lv_draw_mask_add>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132

            draw_ctx->clip_area = &clip_area2;
 8015bfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c02:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f107 0210 	add.w	r2, r7, #16
 8015c0c:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015c0e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015c12:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015c16:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c1a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015c1e:	6818      	ldr	r0, [r3, #0]
 8015c20:	f7fe fa48 	bl	80140b4 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8015c24:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7fb fead 	bl	8011988 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8015c2e:	f107 0320 	add.w	r3, r7, #32
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7fb fef8 	bl	8011a28 <lv_draw_mask_free_param>
        }

        get_rounded_area(end_angle, radius, width, &round_area);
 8015c38:	f9b7 015c 	ldrsh.w	r0, [r7, #348]	; 0x15c
 8015c3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c40:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015c44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015c48:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8015c4c:	b2da      	uxtb	r2, r3
 8015c4e:	f107 0318 	add.w	r3, r7, #24
 8015c52:	f001 f894 	bl	8016d7e <get_rounded_area>
        round_area.x1 += center->x;
 8015c56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c68:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c72:	b29b      	uxth	r3, r3
 8015c74:	4413      	add	r3, r2
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	b21a      	sxth	r2, r3
 8015c7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c82:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8015c84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ca0:	b29b      	uxth	r3, r3
 8015ca2:	4413      	add	r3, r2
 8015ca4:	b29b      	uxth	r3, r3
 8015ca6:	b21a      	sxth	r2, r3
 8015ca8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015cb0:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8015cb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015cba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015cbe:	b29a      	uxth	r2, r3
 8015cc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015cc4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	4413      	add	r3, r2
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	b21a      	sxth	r2, r3
 8015cd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015cde:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8015ce0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015ce8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015cec:	b29a      	uxth	r2, r3
 8015cee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015cf2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	4413      	add	r3, r2
 8015d00:	b29b      	uxth	r3, r3
 8015d02:	b21a      	sxth	r2, r3
 8015d04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d0c:	80da      	strh	r2, [r3, #6]
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8015d0e:	f107 0218 	add.w	r2, r7, #24
 8015d12:	f107 0310 	add.w	r3, r7, #16
 8015d16:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f00a fd02 	bl	8020724 <_lv_area_intersect>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d02e      	beq.n	8015d84 <lv_draw_sw_arc+0x7f8>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8015d26:	f107 0118 	add.w	r1, r7, #24
 8015d2a:	f107 0020 	add.w	r0, r7, #32
 8015d2e:	2300      	movs	r3, #0
 8015d30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015d34:	f7fc f97e 	bl	8012034 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8015d38:	f107 0320 	add.w	r3, r7, #32
 8015d3c:	2100      	movs	r1, #0
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7fb fdac 	bl	801189c <lv_draw_mask_add>
 8015d44:	4603      	mov	r3, r0
 8015d46:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

            draw_ctx->clip_area = &clip_area2;
 8015d4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d4e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	f107 0210 	add.w	r2, r7, #16
 8015d58:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015d5a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015d5e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015d62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015d6a:	6818      	ldr	r0, [r3, #0]
 8015d6c:	f7fe f9a2 	bl	80140b4 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8015d70:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7fb fe07 	bl	8011988 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8015d7a:	f107 0320 	add.w	r3, r7, #32
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7fb fe52 	bl	8011a28 <lv_draw_mask_free_param>
        }
        draw_ctx->clip_area = clip_area_ori;
 8015d84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015d92:	609a      	str	r2, [r3, #8]
 8015d94:	e006      	b.n	8015da4 <lv_draw_sw_arc+0x818>
    if(dsc->opa <= LV_OPA_MIN) return;
 8015d96:	bf00      	nop
 8015d98:	e004      	b.n	8015da4 <lv_draw_sw_arc+0x818>
    if(dsc->width == 0) return;
 8015d9a:	bf00      	nop
 8015d9c:	e002      	b.n	8015da4 <lv_draw_sw_arc+0x818>
    if(start_angle == end_angle) return;
 8015d9e:	bf00      	nop
 8015da0:	e000      	b.n	8015da4 <lv_draw_sw_arc+0x818>
        return;
 8015da2:	bf00      	nop
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_COMPLEX*/
}
 8015da4:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd90      	pop	{r4, r7, pc}

08015dac <draw_quarter_0>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_DRAW_COMPLEX
static void draw_quarter_0(quarter_draw_dsc_t * q)
{
 8015dac:	b590      	push	{r4, r7, lr}
 8015dae:	b087      	sub	sp, #28
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	699b      	ldr	r3, [r3, #24]
 8015db8:	689b      	ldr	r3, [r3, #8]
 8015dba:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	895b      	ldrh	r3, [r3, #10]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	f040 8097 	bne.w	8015ef4 <draw_quarter_0+0x148>
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	899b      	ldrh	r3, [r3, #12]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	f040 8092 	bne.w	8015ef4 <draw_quarter_0+0x148>
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	88da      	ldrh	r2, [r3, #6]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	891b      	ldrh	r3, [r3, #8]
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	f080 808b 	bcs.w	8015ef4 <draw_quarter_0+0x148>
        /*Small arc here*/
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015de6:	b29c      	uxth	r4, r3
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	88db      	ldrh	r3, [r3, #6]
 8015dec:	b21b      	sxth	r3, r3
 8015dee:	4618      	mov	r0, r3
 8015df0:	f00b fe9e 	bl	8021b30 <lv_trigo_sin>
 8015df4:	4603      	mov	r3, r0
 8015df6:	461a      	mov	r2, r3
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015dfe:	4619      	mov	r1, r3
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015e06:	1acb      	subs	r3, r1, r3
 8015e08:	fb02 f303 	mul.w	r3, r2, r3
 8015e0c:	13db      	asrs	r3, r3, #15
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	4423      	add	r3, r4
 8015e12:	b29b      	uxth	r3, r3
 8015e14:	b21b      	sxth	r3, r3
 8015e16:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e20:	b29c      	uxth	r4, r3
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	88db      	ldrh	r3, [r3, #6]
 8015e26:	335a      	adds	r3, #90	; 0x5a
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	b21b      	sxth	r3, r3
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f00b fe7f 	bl	8021b30 <lv_trigo_sin>
 8015e32:	4603      	mov	r3, r0
 8015e34:	461a      	mov	r2, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015e3c:	fb02 f303 	mul.w	r3, r2, r3
 8015e40:	13db      	asrs	r3, r3, #15
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	4423      	add	r3, r4
 8015e46:	b29b      	uxth	r3, r3
 8015e48:	b21b      	sxth	r3, r3
 8015e4a:	81bb      	strh	r3, [r7, #12]

        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015e54:	b29c      	uxth	r4, r3
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	891b      	ldrh	r3, [r3, #8]
 8015e5a:	b21b      	sxth	r3, r3
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f00b fe67 	bl	8021b30 <lv_trigo_sin>
 8015e62:	4603      	mov	r3, r0
 8015e64:	461a      	mov	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015e6c:	fb02 f303 	mul.w	r3, r2, r3
 8015e70:	13db      	asrs	r3, r3, #15
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	4423      	add	r3, r4
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	b21b      	sxth	r3, r3
 8015e7a:	81fb      	strh	r3, [r7, #14]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e84:	b29c      	uxth	r4, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	891b      	ldrh	r3, [r3, #8]
 8015e8a:	335a      	adds	r3, #90	; 0x5a
 8015e8c:	b29b      	uxth	r3, r3
 8015e8e:	b21b      	sxth	r3, r3
 8015e90:	4618      	mov	r0, r3
 8015e92:	f00b fe4d 	bl	8021b30 <lv_trigo_sin>
 8015e96:	4603      	mov	r3, r0
 8015e98:	461a      	mov	r2, r3
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015ea8:	1acb      	subs	r3, r1, r3
 8015eaa:	fb02 f303 	mul.w	r3, r2, r3
 8015eae:	13db      	asrs	r3, r3, #15
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	4423      	add	r3, r4
 8015eb4:	b29b      	uxth	r3, r3
 8015eb6:	b21b      	sxth	r3, r3
 8015eb8:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015eba:	f107 0108 	add.w	r1, r7, #8
 8015ebe:	f107 0308 	add.w	r3, r7, #8
 8015ec2:	697a      	ldr	r2, [r7, #20]
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f00a fc2d 	bl	8020724 <_lv_area_intersect>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8015ece:	7cfb      	ldrb	r3, [r7, #19]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	f000 8152 	beq.w	801617a <draw_quarter_0+0x3ce>
            q->draw_ctx->clip_area = &quarter_area;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	699b      	ldr	r3, [r3, #24]
 8015eda:	f107 0208 	add.w	r2, r7, #8
 8015ede:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6998      	ldr	r0, [r3, #24]
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	6919      	ldr	r1, [r3, #16]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	695b      	ldr	r3, [r3, #20]
 8015eec:	461a      	mov	r2, r3
 8015eee:	f7fe f8e1 	bl	80140b4 <lv_draw_rect>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8015ef2:	e142      	b.n	801617a <draw_quarter_0+0x3ce>
        }
    }
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	895b      	ldrh	r3, [r3, #10]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d004      	beq.n	8015f06 <draw_quarter_0+0x15a>
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	899b      	ldrh	r3, [r3, #12]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f040 80d2 	bne.w	80160aa <draw_quarter_0+0x2fe>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 0) {
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	895b      	ldrh	r3, [r3, #10]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d163      	bne.n	8015fd6 <draw_quarter_0+0x22a>
            quarter_area.x1 = q->center->x;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f16:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + q->radius;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f20:	b29a      	uxth	r2, r3
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f28:	b29b      	uxth	r3, r3
 8015f2a:	4413      	add	r3, r2
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	b21b      	sxth	r3, r3
 8015f30:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f3a:	b29c      	uxth	r4, r3
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	88db      	ldrh	r3, [r3, #6]
 8015f40:	b21b      	sxth	r3, r3
 8015f42:	4618      	mov	r0, r3
 8015f44:	f00b fdf4 	bl	8021b30 <lv_trigo_sin>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f52:	4619      	mov	r1, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015f5a:	1acb      	subs	r3, r1, r3
 8015f5c:	fb02 f303 	mul.w	r3, r2, r3
 8015f60:	13db      	asrs	r3, r3, #15
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	4423      	add	r3, r4
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	b21b      	sxth	r3, r3
 8015f6a:	817b      	strh	r3, [r7, #10]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f74:	b29c      	uxth	r4, r3
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	88db      	ldrh	r3, [r3, #6]
 8015f7a:	335a      	adds	r3, #90	; 0x5a
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	b21b      	sxth	r3, r3
 8015f80:	4618      	mov	r0, r3
 8015f82:	f00b fdd5 	bl	8021b30 <lv_trigo_sin>
 8015f86:	4603      	mov	r3, r0
 8015f88:	461a      	mov	r2, r3
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f90:	fb02 f303 	mul.w	r3, r2, r3
 8015f94:	13db      	asrs	r3, r3, #15
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	4423      	add	r3, r4
 8015f9a:	b29b      	uxth	r3, r3
 8015f9c:	b21b      	sxth	r3, r3
 8015f9e:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015fa0:	f107 0108 	add.w	r1, r7, #8
 8015fa4:	f107 0308 	add.w	r3, r7, #8
 8015fa8:	697a      	ldr	r2, [r7, #20]
 8015faa:	4618      	mov	r0, r3
 8015fac:	f00a fbba 	bl	8020724 <_lv_area_intersect>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8015fb4:	7c7b      	ldrb	r3, [r7, #17]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d00d      	beq.n	8015fd6 <draw_quarter_0+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	699b      	ldr	r3, [r3, #24]
 8015fbe:	f107 0208 	add.w	r2, r7, #8
 8015fc2:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6998      	ldr	r0, [r3, #24]
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6919      	ldr	r1, [r3, #16]
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	695b      	ldr	r3, [r3, #20]
 8015fd0:	461a      	mov	r2, r3
 8015fd2:	f7fe f86f 	bl	80140b4 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 0) {
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	899b      	ldrh	r3, [r3, #12]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	f040 80cf 	bne.w	801617e <draw_quarter_0+0x3d2>
            quarter_area.x2 = q->center->x + q->radius;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fe8:	b29a      	uxth	r2, r3
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ff0:	b29b      	uxth	r3, r3
 8015ff2:	4413      	add	r3, r2
 8015ff4:	b29b      	uxth	r3, r3
 8015ff6:	b21b      	sxth	r3, r3
 8015ff8:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016002:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801600c:	b29c      	uxth	r4, r3
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	891b      	ldrh	r3, [r3, #8]
 8016012:	b21b      	sxth	r3, r3
 8016014:	4618      	mov	r0, r3
 8016016:	f00b fd8b 	bl	8021b30 <lv_trigo_sin>
 801601a:	4603      	mov	r3, r0
 801601c:	461a      	mov	r2, r3
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016024:	fb02 f303 	mul.w	r3, r2, r3
 8016028:	13db      	asrs	r3, r3, #15
 801602a:	b29b      	uxth	r3, r3
 801602c:	4423      	add	r3, r4
 801602e:	b29b      	uxth	r3, r3
 8016030:	b21b      	sxth	r3, r3
 8016032:	81fb      	strh	r3, [r7, #14]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f9b3 3000 	ldrsh.w	r3, [r3]
 801603c:	b29c      	uxth	r4, r3
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	891b      	ldrh	r3, [r3, #8]
 8016042:	335a      	adds	r3, #90	; 0x5a
 8016044:	b29b      	uxth	r3, r3
 8016046:	b21b      	sxth	r3, r3
 8016048:	4618      	mov	r0, r3
 801604a:	f00b fd71 	bl	8021b30 <lv_trigo_sin>
 801604e:	4603      	mov	r3, r0
 8016050:	461a      	mov	r2, r3
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016058:	4619      	mov	r1, r3
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016060:	1acb      	subs	r3, r1, r3
 8016062:	fb02 f303 	mul.w	r3, r2, r3
 8016066:	13db      	asrs	r3, r3, #15
 8016068:	b29b      	uxth	r3, r3
 801606a:	4423      	add	r3, r4
 801606c:	b29b      	uxth	r3, r3
 801606e:	b21b      	sxth	r3, r3
 8016070:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016072:	f107 0108 	add.w	r1, r7, #8
 8016076:	f107 0308 	add.w	r3, r7, #8
 801607a:	697a      	ldr	r2, [r7, #20]
 801607c:	4618      	mov	r0, r3
 801607e:	f00a fb51 	bl	8020724 <_lv_area_intersect>
 8016082:	4603      	mov	r3, r0
 8016084:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8016086:	7c3b      	ldrb	r3, [r7, #16]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d078      	beq.n	801617e <draw_quarter_0+0x3d2>
                q->draw_ctx->clip_area = &quarter_area;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	699b      	ldr	r3, [r3, #24]
 8016090:	f107 0208 	add.w	r2, r7, #8
 8016094:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	6998      	ldr	r0, [r3, #24]
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6919      	ldr	r1, [r3, #16]
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	695b      	ldr	r3, [r3, #20]
 80160a2:	461a      	mov	r2, r3
 80160a4:	f7fe f806 	bl	80140b4 <lv_draw_rect>
        if(q->end_quarter == 0) {
 80160a8:	e069      	b.n	801617e <draw_quarter_0+0x3d2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	895a      	ldrh	r2, [r3, #10]
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	899b      	ldrh	r3, [r3, #12]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d109      	bne.n	80160ca <draw_quarter_0+0x31e>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	895b      	ldrh	r3, [r3, #10]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d005      	beq.n	80160ca <draw_quarter_0+0x31e>
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	891a      	ldrh	r2, [r3, #8]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	88db      	ldrh	r3, [r3, #6]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d317      	bcc.n	80160fa <draw_quarter_0+0x34e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 80160ce:	2b02      	cmp	r3, #2
 80160d0:	d103      	bne.n	80160da <draw_quarter_0+0x32e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	899b      	ldrh	r3, [r3, #12]
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d00f      	beq.n	80160fa <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 80160de:	2b03      	cmp	r3, #3
 80160e0:	d103      	bne.n	80160ea <draw_quarter_0+0x33e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	899b      	ldrh	r3, [r3, #12]
 80160e6:	2b02      	cmp	r3, #2
 80160e8:	d007      	beq.n	80160fa <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 80160ee:	2b03      	cmp	r3, #3
 80160f0:	d146      	bne.n	8016180 <draw_quarter_0+0x3d4>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	899b      	ldrh	r3, [r3, #12]
 80160f6:	2b01      	cmp	r3, #1
 80160f8:	d142      	bne.n	8016180 <draw_quarter_0+0x3d4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016102:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801610c:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016116:	b29a      	uxth	r2, r3
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801611e:	b29b      	uxth	r3, r3
 8016120:	4413      	add	r3, r2
 8016122:	b29b      	uxth	r3, r3
 8016124:	b21b      	sxth	r3, r3
 8016126:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016130:	b29a      	uxth	r2, r3
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016138:	b29b      	uxth	r3, r3
 801613a:	4413      	add	r3, r2
 801613c:	b29b      	uxth	r3, r3
 801613e:	b21b      	sxth	r3, r3
 8016140:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016142:	f107 0108 	add.w	r1, r7, #8
 8016146:	f107 0308 	add.w	r3, r7, #8
 801614a:	697a      	ldr	r2, [r7, #20]
 801614c:	4618      	mov	r0, r3
 801614e:	f00a fae9 	bl	8020724 <_lv_area_intersect>
 8016152:	4603      	mov	r3, r0
 8016154:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8016156:	7cbb      	ldrb	r3, [r7, #18]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d011      	beq.n	8016180 <draw_quarter_0+0x3d4>
            q->draw_ctx->clip_area = &quarter_area;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	699b      	ldr	r3, [r3, #24]
 8016160:	f107 0208 	add.w	r2, r7, #8
 8016164:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	6998      	ldr	r0, [r3, #24]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	6919      	ldr	r1, [r3, #16]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	695b      	ldr	r3, [r3, #20]
 8016172:	461a      	mov	r2, r3
 8016174:	f7fd ff9e 	bl	80140b4 <lv_draw_rect>
 8016178:	e002      	b.n	8016180 <draw_quarter_0+0x3d4>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801617a:	bf00      	nop
 801617c:	e000      	b.n	8016180 <draw_quarter_0+0x3d4>
        if(q->end_quarter == 0) {
 801617e:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	699b      	ldr	r3, [r3, #24]
 8016184:	697a      	ldr	r2, [r7, #20]
 8016186:	609a      	str	r2, [r3, #8]
}
 8016188:	bf00      	nop
 801618a:	371c      	adds	r7, #28
 801618c:	46bd      	mov	sp, r7
 801618e:	bd90      	pop	{r4, r7, pc}

08016190 <draw_quarter_1>:

static void draw_quarter_1(quarter_draw_dsc_t * q)
{
 8016190:	b590      	push	{r4, r7, lr}
 8016192:	b087      	sub	sp, #28
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	699b      	ldr	r3, [r3, #24]
 801619c:	689b      	ldr	r3, [r3, #8]
 801619e:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	895b      	ldrh	r3, [r3, #10]
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	f040 8097 	bne.w	80162d8 <draw_quarter_1+0x148>
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	899b      	ldrh	r3, [r3, #12]
 80161ae:	2b01      	cmp	r3, #1
 80161b0:	f040 8092 	bne.w	80162d8 <draw_quarter_1+0x148>
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	88da      	ldrh	r2, [r3, #6]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	891b      	ldrh	r3, [r3, #8]
 80161bc:	429a      	cmp	r2, r3
 80161be:	f080 808b 	bcs.w	80162d8 <draw_quarter_1+0x148>
        /*Small arc here*/
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80161ca:	b29c      	uxth	r4, r3
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	88db      	ldrh	r3, [r3, #6]
 80161d0:	b21b      	sxth	r3, r3
 80161d2:	4618      	mov	r0, r3
 80161d4:	f00b fcac 	bl	8021b30 <lv_trigo_sin>
 80161d8:	4603      	mov	r3, r0
 80161da:	461a      	mov	r2, r3
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80161e2:	fb02 f303 	mul.w	r3, r2, r3
 80161e6:	13db      	asrs	r3, r3, #15
 80161e8:	b29b      	uxth	r3, r3
 80161ea:	4423      	add	r3, r4
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	b21b      	sxth	r3, r3
 80161f0:	81fb      	strh	r3, [r7, #14]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161fa:	b29c      	uxth	r4, r3
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	88db      	ldrh	r3, [r3, #6]
 8016200:	335a      	adds	r3, #90	; 0x5a
 8016202:	b29b      	uxth	r3, r3
 8016204:	b21b      	sxth	r3, r3
 8016206:	4618      	mov	r0, r3
 8016208:	f00b fc92 	bl	8021b30 <lv_trigo_sin>
 801620c:	4603      	mov	r3, r0
 801620e:	461a      	mov	r2, r3
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016216:	4619      	mov	r1, r3
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801621e:	1acb      	subs	r3, r1, r3
 8016220:	fb02 f303 	mul.w	r3, r2, r3
 8016224:	13db      	asrs	r3, r3, #15
 8016226:	b29b      	uxth	r3, r3
 8016228:	4423      	add	r3, r4
 801622a:	b29b      	uxth	r3, r3
 801622c:	b21b      	sxth	r3, r3
 801622e:	81bb      	strh	r3, [r7, #12]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016238:	b29c      	uxth	r4, r3
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	891b      	ldrh	r3, [r3, #8]
 801623e:	b21b      	sxth	r3, r3
 8016240:	4618      	mov	r0, r3
 8016242:	f00b fc75 	bl	8021b30 <lv_trigo_sin>
 8016246:	4603      	mov	r3, r0
 8016248:	461a      	mov	r2, r3
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016250:	4619      	mov	r1, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016258:	1acb      	subs	r3, r1, r3
 801625a:	fb02 f303 	mul.w	r3, r2, r3
 801625e:	13db      	asrs	r3, r3, #15
 8016260:	b29b      	uxth	r3, r3
 8016262:	4423      	add	r3, r4
 8016264:	b29b      	uxth	r3, r3
 8016266:	b21b      	sxth	r3, r3
 8016268:	817b      	strh	r3, [r7, #10]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016272:	b29c      	uxth	r4, r3
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	891b      	ldrh	r3, [r3, #8]
 8016278:	335a      	adds	r3, #90	; 0x5a
 801627a:	b29b      	uxth	r3, r3
 801627c:	b21b      	sxth	r3, r3
 801627e:	4618      	mov	r0, r3
 8016280:	f00b fc56 	bl	8021b30 <lv_trigo_sin>
 8016284:	4603      	mov	r3, r0
 8016286:	461a      	mov	r2, r3
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801628e:	fb02 f303 	mul.w	r3, r2, r3
 8016292:	13db      	asrs	r3, r3, #15
 8016294:	b29b      	uxth	r3, r3
 8016296:	4423      	add	r3, r4
 8016298:	b29b      	uxth	r3, r3
 801629a:	b21b      	sxth	r3, r3
 801629c:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801629e:	f107 0108 	add.w	r1, r7, #8
 80162a2:	f107 0308 	add.w	r3, r7, #8
 80162a6:	697a      	ldr	r2, [r7, #20]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f00a fa3b 	bl	8020724 <_lv_area_intersect>
 80162ae:	4603      	mov	r3, r0
 80162b0:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80162b2:	7cfb      	ldrb	r3, [r7, #19]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	f000 815a 	beq.w	801656e <draw_quarter_1+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	699b      	ldr	r3, [r3, #24]
 80162be:	f107 0208 	add.w	r2, r7, #8
 80162c2:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	6998      	ldr	r0, [r3, #24]
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	6919      	ldr	r1, [r3, #16]
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	695b      	ldr	r3, [r3, #20]
 80162d0:	461a      	mov	r2, r3
 80162d2:	f7fd feef 	bl	80140b4 <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 80162d6:	e14a      	b.n	801656e <draw_quarter_1+0x3de>
        }
    }
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	895b      	ldrh	r3, [r3, #10]
 80162dc:	2b01      	cmp	r3, #1
 80162de:	d004      	beq.n	80162ea <draw_quarter_1+0x15a>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	899b      	ldrh	r3, [r3, #12]
 80162e4:	2b01      	cmp	r3, #1
 80162e6:	f040 80d6 	bne.w	8016496 <draw_quarter_1+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 1) {
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	895b      	ldrh	r3, [r3, #10]
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d163      	bne.n	80163ba <draw_quarter_1+0x22a>
            quarter_area.x1 = q->center->x - q->radius;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162fa:	b29a      	uxth	r2, r3
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016302:	b29b      	uxth	r3, r3
 8016304:	1ad3      	subs	r3, r2, r3
 8016306:	b29b      	uxth	r3, r3
 8016308:	b21b      	sxth	r3, r3
 801630a:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016314:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801631e:	b29c      	uxth	r4, r3
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	88db      	ldrh	r3, [r3, #6]
 8016324:	b21b      	sxth	r3, r3
 8016326:	4618      	mov	r0, r3
 8016328:	f00b fc02 	bl	8021b30 <lv_trigo_sin>
 801632c:	4603      	mov	r3, r0
 801632e:	461a      	mov	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016336:	fb02 f303 	mul.w	r3, r2, r3
 801633a:	13db      	asrs	r3, r3, #15
 801633c:	b29b      	uxth	r3, r3
 801633e:	4423      	add	r3, r4
 8016340:	b29b      	uxth	r3, r3
 8016342:	b21b      	sxth	r3, r3
 8016344:	81fb      	strh	r3, [r7, #14]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801634e:	b29c      	uxth	r4, r3
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	88db      	ldrh	r3, [r3, #6]
 8016354:	335a      	adds	r3, #90	; 0x5a
 8016356:	b29b      	uxth	r3, r3
 8016358:	b21b      	sxth	r3, r3
 801635a:	4618      	mov	r0, r3
 801635c:	f00b fbe8 	bl	8021b30 <lv_trigo_sin>
 8016360:	4603      	mov	r3, r0
 8016362:	461a      	mov	r2, r3
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801636a:	4619      	mov	r1, r3
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016372:	1acb      	subs	r3, r1, r3
 8016374:	fb02 f303 	mul.w	r3, r2, r3
 8016378:	13db      	asrs	r3, r3, #15
 801637a:	b29b      	uxth	r3, r3
 801637c:	4423      	add	r3, r4
 801637e:	b29b      	uxth	r3, r3
 8016380:	b21b      	sxth	r3, r3
 8016382:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016384:	f107 0108 	add.w	r1, r7, #8
 8016388:	f107 0308 	add.w	r3, r7, #8
 801638c:	697a      	ldr	r2, [r7, #20]
 801638e:	4618      	mov	r0, r3
 8016390:	f00a f9c8 	bl	8020724 <_lv_area_intersect>
 8016394:	4603      	mov	r3, r0
 8016396:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8016398:	7c7b      	ldrb	r3, [r7, #17]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d00d      	beq.n	80163ba <draw_quarter_1+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	699b      	ldr	r3, [r3, #24]
 80163a2:	f107 0208 	add.w	r2, r7, #8
 80163a6:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	6998      	ldr	r0, [r3, #24]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6919      	ldr	r1, [r3, #16]
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	695b      	ldr	r3, [r3, #20]
 80163b4:	461a      	mov	r2, r3
 80163b6:	f7fd fe7d 	bl	80140b4 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 1) {
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	899b      	ldrh	r3, [r3, #12]
 80163be:	2b01      	cmp	r3, #1
 80163c0:	f040 80d7 	bne.w	8016572 <draw_quarter_1+0x3e2>
            quarter_area.x2 = q->center->x - 1;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	3b01      	subs	r3, #1
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	b21b      	sxth	r3, r3
 80163d4:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + q->radius;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80163de:	b29a      	uxth	r2, r3
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80163e6:	b29b      	uxth	r3, r3
 80163e8:	4413      	add	r3, r2
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	b21b      	sxth	r3, r3
 80163ee:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80163f8:	b29c      	uxth	r4, r3
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	891b      	ldrh	r3, [r3, #8]
 80163fe:	b21b      	sxth	r3, r3
 8016400:	4618      	mov	r0, r3
 8016402:	f00b fb95 	bl	8021b30 <lv_trigo_sin>
 8016406:	4603      	mov	r3, r0
 8016408:	461a      	mov	r2, r3
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016410:	4619      	mov	r1, r3
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016418:	1acb      	subs	r3, r1, r3
 801641a:	fb02 f303 	mul.w	r3, r2, r3
 801641e:	13db      	asrs	r3, r3, #15
 8016420:	b29b      	uxth	r3, r3
 8016422:	4423      	add	r3, r4
 8016424:	b29b      	uxth	r3, r3
 8016426:	b21b      	sxth	r3, r3
 8016428:	817b      	strh	r3, [r7, #10]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016432:	b29c      	uxth	r4, r3
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	891b      	ldrh	r3, [r3, #8]
 8016438:	335a      	adds	r3, #90	; 0x5a
 801643a:	b29b      	uxth	r3, r3
 801643c:	b21b      	sxth	r3, r3
 801643e:	4618      	mov	r0, r3
 8016440:	f00b fb76 	bl	8021b30 <lv_trigo_sin>
 8016444:	4603      	mov	r3, r0
 8016446:	461a      	mov	r2, r3
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801644e:	fb02 f303 	mul.w	r3, r2, r3
 8016452:	13db      	asrs	r3, r3, #15
 8016454:	b29b      	uxth	r3, r3
 8016456:	4423      	add	r3, r4
 8016458:	b29b      	uxth	r3, r3
 801645a:	b21b      	sxth	r3, r3
 801645c:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801645e:	f107 0108 	add.w	r1, r7, #8
 8016462:	f107 0308 	add.w	r3, r7, #8
 8016466:	697a      	ldr	r2, [r7, #20]
 8016468:	4618      	mov	r0, r3
 801646a:	f00a f95b 	bl	8020724 <_lv_area_intersect>
 801646e:	4603      	mov	r3, r0
 8016470:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8016472:	7c3b      	ldrb	r3, [r7, #16]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d07c      	beq.n	8016572 <draw_quarter_1+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	699b      	ldr	r3, [r3, #24]
 801647c:	f107 0208 	add.w	r2, r7, #8
 8016480:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6998      	ldr	r0, [r3, #24]
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	6919      	ldr	r1, [r3, #16]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	695b      	ldr	r3, [r3, #20]
 801648e:	461a      	mov	r2, r3
 8016490:	f7fd fe10 	bl	80140b4 <lv_draw_rect>
        if(q->end_quarter == 1) {
 8016494:	e06d      	b.n	8016572 <draw_quarter_1+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	895a      	ldrh	r2, [r3, #10]
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	899b      	ldrh	r3, [r3, #12]
 801649e:	429a      	cmp	r2, r3
 80164a0:	d109      	bne.n	80164b6 <draw_quarter_1+0x326>
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	895b      	ldrh	r3, [r3, #10]
 80164a6:	2b01      	cmp	r3, #1
 80164a8:	d005      	beq.n	80164b6 <draw_quarter_1+0x326>
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	891a      	ldrh	r2, [r3, #8]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	88db      	ldrh	r3, [r3, #6]
 80164b2:	429a      	cmp	r2, r3
 80164b4:	d317      	bcc.n	80164e6 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d103      	bne.n	80164c6 <draw_quarter_1+0x336>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	899b      	ldrh	r3, [r3, #12]
 80164c2:	2b02      	cmp	r3, #2
 80164c4:	d00f      	beq.n	80164e6 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d103      	bne.n	80164d6 <draw_quarter_1+0x346>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	899b      	ldrh	r3, [r3, #12]
 80164d2:	2b03      	cmp	r3, #3
 80164d4:	d007      	beq.n	80164e6 <draw_quarter_1+0x356>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80164da:	2b03      	cmp	r3, #3
 80164dc:	d14a      	bne.n	8016574 <draw_quarter_1+0x3e4>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	899b      	ldrh	r3, [r3, #12]
 80164e2:	2b02      	cmp	r3, #2
 80164e4:	d146      	bne.n	8016574 <draw_quarter_1+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ee:	b29a      	uxth	r2, r3
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80164f6:	b29b      	uxth	r3, r3
 80164f8:	1ad3      	subs	r3, r2, r3
 80164fa:	b29b      	uxth	r3, r3
 80164fc:	b21b      	sxth	r3, r3
 80164fe:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016508:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016512:	b29b      	uxth	r3, r3
 8016514:	3b01      	subs	r3, #1
 8016516:	b29b      	uxth	r3, r3
 8016518:	b21b      	sxth	r3, r3
 801651a:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016524:	b29a      	uxth	r2, r3
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801652c:	b29b      	uxth	r3, r3
 801652e:	4413      	add	r3, r2
 8016530:	b29b      	uxth	r3, r3
 8016532:	b21b      	sxth	r3, r3
 8016534:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016536:	f107 0108 	add.w	r1, r7, #8
 801653a:	f107 0308 	add.w	r3, r7, #8
 801653e:	697a      	ldr	r2, [r7, #20]
 8016540:	4618      	mov	r0, r3
 8016542:	f00a f8ef 	bl	8020724 <_lv_area_intersect>
 8016546:	4603      	mov	r3, r0
 8016548:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 801654a:	7cbb      	ldrb	r3, [r7, #18]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d011      	beq.n	8016574 <draw_quarter_1+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	699b      	ldr	r3, [r3, #24]
 8016554:	f107 0208 	add.w	r2, r7, #8
 8016558:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6998      	ldr	r0, [r3, #24]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	6919      	ldr	r1, [r3, #16]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	695b      	ldr	r3, [r3, #20]
 8016566:	461a      	mov	r2, r3
 8016568:	f7fd fda4 	bl	80140b4 <lv_draw_rect>
 801656c:	e002      	b.n	8016574 <draw_quarter_1+0x3e4>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801656e:	bf00      	nop
 8016570:	e000      	b.n	8016574 <draw_quarter_1+0x3e4>
        if(q->end_quarter == 1) {
 8016572:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	699b      	ldr	r3, [r3, #24]
 8016578:	697a      	ldr	r2, [r7, #20]
 801657a:	609a      	str	r2, [r3, #8]
}
 801657c:	bf00      	nop
 801657e:	371c      	adds	r7, #28
 8016580:	46bd      	mov	sp, r7
 8016582:	bd90      	pop	{r4, r7, pc}

08016584 <draw_quarter_2>:

static void draw_quarter_2(quarter_draw_dsc_t * q)
{
 8016584:	b590      	push	{r4, r7, lr}
 8016586:	b087      	sub	sp, #28
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	699b      	ldr	r3, [r3, #24]
 8016590:	689b      	ldr	r3, [r3, #8]
 8016592:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	895b      	ldrh	r3, [r3, #10]
 8016598:	2b02      	cmp	r3, #2
 801659a:	f040 8097 	bne.w	80166cc <draw_quarter_2+0x148>
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	899b      	ldrh	r3, [r3, #12]
 80165a2:	2b02      	cmp	r3, #2
 80165a4:	f040 8092 	bne.w	80166cc <draw_quarter_2+0x148>
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	88da      	ldrh	r2, [r3, #6]
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	891b      	ldrh	r3, [r3, #8]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	f080 808b 	bcs.w	80166cc <draw_quarter_2+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165be:	b29c      	uxth	r4, r3
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	88db      	ldrh	r3, [r3, #6]
 80165c4:	335a      	adds	r3, #90	; 0x5a
 80165c6:	b29b      	uxth	r3, r3
 80165c8:	b21b      	sxth	r3, r3
 80165ca:	4618      	mov	r0, r3
 80165cc:	f00b fab0 	bl	8021b30 <lv_trigo_sin>
 80165d0:	4603      	mov	r3, r0
 80165d2:	461a      	mov	r2, r3
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80165da:	fb02 f303 	mul.w	r3, r2, r3
 80165de:	13db      	asrs	r3, r3, #15
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	4423      	add	r3, r4
 80165e4:	b29b      	uxth	r3, r3
 80165e6:	b21b      	sxth	r3, r3
 80165e8:	813b      	strh	r3, [r7, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80165f2:	b29c      	uxth	r4, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	88db      	ldrh	r3, [r3, #6]
 80165f8:	b21b      	sxth	r3, r3
 80165fa:	4618      	mov	r0, r3
 80165fc:	f00b fa98 	bl	8021b30 <lv_trigo_sin>
 8016600:	4603      	mov	r3, r0
 8016602:	461a      	mov	r2, r3
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801660a:	4619      	mov	r1, r3
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016612:	1acb      	subs	r3, r1, r3
 8016614:	fb02 f303 	mul.w	r3, r2, r3
 8016618:	13db      	asrs	r3, r3, #15
 801661a:	b29b      	uxth	r3, r3
 801661c:	4423      	add	r3, r4
 801661e:	b29b      	uxth	r3, r3
 8016620:	b21b      	sxth	r3, r3
 8016622:	81fb      	strh	r3, [r7, #14]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801662c:	b29c      	uxth	r4, r3
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	891b      	ldrh	r3, [r3, #8]
 8016632:	b21b      	sxth	r3, r3
 8016634:	4618      	mov	r0, r3
 8016636:	f00b fa7b 	bl	8021b30 <lv_trigo_sin>
 801663a:	4603      	mov	r3, r0
 801663c:	461a      	mov	r2, r3
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016644:	fb02 f303 	mul.w	r3, r2, r3
 8016648:	13db      	asrs	r3, r3, #15
 801664a:	b29b      	uxth	r3, r3
 801664c:	4423      	add	r3, r4
 801664e:	b29b      	uxth	r3, r3
 8016650:	b21b      	sxth	r3, r3
 8016652:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	f9b3 3000 	ldrsh.w	r3, [r3]
 801665c:	b29c      	uxth	r4, r3
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	891b      	ldrh	r3, [r3, #8]
 8016662:	335a      	adds	r3, #90	; 0x5a
 8016664:	b29b      	uxth	r3, r3
 8016666:	b21b      	sxth	r3, r3
 8016668:	4618      	mov	r0, r3
 801666a:	f00b fa61 	bl	8021b30 <lv_trigo_sin>
 801666e:	4603      	mov	r3, r0
 8016670:	461a      	mov	r2, r3
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016678:	4619      	mov	r1, r3
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016680:	1acb      	subs	r3, r1, r3
 8016682:	fb02 f303 	mul.w	r3, r2, r3
 8016686:	13db      	asrs	r3, r3, #15
 8016688:	b29b      	uxth	r3, r3
 801668a:	4423      	add	r3, r4
 801668c:	b29b      	uxth	r3, r3
 801668e:	b21b      	sxth	r3, r3
 8016690:	81bb      	strh	r3, [r7, #12]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016692:	f107 0108 	add.w	r1, r7, #8
 8016696:	f107 0308 	add.w	r3, r7, #8
 801669a:	697a      	ldr	r2, [r7, #20]
 801669c:	4618      	mov	r0, r3
 801669e:	f00a f841 	bl	8020724 <_lv_area_intersect>
 80166a2:	4603      	mov	r3, r0
 80166a4:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80166a6:	7cfb      	ldrb	r3, [r7, #19]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	f000 8163 	beq.w	8016974 <draw_quarter_2+0x3f0>
            q->draw_ctx->clip_area = &quarter_area;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	699b      	ldr	r3, [r3, #24]
 80166b2:	f107 0208 	add.w	r2, r7, #8
 80166b6:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	6998      	ldr	r0, [r3, #24]
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6919      	ldr	r1, [r3, #16]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	695b      	ldr	r3, [r3, #20]
 80166c4:	461a      	mov	r2, r3
 80166c6:	f7fd fcf5 	bl	80140b4 <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80166ca:	e153      	b.n	8016974 <draw_quarter_2+0x3f0>
        }
    }
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	895b      	ldrh	r3, [r3, #10]
 80166d0:	2b02      	cmp	r3, #2
 80166d2:	d004      	beq.n	80166de <draw_quarter_2+0x15a>
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	899b      	ldrh	r3, [r3, #12]
 80166d8:	2b02      	cmp	r3, #2
 80166da:	f040 80db 	bne.w	8016894 <draw_quarter_2+0x310>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 2) {
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	895b      	ldrh	r3, [r3, #10]
 80166e2:	2b02      	cmp	r3, #2
 80166e4:	d167      	bne.n	80167b6 <draw_quarter_2+0x232>
            quarter_area.x2 = q->center->x - 1;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	3b01      	subs	r3, #1
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	b21b      	sxth	r3, r3
 80166f6:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y - q->radius;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016700:	b29a      	uxth	r2, r3
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016708:	b29b      	uxth	r3, r3
 801670a:	1ad3      	subs	r3, r2, r3
 801670c:	b29b      	uxth	r3, r3
 801670e:	b21b      	sxth	r3, r3
 8016710:	817b      	strh	r3, [r7, #10]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	f9b3 3000 	ldrsh.w	r3, [r3]
 801671a:	b29c      	uxth	r4, r3
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	88db      	ldrh	r3, [r3, #6]
 8016720:	335a      	adds	r3, #90	; 0x5a
 8016722:	b29b      	uxth	r3, r3
 8016724:	b21b      	sxth	r3, r3
 8016726:	4618      	mov	r0, r3
 8016728:	f00b fa02 	bl	8021b30 <lv_trigo_sin>
 801672c:	4603      	mov	r3, r0
 801672e:	461a      	mov	r2, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016736:	fb02 f303 	mul.w	r3, r2, r3
 801673a:	13db      	asrs	r3, r3, #15
 801673c:	b29b      	uxth	r3, r3
 801673e:	4423      	add	r3, r4
 8016740:	b29b      	uxth	r3, r3
 8016742:	b21b      	sxth	r3, r3
 8016744:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801674e:	b29c      	uxth	r4, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	88db      	ldrh	r3, [r3, #6]
 8016754:	b21b      	sxth	r3, r3
 8016756:	4618      	mov	r0, r3
 8016758:	f00b f9ea 	bl	8021b30 <lv_trigo_sin>
 801675c:	4603      	mov	r3, r0
 801675e:	461a      	mov	r2, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016766:	4619      	mov	r1, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801676e:	1acb      	subs	r3, r1, r3
 8016770:	fb02 f303 	mul.w	r3, r2, r3
 8016774:	13db      	asrs	r3, r3, #15
 8016776:	b29b      	uxth	r3, r3
 8016778:	4423      	add	r3, r4
 801677a:	b29b      	uxth	r3, r3
 801677c:	b21b      	sxth	r3, r3
 801677e:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016780:	f107 0108 	add.w	r1, r7, #8
 8016784:	f107 0308 	add.w	r3, r7, #8
 8016788:	697a      	ldr	r2, [r7, #20]
 801678a:	4618      	mov	r0, r3
 801678c:	f009 ffca 	bl	8020724 <_lv_area_intersect>
 8016790:	4603      	mov	r3, r0
 8016792:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8016794:	7c7b      	ldrb	r3, [r7, #17]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d00d      	beq.n	80167b6 <draw_quarter_2+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	699b      	ldr	r3, [r3, #24]
 801679e:	f107 0208 	add.w	r2, r7, #8
 80167a2:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6998      	ldr	r0, [r3, #24]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	6919      	ldr	r1, [r3, #16]
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	695b      	ldr	r3, [r3, #20]
 80167b0:	461a      	mov	r2, r3
 80167b2:	f7fd fc7f 	bl	80140b4 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 2) {
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	899b      	ldrh	r3, [r3, #12]
 80167ba:	2b02      	cmp	r3, #2
 80167bc:	f040 80dc 	bne.w	8016978 <draw_quarter_2+0x3f4>
            quarter_area.x1 = q->center->x - q->radius;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167c8:	b29a      	uxth	r2, r3
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	1ad3      	subs	r3, r2, r3
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	b21b      	sxth	r3, r3
 80167d8:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y - 1;
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	3b01      	subs	r3, #1
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	b21b      	sxth	r3, r3
 80167ea:	81fb      	strh	r3, [r7, #14]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167f4:	b29c      	uxth	r4, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	891b      	ldrh	r3, [r3, #8]
 80167fa:	335a      	adds	r3, #90	; 0x5a
 80167fc:	b29b      	uxth	r3, r3
 80167fe:	b21b      	sxth	r3, r3
 8016800:	4618      	mov	r0, r3
 8016802:	f00b f995 	bl	8021b30 <lv_trigo_sin>
 8016806:	4603      	mov	r3, r0
 8016808:	461a      	mov	r2, r3
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016810:	4619      	mov	r1, r3
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016818:	1acb      	subs	r3, r1, r3
 801681a:	fb02 f303 	mul.w	r3, r2, r3
 801681e:	13db      	asrs	r3, r3, #15
 8016820:	b29b      	uxth	r3, r3
 8016822:	4423      	add	r3, r4
 8016824:	b29b      	uxth	r3, r3
 8016826:	b21b      	sxth	r3, r3
 8016828:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016832:	b29c      	uxth	r4, r3
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	891b      	ldrh	r3, [r3, #8]
 8016838:	b21b      	sxth	r3, r3
 801683a:	4618      	mov	r0, r3
 801683c:	f00b f978 	bl	8021b30 <lv_trigo_sin>
 8016840:	4603      	mov	r3, r0
 8016842:	461a      	mov	r2, r3
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801684a:	fb02 f303 	mul.w	r3, r2, r3
 801684e:	13db      	asrs	r3, r3, #15
 8016850:	b29b      	uxth	r3, r3
 8016852:	4423      	add	r3, r4
 8016854:	b29b      	uxth	r3, r3
 8016856:	b21b      	sxth	r3, r3
 8016858:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801685a:	f107 0108 	add.w	r1, r7, #8
 801685e:	f107 0308 	add.w	r3, r7, #8
 8016862:	697a      	ldr	r2, [r7, #20]
 8016864:	4618      	mov	r0, r3
 8016866:	f009 ff5d 	bl	8020724 <_lv_area_intersect>
 801686a:	4603      	mov	r3, r0
 801686c:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801686e:	7c3b      	ldrb	r3, [r7, #16]
 8016870:	2b00      	cmp	r3, #0
 8016872:	f000 8081 	beq.w	8016978 <draw_quarter_2+0x3f4>
                q->draw_ctx->clip_area = &quarter_area;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	699b      	ldr	r3, [r3, #24]
 801687a:	f107 0208 	add.w	r2, r7, #8
 801687e:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	6998      	ldr	r0, [r3, #24]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6919      	ldr	r1, [r3, #16]
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	695b      	ldr	r3, [r3, #20]
 801688c:	461a      	mov	r2, r3
 801688e:	f7fd fc11 	bl	80140b4 <lv_draw_rect>
        if(q->end_quarter == 2) {
 8016892:	e071      	b.n	8016978 <draw_quarter_2+0x3f4>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	895a      	ldrh	r2, [r3, #10]
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	899b      	ldrh	r3, [r3, #12]
 801689c:	429a      	cmp	r2, r3
 801689e:	d109      	bne.n	80168b4 <draw_quarter_2+0x330>
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	895b      	ldrh	r3, [r3, #10]
 80168a4:	2b02      	cmp	r3, #2
 80168a6:	d005      	beq.n	80168b4 <draw_quarter_2+0x330>
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	891a      	ldrh	r2, [r3, #8]
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	88db      	ldrh	r3, [r3, #6]
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d317      	bcc.n	80168e4 <draw_quarter_2+0x360>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d103      	bne.n	80168c4 <draw_quarter_2+0x340>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	899b      	ldrh	r3, [r3, #12]
 80168c0:	2b03      	cmp	r3, #3
 80168c2:	d00f      	beq.n	80168e4 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80168c8:	2b01      	cmp	r3, #1
 80168ca:	d103      	bne.n	80168d4 <draw_quarter_2+0x350>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	899b      	ldrh	r3, [r3, #12]
 80168d0:	2b03      	cmp	r3, #3
 80168d2:	d007      	beq.n	80168e4 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80168d8:	2b01      	cmp	r3, #1
 80168da:	d14e      	bne.n	801697a <draw_quarter_2+0x3f6>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	899b      	ldrh	r3, [r3, #12]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d14a      	bne.n	801697a <draw_quarter_2+0x3f6>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ec:	b29a      	uxth	r2, r3
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	1ad3      	subs	r3, r2, r3
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	b21b      	sxth	r3, r3
 80168fc:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016906:	b29a      	uxth	r2, r3
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801690e:	b29b      	uxth	r3, r3
 8016910:	1ad3      	subs	r3, r2, r3
 8016912:	b29b      	uxth	r3, r3
 8016914:	b21b      	sxth	r3, r3
 8016916:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016920:	b29b      	uxth	r3, r3
 8016922:	3b01      	subs	r3, #1
 8016924:	b29b      	uxth	r3, r3
 8016926:	b21b      	sxth	r3, r3
 8016928:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016932:	b29b      	uxth	r3, r3
 8016934:	3b01      	subs	r3, #1
 8016936:	b29b      	uxth	r3, r3
 8016938:	b21b      	sxth	r3, r3
 801693a:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801693c:	f107 0108 	add.w	r1, r7, #8
 8016940:	f107 0308 	add.w	r3, r7, #8
 8016944:	697a      	ldr	r2, [r7, #20]
 8016946:	4618      	mov	r0, r3
 8016948:	f009 feec 	bl	8020724 <_lv_area_intersect>
 801694c:	4603      	mov	r3, r0
 801694e:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8016950:	7cbb      	ldrb	r3, [r7, #18]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d011      	beq.n	801697a <draw_quarter_2+0x3f6>
            q->draw_ctx->clip_area = &quarter_area;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	699b      	ldr	r3, [r3, #24]
 801695a:	f107 0208 	add.w	r2, r7, #8
 801695e:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6998      	ldr	r0, [r3, #24]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	6919      	ldr	r1, [r3, #16]
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	695b      	ldr	r3, [r3, #20]
 801696c:	461a      	mov	r2, r3
 801696e:	f7fd fba1 	bl	80140b4 <lv_draw_rect>
 8016972:	e002      	b.n	801697a <draw_quarter_2+0x3f6>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8016974:	bf00      	nop
 8016976:	e000      	b.n	801697a <draw_quarter_2+0x3f6>
        if(q->end_quarter == 2) {
 8016978:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	699b      	ldr	r3, [r3, #24]
 801697e:	697a      	ldr	r2, [r7, #20]
 8016980:	609a      	str	r2, [r3, #8]
}
 8016982:	bf00      	nop
 8016984:	371c      	adds	r7, #28
 8016986:	46bd      	mov	sp, r7
 8016988:	bd90      	pop	{r4, r7, pc}

0801698a <draw_quarter_3>:

static void draw_quarter_3(quarter_draw_dsc_t * q)
{
 801698a:	b590      	push	{r4, r7, lr}
 801698c:	b087      	sub	sp, #28
 801698e:	af00      	add	r7, sp, #0
 8016990:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	699b      	ldr	r3, [r3, #24]
 8016996:	689b      	ldr	r3, [r3, #8]
 8016998:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	895b      	ldrh	r3, [r3, #10]
 801699e:	2b03      	cmp	r3, #3
 80169a0:	f040 8097 	bne.w	8016ad2 <draw_quarter_3+0x148>
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	899b      	ldrh	r3, [r3, #12]
 80169a8:	2b03      	cmp	r3, #3
 80169aa:	f040 8092 	bne.w	8016ad2 <draw_quarter_3+0x148>
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	88da      	ldrh	r2, [r3, #6]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	891b      	ldrh	r3, [r3, #8]
 80169b6:	429a      	cmp	r2, r3
 80169b8:	f080 808b 	bcs.w	8016ad2 <draw_quarter_3+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169c4:	b29c      	uxth	r4, r3
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	88db      	ldrh	r3, [r3, #6]
 80169ca:	335a      	adds	r3, #90	; 0x5a
 80169cc:	b29b      	uxth	r3, r3
 80169ce:	b21b      	sxth	r3, r3
 80169d0:	4618      	mov	r0, r3
 80169d2:	f00b f8ad 	bl	8021b30 <lv_trigo_sin>
 80169d6:	4603      	mov	r3, r0
 80169d8:	461a      	mov	r2, r3
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169e0:	4619      	mov	r1, r3
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80169e8:	1acb      	subs	r3, r1, r3
 80169ea:	fb02 f303 	mul.w	r3, r2, r3
 80169ee:	13db      	asrs	r3, r3, #15
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	4423      	add	r3, r4
 80169f4:	b29b      	uxth	r3, r3
 80169f6:	b21b      	sxth	r3, r3
 80169f8:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a02:	b29c      	uxth	r4, r3
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	88db      	ldrh	r3, [r3, #6]
 8016a08:	b21b      	sxth	r3, r3
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f00b f890 	bl	8021b30 <lv_trigo_sin>
 8016a10:	4603      	mov	r3, r0
 8016a12:	461a      	mov	r2, r3
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a1a:	fb02 f303 	mul.w	r3, r2, r3
 8016a1e:	13db      	asrs	r3, r3, #15
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	4423      	add	r3, r4
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	b21b      	sxth	r3, r3
 8016a28:	817b      	strh	r3, [r7, #10]

        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a32:	b29c      	uxth	r4, r3
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	891b      	ldrh	r3, [r3, #8]
 8016a38:	335a      	adds	r3, #90	; 0x5a
 8016a3a:	b29b      	uxth	r3, r3
 8016a3c:	b21b      	sxth	r3, r3
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f00b f876 	bl	8021b30 <lv_trigo_sin>
 8016a44:	4603      	mov	r3, r0
 8016a46:	461a      	mov	r2, r3
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a4e:	fb02 f303 	mul.w	r3, r2, r3
 8016a52:	13db      	asrs	r3, r3, #15
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	4423      	add	r3, r4
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	b21b      	sxth	r3, r3
 8016a5c:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a66:	b29c      	uxth	r4, r3
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	891b      	ldrh	r3, [r3, #8]
 8016a6c:	b21b      	sxth	r3, r3
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f00b f85e 	bl	8021b30 <lv_trigo_sin>
 8016a74:	4603      	mov	r3, r0
 8016a76:	461a      	mov	r2, r3
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a7e:	4619      	mov	r1, r3
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016a86:	1acb      	subs	r3, r1, r3
 8016a88:	fb02 f303 	mul.w	r3, r2, r3
 8016a8c:	13db      	asrs	r3, r3, #15
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	4423      	add	r3, r4
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	b21b      	sxth	r3, r3
 8016a96:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016a98:	f107 0108 	add.w	r1, r7, #8
 8016a9c:	f107 0308 	add.w	r3, r7, #8
 8016aa0:	697a      	ldr	r2, [r7, #20]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f009 fe3e 	bl	8020724 <_lv_area_intersect>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8016aac:	7cfb      	ldrb	r3, [r7, #19]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	f000 815a 	beq.w	8016d68 <draw_quarter_3+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	699b      	ldr	r3, [r3, #24]
 8016ab8:	f107 0208 	add.w	r2, r7, #8
 8016abc:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	6998      	ldr	r0, [r3, #24]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	6919      	ldr	r1, [r3, #16]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	695b      	ldr	r3, [r3, #20]
 8016aca:	461a      	mov	r2, r3
 8016acc:	f7fd faf2 	bl	80140b4 <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8016ad0:	e14a      	b.n	8016d68 <draw_quarter_3+0x3de>
        }
    }
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	895b      	ldrh	r3, [r3, #10]
 8016ad6:	2b03      	cmp	r3, #3
 8016ad8:	d004      	beq.n	8016ae4 <draw_quarter_3+0x15a>
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	899b      	ldrh	r3, [r3, #12]
 8016ade:	2b03      	cmp	r3, #3
 8016ae0:	f040 80d6 	bne.w	8016c90 <draw_quarter_3+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 3) {
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	895b      	ldrh	r3, [r3, #10]
 8016ae8:	2b03      	cmp	r3, #3
 8016aea:	d167      	bne.n	8016bbc <draw_quarter_3+0x232>
            quarter_area.x2 = q->center->x + q->radius;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016af4:	b29a      	uxth	r2, r3
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016afc:	b29b      	uxth	r3, r3
 8016afe:	4413      	add	r3, r2
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	b21b      	sxth	r3, r3
 8016b04:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y - 1;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016b0e:	b29b      	uxth	r3, r3
 8016b10:	3b01      	subs	r3, #1
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	b21b      	sxth	r3, r3
 8016b16:	81fb      	strh	r3, [r7, #14]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b20:	b29c      	uxth	r4, r3
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	88db      	ldrh	r3, [r3, #6]
 8016b26:	335a      	adds	r3, #90	; 0x5a
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	b21b      	sxth	r3, r3
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f00a ffff 	bl	8021b30 <lv_trigo_sin>
 8016b32:	4603      	mov	r3, r0
 8016b34:	461a      	mov	r2, r3
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016b44:	1acb      	subs	r3, r1, r3
 8016b46:	fb02 f303 	mul.w	r3, r2, r3
 8016b4a:	13db      	asrs	r3, r3, #15
 8016b4c:	b29b      	uxth	r3, r3
 8016b4e:	4423      	add	r3, r4
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	b21b      	sxth	r3, r3
 8016b54:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016b5e:	b29c      	uxth	r4, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	88db      	ldrh	r3, [r3, #6]
 8016b64:	b21b      	sxth	r3, r3
 8016b66:	4618      	mov	r0, r3
 8016b68:	f00a ffe2 	bl	8021b30 <lv_trigo_sin>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	461a      	mov	r2, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b76:	fb02 f303 	mul.w	r3, r2, r3
 8016b7a:	13db      	asrs	r3, r3, #15
 8016b7c:	b29b      	uxth	r3, r3
 8016b7e:	4423      	add	r3, r4
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	b21b      	sxth	r3, r3
 8016b84:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016b86:	f107 0108 	add.w	r1, r7, #8
 8016b8a:	f107 0308 	add.w	r3, r7, #8
 8016b8e:	697a      	ldr	r2, [r7, #20]
 8016b90:	4618      	mov	r0, r3
 8016b92:	f009 fdc7 	bl	8020724 <_lv_area_intersect>
 8016b96:	4603      	mov	r3, r0
 8016b98:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8016b9a:	7c7b      	ldrb	r3, [r7, #17]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d00d      	beq.n	8016bbc <draw_quarter_3+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	699b      	ldr	r3, [r3, #24]
 8016ba4:	f107 0208 	add.w	r2, r7, #8
 8016ba8:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	6998      	ldr	r0, [r3, #24]
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	6919      	ldr	r1, [r3, #16]
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	695b      	ldr	r3, [r3, #20]
 8016bb6:	461a      	mov	r2, r3
 8016bb8:	f7fd fa7c 	bl	80140b4 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 3) {
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	899b      	ldrh	r3, [r3, #12]
 8016bc0:	2b03      	cmp	r3, #3
 8016bc2:	f040 80d3 	bne.w	8016d6c <draw_quarter_3+0x3e2>
            quarter_area.x1 = q->center->x;
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bce:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y - q->radius;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016bd8:	b29a      	uxth	r2, r3
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	1ad3      	subs	r3, r2, r3
 8016be4:	b29b      	uxth	r3, r3
 8016be6:	b21b      	sxth	r3, r3
 8016be8:	817b      	strh	r3, [r7, #10]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bf2:	b29c      	uxth	r4, r3
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	891b      	ldrh	r3, [r3, #8]
 8016bf8:	335a      	adds	r3, #90	; 0x5a
 8016bfa:	b29b      	uxth	r3, r3
 8016bfc:	b21b      	sxth	r3, r3
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f00a ff96 	bl	8021b30 <lv_trigo_sin>
 8016c04:	4603      	mov	r3, r0
 8016c06:	461a      	mov	r2, r3
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c0e:	fb02 f303 	mul.w	r3, r2, r3
 8016c12:	13db      	asrs	r3, r3, #15
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	4423      	add	r3, r4
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	b21b      	sxth	r3, r3
 8016c1c:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c26:	b29c      	uxth	r4, r3
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	891b      	ldrh	r3, [r3, #8]
 8016c2c:	b21b      	sxth	r3, r3
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f00a ff7e 	bl	8021b30 <lv_trigo_sin>
 8016c34:	4603      	mov	r3, r0
 8016c36:	461a      	mov	r2, r3
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c3e:	4619      	mov	r1, r3
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016c46:	1acb      	subs	r3, r1, r3
 8016c48:	fb02 f303 	mul.w	r3, r2, r3
 8016c4c:	13db      	asrs	r3, r3, #15
 8016c4e:	b29b      	uxth	r3, r3
 8016c50:	4423      	add	r3, r4
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	b21b      	sxth	r3, r3
 8016c56:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016c58:	f107 0108 	add.w	r1, r7, #8
 8016c5c:	f107 0308 	add.w	r3, r7, #8
 8016c60:	697a      	ldr	r2, [r7, #20]
 8016c62:	4618      	mov	r0, r3
 8016c64:	f009 fd5e 	bl	8020724 <_lv_area_intersect>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8016c6c:	7c3b      	ldrb	r3, [r7, #16]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d07c      	beq.n	8016d6c <draw_quarter_3+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	699b      	ldr	r3, [r3, #24]
 8016c76:	f107 0208 	add.w	r2, r7, #8
 8016c7a:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6998      	ldr	r0, [r3, #24]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	6919      	ldr	r1, [r3, #16]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	695b      	ldr	r3, [r3, #20]
 8016c88:	461a      	mov	r2, r3
 8016c8a:	f7fd fa13 	bl	80140b4 <lv_draw_rect>
        if(q->end_quarter == 3) {
 8016c8e:	e06d      	b.n	8016d6c <draw_quarter_3+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	895a      	ldrh	r2, [r3, #10]
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	899b      	ldrh	r3, [r3, #12]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d109      	bne.n	8016cb0 <draw_quarter_3+0x326>
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	895b      	ldrh	r3, [r3, #10]
 8016ca0:	2b03      	cmp	r3, #3
 8016ca2:	d005      	beq.n	8016cb0 <draw_quarter_3+0x326>
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	891a      	ldrh	r2, [r3, #8]
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	88db      	ldrh	r3, [r3, #6]
 8016cac:	429a      	cmp	r2, r3
 8016cae:	d317      	bcc.n	8016ce0 <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8016cb4:	2b02      	cmp	r3, #2
 8016cb6:	d103      	bne.n	8016cc0 <draw_quarter_3+0x336>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	899b      	ldrh	r3, [r3, #12]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d00f      	beq.n	8016ce0 <draw_quarter_3+0x356>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	d103      	bne.n	8016cd0 <draw_quarter_3+0x346>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	899b      	ldrh	r3, [r3, #12]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d007      	beq.n	8016ce0 <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016cd4:	2b02      	cmp	r3, #2
 8016cd6:	d14a      	bne.n	8016d6e <draw_quarter_3+0x3e4>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	899b      	ldrh	r3, [r3, #12]
 8016cdc:	2b01      	cmp	r3, #1
 8016cde:	d146      	bne.n	8016d6e <draw_quarter_3+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ce8:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016cf2:	b29a      	uxth	r2, r3
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cfa:	b29b      	uxth	r3, r3
 8016cfc:	1ad3      	subs	r3, r2, r3
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	b21b      	sxth	r3, r3
 8016d02:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d0c:	b29a      	uxth	r2, r3
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	4413      	add	r3, r2
 8016d18:	b29b      	uxth	r3, r3
 8016d1a:	b21b      	sxth	r3, r3
 8016d1c:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d26:	b29b      	uxth	r3, r3
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	b21b      	sxth	r3, r3
 8016d2e:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016d30:	f107 0108 	add.w	r1, r7, #8
 8016d34:	f107 0308 	add.w	r3, r7, #8
 8016d38:	697a      	ldr	r2, [r7, #20]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f009 fcf2 	bl	8020724 <_lv_area_intersect>
 8016d40:	4603      	mov	r3, r0
 8016d42:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8016d44:	7cbb      	ldrb	r3, [r7, #18]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d011      	beq.n	8016d6e <draw_quarter_3+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	699b      	ldr	r3, [r3, #24]
 8016d4e:	f107 0208 	add.w	r2, r7, #8
 8016d52:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6998      	ldr	r0, [r3, #24]
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6919      	ldr	r1, [r3, #16]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	695b      	ldr	r3, [r3, #20]
 8016d60:	461a      	mov	r2, r3
 8016d62:	f7fd f9a7 	bl	80140b4 <lv_draw_rect>
 8016d66:	e002      	b.n	8016d6e <draw_quarter_3+0x3e4>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8016d68:	bf00      	nop
 8016d6a:	e000      	b.n	8016d6e <draw_quarter_3+0x3e4>
        if(q->end_quarter == 3) {
 8016d6c:	bf00      	nop
        }
    }

    q->draw_ctx->clip_area = clip_area_ori;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	699b      	ldr	r3, [r3, #24]
 8016d72:	697a      	ldr	r2, [r7, #20]
 8016d74:	609a      	str	r2, [r3, #8]
}
 8016d76:	bf00      	nop
 8016d78:	371c      	adds	r7, #28
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd90      	pop	{r4, r7, pc}

08016d7e <get_rounded_area>:

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 8016d7e:	b590      	push	{r4, r7, lr}
 8016d80:	b08b      	sub	sp, #44	; 0x2c
 8016d82:	af00      	add	r7, sp, #0
 8016d84:	607b      	str	r3, [r7, #4]
 8016d86:	4603      	mov	r3, r0
 8016d88:	81fb      	strh	r3, [r7, #14]
 8016d8a:	460b      	mov	r3, r1
 8016d8c:	81bb      	strh	r3, [r7, #12]
 8016d8e:	4613      	mov	r3, r2
 8016d90:	72fb      	strb	r3, [r7, #11]
    const uint8_t ps = 8;
 8016d92:	2308      	movs	r3, #8
 8016d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t pa = 127;
 8016d98:	237f      	movs	r3, #127	; 0x7f
 8016d9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    int32_t thick_half = thickness / 2;
 8016d9e:	7afb      	ldrb	r3, [r7, #11]
 8016da0:	085b      	lsrs	r3, r3, #1
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	623b      	str	r3, [r7, #32]
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 8016da6:	7afb      	ldrb	r3, [r7, #11]
 8016da8:	f003 0301 	and.w	r3, r3, #1
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	bf0c      	ite	eq
 8016db0:	2301      	moveq	r3, #1
 8016db2:	2300      	movne	r3, #0
 8016db4:	b2db      	uxtb	r3, r3
 8016db6:	77fb      	strb	r3, [r7, #31]

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8016db8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016dbc:	6a3b      	ldr	r3, [r7, #32]
 8016dbe:	1ad4      	subs	r4, r2, r3
 8016dc0:	89fb      	ldrh	r3, [r7, #14]
 8016dc2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8016dc6:	b29b      	uxth	r3, r3
 8016dc8:	b21b      	sxth	r3, r3
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f00a feb0 	bl	8021b30 <lv_trigo_sin>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	fb03 f204 	mul.w	r2, r3, r4
 8016dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dda:	f1c3 030f 	rsb	r3, r3, #15
 8016dde:	fa42 f303 	asr.w	r3, r2, r3
 8016de2:	61bb      	str	r3, [r7, #24]
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 8016de4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016de8:	6a3b      	ldr	r3, [r7, #32]
 8016dea:	1ad4      	subs	r4, r2, r3
 8016dec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016df0:	4618      	mov	r0, r3
 8016df2:	f00a fe9d 	bl	8021b30 <lv_trigo_sin>
 8016df6:	4603      	mov	r3, r0
 8016df8:	fb03 f204 	mul.w	r2, r3, r4
 8016dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e00:	f1c3 030f 	rsb	r3, r3, #15
 8016e04:	fa42 f303 	asr.w	r3, r2, r3
 8016e08:	617b      	str	r3, [r7, #20]

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 8016e0a:	69bb      	ldr	r3, [r7, #24]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	dd1f      	ble.n	8016e50 <get_rounded_area+0xd2>
        cir_x = (cir_x - pa) >> ps;
 8016e10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e14:	69ba      	ldr	r2, [r7, #24]
 8016e16:	1ad2      	subs	r2, r2, r3
 8016e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e1c:	fa42 f303 	asr.w	r3, r2, r3
 8016e20:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half + thick_corr;
 8016e22:	69bb      	ldr	r3, [r7, #24]
 8016e24:	b29a      	uxth	r2, r3
 8016e26:	6a3b      	ldr	r3, [r7, #32]
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	1ad3      	subs	r3, r2, r3
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	7ffb      	ldrb	r3, [r7, #31]
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	4413      	add	r3, r2
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	b21a      	sxth	r2, r3
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half;
 8016e3c:	69bb      	ldr	r3, [r7, #24]
 8016e3e:	b29a      	uxth	r2, r3
 8016e40:	6a3b      	ldr	r3, [r7, #32]
 8016e42:	b29b      	uxth	r3, r3
 8016e44:	4413      	add	r3, r2
 8016e46:	b29b      	uxth	r3, r3
 8016e48:	b21a      	sxth	r2, r3
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	809a      	strh	r2, [r3, #4]
 8016e4e:	e01e      	b.n	8016e8e <get_rounded_area+0x110>
    }
    else {
        cir_x = (cir_x + pa) >> ps;
 8016e50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016e54:	69bb      	ldr	r3, [r7, #24]
 8016e56:	441a      	add	r2, r3
 8016e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e5c:	fa42 f303 	asr.w	r3, r2, r3
 8016e60:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half;
 8016e62:	69bb      	ldr	r3, [r7, #24]
 8016e64:	b29a      	uxth	r2, r3
 8016e66:	6a3b      	ldr	r3, [r7, #32]
 8016e68:	b29b      	uxth	r3, r3
 8016e6a:	1ad3      	subs	r3, r2, r3
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	b21a      	sxth	r2, r3
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 8016e74:	69bb      	ldr	r3, [r7, #24]
 8016e76:	b29a      	uxth	r2, r3
 8016e78:	6a3b      	ldr	r3, [r7, #32]
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	4413      	add	r3, r2
 8016e7e:	b29a      	uxth	r2, r3
 8016e80:	7ffb      	ldrb	r3, [r7, #31]
 8016e82:	b29b      	uxth	r3, r3
 8016e84:	1ad3      	subs	r3, r2, r3
 8016e86:	b29b      	uxth	r3, r3
 8016e88:	b21a      	sxth	r2, r3
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	809a      	strh	r2, [r3, #4]
    }

    if(cir_y > 0) {
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	dd1f      	ble.n	8016ed4 <get_rounded_area+0x156>
        cir_y = (cir_y - pa) >> ps;
 8016e94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e98:	697a      	ldr	r2, [r7, #20]
 8016e9a:	1ad2      	subs	r2, r2, r3
 8016e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ea0:	fa42 f303 	asr.w	r3, r2, r3
 8016ea4:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half + thick_corr;
 8016ea6:	697b      	ldr	r3, [r7, #20]
 8016ea8:	b29a      	uxth	r2, r3
 8016eaa:	6a3b      	ldr	r3, [r7, #32]
 8016eac:	b29b      	uxth	r3, r3
 8016eae:	1ad3      	subs	r3, r2, r3
 8016eb0:	b29a      	uxth	r2, r3
 8016eb2:	7ffb      	ldrb	r3, [r7, #31]
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	4413      	add	r3, r2
 8016eb8:	b29b      	uxth	r3, r3
 8016eba:	b21a      	sxth	r2, r3
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half;
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	b29a      	uxth	r2, r3
 8016ec4:	6a3b      	ldr	r3, [r7, #32]
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	4413      	add	r3, r2
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	b21a      	sxth	r2, r3
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	80da      	strh	r2, [r3, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 8016ed2:	e01e      	b.n	8016f12 <get_rounded_area+0x194>
        cir_y = (cir_y + pa) >> ps;
 8016ed4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016ed8:	697b      	ldr	r3, [r7, #20]
 8016eda:	441a      	add	r2, r3
 8016edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ee0:	fa42 f303 	asr.w	r3, r2, r3
 8016ee4:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half;
 8016ee6:	697b      	ldr	r3, [r7, #20]
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	6a3b      	ldr	r3, [r7, #32]
 8016eec:	b29b      	uxth	r3, r3
 8016eee:	1ad3      	subs	r3, r2, r3
 8016ef0:	b29b      	uxth	r3, r3
 8016ef2:	b21a      	sxth	r2, r3
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	b29a      	uxth	r2, r3
 8016efc:	6a3b      	ldr	r3, [r7, #32]
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	4413      	add	r3, r2
 8016f02:	b29a      	uxth	r2, r3
 8016f04:	7ffb      	ldrb	r3, [r7, #31]
 8016f06:	b29b      	uxth	r3, r3
 8016f08:	1ad3      	subs	r3, r2, r3
 8016f0a:	b29b      	uxth	r3, r3
 8016f0c:	b21a      	sxth	r2, r3
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	80da      	strh	r2, [r3, #6]
}
 8016f12:	bf00      	nop
 8016f14:	372c      	adds	r7, #44	; 0x2c
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd90      	pop	{r4, r7, pc}

08016f1a <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8016f1a:	b480      	push	{r7}
 8016f1c:	b085      	sub	sp, #20
 8016f1e:	af00      	add	r7, sp, #0
 8016f20:	7138      	strb	r0, [r7, #4]
 8016f22:	7039      	strb	r1, [r7, #0]
 8016f24:	4613      	mov	r3, r2
 8016f26:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 8016f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	da01      	bge.n	8016f34 <lv_color_mix+0x1a>
 8016f30:	793b      	ldrb	r3, [r7, #4]
 8016f32:	e000      	b.n	8016f36 <lv_color_mix+0x1c>
 8016f34:	783b      	ldrb	r3, [r7, #0]
 8016f36:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8016f38:	7b3b      	ldrb	r3, [r7, #12]
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	3714      	adds	r7, #20
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f44:	4770      	bx	lr

08016f46 <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 8016f46:	b480      	push	{r7}
 8016f48:	b083      	sub	sp, #12
 8016f4a:	af00      	add	r7, sp, #0
 8016f4c:	7138      	strb	r0, [r7, #4]
 8016f4e:	460b      	mov	r3, r1
 8016f50:	603a      	str	r2, [r7, #0]
 8016f52:	71fb      	strb	r3, [r7, #7]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
#else
    (void) mix;
    /*Pre-multiplication can't be used with 1 bpp*/
    out[0] = LV_COLOR_GET_R(c);
 8016f54:	793b      	ldrb	r3, [r7, #4]
 8016f56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016f5a:	b2db      	uxtb	r3, r3
 8016f5c:	b29a      	uxth	r2, r3
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 8016f62:	793b      	ldrb	r3, [r7, #4]
 8016f64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016f68:	b2da      	uxtb	r2, r3
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	3302      	adds	r3, #2
 8016f6e:	b292      	uxth	r2, r2
 8016f70:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 8016f72:	793b      	ldrb	r3, [r7, #4]
 8016f74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016f78:	b2da      	uxtb	r2, r3
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	3304      	adds	r3, #4
 8016f7e:	b292      	uxth	r2, r2
 8016f80:	801a      	strh	r2, [r3, #0]
#endif

}
 8016f82:	bf00      	nop
 8016f84:	370c      	adds	r7, #12
 8016f86:	46bd      	mov	sp, r7
 8016f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8c:	4770      	bx	lr

08016f8e <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 8016f8e:	b480      	push	{r7}
 8016f90:	b085      	sub	sp, #20
 8016f92:	af00      	add	r7, sp, #0
 8016f94:	6078      	str	r0, [r7, #4]
 8016f96:	7039      	strb	r1, [r7, #0]
 8016f98:	4613      	mov	r3, r2
 8016f9a:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    /*Restore color1*/
    lv_color_t c1;
    LV_COLOR_SET_R(c1, premult_c1[0]);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	881b      	ldrh	r3, [r3, #0]
 8016fa0:	f003 0301 	and.w	r3, r3, #1
 8016fa4:	b2da      	uxtb	r2, r3
 8016fa6:	7a3b      	ldrb	r3, [r7, #8]
 8016fa8:	f362 0300 	bfi	r3, r2, #0, #1
 8016fac:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	3302      	adds	r3, #2
 8016fb2:	881b      	ldrh	r3, [r3, #0]
 8016fb4:	f003 0301 	and.w	r3, r3, #1
 8016fb8:	b2da      	uxtb	r2, r3
 8016fba:	7a3b      	ldrb	r3, [r7, #8]
 8016fbc:	f362 0300 	bfi	r3, r2, #0, #1
 8016fc0:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	3304      	adds	r3, #4
 8016fc6:	881b      	ldrh	r3, [r3, #0]
 8016fc8:	f003 0301 	and.w	r3, r3, #1
 8016fcc:	b2da      	uxtb	r2, r3
 8016fce:	7a3b      	ldrb	r3, [r7, #8]
 8016fd0:	f362 0300 	bfi	r3, r2, #0, #1
 8016fd4:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8016fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	da01      	bge.n	8016fe2 <lv_color_mix_premult+0x54>
 8016fde:	783b      	ldrb	r3, [r7, #0]
 8016fe0:	e000      	b.n	8016fe4 <lv_color_mix_premult+0x56>
 8016fe2:	7a3b      	ldrb	r3, [r7, #8]
 8016fe4:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8016fe6:	7b3b      	ldrb	r3, [r7, #12]
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	3714      	adds	r7, #20
 8016fec:	46bd      	mov	sp, r7
 8016fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff2:	4770      	bx	lr

08016ff4 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8016ff4:	b480      	push	{r7}
 8016ff6:	b083      	sub	sp, #12
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	71fb      	strb	r3, [r7, #7]
 8016ffe:	460b      	mov	r3, r1
 8017000:	71bb      	strb	r3, [r7, #6]
 8017002:	4613      	mov	r3, r2
 8017004:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8017006:	797b      	ldrb	r3, [r7, #5]
 8017008:	09db      	lsrs	r3, r3, #7
 801700a:	b2da      	uxtb	r2, r3
 801700c:	79bb      	ldrb	r3, [r7, #6]
 801700e:	09db      	lsrs	r3, r3, #7
 8017010:	b2db      	uxtb	r3, r3
 8017012:	4313      	orrs	r3, r2
 8017014:	b2da      	uxtb	r2, r3
 8017016:	79fb      	ldrb	r3, [r7, #7]
 8017018:	09db      	lsrs	r3, r3, #7
 801701a:	b2db      	uxtb	r3, r3
 801701c:	4313      	orrs	r3, r2
 801701e:	b2db      	uxtb	r3, r3
}
 8017020:	4618      	mov	r0, r3
 8017022:	370c      	adds	r7, #12
 8017024:	46bd      	mov	sp, r7
 8017026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702a:	4770      	bx	lr

0801702c <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8017030:	2200      	movs	r2, #0
 8017032:	2100      	movs	r1, #0
 8017034:	2000      	movs	r0, #0
 8017036:	f7ff ffdd 	bl	8016ff4 <lv_color_make>
 801703a:	4603      	mov	r3, r0
}
 801703c:	4618      	mov	r0, r3
 801703e:	bd80      	pop	{r7, pc}

08017040 <lv_area_get_width>:
{
 8017040:	b480      	push	{r7}
 8017042:	b083      	sub	sp, #12
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801704e:	b29a      	uxth	r2, r3
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017056:	b29b      	uxth	r3, r3
 8017058:	1ad3      	subs	r3, r2, r3
 801705a:	b29b      	uxth	r3, r3
 801705c:	3301      	adds	r3, #1
 801705e:	b29b      	uxth	r3, r3
 8017060:	b21b      	sxth	r3, r3
}
 8017062:	4618      	mov	r0, r3
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr

0801706e <lv_area_get_height>:
{
 801706e:	b480      	push	{r7}
 8017070:	b083      	sub	sp, #12
 8017072:	af00      	add	r7, sp, #0
 8017074:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801707c:	b29a      	uxth	r2, r3
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017084:	b29b      	uxth	r3, r3
 8017086:	1ad3      	subs	r3, r2, r3
 8017088:	b29b      	uxth	r3, r3
 801708a:	3301      	adds	r3, #1
 801708c:	b29b      	uxth	r3, r3
 801708e:	b21b      	sxth	r3, r3
}
 8017090:	4618      	mov	r0, r3
 8017092:	370c      	adds	r7, #12
 8017094:	46bd      	mov	sp, r7
 8017096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709a:	4770      	bx	lr

0801709c <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6039      	str	r1, [r7, #0]
    /*Do not draw transparent things*/
    if(dsc->opa <= LV_OPA_MIN) return;
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	7e1b      	ldrb	r3, [r3, #24]
 80170aa:	2b02      	cmp	r3, #2
 80170ac:	d91c      	bls.n	80170e8 <lv_draw_sw_blend+0x4c>

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	6819      	ldr	r1, [r3, #0]
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	689a      	ldr	r2, [r3, #8]
 80170b6:	f107 0308 	add.w	r3, r7, #8
 80170ba:	4618      	mov	r0, r3
 80170bc:	f009 fb32 	bl	8020724 <_lv_area_intersect>
 80170c0:	4603      	mov	r3, r0
 80170c2:	f083 0301 	eor.w	r3, r3, #1
 80170c6:	b2db      	uxtb	r3, r3
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d10f      	bne.n	80170ec <lv_draw_sw_blend+0x50>

    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d003      	beq.n	80170dc <lv_draw_sw_blend+0x40>
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	4798      	blx	r3

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170e0:	6839      	ldr	r1, [r7, #0]
 80170e2:	6878      	ldr	r0, [r7, #4]
 80170e4:	4798      	blx	r3
 80170e6:	e002      	b.n	80170ee <lv_draw_sw_blend+0x52>
    if(dsc->opa <= LV_OPA_MIN) return;
 80170e8:	bf00      	nop
 80170ea:	e000      	b.n	80170ee <lv_draw_sw_blend+0x52>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80170ec:	bf00      	nop
}
 80170ee:	3710      	adds	r7, #16
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}

080170f4 <lv_draw_sw_blend_basic>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 80170f4:	b590      	push	{r4, r7, lr}
 80170f6:	b095      	sub	sp, #84	; 0x54
 80170f8:	af06      	add	r7, sp, #24
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	6039      	str	r1, [r7, #0]
    lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	68db      	ldr	r3, [r3, #12]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d101      	bne.n	801710a <lv_draw_sw_blend_basic+0x16>
 8017106:	2300      	movs	r3, #0
 8017108:	637b      	str	r3, [r7, #52]	; 0x34
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	68db      	ldr	r3, [r3, #12]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d004      	beq.n	801711c <lv_draw_sw_blend_basic+0x28>
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	7c1b      	ldrb	r3, [r3, #16]
 8017116:	2b00      	cmp	r3, #0
 8017118:	f000 8191 	beq.w	801743e <lv_draw_sw_blend_basic+0x34a>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	7c1b      	ldrb	r3, [r3, #16]
 8017120:	2b01      	cmp	r3, #1
 8017122:	d102      	bne.n	801712a <lv_draw_sw_blend_basic+0x36>
 8017124:	2300      	movs	r3, #0
 8017126:	637b      	str	r3, [r7, #52]	; 0x34
 8017128:	e002      	b.n	8017130 <lv_draw_sw_blend_basic+0x3c>
    else mask = dsc->mask_buf;
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	68db      	ldr	r3, [r3, #12]
 801712e:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	4618      	mov	r0, r3
 8017136:	f7ff ff83 	bl	8017040 <lv_area_get_width>
 801713a:	4603      	mov	r3, r0
 801713c:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	6819      	ldr	r1, [r3, #0]
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	689a      	ldr	r2, [r3, #8]
 8017146:	f107 030c 	add.w	r3, r7, #12
 801714a:	4618      	mov	r0, r3
 801714c:	f009 faea 	bl	8020724 <_lv_area_intersect>
 8017150:	4603      	mov	r3, r0
 8017152:	f083 0301 	eor.w	r3, r3, #1
 8017156:	b2db      	uxtb	r3, r3
 8017158:	2b00      	cmp	r3, #0
 801715a:	f040 8172 	bne.w	8017442 <lv_draw_sw_blend_basic+0x34e>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 801715e:	f7f7 fac3 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 8017162:	61f8      	str	r0, [r7, #28]
    lv_color_t * dest_buf = draw_ctx->buf;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	633b      	str	r3, [r7, #48]	; 0x30
    if(disp->driver->set_px_cb == NULL) {
 801716a:	69fb      	ldr	r3, [r7, #28]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	69db      	ldr	r3, [r3, #28]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d143      	bne.n	80171fc <lv_draw_sw_blend_basic+0x108>
        if(disp->driver->screen_transp == 0) {
 8017174:	69fb      	ldr	r3, [r7, #28]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	7c1b      	ldrb	r3, [r3, #16]
 801717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801717e:	b2db      	uxtb	r3, r3
 8017180:	2b00      	cmp	r3, #0
 8017182:	d119      	bne.n	80171b8 <lv_draw_sw_blend_basic+0xc4>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8017184:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017188:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801718c:	4611      	mov	r1, r2
 801718e:	687a      	ldr	r2, [r7, #4]
 8017190:	6852      	ldr	r2, [r2, #4]
 8017192:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017196:	1a8a      	subs	r2, r1, r2
 8017198:	fb03 f202 	mul.w	r2, r3, r2
 801719c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80171a0:	4619      	mov	r1, r3
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171aa:	1acb      	subs	r3, r1, r3
 80171ac:	4413      	add	r3, r2
 80171ae:	461a      	mov	r2, r3
 80171b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b2:	4413      	add	r3, r2
 80171b4:	633b      	str	r3, [r7, #48]	; 0x30
 80171b6:	e021      	b.n	80171fc <lv_draw_sw_blend_basic+0x108>
        }
        else {
            /*With LV_COLOR_DEPTH 16 it means ARGB8565 (3 bytes format)*/
            uint8_t * dest_buf8 = (uint8_t *) dest_buf;
 80171b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ba:	61bb      	str	r3, [r7, #24]
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80171bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80171c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80171c4:	4611      	mov	r1, r2
 80171c6:	687a      	ldr	r2, [r7, #4]
 80171c8:	6852      	ldr	r2, [r2, #4]
 80171ca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80171ce:	1a8a      	subs	r2, r1, r2
 80171d0:	fb02 f303 	mul.w	r3, r2, r3
 80171d4:	005b      	lsls	r3, r3, #1
 80171d6:	461a      	mov	r2, r3
 80171d8:	69bb      	ldr	r3, [r7, #24]
 80171da:	4413      	add	r3, r2
 80171dc:	61bb      	str	r3, [r7, #24]
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80171de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80171e2:	461a      	mov	r2, r3
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	685b      	ldr	r3, [r3, #4]
 80171e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171ec:	1ad3      	subs	r3, r2, r3
 80171ee:	005b      	lsls	r3, r3, #1
 80171f0:	461a      	mov	r2, r3
 80171f2:	69bb      	ldr	r3, [r7, #24]
 80171f4:	4413      	add	r3, r2
 80171f6:	61bb      	str	r3, [r7, #24]
            dest_buf = (lv_color_t *)dest_buf8;
 80171f8:	69bb      	ldr	r3, [r7, #24]
 80171fa:	633b      	str	r3, [r7, #48]	; 0x30
        }
    }

    const lv_color_t * src_buf = dsc->src_buf;
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t src_stride;
    if(src_buf) {
 8017202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017204:	2b00      	cmp	r3, #0
 8017206:	d020      	beq.n	801724a <lv_draw_sw_blend_basic+0x156>
        src_stride = lv_area_get_width(dsc->blend_area);
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	4618      	mov	r0, r3
 801720e:	f7ff ff17 	bl	8017040 <lv_area_get_width>
 8017212:	4603      	mov	r3, r0
 8017214:	857b      	strh	r3, [r7, #42]	; 0x2a
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 8017216:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801721a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801721e:	4611      	mov	r1, r2
 8017220:	683a      	ldr	r2, [r7, #0]
 8017222:	6812      	ldr	r2, [r2, #0]
 8017224:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017228:	1a8a      	subs	r2, r1, r2
 801722a:	fb03 f202 	mul.w	r2, r3, r2
 801722e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017232:	4619      	mov	r1, r3
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	f9b3 3000 	ldrsh.w	r3, [r3]
 801723c:	1acb      	subs	r3, r1, r3
 801723e:	4413      	add	r3, r2
 8017240:	461a      	mov	r2, r3
 8017242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017244:	4413      	add	r3, r2
 8017246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017248:	e001      	b.n	801724e <lv_draw_sw_blend_basic+0x15a>
    }
    else {
        src_stride = 0;
 801724a:	2300      	movs	r3, #0
 801724c:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    lv_coord_t mask_stride;
    if(mask) {
 801724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017250:	2b00      	cmp	r3, #0
 8017252:	d047      	beq.n	80172e4 <lv_draw_sw_blend_basic+0x1f0>
        /*Round the values in the mask if anti-aliasing is disabled*/
        if(disp->driver->antialiasing == 0) {
 8017254:	69fb      	ldr	r3, [r7, #28]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	7c1b      	ldrb	r3, [r3, #16]
 801725a:	f003 0308 	and.w	r3, r3, #8
 801725e:	b2db      	uxtb	r3, r3
 8017260:	2b00      	cmp	r3, #0
 8017262:	d11e      	bne.n	80172a2 <lv_draw_sw_blend_basic+0x1ae>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	695b      	ldr	r3, [r3, #20]
 8017268:	4618      	mov	r0, r3
 801726a:	f009 f9ce 	bl	802060a <lv_area_get_size>
 801726e:	4603      	mov	r3, r0
 8017270:	617b      	str	r3, [r7, #20]
            int32_t i;
            for(i = 0; i < mask_size; i++) {
 8017272:	2300      	movs	r3, #0
 8017274:	627b      	str	r3, [r7, #36]	; 0x24
 8017276:	e010      	b.n	801729a <lv_draw_sw_blend_basic+0x1a6>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8017278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801727a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801727c:	4413      	add	r3, r2
 801727e:	781b      	ldrb	r3, [r3, #0]
 8017280:	2b80      	cmp	r3, #128	; 0x80
 8017282:	d901      	bls.n	8017288 <lv_draw_sw_blend_basic+0x194>
 8017284:	21ff      	movs	r1, #255	; 0xff
 8017286:	e000      	b.n	801728a <lv_draw_sw_blend_basic+0x196>
 8017288:	2100      	movs	r1, #0
 801728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801728c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801728e:	4413      	add	r3, r2
 8017290:	460a      	mov	r2, r1
 8017292:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 8017294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017296:	3301      	adds	r3, #1
 8017298:	627b      	str	r3, [r7, #36]	; 0x24
 801729a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801729c:	697b      	ldr	r3, [r7, #20]
 801729e:	429a      	cmp	r2, r3
 80172a0:	dbea      	blt.n	8017278 <lv_draw_sw_blend_basic+0x184>
            }
        }

        mask_stride = lv_area_get_width(dsc->mask_area);
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	695b      	ldr	r3, [r3, #20]
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7ff feca 	bl	8017040 <lv_area_get_width>
 80172ac:	4603      	mov	r3, r0
 80172ae:	853b      	strh	r3, [r7, #40]	; 0x28
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 80172b0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80172b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80172b8:	4611      	mov	r1, r2
 80172ba:	683a      	ldr	r2, [r7, #0]
 80172bc:	6952      	ldr	r2, [r2, #20]
 80172be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80172c2:	1a8a      	subs	r2, r1, r2
 80172c4:	fb03 f202 	mul.w	r2, r3, r2
 80172c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80172cc:	4619      	mov	r1, r3
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	695b      	ldr	r3, [r3, #20]
 80172d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172d6:	1acb      	subs	r3, r1, r3
 80172d8:	4413      	add	r3, r2
 80172da:	461a      	mov	r2, r3
 80172dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172de:	4413      	add	r3, r2
 80172e0:	637b      	str	r3, [r7, #52]	; 0x34
 80172e2:	e001      	b.n	80172e8 <lv_draw_sw_blend_basic+0x1f4>

    }
    else {
        mask_stride = 0;
 80172e4:	2300      	movs	r3, #0
 80172e6:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	685b      	ldr	r3, [r3, #4]
 80172ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	425b      	negs	r3, r3
 80172f4:	b29b      	uxth	r3, r3
 80172f6:	b219      	sxth	r1, r3
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	685b      	ldr	r3, [r3, #4]
 80172fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017300:	b29b      	uxth	r3, r3
 8017302:	425b      	negs	r3, r3
 8017304:	b29b      	uxth	r3, r3
 8017306:	b21a      	sxth	r2, r3
 8017308:	f107 030c 	add.w	r3, r7, #12
 801730c:	4618      	mov	r0, r3
 801730e:	f009 f9d3 	bl	80206b8 <lv_area_move>


    if(disp->driver->set_px_cb) {
 8017312:	69fb      	ldr	r3, [r7, #28]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	69db      	ldr	r3, [r3, #28]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d02c      	beq.n	8017376 <lv_draw_sw_blend_basic+0x282>
        if(dsc->src_buf == NULL) {
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d113      	bne.n	801734c <lv_draw_sw_blend_basic+0x258>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	7e1a      	ldrb	r2, [r3, #24]
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 801732e:	f107 000c 	add.w	r0, r7, #12
 8017332:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8017336:	9102      	str	r1, [sp, #8]
 8017338:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801733a:	9101      	str	r1, [sp, #4]
 801733c:	9200      	str	r2, [sp, #0]
 801733e:	7a1b      	ldrb	r3, [r3, #8]
 8017340:	4622      	mov	r2, r4
 8017342:	4601      	mov	r1, r0
 8017344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017346:	f000 f880 	bl	801744a <fill_set_px>
 801734a:	e07b      	b.n	8017444 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	7e1b      	ldrb	r3, [r3, #24]
 8017350:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8017354:	f107 010c 	add.w	r1, r7, #12
 8017358:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 801735c:	9203      	str	r2, [sp, #12]
 801735e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017360:	9202      	str	r2, [sp, #8]
 8017362:	9301      	str	r3, [sp, #4]
 8017364:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017368:	9300      	str	r3, [sp, #0]
 801736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736c:	4602      	mov	r2, r0
 801736e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017370:	f000 fc02 	bl	8017b78 <map_set_px>
 8017374:	e066      	b.n	8017444 <lv_draw_sw_blend_basic+0x350>
        else {
            map_argb(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
        }
    }
#endif
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8017376:	683b      	ldr	r3, [r7, #0]
 8017378:	7e5b      	ldrb	r3, [r3, #25]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d12c      	bne.n	80173d8 <lv_draw_sw_blend_basic+0x2e4>
        if(dsc->src_buf == NULL) {
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d113      	bne.n	80173ae <lv_draw_sw_blend_basic+0x2ba>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	7e1a      	ldrb	r2, [r3, #24]
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 8017390:	f107 000c 	add.w	r0, r7, #12
 8017394:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8017398:	9102      	str	r1, [sp, #8]
 801739a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801739c:	9101      	str	r1, [sp, #4]
 801739e:	9200      	str	r2, [sp, #0]
 80173a0:	7a1b      	ldrb	r3, [r3, #8]
 80173a2:	4622      	mov	r2, r4
 80173a4:	4601      	mov	r1, r0
 80173a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173a8:	f000 f8ec 	bl	8017584 <fill_normal>
 80173ac:	e04a      	b.n	8017444 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 80173ae:	683b      	ldr	r3, [r7, #0]
 80173b0:	7e1b      	ldrb	r3, [r3, #24]
 80173b2:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 80173b6:	f107 010c 	add.w	r1, r7, #12
 80173ba:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80173be:	9203      	str	r2, [sp, #12]
 80173c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80173c2:	9202      	str	r2, [sp, #8]
 80173c4:	9301      	str	r3, [sp, #4]
 80173c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80173ca:	9300      	str	r3, [sp, #0]
 80173cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ce:	4602      	mov	r2, r0
 80173d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173d2:	f000 fc83 	bl	8017cdc <map_normal>
 80173d6:	e035      	b.n	8017444 <lv_draw_sw_blend_basic+0x350>
        }
    }
    else {
#if LV_DRAW_COMPLEX
        if(dsc->src_buf == NULL) {
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d116      	bne.n	801740e <lv_draw_sw_blend_basic+0x31a>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	7e1a      	ldrb	r2, [r3, #24]
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	7e59      	ldrb	r1, [r3, #25]
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 80173ee:	f107 000c 	add.w	r0, r7, #12
 80173f2:	9103      	str	r1, [sp, #12]
 80173f4:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80173f8:	9102      	str	r1, [sp, #8]
 80173fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80173fc:	9101      	str	r1, [sp, #4]
 80173fe:	9200      	str	r2, [sp, #0]
 8017400:	7a1b      	ldrb	r3, [r3, #8]
 8017402:	4622      	mov	r2, r4
 8017404:	4601      	mov	r1, r0
 8017406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017408:	f000 fabc 	bl	8017984 <fill_blended>
 801740c:	e01a      	b.n	8017444 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	7e1b      	ldrb	r3, [r3, #24]
 8017412:	683a      	ldr	r2, [r7, #0]
 8017414:	7e52      	ldrb	r2, [r2, #25]
 8017416:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 801741a:	f107 010c 	add.w	r1, r7, #12
 801741e:	9204      	str	r2, [sp, #16]
 8017420:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8017424:	9203      	str	r2, [sp, #12]
 8017426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017428:	9202      	str	r2, [sp, #8]
 801742a:	9301      	str	r3, [sp, #4]
 801742c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017430:	9300      	str	r3, [sp, #0]
 8017432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017434:	4602      	mov	r2, r0
 8017436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017438:	f000 fe78 	bl	801812c <map_blended>
 801743c:	e002      	b.n	8017444 <lv_draw_sw_blend_basic+0x350>
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 801743e:	bf00      	nop
 8017440:	e000      	b.n	8017444 <lv_draw_sw_blend_basic+0x350>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8017442:	bf00      	nop
        }
#endif
    }
}
 8017444:	373c      	adds	r7, #60	; 0x3c
 8017446:	46bd      	mov	sp, r7
 8017448:	bd90      	pop	{r4, r7, pc}

0801744a <fill_set_px>:
 *   STATIC FUNCTIONS
 **********************/

static void fill_set_px(lv_color_t * dest_buf, const lv_area_t * blend_area, lv_coord_t dest_stride,
                        lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stide)
{
 801744a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801744c:	b08f      	sub	sp, #60	; 0x3c
 801744e:	af04      	add	r7, sp, #16
 8017450:	60f8      	str	r0, [r7, #12]
 8017452:	60b9      	str	r1, [r7, #8]
 8017454:	713b      	strb	r3, [r7, #4]
 8017456:	4613      	mov	r3, r2
 8017458:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 801745a:	f7f7 f945 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 801745e:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8017460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017462:	2b00      	cmp	r3, #0
 8017464:	d134      	bne.n	80174d0 <fill_set_px+0x86>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801746c:	623b      	str	r3, [r7, #32]
 801746e:	e027      	b.n	80174c0 <fill_set_px+0x76>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8017470:	68bb      	ldr	r3, [r7, #8]
 8017472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017476:	627b      	str	r3, [r7, #36]	; 0x24
 8017478:	e018      	b.n	80174ac <fill_set_px+0x62>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 801747a:	69fb      	ldr	r3, [r7, #28]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	69dc      	ldr	r4, [r3, #28]
 8017480:	69fb      	ldr	r3, [r7, #28]
 8017482:	6818      	ldr	r0, [r3, #0]
 8017484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017486:	b21d      	sxth	r5, r3
 8017488:	6a3b      	ldr	r3, [r7, #32]
 801748a:	b21b      	sxth	r3, r3
 801748c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8017490:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8017494:	9202      	str	r2, [sp, #8]
 8017496:	793a      	ldrb	r2, [r7, #4]
 8017498:	f88d 2004 	strb.w	r2, [sp, #4]
 801749c:	9300      	str	r3, [sp, #0]
 801749e:	462b      	mov	r3, r5
 80174a0:	460a      	mov	r2, r1
 80174a2:	68f9      	ldr	r1, [r7, #12]
 80174a4:	47a0      	blx	r4
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80174a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174a8:	3301      	adds	r3, #1
 80174aa:	627b      	str	r3, [r7, #36]	; 0x24
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80174b2:	461a      	mov	r2, r3
 80174b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b6:	4293      	cmp	r3, r2
 80174b8:	dddf      	ble.n	801747a <fill_set_px+0x30>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 80174ba:	6a3b      	ldr	r3, [r7, #32]
 80174bc:	3301      	adds	r3, #1
 80174be:	623b      	str	r3, [r7, #32]
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80174c6:	461a      	mov	r2, r3
 80174c8:	6a3b      	ldr	r3, [r7, #32]
 80174ca:	4293      	cmp	r3, r2
 80174cc:	ddd0      	ble.n	8017470 <fill_set_px+0x26>
                }
            }
            mask += mask_stide;
        }
    }
}
 80174ce:	e055      	b.n	801757c <fill_set_px+0x132>
        int32_t w = lv_area_get_width(blend_area);
 80174d0:	68b8      	ldr	r0, [r7, #8]
 80174d2:	f7ff fdb5 	bl	8017040 <lv_area_get_width>
 80174d6:	4603      	mov	r3, r0
 80174d8:	61bb      	str	r3, [r7, #24]
        int32_t h = lv_area_get_height(blend_area);
 80174da:	68b8      	ldr	r0, [r7, #8]
 80174dc:	f7ff fdc7 	bl	801706e <lv_area_get_height>
 80174e0:	4603      	mov	r3, r0
 80174e2:	617b      	str	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 80174e4:	2300      	movs	r3, #0
 80174e6:	623b      	str	r3, [r7, #32]
 80174e8:	e044      	b.n	8017574 <fill_set_px+0x12a>
            for(x = 0; x < w; x++) {
 80174ea:	2300      	movs	r3, #0
 80174ec:	627b      	str	r3, [r7, #36]	; 0x24
 80174ee:	e035      	b.n	801755c <fill_set_px+0x112>
                if(mask[x]) {
 80174f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80174f4:	4413      	add	r3, r2
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d02c      	beq.n	8017556 <fill_set_px+0x10c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 80174fc:	69fb      	ldr	r3, [r7, #28]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	69dc      	ldr	r4, [r3, #28]
 8017502:	69fb      	ldr	r3, [r7, #28]
 8017504:	681d      	ldr	r5, [r3, #0]
 8017506:	68bb      	ldr	r3, [r7, #8]
 8017508:	f9b3 3000 	ldrsh.w	r3, [r3]
 801750c:	b29a      	uxth	r2, r3
 801750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017510:	b29b      	uxth	r3, r3
 8017512:	4413      	add	r3, r2
 8017514:	b29b      	uxth	r3, r3
 8017516:	b21e      	sxth	r6, r3
 8017518:	68bb      	ldr	r3, [r7, #8]
 801751a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801751e:	b29a      	uxth	r2, r3
 8017520:	6a3b      	ldr	r3, [r7, #32]
 8017522:	b29b      	uxth	r3, r3
 8017524:	4413      	add	r3, r2
 8017526:	b29b      	uxth	r3, r3
 8017528:	b21b      	sxth	r3, r3
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 801752a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801752e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017530:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017532:	4401      	add	r1, r0
 8017534:	7809      	ldrb	r1, [r1, #0]
 8017536:	fb01 f202 	mul.w	r2, r1, r2
 801753a:	0a12      	lsrs	r2, r2, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 801753c:	b2d2      	uxtb	r2, r2
 801753e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8017542:	9202      	str	r2, [sp, #8]
 8017544:	793a      	ldrb	r2, [r7, #4]
 8017546:	f88d 2004 	strb.w	r2, [sp, #4]
 801754a:	9300      	str	r3, [sp, #0]
 801754c:	4633      	mov	r3, r6
 801754e:	460a      	mov	r2, r1
 8017550:	68f9      	ldr	r1, [r7, #12]
 8017552:	4628      	mov	r0, r5
 8017554:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8017556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017558:	3301      	adds	r3, #1
 801755a:	627b      	str	r3, [r7, #36]	; 0x24
 801755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801755e:	69bb      	ldr	r3, [r7, #24]
 8017560:	429a      	cmp	r2, r3
 8017562:	dbc5      	blt.n	80174f0 <fill_set_px+0xa6>
            mask += mask_stide;
 8017564:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8017568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801756a:	4413      	add	r3, r2
 801756c:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 801756e:	6a3b      	ldr	r3, [r7, #32]
 8017570:	3301      	adds	r3, #1
 8017572:	623b      	str	r3, [r7, #32]
 8017574:	6a3a      	ldr	r2, [r7, #32]
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	429a      	cmp	r2, r3
 801757a:	dbb6      	blt.n	80174ea <fill_set_px+0xa0>
}
 801757c:	bf00      	nop
 801757e:	372c      	adds	r7, #44	; 0x2c
 8017580:	46bd      	mov	sp, r7
 8017582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017584 <fill_normal>:

LV_ATTRIBUTE_FAST_MEM static void fill_normal(lv_color_t * dest_buf, const lv_area_t * dest_area,
                                              lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b092      	sub	sp, #72	; 0x48
 8017588:	af00      	add	r7, sp, #0
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	713b      	strb	r3, [r7, #4]
 8017590:	4613      	mov	r3, r2
 8017592:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 8017594:	68b8      	ldr	r0, [r7, #8]
 8017596:	f7ff fd53 	bl	8017040 <lv_area_get_width>
 801759a:	4603      	mov	r3, r0
 801759c:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h = lv_area_get_height(dest_area);
 801759e:	68b8      	ldr	r0, [r7, #8]
 80175a0:	f7ff fd65 	bl	801706e <lv_area_get_height>
 80175a4:	4603      	mov	r3, r0
 80175a6:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t x;
    int32_t y;

    /*No mask*/
    if(mask == NULL) {
 80175a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d171      	bne.n	8017692 <fill_normal+0x10e>
        if(opa >= LV_OPA_MAX) {
 80175ae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80175b2:	2bfc      	cmp	r3, #252	; 0xfc
 80175b4:	d915      	bls.n	80175e2 <fill_normal+0x5e>
            for(y = 0; y < h; y++) {
 80175b6:	2300      	movs	r3, #0
 80175b8:	643b      	str	r3, [r7, #64]	; 0x40
 80175ba:	e00d      	b.n	80175d8 <fill_normal+0x54>
                lv_color_fill(dest_buf, color, w);
 80175bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175be:	461a      	mov	r2, r3
 80175c0:	7939      	ldrb	r1, [r7, #4]
 80175c2:	68f8      	ldr	r0, [r7, #12]
 80175c4:	f009 fd7a 	bl	80210bc <lv_color_fill>
                dest_buf += dest_stride;
 80175c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	4413      	add	r3, r2
 80175d0:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 80175d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175d4:	3301      	adds	r3, #1
 80175d6:	643b      	str	r3, [r7, #64]	; 0x40
 80175d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80175da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175dc:	429a      	cmp	r2, r3
 80175de:	dbed      	blt.n	80175bc <fill_normal+0x38>
                dest_buf += dest_stride;
                mask += (mask_stride - w);
            }
        }
    }
}
 80175e0:	e1cc      	b.n	801797c <fill_normal+0x3f8>
            lv_color_t last_dest_color = lv_color_black();
 80175e2:	f7ff fd23 	bl	801702c <lv_color_black>
 80175e6:	4603      	mov	r3, r0
 80175e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 80175ec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80175f0:	461a      	mov	r2, r3
 80175f2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80175f6:	7938      	ldrb	r0, [r7, #4]
 80175f8:	f7ff fc8f 	bl	8016f1a <lv_color_mix>
 80175fc:	4603      	mov	r3, r0
 80175fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            lv_color_premult(color, opa, color_premult);
 8017602:	f107 021c 	add.w	r2, r7, #28
 8017606:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801760a:	4619      	mov	r1, r3
 801760c:	7938      	ldrb	r0, [r7, #4]
 801760e:	f7ff fc9a 	bl	8016f46 <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 8017612:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017616:	43db      	mvns	r3, r3
 8017618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            for(y = 0; y < h; y++) {
 801761c:	2300      	movs	r3, #0
 801761e:	643b      	str	r3, [r7, #64]	; 0x40
 8017620:	e032      	b.n	8017688 <fill_normal+0x104>
                for(x = 0; x < w; x++) {
 8017622:	2300      	movs	r3, #0
 8017624:	647b      	str	r3, [r7, #68]	; 0x44
 8017626:	e023      	b.n	8017670 <fill_normal+0xec>
                    if(last_dest_color.full != dest_buf[x].full) {
 8017628:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801762c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801762e:	68f9      	ldr	r1, [r7, #12]
 8017630:	440b      	add	r3, r1
 8017632:	781b      	ldrb	r3, [r3, #0]
 8017634:	429a      	cmp	r2, r3
 8017636:	d012      	beq.n	801765e <fill_normal+0xda>
                        last_dest_color = dest_buf[x];
 8017638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801763a:	68fa      	ldr	r2, [r7, #12]
 801763c:	4413      	add	r3, r2
 801763e:	781b      	ldrb	r3, [r3, #0]
 8017640:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        last_res_color = lv_color_mix_premult(color_premult, dest_buf[x], opa_inv);
 8017644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017646:	68fa      	ldr	r2, [r7, #12]
 8017648:	4413      	add	r3, r2
 801764a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801764e:	f107 001c 	add.w	r0, r7, #28
 8017652:	7819      	ldrb	r1, [r3, #0]
 8017654:	f7ff fc9b 	bl	8016f8e <lv_color_mix_premult>
 8017658:	4603      	mov	r3, r0
 801765a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    dest_buf[x] = last_res_color;
 801765e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017660:	68fa      	ldr	r2, [r7, #12]
 8017662:	4413      	add	r3, r2
 8017664:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8017668:	701a      	strb	r2, [r3, #0]
                for(x = 0; x < w; x++) {
 801766a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801766c:	3301      	adds	r3, #1
 801766e:	647b      	str	r3, [r7, #68]	; 0x44
 8017670:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017674:	429a      	cmp	r2, r3
 8017676:	dbd7      	blt.n	8017628 <fill_normal+0xa4>
                dest_buf += dest_stride;
 8017678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801767c:	68fa      	ldr	r2, [r7, #12]
 801767e:	4413      	add	r3, r2
 8017680:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 8017682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017684:	3301      	adds	r3, #1
 8017686:	643b      	str	r3, [r7, #64]	; 0x40
 8017688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801768c:	429a      	cmp	r2, r3
 801768e:	dbc8      	blt.n	8017622 <fill_normal+0x9e>
}
 8017690:	e174      	b.n	801797c <fill_normal+0x3f8>
        if(opa >= LV_OPA_MAX) {
 8017692:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017696:	2bfc      	cmp	r3, #252	; 0xfc
 8017698:	f240 80f7 	bls.w	801788a <fill_normal+0x306>
            int32_t x_end4 = w - 4;
 801769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801769e:	3b04      	subs	r3, #4
 80176a0:	633b      	str	r3, [r7, #48]	; 0x30
            for(y = 0; y < h; y++) {
 80176a2:	2300      	movs	r3, #0
 80176a4:	643b      	str	r3, [r7, #64]	; 0x40
 80176a6:	e0ea      	b.n	801787e <fill_normal+0x2fa>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80176a8:	2300      	movs	r3, #0
 80176aa:	647b      	str	r3, [r7, #68]	; 0x44
 80176ac:	e01a      	b.n	80176e4 <fill_normal+0x160>
                    FILL_NORMAL_MASK_PX(color)
 80176ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	2bff      	cmp	r3, #255	; 0xff
 80176b4:	d103      	bne.n	80176be <fill_normal+0x13a>
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	793a      	ldrb	r2, [r7, #4]
 80176ba:	701a      	strb	r2, [r3, #0]
 80176bc:	e009      	b.n	80176d2 <fill_normal+0x14e>
 80176be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176c0:	781a      	ldrb	r2, [r3, #0]
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	7819      	ldrb	r1, [r3, #0]
 80176c6:	7938      	ldrb	r0, [r7, #4]
 80176c8:	f7ff fc27 	bl	8016f1a <lv_color_mix>
 80176cc:	4602      	mov	r2, r0
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	701a      	strb	r2, [r3, #0]
 80176d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176d4:	3301      	adds	r3, #1
 80176d6:	657b      	str	r3, [r7, #84]	; 0x54
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	3301      	adds	r3, #1
 80176dc:	60fb      	str	r3, [r7, #12]
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80176de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176e0:	3301      	adds	r3, #1
 80176e2:	647b      	str	r3, [r7, #68]	; 0x44
 80176e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80176e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176e8:	429a      	cmp	r2, r3
 80176ea:	f280 8090 	bge.w	801780e <fill_normal+0x28a>
 80176ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176f0:	f003 0303 	and.w	r3, r3, #3
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d1da      	bne.n	80176ae <fill_normal+0x12a>
                for(; x <= x_end4; x += 4) {
 80176f8:	e089      	b.n	801780e <fill_normal+0x28a>
                    uint32_t mask32 = *((uint32_t *)mask);
 80176fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if(mask32 == 0xFFFFFFFF) {
 8017700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017706:	d115      	bne.n	8017734 <fill_normal+0x1b0>
                        dest_buf[0] = color;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	793a      	ldrb	r2, [r7, #4]
 801770c:	701a      	strb	r2, [r3, #0]
                        dest_buf[1] = color;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	3301      	adds	r3, #1
 8017712:	793a      	ldrb	r2, [r7, #4]
 8017714:	701a      	strb	r2, [r3, #0]
                        dest_buf[2] = color;
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	3302      	adds	r3, #2
 801771a:	793a      	ldrb	r2, [r7, #4]
 801771c:	701a      	strb	r2, [r3, #0]
                        dest_buf[3] = color;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	3303      	adds	r3, #3
 8017722:	793a      	ldrb	r2, [r7, #4]
 8017724:	701a      	strb	r2, [r3, #0]
                        dest_buf += 4;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3304      	adds	r3, #4
 801772a:	60fb      	str	r3, [r7, #12]
                        mask += 4;
 801772c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801772e:	3304      	adds	r3, #4
 8017730:	657b      	str	r3, [r7, #84]	; 0x54
 8017732:	e069      	b.n	8017808 <fill_normal+0x284>
                    else if(mask32) {
 8017734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017736:	2b00      	cmp	r3, #0
 8017738:	d060      	beq.n	80177fc <fill_normal+0x278>
                        FILL_NORMAL_MASK_PX(color)
 801773a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	2bff      	cmp	r3, #255	; 0xff
 8017740:	d103      	bne.n	801774a <fill_normal+0x1c6>
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	793a      	ldrb	r2, [r7, #4]
 8017746:	701a      	strb	r2, [r3, #0]
 8017748:	e009      	b.n	801775e <fill_normal+0x1da>
 801774a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801774c:	781a      	ldrb	r2, [r3, #0]
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	7819      	ldrb	r1, [r3, #0]
 8017752:	7938      	ldrb	r0, [r7, #4]
 8017754:	f7ff fbe1 	bl	8016f1a <lv_color_mix>
 8017758:	4602      	mov	r2, r0
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	701a      	strb	r2, [r3, #0]
 801775e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017760:	3301      	adds	r3, #1
 8017762:	657b      	str	r3, [r7, #84]	; 0x54
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	3301      	adds	r3, #1
 8017768:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 801776a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	2bff      	cmp	r3, #255	; 0xff
 8017770:	d103      	bne.n	801777a <fill_normal+0x1f6>
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	793a      	ldrb	r2, [r7, #4]
 8017776:	701a      	strb	r2, [r3, #0]
 8017778:	e009      	b.n	801778e <fill_normal+0x20a>
 801777a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801777c:	781a      	ldrb	r2, [r3, #0]
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	7819      	ldrb	r1, [r3, #0]
 8017782:	7938      	ldrb	r0, [r7, #4]
 8017784:	f7ff fbc9 	bl	8016f1a <lv_color_mix>
 8017788:	4602      	mov	r2, r0
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	701a      	strb	r2, [r3, #0]
 801778e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017790:	3301      	adds	r3, #1
 8017792:	657b      	str	r3, [r7, #84]	; 0x54
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	3301      	adds	r3, #1
 8017798:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 801779a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2bff      	cmp	r3, #255	; 0xff
 80177a0:	d103      	bne.n	80177aa <fill_normal+0x226>
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	793a      	ldrb	r2, [r7, #4]
 80177a6:	701a      	strb	r2, [r3, #0]
 80177a8:	e009      	b.n	80177be <fill_normal+0x23a>
 80177aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177ac:	781a      	ldrb	r2, [r3, #0]
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	7819      	ldrb	r1, [r3, #0]
 80177b2:	7938      	ldrb	r0, [r7, #4]
 80177b4:	f7ff fbb1 	bl	8016f1a <lv_color_mix>
 80177b8:	4602      	mov	r2, r0
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	701a      	strb	r2, [r3, #0]
 80177be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177c0:	3301      	adds	r3, #1
 80177c2:	657b      	str	r3, [r7, #84]	; 0x54
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	3301      	adds	r3, #1
 80177c8:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 80177ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	2bff      	cmp	r3, #255	; 0xff
 80177d0:	d103      	bne.n	80177da <fill_normal+0x256>
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	793a      	ldrb	r2, [r7, #4]
 80177d6:	701a      	strb	r2, [r3, #0]
 80177d8:	e009      	b.n	80177ee <fill_normal+0x26a>
 80177da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177dc:	781a      	ldrb	r2, [r3, #0]
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	7819      	ldrb	r1, [r3, #0]
 80177e2:	7938      	ldrb	r0, [r7, #4]
 80177e4:	f7ff fb99 	bl	8016f1a <lv_color_mix>
 80177e8:	4602      	mov	r2, r0
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	701a      	strb	r2, [r3, #0]
 80177ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177f0:	3301      	adds	r3, #1
 80177f2:	657b      	str	r3, [r7, #84]	; 0x54
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	3301      	adds	r3, #1
 80177f8:	60fb      	str	r3, [r7, #12]
 80177fa:	e005      	b.n	8017808 <fill_normal+0x284>
                        mask += 4;
 80177fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177fe:	3304      	adds	r3, #4
 8017800:	657b      	str	r3, [r7, #84]	; 0x54
                        dest_buf += 4;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	3304      	adds	r3, #4
 8017806:	60fb      	str	r3, [r7, #12]
                for(; x <= x_end4; x += 4) {
 8017808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801780a:	3304      	adds	r3, #4
 801780c:	647b      	str	r3, [r7, #68]	; 0x44
 801780e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017812:	429a      	cmp	r2, r3
 8017814:	f77f af71 	ble.w	80176fa <fill_normal+0x176>
                for(; x < w ; x++) {
 8017818:	e01a      	b.n	8017850 <fill_normal+0x2cc>
                    FILL_NORMAL_MASK_PX(color)
 801781a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801781c:	781b      	ldrb	r3, [r3, #0]
 801781e:	2bff      	cmp	r3, #255	; 0xff
 8017820:	d103      	bne.n	801782a <fill_normal+0x2a6>
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	793a      	ldrb	r2, [r7, #4]
 8017826:	701a      	strb	r2, [r3, #0]
 8017828:	e009      	b.n	801783e <fill_normal+0x2ba>
 801782a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801782c:	781a      	ldrb	r2, [r3, #0]
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	7819      	ldrb	r1, [r3, #0]
 8017832:	7938      	ldrb	r0, [r7, #4]
 8017834:	f7ff fb71 	bl	8016f1a <lv_color_mix>
 8017838:	4602      	mov	r2, r0
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	701a      	strb	r2, [r3, #0]
 801783e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017840:	3301      	adds	r3, #1
 8017842:	657b      	str	r3, [r7, #84]	; 0x54
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	3301      	adds	r3, #1
 8017848:	60fb      	str	r3, [r7, #12]
                for(; x < w ; x++) {
 801784a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801784c:	3301      	adds	r3, #1
 801784e:	647b      	str	r3, [r7, #68]	; 0x44
 8017850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017854:	429a      	cmp	r2, r3
 8017856:	dbe0      	blt.n	801781a <fill_normal+0x296>
                dest_buf += (dest_stride - w);
 8017858:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801785e:	1ad3      	subs	r3, r2, r3
 8017860:	461a      	mov	r2, r3
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	4413      	add	r3, r2
 8017866:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8017868:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 801786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801786e:	1ad3      	subs	r3, r2, r3
 8017870:	461a      	mov	r2, r3
 8017872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017874:	4413      	add	r3, r2
 8017876:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 8017878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801787a:	3301      	adds	r3, #1
 801787c:	643b      	str	r3, [r7, #64]	; 0x40
 801787e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017882:	429a      	cmp	r2, r3
 8017884:	f6ff af10 	blt.w	80176a8 <fill_normal+0x124>
}
 8017888:	e078      	b.n	801797c <fill_normal+0x3f8>
            lv_opa_t last_mask = LV_OPA_TRANSP;
 801788a:	2300      	movs	r3, #0
 801788c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            last_dest_color.full = dest_buf[0].full;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	763b      	strb	r3, [r7, #24]
            last_res_color.full = dest_buf[0].full;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	781b      	ldrb	r3, [r3, #0]
 801789a:	753b      	strb	r3, [r7, #20]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 801789c:	2300      	movs	r3, #0
 801789e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            for(y = 0; y < h; y++) {
 80178a2:	2300      	movs	r3, #0
 80178a4:	643b      	str	r3, [r7, #64]	; 0x40
 80178a6:	e065      	b.n	8017974 <fill_normal+0x3f0>
                for(x = 0; x < w; x++) {
 80178a8:	2300      	movs	r3, #0
 80178aa:	647b      	str	r3, [r7, #68]	; 0x44
 80178ac:	e04e      	b.n	801794c <fill_normal+0x3c8>
                    if(*mask) {
 80178ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178b0:	781b      	ldrb	r3, [r3, #0]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d044      	beq.n	8017940 <fill_normal+0x3bc>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80178b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178b8:	781b      	ldrb	r3, [r3, #0]
 80178ba:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80178be:	429a      	cmp	r2, r3
 80178c0:	d011      	beq.n	80178e6 <fill_normal+0x362>
 80178c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	2bff      	cmp	r3, #255	; 0xff
 80178c8:	d009      	beq.n	80178de <fill_normal+0x35a>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 80178ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178cc:	781b      	ldrb	r3, [r3, #0]
 80178ce:	461a      	mov	r2, r3
 80178d0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80178d4:	fb02 f303 	mul.w	r3, r2, r3
 80178d8:	0a1b      	lsrs	r3, r3, #8
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80178da:	b2db      	uxtb	r3, r3
 80178dc:	e001      	b.n	80178e2 <fill_normal+0x35e>
 80178de:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80178e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 80178e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178e8:	781b      	ldrb	r3, [r3, #0]
 80178ea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80178ee:	429a      	cmp	r2, r3
 80178f0:	d106      	bne.n	8017900 <fill_normal+0x37c>
 80178f2:	7e3a      	ldrb	r2, [r7, #24]
 80178f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80178f6:	68f9      	ldr	r1, [r7, #12]
 80178f8:	440b      	add	r3, r1
 80178fa:	781b      	ldrb	r3, [r3, #0]
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d01a      	beq.n	8017936 <fill_normal+0x3b2>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 8017900:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017904:	2bff      	cmp	r3, #255	; 0xff
 8017906:	d102      	bne.n	801790e <fill_normal+0x38a>
 8017908:	793b      	ldrb	r3, [r7, #4]
 801790a:	753b      	strb	r3, [r7, #20]
 801790c:	e00a      	b.n	8017924 <fill_normal+0x3a0>
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 801790e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017910:	68fa      	ldr	r2, [r7, #12]
 8017912:	4413      	add	r3, r2
 8017914:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8017918:	7819      	ldrb	r1, [r3, #0]
 801791a:	7938      	ldrb	r0, [r7, #4]
 801791c:	f7ff fafd 	bl	8016f1a <lv_color_mix>
 8017920:	4603      	mov	r3, r0
 8017922:	753b      	strb	r3, [r7, #20]
                            last_mask = *mask;
 8017924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                            last_dest_color.full = dest_buf[x].full;
 801792c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801792e:	68fa      	ldr	r2, [r7, #12]
 8017930:	4413      	add	r3, r2
 8017932:	781b      	ldrb	r3, [r3, #0]
 8017934:	763b      	strb	r3, [r7, #24]
                        dest_buf[x] = last_res_color;
 8017936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017938:	68fa      	ldr	r2, [r7, #12]
 801793a:	4413      	add	r3, r2
 801793c:	7d3a      	ldrb	r2, [r7, #20]
 801793e:	701a      	strb	r2, [r3, #0]
                    mask++;
 8017940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017942:	3301      	adds	r3, #1
 8017944:	657b      	str	r3, [r7, #84]	; 0x54
                for(x = 0; x < w; x++) {
 8017946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017948:	3301      	adds	r3, #1
 801794a:	647b      	str	r3, [r7, #68]	; 0x44
 801794c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017950:	429a      	cmp	r2, r3
 8017952:	dbac      	blt.n	80178ae <fill_normal+0x32a>
                dest_buf += dest_stride;
 8017954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017958:	68fa      	ldr	r2, [r7, #12]
 801795a:	4413      	add	r3, r2
 801795c:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 801795e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8017962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017964:	1ad3      	subs	r3, r2, r3
 8017966:	461a      	mov	r2, r3
 8017968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801796a:	4413      	add	r3, r2
 801796c:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 801796e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017970:	3301      	adds	r3, #1
 8017972:	643b      	str	r3, [r7, #64]	; 0x40
 8017974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017978:	429a      	cmp	r2, r3
 801797a:	db95      	blt.n	80178a8 <fill_normal+0x324>
}
 801797c:	bf00      	nop
 801797e:	3748      	adds	r7, #72	; 0x48
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}

08017984 <fill_blended>:

#if LV_DRAW_COMPLEX
static void fill_blended(lv_color_t * dest_buf, const lv_area_t * dest_area,
                         lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride,
                         lv_blend_mode_t blend_mode)
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b08e      	sub	sp, #56	; 0x38
 8017988:	af00      	add	r7, sp, #0
 801798a:	60f8      	str	r0, [r7, #12]
 801798c:	60b9      	str	r1, [r7, #8]
 801798e:	713b      	strb	r3, [r7, #4]
 8017990:	4613      	mov	r3, r2
 8017992:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 8017994:	68b8      	ldr	r0, [r7, #8]
 8017996:	f7ff fb53 	bl	8017040 <lv_area_get_width>
 801799a:	4603      	mov	r3, r0
 801799c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 801799e:	68b8      	ldr	r0, [r7, #8]
 80179a0:	f7ff fb65 	bl	801706e <lv_area_get_height>
 80179a4:	4603      	mov	r3, r0
 80179a6:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 80179a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80179ac:	2b03      	cmp	r3, #3
 80179ae:	d00d      	beq.n	80179cc <fill_blended+0x48>
 80179b0:	2b03      	cmp	r3, #3
 80179b2:	f300 80d6 	bgt.w	8017b62 <fill_blended+0x1de>
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	d002      	beq.n	80179c0 <fill_blended+0x3c>
 80179ba:	2b02      	cmp	r3, #2
 80179bc:	d003      	beq.n	80179c6 <fill_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 80179be:	e0d0      	b.n	8017b62 <fill_blended+0x1de>
            blend_fp = color_blend_true_color_additive;
 80179c0:	4b6a      	ldr	r3, [pc, #424]	; (8017b6c <fill_blended+0x1e8>)
 80179c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80179c4:	e005      	b.n	80179d2 <fill_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 80179c6:	4b6a      	ldr	r3, [pc, #424]	; (8017b70 <fill_blended+0x1ec>)
 80179c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80179ca:	e002      	b.n	80179d2 <fill_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 80179cc:	4b69      	ldr	r3, [pc, #420]	; (8017b74 <fill_blended+0x1f0>)
 80179ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80179d0:	bf00      	nop
    }

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 80179d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d141      	bne.n	8017a5c <fill_blended+0xd8>
        lv_color_t last_dest_color = dest_buf[0];
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	781b      	ldrb	r3, [r3, #0]
 80179dc:	773b      	strb	r3, [r7, #28]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 80179de:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80179e2:	68f9      	ldr	r1, [r7, #12]
 80179e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e6:	7809      	ldrb	r1, [r1, #0]
 80179e8:	7938      	ldrb	r0, [r7, #4]
 80179ea:	4798      	blx	r3
 80179ec:	4603      	mov	r3, r0
 80179ee:	763b      	strb	r3, [r7, #24]
        for(y = 0; y < h; y++) {
 80179f0:	2300      	movs	r3, #0
 80179f2:	633b      	str	r3, [r7, #48]	; 0x30
 80179f4:	e02d      	b.n	8017a52 <fill_blended+0xce>
            for(x = 0; x < w; x++) {
 80179f6:	2300      	movs	r3, #0
 80179f8:	637b      	str	r3, [r7, #52]	; 0x34
 80179fa:	e01e      	b.n	8017a3a <fill_blended+0xb6>
                if(last_dest_color.full != dest_buf[x].full) {
 80179fc:	7f3a      	ldrb	r2, [r7, #28]
 80179fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a00:	68f9      	ldr	r1, [r7, #12]
 8017a02:	440b      	add	r3, r1
 8017a04:	781b      	ldrb	r3, [r3, #0]
 8017a06:	429a      	cmp	r2, r3
 8017a08:	d00f      	beq.n	8017a2a <fill_blended+0xa6>
                    last_dest_color = dest_buf[x];
 8017a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a0c:	68fa      	ldr	r2, [r7, #12]
 8017a0e:	4413      	add	r3, r2
 8017a10:	781b      	ldrb	r3, [r3, #0]
 8017a12:	773b      	strb	r3, [r7, #28]
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 8017a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a16:	68fa      	ldr	r2, [r7, #12]
 8017a18:	18d1      	adds	r1, r2, r3
 8017a1a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8017a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a20:	7809      	ldrb	r1, [r1, #0]
 8017a22:	7938      	ldrb	r0, [r7, #4]
 8017a24:	4798      	blx	r3
 8017a26:	4603      	mov	r3, r0
 8017a28:	763b      	strb	r3, [r7, #24]
                }
                dest_buf[x] = last_res_color;
 8017a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a2c:	68fa      	ldr	r2, [r7, #12]
 8017a2e:	4413      	add	r3, r2
 8017a30:	7e3a      	ldrb	r2, [r7, #24]
 8017a32:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 8017a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a36:	3301      	adds	r3, #1
 8017a38:	637b      	str	r3, [r7, #52]	; 0x34
 8017a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	dbdc      	blt.n	80179fc <fill_blended+0x78>
            }
            dest_buf += dest_stride;
 8017a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017a46:	68fa      	ldr	r2, [r7, #12]
 8017a48:	4413      	add	r3, r2
 8017a4a:	60fb      	str	r3, [r7, #12]
        for(y = 0; y < h; y++) {
 8017a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a4e:	3301      	adds	r3, #1
 8017a50:	633b      	str	r3, [r7, #48]	; 0x30
 8017a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a54:	6a3b      	ldr	r3, [r7, #32]
 8017a56:	429a      	cmp	r2, r3
 8017a58:	dbcd      	blt.n	80179f6 <fill_blended+0x72>
 8017a5a:	e083      	b.n	8017b64 <fill_blended+0x1e0>
    /*Masked*/
    else {
        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        last_dest_color = dest_buf[0];
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	781b      	ldrb	r3, [r3, #0]
 8017a66:	753b      	strb	r3, [r7, #20]
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 8017a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	2bfc      	cmp	r3, #252	; 0xfc
 8017a6e:	d809      	bhi.n	8017a84 <fill_blended+0x100>
 8017a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a72:	781b      	ldrb	r3, [r3, #0]
 8017a74:	461a      	mov	r2, r3
 8017a76:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017a7a:	fb02 f303 	mul.w	r3, r2, r3
 8017a7e:	0a1b      	lsrs	r3, r3, #8
 8017a80:	b2db      	uxtb	r3, r3
 8017a82:	e001      	b.n	8017a88 <fill_blended+0x104>
 8017a84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017a88:	77fb      	strb	r3, [r7, #31]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8017a8a:	7ffa      	ldrb	r2, [r7, #31]
 8017a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a8e:	7d39      	ldrb	r1, [r7, #20]
 8017a90:	7938      	ldrb	r0, [r7, #4]
 8017a92:	4798      	blx	r3
 8017a94:	4603      	mov	r3, r0
 8017a96:	743b      	strb	r3, [r7, #16]

        for(y = 0; y < h; y++) {
 8017a98:	2300      	movs	r3, #0
 8017a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8017a9c:	e05c      	b.n	8017b58 <fill_blended+0x1d4>
            for(x = 0; x < w; x++) {
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8017aa2:	e048      	b.n	8017b36 <fill_blended+0x1b2>
                if(mask[x] == 0) continue;
 8017aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017aa8:	4413      	add	r3, r2
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d03e      	beq.n	8017b2e <fill_blended+0x1aa>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 8017ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ab4:	4413      	add	r3, r2
 8017ab6:	781b      	ldrb	r3, [r3, #0]
 8017ab8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d106      	bne.n	8017ace <fill_blended+0x14a>
 8017ac0:	7d3a      	ldrb	r2, [r7, #20]
 8017ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ac4:	68f9      	ldr	r1, [r7, #12]
 8017ac6:	440b      	add	r3, r1
 8017ac8:	781b      	ldrb	r3, [r3, #0]
 8017aca:	429a      	cmp	r2, r3
 8017acc:	d029      	beq.n	8017b22 <fill_blended+0x19e>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 8017ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ad2:	4413      	add	r3, r2
 8017ad4:	781b      	ldrb	r3, [r3, #0]
 8017ad6:	2bfc      	cmp	r3, #252	; 0xfc
 8017ad8:	d80b      	bhi.n	8017af2 <fill_blended+0x16e>
 8017ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017adc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ade:	4413      	add	r3, r2
 8017ae0:	781b      	ldrb	r3, [r3, #0]
 8017ae2:	461a      	mov	r2, r3
 8017ae4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017ae8:	fb02 f303 	mul.w	r3, r2, r3
 8017aec:	0a1b      	lsrs	r3, r3, #8
 8017aee:	b2db      	uxtb	r3, r3
 8017af0:	e001      	b.n	8017af6 <fill_blended+0x172>
 8017af2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017af6:	77fb      	strb	r3, [r7, #31]

                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8017af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017afa:	68fa      	ldr	r2, [r7, #12]
 8017afc:	18d1      	adds	r1, r2, r3
 8017afe:	7ffa      	ldrb	r2, [r7, #31]
 8017b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b02:	7809      	ldrb	r1, [r1, #0]
 8017b04:	7938      	ldrb	r0, [r7, #4]
 8017b06:	4798      	blx	r3
 8017b08:	4603      	mov	r3, r0
 8017b0a:	743b      	strb	r3, [r7, #16]
                    last_mask = mask[x];
 8017b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b10:	4413      	add	r3, r2
 8017b12:	781b      	ldrb	r3, [r3, #0]
 8017b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_dest_color.full = dest_buf[x].full;
 8017b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b1a:	68fa      	ldr	r2, [r7, #12]
 8017b1c:	4413      	add	r3, r2
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 8017b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b24:	68fa      	ldr	r2, [r7, #12]
 8017b26:	4413      	add	r3, r2
 8017b28:	7c3a      	ldrb	r2, [r7, #16]
 8017b2a:	701a      	strb	r2, [r3, #0]
 8017b2c:	e000      	b.n	8017b30 <fill_blended+0x1ac>
                if(mask[x] == 0) continue;
 8017b2e:	bf00      	nop
            for(x = 0; x < w; x++) {
 8017b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b32:	3301      	adds	r3, #1
 8017b34:	637b      	str	r3, [r7, #52]	; 0x34
 8017b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	dbb2      	blt.n	8017aa4 <fill_blended+0x120>
            }
            dest_buf += dest_stride;
 8017b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017b42:	68fa      	ldr	r2, [r7, #12]
 8017b44:	4413      	add	r3, r2
 8017b46:	60fb      	str	r3, [r7, #12]
            mask += mask_stride;
 8017b48:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8017b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b4e:	4413      	add	r3, r2
 8017b50:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 8017b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b54:	3301      	adds	r3, #1
 8017b56:	633b      	str	r3, [r7, #48]	; 0x30
 8017b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b5a:	6a3b      	ldr	r3, [r7, #32]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	db9e      	blt.n	8017a9e <fill_blended+0x11a>
 8017b60:	e000      	b.n	8017b64 <fill_blended+0x1e0>
            return;
 8017b62:	bf00      	nop
        }
    }
}
 8017b64:	3738      	adds	r7, #56	; 0x38
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	bf00      	nop
 8017b6c:	08018351 	.word	0x08018351
 8017b70:	080183a1 	.word	0x080183a1
 8017b74:	08018457 	.word	0x08018457

08017b78 <map_set_px>:
#endif

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8017b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b7a:	b08f      	sub	sp, #60	; 0x3c
 8017b7c:	af04      	add	r7, sp, #16
 8017b7e:	60f8      	str	r0, [r7, #12]
 8017b80:	60b9      	str	r1, [r7, #8]
 8017b82:	603b      	str	r3, [r7, #0]
 8017b84:	4613      	mov	r3, r2
 8017b86:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8017b88:	f7f6 fdae 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 8017b8c:	61f8      	str	r0, [r7, #28]

    int32_t w = lv_area_get_width(dest_area);
 8017b8e:	68b8      	ldr	r0, [r7, #8]
 8017b90:	f7ff fa56 	bl	8017040 <lv_area_get_width>
 8017b94:	4603      	mov	r3, r0
 8017b96:	61bb      	str	r3, [r7, #24]
    int32_t h = lv_area_get_height(dest_area);
 8017b98:	68b8      	ldr	r0, [r7, #8]
 8017b9a:	f7ff fa68 	bl	801706e <lv_area_get_height>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8017ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d140      	bne.n	8017c2a <map_set_px+0xb2>
        for(y = 0; y < h; y++) {
 8017ba8:	2300      	movs	r3, #0
 8017baa:	623b      	str	r3, [r7, #32]
 8017bac:	e038      	b.n	8017c20 <map_set_px+0xa8>
            for(x = 0; x < w; x++) {
 8017bae:	2300      	movs	r3, #0
 8017bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8017bb2:	e029      	b.n	8017c08 <map_set_px+0x90>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017bb4:	69fb      	ldr	r3, [r7, #28]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	69dc      	ldr	r4, [r3, #28]
 8017bba:	69fb      	ldr	r3, [r7, #28]
 8017bbc:	6818      	ldr	r0, [r3, #0]
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017bc4:	b29a      	uxth	r2, r3
 8017bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bc8:	b29b      	uxth	r3, r3
 8017bca:	4413      	add	r3, r2
 8017bcc:	b29b      	uxth	r3, r3
 8017bce:	b21e      	sxth	r6, r3
 8017bd0:	68bb      	ldr	r3, [r7, #8]
 8017bd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017bd6:	b29a      	uxth	r2, r3
 8017bd8:	6a3b      	ldr	r3, [r7, #32]
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	4413      	add	r3, r2
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	b21b      	sxth	r3, r3
 8017be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017be4:	6839      	ldr	r1, [r7, #0]
 8017be6:	440a      	add	r2, r1
 8017be8:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8017bec:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8017bf0:	9102      	str	r1, [sp, #8]
 8017bf2:	7812      	ldrb	r2, [r2, #0]
 8017bf4:	f88d 2004 	strb.w	r2, [sp, #4]
 8017bf8:	9300      	str	r3, [sp, #0]
 8017bfa:	4633      	mov	r3, r6
 8017bfc:	462a      	mov	r2, r5
 8017bfe:	68f9      	ldr	r1, [r7, #12]
 8017c00:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8017c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c04:	3301      	adds	r3, #1
 8017c06:	627b      	str	r3, [r7, #36]	; 0x24
 8017c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c0a:	69bb      	ldr	r3, [r7, #24]
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	dbd1      	blt.n	8017bb4 <map_set_px+0x3c>
                                        opa);
            }
            src_buf += src_stride;
 8017c10:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017c14:	683a      	ldr	r2, [r7, #0]
 8017c16:	4413      	add	r3, r2
 8017c18:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8017c1a:	6a3b      	ldr	r3, [r7, #32]
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	623b      	str	r3, [r7, #32]
 8017c20:	6a3a      	ldr	r2, [r7, #32]
 8017c22:	697b      	ldr	r3, [r7, #20]
 8017c24:	429a      	cmp	r2, r3
 8017c26:	dbc2      	blt.n	8017bae <map_set_px+0x36>
            }
            mask += mask_stride;
            src_buf += src_stride;
        }
    }
}
 8017c28:	e054      	b.n	8017cd4 <map_set_px+0x15c>
        for(y = 0; y < h; y++) {
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	623b      	str	r3, [r7, #32]
 8017c2e:	e04d      	b.n	8017ccc <map_set_px+0x154>
            for(x = 0; x < w; x++) {
 8017c30:	2300      	movs	r3, #0
 8017c32:	627b      	str	r3, [r7, #36]	; 0x24
 8017c34:	e039      	b.n	8017caa <map_set_px+0x132>
                if(mask[x]) {
 8017c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c3a:	4413      	add	r3, r2
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d030      	beq.n	8017ca4 <map_set_px+0x12c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017c42:	69fb      	ldr	r3, [r7, #28]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	69dc      	ldr	r4, [r3, #28]
 8017c48:	69fb      	ldr	r3, [r7, #28]
 8017c4a:	681e      	ldr	r6, [r3, #0]
 8017c4c:	68bb      	ldr	r3, [r7, #8]
 8017c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c52:	b29a      	uxth	r2, r3
 8017c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	4413      	add	r3, r2
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	fa0f fc83 	sxth.w	ip, r3
 8017c60:	68bb      	ldr	r3, [r7, #8]
 8017c62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	6a3b      	ldr	r3, [r7, #32]
 8017c6a:	b29b      	uxth	r3, r3
 8017c6c:	4413      	add	r3, r2
 8017c6e:	b29b      	uxth	r3, r3
 8017c70:	b21b      	sxth	r3, r3
 8017c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c74:	6839      	ldr	r1, [r7, #0]
 8017c76:	440a      	add	r2, r1
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8017c78:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8017c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c7e:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8017c80:	4428      	add	r0, r5
 8017c82:	7800      	ldrb	r0, [r0, #0]
 8017c84:	fb00 f101 	mul.w	r1, r0, r1
 8017c88:	0a09      	lsrs	r1, r1, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017c8a:	b2c9      	uxtb	r1, r1
 8017c8c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8017c90:	9102      	str	r1, [sp, #8]
 8017c92:	7812      	ldrb	r2, [r2, #0]
 8017c94:	f88d 2004 	strb.w	r2, [sp, #4]
 8017c98:	9300      	str	r3, [sp, #0]
 8017c9a:	4663      	mov	r3, ip
 8017c9c:	4602      	mov	r2, r0
 8017c9e:	68f9      	ldr	r1, [r7, #12]
 8017ca0:	4630      	mov	r0, r6
 8017ca2:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8017ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8017caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cac:	69bb      	ldr	r3, [r7, #24]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	dbc1      	blt.n	8017c36 <map_set_px+0xbe>
            mask += mask_stride;
 8017cb2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8017cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017cb8:	4413      	add	r3, r2
 8017cba:	64bb      	str	r3, [r7, #72]	; 0x48
            src_buf += src_stride;
 8017cbc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017cc0:	683a      	ldr	r2, [r7, #0]
 8017cc2:	4413      	add	r3, r2
 8017cc4:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8017cc6:	6a3b      	ldr	r3, [r7, #32]
 8017cc8:	3301      	adds	r3, #1
 8017cca:	623b      	str	r3, [r7, #32]
 8017ccc:	6a3a      	ldr	r2, [r7, #32]
 8017cce:	697b      	ldr	r3, [r7, #20]
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	dbad      	blt.n	8017c30 <map_set_px+0xb8>
}
 8017cd4:	bf00      	nop
 8017cd6:	372c      	adds	r7, #44	; 0x2c
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017cdc <map_normal>:

LV_ATTRIBUTE_FAST_MEM static void map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8017cdc:	b5b0      	push	{r4, r5, r7, lr}
 8017cde:	b08c      	sub	sp, #48	; 0x30
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	60f8      	str	r0, [r7, #12]
 8017ce4:	60b9      	str	r1, [r7, #8]
 8017ce6:	603b      	str	r3, [r7, #0]
 8017ce8:	4613      	mov	r3, r2
 8017cea:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 8017cec:	68b8      	ldr	r0, [r7, #8]
 8017cee:	f7ff f9a7 	bl	8017040 <lv_area_get_width>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	61fb      	str	r3, [r7, #28]
    int32_t h = lv_area_get_height(dest_area);
 8017cf6:	68b8      	ldr	r0, [r7, #8]
 8017cf8:	f7ff f9b9 	bl	801706e <lv_area_get_height>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	61bb      	str	r3, [r7, #24]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8017d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d14e      	bne.n	8017da4 <map_normal+0xc8>
        if(opa >= LV_OPA_MAX) {
 8017d06:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017d0a:	2bfc      	cmp	r3, #252	; 0xfc
 8017d0c:	d91a      	bls.n	8017d44 <map_normal+0x68>
            for(y = 0; y < h; y++) {
 8017d0e:	2300      	movs	r3, #0
 8017d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d12:	e012      	b.n	8017d3a <map_normal+0x5e>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8017d14:	69fb      	ldr	r3, [r7, #28]
 8017d16:	461a      	mov	r2, r3
 8017d18:	6839      	ldr	r1, [r7, #0]
 8017d1a:	68f8      	ldr	r0, [r7, #12]
 8017d1c:	f00a f9b0 	bl	8022080 <lv_memcpy>
                dest_buf += dest_stride;
 8017d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017d24:	68fa      	ldr	r2, [r7, #12]
 8017d26:	4413      	add	r3, r2
 8017d28:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8017d2a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017d2e:	683a      	ldr	r2, [r7, #0]
 8017d30:	4413      	add	r3, r2
 8017d32:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8017d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d36:	3301      	adds	r3, #1
 8017d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d3c:	69bb      	ldr	r3, [r7, #24]
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	dbe8      	blt.n	8017d14 <map_normal+0x38>
                src_buf += src_stride;
                mask += mask_stride;
            }
        }
    }
}
 8017d42:	e1ee      	b.n	8018122 <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8017d44:	2300      	movs	r3, #0
 8017d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d48:	e027      	b.n	8017d9a <map_normal+0xbe>
                for(x = 0; x < w; x++) {
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d4e:	e013      	b.n	8017d78 <map_normal+0x9c>
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 8017d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d52:	683a      	ldr	r2, [r7, #0]
 8017d54:	4413      	add	r3, r2
 8017d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d58:	68f9      	ldr	r1, [r7, #12]
 8017d5a:	4411      	add	r1, r2
 8017d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d5e:	68f8      	ldr	r0, [r7, #12]
 8017d60:	1884      	adds	r4, r0, r2
 8017d62:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8017d66:	7809      	ldrb	r1, [r1, #0]
 8017d68:	7818      	ldrb	r0, [r3, #0]
 8017d6a:	f7ff f8d6 	bl	8016f1a <lv_color_mix>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 8017d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d74:	3301      	adds	r3, #1
 8017d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d7a:	69fb      	ldr	r3, [r7, #28]
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	dbe7      	blt.n	8017d50 <map_normal+0x74>
                dest_buf += dest_stride;
 8017d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017d84:	68fa      	ldr	r2, [r7, #12]
 8017d86:	4413      	add	r3, r2
 8017d88:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8017d8a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017d8e:	683a      	ldr	r2, [r7, #0]
 8017d90:	4413      	add	r3, r2
 8017d92:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8017d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d96:	3301      	adds	r3, #1
 8017d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d9c:	69bb      	ldr	r3, [r7, #24]
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	dbd3      	blt.n	8017d4a <map_normal+0x6e>
}
 8017da2:	e1be      	b.n	8018122 <map_normal+0x446>
        if(opa > LV_OPA_MAX) {
 8017da4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017da8:	2bfd      	cmp	r3, #253	; 0xfd
 8017daa:	f240 816d 	bls.w	8018088 <map_normal+0x3ac>
            int32_t x_end4 = w - 4;
 8017dae:	69fb      	ldr	r3, [r7, #28]
 8017db0:	3b04      	subs	r3, #4
 8017db2:	613b      	str	r3, [r7, #16]
            for(y = 0; y < h; y++) {
 8017db4:	2300      	movs	r3, #0
 8017db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8017db8:	e160      	b.n	801807c <map_normal+0x3a0>
                const lv_opa_t * mask_tmp_x = mask;
 8017dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017dbc:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017dc2:	e028      	b.n	8017e16 <map_normal+0x13a>
                    MAP_NORMAL_MASK_PX(x)
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d01e      	beq.n	8017e0a <map_normal+0x12e>
 8017dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dce:	781b      	ldrb	r3, [r3, #0]
 8017dd0:	2bff      	cmp	r3, #255	; 0xff
 8017dd2:	d108      	bne.n	8017de6 <map_normal+0x10a>
 8017dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd6:	683a      	ldr	r2, [r7, #0]
 8017dd8:	441a      	add	r2, r3
 8017dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ddc:	68f9      	ldr	r1, [r7, #12]
 8017dde:	440b      	add	r3, r1
 8017de0:	7812      	ldrb	r2, [r2, #0]
 8017de2:	701a      	strb	r2, [r3, #0]
 8017de4:	e011      	b.n	8017e0a <map_normal+0x12e>
 8017de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de8:	683a      	ldr	r2, [r7, #0]
 8017dea:	4413      	add	r3, r2
 8017dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017dee:	68f9      	ldr	r1, [r7, #12]
 8017df0:	4411      	add	r1, r2
 8017df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017df4:	7815      	ldrb	r5, [r2, #0]
 8017df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017df8:	68f8      	ldr	r0, [r7, #12]
 8017dfa:	1884      	adds	r4, r0, r2
 8017dfc:	462a      	mov	r2, r5
 8017dfe:	7809      	ldrb	r1, [r1, #0]
 8017e00:	7818      	ldrb	r0, [r3, #0]
 8017e02:	f7ff f88a 	bl	8016f1a <lv_color_mix>
 8017e06:	4603      	mov	r3, r0
 8017e08:	7023      	strb	r3, [r4, #0]
 8017e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8017e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e12:	3301      	adds	r3, #1
 8017e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e18:	69fb      	ldr	r3, [r7, #28]
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	da04      	bge.n	8017e28 <map_normal+0x14c>
 8017e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e20:	f003 0303 	and.w	r3, r3, #3
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d1cd      	bne.n	8017dc4 <map_normal+0xe8>
                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
 8017e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2a:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8017e2c:	e0df      	b.n	8017fee <map_normal+0x312>
                    if(*mask32) {
 8017e2e:	6a3b      	ldr	r3, [r7, #32]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	f000 80d5 	beq.w	8017fe2 <map_normal+0x306>
                        if((*mask32) == 0xFFFFFFFF) {
 8017e38:	6a3b      	ldr	r3, [r7, #32]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017e40:	d126      	bne.n	8017e90 <map_normal+0x1b4>
                            dest_buf[x] = src_buf[x];
 8017e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e44:	683a      	ldr	r2, [r7, #0]
 8017e46:	441a      	add	r2, r3
 8017e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e4a:	68f9      	ldr	r1, [r7, #12]
 8017e4c:	440b      	add	r3, r1
 8017e4e:	7812      	ldrb	r2, [r2, #0]
 8017e50:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 8017e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e54:	3301      	adds	r3, #1
 8017e56:	683a      	ldr	r2, [r7, #0]
 8017e58:	441a      	add	r2, r3
 8017e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e5c:	3301      	adds	r3, #1
 8017e5e:	68f9      	ldr	r1, [r7, #12]
 8017e60:	440b      	add	r3, r1
 8017e62:	7812      	ldrb	r2, [r2, #0]
 8017e64:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 2] = src_buf[x + 2];
 8017e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e68:	3302      	adds	r3, #2
 8017e6a:	683a      	ldr	r2, [r7, #0]
 8017e6c:	441a      	add	r2, r3
 8017e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e70:	3302      	adds	r3, #2
 8017e72:	68f9      	ldr	r1, [r7, #12]
 8017e74:	440b      	add	r3, r1
 8017e76:	7812      	ldrb	r2, [r2, #0]
 8017e78:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 3] = src_buf[x + 3];
 8017e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e7c:	3303      	adds	r3, #3
 8017e7e:	683a      	ldr	r2, [r7, #0]
 8017e80:	441a      	add	r2, r3
 8017e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e84:	3303      	adds	r3, #3
 8017e86:	68f9      	ldr	r1, [r7, #12]
 8017e88:	440b      	add	r3, r1
 8017e8a:	7812      	ldrb	r2, [r2, #0]
 8017e8c:	701a      	strb	r2, [r3, #0]
 8017e8e:	e0a8      	b.n	8017fe2 <map_normal+0x306>
                            mask_tmp_x = (const lv_opa_t *)mask32;
 8017e90:	6a3b      	ldr	r3, [r7, #32]
 8017e92:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x)
 8017e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e96:	781b      	ldrb	r3, [r3, #0]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d01e      	beq.n	8017eda <map_normal+0x1fe>
 8017e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9e:	781b      	ldrb	r3, [r3, #0]
 8017ea0:	2bff      	cmp	r3, #255	; 0xff
 8017ea2:	d108      	bne.n	8017eb6 <map_normal+0x1da>
 8017ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea6:	683a      	ldr	r2, [r7, #0]
 8017ea8:	441a      	add	r2, r3
 8017eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eac:	68f9      	ldr	r1, [r7, #12]
 8017eae:	440b      	add	r3, r1
 8017eb0:	7812      	ldrb	r2, [r2, #0]
 8017eb2:	701a      	strb	r2, [r3, #0]
 8017eb4:	e011      	b.n	8017eda <map_normal+0x1fe>
 8017eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb8:	683a      	ldr	r2, [r7, #0]
 8017eba:	4413      	add	r3, r2
 8017ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ebe:	68f9      	ldr	r1, [r7, #12]
 8017ec0:	4411      	add	r1, r2
 8017ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ec4:	7815      	ldrb	r5, [r2, #0]
 8017ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ec8:	68f8      	ldr	r0, [r7, #12]
 8017eca:	1884      	adds	r4, r0, r2
 8017ecc:	462a      	mov	r2, r5
 8017ece:	7809      	ldrb	r1, [r1, #0]
 8017ed0:	7818      	ldrb	r0, [r3, #0]
 8017ed2:	f7ff f822 	bl	8016f1a <lv_color_mix>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	7023      	strb	r3, [r4, #0]
 8017eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017edc:	3301      	adds	r3, #1
 8017ede:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 1)
 8017ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee2:	781b      	ldrb	r3, [r3, #0]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d023      	beq.n	8017f30 <map_normal+0x254>
 8017ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eea:	781b      	ldrb	r3, [r3, #0]
 8017eec:	2bff      	cmp	r3, #255	; 0xff
 8017eee:	d10a      	bne.n	8017f06 <map_normal+0x22a>
 8017ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	683a      	ldr	r2, [r7, #0]
 8017ef6:	441a      	add	r2, r3
 8017ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017efa:	3301      	adds	r3, #1
 8017efc:	68f9      	ldr	r1, [r7, #12]
 8017efe:	440b      	add	r3, r1
 8017f00:	7812      	ldrb	r2, [r2, #0]
 8017f02:	701a      	strb	r2, [r3, #0]
 8017f04:	e014      	b.n	8017f30 <map_normal+0x254>
 8017f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f08:	3301      	adds	r3, #1
 8017f0a:	683a      	ldr	r2, [r7, #0]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f10:	3201      	adds	r2, #1
 8017f12:	68f9      	ldr	r1, [r7, #12]
 8017f14:	4411      	add	r1, r2
 8017f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f18:	7815      	ldrb	r5, [r2, #0]
 8017f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f1c:	3201      	adds	r2, #1
 8017f1e:	68f8      	ldr	r0, [r7, #12]
 8017f20:	1884      	adds	r4, r0, r2
 8017f22:	462a      	mov	r2, r5
 8017f24:	7809      	ldrb	r1, [r1, #0]
 8017f26:	7818      	ldrb	r0, [r3, #0]
 8017f28:	f7fe fff7 	bl	8016f1a <lv_color_mix>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	7023      	strb	r3, [r4, #0]
 8017f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f32:	3301      	adds	r3, #1
 8017f34:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 2)
 8017f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f38:	781b      	ldrb	r3, [r3, #0]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d023      	beq.n	8017f86 <map_normal+0x2aa>
 8017f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f40:	781b      	ldrb	r3, [r3, #0]
 8017f42:	2bff      	cmp	r3, #255	; 0xff
 8017f44:	d10a      	bne.n	8017f5c <map_normal+0x280>
 8017f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f48:	3302      	adds	r3, #2
 8017f4a:	683a      	ldr	r2, [r7, #0]
 8017f4c:	441a      	add	r2, r3
 8017f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f50:	3302      	adds	r3, #2
 8017f52:	68f9      	ldr	r1, [r7, #12]
 8017f54:	440b      	add	r3, r1
 8017f56:	7812      	ldrb	r2, [r2, #0]
 8017f58:	701a      	strb	r2, [r3, #0]
 8017f5a:	e014      	b.n	8017f86 <map_normal+0x2aa>
 8017f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f5e:	3302      	adds	r3, #2
 8017f60:	683a      	ldr	r2, [r7, #0]
 8017f62:	4413      	add	r3, r2
 8017f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f66:	3202      	adds	r2, #2
 8017f68:	68f9      	ldr	r1, [r7, #12]
 8017f6a:	4411      	add	r1, r2
 8017f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f6e:	7815      	ldrb	r5, [r2, #0]
 8017f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f72:	3202      	adds	r2, #2
 8017f74:	68f8      	ldr	r0, [r7, #12]
 8017f76:	1884      	adds	r4, r0, r2
 8017f78:	462a      	mov	r2, r5
 8017f7a:	7809      	ldrb	r1, [r1, #0]
 8017f7c:	7818      	ldrb	r0, [r3, #0]
 8017f7e:	f7fe ffcc 	bl	8016f1a <lv_color_mix>
 8017f82:	4603      	mov	r3, r0
 8017f84:	7023      	strb	r3, [r4, #0]
 8017f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f88:	3301      	adds	r3, #1
 8017f8a:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 3)
 8017f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f8e:	781b      	ldrb	r3, [r3, #0]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d023      	beq.n	8017fdc <map_normal+0x300>
 8017f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	2bff      	cmp	r3, #255	; 0xff
 8017f9a:	d10a      	bne.n	8017fb2 <map_normal+0x2d6>
 8017f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9e:	3303      	adds	r3, #3
 8017fa0:	683a      	ldr	r2, [r7, #0]
 8017fa2:	441a      	add	r2, r3
 8017fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa6:	3303      	adds	r3, #3
 8017fa8:	68f9      	ldr	r1, [r7, #12]
 8017faa:	440b      	add	r3, r1
 8017fac:	7812      	ldrb	r2, [r2, #0]
 8017fae:	701a      	strb	r2, [r3, #0]
 8017fb0:	e014      	b.n	8017fdc <map_normal+0x300>
 8017fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb4:	3303      	adds	r3, #3
 8017fb6:	683a      	ldr	r2, [r7, #0]
 8017fb8:	4413      	add	r3, r2
 8017fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fbc:	3203      	adds	r2, #3
 8017fbe:	68f9      	ldr	r1, [r7, #12]
 8017fc0:	4411      	add	r1, r2
 8017fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fc4:	7815      	ldrb	r5, [r2, #0]
 8017fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fc8:	3203      	adds	r2, #3
 8017fca:	68f8      	ldr	r0, [r7, #12]
 8017fcc:	1884      	adds	r4, r0, r2
 8017fce:	462a      	mov	r2, r5
 8017fd0:	7809      	ldrb	r1, [r1, #0]
 8017fd2:	7818      	ldrb	r0, [r3, #0]
 8017fd4:	f7fe ffa1 	bl	8016f1a <lv_color_mix>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	7023      	strb	r3, [r4, #0]
 8017fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fde:	3301      	adds	r3, #1
 8017fe0:	627b      	str	r3, [r7, #36]	; 0x24
                    mask32++;
 8017fe2:	6a3b      	ldr	r3, [r7, #32]
 8017fe4:	3304      	adds	r3, #4
 8017fe6:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8017fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fea:	3304      	adds	r3, #4
 8017fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ff0:	693b      	ldr	r3, [r7, #16]
 8017ff2:	429a      	cmp	r2, r3
 8017ff4:	f6ff af1b 	blt.w	8017e2e <map_normal+0x152>
                mask_tmp_x = (const lv_opa_t *)mask32;
 8017ff8:	6a3b      	ldr	r3, [r7, #32]
 8017ffa:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 8017ffc:	e028      	b.n	8018050 <map_normal+0x374>
                    MAP_NORMAL_MASK_PX(x)
 8017ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018000:	781b      	ldrb	r3, [r3, #0]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d01e      	beq.n	8018044 <map_normal+0x368>
 8018006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018008:	781b      	ldrb	r3, [r3, #0]
 801800a:	2bff      	cmp	r3, #255	; 0xff
 801800c:	d108      	bne.n	8018020 <map_normal+0x344>
 801800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018010:	683a      	ldr	r2, [r7, #0]
 8018012:	441a      	add	r2, r3
 8018014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018016:	68f9      	ldr	r1, [r7, #12]
 8018018:	440b      	add	r3, r1
 801801a:	7812      	ldrb	r2, [r2, #0]
 801801c:	701a      	strb	r2, [r3, #0]
 801801e:	e011      	b.n	8018044 <map_normal+0x368>
 8018020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018022:	683a      	ldr	r2, [r7, #0]
 8018024:	4413      	add	r3, r2
 8018026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018028:	68f9      	ldr	r1, [r7, #12]
 801802a:	4411      	add	r1, r2
 801802c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801802e:	7815      	ldrb	r5, [r2, #0]
 8018030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018032:	68f8      	ldr	r0, [r7, #12]
 8018034:	1884      	adds	r4, r0, r2
 8018036:	462a      	mov	r2, r5
 8018038:	7809      	ldrb	r1, [r1, #0]
 801803a:	7818      	ldrb	r0, [r3, #0]
 801803c:	f7fe ff6d 	bl	8016f1a <lv_color_mix>
 8018040:	4603      	mov	r3, r0
 8018042:	7023      	strb	r3, [r4, #0]
 8018044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018046:	3301      	adds	r3, #1
 8018048:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 801804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804c:	3301      	adds	r3, #1
 801804e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018052:	69fb      	ldr	r3, [r7, #28]
 8018054:	429a      	cmp	r2, r3
 8018056:	dbd2      	blt.n	8017ffe <map_normal+0x322>
                dest_buf += dest_stride;
 8018058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801805c:	68fa      	ldr	r2, [r7, #12]
 801805e:	4413      	add	r3, r2
 8018060:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8018062:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8018066:	683a      	ldr	r2, [r7, #0]
 8018068:	4413      	add	r3, r2
 801806a:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 801806c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8018070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018072:	4413      	add	r3, r2
 8018074:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 8018076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018078:	3301      	adds	r3, #1
 801807a:	62bb      	str	r3, [r7, #40]	; 0x28
 801807c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801807e:	69bb      	ldr	r3, [r7, #24]
 8018080:	429a      	cmp	r2, r3
 8018082:	f6ff ae9a 	blt.w	8017dba <map_normal+0xde>
}
 8018086:	e04c      	b.n	8018122 <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8018088:	2300      	movs	r3, #0
 801808a:	62bb      	str	r3, [r7, #40]	; 0x28
 801808c:	e045      	b.n	801811a <map_normal+0x43e>
                for(x = 0; x < w; x++) {
 801808e:	2300      	movs	r3, #0
 8018090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018092:	e02c      	b.n	80180ee <map_normal+0x412>
                    if(mask[x]) {
 8018094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018098:	4413      	add	r3, r2
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d023      	beq.n	80180e8 <map_normal+0x40c>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 80180a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80180a4:	4413      	add	r3, r2
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	2bfc      	cmp	r3, #252	; 0xfc
 80180aa:	d80a      	bhi.n	80180c2 <map_normal+0x3e6>
 80180ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80180b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80180b4:	440a      	add	r2, r1
 80180b6:	7812      	ldrb	r2, [r2, #0]
 80180b8:	fb02 f303 	mul.w	r3, r2, r3
 80180bc:	121b      	asrs	r3, r3, #8
 80180be:	b2db      	uxtb	r3, r3
 80180c0:	e001      	b.n	80180c6 <map_normal+0x3ea>
 80180c2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80180c6:	75fb      	strb	r3, [r7, #23]
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 80180c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ca:	683a      	ldr	r2, [r7, #0]
 80180cc:	4413      	add	r3, r2
 80180ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180d0:	68f9      	ldr	r1, [r7, #12]
 80180d2:	4411      	add	r1, r2
 80180d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180d6:	68f8      	ldr	r0, [r7, #12]
 80180d8:	1884      	adds	r4, r0, r2
 80180da:	7dfa      	ldrb	r2, [r7, #23]
 80180dc:	7809      	ldrb	r1, [r1, #0]
 80180de:	7818      	ldrb	r0, [r3, #0]
 80180e0:	f7fe ff1b 	bl	8016f1a <lv_color_mix>
 80180e4:	4603      	mov	r3, r0
 80180e6:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 80180e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ea:	3301      	adds	r3, #1
 80180ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180f0:	69fb      	ldr	r3, [r7, #28]
 80180f2:	429a      	cmp	r2, r3
 80180f4:	dbce      	blt.n	8018094 <map_normal+0x3b8>
                dest_buf += dest_stride;
 80180f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80180fa:	68fa      	ldr	r2, [r7, #12]
 80180fc:	4413      	add	r3, r2
 80180fe:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8018100:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8018104:	683a      	ldr	r2, [r7, #0]
 8018106:	4413      	add	r3, r2
 8018108:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 801810a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801810e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018110:	4413      	add	r3, r2
 8018112:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 8018114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018116:	3301      	adds	r3, #1
 8018118:	62bb      	str	r3, [r7, #40]	; 0x28
 801811a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801811c:	69bb      	ldr	r3, [r7, #24]
 801811e:	429a      	cmp	r2, r3
 8018120:	dbb5      	blt.n	801808e <map_normal+0x3b2>
}
 8018122:	bf00      	nop
 8018124:	3730      	adds	r7, #48	; 0x30
 8018126:	46bd      	mov	sp, r7
 8018128:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801812c <map_blended>:

#if LV_DRAW_COMPLEX
static void map_blended(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                        const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa,
                        const lv_opa_t * mask, lv_coord_t mask_stride, lv_blend_mode_t blend_mode)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b08e      	sub	sp, #56	; 0x38
 8018130:	af00      	add	r7, sp, #0
 8018132:	60f8      	str	r0, [r7, #12]
 8018134:	60b9      	str	r1, [r7, #8]
 8018136:	603b      	str	r3, [r7, #0]
 8018138:	4613      	mov	r3, r2
 801813a:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 801813c:	68b8      	ldr	r0, [r7, #8]
 801813e:	f7fe ff7f 	bl	8017040 <lv_area_get_width>
 8018142:	4603      	mov	r3, r0
 8018144:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 8018146:	68b8      	ldr	r0, [r7, #8]
 8018148:	f7fe ff91 	bl	801706e <lv_area_get_height>
 801814c:	4603      	mov	r3, r0
 801814e:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 8018150:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8018154:	2b03      	cmp	r3, #3
 8018156:	d00d      	beq.n	8018174 <map_blended+0x48>
 8018158:	2b03      	cmp	r3, #3
 801815a:	f300 80ef 	bgt.w	801833c <map_blended+0x210>
 801815e:	2b01      	cmp	r3, #1
 8018160:	d002      	beq.n	8018168 <map_blended+0x3c>
 8018162:	2b02      	cmp	r3, #2
 8018164:	d003      	beq.n	801816e <map_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 8018166:	e0e9      	b.n	801833c <map_blended+0x210>
            blend_fp = color_blend_true_color_additive;
 8018168:	4b76      	ldr	r3, [pc, #472]	; (8018344 <map_blended+0x218>)
 801816a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801816c:	e005      	b.n	801817a <map_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 801816e:	4b76      	ldr	r3, [pc, #472]	; (8018348 <map_blended+0x21c>)
 8018170:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8018172:	e002      	b.n	801817a <map_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 8018174:	4b75      	ldr	r3, [pc, #468]	; (801834c <map_blended+0x220>)
 8018176:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8018178:	bf00      	nop
    }

    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 801817a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801817c:	2b00      	cmp	r3, #0
 801817e:	d151      	bne.n	8018224 <map_blended+0xf8>
        last_dest_color = dest_buf[0];
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	781b      	ldrb	r3, [r3, #0]
 8018184:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 8018186:	683b      	ldr	r3, [r7, #0]
 8018188:	781b      	ldrb	r3, [r3, #0]
 801818a:	763b      	strb	r3, [r7, #24]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 801818c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	7f39      	ldrb	r1, [r7, #28]
 8018194:	7e38      	ldrb	r0, [r7, #24]
 8018196:	4798      	blx	r3
 8018198:	4603      	mov	r3, r0
 801819a:	753b      	strb	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 801819c:	2300      	movs	r3, #0
 801819e:	633b      	str	r3, [r7, #48]	; 0x30
 80181a0:	e03b      	b.n	801821a <map_blended+0xee>
            for(x = 0; x < w; x++) {
 80181a2:	2300      	movs	r3, #0
 80181a4:	637b      	str	r3, [r7, #52]	; 0x34
 80181a6:	e027      	b.n	80181f8 <map_blended+0xcc>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 80181a8:	7e3a      	ldrb	r2, [r7, #24]
 80181aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181ac:	6839      	ldr	r1, [r7, #0]
 80181ae:	440b      	add	r3, r1
 80181b0:	781b      	ldrb	r3, [r3, #0]
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d106      	bne.n	80181c4 <map_blended+0x98>
 80181b6:	7f3a      	ldrb	r2, [r7, #28]
 80181b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181ba:	68f9      	ldr	r1, [r7, #12]
 80181bc:	440b      	add	r3, r1
 80181be:	781b      	ldrb	r3, [r3, #0]
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d011      	beq.n	80181e8 <map_blended+0xbc>
                    last_dest_color = dest_buf[x];
 80181c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181c6:	68fa      	ldr	r2, [r7, #12]
 80181c8:	4413      	add	r3, r2
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 80181ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181d0:	683a      	ldr	r2, [r7, #0]
 80181d2:	4413      	add	r3, r2
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	763b      	strb	r3, [r7, #24]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 80181d8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80181dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181de:	7f39      	ldrb	r1, [r7, #28]
 80181e0:	7e38      	ldrb	r0, [r7, #24]
 80181e2:	4798      	blx	r3
 80181e4:	4603      	mov	r3, r0
 80181e6:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 80181e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181ea:	68fa      	ldr	r2, [r7, #12]
 80181ec:	4413      	add	r3, r2
 80181ee:	7d3a      	ldrb	r2, [r7, #20]
 80181f0:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 80181f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181f4:	3301      	adds	r3, #1
 80181f6:	637b      	str	r3, [r7, #52]	; 0x34
 80181f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80181fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181fc:	429a      	cmp	r2, r3
 80181fe:	dbd3      	blt.n	80181a8 <map_blended+0x7c>
            }
            dest_buf += dest_stride;
 8018200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018204:	68fa      	ldr	r2, [r7, #12]
 8018206:	4413      	add	r3, r2
 8018208:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 801820a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801820e:	683a      	ldr	r2, [r7, #0]
 8018210:	4413      	add	r3, r2
 8018212:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8018214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018216:	3301      	adds	r3, #1
 8018218:	633b      	str	r3, [r7, #48]	; 0x30
 801821a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801821c:	6a3b      	ldr	r3, [r7, #32]
 801821e:	429a      	cmp	r2, r3
 8018220:	dbbf      	blt.n	80181a2 <map_blended+0x76>
 8018222:	e08c      	b.n	801833e <map_blended+0x212>
        }
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	781b      	ldrb	r3, [r3, #0]
 801822e:	763b      	strb	r3, [r7, #24]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 8018230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018232:	781b      	ldrb	r3, [r3, #0]
 8018234:	2bfc      	cmp	r3, #252	; 0xfc
 8018236:	d808      	bhi.n	801824a <map_blended+0x11e>
 8018238:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801823c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801823e:	7812      	ldrb	r2, [r2, #0]
 8018240:	fb02 f303 	mul.w	r3, r2, r3
 8018244:	121b      	asrs	r3, r3, #8
 8018246:	b2db      	uxtb	r3, r3
 8018248:	e001      	b.n	801824e <map_blended+0x122>
 801824a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801824e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8018252:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8018256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018258:	7f39      	ldrb	r1, [r7, #28]
 801825a:	7e38      	ldrb	r0, [r7, #24]
 801825c:	4798      	blx	r3
 801825e:	4603      	mov	r3, r0
 8018260:	743b      	strb	r3, [r7, #16]
        for(y = 0; y < h; y++) {
 8018262:	2300      	movs	r3, #0
 8018264:	633b      	str	r3, [r7, #48]	; 0x30
 8018266:	e064      	b.n	8018332 <map_blended+0x206>
            for(x = 0; x < w; x++) {
 8018268:	2300      	movs	r3, #0
 801826a:	637b      	str	r3, [r7, #52]	; 0x34
 801826c:	e04b      	b.n	8018306 <map_blended+0x1da>
                if(mask[x] == 0) continue;
 801826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018272:	4413      	add	r3, r2
 8018274:	781b      	ldrb	r3, [r3, #0]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d041      	beq.n	80182fe <map_blended+0x1d2>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 801827a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801827c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801827e:	4413      	add	r3, r2
 8018280:	781b      	ldrb	r3, [r3, #0]
 8018282:	2bfc      	cmp	r3, #252	; 0xfc
 8018284:	d80a      	bhi.n	801829c <map_blended+0x170>
 8018286:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801828a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801828c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801828e:	440a      	add	r2, r1
 8018290:	7812      	ldrb	r2, [r2, #0]
 8018292:	fb02 f303 	mul.w	r3, r2, r3
 8018296:	121b      	asrs	r3, r3, #8
 8018298:	b2db      	uxtb	r3, r3
 801829a:	e001      	b.n	80182a0 <map_blended+0x174>
 801829c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80182a0:	77fb      	strb	r3, [r7, #31]
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 80182a2:	7e3a      	ldrb	r2, [r7, #24]
 80182a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182a6:	6839      	ldr	r1, [r7, #0]
 80182a8:	440b      	add	r3, r1
 80182aa:	781b      	ldrb	r3, [r3, #0]
 80182ac:	429a      	cmp	r2, r3
 80182ae:	d10b      	bne.n	80182c8 <map_blended+0x19c>
 80182b0:	7f3a      	ldrb	r2, [r7, #28]
 80182b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182b4:	68f9      	ldr	r1, [r7, #12]
 80182b6:	440b      	add	r3, r1
 80182b8:	781b      	ldrb	r3, [r3, #0]
 80182ba:	429a      	cmp	r2, r3
 80182bc:	d104      	bne.n	80182c8 <map_blended+0x19c>
 80182be:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80182c2:	7ffb      	ldrb	r3, [r7, #31]
 80182c4:	429a      	cmp	r2, r3
 80182c6:	d014      	beq.n	80182f2 <map_blended+0x1c6>
                    last_dest_color = dest_buf[x];
 80182c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182ca:	68fa      	ldr	r2, [r7, #12]
 80182cc:	4413      	add	r3, r2
 80182ce:	781b      	ldrb	r3, [r3, #0]
 80182d0:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 80182d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182d4:	683a      	ldr	r2, [r7, #0]
 80182d6:	4413      	add	r3, r2
 80182d8:	781b      	ldrb	r3, [r3, #0]
 80182da:	763b      	strb	r3, [r7, #24]
                    last_opa = opa_tmp;
 80182dc:	7ffb      	ldrb	r3, [r7, #31]
 80182de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 80182e2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80182e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182e8:	7f39      	ldrb	r1, [r7, #28]
 80182ea:	7e38      	ldrb	r0, [r7, #24]
 80182ec:	4798      	blx	r3
 80182ee:	4603      	mov	r3, r0
 80182f0:	743b      	strb	r3, [r7, #16]
                }
                dest_buf[x] = last_res_color;
 80182f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182f4:	68fa      	ldr	r2, [r7, #12]
 80182f6:	4413      	add	r3, r2
 80182f8:	7c3a      	ldrb	r2, [r7, #16]
 80182fa:	701a      	strb	r2, [r3, #0]
 80182fc:	e000      	b.n	8018300 <map_blended+0x1d4>
                if(mask[x] == 0) continue;
 80182fe:	bf00      	nop
            for(x = 0; x < w; x++) {
 8018300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018302:	3301      	adds	r3, #1
 8018304:	637b      	str	r3, [r7, #52]	; 0x34
 8018306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801830a:	429a      	cmp	r2, r3
 801830c:	dbaf      	blt.n	801826e <map_blended+0x142>
            }
            dest_buf += dest_stride;
 801830e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018312:	68fa      	ldr	r2, [r7, #12]
 8018314:	4413      	add	r3, r2
 8018316:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 8018318:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801831c:	683a      	ldr	r2, [r7, #0]
 801831e:	4413      	add	r3, r2
 8018320:	603b      	str	r3, [r7, #0]
            mask += mask_stride;
 8018322:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8018326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018328:	4413      	add	r3, r2
 801832a:	64bb      	str	r3, [r7, #72]	; 0x48
        for(y = 0; y < h; y++) {
 801832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801832e:	3301      	adds	r3, #1
 8018330:	633b      	str	r3, [r7, #48]	; 0x30
 8018332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018334:	6a3b      	ldr	r3, [r7, #32]
 8018336:	429a      	cmp	r2, r3
 8018338:	db96      	blt.n	8018268 <map_blended+0x13c>
 801833a:	e000      	b.n	801833e <map_blended+0x212>
            return;
 801833c:	bf00      	nop
        }
    }
}
 801833e:	3738      	adds	r7, #56	; 0x38
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	08018351 	.word	0x08018351
 8018348:	080183a1 	.word	0x080183a1
 801834c:	08018457 	.word	0x08018457

08018350 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b084      	sub	sp, #16
 8018354:	af00      	add	r7, sp, #0
 8018356:	7138      	strb	r0, [r7, #4]
 8018358:	7039      	strb	r1, [r7, #0]
 801835a:	4613      	mov	r3, r2
 801835c:	70fb      	strb	r3, [r7, #3]

    if(opa <= LV_OPA_MIN) return bg;
 801835e:	78fb      	ldrb	r3, [r7, #3]
 8018360:	2b02      	cmp	r3, #2
 8018362:	d801      	bhi.n	8018368 <color_blend_true_color_additive+0x18>
 8018364:	783b      	ldrb	r3, [r7, #0]
 8018366:	e017      	b.n	8018398 <color_blend_true_color_additive+0x48>

    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
 8018368:	783b      	ldrb	r3, [r7, #0]
 801836a:	461a      	mov	r2, r3
 801836c:	793b      	ldrb	r3, [r7, #4]
 801836e:	4413      	add	r3, r2
 8018370:	60fb      	str	r3, [r7, #12]
    fg.full = LV_MIN(tmp, 1);
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	2b00      	cmp	r3, #0
 8018376:	bf14      	ite	ne
 8018378:	2301      	movne	r3, #1
 801837a:	2300      	moveq	r3, #0
 801837c:	b2db      	uxtb	r3, r3
 801837e:	713b      	strb	r3, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 8018380:	78fb      	ldrb	r3, [r7, #3]
 8018382:	2bff      	cmp	r3, #255	; 0xff
 8018384:	d101      	bne.n	801838a <color_blend_true_color_additive+0x3a>
 8018386:	793b      	ldrb	r3, [r7, #4]
 8018388:	e006      	b.n	8018398 <color_blend_true_color_additive+0x48>

    return lv_color_mix(fg, bg, opa);
 801838a:	78fb      	ldrb	r3, [r7, #3]
 801838c:	461a      	mov	r2, r3
 801838e:	7839      	ldrb	r1, [r7, #0]
 8018390:	7938      	ldrb	r0, [r7, #4]
 8018392:	f7fe fdc2 	bl	8016f1a <lv_color_mix>
 8018396:	4603      	mov	r3, r0
}
 8018398:	4618      	mov	r0, r3
 801839a:	3710      	adds	r7, #16
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}

080183a0 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b084      	sub	sp, #16
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	7138      	strb	r0, [r7, #4]
 80183a8:	7039      	strb	r1, [r7, #0]
 80183aa:	4613      	mov	r3, r2
 80183ac:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 80183ae:	78fb      	ldrb	r3, [r7, #3]
 80183b0:	2b02      	cmp	r3, #2
 80183b2:	d801      	bhi.n	80183b8 <color_blend_true_color_subtractive+0x18>
 80183b4:	783b      	ldrb	r3, [r7, #0]
 80183b6:	e04a      	b.n	801844e <color_blend_true_color_subtractive+0xae>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 80183b8:	783b      	ldrb	r3, [r7, #0]
 80183ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80183be:	b2db      	uxtb	r3, r3
 80183c0:	461a      	mov	r2, r3
 80183c2:	793b      	ldrb	r3, [r7, #4]
 80183c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80183c8:	b2db      	uxtb	r3, r3
 80183ca:	1ad3      	subs	r3, r2, r3
 80183cc:	60fb      	str	r3, [r7, #12]
    fg.ch.red = LV_MAX(tmp, 0);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183d4:	f003 0301 	and.w	r3, r3, #1
 80183d8:	b2da      	uxtb	r2, r3
 80183da:	793b      	ldrb	r3, [r7, #4]
 80183dc:	f362 0300 	bfi	r3, r2, #0, #1
 80183e0:	713b      	strb	r3, [r7, #4]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 80183e2:	783b      	ldrb	r3, [r7, #0]
 80183e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80183e8:	b2db      	uxtb	r3, r3
 80183ea:	461a      	mov	r2, r3
 80183ec:	793b      	ldrb	r3, [r7, #4]
 80183ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80183f2:	b2db      	uxtb	r3, r3
 80183f4:	1ad3      	subs	r3, r2, r3
 80183f6:	60fb      	str	r3, [r7, #12]
    fg.ch.green = LV_MAX(tmp, 0);
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183fe:	f003 0301 	and.w	r3, r3, #1
 8018402:	b2da      	uxtb	r2, r3
 8018404:	793b      	ldrb	r3, [r7, #4]
 8018406:	f362 0300 	bfi	r3, r2, #0, #1
 801840a:	713b      	strb	r3, [r7, #4]
    tmp = LV_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 801840c:	783b      	ldrb	r3, [r7, #0]
 801840e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018412:	b2db      	uxtb	r3, r3
 8018414:	461a      	mov	r2, r3
 8018416:	793b      	ldrb	r3, [r7, #4]
 8018418:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801841c:	b2db      	uxtb	r3, r3
 801841e:	1ad3      	subs	r3, r2, r3
 8018420:	60fb      	str	r3, [r7, #12]
    fg.ch.blue = LV_MAX(tmp, 0);
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018428:	f003 0301 	and.w	r3, r3, #1
 801842c:	b2da      	uxtb	r2, r3
 801842e:	793b      	ldrb	r3, [r7, #4]
 8018430:	f362 0300 	bfi	r3, r2, #0, #1
 8018434:	713b      	strb	r3, [r7, #4]

    if(opa == LV_OPA_COVER) return fg;
 8018436:	78fb      	ldrb	r3, [r7, #3]
 8018438:	2bff      	cmp	r3, #255	; 0xff
 801843a:	d101      	bne.n	8018440 <color_blend_true_color_subtractive+0xa0>
 801843c:	793b      	ldrb	r3, [r7, #4]
 801843e:	e006      	b.n	801844e <color_blend_true_color_subtractive+0xae>

    return lv_color_mix(fg, bg, opa);
 8018440:	78fb      	ldrb	r3, [r7, #3]
 8018442:	461a      	mov	r2, r3
 8018444:	7839      	ldrb	r1, [r7, #0]
 8018446:	7938      	ldrb	r0, [r7, #4]
 8018448:	f7fe fd67 	bl	8016f1a <lv_color_mix>
 801844c:	4603      	mov	r3, r0
}
 801844e:	4618      	mov	r0, r3
 8018450:	3710      	adds	r7, #16
 8018452:	46bd      	mov	sp, r7
 8018454:	bd80      	pop	{r7, pc}

08018456 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8018456:	b580      	push	{r7, lr}
 8018458:	b082      	sub	sp, #8
 801845a:	af00      	add	r7, sp, #0
 801845c:	7138      	strb	r0, [r7, #4]
 801845e:	7039      	strb	r1, [r7, #0]
 8018460:	4613      	mov	r3, r2
 8018462:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 8018464:	78fb      	ldrb	r3, [r7, #3]
 8018466:	2b02      	cmp	r3, #2
 8018468:	d801      	bhi.n	801846e <color_blend_true_color_multiply+0x18>
 801846a:	783b      	ldrb	r3, [r7, #0]
 801846c:	e00b      	b.n	8018486 <color_blend_true_color_multiply+0x30>
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 801846e:	78fb      	ldrb	r3, [r7, #3]
 8018470:	2bff      	cmp	r3, #255	; 0xff
 8018472:	d101      	bne.n	8018478 <color_blend_true_color_multiply+0x22>
 8018474:	793b      	ldrb	r3, [r7, #4]
 8018476:	e006      	b.n	8018486 <color_blend_true_color_multiply+0x30>

    return lv_color_mix(fg, bg, opa);
 8018478:	78fb      	ldrb	r3, [r7, #3]
 801847a:	461a      	mov	r2, r3
 801847c:	7839      	ldrb	r1, [r7, #0]
 801847e:	7938      	ldrb	r0, [r7, #4]
 8018480:	f7fe fd4b 	bl	8016f1a <lv_color_mix>
 8018484:	4603      	mov	r3, r0
}
 8018486:	4618      	mov	r0, r3
 8018488:	3708      	adds	r7, #8
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}

0801848e <lv_color_to32>:
{
 801848e:	b480      	push	{r7}
 8018490:	b083      	sub	sp, #12
 8018492:	af00      	add	r7, sp, #0
 8018494:	7138      	strb	r0, [r7, #4]
    if(color.full == 0)
 8018496:	793b      	ldrb	r3, [r7, #4]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d102      	bne.n	80184a2 <lv_color_to32+0x14>
        return 0xFF000000;
 801849c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80184a0:	e001      	b.n	80184a6 <lv_color_to32+0x18>
        return 0xFFFFFFFF;
 80184a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	370c      	adds	r7, #12
 80184aa:	46bd      	mov	sp, r7
 80184ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b0:	4770      	bx	lr

080184b2 <compute_key>:
    const void * ptr;
    const uint32_t value;
};

static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
{
 80184b2:	b480      	push	{r7}
 80184b4:	b085      	sub	sp, #20
 80184b6:	af00      	add	r7, sp, #0
 80184b8:	6078      	str	r0, [r7, #4]
 80184ba:	460b      	mov	r3, r1
 80184bc:	807b      	strh	r3, [r7, #2]
 80184be:	4613      	mov	r3, r2
 80184c0:	803b      	strh	r3, [r7, #0]
    union void_cast v;
    v.ptr = g;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	60fb      	str	r3, [r7, #12]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 80184c6:	68fa      	ldr	r2, [r7, #12]
 80184c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80184cc:	4053      	eors	r3, r2
 80184ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80184d2:	1052      	asrs	r2, r2, #1
 80184d4:	b212      	sxth	r2, r2
 80184d6:	4053      	eors	r3, r2
}
 80184d8:	4618      	mov	r0, r3
 80184da:	3714      	adds	r7, #20
 80184dc:	46bd      	mov	sp, r7
 80184de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e2:	4770      	bx	lr

080184e4 <get_cache_item_size>:

static size_t get_cache_item_size(lv_grad_t * c)
{
 80184e4:	b480      	push	{r7}
 80184e6:	b085      	sub	sp, #20
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	6078      	str	r0, [r7, #4]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80184f2:	3303      	adds	r3, #3
 80184f4:	f023 0303 	bic.w	r3, r3, #3
 80184f8:	3310      	adds	r3, #16
 80184fa:	60fb      	str	r3, [r7, #12]
    s += ALIGN(c->size * sizeof(lv_color32_t));
#if LV_DITHER_ERROR_DIFFUSION == 1
    s += ALIGN(c->w * sizeof(lv_scolor24_t));
#endif
#endif
    return s;
 80184fc:	68fb      	ldr	r3, [r7, #12]
}
 80184fe:	4618      	mov	r0, r3
 8018500:	3714      	adds	r7, #20
 8018502:	46bd      	mov	sp, r7
 8018504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018508:	4770      	bx	lr
	...

0801850c <next_in_cache>:

static lv_grad_t * next_in_cache(lv_grad_t * item)
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b084      	sub	sp, #16
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
    if(grad_cache_size == 0) return NULL;
 8018514:	4b0f      	ldr	r3, [pc, #60]	; (8018554 <next_in_cache+0x48>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d101      	bne.n	8018520 <next_in_cache+0x14>
 801851c:	2300      	movs	r3, #0
 801851e:	e015      	b.n	801854c <next_in_cache+0x40>

    if(item == NULL)
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d102      	bne.n	801852c <next_in_cache+0x20>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 8018526:	4b0c      	ldr	r3, [pc, #48]	; (8018558 <next_in_cache+0x4c>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	e00f      	b.n	801854c <next_in_cache+0x40>

    size_t s = get_cache_item_size(item);
 801852c:	6878      	ldr	r0, [r7, #4]
 801852e:	f7ff ffd9 	bl	80184e4 <get_cache_item_size>
 8018532:	60f8      	str	r0, [r7, #12]
    /*Compute the size for this cache item*/
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8018534:	687a      	ldr	r2, [r7, #4]
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	441a      	add	r2, r3
 801853a:	4b08      	ldr	r3, [pc, #32]	; (801855c <next_in_cache+0x50>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	429a      	cmp	r2, r3
 8018540:	d301      	bcc.n	8018546 <next_in_cache+0x3a>
 8018542:	2300      	movs	r3, #0
 8018544:	e002      	b.n	801854c <next_in_cache+0x40>
    else return (lv_grad_t *)((uint8_t *)item + s);
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	4413      	add	r3, r2
}
 801854c:	4618      	mov	r0, r3
 801854e:	3710      	adds	r7, #16
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}
 8018554:	2000071c 	.word	0x2000071c
 8018558:	20000a60 	.word	0x20000a60
 801855c:	20000720 	.word	0x20000720

08018560 <iterate_cache>:

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b086      	sub	sp, #24
 8018564:	af00      	add	r7, sp, #0
 8018566:	60f8      	str	r0, [r7, #12]
 8018568:	60b9      	str	r1, [r7, #8]
 801856a:	607a      	str	r2, [r7, #4]
    lv_grad_t * first = next_in_cache(NULL);
 801856c:	2000      	movs	r0, #0
 801856e:	f7ff ffcd 	bl	801850c <next_in_cache>
 8018572:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 8018574:	e012      	b.n	801859c <iterate_cache+0x3c>
        if((*func)(first, ctx) == LV_RES_OK) {
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	68b9      	ldr	r1, [r7, #8]
 801857a:	6978      	ldr	r0, [r7, #20]
 801857c:	4798      	blx	r3
 801857e:	4603      	mov	r3, r0
 8018580:	2b01      	cmp	r3, #1
 8018582:	d107      	bne.n	8018594 <iterate_cache+0x34>
            if(out != NULL) *out = first;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d002      	beq.n	8018590 <iterate_cache+0x30>
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	697a      	ldr	r2, [r7, #20]
 801858e:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 8018590:	2301      	movs	r3, #1
 8018592:	e00d      	b.n	80185b0 <iterate_cache+0x50>
        }
        first = next_in_cache(first);
 8018594:	6978      	ldr	r0, [r7, #20]
 8018596:	f7ff ffb9 	bl	801850c <next_in_cache>
 801859a:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d005      	beq.n	80185ae <iterate_cache+0x4e>
 80185a2:	697b      	ldr	r3, [r7, #20]
 80185a4:	685b      	ldr	r3, [r3, #4]
 80185a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d1e3      	bne.n	8018576 <iterate_cache+0x16>
    }
    return LV_RES_INV;
 80185ae:	2300      	movs	r3, #0
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3718      	adds	r7, #24
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}

080185b8 <find_oldest_item_life>:

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
 80185b8:	b480      	push	{r7}
 80185ba:	b085      	sub	sp, #20
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
 80185c0:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 80185c2:	683b      	ldr	r3, [r7, #0]
 80185c4:	60fb      	str	r3, [r7, #12]
    if(c->life < *min_life) *min_life = c->life;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	685b      	ldr	r3, [r3, #4]
 80185ca:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80185ce:	461a      	mov	r2, r3
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d206      	bcs.n	80185e6 <find_oldest_item_life+0x2e>
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	685b      	ldr	r3, [r3, #4]
 80185dc:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80185e0:	461a      	mov	r2, r3
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	601a      	str	r2, [r3, #0]
    return LV_RES_INV;
 80185e6:	2300      	movs	r3, #0
}
 80185e8:	4618      	mov	r0, r3
 80185ea:	3714      	adds	r7, #20
 80185ec:	46bd      	mov	sp, r7
 80185ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f2:	4770      	bx	lr

080185f4 <free_item>:

static void free_item(lv_grad_t * c)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b086      	sub	sp, #24
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
    size_t size = get_cache_item_size(c);
 80185fc:	6878      	ldr	r0, [r7, #4]
 80185fe:	f7ff ff71 	bl	80184e4 <get_cache_item_size>
 8018602:	6178      	str	r0, [r7, #20]
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8018604:	4b1d      	ldr	r3, [pc, #116]	; (801867c <free_item+0x88>)
 8018606:	681a      	ldr	r2, [r3, #0]
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	1ad3      	subs	r3, r2, r3
 801860c:	461a      	mov	r2, r3
 801860e:	697b      	ldr	r3, [r7, #20]
 8018610:	1ad3      	subs	r3, r2, r3
 8018612:	613b      	str	r3, [r7, #16]
    grad_cache_end -= size;
 8018614:	4b19      	ldr	r3, [pc, #100]	; (801867c <free_item+0x88>)
 8018616:	681a      	ldr	r2, [r3, #0]
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	425b      	negs	r3, r3
 801861c:	4413      	add	r3, r2
 801861e:	4a17      	ldr	r2, [pc, #92]	; (801867c <free_item+0x88>)
 8018620:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 8018622:	693b      	ldr	r3, [r7, #16]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d024      	beq.n	8018672 <free_item+0x7e>
        uint8_t * old = (uint8_t *)c;
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	60fb      	str	r3, [r7, #12]
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 801862c:	687a      	ldr	r2, [r7, #4]
 801862e:	697b      	ldr	r3, [r7, #20]
 8018630:	4413      	add	r3, r2
 8018632:	693a      	ldr	r2, [r7, #16]
 8018634:	4619      	mov	r1, r3
 8018636:	6878      	ldr	r0, [r7, #4]
 8018638:	f009 fd22 	bl	8022080 <lv_memcpy>
        /* Then need to fix all internal pointers too */
        while((uint8_t *)c != grad_cache_end) {
 801863c:	e00d      	b.n	801865a <free_item+0x66>
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	689a      	ldr	r2, [r3, #8]
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	425b      	negs	r3, r3
 8018646:	441a      	add	r2, r3
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	609a      	str	r2, [r3, #8]
            c->hmap = (lv_color32_t *)(((uint8_t *)c->hmap) - size);
#if LV_DITHER_ERROR_DIFFUSION == 1
            c->error_acc = (lv_scolor24_t *)(((uint8_t *)c->error_acc) - size);
#endif
#endif
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f7ff ff49 	bl	80184e4 <get_cache_item_size>
 8018652:	4602      	mov	r2, r0
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	4413      	add	r3, r2
 8018658:	607b      	str	r3, [r7, #4]
        while((uint8_t *)c != grad_cache_end) {
 801865a:	4b08      	ldr	r3, [pc, #32]	; (801867c <free_item+0x88>)
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	687a      	ldr	r2, [r7, #4]
 8018660:	429a      	cmp	r2, r3
 8018662:	d1ec      	bne.n	801863e <free_item+0x4a>
        }
        lv_memset_00(old + next_items_size, size);
 8018664:	68fa      	ldr	r2, [r7, #12]
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	4413      	add	r3, r2
 801866a:	6979      	ldr	r1, [r7, #20]
 801866c:	4618      	mov	r0, r3
 801866e:	f009 ffad 	bl	80225cc <lv_memset_00>
    }
}
 8018672:	bf00      	nop
 8018674:	3718      	adds	r7, #24
 8018676:	46bd      	mov	sp, r7
 8018678:	bd80      	pop	{r7, pc}
 801867a:	bf00      	nop
 801867c:	20000720 	.word	0x20000720

08018680 <kill_oldest_item>:

static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
{
 8018680:	b580      	push	{r7, lr}
 8018682:	b084      	sub	sp, #16
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
 8018688:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 801868a:	683b      	ldr	r3, [r7, #0]
 801868c:	60fb      	str	r3, [r7, #12]
    if(c->life == *min_life) {
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8018696:	461a      	mov	r2, r3
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	429a      	cmp	r2, r3
 801869e:	d104      	bne.n	80186aa <kill_oldest_item+0x2a>
        /*Found, let's kill it*/
        free_item(c);
 80186a0:	6878      	ldr	r0, [r7, #4]
 80186a2:	f7ff ffa7 	bl	80185f4 <free_item>
        return LV_RES_OK;
 80186a6:	2301      	movs	r3, #1
 80186a8:	e000      	b.n	80186ac <kill_oldest_item+0x2c>
    }
    return LV_RES_INV;
 80186aa:	2300      	movs	r3, #0
}
 80186ac:	4618      	mov	r0, r3
 80186ae:	3710      	adds	r7, #16
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}

080186b4 <find_item>:

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
 80186b4:	b480      	push	{r7}
 80186b6:	b085      	sub	sp, #20
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
 80186bc:	6039      	str	r1, [r7, #0]
    uint32_t * k = (uint32_t *)ctx;
 80186be:	683b      	ldr	r3, [r7, #0]
 80186c0:	60fb      	str	r3, [r7, #12]
    if(c->key == *k) return LV_RES_OK;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681a      	ldr	r2, [r3, #0]
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	429a      	cmp	r2, r3
 80186cc:	d101      	bne.n	80186d2 <find_item+0x1e>
 80186ce:	2301      	movs	r3, #1
 80186d0:	e000      	b.n	80186d4 <find_item+0x20>
    return LV_RES_INV;
 80186d2:	2300      	movs	r3, #0
}
 80186d4:	4618      	mov	r0, r3
 80186d6:	3714      	adds	r7, #20
 80186d8:	46bd      	mov	sp, r7
 80186da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186de:	4770      	bx	lr

080186e0 <allocate_item>:

static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b088      	sub	sp, #32
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
 80186e8:	460b      	mov	r3, r1
 80186ea:	807b      	strh	r3, [r7, #2]
 80186ec:	4613      	mov	r3, r2
 80186ee:	803b      	strh	r3, [r7, #0]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	795b      	ldrb	r3, [r3, #5]
 80186f4:	f003 0307 	and.w	r3, r3, #7
 80186f8:	b2db      	uxtb	r3, r3
 80186fa:	2b02      	cmp	r3, #2
 80186fc:	d102      	bne.n	8018704 <allocate_item+0x24>
 80186fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018702:	e001      	b.n	8018708 <allocate_item+0x28>
 8018704:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018708:	82fb      	strh	r3, [r7, #22]
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 801870a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801870e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018712:	4293      	cmp	r3, r2
 8018714:	bfb8      	it	lt
 8018716:	4613      	movlt	r3, r2
 8018718:	82bb      	strh	r3, [r7, #20]
                                           no dithering is selected where it's used vertically */

    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 801871a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801871e:	3303      	adds	r3, #3
 8018720:	f023 0303 	bic.w	r3, r3, #3
 8018724:	3310      	adds	r3, #16
 8018726:	613b      	str	r3, [r7, #16]
#if LV_DITHER_ERROR_DIFFUSION == 1
    req_size += ALIGN(w * sizeof(lv_scolor24_t));
#endif
#endif

    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8018728:	4b49      	ldr	r3, [pc, #292]	; (8018850 <allocate_item+0x170>)
 801872a:	681a      	ldr	r2, [r3, #0]
 801872c:	4b49      	ldr	r3, [pc, #292]	; (8018854 <allocate_item+0x174>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	1ad3      	subs	r3, r2, r3
 8018732:	61fb      	str	r3, [r7, #28]
    lv_grad_t * item = NULL;
 8018734:	2300      	movs	r3, #0
 8018736:	61bb      	str	r3, [r7, #24]
    if(req_size + act_size < grad_cache_size) {
 8018738:	693a      	ldr	r2, [r7, #16]
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	441a      	add	r2, r3
 801873e:	4b46      	ldr	r3, [pc, #280]	; (8018858 <allocate_item+0x178>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	429a      	cmp	r2, r3
 8018744:	d208      	bcs.n	8018758 <allocate_item+0x78>
        item = (lv_grad_t *)grad_cache_end;
 8018746:	4b42      	ldr	r3, [pc, #264]	; (8018850 <allocate_item+0x170>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	61bb      	str	r3, [r7, #24]
        item->not_cached = 0;
 801874c:	69ba      	ldr	r2, [r7, #24]
 801874e:	79d3      	ldrb	r3, [r2, #7]
 8018750:	f36f 13c7 	bfc	r3, #7, #1
 8018754:	71d3      	strb	r3, [r2, #7]
 8018756:	e03e      	b.n	80187d6 <allocate_item+0xf6>
    }
    else {
        /*Need to evict items from cache until we find enough space to allocate this one */
        if(req_size <= grad_cache_size) {
 8018758:	4b3f      	ldr	r3, [pc, #252]	; (8018858 <allocate_item+0x178>)
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	693a      	ldr	r2, [r7, #16]
 801875e:	429a      	cmp	r2, r3
 8018760:	d827      	bhi.n	80187b2 <allocate_item+0xd2>
            while(act_size + req_size > grad_cache_size) {
 8018762:	e016      	b.n	8018792 <allocate_item+0xb2>
                uint32_t oldest_life = UINT32_MAX;
 8018764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018768:	60bb      	str	r3, [r7, #8]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 801876a:	f107 0308 	add.w	r3, r7, #8
 801876e:	2200      	movs	r2, #0
 8018770:	4619      	mov	r1, r3
 8018772:	483a      	ldr	r0, [pc, #232]	; (801885c <allocate_item+0x17c>)
 8018774:	f7ff fef4 	bl	8018560 <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8018778:	f107 0308 	add.w	r3, r7, #8
 801877c:	2200      	movs	r2, #0
 801877e:	4619      	mov	r1, r3
 8018780:	4837      	ldr	r0, [pc, #220]	; (8018860 <allocate_item+0x180>)
 8018782:	f7ff feed 	bl	8018560 <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8018786:	4b32      	ldr	r3, [pc, #200]	; (8018850 <allocate_item+0x170>)
 8018788:	681a      	ldr	r2, [r3, #0]
 801878a:	4b32      	ldr	r3, [pc, #200]	; (8018854 <allocate_item+0x174>)
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	1ad3      	subs	r3, r2, r3
 8018790:	61fb      	str	r3, [r7, #28]
            while(act_size + req_size > grad_cache_size) {
 8018792:	69fa      	ldr	r2, [r7, #28]
 8018794:	693b      	ldr	r3, [r7, #16]
 8018796:	441a      	add	r2, r3
 8018798:	4b2f      	ldr	r3, [pc, #188]	; (8018858 <allocate_item+0x178>)
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	429a      	cmp	r2, r3
 801879e:	d8e1      	bhi.n	8018764 <allocate_item+0x84>
            }
            item = (lv_grad_t *)grad_cache_end;
 80187a0:	4b2b      	ldr	r3, [pc, #172]	; (8018850 <allocate_item+0x170>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	61bb      	str	r3, [r7, #24]
            item->not_cached = 0;
 80187a6:	69ba      	ldr	r2, [r7, #24]
 80187a8:	79d3      	ldrb	r3, [r2, #7]
 80187aa:	f36f 13c7 	bfc	r3, #7, #1
 80187ae:	71d3      	strb	r3, [r2, #7]
 80187b0:	e011      	b.n	80187d6 <allocate_item+0xf6>
        }
        else {
            /*The cache is too small. Allocate the item manually and free it later.*/
            item = lv_mem_alloc(req_size);
 80187b2:	6938      	ldr	r0, [r7, #16]
 80187b4:	f009 fad6 	bl	8021d64 <lv_mem_alloc>
 80187b8:	61b8      	str	r0, [r7, #24]
            LV_ASSERT_MALLOC(item);
 80187ba:	69bb      	ldr	r3, [r7, #24]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d100      	bne.n	80187c2 <allocate_item+0xe2>
 80187c0:	e7fe      	b.n	80187c0 <allocate_item+0xe0>
            if(item == NULL) return NULL;
 80187c2:	69bb      	ldr	r3, [r7, #24]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d101      	bne.n	80187cc <allocate_item+0xec>
 80187c8:	2300      	movs	r3, #0
 80187ca:	e03c      	b.n	8018846 <allocate_item+0x166>
            item->not_cached = 1;
 80187cc:	69ba      	ldr	r2, [r7, #24]
 80187ce:	79d3      	ldrb	r3, [r2, #7]
 80187d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187d4:	71d3      	strb	r3, [r2, #7]
        }
    }

    item->key = compute_key(g, size, w);
 80187d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80187da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80187de:	4619      	mov	r1, r3
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f7ff fe66 	bl	80184b2 <compute_key>
 80187e6:	4602      	mov	r2, r0
 80187e8:	69bb      	ldr	r3, [r7, #24]
 80187ea:	601a      	str	r2, [r3, #0]
    item->life = 1;
 80187ec:	69ba      	ldr	r2, [r7, #24]
 80187ee:	6853      	ldr	r3, [r2, #4]
 80187f0:	2101      	movs	r1, #1
 80187f2:	f361 031d 	bfi	r3, r1, #0, #30
 80187f6:	6053      	str	r3, [r2, #4]
    item->filled = 0;
 80187f8:	69ba      	ldr	r2, [r7, #24]
 80187fa:	79d3      	ldrb	r3, [r2, #7]
 80187fc:	f36f 1386 	bfc	r3, #6, #1
 8018800:	71d3      	strb	r3, [r2, #7]
    item->alloc_size = map_size;
 8018802:	69bb      	ldr	r3, [r7, #24]
 8018804:	8aba      	ldrh	r2, [r7, #20]
 8018806:	819a      	strh	r2, [r3, #12]
    item->size = size;
 8018808:	69bb      	ldr	r3, [r7, #24]
 801880a:	8afa      	ldrh	r2, [r7, #22]
 801880c:	81da      	strh	r2, [r3, #14]
    if(item->not_cached) {
 801880e:	69bb      	ldr	r3, [r7, #24]
 8018810:	79db      	ldrb	r3, [r3, #7]
 8018812:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018816:	b2db      	uxtb	r3, r3
 8018818:	2b00      	cmp	r3, #0
 801881a:	d007      	beq.n	801882c <allocate_item+0x14c>
        uint8_t * p = (uint8_t *)item;
 801881c:	69bb      	ldr	r3, [r7, #24]
 801881e:	60fb      	str	r3, [r7, #12]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	f103 0210 	add.w	r2, r3, #16
 8018826:	69bb      	ldr	r3, [r7, #24]
 8018828:	609a      	str	r2, [r3, #8]
 801882a:	e00b      	b.n	8018844 <allocate_item+0x164>
        item->w = w;
#endif
#endif
    }
    else {
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 801882c:	4b08      	ldr	r3, [pc, #32]	; (8018850 <allocate_item+0x170>)
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	f103 0210 	add.w	r2, r3, #16
 8018834:	69bb      	ldr	r3, [r7, #24]
 8018836:	609a      	str	r2, [r3, #8]
        item->error_acc = (lv_scolor24_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_grad_color_t)) +
                                            ALIGN(map_size * sizeof(lv_color_t)));
        item->w = w;
#endif
#endif
        grad_cache_end += req_size;
 8018838:	4b05      	ldr	r3, [pc, #20]	; (8018850 <allocate_item+0x170>)
 801883a:	681a      	ldr	r2, [r3, #0]
 801883c:	693b      	ldr	r3, [r7, #16]
 801883e:	4413      	add	r3, r2
 8018840:	4a03      	ldr	r2, [pc, #12]	; (8018850 <allocate_item+0x170>)
 8018842:	6013      	str	r3, [r2, #0]
    }
    return item;
 8018844:	69bb      	ldr	r3, [r7, #24]
}
 8018846:	4618      	mov	r0, r3
 8018848:	3720      	adds	r7, #32
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}
 801884e:	bf00      	nop
 8018850:	20000720 	.word	0x20000720
 8018854:	20000a60 	.word	0x20000a60
 8018858:	2000071c 	.word	0x2000071c
 801885c:	080185b9 	.word	0x080185b9
 8018860:	08018681 	.word	0x08018681

08018864 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b082      	sub	sp, #8
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 801886c:	4b10      	ldr	r3, [pc, #64]	; (80188b0 <lv_gradient_set_cache_size+0x4c>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	4618      	mov	r0, r3
 8018872:	f009 faa7 	bl	8021dc4 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f009 fa74 	bl	8021d64 <lv_mem_alloc>
 801887c:	4603      	mov	r3, r0
 801887e:	4a0c      	ldr	r2, [pc, #48]	; (80188b0 <lv_gradient_set_cache_size+0x4c>)
 8018880:	6013      	str	r3, [r2, #0]
 8018882:	4b0b      	ldr	r3, [pc, #44]	; (80188b0 <lv_gradient_set_cache_size+0x4c>)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	4a0b      	ldr	r2, [pc, #44]	; (80188b4 <lv_gradient_set_cache_size+0x50>)
 8018888:	6013      	str	r3, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 801888a:	4b09      	ldr	r3, [pc, #36]	; (80188b0 <lv_gradient_set_cache_size+0x4c>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d100      	bne.n	8018894 <lv_gradient_set_cache_size+0x30>
 8018892:	e7fe      	b.n	8018892 <lv_gradient_set_cache_size+0x2e>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 8018894:	4b06      	ldr	r3, [pc, #24]	; (80188b0 <lv_gradient_set_cache_size+0x4c>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	6879      	ldr	r1, [r7, #4]
 801889a:	4618      	mov	r0, r3
 801889c:	f009 fe96 	bl	80225cc <lv_memset_00>
    grad_cache_size = max_bytes;
 80188a0:	4a05      	ldr	r2, [pc, #20]	; (80188b8 <lv_gradient_set_cache_size+0x54>)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	6013      	str	r3, [r2, #0]
}
 80188a6:	bf00      	nop
 80188a8:	3708      	adds	r7, #8
 80188aa:	46bd      	mov	sp, r7
 80188ac:	bd80      	pop	{r7, pc}
 80188ae:	bf00      	nop
 80188b0:	20000a60 	.word	0x20000a60
 80188b4:	20000720 	.word	0x20000720
 80188b8:	2000071c 	.word	0x2000071c

080188bc <lv_gradient_get>:

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 80188bc:	b590      	push	{r4, r7, lr}
 80188be:	b087      	sub	sp, #28
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	460b      	mov	r3, r1
 80188c6:	807b      	strh	r3, [r7, #2]
 80188c8:	4613      	mov	r3, r2
 80188ca:	803b      	strh	r3, [r7, #0]
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	795b      	ldrb	r3, [r3, #5]
 80188d0:	f003 0307 	and.w	r3, r3, #7
 80188d4:	b2db      	uxtb	r3, r3
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d101      	bne.n	80188de <lv_gradient_get+0x22>
 80188da:	2300      	movs	r3, #0
 80188dc:	e06d      	b.n	80189ba <lv_gradient_get+0xfe>

    /* Step 0: Check if the cache exist (else create it) */
    static bool inited = false;
    if(!inited) {
 80188de:	4b39      	ldr	r3, [pc, #228]	; (80189c4 <lv_gradient_get+0x108>)
 80188e0:	781b      	ldrb	r3, [r3, #0]
 80188e2:	f083 0301 	eor.w	r3, r3, #1
 80188e6:	b2db      	uxtb	r3, r3
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d005      	beq.n	80188f8 <lv_gradient_get+0x3c>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 80188ec:	2000      	movs	r0, #0
 80188ee:	f7ff ffb9 	bl	8018864 <lv_gradient_set_cache_size>
        inited = true;
 80188f2:	4b34      	ldr	r3, [pc, #208]	; (80189c4 <lv_gradient_get+0x108>)
 80188f4:	2201      	movs	r2, #1
 80188f6:	701a      	strb	r2, [r3, #0]
    }

    /* Step 1: Search cache for the given key */
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	795b      	ldrb	r3, [r3, #5]
 80188fc:	f003 0307 	and.w	r3, r3, #7
 8018900:	b2db      	uxtb	r3, r3
 8018902:	2b02      	cmp	r3, #2
 8018904:	d102      	bne.n	801890c <lv_gradient_get+0x50>
 8018906:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801890a:	e001      	b.n	8018910 <lv_gradient_get+0x54>
 801890c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018910:	82bb      	strh	r3, [r7, #20]
    uint32_t key = compute_key(g, size, w);
 8018912:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018916:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801891a:	4619      	mov	r1, r3
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	f7ff fdc8 	bl	80184b2 <compute_key>
 8018922:	4603      	mov	r3, r0
 8018924:	613b      	str	r3, [r7, #16]
    lv_grad_t * item = NULL;
 8018926:	2300      	movs	r3, #0
 8018928:	60fb      	str	r3, [r7, #12]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 801892a:	f107 020c 	add.w	r2, r7, #12
 801892e:	f107 0310 	add.w	r3, r7, #16
 8018932:	4619      	mov	r1, r3
 8018934:	4824      	ldr	r0, [pc, #144]	; (80189c8 <lv_gradient_get+0x10c>)
 8018936:	f7ff fe13 	bl	8018560 <iterate_cache>
 801893a:	4603      	mov	r3, r0
 801893c:	2b01      	cmp	r3, #1
 801893e:	d10c      	bne.n	801895a <lv_gradient_get+0x9e>
        item->life++; /* Don't forget to bump the counter */
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	685a      	ldr	r2, [r3, #4]
 8018944:	f3c2 021d 	ubfx	r2, r2, #0, #30
 8018948:	1c51      	adds	r1, r2, #1
 801894a:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 801894e:	685a      	ldr	r2, [r3, #4]
 8018950:	f361 021d 	bfi	r2, r1, #0, #30
 8018954:	605a      	str	r2, [r3, #4]
        return item;
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	e02f      	b.n	80189ba <lv_gradient_get+0xfe>
    }

    /* Step 2: Need to allocate an item for it */
    item = allocate_item(g, w, h);
 801895a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801895e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018962:	4619      	mov	r1, r3
 8018964:	6878      	ldr	r0, [r7, #4]
 8018966:	f7ff febb 	bl	80186e0 <allocate_item>
 801896a:	4603      	mov	r3, r0
 801896c:	60fb      	str	r3, [r7, #12]
    if(item == NULL) {
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d101      	bne.n	8018978 <lv_gradient_get+0xbc>
        LV_LOG_WARN("Faild to allcoate item for teh gradient");
        return item;
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	e020      	b.n	80189ba <lv_gradient_get+0xfe>
    }
#if LV_DITHER_ERROR_DIFFUSION == 1
    lv_memset_00(item->error_acc, w * sizeof(lv_scolor24_t));
#endif
#else
    for(lv_coord_t i = 0; i < item->size; i++) {
 8018978:	2300      	movs	r3, #0
 801897a:	82fb      	strh	r3, [r7, #22]
 801897c:	e015      	b.n	80189aa <lv_gradient_get+0xee>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	689a      	ldr	r2, [r3, #8]
 8018988:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801898c:	18d4      	adds	r4, r2, r3
 801898e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018992:	461a      	mov	r2, r3
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	f000 f819 	bl	80189cc <lv_gradient_calculate>
 801899a:	4603      	mov	r3, r0
 801899c:	7023      	strb	r3, [r4, #0]
    for(lv_coord_t i = 0; i < item->size; i++) {
 801899e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80189a2:	b29b      	uxth	r3, r3
 80189a4:	3301      	adds	r3, #1
 80189a6:	b29b      	uxth	r3, r3
 80189a8:	82fb      	strh	r3, [r7, #22]
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80189b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189b4:	429a      	cmp	r2, r3
 80189b6:	dbe2      	blt.n	801897e <lv_gradient_get+0xc2>
    }
#endif

    return item;
 80189b8:	68fb      	ldr	r3, [r7, #12]
}
 80189ba:	4618      	mov	r0, r3
 80189bc:	371c      	adds	r7, #28
 80189be:	46bd      	mov	sp, r7
 80189c0:	bd90      	pop	{r4, r7, pc}
 80189c2:	bf00      	nop
 80189c4:	20000724 	.word	0x20000724
 80189c8:	080186b5 	.word	0x080186b5

080189cc <lv_gradient_calculate>:

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b08c      	sub	sp, #48	; 0x30
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
 80189d4:	460b      	mov	r3, r1
 80189d6:	807b      	strh	r3, [r7, #2]
 80189d8:	4613      	mov	r3, r2
 80189da:	803b      	strh	r3, [r7, #0]
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	785b      	ldrb	r3, [r3, #1]
 80189e0:	461a      	mov	r2, r3
 80189e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80189e6:	fb02 f303 	mul.w	r3, r2, r3
 80189ea:	121b      	asrs	r3, r3, #8
 80189ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(frac <= min) {
 80189ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80189f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80189f4:	429a      	cmp	r2, r3
 80189f6:	db04      	blt.n	8018a02 <lv_gradient_calculate+0x36>
        GRAD_CONV(tmp, dsc->stops[0].color);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	781b      	ldrb	r3, [r3, #0]
 80189fc:	763b      	strb	r3, [r7, #24]
        return tmp;
 80189fe:	7e3b      	ldrb	r3, [r7, #24]
 8018a00:	e0c6      	b.n	8018b90 <lv_gradient_calculate+0x1c4>
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	791b      	ldrb	r3, [r3, #4]
 8018a06:	3b01      	subs	r3, #1
 8018a08:	687a      	ldr	r2, [r7, #4]
 8018a0a:	005b      	lsls	r3, r3, #1
 8018a0c:	4413      	add	r3, r2
 8018a0e:	785b      	ldrb	r3, [r3, #1]
 8018a10:	461a      	mov	r2, r3
 8018a12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a16:	fb02 f303 	mul.w	r3, r2, r3
 8018a1a:	121b      	asrs	r3, r3, #8
 8018a1c:	623b      	str	r3, [r7, #32]
    if(frac >= max) {
 8018a1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018a22:	6a3a      	ldr	r2, [r7, #32]
 8018a24:	429a      	cmp	r2, r3
 8018a26:	dc08      	bgt.n	8018a3a <lv_gradient_calculate+0x6e>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	791b      	ldrb	r3, [r3, #4]
 8018a2c:	1e5a      	subs	r2, r3, #1
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8018a34:	763b      	strb	r3, [r7, #24]
        return tmp;
 8018a36:	7e3b      	ldrb	r3, [r7, #24]
 8018a38:	e0aa      	b.n	8018b90 <lv_gradient_calculate+0x1c4>
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8018a3e:	2301      	movs	r3, #1
 8018a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a44:	e049      	b.n	8018ada <lv_gradient_calculate+0x10e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 8018a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a4a:	687a      	ldr	r2, [r7, #4]
 8018a4c:	005b      	lsls	r3, r3, #1
 8018a4e:	4413      	add	r3, r2
 8018a50:	785b      	ldrb	r3, [r3, #1]
 8018a52:	461a      	mov	r2, r3
 8018a54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a58:	fb02 f303 	mul.w	r3, r2, r3
 8018a5c:	121b      	asrs	r3, r3, #8
 8018a5e:	61fb      	str	r3, [r7, #28]
        if(frac <= cur) {
 8018a60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018a64:	69fa      	ldr	r2, [r7, #28]
 8018a66:	429a      	cmp	r2, r3
 8018a68:	db32      	blt.n	8018ad0 <lv_gradient_calculate+0x104>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 8018a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a6e:	1e5a      	subs	r2, r3, #1
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018a76:	f7ff fd0a 	bl	801848e <lv_color_to32>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	617b      	str	r3, [r7, #20]
            two.full = lv_color_to32(dsc->stops[i].color);
 8018a7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018a88:	f7ff fd01 	bl	801848e <lv_color_to32>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	613b      	str	r3, [r7, #16]
            min = (dsc->stops[i - 1].frac * range) >> 8;
 8018a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a94:	3b01      	subs	r3, #1
 8018a96:	687a      	ldr	r2, [r7, #4]
 8018a98:	005b      	lsls	r3, r3, #1
 8018a9a:	4413      	add	r3, r2
 8018a9c:	785b      	ldrb	r3, [r3, #1]
 8018a9e:	461a      	mov	r2, r3
 8018aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018aa4:	fb02 f303 	mul.w	r3, r2, r3
 8018aa8:	121b      	asrs	r3, r3, #8
 8018aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
            max = (dsc->stops[i].frac * range) >> 8;
 8018aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ab0:	687a      	ldr	r2, [r7, #4]
 8018ab2:	005b      	lsls	r3, r3, #1
 8018ab4:	4413      	add	r3, r2
 8018ab6:	785b      	ldrb	r3, [r3, #1]
 8018ab8:	461a      	mov	r2, r3
 8018aba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018abe:	fb02 f303 	mul.w	r3, r2, r3
 8018ac2:	121b      	asrs	r3, r3, #8
 8018ac4:	623b      	str	r3, [r7, #32]
            d = max - min;
 8018ac6:	6a3a      	ldr	r2, [r7, #32]
 8018ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aca:	1ad3      	subs	r3, r2, r3
 8018acc:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8018ace:	e00a      	b.n	8018ae6 <lv_gradient_calculate+0x11a>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8018ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ad4:	3301      	adds	r3, #1
 8018ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	791b      	ldrb	r3, [r3, #4]
 8018ade:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d3af      	bcc.n	8018a46 <lv_gradient_calculate+0x7a>
        }
    }

    LV_ASSERT(d != 0);
 8018ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d100      	bne.n	8018aee <lv_gradient_calculate+0x122>
 8018aec:	e7fe      	b.n	8018aec <lv_gradient_calculate+0x120>

    /*Then interpolate*/
    frac -= min;
 8018aee:	883a      	ldrh	r2, [r7, #0]
 8018af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	1ad3      	subs	r3, r2, r3
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (frac * 255) / d;
 8018afa:	f9b7 2000 	ldrsh.w	r2, [r7]
 8018afe:	4613      	mov	r3, r2
 8018b00:	021b      	lsls	r3, r3, #8
 8018b02:	1a9a      	subs	r2, r3, r2
 8018b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b06:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b0a:	76fb      	strb	r3, [r7, #27]
    lv_opa_t imix = 255 - mix;
 8018b0c:	7efb      	ldrb	r3, [r7, #27]
 8018b0e:	43db      	mvns	r3, r3
 8018b10:	76bb      	strb	r3, [r7, #26]

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8018b12:	7c3b      	ldrb	r3, [r7, #16]
 8018b14:	461a      	mov	r2, r3
 8018b16:	7efb      	ldrb	r3, [r7, #27]
 8018b18:	fb03 f202 	mul.w	r2, r3, r2
 8018b1c:	7d3b      	ldrb	r3, [r7, #20]
 8018b1e:	4619      	mov	r1, r3
 8018b20:	7ebb      	ldrb	r3, [r7, #26]
 8018b22:	fb01 f303 	mul.w	r3, r1, r3
 8018b26:	4413      	add	r3, r2
 8018b28:	461a      	mov	r2, r3
 8018b2a:	4613      	mov	r3, r2
 8018b2c:	021b      	lsls	r3, r3, #8
 8018b2e:	4413      	add	r3, r2
 8018b30:	01db      	lsls	r3, r3, #7
 8018b32:	4413      	add	r3, r2
 8018b34:	0f9b      	lsrs	r3, r3, #30
 8018b36:	b2d9      	uxtb	r1, r3
 8018b38:	7c7b      	ldrb	r3, [r7, #17]
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	7efb      	ldrb	r3, [r7, #27]
 8018b3e:	fb03 f202 	mul.w	r2, r3, r2
 8018b42:	7d7b      	ldrb	r3, [r7, #21]
 8018b44:	4618      	mov	r0, r3
 8018b46:	7ebb      	ldrb	r3, [r7, #26]
 8018b48:	fb00 f303 	mul.w	r3, r0, r3
 8018b4c:	4413      	add	r3, r2
 8018b4e:	461a      	mov	r2, r3
 8018b50:	4613      	mov	r3, r2
 8018b52:	021b      	lsls	r3, r3, #8
 8018b54:	4413      	add	r3, r2
 8018b56:	01db      	lsls	r3, r3, #7
 8018b58:	4413      	add	r3, r2
 8018b5a:	0f9b      	lsrs	r3, r3, #30
 8018b5c:	b2db      	uxtb	r3, r3
 8018b5e:	430b      	orrs	r3, r1
 8018b60:	b2d9      	uxtb	r1, r3
 8018b62:	7cbb      	ldrb	r3, [r7, #18]
 8018b64:	461a      	mov	r2, r3
 8018b66:	7efb      	ldrb	r3, [r7, #27]
 8018b68:	fb03 f202 	mul.w	r2, r3, r2
 8018b6c:	7dbb      	ldrb	r3, [r7, #22]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	7ebb      	ldrb	r3, [r7, #26]
 8018b72:	fb00 f303 	mul.w	r3, r0, r3
 8018b76:	4413      	add	r3, r2
 8018b78:	461a      	mov	r2, r3
 8018b7a:	4613      	mov	r3, r2
 8018b7c:	021b      	lsls	r3, r3, #8
 8018b7e:	4413      	add	r3, r2
 8018b80:	01db      	lsls	r3, r3, #7
 8018b82:	4413      	add	r3, r2
 8018b84:	0f9b      	lsrs	r3, r3, #30
 8018b86:	b2db      	uxtb	r3, r3
 8018b88:	430b      	orrs	r3, r1
 8018b8a:	b2db      	uxtb	r3, r3
 8018b8c:	733b      	strb	r3, [r7, #12]
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
 8018b8e:	7b3b      	ldrb	r3, [r7, #12]
}
 8018b90:	4618      	mov	r0, r3
 8018b92:	3730      	adds	r7, #48	; 0x30
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}

08018b98 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b082      	sub	sp, #8
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
    if(grad->not_cached) {
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	79db      	ldrb	r3, [r3, #7]
 8018ba4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d002      	beq.n	8018bb4 <lv_gradient_cleanup+0x1c>
        lv_mem_free(grad);
 8018bae:	6878      	ldr	r0, [r7, #4]
 8018bb0:	f009 f908 	bl	8021dc4 <lv_mem_free>
    }
}
 8018bb4:	bf00      	nop
 8018bb6:	3708      	adds	r7, #8
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	bd80      	pop	{r7, pc}

08018bbc <lv_color_premult>:
{
 8018bbc:	b480      	push	{r7}
 8018bbe:	b083      	sub	sp, #12
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	7138      	strb	r0, [r7, #4]
 8018bc4:	460b      	mov	r3, r1
 8018bc6:	603a      	str	r2, [r7, #0]
 8018bc8:	71fb      	strb	r3, [r7, #7]
    out[0] = LV_COLOR_GET_R(c);
 8018bca:	793b      	ldrb	r3, [r7, #4]
 8018bcc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018bd0:	b2db      	uxtb	r3, r3
 8018bd2:	b29a      	uxth	r2, r3
 8018bd4:	683b      	ldr	r3, [r7, #0]
 8018bd6:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 8018bd8:	793b      	ldrb	r3, [r7, #4]
 8018bda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018bde:	b2da      	uxtb	r2, r3
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	3302      	adds	r3, #2
 8018be4:	b292      	uxth	r2, r2
 8018be6:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 8018be8:	793b      	ldrb	r3, [r7, #4]
 8018bea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018bee:	b2da      	uxtb	r2, r3
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	3304      	adds	r3, #4
 8018bf4:	b292      	uxth	r2, r2
 8018bf6:	801a      	strh	r2, [r3, #0]
}
 8018bf8:	bf00      	nop
 8018bfa:	370c      	adds	r7, #12
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c02:	4770      	bx	lr

08018c04 <lv_color_mix_premult>:
{
 8018c04:	b480      	push	{r7}
 8018c06:	b085      	sub	sp, #20
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
 8018c0c:	7039      	strb	r1, [r7, #0]
 8018c0e:	4613      	mov	r3, r2
 8018c10:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_R(c1, premult_c1[0]);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	881b      	ldrh	r3, [r3, #0]
 8018c16:	f003 0301 	and.w	r3, r3, #1
 8018c1a:	b2da      	uxtb	r2, r3
 8018c1c:	7a3b      	ldrb	r3, [r7, #8]
 8018c1e:	f362 0300 	bfi	r3, r2, #0, #1
 8018c22:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	3302      	adds	r3, #2
 8018c28:	881b      	ldrh	r3, [r3, #0]
 8018c2a:	f003 0301 	and.w	r3, r3, #1
 8018c2e:	b2da      	uxtb	r2, r3
 8018c30:	7a3b      	ldrb	r3, [r7, #8]
 8018c32:	f362 0300 	bfi	r3, r2, #0, #1
 8018c36:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	3304      	adds	r3, #4
 8018c3c:	881b      	ldrh	r3, [r3, #0]
 8018c3e:	f003 0301 	and.w	r3, r3, #1
 8018c42:	b2da      	uxtb	r2, r3
 8018c44:	7a3b      	ldrb	r3, [r7, #8]
 8018c46:	f362 0300 	bfi	r3, r2, #0, #1
 8018c4a:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8018c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	da01      	bge.n	8018c58 <lv_color_mix_premult+0x54>
 8018c54:	783b      	ldrb	r3, [r7, #0]
 8018c56:	e000      	b.n	8018c5a <lv_color_mix_premult+0x56>
 8018c58:	7a3b      	ldrb	r3, [r7, #8]
 8018c5a:	733b      	strb	r3, [r7, #12]
    return ret;
 8018c5c:	7b3b      	ldrb	r3, [r7, #12]
}
 8018c5e:	4618      	mov	r0, r3
 8018c60:	3714      	adds	r7, #20
 8018c62:	46bd      	mov	sp, r7
 8018c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c68:	4770      	bx	lr

08018c6a <lv_color_make>:
{
 8018c6a:	b480      	push	{r7}
 8018c6c:	b083      	sub	sp, #12
 8018c6e:	af00      	add	r7, sp, #0
 8018c70:	4603      	mov	r3, r0
 8018c72:	71fb      	strb	r3, [r7, #7]
 8018c74:	460b      	mov	r3, r1
 8018c76:	71bb      	strb	r3, [r7, #6]
 8018c78:	4613      	mov	r3, r2
 8018c7a:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8018c7c:	797b      	ldrb	r3, [r7, #5]
 8018c7e:	09db      	lsrs	r3, r3, #7
 8018c80:	b2da      	uxtb	r2, r3
 8018c82:	79bb      	ldrb	r3, [r7, #6]
 8018c84:	09db      	lsrs	r3, r3, #7
 8018c86:	b2db      	uxtb	r3, r3
 8018c88:	4313      	orrs	r3, r2
 8018c8a:	b2da      	uxtb	r2, r3
 8018c8c:	79fb      	ldrb	r3, [r7, #7]
 8018c8e:	09db      	lsrs	r3, r3, #7
 8018c90:	b2db      	uxtb	r3, r3
 8018c92:	4313      	orrs	r3, r2
 8018c94:	b2db      	uxtb	r3, r3
}
 8018c96:	4618      	mov	r0, r3
 8018c98:	370c      	adds	r7, #12
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca0:	4770      	bx	lr

08018ca2 <lv_color_hex>:
{
 8018ca2:	b580      	push	{r7, lr}
 8018ca4:	b082      	sub	sp, #8
 8018ca6:	af00      	add	r7, sp, #0
 8018ca8:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	0c1b      	lsrs	r3, r3, #16
 8018cae:	b2d8      	uxtb	r0, r3
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	0a1b      	lsrs	r3, r3, #8
 8018cb4:	b2db      	uxtb	r3, r3
 8018cb6:	687a      	ldr	r2, [r7, #4]
 8018cb8:	b2d2      	uxtb	r2, r2
 8018cba:	4619      	mov	r1, r3
 8018cbc:	f7ff ffd5 	bl	8018c6a <lv_color_make>
 8018cc0:	4603      	mov	r3, r0
}
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	3708      	adds	r7, #8
 8018cc6:	46bd      	mov	sp, r7
 8018cc8:	bd80      	pop	{r7, pc}

08018cca <lv_area_copy>:
{
 8018cca:	b480      	push	{r7}
 8018ccc:	b083      	sub	sp, #12
 8018cce:	af00      	add	r7, sp, #0
 8018cd0:	6078      	str	r0, [r7, #4]
 8018cd2:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8018cd4:	683b      	ldr	r3, [r7, #0]
 8018cd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	80da      	strh	r2, [r3, #6]
}
 8018cfc:	bf00      	nop
 8018cfe:	370c      	adds	r7, #12
 8018d00:	46bd      	mov	sp, r7
 8018d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d06:	4770      	bx	lr

08018d08 <lv_area_get_width>:
{
 8018d08:	b480      	push	{r7}
 8018d0a:	b083      	sub	sp, #12
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018d16:	b29a      	uxth	r2, r3
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d1e:	b29b      	uxth	r3, r3
 8018d20:	1ad3      	subs	r3, r2, r3
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	3301      	adds	r3, #1
 8018d26:	b29b      	uxth	r3, r3
 8018d28:	b21b      	sxth	r3, r3
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	370c      	adds	r7, #12
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr

08018d36 <lv_area_get_height>:
{
 8018d36:	b480      	push	{r7}
 8018d38:	b083      	sub	sp, #12
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	1ad3      	subs	r3, r2, r3
 8018d50:	b29b      	uxth	r3, r3
 8018d52:	3301      	adds	r3, #1
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	b21b      	sxth	r3, r3
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	370c      	adds	r7, #12
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d62:	4770      	bx	lr

08018d64 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 8018d64:	b590      	push	{r4, r7, lr}
 8018d66:	b0ad      	sub	sp, #180	; 0xb4
 8018d68:	af06      	add	r7, sp, #24
 8018d6a:	60f8      	str	r0, [r7, #12]
 8018d6c:	60b9      	str	r1, [r7, #8]
 8018d6e:	607a      	str	r2, [r7, #4]
 8018d70:	603b      	str	r3, [r7, #0]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	689a      	ldr	r2, [r3, #8]
 8018d76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018d7a:	4611      	mov	r1, r2
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7ff ffa4 	bl	8018cca <lv_area_copy>

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 8018d82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7f8 feb8 	bl	8011afc <lv_draw_mask_is_any>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8018d92:	68bb      	ldr	r3, [r7, #8]
 8018d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d104      	bne.n	8018da6 <lv_draw_sw_img_decoded+0x42>
 8018d9c:	68bb      	ldr	r3, [r7, #8]
 8018d9e:	885b      	ldrh	r3, [r3, #2]
 8018da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018da4:	d001      	beq.n	8018daa <lv_draw_sw_img_decoded+0x46>
 8018da6:	2301      	movs	r3, #1
 8018da8:	e000      	b.n	8018dac <lv_draw_sw_img_decoded+0x48>
 8018daa:	2300      	movs	r3, #0
 8018dac:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8018db0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018db4:	f003 0301 	and.w	r3, r3, #1
 8018db8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 8018dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018dc0:	211c      	movs	r1, #28
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f009 fc02 	bl	80225cc <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	7a9b      	ldrb	r3, [r3, #10]
 8018dcc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 8018dd0:	68bb      	ldr	r3, [r7, #8]
 8018dd2:	7adb      	ldrb	r3, [r3, #11]
 8018dd4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018dd8:	b2db      	uxtb	r3, r3
 8018dda:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    blend_dsc.blend_area = &blend_area;
 8018dde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018de2:	633b      	str	r3, [r7, #48]	; 0x30

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8018de4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8018de8:	f083 0301 	eor.w	r3, r3, #1
 8018dec:	b2db      	uxtb	r3, r3
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d019      	beq.n	8018e26 <lv_draw_sw_img_decoded+0xc2>
 8018df2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018df6:	f083 0301 	eor.w	r3, r3, #1
 8018dfa:	b2db      	uxtb	r3, r3
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d012      	beq.n	8018e26 <lv_draw_sw_img_decoded+0xc2>
 8018e00:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8018e04:	2b04      	cmp	r3, #4
 8018e06:	d10e      	bne.n	8018e26 <lv_draw_sw_img_decoded+0xc2>
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	7a5b      	ldrb	r3, [r3, #9]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d10a      	bne.n	8018e26 <lv_draw_sw_img_decoded+0xc2>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	637b      	str	r3, [r7, #52]	; 0x34

        blend_dsc.blend_area = coords;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e1c:	4619      	mov	r1, r3
 8018e1e:	68f8      	ldr	r0, [r7, #12]
 8018e20:	f7fe f93c 	bl	801709c <lv_draw_sw_blend>
 8018e24:	e1c6      	b.n	80191b4 <lv_draw_sw_img_decoded+0x450>
    }
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8018e26:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8018e2a:	f083 0301 	eor.w	r3, r3, #1
 8018e2e:	b2db      	uxtb	r3, r3
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d02f      	beq.n	8018e94 <lv_draw_sw_img_decoded+0x130>
 8018e34:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018e38:	f083 0301 	eor.w	r3, r3, #1
 8018e3c:	b2db      	uxtb	r3, r3
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d028      	beq.n	8018e94 <lv_draw_sw_img_decoded+0x130>
 8018e42:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8018e46:	2b0e      	cmp	r3, #14
 8018e48:	d124      	bne.n	8018e94 <lv_draw_sw_img_decoded+0x130>
        lv_area_t clipped_coords;
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	689a      	ldr	r2, [r3, #8]
 8018e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018e52:	6879      	ldr	r1, [r7, #4]
 8018e54:	4618      	mov	r0, r3
 8018e56:	f007 fc65 	bl	8020724 <_lv_area_intersect>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	f083 0301 	eor.w	r3, r3, #1
 8018e60:	b2db      	uxtb	r3, r3
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	f040 81a6 	bne.w	80191b4 <lv_draw_sw_img_decoded+0x450>

        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8018e68:	683b      	ldr	r3, [r7, #0]
 8018e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = coords;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.src_buf = NULL;
 8018e70:	2300      	movs	r3, #0
 8018e72:	637b      	str	r3, [r7, #52]	; 0x34
        blend_dsc.color = draw_dsc->recolor;
 8018e74:	68bb      	ldr	r3, [r7, #8]
 8018e76:	7a1b      	ldrb	r3, [r3, #8]
 8018e78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8018e7c:	2302      	movs	r3, #2
 8018e7e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        blend_dsc.blend_area = coords;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018e86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e8a:	4619      	mov	r1, r3
 8018e8c:	68f8      	ldr	r0, [r7, #12]
 8018e8e:	f7fe f905 	bl	801709c <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8018e92:	e18f      	b.n	80191b4 <lv_draw_sw_img_decoded+0x450>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	689b      	ldr	r3, [r3, #8]
 8018e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e9c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        blend_area.x2 = draw_ctx->clip_area->x2;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	689b      	ldr	r3, [r3, #8]
 8018ea4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018ea8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        blend_area.y1 = draw_ctx->clip_area->y1;
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	689b      	ldr	r3, [r3, #8]
 8018eb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018eb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        blend_area.y2 = draw_ctx->clip_area->y2;
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	689b      	ldr	r3, [r3, #8]
 8018ebc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018ec0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_coord_t src_w = lv_area_get_width(coords);
 8018ec4:	6878      	ldr	r0, [r7, #4]
 8018ec6:	f7ff ff1f 	bl	8018d08 <lv_area_get_width>
 8018eca:	4603      	mov	r3, r0
 8018ecc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t src_h = lv_area_get_height(coords);
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f7ff ff30 	bl	8018d36 <lv_area_get_height>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
 8018edc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7ff ff28 	bl	8018d36 <lv_area_get_height>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        lv_coord_t blend_w = lv_area_get_width(&blend_area);
 8018eec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7ff ff09 	bl	8018d08 <lv_area_get_width>
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        uint32_t max_buf_size = MAX_BUF_SIZE;
 8018efc:	f7f5 fbf4 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 8018f00:	4603      	mov	r3, r0
 8018f02:	4618      	mov	r0, r3
 8018f04:	f006 ff1a 	bl	801fd3c <lv_disp_get_hor_res>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	67bb      	str	r3, [r7, #120]	; 0x78
        uint32_t blend_size = lv_area_get_size(&blend_area);
 8018f0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018f10:	4618      	mov	r0, r3
 8018f12:	f007 fb7a 	bl	802060a <lv_area_get_size>
 8018f16:	6778      	str	r0, [r7, #116]	; 0x74
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
 8018f18:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8018f1c:	673b      	str	r3, [r7, #112]	; 0x70
        if(blend_size <= max_buf_size) {
 8018f1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018f22:	429a      	cmp	r2, r3
 8018f24:	d804      	bhi.n	8018f30 <lv_draw_sw_img_decoded+0x1cc>
            buf_h = blend_h;
 8018f26:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8018f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8018f2e:	e006      	b.n	8018f3e <lv_draw_sw_img_decoded+0x1da>
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 8018f30:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8018f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 8018f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018f40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018f44:	fb02 f303 	mul.w	r3, r2, r3
 8018f48:	66fb      	str	r3, [r7, #108]	; 0x6c

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 8018f4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018f4c:	f008 ff94 	bl	8021e78 <lv_mem_buf_get>
 8018f50:	66b8      	str	r0, [r7, #104]	; 0x68
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 8018f52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018f54:	f008 ff90 	bl	8021e78 <lv_mem_buf_get>
 8018f58:	6678      	str	r0, [r7, #100]	; 0x64
        blend_dsc.mask_buf = mask_buf;
 8018f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = &blend_area;
 8018f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018f62:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8018f64:	2302      	movs	r3, #2
 8018f66:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        blend_dsc.src_buf = rgb_buf;
 8018f6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018f6c:	637b      	str	r3, [r7, #52]	; 0x34
        lv_coord_t y_last = blend_area.y2;
 8018f6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8018f72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 8018f76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018f7a:	b29a      	uxth	r2, r3
 8018f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018f80:	b29b      	uxth	r3, r3
 8018f82:	4413      	add	r3, r2
 8018f84:	b29b      	uxth	r3, r3
 8018f86:	3b01      	subs	r3, #1
 8018f88:	b29b      	uxth	r3, r3
 8018f8a:	b21b      	sxth	r3, r3
 8018f8c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8018f90:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8018f94:	2b04      	cmp	r3, #4
 8018f96:	d109      	bne.n	8018fac <lv_draw_sw_img_decoded+0x248>
 8018f98:	68bb      	ldr	r3, [r7, #8]
 8018f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d104      	bne.n	8018fac <lv_draw_sw_img_decoded+0x248>
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 8018fa2:	68bb      	ldr	r3, [r7, #8]
 8018fa4:	885b      	ldrh	r3, [r3, #2]
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8018fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018faa:	d001      	beq.n	8018fb0 <lv_draw_sw_img_decoded+0x24c>
 8018fac:	2302      	movs	r3, #2
 8018fae:	e000      	b.n	8018fb2 <lv_draw_sw_img_decoded+0x24e>
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 8018fb6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8018fba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        while(blend_area.y1 <= y_last) {
 8018fbe:	e0ec      	b.n	801919a <lv_draw_sw_img_decoded+0x436>
            /*Apply transformations if any or separate the channels*/
            lv_area_t transform_area;
            lv_area_copy(&transform_area, &blend_area);
 8018fc0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018fc4:	f107 0320 	add.w	r3, r7, #32
 8018fc8:	4611      	mov	r1, r2
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f7ff fe7d 	bl	8018cca <lv_area_copy>
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fd6:	b29b      	uxth	r3, r3
 8018fd8:	425b      	negs	r3, r3
 8018fda:	b29b      	uxth	r3, r3
 8018fdc:	b219      	sxth	r1, r3
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	425b      	negs	r3, r3
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	b21a      	sxth	r2, r3
 8018fec:	f107 0320 	add.w	r3, r7, #32
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f007 fb61 	bl	80206b8 <lv_area_move>
            if(transform) {
 8018ff6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d018      	beq.n	8019030 <lv_draw_sw_img_decoded+0x2cc>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 8018ffe:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8019002:	f107 0120 	add.w	r1, r7, #32
 8019006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019008:	9305      	str	r3, [sp, #20]
 801900a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801900c:	9304      	str	r3, [sp, #16]
 801900e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8019012:	9303      	str	r3, [sp, #12]
 8019014:	68bb      	ldr	r3, [r7, #8]
 8019016:	9302      	str	r3, [sp, #8]
 8019018:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801901c:	9301      	str	r3, [sp, #4]
 801901e:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8019022:	9300      	str	r3, [sp, #0]
 8019024:	4613      	mov	r3, r2
 8019026:	683a      	ldr	r2, [r7, #0]
 8019028:	68f8      	ldr	r0, [r7, #12]
 801902a:	f7fb f860 	bl	80140ee <lv_draw_transform>
 801902e:	e015      	b.n	801905c <lv_draw_sw_img_decoded+0x2f8>
                                  draw_dsc, cf, rgb_buf, mask_buf);
            }
            else {
                convert_cb(&transform_area, src_buf, src_w, src_h, src_w, draw_dsc, cf, rgb_buf, mask_buf);
 8019030:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8019034:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8019038:	f107 0020 	add.w	r0, r7, #32
 801903c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801903e:	9304      	str	r3, [sp, #16]
 8019040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019042:	9303      	str	r3, [sp, #12]
 8019044:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8019048:	9302      	str	r3, [sp, #8]
 801904a:	68bb      	ldr	r3, [r7, #8]
 801904c:	9301      	str	r3, [sp, #4]
 801904e:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8019052:	9300      	str	r3, [sp, #0]
 8019054:	460b      	mov	r3, r1
 8019056:	6839      	ldr	r1, [r7, #0]
 8019058:	f000 f8af 	bl	80191ba <convert_cb>
            }

            /*Apply recolor*/
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	7a5b      	ldrb	r3, [r3, #9]
 8019060:	2b02      	cmp	r3, #2
 8019062:	d932      	bls.n	80190ca <lv_draw_sw_img_decoded+0x366>
                uint16_t premult_v[3];
                lv_opa_t recolor_opa = draw_dsc->recolor_opa;
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	7a5b      	ldrb	r3, [r3, #9]
 8019068:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                lv_color_t recolor = draw_dsc->recolor;
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	7a1b      	ldrb	r3, [r3, #8]
 8019070:	753b      	strb	r3, [r7, #20]
                lv_color_premult(recolor, recolor_opa, premult_v);
 8019072:	f107 0218 	add.w	r2, r7, #24
 8019076:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801907a:	4619      	mov	r1, r3
 801907c:	7d38      	ldrb	r0, [r7, #20]
 801907e:	f7ff fd9d 	bl	8018bbc <lv_color_premult>
                recolor_opa = 255 - recolor_opa;
 8019082:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019086:	43db      	mvns	r3, r3
 8019088:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                uint32_t i;
                for(i = 0; i < buf_size; i++) {
 801908c:	2300      	movs	r3, #0
 801908e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019092:	e015      	b.n	80190c0 <lv_draw_sw_img_decoded+0x35c>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8019094:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019096:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801909a:	4413      	add	r3, r2
 801909c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801909e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80190a2:	188c      	adds	r4, r1, r2
 80190a4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80190a8:	f107 0018 	add.w	r0, r7, #24
 80190ac:	7819      	ldrb	r1, [r3, #0]
 80190ae:	f7ff fda9 	bl	8018c04 <lv_color_mix_premult>
 80190b2:	4603      	mov	r3, r0
 80190b4:	7023      	strb	r3, [r4, #0]
                for(i = 0; i < buf_size; i++) {
 80190b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80190ba:	3301      	adds	r3, #1
 80190bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80190c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80190c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80190c6:	429a      	cmp	r2, r3
 80190c8:	d3e4      	bcc.n	8019094 <lv_draw_sw_img_decoded+0x330>
                }
            }
#if LV_DRAW_COMPLEX
            /*Apply the masks if any*/
            if(mask_any) {
 80190ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d03e      	beq.n	8019150 <lv_draw_sw_img_decoded+0x3ec>
                lv_coord_t y;
                lv_opa_t * mask_buf_tmp = mask_buf;
 80190d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80190d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 80190d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80190dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80190e0:	e030      	b.n	8019144 <lv_draw_sw_img_decoded+0x3e0>
                    lv_draw_mask_res_t mask_res_line;
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 80190e2:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 80190e6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80190ea:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 80190ee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80190f2:	f7f8 fc05 	bl	8011900 <lv_draw_mask_apply>
 80190f6:	4603      	mov	r3, r0
 80190f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 80190fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019100:	2b00      	cmp	r3, #0
 8019102:	d10a      	bne.n	801911a <lv_draw_sw_img_decoded+0x3b6>
                        lv_memset_00(mask_buf_tmp, blend_w);
 8019104:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8019108:	4619      	mov	r1, r3
 801910a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801910e:	f009 fa5d 	bl	80225cc <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019112:	2302      	movs	r3, #2
 8019114:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8019118:	e006      	b.n	8019128 <lv_draw_sw_img_decoded+0x3c4>
                    }
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 801911a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801911e:	2b02      	cmp	r3, #2
 8019120:	d102      	bne.n	8019128 <lv_draw_sw_img_decoded+0x3c4>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019122:	2302      	movs	r3, #2
 8019124:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                    }
                    mask_buf_tmp += blend_w;
 8019128:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801912c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019130:	4413      	add	r3, r2
 8019132:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8019136:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801913a:	b29b      	uxth	r3, r3
 801913c:	3301      	adds	r3, #1
 801913e:	b29b      	uxth	r3, r3
 8019140:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8019144:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019148:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801914c:	429a      	cmp	r2, r3
 801914e:	ddc8      	ble.n	80190e2 <lv_draw_sw_img_decoded+0x37e>
                }
            }
#endif

            /*Blend*/
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019150:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019154:	4619      	mov	r1, r3
 8019156:	68f8      	ldr	r0, [r7, #12]
 8019158:	f7fd ffa0 	bl	801709c <lv_draw_sw_blend>

            /*Go the the next lines*/
            blend_area.y1 = blend_area.y2 + 1;
 801915c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019160:	b29b      	uxth	r3, r3
 8019162:	3301      	adds	r3, #1
 8019164:	b29b      	uxth	r3, r3
 8019166:	b21b      	sxth	r3, r3
 8019168:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 801916c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019170:	b29a      	uxth	r2, r3
 8019172:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019176:	b29b      	uxth	r3, r3
 8019178:	4413      	add	r3, r2
 801917a:	b29b      	uxth	r3, r3
 801917c:	3b01      	subs	r3, #1
 801917e:	b29b      	uxth	r3, r3
 8019180:	b21b      	sxth	r3, r3
 8019182:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 8019186:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801918a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801918e:	429a      	cmp	r2, r3
 8019190:	da03      	bge.n	801919a <lv_draw_sw_img_decoded+0x436>
 8019192:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8019196:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        while(blend_area.y1 <= y_last) {
 801919a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801919e:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 80191a2:	429a      	cmp	r2, r3
 80191a4:	f6bf af0c 	bge.w	8018fc0 <lv_draw_sw_img_decoded+0x25c>
        }

        lv_mem_buf_release(mask_buf);
 80191a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80191aa:	f008 ff11 	bl	8021fd0 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 80191ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80191b0:	f008 ff0e 	bl	8021fd0 <lv_mem_buf_release>
    }
}
 80191b4:	379c      	adds	r7, #156	; 0x9c
 80191b6:	46bd      	mov	sp, r7
 80191b8:	bd90      	pop	{r4, r7, pc}

080191ba <convert_cb>:
 **********************/

/* Separate the image channels to RGB and Alpha to match LV_COLOR_DEPTH settings*/
static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 80191ba:	b590      	push	{r4, r7, lr}
 80191bc:	b093      	sub	sp, #76	; 0x4c
 80191be:	af00      	add	r7, sp, #0
 80191c0:	60f8      	str	r0, [r7, #12]
 80191c2:	60b9      	str	r1, [r7, #8]
 80191c4:	4611      	mov	r1, r2
 80191c6:	461a      	mov	r2, r3
 80191c8:	460b      	mov	r3, r1
 80191ca:	80fb      	strh	r3, [r7, #6]
 80191cc:	4613      	mov	r3, r2
 80191ce:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(draw_dsc);
    LV_UNUSED(src_h);
    LV_UNUSED(src_w);

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
 80191d0:	68bb      	ldr	r3, [r7, #8]
 80191d2:	647b      	str	r3, [r7, #68]	; 0x44
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80191d4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80191d8:	2b04      	cmp	r3, #4
 80191da:	d003      	beq.n	80191e4 <convert_cb+0x2a>
 80191dc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80191e0:	2b06      	cmp	r3, #6
 80191e2:	d169      	bne.n	80192b8 <convert_cb+0xfe>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 80191e4:	68f8      	ldr	r0, [r7, #12]
 80191e6:	f007 fa10 	bl	802060a <lv_area_get_size>
 80191ea:	6278      	str	r0, [r7, #36]	; 0x24
        lv_memset_ff(abuf, px_cnt);
 80191ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191ee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80191f0:	f009 fa6d 	bl	80226ce <lv_memset_ff>

        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 80191f4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80191f8:	68fa      	ldr	r2, [r7, #12]
 80191fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80191fe:	fb02 f303 	mul.w	r3, r2, r3
 8019202:	461a      	mov	r2, r3
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	f9b3 3000 	ldrsh.w	r3, [r3]
 801920a:	4413      	add	r3, r2
 801920c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801920e:	4413      	add	r3, r2
 8019210:	647b      	str	r3, [r7, #68]	; 0x44
        uint32_t dest_w = lv_area_get_width(dest_area);
 8019212:	68f8      	ldr	r0, [r7, #12]
 8019214:	f7ff fd78 	bl	8018d08 <lv_area_get_width>
 8019218:	4603      	mov	r3, r0
 801921a:	623b      	str	r3, [r7, #32]
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 801921c:	6a3b      	ldr	r3, [r7, #32]
 801921e:	61fb      	str	r3, [r7, #28]

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8019220:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8019224:	837b      	strh	r3, [r7, #26]
        lv_color_t * cbuf_tmp = cbuf;
 8019226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019228:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	885b      	ldrh	r3, [r3, #2]
 801922e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019232:	e014      	b.n	801925e <convert_cb+0xa4>
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 8019234:	69fa      	ldr	r2, [r7, #28]
 8019236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019238:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801923a:	f008 ff21 	bl	8022080 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 801923e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019244:	4413      	add	r3, r2
 8019246:	647b      	str	r3, [r7, #68]	; 0x44
            cbuf_tmp += dest_w;
 8019248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801924a:	6a3b      	ldr	r3, [r7, #32]
 801924c:	4413      	add	r3, r2
 801924e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8019250:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8019254:	b29b      	uxth	r3, r3
 8019256:	3301      	adds	r3, #1
 8019258:	b29b      	uxth	r3, r3
 801925a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019264:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8019268:	429a      	cmp	r2, r3
 801926a:	dde3      	ble.n	8019234 <convert_cb+0x7a>
        }

        /*Make "holes" for with Chroma keying*/
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801926c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019270:	2b06      	cmp	r3, #6
 8019272:	f040 810f 	bne.w	8019494 <convert_cb+0x2da>
            uint32_t i;
            lv_color_t chk = LV_COLOR_CHROMA_KEY;
 8019276:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 801927a:	f7ff fd12 	bl	8018ca2 <lv_color_hex>
 801927e:	4603      	mov	r3, r0
 8019280:	743b      	strb	r3, [r7, #16]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
            uint8_t * cbuf_uint = (uint8_t *)cbuf;
 8019282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019284:	617b      	str	r3, [r7, #20]
            uint8_t chk_v = chk.full;
 8019286:	7c3b      	ldrb	r3, [r7, #16]
 8019288:	74fb      	strb	r3, [r7, #19]
            uint16_t chk_v = chk.full;
#elif LV_COLOR_DEPTH == 32
            uint32_t * cbuf_uint = (uint32_t *)cbuf;
            uint32_t chk_v = chk.full;
#endif
            for(i = 0; i < px_cnt; i++) {
 801928a:	2300      	movs	r3, #0
 801928c:	63bb      	str	r3, [r7, #56]	; 0x38
 801928e:	e00e      	b.n	80192ae <convert_cb+0xf4>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 8019290:	697a      	ldr	r2, [r7, #20]
 8019292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019294:	4413      	add	r3, r2
 8019296:	781b      	ldrb	r3, [r3, #0]
 8019298:	7cfa      	ldrb	r2, [r7, #19]
 801929a:	429a      	cmp	r2, r3
 801929c:	d104      	bne.n	80192a8 <convert_cb+0xee>
 801929e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80192a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192a2:	4413      	add	r3, r2
 80192a4:	2200      	movs	r2, #0
 80192a6:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < px_cnt; i++) {
 80192a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192aa:	3301      	adds	r3, #1
 80192ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80192ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80192b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d3ec      	bcc.n	8019290 <convert_cb+0xd6>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80192b6:	e0ed      	b.n	8019494 <convert_cb+0x2da>
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 80192b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80192bc:	2b05      	cmp	r3, #5
 80192be:	d16a      	bne.n	8019396 <convert_cb+0x1dc>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80192c0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80192c4:	68fa      	ldr	r2, [r7, #12]
 80192c6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80192ca:	fb02 f303 	mul.w	r3, r2, r3
 80192ce:	68fa      	ldr	r2, [r7, #12]
 80192d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80192d4:	4413      	add	r3, r2
 80192d6:	005b      	lsls	r3, r3, #1
 80192d8:	461a      	mov	r2, r3
 80192da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192dc:	4413      	add	r3, r2
 80192de:	647b      	str	r3, [r7, #68]	; 0x44

        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 80192e0:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 80192e4:	68f8      	ldr	r0, [r7, #12]
 80192e6:	f7ff fd0f 	bl	8018d08 <lv_area_get_width>
 80192ea:	4603      	mov	r3, r0
 80192ec:	b29b      	uxth	r3, r3
 80192ee:	1ae3      	subs	r3, r4, r3
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80192f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80192f6:	005b      	lsls	r3, r3, #1
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

        lv_coord_t dest_h = lv_area_get_height(dest_area);
 80192fc:	68f8      	ldr	r0, [r7, #12]
 80192fe:	f7ff fd1a 	bl	8018d36 <lv_area_get_height>
 8019302:	4603      	mov	r3, r0
 8019304:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 8019306:	68f8      	ldr	r0, [r7, #12]
 8019308:	f7ff fcfe 	bl	8018d08 <lv_area_get_width>
 801930c:	4603      	mov	r3, r0
 801930e:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(y = 0; y < dest_h; y++) {
 8019310:	2300      	movs	r3, #0
 8019312:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019316:	e037      	b.n	8019388 <convert_cb+0x1ce>
            for(x = 0; x < dest_w; x++) {
 8019318:	2300      	movs	r3, #0
 801931a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801931e:	e017      	b.n	8019350 <convert_cb+0x196>
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8019320:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019324:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019326:	4413      	add	r3, r2
 8019328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801932a:	7852      	ldrb	r2, [r2, #1]
 801932c:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                cbuf[x].full = *src_tmp8;
 801932e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019332:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019334:	4413      	add	r3, r2
 8019336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019338:	7812      	ldrb	r2, [r2, #0]
 801933a:	701a      	strb	r2, [r3, #0]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
#elif LV_COLOR_DEPTH == 32
                cbuf[x] = *((lv_color_t *) src_tmp8);
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 801933c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801933e:	3302      	adds	r3, #2
 8019340:	647b      	str	r3, [r7, #68]	; 0x44
            for(x = 0; x < dest_w; x++) {
 8019342:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019346:	b29b      	uxth	r3, r3
 8019348:	3301      	adds	r3, #1
 801934a:	b29b      	uxth	r3, r3
 801934c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8019350:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8019354:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019358:	429a      	cmp	r2, r3
 801935a:	dbe1      	blt.n	8019320 <convert_cb+0x166>

            }
            cbuf += dest_w;
 801935c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019360:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019362:	4413      	add	r3, r2
 8019364:	667b      	str	r3, [r7, #100]	; 0x64
            abuf += dest_w;
 8019366:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801936a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801936c:	4413      	add	r3, r2
 801936e:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_new_line_step_byte;
 8019370:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8019374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019376:	4413      	add	r3, r2
 8019378:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801937a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801937e:	b29b      	uxth	r3, r3
 8019380:	3301      	adds	r3, #1
 8019382:	b29b      	uxth	r3, r3
 8019384:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019388:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801938c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8019390:	429a      	cmp	r2, r3
 8019392:	dbc1      	blt.n	8019318 <convert_cb+0x15e>
            lv_memcpy(abuf, src_tmp8, dest_w);
            abuf += dest_w;
            src_tmp8 += src_stride;
        }
    }
}
 8019394:	e07f      	b.n	8019496 <convert_cb+0x2dc>
    else if(cf == LV_IMG_CF_RGB565A8) {
 8019396:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801939a:	2b14      	cmp	r3, #20
 801939c:	d17b      	bne.n	8019496 <convert_cb+0x2dc>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 801939e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80193a2:	68fa      	ldr	r2, [r7, #12]
 80193a4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80193a8:	fb02 f303 	mul.w	r3, r2, r3
 80193ac:	461a      	mov	r2, r3
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193b4:	4413      	add	r3, r2
 80193b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80193b8:	4413      	add	r3, r2
 80193ba:	647b      	str	r3, [r7, #68]	; 0x44
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80193bc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80193c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t dest_h = lv_area_get_height(dest_area);
 80193c2:	68f8      	ldr	r0, [r7, #12]
 80193c4:	f7ff fcb7 	bl	8018d36 <lv_area_get_height>
 80193c8:	4603      	mov	r3, r0
 80193ca:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 80193cc:	68f8      	ldr	r0, [r7, #12]
 80193ce:	f7ff fc9b 	bl	8018d08 <lv_area_get_width>
 80193d2:	4603      	mov	r3, r0
 80193d4:	867b      	strh	r3, [r7, #50]	; 0x32
        for(y = 0; y < dest_h; y++) {
 80193d6:	2300      	movs	r3, #0
 80193d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80193dc:	e017      	b.n	801940e <convert_cb+0x254>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 80193de:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80193e2:	461a      	mov	r2, r3
 80193e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80193e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80193e8:	f008 fe4a 	bl	8022080 <lv_memcpy>
            cbuf += dest_w;
 80193ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80193f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80193f2:	4413      	add	r3, r2
 80193f4:	667b      	str	r3, [r7, #100]	; 0x64
            src_tmp8 += src_stride_byte;
 80193f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80193fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80193fc:	4413      	add	r3, r2
 80193fe:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8019400:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8019404:	b29b      	uxth	r3, r3
 8019406:	3301      	adds	r3, #1
 8019408:	b29b      	uxth	r3, r3
 801940a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801940e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8019412:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8019416:	429a      	cmp	r2, r3
 8019418:	dbe1      	blt.n	80193de <convert_cb+0x224>
        src_tmp8 = (const uint8_t *)src_buf;
 801941a:	68bb      	ldr	r3, [r7, #8]
 801941c:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 801941e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019422:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8019426:	fb02 f303 	mul.w	r3, r2, r3
 801942a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801942c:	4413      	add	r3, r2
 801942e:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 8019430:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019434:	68fa      	ldr	r2, [r7, #12]
 8019436:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801943a:	fb02 f303 	mul.w	r3, r2, r3
 801943e:	68fa      	ldr	r2, [r7, #12]
 8019440:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019444:	4413      	add	r3, r2
 8019446:	461a      	mov	r2, r3
 8019448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801944a:	4413      	add	r3, r2
 801944c:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801944e:	2300      	movs	r3, #0
 8019450:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019454:	e017      	b.n	8019486 <convert_cb+0x2cc>
            lv_memcpy(abuf, src_tmp8, dest_w);
 8019456:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801945a:	461a      	mov	r2, r3
 801945c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801945e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8019460:	f008 fe0e 	bl	8022080 <lv_memcpy>
            abuf += dest_w;
 8019464:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8019468:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801946a:	4413      	add	r3, r2
 801946c:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_stride;
 801946e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019474:	4413      	add	r3, r2
 8019476:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8019478:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801947c:	b29b      	uxth	r3, r3
 801947e:	3301      	adds	r3, #1
 8019480:	b29b      	uxth	r3, r3
 8019482:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019486:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801948a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801948e:	429a      	cmp	r2, r3
 8019490:	dbe1      	blt.n	8019456 <convert_cb+0x29c>
}
 8019492:	e000      	b.n	8019496 <convert_cb+0x2dc>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8019494:	bf00      	nop
}
 8019496:	bf00      	nop
 8019498:	374c      	adds	r7, #76	; 0x4c
 801949a:	46bd      	mov	sp, r7
 801949c:	bd90      	pop	{r4, r7, pc}

0801949e <lv_area_get_width>:
{
 801949e:	b480      	push	{r7}
 80194a0:	b083      	sub	sp, #12
 80194a2:	af00      	add	r7, sp, #0
 80194a4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80194ac:	b29a      	uxth	r2, r3
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	1ad3      	subs	r3, r2, r3
 80194b8:	b29b      	uxth	r3, r3
 80194ba:	3301      	adds	r3, #1
 80194bc:	b29b      	uxth	r3, r3
 80194be:	b21b      	sxth	r3, r3
}
 80194c0:	4618      	mov	r0, r3
 80194c2:	370c      	adds	r7, #12
 80194c4:	46bd      	mov	sp, r7
 80194c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ca:	4770      	bx	lr

080194cc <lv_area_get_height>:
{
 80194cc:	b480      	push	{r7}
 80194ce:	b083      	sub	sp, #12
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80194da:	b29a      	uxth	r2, r3
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80194e2:	b29b      	uxth	r3, r3
 80194e4:	1ad3      	subs	r3, r2, r3
 80194e6:	b29b      	uxth	r3, r3
 80194e8:	3301      	adds	r3, #1
 80194ea:	b29b      	uxth	r3, r3
 80194ec:	b21b      	sxth	r3, r3
}
 80194ee:	4618      	mov	r0, r3
 80194f0:	370c      	adds	r7, #12
 80194f2:	46bd      	mov	sp, r7
 80194f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f8:	4770      	bx	lr

080194fa <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 80194fa:	b580      	push	{r7, lr}
 80194fc:	b08a      	sub	sp, #40	; 0x28
 80194fe:	af00      	add	r7, sp, #0
 8019500:	60f8      	str	r0, [r7, #12]
 8019502:	60b9      	str	r1, [r7, #8]
 8019504:	4613      	mov	r3, r2
 8019506:	71fb      	strb	r3, [r7, #7]
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8019508:	79fb      	ldrb	r3, [r7, #7]
 801950a:	f003 0301 	and.w	r3, r3, #1
 801950e:	2b00      	cmp	r3, #0
 8019510:	d001      	beq.n	8019516 <lv_draw_sw_layer_create+0x1c>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 8019512:	2300      	movs	r3, #0
 8019514:	e0df      	b.n	80196d6 <lv_draw_sw_layer_create+0x1dc>
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 8019516:	68bb      	ldr	r3, [r7, #8]
 8019518:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 801951a:	79fb      	ldrb	r3, [r7, #7]
 801951c:	f003 0301 	and.w	r3, r3, #1
 8019520:	2b00      	cmp	r3, #0
 8019522:	d001      	beq.n	8019528 <lv_draw_sw_layer_create+0x2e>
 8019524:	2302      	movs	r3, #2
 8019526:	e000      	b.n	801952a <lv_draw_sw_layer_create+0x30>
 8019528:	2301      	movs	r3, #1
 801952a:	623b      	str	r3, [r7, #32]
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 801952c:	79fb      	ldrb	r3, [r7, #7]
 801952e:	f003 0302 	and.w	r3, r3, #2
 8019532:	2b00      	cmp	r3, #0
 8019534:	d074      	beq.n	8019620 <lv_draw_sw_layer_create+0x126>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8019536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019538:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801953a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 801953e:	f361 031e 	bfi	r3, r1, #0, #31
 8019542:	6293      	str	r3, [r2, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8019544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019546:	4618      	mov	r0, r3
 8019548:	f007 f85f 	bl	802060a <lv_area_get_size>
 801954c:	4602      	mov	r2, r0
 801954e:	6a3b      	ldr	r3, [r7, #32]
 8019550:	fb02 f303 	mul.w	r3, r2, r3
 8019554:	61bb      	str	r3, [r7, #24]
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8019556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801955a:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801955e:	461a      	mov	r2, r3
 8019560:	69bb      	ldr	r3, [r7, #24]
 8019562:	4293      	cmp	r3, r2
 8019564:	d207      	bcs.n	8019576 <lv_draw_sw_layer_create+0x7c>
 8019566:	69bb      	ldr	r3, [r7, #24]
 8019568:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801956c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801956e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8019570:	f361 031e 	bfi	r3, r1, #0, #31
 8019574:	6293      	str	r3, [r2, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8019576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801957a:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801957e:	4618      	mov	r0, r3
 8019580:	f008 fbf0 	bl	8021d64 <lv_mem_alloc>
 8019584:	4602      	mov	r2, r0
 8019586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019588:	615a      	str	r2, [r3, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 801958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801958c:	695b      	ldr	r3, [r3, #20]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d116      	bne.n	80195c0 <lv_draw_sw_layer_create+0xc6>
            LV_LOG_WARN("Cannot allocate %"LV_PRIu32" bytes for layer buffer. Allocating %"LV_PRIu32" bytes instead. (Reduced performance)",
                        (uint32_t)layer_sw_ctx->buf_size_bytes, (uint32_t)LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE * px_size);
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 8019592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019594:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8019596:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 801959a:	f361 031e 	bfi	r3, r1, #0, #31
 801959e:	6293      	str	r3, [r2, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 80195a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195a4:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80195a8:	4618      	mov	r0, r3
 80195aa:	f008 fbdb 	bl	8021d64 <lv_mem_alloc>
 80195ae:	4602      	mov	r2, r0
 80195b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195b2:	615a      	str	r2, [r3, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 80195b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195b6:	695b      	ldr	r3, [r3, #20]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d101      	bne.n	80195c0 <lv_draw_sw_layer_create+0xc6>
                return NULL;
 80195bc:	2300      	movs	r3, #0
 80195be:	e08a      	b.n	80196d6 <lv_draw_sw_layer_create+0x1dc>
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 80195c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195c4:	3308      	adds	r3, #8
 80195c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80195ca:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 80195ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80195d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d6:	81da      	strh	r2, [r3, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
 80195d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195da:	3308      	adds	r3, #8
 80195dc:	4618      	mov	r0, r3
 80195de:	f7ff ff5e 	bl	801949e <lv_area_get_width>
 80195e2:	4603      	mov	r3, r0
 80195e4:	82fb      	strh	r3, [r7, #22]
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 80195e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195ea:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80195ee:	461a      	mov	r2, r3
 80195f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80195f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	da00      	bge.n	80195fe <lv_draw_sw_layer_create+0x104>
 80195fc:	3301      	adds	r3, #1
 80195fe:	105b      	asrs	r3, r3, #1
 8019600:	b21a      	sxth	r2, r3
 8019602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019604:	821a      	strh	r2, [r3, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8019606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801960a:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801960e:	461a      	mov	r2, r3
 8019610:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019614:	fb92 f3f3 	sdiv	r3, r2, r3
 8019618:	b21a      	sxth	r2, r3
 801961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801961c:	825a      	strh	r2, [r3, #18]
 801961e:	e059      	b.n	80196d4 <lv_draw_sw_layer_create+0x1da>
    }
    else {
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8019620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019624:	3308      	adds	r3, #8
 8019626:	e892 0003 	ldmia.w	r2, {r0, r1}
 801962a:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 801962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019630:	4618      	mov	r0, r3
 8019632:	f006 ffea 	bl	802060a <lv_area_get_size>
 8019636:	4603      	mov	r3, r0
 8019638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801963c:	6a3a      	ldr	r2, [r7, #32]
 801963e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8019642:	fb03 f202 	mul.w	r2, r3, r2
 8019646:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801964a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801964c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801964e:	f362 031e 	bfi	r3, r2, #0, #31
 8019652:	628b      	str	r3, [r1, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8019654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019658:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801965c:	4618      	mov	r0, r3
 801965e:	f008 fb81 	bl	8021d64 <lv_mem_alloc>
 8019662:	4602      	mov	r2, r0
 8019664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019666:	615a      	str	r2, [r3, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8019668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801966a:	695a      	ldr	r2, [r3, #20]
 801966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801966e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019670:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8019674:	4619      	mov	r1, r3
 8019676:	4610      	mov	r0, r2
 8019678:	f008 ffa8 	bl	80225cc <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 801967c:	79fb      	ldrb	r3, [r7, #7]
 801967e:	f003 0301 	and.w	r3, r3, #1
 8019682:	b2d9      	uxtb	r1, r3
 8019684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019686:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 801968a:	f361 13c7 	bfi	r3, r1, #7, #1
 801968e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8019692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019694:	695b      	ldr	r3, [r3, #20]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d101      	bne.n	801969e <lv_draw_sw_layer_create+0x1a4>
            return NULL;
 801969a:	2300      	movs	r3, #0
 801969c:	e01b      	b.n	80196d6 <lv_draw_sw_layer_create+0x1dc>
        }

        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 801969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196a0:	695a      	ldr	r2, [r3, #20]
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	601a      	str	r2, [r3, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 80196a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196a8:	f103 0208 	add.w	r2, r3, #8
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 80196b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b2:	f103 0208 	add.w	r2, r3, #8
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	609a      	str	r2, [r3, #8]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80196ba:	f7f5 f815 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 80196be:	61f8      	str	r0, [r7, #28]
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 80196c0:	69fb      	ldr	r3, [r7, #28]
 80196c2:	681a      	ldr	r2, [r3, #0]
 80196c4:	79fb      	ldrb	r3, [r7, #7]
 80196c6:	f003 0301 	and.w	r3, r3, #1
 80196ca:	b2d9      	uxtb	r1, r3
 80196cc:	7c13      	ldrb	r3, [r2, #16]
 80196ce:	f361 1386 	bfi	r3, r1, #6, #1
 80196d2:	7413      	strb	r3, [r2, #16]
    }

    return layer_ctx;
 80196d4:	68bb      	ldr	r3, [r7, #8]
}
 80196d6:	4618      	mov	r0, r3
 80196d8:	3728      	adds	r7, #40	; 0x28
 80196da:	46bd      	mov	sp, r7
 80196dc:	bd80      	pop	{r7, pc}

080196de <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 80196de:	b580      	push	{r7, lr}
 80196e0:	b086      	sub	sp, #24
 80196e2:	af00      	add	r7, sp, #0
 80196e4:	60f8      	str	r0, [r7, #12]
 80196e6:	60b9      	str	r1, [r7, #8]
 80196e8:	4613      	mov	r3, r2
 80196ea:	71fb      	strb	r3, [r7, #7]

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 80196ec:	68bb      	ldr	r3, [r7, #8]
 80196ee:	617b      	str	r3, [r7, #20]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80196f0:	f7f4 fffa 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 80196f4:	6138      	str	r0, [r7, #16]
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 80196f6:	79fb      	ldrb	r3, [r7, #7]
 80196f8:	f003 0301 	and.w	r3, r3, #1
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d017      	beq.n	8019730 <lv_draw_sw_layer_adjust+0x52>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	695a      	ldr	r2, [r3, #20]
 8019704:	697b      	ldr	r3, [r7, #20]
 8019706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019708:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801970c:	4619      	mov	r1, r3
 801970e:	4610      	mov	r0, r2
 8019710:	f008 ff5c 	bl	80225cc <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 8019714:	697a      	ldr	r2, [r7, #20]
 8019716:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 801971a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801971e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 8019722:	693b      	ldr	r3, [r7, #16]
 8019724:	681a      	ldr	r2, [r3, #0]
 8019726:	7c13      	ldrb	r3, [r2, #16]
 8019728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801972c:	7413      	strb	r3, [r2, #16]
 801972e:	e00c      	b.n	801974a <lv_draw_sw_layer_adjust+0x6c>
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 8019730:	697a      	ldr	r2, [r7, #20]
 8019732:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8019736:	f36f 13c7 	bfc	r3, #7, #1
 801973a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 801973e:	693b      	ldr	r3, [r7, #16]
 8019740:	681a      	ldr	r2, [r3, #0]
 8019742:	7c13      	ldrb	r3, [r2, #16]
 8019744:	f36f 1386 	bfc	r3, #6, #1
 8019748:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 801974a:	68bb      	ldr	r3, [r7, #8]
 801974c:	695a      	ldr	r2, [r3, #20]
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 8019752:	68bb      	ldr	r3, [r7, #8]
 8019754:	f103 0208 	add.w	r2, r3, #8
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 801975c:	68bb      	ldr	r3, [r7, #8]
 801975e:	f103 0208 	add.w	r2, r3, #8
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	609a      	str	r2, [r3, #8]
}
 8019766:	bf00      	nop
 8019768:	3718      	adds	r7, #24
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}

0801976e <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 801976e:	b580      	push	{r7, lr}
 8019770:	b08a      	sub	sp, #40	; 0x28
 8019772:	af00      	add	r7, sp, #0
 8019774:	60f8      	str	r0, [r7, #12]
 8019776:	60b9      	str	r1, [r7, #8]
 8019778:	607a      	str	r2, [r7, #4]
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	627b      	str	r3, [r7, #36]	; 0x24

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	61fb      	str	r3, [r7, #28]
    img.header.always_zero = 0;
 8019784:	7d3b      	ldrb	r3, [r7, #20]
 8019786:	f36f 1347 	bfc	r3, #5, #3
 801978a:	753b      	strb	r3, [r7, #20]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	685b      	ldr	r3, [r3, #4]
 8019790:	4618      	mov	r0, r3
 8019792:	f7ff fe84 	bl	801949e <lv_area_get_width>
 8019796:	4603      	mov	r3, r0
 8019798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801979c:	b29a      	uxth	r2, r3
 801979e:	697b      	ldr	r3, [r7, #20]
 80197a0:	f362 2394 	bfi	r3, r2, #10, #11
 80197a4:	617b      	str	r3, [r7, #20]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	685b      	ldr	r3, [r3, #4]
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7ff fe8e 	bl	80194cc <lv_area_get_height>
 80197b0:	4603      	mov	r3, r0
 80197b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80197b6:	b29a      	uxth	r2, r3
 80197b8:	8afb      	ldrh	r3, [r7, #22]
 80197ba:	f362 134f 	bfi	r3, r2, #5, #11
 80197be:	82fb      	strh	r3, [r7, #22]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 80197c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197c2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80197c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80197ca:	b2db      	uxtb	r3, r3
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d001      	beq.n	80197d4 <lv_draw_sw_layer_blend+0x66>
 80197d0:	2205      	movs	r2, #5
 80197d2:	e000      	b.n	80197d6 <lv_draw_sw_layer_blend+0x68>
 80197d4:	2204      	movs	r2, #4
 80197d6:	7d3b      	ldrb	r3, [r7, #20]
 80197d8:	f362 0304 	bfi	r3, r2, #0, #5
 80197dc:	753b      	strb	r3, [r7, #20]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 80197de:	68bb      	ldr	r3, [r7, #8]
 80197e0:	6a1a      	ldr	r2, [r3, #32]
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	69da      	ldr	r2, [r3, #28]
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 80197ee:	68bb      	ldr	r3, [r7, #8]
 80197f0:	699a      	ldr	r2, [r3, #24]
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80197f6:	f7f4 ff77 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 80197fa:	6238      	str	r0, [r7, #32]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 80197fc:	6a3b      	ldr	r3, [r7, #32]
 80197fe:	681a      	ldr	r2, [r3, #0]
 8019800:	68bb      	ldr	r3, [r7, #8]
 8019802:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8019806:	7c13      	ldrb	r3, [r2, #16]
 8019808:	f361 1386 	bfi	r3, r1, #6, #1
 801980c:	7413      	strb	r3, [r2, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 801980e:	68bb      	ldr	r3, [r7, #8]
 8019810:	f103 0208 	add.w	r2, r3, #8
 8019814:	f107 0314 	add.w	r3, r7, #20
 8019818:	6879      	ldr	r1, [r7, #4]
 801981a:	68f8      	ldr	r0, [r7, #12]
 801981c:	f7f6 fcd2 	bl	80101c4 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 8019820:	68f8      	ldr	r0, [r7, #12]
 8019822:	f7f6 fc25 	bl	8010070 <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 8019826:	f107 0314 	add.w	r3, r7, #20
 801982a:	4618      	mov	r0, r3
 801982c:	f7fa fd92 	bl	8014354 <lv_img_cache_invalidate_src>
}
 8019830:	bf00      	nop
 8019832:	3728      	adds	r7, #40	; 0x28
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}

08019838 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
 8019840:	6039      	str	r1, [r7, #0]
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 8019842:	683b      	ldr	r3, [r7, #0]
 8019844:	695b      	ldr	r3, [r3, #20]
 8019846:	4618      	mov	r0, r3
 8019848:	f008 fabc 	bl	8021dc4 <lv_mem_free>
}
 801984c:	bf00      	nop
 801984e:	3708      	adds	r7, #8
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}

08019854 <lv_area_copy>:
{
 8019854:	b480      	push	{r7}
 8019856:	b083      	sub	sp, #12
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
 801985c:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801985e:	683b      	ldr	r3, [r7, #0]
 8019860:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	80da      	strh	r2, [r3, #6]
}
 8019886:	bf00      	nop
 8019888:	370c      	adds	r7, #12
 801988a:	46bd      	mov	sp, r7
 801988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019890:	4770      	bx	lr

08019892 <lv_area_get_width>:
{
 8019892:	b480      	push	{r7}
 8019894:	b083      	sub	sp, #12
 8019896:	af00      	add	r7, sp, #0
 8019898:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80198a0:	b29a      	uxth	r2, r3
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	1ad3      	subs	r3, r2, r3
 80198ac:	b29b      	uxth	r3, r3
 80198ae:	3301      	adds	r3, #1
 80198b0:	b29b      	uxth	r3, r3
 80198b2:	b21b      	sxth	r3, r3
}
 80198b4:	4618      	mov	r0, r3
 80198b6:	370c      	adds	r7, #12
 80198b8:	46bd      	mov	sp, r7
 80198ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198be:	4770      	bx	lr

080198c0 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 80198c0:	b590      	push	{r4, r7, lr}
 80198c2:	b09d      	sub	sp, #116	; 0x74
 80198c4:	af02      	add	r7, sp, #8
 80198c6:	60f8      	str	r0, [r7, #12]
 80198c8:	60b9      	str	r1, [r7, #8]
 80198ca:	607a      	str	r2, [r7, #4]
 80198cc:	603b      	str	r3, [r7, #0]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 80198ce:	68bb      	ldr	r3, [r7, #8]
 80198d0:	6818      	ldr	r0, [r3, #0]
 80198d2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80198d6:	2300      	movs	r3, #0
 80198d8:	683a      	ldr	r2, [r7, #0]
 80198da:	f005 fcfc 	bl	801f2d6 <lv_font_get_glyph_dsc>
 80198de:	4603      	mov	r3, r0
 80198e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(g_ret == false) {
 80198e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198e8:	f083 0301 	eor.w	r3, r3, #1
 80198ec:	b2db      	uxtb	r3, r3
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d05c      	beq.n	80199ac <lv_draw_sw_letter+0xec>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	2b1f      	cmp	r3, #31
 80198f6:	f240 80cf 	bls.w	8019a98 <lv_draw_sw_letter+0x1d8>
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8019900:	4293      	cmp	r3, r2
 8019902:	f000 80c9 	beq.w	8019a98 <lv_draw_sw_letter+0x1d8>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	f242 020c 	movw	r2, #8204	; 0x200c
 801990c:	4293      	cmp	r3, r2
 801990e:	f000 80c3 	beq.w	8019a98 <lv_draw_sw_letter+0x1d8>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019918:	b29a      	uxth	r2, r3
 801991a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801991e:	b29b      	uxth	r3, r3
 8019920:	4413      	add	r3, r2
 8019922:	b29b      	uxth	r3, r3
 8019924:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801992e:	b29a      	uxth	r2, r3
 8019930:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019934:	b29b      	uxth	r3, r3
 8019936:	4413      	add	r3, r2
 8019938:	b29b      	uxth	r3, r3
 801993a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 801993e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8019942:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019946:	4413      	add	r3, r2
 8019948:	b29b      	uxth	r3, r3
 801994a:	b21c      	sxth	r4, r3
 801994c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8019950:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019954:	4413      	add	r3, r2
 8019956:	b29b      	uxth	r3, r3
 8019958:	b21b      	sxth	r3, r3
 801995a:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 801995e:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 8019962:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8019966:	9300      	str	r3, [sp, #0]
 8019968:	4623      	mov	r3, r4
 801996a:	f006 fe17 	bl	802059c <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 801996e:	f107 0310 	add.w	r3, r7, #16
 8019972:	4618      	mov	r0, r3
 8019974:	f7fa fb5a 	bl	801402c <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8019978:	2302      	movs	r3, #2
 801997a:	74fb      	strb	r3, [r7, #19]
            glyph_dsc.outline_opa = LV_OPA_MIN;
 801997c:	2302      	movs	r3, #2
 801997e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 8019982:	2302      	movs	r3, #2
 8019984:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8019988:	2302      	movs	r3, #2
 801998a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            glyph_dsc.border_color = dsc->color;
 801998e:	68bb      	ldr	r3, [r7, #8]
 8019990:	7b1b      	ldrb	r3, [r3, #12]
 8019992:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            glyph_dsc.border_width = 1;
 8019996:	2301      	movs	r3, #1
 8019998:	857b      	strh	r3, [r7, #42]	; 0x2a
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	68db      	ldr	r3, [r3, #12]
 801999e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80199a2:	f107 0110 	add.w	r1, r7, #16
 80199a6:	68f8      	ldr	r0, [r7, #12]
 80199a8:	4798      	blx	r3
#endif
        }
        return;
 80199aa:	e075      	b.n	8019a98 <lv_draw_sw_letter+0x1d8>
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 80199ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d073      	beq.n	8019a9c <lv_draw_sw_letter+0x1dc>
 80199b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d06f      	beq.n	8019a9c <lv_draw_sw_letter+0x1dc>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199c2:	b29a      	uxth	r2, r3
 80199c4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	4413      	add	r3, r2
 80199cc:	b29b      	uxth	r3, r3
 80199ce:	b21b      	sxth	r3, r3
 80199d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80199da:	b29a      	uxth	r2, r3
 80199dc:	68bb      	ldr	r3, [r7, #8]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80199e4:	b299      	uxth	r1, r3
 80199e6:	68bb      	ldr	r3, [r7, #8]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80199ee:	b29b      	uxth	r3, r3
 80199f0:	1acb      	subs	r3, r1, r3
 80199f2:	b29b      	uxth	r3, r3
 80199f4:	4413      	add	r3, r2
 80199f6:	b29a      	uxth	r2, r3
 80199f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80199fc:	1ad3      	subs	r3, r2, r3
 80199fe:	b29a      	uxth	r2, r3
 8019a00:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019a04:	b29b      	uxth	r3, r3
 8019a06:	1ad3      	subs	r3, r2, r3
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	b21b      	sxth	r3, r3
 8019a0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8019a10:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8019a14:	461a      	mov	r2, r3
 8019a16:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8019a1a:	4413      	add	r3, r2
 8019a1c:	68fa      	ldr	r2, [r7, #12]
 8019a1e:	6892      	ldr	r2, [r2, #8]
 8019a20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019a24:	4293      	cmp	r3, r2
 8019a26:	db3b      	blt.n	8019aa0 <lv_draw_sw_letter+0x1e0>
       gpos.x > draw_ctx->clip_area->x2 ||
 8019a28:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	689b      	ldr	r3, [r3, #8]
 8019a30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8019a34:	429a      	cmp	r2, r3
 8019a36:	dc33      	bgt.n	8019aa0 <lv_draw_sw_letter+0x1e0>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8019a38:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8019a3c:	461a      	mov	r2, r3
 8019a3e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8019a42:	4413      	add	r3, r2
 8019a44:	68fa      	ldr	r2, [r7, #12]
 8019a46:	6892      	ldr	r2, [r2, #8]
 8019a48:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 8019a4c:	4293      	cmp	r3, r2
 8019a4e:	db27      	blt.n	8019aa0 <lv_draw_sw_letter+0x1e0>
       gpos.y > draw_ctx->clip_area->y2)  {
 8019a50:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	689b      	ldr	r3, [r3, #8]
 8019a58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8019a5c:	429a      	cmp	r2, r3
 8019a5e:	dc1f      	bgt.n	8019aa0 <lv_draw_sw_letter+0x1e0>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 8019a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a62:	6839      	ldr	r1, [r7, #0]
 8019a64:	4618      	mov	r0, r3
 8019a66:	f005 fc23 	bl	801f2b0 <lv_font_get_glyph_bitmap>
 8019a6a:	6638      	str	r0, [r7, #96]	; 0x60
    if(map_p == NULL) {
 8019a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d018      	beq.n	8019aa4 <lv_draw_sw_letter+0x1e4>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 8019a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a74:	7b1b      	ldrb	r3, [r3, #12]
 8019a76:	f003 0303 	and.w	r3, r3, #3
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d112      	bne.n	8019aa6 <lv_draw_sw_letter+0x1e6>
#else
        LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
 8019a80:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8019a84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019a8a:	9300      	str	r3, [sp, #0]
 8019a8c:	460b      	mov	r3, r1
 8019a8e:	68b9      	ldr	r1, [r7, #8]
 8019a90:	68f8      	ldr	r0, [r7, #12]
 8019a92:	f000 f80b 	bl	8019aac <draw_letter_normal>
 8019a96:	e006      	b.n	8019aa6 <lv_draw_sw_letter+0x1e6>
        return;
 8019a98:	bf00      	nop
 8019a9a:	e004      	b.n	8019aa6 <lv_draw_sw_letter+0x1e6>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8019a9c:	bf00      	nop
 8019a9e:	e002      	b.n	8019aa6 <lv_draw_sw_letter+0x1e6>
        return;
 8019aa0:	bf00      	nop
 8019aa2:	e000      	b.n	8019aa6 <lv_draw_sw_letter+0x1e6>
        return;
 8019aa4:	bf00      	nop
    }
}
 8019aa6:	376c      	adds	r7, #108	; 0x6c
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd90      	pop	{r4, r7, pc}

08019aac <draw_letter_normal>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                                     const lv_point_t * pos, lv_font_glyph_dsc_t * g, const uint8_t * map_p)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b0aa      	sub	sp, #168	; 0xa8
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	60f8      	str	r0, [r7, #12]
 8019ab4:	60b9      	str	r1, [r7, #8]
 8019ab6:	607a      	str	r2, [r7, #4]
 8019ab8:	603b      	str	r3, [r7, #0]

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 8019aba:	683b      	ldr	r3, [r7, #0]
 8019abc:	7b9b      	ldrb	r3, [r3, #14]
 8019abe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019ac2:	b2db      	uxtb	r3, r3
 8019ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    lv_opa_t opa = dsc->opa;
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	7e1b      	ldrb	r3, [r3, #24]
 8019acc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 8019ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019ad4:	2b03      	cmp	r3, #3
 8019ad6:	d102      	bne.n	8019ade <draw_letter_normal+0x32>
 8019ad8:	2304      	movs	r3, #4
 8019ada:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 8019ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019ae2:	3b01      	subs	r3, #1
 8019ae4:	2b07      	cmp	r3, #7
 8019ae6:	f200 8287 	bhi.w	8019ff8 <draw_letter_normal+0x54c>
 8019aea:	a201      	add	r2, pc, #4	; (adr r2, 8019af0 <draw_letter_normal+0x44>)
 8019aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019af0:	08019b11 	.word	0x08019b11
 8019af4:	08019b25 	.word	0x08019b25
 8019af8:	08019ff9 	.word	0x08019ff9
 8019afc:	08019b39 	.word	0x08019b39
 8019b00:	08019ff9 	.word	0x08019ff9
 8019b04:	08019ff9 	.word	0x08019ff9
 8019b08:	08019ff9 	.word	0x08019ff9
 8019b0c:	08019b4d 	.word	0x08019b4d
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8019b10:	4b6a      	ldr	r3, [pc, #424]	; (8019cbc <draw_letter_normal+0x210>)
 8019b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0x80;
 8019b16:	2380      	movs	r3, #128	; 0x80
 8019b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 2;
 8019b1c:	2302      	movs	r3, #2
 8019b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019b22:	e01e      	b.n	8019b62 <draw_letter_normal+0xb6>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 8019b24:	4b66      	ldr	r3, [pc, #408]	; (8019cc0 <draw_letter_normal+0x214>)
 8019b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xC0;
 8019b2a:	23c0      	movs	r3, #192	; 0xc0
 8019b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 4;
 8019b30:	2304      	movs	r3, #4
 8019b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019b36:	e014      	b.n	8019b62 <draw_letter_normal+0xb6>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8019b38:	4b62      	ldr	r3, [pc, #392]	; (8019cc4 <draw_letter_normal+0x218>)
 8019b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xF0;
 8019b3e:	23f0      	movs	r3, #240	; 0xf0
 8019b40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 16;
 8019b44:	2310      	movs	r3, #16
 8019b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019b4a:	e00a      	b.n	8019b62 <draw_letter_normal+0xb6>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 8019b4c:	4b5e      	ldr	r3, [pc, #376]	; (8019cc8 <draw_letter_normal+0x21c>)
 8019b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xFF;
 8019b52:	23ff      	movs	r3, #255	; 0xff
 8019b54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 256;
 8019b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019b5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;       /*No opa table, pixel value will be used directly*/
 8019b60:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 8019b62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019b66:	2bfc      	cmp	r3, #252	; 0xfc
 8019b68:	d842      	bhi.n	8019bf0 <draw_letter_normal+0x144>
        if(prev_opa != opa || prev_bpp != bpp) {
 8019b6a:	4b58      	ldr	r3, [pc, #352]	; (8019ccc <draw_letter_normal+0x220>)
 8019b6c:	781b      	ldrb	r3, [r3, #0]
 8019b6e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8019b72:	429a      	cmp	r2, r3
 8019b74:	d105      	bne.n	8019b82 <draw_letter_normal+0xd6>
 8019b76:	4b56      	ldr	r3, [pc, #344]	; (8019cd0 <draw_letter_normal+0x224>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019b7e:	429a      	cmp	r2, r3
 8019b80:	d02b      	beq.n	8019bda <draw_letter_normal+0x12e>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 8019b82:	2300      	movs	r3, #0
 8019b84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019b88:	e021      	b.n	8019bce <draw_letter_normal+0x122>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 8019b8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b92:	4413      	add	r3, r2
 8019b94:	781b      	ldrb	r3, [r3, #0]
 8019b96:	2bff      	cmp	r3, #255	; 0xff
 8019b98:	d00d      	beq.n	8019bb6 <draw_letter_normal+0x10a>
 8019b9a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019ba2:	4413      	add	r3, r2
 8019ba4:	781b      	ldrb	r3, [r3, #0]
 8019ba6:	461a      	mov	r2, r3
 8019ba8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019bac:	fb02 f303 	mul.w	r3, r2, r3
 8019bb0:	121b      	asrs	r3, r3, #8
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	e001      	b.n	8019bba <draw_letter_normal+0x10e>
 8019bb6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019bba:	4946      	ldr	r1, [pc, #280]	; (8019cd4 <draw_letter_normal+0x228>)
 8019bbc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019bc0:	440a      	add	r2, r1
 8019bc2:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 8019bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019bc8:	3301      	adds	r3, #1
 8019bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019bce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d3d7      	bcc.n	8019b8a <draw_letter_normal+0xde>
            }
        }
        bpp_opa_table_p = opa_table;
 8019bda:	4b3e      	ldr	r3, [pc, #248]	; (8019cd4 <draw_letter_normal+0x228>)
 8019bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        prev_opa = opa;
 8019be0:	4a3a      	ldr	r2, [pc, #232]	; (8019ccc <draw_letter_normal+0x220>)
 8019be2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019be6:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 8019be8:	4a39      	ldr	r2, [pc, #228]	; (8019cd0 <draw_letter_normal+0x224>)
 8019bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019bee:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	88db      	ldrh	r3, [r3, #6]
 8019bf4:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t box_h = g->box_h;
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	891b      	ldrh	r3, [r3, #8]
 8019bfa:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8019bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019bfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019c02:	fb02 f303 	mul.w	r3, r2, r3
 8019c06:	673b      	str	r3, [r7, #112]	; 0x70

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	689b      	ldr	r3, [r3, #8]
 8019c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c16:	429a      	cmp	r2, r3
 8019c18:	da09      	bge.n	8019c2e <draw_letter_normal+0x182>
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	689b      	ldr	r3, [r3, #8]
 8019c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c22:	461a      	mov	r2, r3
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c2a:	1ad3      	subs	r3, r2, r3
 8019c2c:	e000      	b.n	8019c30 <draw_letter_normal+0x184>
 8019c2e:	2300      	movs	r3, #0
 8019c30:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c38:	461a      	mov	r2, r3
 8019c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019c3c:	4413      	add	r3, r2
 8019c3e:	68fa      	ldr	r2, [r7, #12]
 8019c40:	6892      	ldr	r2, [r2, #8]
 8019c42:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019c46:	4293      	cmp	r3, r2
 8019c48:	dd0a      	ble.n	8019c60 <draw_letter_normal+0x1b4>
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	689b      	ldr	r3, [r3, #8]
 8019c4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019c52:	461a      	mov	r2, r3
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c5a:	1ad3      	subs	r3, r2, r3
 8019c5c:	3301      	adds	r3, #1
 8019c5e:	e000      	b.n	8019c62 <draw_letter_normal+0x1b6>
 8019c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019c62:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	689b      	ldr	r3, [r3, #8]
 8019c6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c72:	429a      	cmp	r2, r3
 8019c74:	da09      	bge.n	8019c8a <draw_letter_normal+0x1de>
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	689b      	ldr	r3, [r3, #8]
 8019c7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c7e:	461a      	mov	r2, r3
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c86:	1ad3      	subs	r3, r2, r3
 8019c88:	e000      	b.n	8019c8c <draw_letter_normal+0x1e0>
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c94:	461a      	mov	r2, r3
 8019c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c98:	4413      	add	r3, r2
 8019c9a:	68fa      	ldr	r2, [r7, #12]
 8019c9c:	6892      	ldr	r2, [r2, #8]
 8019c9e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8019ca2:	4293      	cmp	r3, r2
 8019ca4:	dd18      	ble.n	8019cd8 <draw_letter_normal+0x22c>
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	689b      	ldr	r3, [r3, #8]
 8019caa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019cae:	461a      	mov	r2, r3
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019cb6:	1ad3      	subs	r3, r2, r3
 8019cb8:	3301      	adds	r3, #1
 8019cba:	e00e      	b.n	8019cda <draw_letter_normal+0x22e>
 8019cbc:	080267f8 	.word	0x080267f8
 8019cc0:	080267fc 	.word	0x080267fc
 8019cc4:	08026800 	.word	0x08026800
 8019cc8:	08026810 	.word	0x08026810
 8019ccc:	20000725 	.word	0x20000725
 8019cd0:	20000728 	.word	0x20000728
 8019cd4:	2000072c 	.word	0x2000072c
 8019cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019cda:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8019cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019cde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019ce0:	fb02 f303 	mul.w	r3, r2, r3
 8019ce4:	4619      	mov	r1, r3
 8019ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ce8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019cec:	fb02 f303 	mul.w	r3, r2, r3
 8019cf0:	440b      	add	r3, r1
 8019cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
    map_p += bit_ofs >> 3;
 8019cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019cf6:	08db      	lsrs	r3, r3, #3
 8019cf8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8019cfc:	4413      	add	r3, r2
 8019cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 8019d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d04:	f003 0307 	and.w	r3, r3, #7
 8019d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8019d0c:	f107 0320 	add.w	r3, r7, #32
 8019d10:	211c      	movs	r1, #28
 8019d12:	4618      	mov	r0, r3
 8019d14:	f008 fc5a 	bl	80225cc <lv_memset_00>
    blend_dsc.color = dsc->color;
 8019d18:	68bb      	ldr	r3, [r7, #8]
 8019d1a:	7b1b      	ldrb	r3, [r3, #12]
 8019d1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    blend_dsc.opa = dsc->opa;
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	7e1b      	ldrb	r3, [r3, #24]
 8019d24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    blend_dsc.blend_mode = dsc->blend_mode;
 8019d28:	68bb      	ldr	r3, [r7, #8]
 8019d2a:	7f1b      	ldrb	r3, [r3, #28]
 8019d2c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8019d36:	f7f4 fcd7 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	f005 fffd 	bl	801fd3c <lv_disp_get_hor_res>
 8019d42:	4603      	mov	r3, r0
 8019d44:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8019d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019d4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019d4c:	fb03 f202 	mul.w	r2, r3, r2
 8019d50:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019d54:	4293      	cmp	r3, r2
 8019d56:	bfa8      	it	ge
 8019d58:	4613      	movge	r3, r2
 8019d5a:	657b      	str	r3, [r7, #84]	; 0x54
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8019d5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019d5e:	f008 f88b 	bl	8021e78 <lv_mem_buf_get>
 8019d62:	6538      	str	r0, [r7, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 8019d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 8019d68:	2300      	movs	r3, #0
 8019d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d74:	b29a      	uxth	r2, r3
 8019d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019d78:	b29b      	uxth	r3, r3
 8019d7a:	4413      	add	r3, r2
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	b21b      	sxth	r3, r3
 8019d80:	833b      	strh	r3, [r7, #24]
    fill_area.x2 = col_end  + pos->x - 1;
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d88:	b29a      	uxth	r2, r3
 8019d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019d8c:	b29b      	uxth	r3, r3
 8019d8e:	4413      	add	r3, r2
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	3b01      	subs	r3, #1
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	b21b      	sxth	r3, r3
 8019d98:	83bb      	strh	r3, [r7, #28]
    fill_area.y1 = row_start + pos->y;
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019da0:	b29a      	uxth	r2, r3
 8019da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019da4:	b29b      	uxth	r3, r3
 8019da6:	4413      	add	r3, r2
 8019da8:	b29b      	uxth	r3, r3
 8019daa:	b21b      	sxth	r3, r3
 8019dac:	837b      	strh	r3, [r7, #26]
    fill_area.y2 = fill_area.y1;
 8019dae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019db2:	83fb      	strh	r3, [r7, #30]
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
 8019db4:	f107 0318 	add.w	r3, r7, #24
 8019db8:	4618      	mov	r0, r3
 8019dba:	f7ff fd6a 	bl	8019892 <lv_area_get_width>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
 8019dc4:	f107 0218 	add.w	r2, r7, #24
 8019dc8:	f107 0310 	add.w	r3, r7, #16
 8019dcc:	4611      	mov	r1, r2
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7ff fd40 	bl	8019854 <lv_area_copy>
    mask_area.y2 = mask_area.y1 + row_end;
 8019dd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019dd8:	b29a      	uxth	r2, r3
 8019dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019ddc:	b29b      	uxth	r3, r3
 8019dde:	4413      	add	r3, r2
 8019de0:	b29b      	uxth	r3, r3
 8019de2:	b21b      	sxth	r3, r3
 8019de4:	82fb      	strh	r3, [r7, #22]
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 8019de6:	f107 0310 	add.w	r3, r7, #16
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7f7 fe86 	bl	8011afc <lv_draw_mask_is_any>
 8019df0:	4603      	mov	r3, r0
 8019df2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
#endif
    blend_dsc.blend_area = &fill_area;
 8019df6:	f107 0318 	add.w	r3, r7, #24
 8019dfa:	623b      	str	r3, [r7, #32]
    blend_dsc.mask_area = &fill_area;
 8019dfc:	f107 0318 	add.w	r3, r7, #24
 8019e00:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t col_bit_max = 8 - bpp;
 8019e02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e06:	f1c3 0308 	rsb	r3, r3, #8
 8019e0a:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8019e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e10:	441a      	add	r2, r3
 8019e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019e14:	1ad3      	subs	r3, r2, r3
 8019e16:	461a      	mov	r2, r3
 8019e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e1c:	fb02 f303 	mul.w	r3, r2, r3
 8019e20:	647b      	str	r3, [r7, #68]	; 0x44

    for(row = row_start ; row < row_end; row++) {
 8019e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019e28:	e0c3      	b.n	8019fb2 <draw_letter_normal+0x506>
#if LV_DRAW_COMPLEX
        int32_t mask_p_start = mask_p;
 8019e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019e2e:	643b      	str	r3, [r7, #64]	; 0x40
#endif
        bitmask = bitmask_init >> col_bit;
 8019e30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8019e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019e38:	fa22 f303 	lsr.w	r3, r2, r3
 8019e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        for(col = col_start; col < col_end; col++) {
 8019e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019e46:	e04f      	b.n	8019ee8 <draw_letter_normal+0x43c>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 8019e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019e4c:	781b      	ldrb	r3, [r3, #0]
 8019e4e:	461a      	mov	r2, r3
 8019e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019e54:	401a      	ands	r2, r3
 8019e56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019e5c:	1acb      	subs	r3, r1, r3
 8019e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8019e62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(letter_px) {
 8019e66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d00b      	beq.n	8019e86 <draw_letter_normal+0x3da>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8019e6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019e72:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019e76:	441a      	add	r2, r3
 8019e78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019e7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019e7e:	440b      	add	r3, r1
 8019e80:	7812      	ldrb	r2, [r2, #0]
 8019e82:	701a      	strb	r2, [r3, #0]
 8019e84:	e005      	b.n	8019e92 <draw_letter_normal+0x3e6>
            }
            else {
                mask_buf[mask_p] = 0;
 8019e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019e8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019e8c:	4413      	add	r3, r2
 8019e8e:	2200      	movs	r2, #0
 8019e90:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 8019e92:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	d20f      	bcs.n	8019ebc <draw_letter_normal+0x410>
                col_bit += bpp;
 8019e9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019ea4:	4413      	add	r3, r2
 8019ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask >> bpp;
 8019eaa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8019eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8019eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019eba:	e00b      	b.n	8019ed4 <draw_letter_normal+0x428>
            }
            else {
                col_bit = 0;
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask_init;
 8019ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                map_p++;
 8019eca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019ece:	3301      	adds	r3, #1
 8019ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            }

            /*Next mask byte*/
            mask_p++;
 8019ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019ed8:	3301      	adds	r3, #1
 8019eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        for(col = col_start; col < col_end; col++) {
 8019ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019ee2:	3301      	adds	r3, #1
 8019ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019ee8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019eee:	429a      	cmp	r2, r3
 8019ef0:	dbaa      	blt.n	8019e48 <draw_letter_normal+0x39c>
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 8019ef2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d01a      	beq.n	8019f30 <draw_letter_normal+0x484>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 8019efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019efc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019efe:	18d0      	adds	r0, r2, r3
 8019f00:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8019f04:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8019f08:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019f0c:	f7f7 fcf8 	bl	8011900 <lv_draw_mask_apply>
 8019f10:	4603      	mov	r3, r0
 8019f12:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                                    fill_w);
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8019f16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d108      	bne.n	8019f30 <draw_letter_normal+0x484>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 8019f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f22:	4413      	add	r3, r2
 8019f24:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8019f28:	4611      	mov	r1, r2
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	f008 fb4e 	bl	80225cc <lv_memset_00>
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8019f30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f34:	1ad3      	subs	r3, r2, r3
 8019f36:	461a      	mov	r2, r3
 8019f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019f3c:	4413      	add	r3, r2
 8019f3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f40:	429a      	cmp	r2, r3
 8019f42:	d907      	bls.n	8019f54 <draw_letter_normal+0x4a8>
            fill_area.y2 ++;
 8019f44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f48:	b29b      	uxth	r3, r3
 8019f4a:	3301      	adds	r3, #1
 8019f4c:	b29b      	uxth	r3, r3
 8019f4e:	b21b      	sxth	r3, r3
 8019f50:	83fb      	strh	r3, [r7, #30]
 8019f52:	e015      	b.n	8019f80 <draw_letter_normal+0x4d4>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019f54:	2302      	movs	r3, #2
 8019f56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019f5a:	f107 0320 	add.w	r3, r7, #32
 8019f5e:	4619      	mov	r1, r3
 8019f60:	68f8      	ldr	r0, [r7, #12]
 8019f62:	f7fd f89b 	bl	801709c <lv_draw_sw_blend>

            fill_area.y1 = fill_area.y2 + 1;
 8019f66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	3301      	adds	r3, #1
 8019f6e:	b29b      	uxth	r3, r3
 8019f70:	b21b      	sxth	r3, r3
 8019f72:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = fill_area.y1;
 8019f74:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019f78:	83fb      	strh	r3, [r7, #30]
            mask_p = 0;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }

        col_bit += col_bit_row_ofs;
 8019f80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f86:	4413      	add	r3, r2
 8019f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        map_p += (col_bit >> 3);
 8019f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019f90:	08db      	lsrs	r3, r3, #3
 8019f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8019f96:	4413      	add	r3, r2
 8019f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 8019f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019fa0:	f003 0307 	and.w	r3, r3, #7
 8019fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
 8019fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019fac:	3301      	adds	r3, #1
 8019fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019fb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	f6ff af36 	blt.w	8019e2a <draw_letter_normal+0x37e>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8019fbe:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8019fc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019fc6:	429a      	cmp	r2, r3
 8019fc8:	d012      	beq.n	8019ff0 <draw_letter_normal+0x544>
        fill_area.y2--;
 8019fca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	3b01      	subs	r3, #1
 8019fd2:	b29b      	uxth	r3, r3
 8019fd4:	b21b      	sxth	r3, r3
 8019fd6:	83fb      	strh	r3, [r7, #30]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019fd8:	2302      	movs	r3, #2
 8019fda:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019fde:	f107 0320 	add.w	r3, r7, #32
 8019fe2:	4619      	mov	r1, r3
 8019fe4:	68f8      	ldr	r0, [r7, #12]
 8019fe6:	f7fd f859 	bl	801709c <lv_draw_sw_blend>
        mask_p = 0;
 8019fea:	2300      	movs	r3, #0
 8019fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    lv_mem_buf_release(mask_buf);
 8019ff0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8019ff2:	f007 ffed 	bl	8021fd0 <lv_mem_buf_release>
 8019ff6:	e000      	b.n	8019ffa <draw_letter_normal+0x54e>
            return; /*Invalid bpp. Can't render the letter*/
 8019ff8:	bf00      	nop
}
 8019ffa:	37a8      	adds	r7, #168	; 0xa8
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}

0801a000 <lv_area_get_width>:
{
 801a000:	b480      	push	{r7}
 801a002:	b083      	sub	sp, #12
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a00e:	b29a      	uxth	r2, r3
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a016:	b29b      	uxth	r3, r3
 801a018:	1ad3      	subs	r3, r2, r3
 801a01a:	b29b      	uxth	r3, r3
 801a01c:	3301      	adds	r3, #1
 801a01e:	b29b      	uxth	r3, r3
 801a020:	b21b      	sxth	r3, r3
}
 801a022:	4618      	mov	r0, r3
 801a024:	370c      	adds	r7, #12
 801a026:	46bd      	mov	sp, r7
 801a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a02c:	4770      	bx	lr

0801a02e <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 801a02e:	b580      	push	{r7, lr}
 801a030:	b098      	sub	sp, #96	; 0x60
 801a032:	af00      	add	r7, sp, #0
 801a034:	60f8      	str	r0, [r7, #12]
 801a036:	60b9      	str	r1, [r7, #8]
 801a038:	607a      	str	r2, [r7, #4]
 801a03a:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 801a03c:	68bb      	ldr	r3, [r7, #8]
 801a03e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a042:	2b00      	cmp	r3, #0
 801a044:	f000 8172 	beq.w	801a32c <lv_draw_sw_line+0x2fe>
    if(dsc->opa <= LV_OPA_MIN) return;
 801a048:	68bb      	ldr	r3, [r7, #8]
 801a04a:	7a1b      	ldrb	r3, [r3, #8]
 801a04c:	2b02      	cmp	r3, #2
 801a04e:	f240 816f 	bls.w	801a330 <lv_draw_sw_line+0x302>

    if(point1->x == point2->x && point1->y == point2->y) return;
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a05e:	429a      	cmp	r2, r3
 801a060:	d108      	bne.n	801a074 <lv_draw_sw_line+0x46>
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a06e:	429a      	cmp	r2, r3
 801a070:	f000 8160 	beq.w	801a334 <lv_draw_sw_line+0x306>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a080:	4293      	cmp	r3, r2
 801a082:	bfa8      	it	ge
 801a084:	4613      	movge	r3, r2
 801a086:	b21b      	sxth	r3, r3
 801a088:	b29a      	uxth	r2, r3
 801a08a:	68bb      	ldr	r3, [r7, #8]
 801a08c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a090:	2b00      	cmp	r3, #0
 801a092:	da00      	bge.n	801a096 <lv_draw_sw_line+0x68>
 801a094:	3301      	adds	r3, #1
 801a096:	105b      	asrs	r3, r3, #1
 801a098:	b21b      	sxth	r3, r3
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	1ad3      	subs	r3, r2, r3
 801a09e:	b29b      	uxth	r3, r3
 801a0a0:	b21b      	sxth	r3, r3
 801a0a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 801a0a6:	683b      	ldr	r3, [r7, #0]
 801a0a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0b2:	4293      	cmp	r3, r2
 801a0b4:	bfb8      	it	lt
 801a0b6:	4613      	movlt	r3, r2
 801a0b8:	b21b      	sxth	r3, r3
 801a0ba:	b29a      	uxth	r2, r3
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	da00      	bge.n	801a0c8 <lv_draw_sw_line+0x9a>
 801a0c6:	3301      	adds	r3, #1
 801a0c8:	105b      	asrs	r3, r3, #1
 801a0ca:	b21b      	sxth	r3, r3
 801a0cc:	b29b      	uxth	r3, r3
 801a0ce:	4413      	add	r3, r2
 801a0d0:	b29b      	uxth	r3, r3
 801a0d2:	b21b      	sxth	r3, r3
 801a0d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0e4:	4293      	cmp	r3, r2
 801a0e6:	bfa8      	it	ge
 801a0e8:	4613      	movge	r3, r2
 801a0ea:	b21b      	sxth	r3, r3
 801a0ec:	b29a      	uxth	r2, r3
 801a0ee:	68bb      	ldr	r3, [r7, #8]
 801a0f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	da00      	bge.n	801a0fa <lv_draw_sw_line+0xcc>
 801a0f8:	3301      	adds	r3, #1
 801a0fa:	105b      	asrs	r3, r3, #1
 801a0fc:	b21b      	sxth	r3, r3
 801a0fe:	b29b      	uxth	r3, r3
 801a100:	1ad3      	subs	r3, r2, r3
 801a102:	b29b      	uxth	r3, r3
 801a104:	b21b      	sxth	r3, r3
 801a106:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 801a10a:	683b      	ldr	r3, [r7, #0]
 801a10c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a116:	4293      	cmp	r3, r2
 801a118:	bfb8      	it	lt
 801a11a:	4613      	movlt	r3, r2
 801a11c:	b21b      	sxth	r3, r3
 801a11e:	b29a      	uxth	r2, r3
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a126:	2b00      	cmp	r3, #0
 801a128:	da00      	bge.n	801a12c <lv_draw_sw_line+0xfe>
 801a12a:	3301      	adds	r3, #1
 801a12c:	105b      	asrs	r3, r3, #1
 801a12e:	b21b      	sxth	r3, r3
 801a130:	b29b      	uxth	r3, r3
 801a132:	4413      	add	r3, r2
 801a134:	b29b      	uxth	r3, r3
 801a136:	b21b      	sxth	r3, r3
 801a138:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	689a      	ldr	r2, [r3, #8]
 801a140:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801a144:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a148:	4618      	mov	r0, r3
 801a14a:	f006 faeb 	bl	8020724 <_lv_area_intersect>
 801a14e:	4603      	mov	r3, r0
 801a150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(!is_common) return;
 801a154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a158:	f083 0301 	eor.w	r3, r3, #1
 801a15c:	b2db      	uxtb	r3, r3
 801a15e:	2b00      	cmp	r3, #0
 801a160:	f040 80ea 	bne.w	801a338 <lv_draw_sw_line+0x30a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	689b      	ldr	r3, [r3, #8]
 801a168:	65bb      	str	r3, [r7, #88]	; 0x58
    draw_ctx->clip_area = &clip_line;
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a170:	609a      	str	r2, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a178:	683b      	ldr	r3, [r7, #0]
 801a17a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a17e:	429a      	cmp	r2, r3
 801a180:	d106      	bne.n	801a190 <lv_draw_sw_line+0x162>
 801a182:	683b      	ldr	r3, [r7, #0]
 801a184:	687a      	ldr	r2, [r7, #4]
 801a186:	68b9      	ldr	r1, [r7, #8]
 801a188:	68f8      	ldr	r0, [r7, #12]
 801a18a:	f000 f8d9 	bl	801a340 <draw_line_hor>
 801a18e:	e014      	b.n	801a1ba <lv_draw_sw_line+0x18c>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a196:	683b      	ldr	r3, [r7, #0]
 801a198:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a19c:	429a      	cmp	r2, r3
 801a19e:	d106      	bne.n	801a1ae <lv_draw_sw_line+0x180>
 801a1a0:	683b      	ldr	r3, [r7, #0]
 801a1a2:	687a      	ldr	r2, [r7, #4]
 801a1a4:	68b9      	ldr	r1, [r7, #8]
 801a1a6:	68f8      	ldr	r0, [r7, #12]
 801a1a8:	f000 fa2b 	bl	801a602 <draw_line_ver>
 801a1ac:	e005      	b.n	801a1ba <lv_draw_sw_line+0x18c>
    else draw_line_skew(draw_ctx, dsc, point1, point2);
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	687a      	ldr	r2, [r7, #4]
 801a1b2:	68b9      	ldr	r1, [r7, #8]
 801a1b4:	68f8      	ldr	r0, [r7, #12]
 801a1b6:	f000 fb55 	bl	801a864 <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 801a1ba:	68bb      	ldr	r3, [r7, #8]
 801a1bc:	7a5b      	ldrb	r3, [r3, #9]
 801a1be:	f003 0308 	and.w	r3, r3, #8
 801a1c2:	b2db      	uxtb	r3, r3
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d107      	bne.n	801a1d8 <lv_draw_sw_line+0x1aa>
 801a1c8:	68bb      	ldr	r3, [r7, #8]
 801a1ca:	7a5b      	ldrb	r3, [r3, #9]
 801a1cc:	f003 0304 	and.w	r3, r3, #4
 801a1d0:	b2db      	uxtb	r3, r3
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	f000 80a6 	beq.w	801a324 <lv_draw_sw_line+0x2f6>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 801a1d8:	f107 0310 	add.w	r3, r7, #16
 801a1dc:	4618      	mov	r0, r3
 801a1de:	f7f9 ff25 	bl	801402c <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	781b      	ldrb	r3, [r3, #0]
 801a1e6:	753b      	strb	r3, [r7, #20]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801a1e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a1ec:	823b      	strh	r3, [r7, #16]
        cir_dsc.bg_opa = dsc->opa;
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	7a1b      	ldrb	r3, [r3, #8]
 801a1f2:	74fb      	strb	r3, [r7, #19]

        int32_t r = (dsc->width >> 1);
 801a1f4:	68bb      	ldr	r3, [r7, #8]
 801a1f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a1fa:	105b      	asrs	r3, r3, #1
 801a1fc:	b21b      	sxth	r3, r3
 801a1fe:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a206:	b29b      	uxth	r3, r3
 801a208:	f003 0301 	and.w	r3, r3, #1
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	bf0c      	ite	eq
 801a210:	2301      	moveq	r3, #1
 801a212:	2300      	movne	r3, #0
 801a214:	b2db      	uxtb	r3, r3
 801a216:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t cir_area;

        if(dsc->round_start) {
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	7a5b      	ldrb	r3, [r3, #9]
 801a21c:	f003 0304 	and.w	r3, r3, #4
 801a220:	b2db      	uxtb	r3, r3
 801a222:	2b00      	cmp	r3, #0
 801a224:	d03b      	beq.n	801a29e <lv_draw_sw_line+0x270>
            cir_area.x1 = point1->x - r;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a22c:	b29a      	uxth	r2, r3
 801a22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a230:	b29b      	uxth	r3, r3
 801a232:	1ad3      	subs	r3, r2, r3
 801a234:	b29b      	uxth	r3, r3
 801a236:	b21b      	sxth	r3, r3
 801a238:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point1->y - r;
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a242:	b29a      	uxth	r2, r3
 801a244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a246:	b29b      	uxth	r3, r3
 801a248:	1ad3      	subs	r3, r2, r3
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	b21b      	sxth	r3, r3
 801a24e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point1->x + r - r_corr;
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a258:	b29a      	uxth	r2, r3
 801a25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a25c:	b29b      	uxth	r3, r3
 801a25e:	4413      	add	r3, r2
 801a260:	b29a      	uxth	r2, r3
 801a262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a264:	b29b      	uxth	r3, r3
 801a266:	1ad3      	subs	r3, r2, r3
 801a268:	b29b      	uxth	r3, r3
 801a26a:	b21b      	sxth	r3, r3
 801a26c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point1->y + r - r_corr ;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a276:	b29a      	uxth	r2, r3
 801a278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a27a:	b29b      	uxth	r3, r3
 801a27c:	4413      	add	r3, r2
 801a27e:	b29a      	uxth	r2, r3
 801a280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a282:	b29b      	uxth	r3, r3
 801a284:	1ad3      	subs	r3, r2, r3
 801a286:	b29b      	uxth	r3, r3
 801a288:	b21b      	sxth	r3, r3
 801a28a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 801a28e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a292:	f107 0310 	add.w	r3, r7, #16
 801a296:	4619      	mov	r1, r3
 801a298:	68f8      	ldr	r0, [r7, #12]
 801a29a:	f7f9 ff0b 	bl	80140b4 <lv_draw_rect>
        }

        if(dsc->round_end) {
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	7a5b      	ldrb	r3, [r3, #9]
 801a2a2:	f003 0308 	and.w	r3, r3, #8
 801a2a6:	b2db      	uxtb	r3, r3
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d03b      	beq.n	801a324 <lv_draw_sw_line+0x2f6>
            cir_area.x1 = point2->x - r;
 801a2ac:	683b      	ldr	r3, [r7, #0]
 801a2ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2b2:	b29a      	uxth	r2, r3
 801a2b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2b6:	b29b      	uxth	r3, r3
 801a2b8:	1ad3      	subs	r3, r2, r3
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	b21b      	sxth	r3, r3
 801a2be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point2->y - r;
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2cc:	b29b      	uxth	r3, r3
 801a2ce:	1ad3      	subs	r3, r2, r3
 801a2d0:	b29b      	uxth	r3, r3
 801a2d2:	b21b      	sxth	r3, r3
 801a2d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point2->x + r - r_corr;
 801a2d8:	683b      	ldr	r3, [r7, #0]
 801a2da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2de:	b29a      	uxth	r2, r3
 801a2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	4413      	add	r3, r2
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2ea:	b29b      	uxth	r3, r3
 801a2ec:	1ad3      	subs	r3, r2, r3
 801a2ee:	b29b      	uxth	r3, r3
 801a2f0:	b21b      	sxth	r3, r3
 801a2f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point2->y + r - r_corr ;
 801a2f6:	683b      	ldr	r3, [r7, #0]
 801a2f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a2fc:	b29a      	uxth	r2, r3
 801a2fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a300:	b29b      	uxth	r3, r3
 801a302:	4413      	add	r3, r2
 801a304:	b29a      	uxth	r2, r3
 801a306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a308:	b29b      	uxth	r3, r3
 801a30a:	1ad3      	subs	r3, r2, r3
 801a30c:	b29b      	uxth	r3, r3
 801a30e:	b21b      	sxth	r3, r3
 801a310:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 801a314:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a318:	f107 0310 	add.w	r3, r7, #16
 801a31c:	4619      	mov	r1, r3
 801a31e:	68f8      	ldr	r0, [r7, #12]
 801a320:	f7f9 fec8 	bl	80140b4 <lv_draw_rect>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a328:	609a      	str	r2, [r3, #8]
 801a32a:	e006      	b.n	801a33a <lv_draw_sw_line+0x30c>
    if(dsc->width == 0) return;
 801a32c:	bf00      	nop
 801a32e:	e004      	b.n	801a33a <lv_draw_sw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 801a330:	bf00      	nop
 801a332:	e002      	b.n	801a33a <lv_draw_sw_line+0x30c>
    if(point1->x == point2->x && point1->y == point2->y) return;
 801a334:	bf00      	nop
 801a336:	e000      	b.n	801a33a <lv_draw_sw_line+0x30c>
    if(!is_common) return;
 801a338:	bf00      	nop
}
 801a33a:	3760      	adds	r7, #96	; 0x60
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <draw_line_hor>:
 **********************/


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b098      	sub	sp, #96	; 0x60
 801a344:	af00      	add	r7, sp, #0
 801a346:	60f8      	str	r0, [r7, #12]
 801a348:	60b9      	str	r1, [r7, #8]
 801a34a:	607a      	str	r2, [r7, #4]
 801a34c:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801a34e:	68bb      	ldr	r3, [r7, #8]
 801a350:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a354:	3b01      	subs	r3, #1
 801a356:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 801a358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a35a:	105b      	asrs	r3, r3, #1
 801a35c:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801a35e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a360:	f003 0301 	and.w	r3, r3, #1
 801a364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a366:	4413      	add	r3, r2
 801a368:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 801a36a:	683b      	ldr	r3, [r7, #0]
 801a36c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a376:	4293      	cmp	r3, r2
 801a378:	bfa8      	it	ge
 801a37a:	4613      	movge	r3, r2
 801a37c:	b21b      	sxth	r3, r3
 801a37e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 801a380:	683b      	ldr	r3, [r7, #0]
 801a382:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a38c:	4293      	cmp	r3, r2
 801a38e:	bfb8      	it	lt
 801a390:	4613      	movlt	r3, r2
 801a392:	b21b      	sxth	r3, r3
 801a394:	b29b      	uxth	r3, r3
 801a396:	3b01      	subs	r3, #1
 801a398:	b29b      	uxth	r3, r3
 801a39a:	b21b      	sxth	r3, r3
 801a39c:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.y1 = point1->y - w_half1;
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a3a4:	b29a      	uxth	r2, r3
 801a3a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	1ad3      	subs	r3, r2, r3
 801a3ac:	b29b      	uxth	r3, r3
 801a3ae:	b21b      	sxth	r3, r3
 801a3b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    blend_area.y2 = point1->y + w_half0;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a3b8:	b29a      	uxth	r2, r3
 801a3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a3bc:	b29b      	uxth	r3, r3
 801a3be:	4413      	add	r3, r2
 801a3c0:	b29b      	uxth	r3, r3
 801a3c2:	b21b      	sxth	r3, r3
 801a3c4:	867b      	strh	r3, [r7, #50]	; 0x32

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	689a      	ldr	r2, [r3, #8]
 801a3ca:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801a3ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	f006 f9a6 	bl	8020724 <_lv_area_intersect>
 801a3d8:	4603      	mov	r3, r0
 801a3da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 801a3de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a3e2:	f083 0301 	eor.w	r3, r3, #1
 801a3e6:	b2db      	uxtb	r3, r3
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	f040 8106 	bne.w	801a5fa <draw_line_hor+0x2ba>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801a3ee:	68bb      	ldr	r3, [r7, #8]
 801a3f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d006      	beq.n	801a406 <draw_line_hor+0xc6>
 801a3f8:	68bb      	ldr	r3, [r7, #8]
 801a3fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d001      	beq.n	801a406 <draw_line_hor+0xc6>
 801a402:	2301      	movs	r3, #1
 801a404:	e000      	b.n	801a408 <draw_line_hor+0xc8>
 801a406:	2300      	movs	r3, #0
 801a408:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801a40c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a410:	f003 0301 	and.w	r3, r3, #1
 801a414:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 801a418:	2301      	movs	r3, #1
 801a41a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 801a41e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a422:	4618      	mov	r0, r3
 801a424:	f7f7 fb6a 	bl	8011afc <lv_draw_mask_is_any>
 801a428:	4603      	mov	r3, r0
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d003      	beq.n	801a436 <draw_line_hor+0xf6>
 801a42e:	2300      	movs	r3, #0
 801a430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801a434:	e006      	b.n	801a444 <draw_line_hor+0x104>
    else if(dashed) simple_mode = false;
 801a436:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d002      	beq.n	801a444 <draw_line_hor+0x104>
 801a43e:	2300      	movs	r3, #0
 801a440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801a444:	f107 0310 	add.w	r3, r7, #16
 801a448:	211c      	movs	r1, #28
 801a44a:	4618      	mov	r0, r3
 801a44c:	f008 f8be 	bl	80225cc <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801a450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a454:	613b      	str	r3, [r7, #16]
    blend_dsc.color = dsc->color;
 801a456:	68bb      	ldr	r3, [r7, #8]
 801a458:	781b      	ldrb	r3, [r3, #0]
 801a45a:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = dsc->opa;
 801a45c:	68bb      	ldr	r3, [r7, #8]
 801a45e:	7a1b      	ldrb	r3, [r3, #8]
 801a460:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801a464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d006      	beq.n	801a47a <draw_line_hor+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a46c:	f107 0310 	add.w	r3, r7, #16
 801a470:	4619      	mov	r1, r3
 801a472:	68f8      	ldr	r0, [r7, #12]
 801a474:	f7fc fe12 	bl	801709c <lv_draw_sw_blend>
 801a478:	e0c0      	b.n	801a5fc <draw_line_hor+0x2bc>
    }
#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {

        int32_t blend_area_w = lv_area_get_width(&blend_area);
 801a47a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a47e:	4618      	mov	r0, r3
 801a480:	f7ff fdbe 	bl	801a000 <lv_area_get_width>
 801a484:	4603      	mov	r3, r0
 801a486:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 801a488:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a48a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801a48c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a490:	867b      	strh	r3, [r7, #50]	; 0x32

        lv_coord_t dash_start = 0;
 801a492:	2300      	movs	r3, #0
 801a494:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801a498:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d011      	beq.n	801a4c4 <draw_line_hor+0x184>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 801a4a0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801a4a4:	461a      	mov	r2, r3
 801a4a6:	68bb      	ldr	r3, [r7, #8]
 801a4a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a4ac:	4619      	mov	r1, r3
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a4b4:	440b      	add	r3, r1
 801a4b6:	fb92 f1f3 	sdiv	r1, r2, r3
 801a4ba:	fb01 f303 	mul.w	r3, r1, r3
 801a4be:	1ad3      	subs	r3, r2, r3
 801a4c0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 801a4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f007 fcd6 	bl	8021e78 <lv_mem_buf_get>
 801a4cc:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4d0:	61fb      	str	r3, [r7, #28]
        blend_dsc.mask_area = &blend_area;
 801a4d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a4d6:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 801a4d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a4dc:	65bb      	str	r3, [r7, #88]	; 0x58
 801a4de:	e082      	b.n	801a5e6 <draw_line_hor+0x2a6>
            lv_memset_ff(mask_buf, blend_area_w);
 801a4e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4e2:	4619      	mov	r1, r3
 801a4e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a4e6:	f008 f8f2 	bl	80226ce <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 801a4ea:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801a4ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a4f0:	b21a      	sxth	r2, r3
 801a4f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4f4:	b21b      	sxth	r3, r3
 801a4f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a4f8:	f7f7 fa02 	bl	8011900 <lv_draw_mask_apply>
 801a4fc:	4603      	mov	r3, r0
 801a4fe:	f887 3020 	strb.w	r3, [r7, #32]

            if(dashed) {
 801a502:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a506:	2b00      	cmp	r3, #0
 801a508:	d056      	beq.n	801a5b8 <draw_line_hor+0x278>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 801a50a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d052      	beq.n	801a5b8 <draw_line_hor+0x278>
                    lv_coord_t dash_cnt = dash_start;
 801a512:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801a516:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    lv_coord_t i;
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801a51a:	2300      	movs	r3, #0
 801a51c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801a520:	e042      	b.n	801a5a8 <draw_line_hor+0x268>
                        if(dash_cnt <= dsc->dash_width) {
 801a522:	68bb      	ldr	r3, [r7, #8]
 801a524:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a528:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801a52c:	429a      	cmp	r2, r3
 801a52e:	dc17      	bgt.n	801a560 <draw_line_hor+0x220>
                            int16_t diff = dsc->dash_width - dash_cnt;
 801a530:	68bb      	ldr	r3, [r7, #8]
 801a532:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a536:	b29a      	uxth	r2, r3
 801a538:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801a53c:	1ad3      	subs	r3, r2, r3
 801a53e:	b29b      	uxth	r3, r3
 801a540:	86fb      	strh	r3, [r7, #54]	; 0x36
                            i += diff;
 801a542:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801a546:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a548:	4413      	add	r3, r2
 801a54a:	b29b      	uxth	r3, r3
 801a54c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                            dash_cnt += diff;
 801a550:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 801a554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a556:	4413      	add	r3, r2
 801a558:	b29b      	uxth	r3, r3
 801a55a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a55e:	e015      	b.n	801a58c <draw_line_hor+0x24c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801a560:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a56a:	4619      	mov	r1, r3
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a572:	440b      	add	r3, r1
 801a574:	429a      	cmp	r2, r3
 801a576:	db03      	blt.n	801a580 <draw_line_hor+0x240>
                            dash_cnt = 0;
 801a578:	2300      	movs	r3, #0
 801a57a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a57e:	e005      	b.n	801a58c <draw_line_hor+0x24c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 801a580:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a586:	4413      	add	r3, r2
 801a588:	2200      	movs	r2, #0
 801a58a:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801a58c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a590:	b29b      	uxth	r3, r3
 801a592:	3301      	adds	r3, #1
 801a594:	b29b      	uxth	r3, r3
 801a596:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801a59a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801a59e:	b29b      	uxth	r3, r3
 801a5a0:	3301      	adds	r3, #1
 801a5a2:	b29b      	uxth	r3, r3
 801a5a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a5a8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a5ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a5ae:	429a      	cmp	r2, r3
 801a5b0:	dcb7      	bgt.n	801a522 <draw_line_hor+0x1e2>
                        }
                    }

                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801a5b2:	2302      	movs	r3, #2
 801a5b4:	f887 3020 	strb.w	r3, [r7, #32]
                }
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a5b8:	f107 0310 	add.w	r3, r7, #16
 801a5bc:	4619      	mov	r1, r3
 801a5be:	68f8      	ldr	r0, [r7, #12]
 801a5c0:	f7fc fd6c 	bl	801709c <lv_draw_sw_blend>

            blend_area.y1++;
 801a5c4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a5c8:	b29b      	uxth	r3, r3
 801a5ca:	3301      	adds	r3, #1
 801a5cc:	b29b      	uxth	r3, r3
 801a5ce:	b21b      	sxth	r3, r3
 801a5d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
            blend_area.y2++;
 801a5d2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	3301      	adds	r3, #1
 801a5da:	b29b      	uxth	r3, r3
 801a5dc:	b21b      	sxth	r3, r3
 801a5de:	867b      	strh	r3, [r7, #50]	; 0x32
        for(h = blend_area.y1; h <= y2; h++) {
 801a5e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a5e2:	3301      	adds	r3, #1
 801a5e4:	65bb      	str	r3, [r7, #88]	; 0x58
 801a5e6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801a5ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a5ec:	429a      	cmp	r2, r3
 801a5ee:	f77f af77 	ble.w	801a4e0 <draw_line_hor+0x1a0>
        }
        lv_mem_buf_release(mask_buf);
 801a5f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a5f4:	f007 fcec 	bl	8021fd0 <lv_mem_buf_release>
 801a5f8:	e000      	b.n	801a5fc <draw_line_hor+0x2bc>
    if(!is_common) return;
 801a5fa:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801a5fc:	3760      	adds	r7, #96	; 0x60
 801a5fe:	46bd      	mov	sp, r7
 801a600:	bd80      	pop	{r7, pc}

0801a602 <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801a602:	b580      	push	{r7, lr}
 801a604:	b098      	sub	sp, #96	; 0x60
 801a606:	af00      	add	r7, sp, #0
 801a608:	60f8      	str	r0, [r7, #12]
 801a60a:	60b9      	str	r1, [r7, #8]
 801a60c:	607a      	str	r2, [r7, #4]
 801a60e:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801a610:	68bb      	ldr	r3, [r7, #8]
 801a612:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a616:	3b01      	subs	r3, #1
 801a618:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 801a61a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a61c:	105b      	asrs	r3, r3, #1
 801a61e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801a620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a622:	f003 0301 	and.w	r3, r3, #1
 801a626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a628:	4413      	add	r3, r2
 801a62a:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = point1->x - w_half1;
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a632:	b29a      	uxth	r2, r3
 801a634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a636:	b29b      	uxth	r3, r3
 801a638:	1ad3      	subs	r3, r2, r3
 801a63a:	b29b      	uxth	r3, r3
 801a63c:	b21b      	sxth	r3, r3
 801a63e:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.x2 = point1->x + w_half0;
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a646:	b29a      	uxth	r2, r3
 801a648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a64a:	b29b      	uxth	r3, r3
 801a64c:	4413      	add	r3, r2
 801a64e:	b29b      	uxth	r3, r3
 801a650:	b21b      	sxth	r3, r3
 801a652:	86bb      	strh	r3, [r7, #52]	; 0x34
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a660:	4293      	cmp	r3, r2
 801a662:	bfa8      	it	ge
 801a664:	4613      	movge	r3, r2
 801a666:	b21b      	sxth	r3, r3
 801a668:	867b      	strh	r3, [r7, #50]	; 0x32
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 801a66a:	683b      	ldr	r3, [r7, #0]
 801a66c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a676:	4293      	cmp	r3, r2
 801a678:	bfb8      	it	lt
 801a67a:	4613      	movlt	r3, r2
 801a67c:	b21b      	sxth	r3, r3
 801a67e:	b29b      	uxth	r3, r3
 801a680:	3b01      	subs	r3, #1
 801a682:	b29b      	uxth	r3, r3
 801a684:	b21b      	sxth	r3, r3
 801a686:	86fb      	strh	r3, [r7, #54]	; 0x36

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	689a      	ldr	r2, [r3, #8]
 801a68c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a694:	4618      	mov	r0, r3
 801a696:	f006 f845 	bl	8020724 <_lv_area_intersect>
 801a69a:	4603      	mov	r3, r0
 801a69c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 801a6a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a6a4:	f083 0301 	eor.w	r3, r3, #1
 801a6a8:	b2db      	uxtb	r3, r3
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	f040 80d6 	bne.w	801a85c <draw_line_ver+0x25a>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d006      	beq.n	801a6c8 <draw_line_ver+0xc6>
 801a6ba:	68bb      	ldr	r3, [r7, #8]
 801a6bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d001      	beq.n	801a6c8 <draw_line_ver+0xc6>
 801a6c4:	2301      	movs	r3, #1
 801a6c6:	e000      	b.n	801a6ca <draw_line_ver+0xc8>
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801a6ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a6d2:	f003 0301 	and.w	r3, r3, #1
 801a6d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 801a6da:	2301      	movs	r3, #1
 801a6dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 801a6e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	f7f7 fa09 	bl	8011afc <lv_draw_mask_is_any>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d003      	beq.n	801a6f8 <draw_line_ver+0xf6>
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801a6f6:	e006      	b.n	801a706 <draw_line_ver+0x104>
    else if(dashed) simple_mode = false;
 801a6f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d002      	beq.n	801a706 <draw_line_ver+0x104>
 801a700:	2300      	movs	r3, #0
 801a702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801a706:	f107 0314 	add.w	r3, r7, #20
 801a70a:	211c      	movs	r1, #28
 801a70c:	4618      	mov	r0, r3
 801a70e:	f007 ff5d 	bl	80225cc <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801a712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a716:	617b      	str	r3, [r7, #20]
    blend_dsc.color = dsc->color;
 801a718:	68bb      	ldr	r3, [r7, #8]
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->opa;
 801a71e:	68bb      	ldr	r3, [r7, #8]
 801a720:	7a1b      	ldrb	r3, [r3, #8]
 801a722:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801a726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d006      	beq.n	801a73c <draw_line_ver+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a72e:	f107 0314 	add.w	r3, r7, #20
 801a732:	4619      	mov	r1, r3
 801a734:	68f8      	ldr	r0, [r7, #12]
 801a736:	f7fc fcb1 	bl	801709c <lv_draw_sw_blend>
 801a73a:	e090      	b.n	801a85e <draw_line_ver+0x25c>
    }

#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {
        int32_t draw_area_w = lv_area_get_width(&blend_area);
 801a73c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a740:	4618      	mov	r0, r3
 801a742:	f7ff fc5d 	bl	801a000 <lv_area_get_width>
 801a746:	4603      	mov	r3, r0
 801a748:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 801a74a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a74c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801a74e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a752:	86fb      	strh	r3, [r7, #54]	; 0x36

        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 801a754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a756:	4618      	mov	r0, r3
 801a758:	f007 fb8e 	bl	8021e78 <lv_mem_buf_get>
 801a75c:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a760:	623b      	str	r3, [r7, #32]
        blend_dsc.mask_area = &blend_area;
 801a762:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a766:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_coord_t dash_start = 0;
 801a768:	2300      	movs	r3, #0
 801a76a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801a76e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a772:	2b00      	cmp	r3, #0
 801a774:	d011      	beq.n	801a79a <draw_line_ver+0x198>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 801a776:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a77a:	461a      	mov	r2, r3
 801a77c:	68bb      	ldr	r3, [r7, #8]
 801a77e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a782:	4619      	mov	r1, r3
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a78a:	440b      	add	r3, r1
 801a78c:	fb92 f1f3 	sdiv	r1, r2, r3
 801a790:	fb01 f303 	mul.w	r3, r1, r3
 801a794:	1ad3      	subs	r3, r2, r3
 801a796:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_coord_t dash_cnt = dash_start;
 801a79a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801a79e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 801a7a2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a7a6:	657b      	str	r3, [r7, #84]	; 0x54
 801a7a8:	e04f      	b.n	801a84a <draw_line_ver+0x248>
            lv_memset_ff(mask_buf, draw_area_w);
 801a7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7ac:	4619      	mov	r1, r3
 801a7ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a7b0:	f007 ff8d 	bl	80226ce <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 801a7b4:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801a7b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7ba:	b21a      	sxth	r2, r3
 801a7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7be:	b21b      	sxth	r3, r3
 801a7c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a7c2:	f7f7 f89d 	bl	8011900 <lv_draw_mask_apply>
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if(dashed) {
 801a7cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d023      	beq.n	801a81c <draw_line_ver+0x21a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 801a7d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d018      	beq.n	801a80e <draw_line_ver+0x20c>
                    if(dash_cnt > dsc->dash_width) {
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a7e2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	dd02      	ble.n	801a7f0 <draw_line_ver+0x1ee>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801a7f0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a7fa:	4619      	mov	r1, r3
 801a7fc:	68bb      	ldr	r3, [r7, #8]
 801a7fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a802:	440b      	add	r3, r1
 801a804:	429a      	cmp	r2, r3
 801a806:	db02      	blt.n	801a80e <draw_line_ver+0x20c>
                        dash_cnt = 0;
 801a808:	2300      	movs	r3, #0
 801a80a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    }
                }
                dash_cnt ++;
 801a80e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801a812:	b29b      	uxth	r3, r3
 801a814:	3301      	adds	r3, #1
 801a816:	b29b      	uxth	r3, r3
 801a818:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a81c:	f107 0314 	add.w	r3, r7, #20
 801a820:	4619      	mov	r1, r3
 801a822:	68f8      	ldr	r0, [r7, #12]
 801a824:	f7fc fc3a 	bl	801709c <lv_draw_sw_blend>

            blend_area.y1++;
 801a828:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a82c:	b29b      	uxth	r3, r3
 801a82e:	3301      	adds	r3, #1
 801a830:	b29b      	uxth	r3, r3
 801a832:	b21b      	sxth	r3, r3
 801a834:	867b      	strh	r3, [r7, #50]	; 0x32
            blend_area.y2++;
 801a836:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a83a:	b29b      	uxth	r3, r3
 801a83c:	3301      	adds	r3, #1
 801a83e:	b29b      	uxth	r3, r3
 801a840:	b21b      	sxth	r3, r3
 801a842:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(h = blend_area.y1; h <= y2; h++) {
 801a844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a846:	3301      	adds	r3, #1
 801a848:	657b      	str	r3, [r7, #84]	; 0x54
 801a84a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801a84e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a850:	429a      	cmp	r2, r3
 801a852:	ddaa      	ble.n	801a7aa <draw_line_ver+0x1a8>
        }
        lv_mem_buf_release(mask_buf);
 801a854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a856:	f007 fbbb 	bl	8021fd0 <lv_mem_buf_release>
 801a85a:	e000      	b.n	801a85e <draw_line_ver+0x25c>
    if(!is_common) return;
 801a85c:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801a85e:	3760      	adds	r7, #96	; 0x60
 801a860:	46bd      	mov	sp, r7
 801a862:	bd80      	pop	{r7, pc}

0801a864 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                 const lv_point_t * point1, const lv_point_t * point2)
{
 801a864:	b5b0      	push	{r4, r5, r7, lr}
 801a866:	b0ce      	sub	sp, #312	; 0x138
 801a868:	af02      	add	r7, sp, #8
 801a86a:	f507 7498 	add.w	r4, r7, #304	; 0x130
 801a86e:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 801a872:	6020      	str	r0, [r4, #0]
 801a874:	f507 7098 	add.w	r0, r7, #304	; 0x130
 801a878:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 801a87c:	6001      	str	r1, [r0, #0]
 801a87e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 801a882:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 801a886:	600a      	str	r2, [r1, #0]
 801a888:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801a88c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 801a890:	6013      	str	r3, [r2, #0]
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 801a892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a8a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a8a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a8ae:	429a      	cmp	r2, r3
 801a8b0:	da24      	bge.n	801a8fc <draw_line_skew+0x98>
        p1.y = point1->y;
 801a8b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a8b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a8c0:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point2->y;
 801a8c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a8c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a8d2:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point1->x;
 801a8d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a8da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8e4:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point2->x;
 801a8e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a8ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8f6:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 801a8fa:	e023      	b.n	801a944 <draw_line_skew+0xe0>
    }
    else {
        p1.y = point2->y;
 801a8fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a90a:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point1->y;
 801a90e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a91c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point2->x;
 801a920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a92e:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point1->x;
 801a932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a940:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    }

    int32_t xdiff = p2.x - p1.x;
 801a944:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801a948:	461a      	mov	r2, r3
 801a94a:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801a94e:	1ad3      	subs	r3, r2, r3
 801a950:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 801a954:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801a958:	461a      	mov	r2, r3
 801a95a:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801a95e:	1ad3      	subs	r3, r2, r3
 801a960:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 801a964:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a968:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801a96c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801a970:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a974:	2b00      	cmp	r3, #0
 801a976:	bfb8      	it	lt
 801a978:	425b      	neglt	r3, r3
 801a97a:	429a      	cmp	r2, r3
 801a97c:	bfcc      	ite	gt
 801a97e:	2301      	movgt	r3, #1
 801a980:	2300      	movle	r3, #0
 801a982:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 801a986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a98a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a994:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 801a998:	2300      	movs	r3, #0
 801a99a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 801a99e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d00f      	beq.n	801a9c6 <draw_line_skew+0x162>
 801a9a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	bfb8      	it	lt
 801a9ae:	425b      	neglt	r3, r3
 801a9b0:	015a      	lsls	r2, r3, #5
 801a9b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	bfb8      	it	lt
 801a9ba:	425b      	neglt	r3, r3
 801a9bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a9c4:	e00e      	b.n	801a9e4 <draw_line_skew+0x180>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 801a9c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	bfb8      	it	lt
 801a9ce:	425b      	neglt	r3, r3
 801a9d0:	015a      	lsls	r2, r3, #5
 801a9d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	bfb8      	it	lt
 801a9da:	425b      	neglt	r3, r3
 801a9dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 801a9e4:	4a7f      	ldr	r2, [pc, #508]	; (801abe4 <draw_line_skew+0x380>)
 801a9e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a9ea:	4413      	add	r3, r2
 801a9ec:	781b      	ldrb	r3, [r3, #0]
 801a9ee:	461a      	mov	r2, r3
 801a9f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a9f4:	fb02 f303 	mul.w	r3, r2, r3
 801a9f8:	333f      	adds	r3, #63	; 0x3f
 801a9fa:	11db      	asrs	r3, r3, #7
 801a9fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 801aa00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aa04:	105b      	asrs	r3, r3, #1
 801aa06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801aa0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aa0e:	f003 0301 	and.w	r3, r3, #1
 801aa12:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801aa16:	4413      	add	r3, r2
 801aa18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 801aa1c:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801aa20:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801aa24:	4293      	cmp	r3, r2
 801aa26:	bfa8      	it	ge
 801aa28:	4613      	movge	r3, r2
 801aa2a:	b21b      	sxth	r3, r3
 801aa2c:	b29a      	uxth	r2, r3
 801aa2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aa32:	b29b      	uxth	r3, r3
 801aa34:	1ad3      	subs	r3, r2, r3
 801aa36:	b29b      	uxth	r3, r3
 801aa38:	b21b      	sxth	r3, r3
 801aa3a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 801aa3e:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801aa42:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801aa46:	4293      	cmp	r3, r2
 801aa48:	bfb8      	it	lt
 801aa4a:	4613      	movlt	r3, r2
 801aa4c:	b21b      	sxth	r3, r3
 801aa4e:	b29a      	uxth	r2, r3
 801aa50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aa54:	b29b      	uxth	r3, r3
 801aa56:	4413      	add	r3, r2
 801aa58:	b29b      	uxth	r3, r3
 801aa5a:	b21b      	sxth	r3, r3
 801aa5c:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 801aa60:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 801aa64:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801aa68:	4293      	cmp	r3, r2
 801aa6a:	bfa8      	it	ge
 801aa6c:	4613      	movge	r3, r2
 801aa6e:	b21b      	sxth	r3, r3
 801aa70:	b29a      	uxth	r2, r3
 801aa72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aa76:	b29b      	uxth	r3, r3
 801aa78:	1ad3      	subs	r3, r2, r3
 801aa7a:	b29b      	uxth	r3, r3
 801aa7c:	b21b      	sxth	r3, r3
 801aa7e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 801aa82:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 801aa86:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801aa8a:	4293      	cmp	r3, r2
 801aa8c:	bfb8      	it	lt
 801aa8e:	4613      	movlt	r3, r2
 801aa90:	b21b      	sxth	r3, r3
 801aa92:	b29a      	uxth	r2, r3
 801aa94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aa98:	b29b      	uxth	r3, r3
 801aa9a:	4413      	add	r3, r2
 801aa9c:	b29b      	uxth	r3, r3
 801aa9e:	b21b      	sxth	r3, r3
 801aaa0:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801aaa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aaa8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	689a      	ldr	r2, [r3, #8]
 801aab0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801aab4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801aab8:	4618      	mov	r0, r3
 801aaba:	f005 fe33 	bl	8020724 <_lv_area_intersect>
 801aabe:	4603      	mov	r3, r0
 801aac0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 801aac4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801aac8:	f083 0301 	eor.w	r3, r3, #1
 801aacc:	b2db      	uxtb	r3, r3
 801aace:	2b00      	cmp	r3, #0
 801aad0:	f040 8276 	bne.w	801afc0 <draw_line_skew+0x75c>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 801aad4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801aad8:	2b00      	cmp	r3, #0
 801aada:	f000 8085 	beq.w	801abe8 <draw_line_skew+0x384>
        if(xdiff > 0) {
 801aade:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	dd3e      	ble.n	801ab64 <draw_line_skew+0x300>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801aae6:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801aaea:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801aaee:	b29a      	uxth	r2, r3
 801aaf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801aaf4:	b29b      	uxth	r3, r3
 801aaf6:	1ad3      	subs	r3, r2, r3
 801aaf8:	b29b      	uxth	r3, r3
 801aafa:	b21c      	sxth	r4, r3
 801aafc:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ab00:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ab04:	b29a      	uxth	r2, r3
 801ab06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ab0a:	b29b      	uxth	r3, r3
 801ab0c:	1ad3      	subs	r3, r2, r3
 801ab0e:	b29b      	uxth	r3, r3
 801ab10:	b21b      	sxth	r3, r3
 801ab12:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ab16:	2200      	movs	r2, #0
 801ab18:	9201      	str	r2, [sp, #4]
 801ab1a:	9300      	str	r3, [sp, #0]
 801ab1c:	462b      	mov	r3, r5
 801ab1e:	4622      	mov	r2, r4
 801ab20:	f7f7 f84a 	bl	8011bb8 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801ab24:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ab28:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ab2c:	b29a      	uxth	r2, r3
 801ab2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ab32:	b29b      	uxth	r3, r3
 801ab34:	4413      	add	r3, r2
 801ab36:	b29b      	uxth	r3, r3
 801ab38:	b21c      	sxth	r4, r3
 801ab3a:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ab3e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ab42:	b29a      	uxth	r2, r3
 801ab44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ab48:	b29b      	uxth	r3, r3
 801ab4a:	4413      	add	r3, r2
 801ab4c:	b29b      	uxth	r3, r3
 801ab4e:	b21b      	sxth	r3, r3
 801ab50:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801ab54:	2201      	movs	r2, #1
 801ab56:	9201      	str	r2, [sp, #4]
 801ab58:	9300      	str	r3, [sp, #0]
 801ab5a:	462b      	mov	r3, r5
 801ab5c:	4622      	mov	r2, r4
 801ab5e:	f7f7 f82b 	bl	8011bb8 <lv_draw_mask_line_points_init>
 801ab62:	e07f      	b.n	801ac64 <draw_line_skew+0x400>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801ab64:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ab68:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ab6c:	b29a      	uxth	r2, r3
 801ab6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ab72:	b29b      	uxth	r3, r3
 801ab74:	4413      	add	r3, r2
 801ab76:	b29b      	uxth	r3, r3
 801ab78:	b21c      	sxth	r4, r3
 801ab7a:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ab7e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ab82:	b29a      	uxth	r2, r3
 801ab84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ab88:	b29b      	uxth	r3, r3
 801ab8a:	4413      	add	r3, r2
 801ab8c:	b29b      	uxth	r3, r3
 801ab8e:	b21b      	sxth	r3, r3
 801ab90:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ab94:	2200      	movs	r2, #0
 801ab96:	9201      	str	r2, [sp, #4]
 801ab98:	9300      	str	r3, [sp, #0]
 801ab9a:	462b      	mov	r3, r5
 801ab9c:	4622      	mov	r2, r4
 801ab9e:	f7f7 f80b 	bl	8011bb8 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801aba2:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801aba6:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801abaa:	b29a      	uxth	r2, r3
 801abac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801abb0:	b29b      	uxth	r3, r3
 801abb2:	1ad3      	subs	r3, r2, r3
 801abb4:	b29b      	uxth	r3, r3
 801abb6:	b21c      	sxth	r4, r3
 801abb8:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801abbc:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801abc0:	b29a      	uxth	r2, r3
 801abc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801abc6:	b29b      	uxth	r3, r3
 801abc8:	1ad3      	subs	r3, r2, r3
 801abca:	b29b      	uxth	r3, r3
 801abcc:	b21b      	sxth	r3, r3
 801abce:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801abd2:	2201      	movs	r2, #1
 801abd4:	9201      	str	r2, [sp, #4]
 801abd6:	9300      	str	r3, [sp, #0]
 801abd8:	462b      	mov	r3, r5
 801abda:	4622      	mov	r2, r4
 801abdc:	f7f6 ffec 	bl	8011bb8 <lv_draw_mask_line_points_init>
 801abe0:	e040      	b.n	801ac64 <draw_line_skew+0x400>
 801abe2:	bf00      	nop
 801abe4:	08026910 	.word	0x08026910
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 801abe8:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801abec:	b29a      	uxth	r2, r3
 801abee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801abf2:	b29b      	uxth	r3, r3
 801abf4:	4413      	add	r3, r2
 801abf6:	b29b      	uxth	r3, r3
 801abf8:	b219      	sxth	r1, r3
 801abfa:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801abfe:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ac02:	b29a      	uxth	r2, r3
 801ac04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ac08:	b29b      	uxth	r3, r3
 801ac0a:	4413      	add	r3, r2
 801ac0c:	b29b      	uxth	r3, r3
 801ac0e:	b21a      	sxth	r2, r3
 801ac10:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ac14:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ac18:	2500      	movs	r5, #0
 801ac1a:	9501      	str	r5, [sp, #4]
 801ac1c:	9300      	str	r3, [sp, #0]
 801ac1e:	4613      	mov	r3, r2
 801ac20:	4622      	mov	r2, r4
 801ac22:	f7f6 ffc9 	bl	8011bb8 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 801ac26:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ac2a:	b29a      	uxth	r2, r3
 801ac2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ac30:	b29b      	uxth	r3, r3
 801ac32:	1ad3      	subs	r3, r2, r3
 801ac34:	b29b      	uxth	r3, r3
 801ac36:	b219      	sxth	r1, r3
 801ac38:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801ac3c:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ac40:	b29a      	uxth	r2, r3
 801ac42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ac46:	b29b      	uxth	r3, r3
 801ac48:	1ad3      	subs	r3, r2, r3
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	b21a      	sxth	r2, r3
 801ac4e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ac52:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801ac56:	2501      	movs	r5, #1
 801ac58:	9501      	str	r5, [sp, #4]
 801ac5a:	9300      	str	r3, [sp, #0]
 801ac5c:	4613      	mov	r3, r2
 801ac5e:	4622      	mov	r2, r4
 801ac60:	f7f6 ffaa 	bl	8011bb8 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 801ac64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ac68:	2100      	movs	r1, #0
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	f7f6 fe16 	bl	801189c <lv_draw_mask_add>
 801ac70:	4603      	mov	r3, r0
 801ac72:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 801ac76:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801ac7a:	2100      	movs	r1, #0
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	f7f6 fe0d 	bl	801189c <lv_draw_mask_add>
 801ac82:	4603      	mov	r3, r0
 801ac84:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 801ac88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac8c:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 801ac90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac94:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 801ac98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ac9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	7a5b      	ldrb	r3, [r3, #9]
 801aca4:	f003 0310 	and.w	r3, r3, #16
 801aca8:	b2db      	uxtb	r3, r3
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d14f      	bne.n	801ad4e <draw_line_skew+0x4ea>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 801acae:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801acb2:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801acb6:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801acba:	b29a      	uxth	r2, r3
 801acbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801acc0:	b29b      	uxth	r3, r3
 801acc2:	1ad3      	subs	r3, r2, r3
 801acc4:	b29b      	uxth	r3, r3
 801acc6:	b21d      	sxth	r5, r3
 801acc8:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801accc:	b29a      	uxth	r2, r3
 801acce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	4413      	add	r3, r2
 801acd6:	b29b      	uxth	r3, r3
 801acd8:	b21b      	sxth	r3, r3
 801acda:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801acde:	2203      	movs	r2, #3
 801ace0:	9201      	str	r2, [sp, #4]
 801ace2:	9300      	str	r3, [sp, #0]
 801ace4:	462b      	mov	r3, r5
 801ace6:	4622      	mov	r2, r4
 801ace8:	f7f6 ff66 	bl	8011bb8 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 801acec:	f9b7 10e4 	ldrsh.w	r1, [r7, #228]	; 0xe4
 801acf0:	f9b7 40e6 	ldrsh.w	r4, [r7, #230]	; 0xe6
 801acf4:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801acf8:	b29a      	uxth	r2, r3
 801acfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801acfe:	b29b      	uxth	r3, r3
 801ad00:	1ad3      	subs	r3, r2, r3
 801ad02:	b29b      	uxth	r3, r3
 801ad04:	b21d      	sxth	r5, r3
 801ad06:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ad0a:	b29a      	uxth	r2, r3
 801ad0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ad10:	b29b      	uxth	r3, r3
 801ad12:	4413      	add	r3, r2
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	b21b      	sxth	r3, r3
 801ad18:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801ad1c:	2202      	movs	r2, #2
 801ad1e:	9201      	str	r2, [sp, #4]
 801ad20:	9300      	str	r3, [sp, #0]
 801ad22:	462b      	mov	r3, r5
 801ad24:	4622      	mov	r2, r4
 801ad26:	f7f6 ff47 	bl	8011bb8 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 801ad2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ad2e:	2100      	movs	r1, #0
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7f6 fdb3 	bl	801189c <lv_draw_mask_add>
 801ad36:	4603      	mov	r3, r0
 801ad38:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 801ad3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ad40:	2100      	movs	r1, #0
 801ad42:	4618      	mov	r0, r3
 801ad44:	f7f6 fdaa 	bl	801189c <lv_draw_mask_add>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    /*The real draw area is around the line.
     *It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);
 801ad4e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ad52:	4618      	mov	r0, r3
 801ad54:	f7ff f954 	bl	801a000 <lv_area_get_width>
 801ad58:	4603      	mov	r3, r0
 801ad5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 801ad5e:	f7f3 fcc3 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 801ad62:	4603      	mov	r3, r0
 801ad64:	4618      	mov	r0, r3
 801ad66:	f004 ffe9 	bl	801fd3c <lv_disp_get_hor_res>
 801ad6a:	4603      	mov	r3, r0
 801ad6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 801ad70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ad74:	4618      	mov	r0, r3
 801ad76:	f005 fc48 	bl	802060a <lv_area_get_size>
 801ad7a:	4602      	mov	r2, r0
 801ad7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ad80:	4293      	cmp	r3, r2
 801ad82:	d906      	bls.n	801ad92 <draw_line_skew+0x52e>
 801ad84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f005 fc3e 	bl	802060a <lv_area_get_size>
 801ad8e:	4603      	mov	r3, r0
 801ad90:	e001      	b.n	801ad96 <draw_line_skew+0x532>
 801ad92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ad96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 801ad9a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801ad9e:	f007 f86b 	bl	8021e78 <lv_mem_buf_get>
 801ada2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

    lv_coord_t y2 = blend_area.y2;
 801ada6:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 801adaa:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    blend_area.y2 = blend_area.y1;
 801adae:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801adb2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    uint32_t mask_p = 0;
 801adb6:	2300      	movs	r3, #0
 801adb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    lv_memset_ff(mask_buf, mask_buf_size);
 801adbc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801adc0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801adc4:	f007 fc83 	bl	80226ce <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801adc8:	f107 0310 	add.w	r3, r7, #16
 801adcc:	211c      	movs	r1, #28
 801adce:	4618      	mov	r0, r3
 801add0:	f007 fbfc 	bl	80225cc <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801add4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801add8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801addc:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801ade0:	601a      	str	r2, [r3, #0]
    blend_dsc.color = dsc->color;
 801ade2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ade6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801adea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801adee:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 801adf2:	6812      	ldr	r2, [r2, #0]
 801adf4:	7812      	ldrb	r2, [r2, #0]
 801adf6:	721a      	strb	r2, [r3, #8]
    blend_dsc.opa = dsc->opa;
 801adf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801adfc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	7a1a      	ldrb	r2, [r3, #8]
 801ae04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ae08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ae0c:	761a      	strb	r2, [r3, #24]
    blend_dsc.mask_buf = mask_buf;
 801ae0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ae12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ae16:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801ae1a:	60da      	str	r2, [r3, #12]
    blend_dsc.mask_area = &blend_area;
 801ae1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ae20:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ae24:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801ae28:	615a      	str	r2, [r3, #20]

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 801ae2a:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801ae2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801ae32:	e06a      	b.n	801af0a <draw_line_skew+0x6a6>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 801ae34:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801ae38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ae3c:	18d0      	adds	r0, r2, r3
 801ae3e:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 801ae42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ae46:	b21a      	sxth	r2, r3
 801ae48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ae4c:	b21b      	sxth	r3, r3
 801ae4e:	f7f6 fd57 	bl	8011900 <lv_draw_mask_apply>
 801ae52:	4603      	mov	r3, r0
 801ae54:	461a      	mov	r2, r3
 801ae56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ae5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ae5e:	741a      	strb	r2, [r3, #16]
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801ae60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ae64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ae68:	7c1b      	ldrb	r3, [r3, #16]
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d10a      	bne.n	801ae84 <draw_line_skew+0x620>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 801ae6e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801ae72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ae76:	4413      	add	r3, r2
 801ae78:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801ae7c:	4611      	mov	r1, r2
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f007 fba4 	bl	80225cc <lv_memset_00>
        }

        mask_p += draw_area_w;
 801ae84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ae88:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801ae8c:	4413      	add	r3, r2
 801ae8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 801ae92:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801ae96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ae9a:	4413      	add	r3, r2
 801ae9c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801aea0:	429a      	cmp	r2, r3
 801aea2:	d908      	bls.n	801aeb6 <draw_line_skew+0x652>
            blend_area.y2 ++;
 801aea4:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801aea8:	b29b      	uxth	r3, r3
 801aeaa:	3301      	adds	r3, #1
 801aeac:	b29b      	uxth	r3, r3
 801aeae:	b21b      	sxth	r3, r3
 801aeb0:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 801aeb4:	e024      	b.n	801af00 <draw_line_skew+0x69c>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801aeb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aeba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801aebe:	2202      	movs	r2, #2
 801aec0:	741a      	strb	r2, [r3, #16]
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801aec2:	f107 0210 	add.w	r2, r7, #16
 801aec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aeca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801aece:	4611      	mov	r1, r2
 801aed0:	6818      	ldr	r0, [r3, #0]
 801aed2:	f7fc f8e3 	bl	801709c <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 801aed6:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801aeda:	b29b      	uxth	r3, r3
 801aedc:	3301      	adds	r3, #1
 801aede:	b29b      	uxth	r3, r3
 801aee0:	b21b      	sxth	r3, r3
 801aee2:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
            blend_area.y2 = blend_area.y1;
 801aee6:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801aeea:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
            mask_p = 0;
 801aeee:	2300      	movs	r3, #0
 801aef0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            lv_memset_ff(mask_buf, mask_buf_size);
 801aef4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801aef8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801aefc:	f007 fbe7 	bl	80226ce <lv_memset_ff>
    for(h = blend_area.y1; h <= y2; h++) {
 801af00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801af04:	3301      	adds	r3, #1
 801af06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801af0a:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 801af0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801af12:	429a      	cmp	r2, r3
 801af14:	dd8e      	ble.n	801ae34 <draw_line_skew+0x5d0>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 801af16:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
 801af1a:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801af1e:	429a      	cmp	r2, r3
 801af20:	d017      	beq.n	801af52 <draw_line_skew+0x6ee>
        blend_area.y2--;
 801af22:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801af26:	b29b      	uxth	r3, r3
 801af28:	3b01      	subs	r3, #1
 801af2a:	b29b      	uxth	r3, r3
 801af2c:	b21b      	sxth	r3, r3
 801af2e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801af32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801af36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801af3a:	2202      	movs	r2, #2
 801af3c:	741a      	strb	r2, [r3, #16]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801af3e:	f107 0210 	add.w	r2, r7, #16
 801af42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801af46:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801af4a:	4611      	mov	r1, r2
 801af4c:	6818      	ldr	r0, [r3, #0]
 801af4e:	f7fc f8a5 	bl	801709c <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 801af52:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801af56:	f007 f83b 	bl	8021fd0 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 801af5a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801af5e:	4618      	mov	r0, r3
 801af60:	f7f6 fd62 	bl	8011a28 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 801af64:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801af68:	4618      	mov	r0, r3
 801af6a:	f7f6 fd5d 	bl	8011a28 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 801af6e:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801af72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801af76:	d004      	beq.n	801af82 <draw_line_skew+0x71e>
 801af78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801af7c:	4618      	mov	r0, r3
 801af7e:	f7f6 fd53 	bl	8011a28 <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 801af82:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801af86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801af8a:	d004      	beq.n	801af96 <draw_line_skew+0x732>
 801af8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af90:	4618      	mov	r0, r3
 801af92:	f7f6 fd49 	bl	8011a28 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 801af96:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 801af9a:	4618      	mov	r0, r3
 801af9c:	f7f6 fcf4 	bl	8011988 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 801afa0:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 801afa4:	4618      	mov	r0, r3
 801afa6:	f7f6 fcef 	bl	8011988 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 801afaa:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801afae:	4618      	mov	r0, r3
 801afb0:	f7f6 fcea 	bl	8011988 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 801afb4:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801afb8:	4618      	mov	r0, r3
 801afba:	f7f6 fce5 	bl	8011988 <lv_draw_mask_remove_id>
 801afbe:	e000      	b.n	801afc2 <draw_line_skew+0x75e>
    if(is_common == false) return;
 801afc0:	bf00      	nop
    LV_UNUSED(point2);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw skewed line with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801afc2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801afc6:	46bd      	mov	sp, r7
 801afc8:	bdb0      	pop	{r4, r5, r7, pc}
 801afca:	bf00      	nop

0801afcc <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 801afcc:	b590      	push	{r4, r7, lr}
 801afce:	b09b      	sub	sp, #108	; 0x6c
 801afd0:	af02      	add	r7, sp, #8
 801afd2:	60f8      	str	r0, [r7, #12]
 801afd4:	60b9      	str	r1, [r7, #8]
 801afd6:	607a      	str	r2, [r7, #4]
 801afd8:	807b      	strh	r3, [r7, #2]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 801afda:	887b      	ldrh	r3, [r7, #2]
 801afdc:	2b02      	cmp	r3, #2
 801afde:	f240 82a9 	bls.w	801b534 <lv_draw_sw_polygon+0x568>
    if(points == NULL) return;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	f000 82a7 	beq.w	801b538 <lv_draw_sw_polygon+0x56c>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 801afea:	887b      	ldrh	r3, [r7, #2]
 801afec:	009b      	lsls	r3, r3, #2
 801afee:	4618      	mov	r0, r3
 801aff0:	f006 ff42 	bl	8021e78 <lv_mem_buf_get>
 801aff4:	63b8      	str	r0, [r7, #56]	; 0x38
    if(p == NULL) return;
 801aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aff8:	2b00      	cmp	r3, #0
 801affa:	f000 829f 	beq.w	801b53c <lv_draw_sw_polygon+0x570>
    uint16_t i;
    uint16_t pcnt = 0;
 801affe:	2300      	movs	r3, #0
 801b000:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    p[0] = points[0];
 801b004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	6013      	str	r3, [r2, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 801b00c:	2300      	movs	r3, #0
 801b00e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b012:	e039      	b.n	801b088 <lv_draw_sw_polygon+0xbc>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 801b014:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b018:	009b      	lsls	r3, r3, #2
 801b01a:	687a      	ldr	r2, [r7, #4]
 801b01c:	4413      	add	r3, r2
 801b01e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b022:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b026:	3301      	adds	r3, #1
 801b028:	009b      	lsls	r3, r3, #2
 801b02a:	6879      	ldr	r1, [r7, #4]
 801b02c:	440b      	add	r3, r1
 801b02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b032:	429a      	cmp	r2, r3
 801b034:	d110      	bne.n	801b058 <lv_draw_sw_polygon+0x8c>
 801b036:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b03a:	009b      	lsls	r3, r3, #2
 801b03c:	687a      	ldr	r2, [r7, #4]
 801b03e:	4413      	add	r3, r2
 801b040:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b044:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b048:	3301      	adds	r3, #1
 801b04a:	009b      	lsls	r3, r3, #2
 801b04c:	6879      	ldr	r1, [r7, #4]
 801b04e:	440b      	add	r3, r1
 801b050:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b054:	429a      	cmp	r2, r3
 801b056:	d012      	beq.n	801b07e <lv_draw_sw_polygon+0xb2>
            p[pcnt] = points[i];
 801b058:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b05c:	009b      	lsls	r3, r3, #2
 801b05e:	687a      	ldr	r2, [r7, #4]
 801b060:	18d1      	adds	r1, r2, r3
 801b062:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b066:	009b      	lsls	r3, r3, #2
 801b068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b06a:	4413      	add	r3, r2
 801b06c:	461a      	mov	r2, r3
 801b06e:	460b      	mov	r3, r1
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	6013      	str	r3, [r2, #0]
            pcnt++;
 801b074:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b078:	3301      	adds	r3, #1
 801b07a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    for(i = 0; i < point_cnt - 1; i++) {
 801b07e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b082:	3301      	adds	r3, #1
 801b084:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b088:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b08c:	887b      	ldrh	r3, [r7, #2]
 801b08e:	3b01      	subs	r3, #1
 801b090:	429a      	cmp	r2, r3
 801b092:	dbbf      	blt.n	801b014 <lv_draw_sw_polygon+0x48>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b09a:	8879      	ldrh	r1, [r7, #2]
 801b09c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b0a0:	440b      	add	r3, r1
 801b0a2:	009b      	lsls	r3, r3, #2
 801b0a4:	6879      	ldr	r1, [r7, #4]
 801b0a6:	440b      	add	r3, r1
 801b0a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0ac:	429a      	cmp	r2, r3
 801b0ae:	d10d      	bne.n	801b0cc <lv_draw_sw_polygon+0x100>
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b0b6:	8879      	ldrh	r1, [r7, #2]
 801b0b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b0bc:	440b      	add	r3, r1
 801b0be:	009b      	lsls	r3, r3, #2
 801b0c0:	6879      	ldr	r1, [r7, #4]
 801b0c2:	440b      	add	r3, r1
 801b0c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d014      	beq.n	801b0f6 <lv_draw_sw_polygon+0x12a>
        p[pcnt] = points[point_cnt - 1];
 801b0cc:	887a      	ldrh	r2, [r7, #2]
 801b0ce:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b0d2:	4413      	add	r3, r2
 801b0d4:	009b      	lsls	r3, r3, #2
 801b0d6:	687a      	ldr	r2, [r7, #4]
 801b0d8:	18d1      	adds	r1, r2, r3
 801b0da:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b0de:	009b      	lsls	r3, r3, #2
 801b0e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b0e2:	4413      	add	r3, r2
 801b0e4:	461a      	mov	r2, r3
 801b0e6:	460b      	mov	r3, r1
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	6013      	str	r3, [r2, #0]
        pcnt++;
 801b0ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b0f0:	3301      	adds	r3, #1
 801b0f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    point_cnt = pcnt;
 801b0f6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b0fa:	807b      	strh	r3, [r7, #2]
    if(point_cnt < 3) {
 801b0fc:	887b      	ldrh	r3, [r7, #2]
 801b0fe:	2b02      	cmp	r3, #2
 801b100:	d803      	bhi.n	801b10a <lv_draw_sw_polygon+0x13e>
        lv_mem_buf_release(p);
 801b102:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b104:	f006 ff64 	bl	8021fd0 <lv_mem_buf_release>
        return;
 801b108:	e219      	b.n	801b53e <lv_draw_sw_polygon+0x572>
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 801b10a:	4a9a      	ldr	r2, [pc, #616]	; (801b374 <lv_draw_sw_polygon+0x3a8>)
 801b10c:	f107 031c 	add.w	r3, r7, #28
 801b110:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b114:	e883 0003 	stmia.w	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 801b118:	2300      	movs	r3, #0
 801b11a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b11e:	e03c      	b.n	801b19a <lv_draw_sw_polygon+0x1ce>
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 801b120:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b124:	009b      	lsls	r3, r3, #2
 801b126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b128:	4413      	add	r3, r2
 801b12a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b12e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801b132:	4293      	cmp	r3, r2
 801b134:	bfa8      	it	ge
 801b136:	4613      	movge	r3, r2
 801b138:	b21b      	sxth	r3, r3
 801b13a:	83bb      	strh	r3, [r7, #28]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 801b13c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b140:	009b      	lsls	r3, r3, #2
 801b142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b144:	4413      	add	r3, r2
 801b146:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b14a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b14e:	4293      	cmp	r3, r2
 801b150:	bfa8      	it	ge
 801b152:	4613      	movge	r3, r2
 801b154:	b21b      	sxth	r3, r3
 801b156:	83fb      	strh	r3, [r7, #30]
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 801b158:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b15c:	009b      	lsls	r3, r3, #2
 801b15e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b160:	4413      	add	r3, r2
 801b162:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b166:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b16a:	4293      	cmp	r3, r2
 801b16c:	bfb8      	it	lt
 801b16e:	4613      	movlt	r3, r2
 801b170:	b21b      	sxth	r3, r3
 801b172:	843b      	strh	r3, [r7, #32]
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 801b174:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b178:	009b      	lsls	r3, r3, #2
 801b17a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b17c:	4413      	add	r3, r2
 801b17e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b182:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b186:	4293      	cmp	r3, r2
 801b188:	bfb8      	it	lt
 801b18a:	4613      	movlt	r3, r2
 801b18c:	b21b      	sxth	r3, r3
 801b18e:	847b      	strh	r3, [r7, #34]	; 0x22
    for(i = 0; i < point_cnt; i++) {
 801b190:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b194:	3301      	adds	r3, #1
 801b196:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b19a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b19e:	887b      	ldrh	r3, [r7, #2]
 801b1a0:	429a      	cmp	r2, r3
 801b1a2:	d3bd      	bcc.n	801b120 <lv_draw_sw_polygon+0x154>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	689a      	ldr	r2, [r3, #8]
 801b1a8:	f107 011c 	add.w	r1, r7, #28
 801b1ac:	f107 0314 	add.w	r3, r7, #20
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f005 fab7 	bl	8020724 <_lv_area_intersect>
 801b1b6:	4603      	mov	r3, r0
 801b1b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(!is_common) {
 801b1bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b1c0:	f083 0301 	eor.w	r3, r3, #1
 801b1c4:	b2db      	uxtb	r3, r3
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d003      	beq.n	801b1d2 <lv_draw_sw_polygon+0x206>
        lv_mem_buf_release(p);
 801b1ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b1cc:	f006 ff00 	bl	8021fd0 <lv_mem_buf_release>
        return;
 801b1d0:	e1b5      	b.n	801b53e <lv_draw_sw_polygon+0x572>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	689b      	ldr	r3, [r3, #8]
 801b1d6:	633b      	str	r3, [r7, #48]	; 0x30
    draw_ctx->clip_area = &clip_area;
 801b1d8:	68fb      	ldr	r3, [r7, #12]
 801b1da:	f107 0214 	add.w	r2, r7, #20
 801b1de:	609a      	str	r2, [r3, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 801b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b1e2:	885b      	ldrh	r3, [r3, #2]
 801b1e4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    int16_t y_min_i = 0;
 801b1e8:	2300      	movs	r3, #0
 801b1ea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    for(i = 1; i < point_cnt; i++) {
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b1f4:	e01b      	b.n	801b22e <lv_draw_sw_polygon+0x262>
        if(p[i].y < y_min) {
 801b1f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b1fa:	009b      	lsls	r3, r3, #2
 801b1fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b1fe:	4413      	add	r3, r2
 801b200:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b204:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801b208:	429a      	cmp	r2, r3
 801b20a:	dd0b      	ble.n	801b224 <lv_draw_sw_polygon+0x258>
            y_min = p[i].y;
 801b20c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b210:	009b      	lsls	r3, r3, #2
 801b212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b214:	4413      	add	r3, r2
 801b216:	885b      	ldrh	r3, [r3, #2]
 801b218:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            y_min_i = i;
 801b21c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b220:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    for(i = 1; i < point_cnt; i++) {
 801b224:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b228:	3301      	adds	r3, #1
 801b22a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b22e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b232:	887b      	ldrh	r3, [r7, #2]
 801b234:	429a      	cmp	r2, r3
 801b236:	d3de      	bcc.n	801b1f6 <lv_draw_sw_polygon+0x22a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 801b238:	887b      	ldrh	r3, [r7, #2]
 801b23a:	222c      	movs	r2, #44	; 0x2c
 801b23c:	fb02 f303 	mul.w	r3, r2, r3
 801b240:	4618      	mov	r0, r3
 801b242:	f006 fe19 	bl	8021e78 <lv_mem_buf_get>
 801b246:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_draw_mask_line_param_t * mp_next = mp;
 801b248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b24a:	657b      	str	r3, [r7, #84]	; 0x54

    int32_t i_prev_left = y_min_i;
 801b24c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b250:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t i_prev_right = y_min_i;
 801b252:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b256:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t i_next_left;
    int32_t i_next_right;
    uint32_t mask_cnt = 0;
 801b258:	2300      	movs	r3, #0
 801b25a:	643b      	str	r3, [r7, #64]	; 0x40

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
 801b25c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b260:	3b01      	subs	r3, #1
 801b262:	64bb      	str	r3, [r7, #72]	; 0x48
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801b264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b266:	2b00      	cmp	r3, #0
 801b268:	da03      	bge.n	801b272 <lv_draw_sw_polygon+0x2a6>
 801b26a:	887b      	ldrh	r3, [r7, #2]
 801b26c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b26e:	4413      	add	r3, r2
 801b270:	64bb      	str	r3, [r7, #72]	; 0x48

    i_next_right = y_min_i + 1;
 801b272:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b276:	3301      	adds	r3, #1
 801b278:	647b      	str	r3, [r7, #68]	; 0x44
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 801b27a:	887b      	ldrh	r3, [r7, #2]
 801b27c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b27e:	429a      	cmp	r2, r3
 801b280:	db01      	blt.n	801b286 <lv_draw_sw_polygon+0x2ba>
 801b282:	2300      	movs	r3, #0
 801b284:	647b      	str	r3, [r7, #68]	; 0x44
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 801b286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b28c:	4413      	add	r3, r2
 801b28e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b292:	b29a      	uxth	r2, r3
 801b294:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b298:	009b      	lsls	r3, r3, #2
 801b29a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b29c:	440b      	add	r3, r1
 801b29e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b2a2:	b29b      	uxth	r3, r3
 801b2a4:	1ad3      	subs	r3, r2, r3
 801b2a6:	b29b      	uxth	r3, r3
 801b2a8:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 801b2aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2ac:	009b      	lsls	r3, r3, #2
 801b2ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b2b0:	4413      	add	r3, r2
 801b2b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b2b6:	b29a      	uxth	r2, r3
 801b2b8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b2bc:	009b      	lsls	r3, r3, #2
 801b2be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b2c0:	440b      	add	r3, r1
 801b2c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b2c6:	b29b      	uxth	r3, r3
 801b2c8:	1ad3      	subs	r3, r2, r3
 801b2ca:	b29b      	uxth	r3, r3
 801b2cc:	853b      	strh	r3, [r7, #40]	; 0x28
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 801b2ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b2d0:	009b      	lsls	r3, r3, #2
 801b2d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b2d4:	4413      	add	r3, r2
 801b2d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b2da:	b29a      	uxth	r2, r3
 801b2dc:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b2e0:	009b      	lsls	r3, r3, #2
 801b2e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b2e4:	440b      	add	r3, r1
 801b2e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b2ea:	b29b      	uxth	r3, r3
 801b2ec:	1ad3      	subs	r3, r2, r3
 801b2ee:	b29b      	uxth	r3, r3
 801b2f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 801b2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2f4:	009b      	lsls	r3, r3, #2
 801b2f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b2f8:	4413      	add	r3, r2
 801b2fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b2fe:	b29a      	uxth	r2, r3
 801b300:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b304:	009b      	lsls	r3, r3, #2
 801b306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b308:	440b      	add	r3, r1
 801b30a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b30e:	b29b      	uxth	r3, r3
 801b310:	1ad3      	subs	r3, r2, r3
 801b312:	b29b      	uxth	r3, r3
 801b314:	84bb      	strh	r3, [r7, #36]	; 0x24

    bool inv = false;
 801b316:	2300      	movs	r3, #0
 801b318:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(dyl * dxr < dyr * dxl) inv = true;
 801b31c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b320:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 801b324:	fb03 f202 	mul.w	r2, r3, r2
 801b328:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b32c:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 801b330:	fb01 f303 	mul.w	r3, r1, r3
 801b334:	429a      	cmp	r2, r3
 801b336:	da02      	bge.n	801b33e <lv_draw_sw_polygon+0x372>
 801b338:	2301      	movs	r3, #1
 801b33a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    do {
        if(!inv) {
 801b33e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801b342:	f083 0301 	eor.w	r3, r3, #1
 801b346:	b2db      	uxtb	r3, r3
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d015      	beq.n	801b378 <lv_draw_sw_polygon+0x3ac>
            i_next_left = i_prev_left - 1;
 801b34c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b34e:	3b01      	subs	r3, #1
 801b350:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801b352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b354:	2b00      	cmp	r3, #0
 801b356:	da03      	bge.n	801b360 <lv_draw_sw_polygon+0x394>
 801b358:	887b      	ldrh	r3, [r7, #2]
 801b35a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b35c:	4413      	add	r3, r2
 801b35e:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right + 1;
 801b360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b362:	3301      	adds	r3, #1
 801b364:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 801b366:	887b      	ldrh	r3, [r7, #2]
 801b368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b36a:	429a      	cmp	r2, r3
 801b36c:	db17      	blt.n	801b39e <lv_draw_sw_polygon+0x3d2>
 801b36e:	2300      	movs	r3, #0
 801b370:	647b      	str	r3, [r7, #68]	; 0x44
 801b372:	e014      	b.n	801b39e <lv_draw_sw_polygon+0x3d2>
 801b374:	08026790 	.word	0x08026790
        }
        else {
            i_next_left = i_prev_left + 1;
 801b378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b37a:	3301      	adds	r3, #1
 801b37c:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 801b37e:	887b      	ldrh	r3, [r7, #2]
 801b380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b382:	429a      	cmp	r2, r3
 801b384:	db01      	blt.n	801b38a <lv_draw_sw_polygon+0x3be>
 801b386:	2300      	movs	r3, #0
 801b388:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right - 1;
 801b38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b38c:	3b01      	subs	r3, #1
 801b38e:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 801b390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b392:	2b00      	cmp	r3, #0
 801b394:	da03      	bge.n	801b39e <lv_draw_sw_polygon+0x3d2>
 801b396:	887b      	ldrh	r3, [r7, #2]
 801b398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b39a:	4413      	add	r3, r2
 801b39c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
 801b39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b3a0:	009b      	lsls	r3, r3, #2
 801b3a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3a4:	4413      	add	r3, r2
 801b3a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b3ac:	009b      	lsls	r3, r3, #2
 801b3ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b3b0:	440b      	add	r3, r1
 801b3b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b3b6:	429a      	cmp	r2, r3
 801b3b8:	db47      	blt.n	801b44a <lv_draw_sw_polygon+0x47e>
            if(p[i_next_left].y != p[i_prev_left].y &&
 801b3ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b3bc:	009b      	lsls	r3, r3, #2
 801b3be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3c0:	4413      	add	r3, r2
 801b3c2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b3c8:	009b      	lsls	r3, r3, #2
 801b3ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b3cc:	440b      	add	r3, r1
 801b3ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b3d2:	429a      	cmp	r2, r3
 801b3d4:	d034      	beq.n	801b440 <lv_draw_sw_polygon+0x474>
               p[i_next_left].x != p[i_prev_left].x) {
 801b3d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b3d8:	009b      	lsls	r3, r3, #2
 801b3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3dc:	4413      	add	r3, r2
 801b3de:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b3e4:	009b      	lsls	r3, r3, #2
 801b3e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b3e8:	440b      	add	r3, r1
 801b3ea:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_left].y != p[i_prev_left].y &&
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	d026      	beq.n	801b440 <lv_draw_sw_polygon+0x474>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b3f4:	009b      	lsls	r3, r3, #2
 801b3f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3f8:	4413      	add	r3, r2
 801b3fa:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b400:	009b      	lsls	r3, r3, #2
 801b402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b404:	4413      	add	r3, r2
 801b406:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_left].x, p[i_next_left].y,
 801b40a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b40c:	009b      	lsls	r3, r3, #2
 801b40e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b410:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b412:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_left].x, p[i_next_left].y,
 801b416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b418:	009b      	lsls	r3, r3, #2
 801b41a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b41c:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b41e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b422:	2201      	movs	r2, #1
 801b424:	9201      	str	r2, [sp, #4]
 801b426:	9300      	str	r3, [sp, #0]
 801b428:	4623      	mov	r3, r4
 801b42a:	4602      	mov	r2, r0
 801b42c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b42e:	f7f6 fbc3 	bl	8011bb8 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
 801b432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b434:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b436:	f7f6 fa31 	bl	801189c <lv_draw_mask_add>
                mp_next++;
 801b43a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b43c:	332c      	adds	r3, #44	; 0x2c
 801b43e:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801b440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b442:	3301      	adds	r3, #1
 801b444:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_left = i_next_left;
 801b446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b448:	653b      	str	r3, [r7, #80]	; 0x50
        }

        if(mask_cnt == point_cnt) break;
 801b44a:	887b      	ldrh	r3, [r7, #2]
 801b44c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b44e:	429a      	cmp	r2, r3
 801b450:	d05b      	beq.n	801b50a <lv_draw_sw_polygon+0x53e>

        if(p[i_next_right].y >= p[i_prev_right].y) {
 801b452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b454:	009b      	lsls	r3, r3, #2
 801b456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b458:	4413      	add	r3, r2
 801b45a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b460:	009b      	lsls	r3, r3, #2
 801b462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b464:	440b      	add	r3, r1
 801b466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b46a:	429a      	cmp	r2, r3
 801b46c:	db47      	blt.n	801b4fe <lv_draw_sw_polygon+0x532>
            if(p[i_next_right].y != p[i_prev_right].y &&
 801b46e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b470:	009b      	lsls	r3, r3, #2
 801b472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b474:	4413      	add	r3, r2
 801b476:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b47c:	009b      	lsls	r3, r3, #2
 801b47e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b480:	440b      	add	r3, r1
 801b482:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b486:	429a      	cmp	r2, r3
 801b488:	d034      	beq.n	801b4f4 <lv_draw_sw_polygon+0x528>
               p[i_next_right].x != p[i_prev_right].x) {
 801b48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b48c:	009b      	lsls	r3, r3, #2
 801b48e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b490:	4413      	add	r3, r2
 801b492:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b498:	009b      	lsls	r3, r3, #2
 801b49a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b49c:	440b      	add	r3, r1
 801b49e:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_right].y != p[i_prev_right].y &&
 801b4a2:	429a      	cmp	r2, r3
 801b4a4:	d026      	beq.n	801b4f4 <lv_draw_sw_polygon+0x528>

                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b4a8:	009b      	lsls	r3, r3, #2
 801b4aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4ac:	4413      	add	r3, r2
 801b4ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b4b4:	009b      	lsls	r3, r3, #2
 801b4b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4b8:	4413      	add	r3, r2
 801b4ba:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_right].x, p[i_next_right].y,
 801b4be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b4c0:	009b      	lsls	r3, r3, #2
 801b4c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4c4:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b4c6:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_right].x, p[i_next_right].y,
 801b4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b4cc:	009b      	lsls	r3, r3, #2
 801b4ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4d0:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b4d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b4d6:	2200      	movs	r2, #0
 801b4d8:	9201      	str	r2, [sp, #4]
 801b4da:	9300      	str	r3, [sp, #0]
 801b4dc:	4623      	mov	r3, r4
 801b4de:	4602      	mov	r2, r0
 801b4e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b4e2:	f7f6 fb69 	bl	8011bb8 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
 801b4e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b4e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b4ea:	f7f6 f9d7 	bl	801189c <lv_draw_mask_add>
                mp_next++;
 801b4ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b4f0:	332c      	adds	r3, #44	; 0x2c
 801b4f2:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801b4f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4f6:	3301      	adds	r3, #1
 801b4f8:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_right = i_next_right;
 801b4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b4fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

    } while(mask_cnt < point_cnt);
 801b4fe:	887b      	ldrh	r3, [r7, #2]
 801b500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b502:	429a      	cmp	r2, r3
 801b504:	f4ff af1b 	bcc.w	801b33e <lv_draw_sw_polygon+0x372>
 801b508:	e000      	b.n	801b50c <lv_draw_sw_polygon+0x540>
        if(mask_cnt == point_cnt) break;
 801b50a:	bf00      	nop

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 801b50c:	f107 031c 	add.w	r3, r7, #28
 801b510:	461a      	mov	r2, r3
 801b512:	68b9      	ldr	r1, [r7, #8]
 801b514:	68f8      	ldr	r0, [r7, #12]
 801b516:	f7f8 fdcd 	bl	80140b4 <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 801b51a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b51c:	f7f6 fa5c 	bl	80119d8 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 801b520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b522:	f006 fd55 	bl	8021fd0 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 801b526:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b528:	f006 fd52 	bl	8021fd0 <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b530:	609a      	str	r2, [r3, #8]
 801b532:	e004      	b.n	801b53e <lv_draw_sw_polygon+0x572>
    if(point_cnt < 3) return;
 801b534:	bf00      	nop
 801b536:	e002      	b.n	801b53e <lv_draw_sw_polygon+0x572>
    if(points == NULL) return;
 801b538:	bf00      	nop
 801b53a:	e000      	b.n	801b53e <lv_draw_sw_polygon+0x572>
    if(p == NULL) return;
 801b53c:	bf00      	nop
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801b53e:	3764      	adds	r7, #100	; 0x64
 801b540:	46bd      	mov	sp, r7
 801b542:	bd90      	pop	{r4, r7, pc}

0801b544 <lv_area_copy>:
{
 801b544:	b480      	push	{r7}
 801b546:	b083      	sub	sp, #12
 801b548:	af00      	add	r7, sp, #0
 801b54a:	6078      	str	r0, [r7, #4]
 801b54c:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801b54e:	683b      	ldr	r3, [r7, #0]
 801b550:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 801b558:	683b      	ldr	r3, [r7, #0]
 801b55a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801b562:	683b      	ldr	r3, [r7, #0]
 801b564:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801b56c:	683b      	ldr	r3, [r7, #0]
 801b56e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	80da      	strh	r2, [r3, #6]
}
 801b576:	bf00      	nop
 801b578:	370c      	adds	r7, #12
 801b57a:	46bd      	mov	sp, r7
 801b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b580:	4770      	bx	lr

0801b582 <lv_area_get_width>:
{
 801b582:	b480      	push	{r7}
 801b584:	b083      	sub	sp, #12
 801b586:	af00      	add	r7, sp, #0
 801b588:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b590:	b29a      	uxth	r2, r3
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b598:	b29b      	uxth	r3, r3
 801b59a:	1ad3      	subs	r3, r2, r3
 801b59c:	b29b      	uxth	r3, r3
 801b59e:	3301      	adds	r3, #1
 801b5a0:	b29b      	uxth	r3, r3
 801b5a2:	b21b      	sxth	r3, r3
}
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	370c      	adds	r7, #12
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ae:	4770      	bx	lr

0801b5b0 <lv_area_get_height>:
{
 801b5b0:	b480      	push	{r7}
 801b5b2:	b083      	sub	sp, #12
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b5be:	b29a      	uxth	r2, r3
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b5c6:	b29b      	uxth	r3, r3
 801b5c8:	1ad3      	subs	r3, r2, r3
 801b5ca:	b29b      	uxth	r3, r3
 801b5cc:	3301      	adds	r3, #1
 801b5ce:	b29b      	uxth	r3, r3
 801b5d0:	b21b      	sxth	r3, r3
}
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	370c      	adds	r7, #12
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5dc:	4770      	bx	lr

0801b5de <lv_draw_sw_rect>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b5de:	b580      	push	{r7, lr}
 801b5e0:	b084      	sub	sp, #16
 801b5e2:	af00      	add	r7, sp, #0
 801b5e4:	60f8      	str	r0, [r7, #12]
 801b5e6:	60b9      	str	r1, [r7, #8]
 801b5e8:	607a      	str	r2, [r7, #4]
#if LV_DRAW_COMPLEX
    draw_shadow(draw_ctx, dsc, coords);
 801b5ea:	687a      	ldr	r2, [r7, #4]
 801b5ec:	68b9      	ldr	r1, [r7, #8]
 801b5ee:	68f8      	ldr	r0, [r7, #12]
 801b5f0:	f000 fdd1 	bl	801c196 <draw_shadow>
#endif

    draw_bg(draw_ctx, dsc, coords);
 801b5f4:	687a      	ldr	r2, [r7, #4]
 801b5f6:	68b9      	ldr	r1, [r7, #8]
 801b5f8:	68f8      	ldr	r0, [r7, #12]
 801b5fa:	f000 f827 	bl	801b64c <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801b5fe:	687a      	ldr	r2, [r7, #4]
 801b600:	68b9      	ldr	r1, [r7, #8]
 801b602:	68f8      	ldr	r0, [r7, #12]
 801b604:	f000 fb1b 	bl	801bc3e <draw_bg_img>

    draw_border(draw_ctx, dsc, coords);
 801b608:	687a      	ldr	r2, [r7, #4]
 801b60a:	68b9      	ldr	r1, [r7, #8]
 801b60c:	68f8      	ldr	r0, [r7, #12]
 801b60e:	f000 fcd2 	bl	801bfb6 <draw_border>

    draw_outline(draw_ctx, dsc, coords);
 801b612:	687a      	ldr	r2, [r7, #4]
 801b614:	68b9      	ldr	r1, [r7, #8]
 801b616:	68f8      	ldr	r0, [r7, #12]
 801b618:	f002 fb61 	bl	801dcde <draw_outline>

    LV_ASSERT_MEM_INTEGRITY();
}
 801b61c:	bf00      	nop
 801b61e:	3710      	adds	r7, #16
 801b620:	46bd      	mov	sp, r7
 801b622:	bd80      	pop	{r7, pc}

0801b624 <lv_draw_sw_bg>:

void lv_draw_sw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b624:	b580      	push	{r7, lr}
 801b626:	b084      	sub	sp, #16
 801b628:	af00      	add	r7, sp, #0
 801b62a:	60f8      	str	r0, [r7, #12]
 801b62c:	60b9      	str	r1, [r7, #8]
 801b62e:	607a      	str	r2, [r7, #4]
#if LV_COLOR_SCREEN_TRANSP && LV_COLOR_DEPTH == 32
    lv_memset_00(draw_ctx->buf, lv_area_get_size(draw_ctx->buf_area) * sizeof(lv_color_t));
#endif

    draw_bg(draw_ctx, dsc, coords);
 801b630:	687a      	ldr	r2, [r7, #4]
 801b632:	68b9      	ldr	r1, [r7, #8]
 801b634:	68f8      	ldr	r0, [r7, #12]
 801b636:	f000 f809 	bl	801b64c <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801b63a:	687a      	ldr	r2, [r7, #4]
 801b63c:	68b9      	ldr	r1, [r7, #8]
 801b63e:	68f8      	ldr	r0, [r7, #12]
 801b640:	f000 fafd 	bl	801bc3e <draw_bg_img>
}
 801b644:	bf00      	nop
 801b646:	3710      	adds	r7, #16
 801b648:	46bd      	mov	sp, r7
 801b64a:	bd80      	pop	{r7, pc}

0801b64c <draw_bg>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void draw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b64c:	b580      	push	{r7, lr}
 801b64e:	b0a6      	sub	sp, #152	; 0x98
 801b650:	af00      	add	r7, sp, #0
 801b652:	60f8      	str	r0, [r7, #12]
 801b654:	60b9      	str	r1, [r7, #8]
 801b656:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801b658:	68bb      	ldr	r3, [r7, #8]
 801b65a:	78db      	ldrb	r3, [r3, #3]
 801b65c:	2b02      	cmp	r3, #2
 801b65e:	f240 82e8 	bls.w	801bc32 <draw_bg+0x5e6>

    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 801b662:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b666:	6879      	ldr	r1, [r7, #4]
 801b668:	4618      	mov	r0, r3
 801b66a:	f7ff ff6b 	bl	801b544 <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801b674:	2b01      	cmp	r3, #1
 801b676:	dd4f      	ble.n	801b718 <draw_bg+0xcc>
 801b678:	68bb      	ldr	r3, [r7, #8]
 801b67a:	7f1b      	ldrb	r3, [r3, #28]
 801b67c:	2bfc      	cmp	r3, #252	; 0xfc
 801b67e:	d94b      	bls.n	801b718 <draw_bg+0xcc>
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d046      	beq.n	801b718 <draw_bg+0xcc>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 801b68a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801b68e:	b29a      	uxth	r2, r3
 801b690:	68bb      	ldr	r3, [r7, #8]
 801b692:	7f5b      	ldrb	r3, [r3, #29]
 801b694:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b698:	b2db      	uxtb	r3, r3
 801b69a:	109b      	asrs	r3, r3, #2
 801b69c:	b29b      	uxth	r3, r3
 801b69e:	f003 0301 	and.w	r3, r3, #1
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	4413      	add	r3, r2
 801b6a6:	b29b      	uxth	r3, r3
 801b6a8:	b21b      	sxth	r3, r3
 801b6aa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 801b6ae:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801b6b2:	b29a      	uxth	r2, r3
 801b6b4:	68bb      	ldr	r3, [r7, #8]
 801b6b6:	7f5b      	ldrb	r3, [r3, #29]
 801b6b8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b6bc:	b2db      	uxtb	r3, r3
 801b6be:	105b      	asrs	r3, r3, #1
 801b6c0:	b29b      	uxth	r3, r3
 801b6c2:	f003 0301 	and.w	r3, r3, #1
 801b6c6:	b29b      	uxth	r3, r3
 801b6c8:	4413      	add	r3, r2
 801b6ca:	b29b      	uxth	r3, r3
 801b6cc:	b21b      	sxth	r3, r3
 801b6ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 801b6d2:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801b6d6:	b29a      	uxth	r2, r3
 801b6d8:	68bb      	ldr	r3, [r7, #8]
 801b6da:	7f5b      	ldrb	r3, [r3, #29]
 801b6dc:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b6e0:	b2db      	uxtb	r3, r3
 801b6e2:	10db      	asrs	r3, r3, #3
 801b6e4:	b29b      	uxth	r3, r3
 801b6e6:	f003 0301 	and.w	r3, r3, #1
 801b6ea:	b29b      	uxth	r3, r3
 801b6ec:	1ad3      	subs	r3, r2, r3
 801b6ee:	b29b      	uxth	r3, r3
 801b6f0:	b21b      	sxth	r3, r3
 801b6f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 801b6f6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801b6fa:	b29a      	uxth	r2, r3
 801b6fc:	68bb      	ldr	r3, [r7, #8]
 801b6fe:	7f5b      	ldrb	r3, [r3, #29]
 801b700:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b704:	b2db      	uxtb	r3, r3
 801b706:	b29b      	uxth	r3, r3
 801b708:	f003 0301 	and.w	r3, r3, #1
 801b70c:	b29b      	uxth	r3, r3
 801b70e:	1ad3      	subs	r3, r2, r3
 801b710:	b29b      	uxth	r3, r3
 801b712:	b21b      	sxth	r3, r3
 801b714:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    }

    lv_area_t clipped_coords;
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	689a      	ldr	r2, [r3, #8]
 801b71c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801b720:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b724:	4618      	mov	r0, r3
 801b726:	f004 fffd 	bl	8020724 <_lv_area_intersect>
 801b72a:	4603      	mov	r3, r0
 801b72c:	f083 0301 	eor.w	r3, r3, #1
 801b730:	b2db      	uxtb	r3, r3
 801b732:	2b00      	cmp	r3, #0
 801b734:	f040 827f 	bne.w	801bc36 <draw_bg+0x5ea>

    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	7a9b      	ldrb	r3, [r3, #10]
 801b73c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801b740:	b2db      	uxtb	r3, r3
 801b742:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 801b746:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d104      	bne.n	801b758 <draw_bg+0x10c>
 801b74e:	68bb      	ldr	r3, [r7, #8]
 801b750:	791b      	ldrb	r3, [r3, #4]
 801b752:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b756:	e003      	b.n	801b760 <draw_bg+0x114>
 801b758:	68bb      	ldr	r3, [r7, #8]
 801b75a:	795b      	ldrb	r3, [r3, #5]
 801b75c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 801b760:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801b764:	68bb      	ldr	r3, [r7, #8]
 801b766:	79db      	ldrb	r3, [r3, #7]
 801b768:	429a      	cmp	r2, r3
 801b76a:	d102      	bne.n	801b772 <draw_bg+0x126>
 801b76c:	2300      	movs	r3, #0
 801b76e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 801b772:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b776:	4618      	mov	r0, r3
 801b778:	f7f6 f9c0 	bl	8011afc <lv_draw_mask_is_any>
 801b77c:	4603      	mov	r3, r0
 801b77e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 801b782:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b786:	2200      	movs	r2, #0
 801b788:	601a      	str	r2, [r3, #0]
 801b78a:	605a      	str	r2, [r3, #4]
 801b78c:	609a      	str	r2, [r3, #8]
 801b78e:	60da      	str	r2, [r3, #12]
 801b790:	611a      	str	r2, [r3, #16]
 801b792:	615a      	str	r2, [r3, #20]
 801b794:	619a      	str	r2, [r3, #24]
    blend_dsc.blend_mode = dsc->blend_mode;
 801b796:	68bb      	ldr	r3, [r7, #8]
 801b798:	789b      	ldrb	r3, [r3, #2]
 801b79a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    blend_dsc.color = bg_color;
 801b79e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b7a2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    /*Most simple case: just a plain rectangle*/
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 801b7a6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801b7aa:	f083 0301 	eor.w	r3, r3, #1
 801b7ae:	b2db      	uxtb	r3, r3
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d016      	beq.n	801b7e2 <draw_bg+0x196>
 801b7b4:	68bb      	ldr	r3, [r7, #8]
 801b7b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d111      	bne.n	801b7e2 <draw_bg+0x196>
 801b7be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d10d      	bne.n	801b7e2 <draw_bg+0x196>
        blend_dsc.blend_area = &bg_coords;
 801b7c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b7ca:	63bb      	str	r3, [r7, #56]	; 0x38
        blend_dsc.opa = dsc->bg_opa;
 801b7cc:	68bb      	ldr	r3, [r7, #8]
 801b7ce:	78db      	ldrb	r3, [r3, #3]
 801b7d0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b7d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b7d8:	4619      	mov	r1, r3
 801b7da:	68f8      	ldr	r0, [r7, #12]
 801b7dc:	f7fb fc5e 	bl	801709c <lv_draw_sw_blend>
        return;
 801b7e0:	e22a      	b.n	801bc38 <draw_bg+0x5ec>

    /*Complex case: there is gradient, mask, or radius*/
#if LV_DRAW_COMPLEX == 0
    LV_LOG_WARN("Can't draw complex rectangle because LV_DRAW_COMPLEX = 0");
#else
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 801b7e2:	68bb      	ldr	r3, [r7, #8]
 801b7e4:	78db      	ldrb	r3, [r3, #3]
 801b7e6:	2bfc      	cmp	r3, #252	; 0xfc
 801b7e8:	d802      	bhi.n	801b7f0 <draw_bg+0x1a4>
 801b7ea:	68bb      	ldr	r3, [r7, #8]
 801b7ec:	78db      	ldrb	r3, [r3, #3]
 801b7ee:	e000      	b.n	801b7f2 <draw_bg+0x1a6>
 801b7f0:	23ff      	movs	r3, #255	; 0xff
 801b7f2:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius. Can't be larger than the half of the shortest side */
    lv_coord_t coords_bg_w = lv_area_get_width(&bg_coords);
 801b7f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7ff fec1 	bl	801b582 <lv_area_get_width>
 801b800:	4603      	mov	r3, r0
 801b802:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    lv_coord_t coords_bg_h = lv_area_get_height(&bg_coords);
 801b806:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b80a:	4618      	mov	r0, r3
 801b80c:	f7ff fed0 	bl	801b5b0 <lv_area_get_height>
 801b810:	4603      	mov	r3, r0
 801b812:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 801b816:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801b81a:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801b81e:	4293      	cmp	r3, r2
 801b820:	bfa8      	it	ge
 801b822:	4613      	movge	r3, r2
 801b824:	b21b      	sxth	r3, r3
 801b826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 801b82a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b82e:	105b      	asrs	r3, r3, #1
 801b830:	68ba      	ldr	r2, [r7, #8]
 801b832:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b836:	4293      	cmp	r3, r2
 801b838:	bfa8      	it	ge
 801b83a:	4613      	movge	r3, r2
 801b83c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /*Add a radius mask if there is radius*/
    int32_t clipped_w = lv_area_get_width(&clipped_coords);
 801b83e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b842:	4618      	mov	r0, r3
 801b844:	f7ff fe9d 	bl	801b582 <lv_area_get_width>
 801b848:	4603      	mov	r3, r0
 801b84a:	67bb      	str	r3, [r7, #120]	; 0x78
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801b84c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b850:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    lv_opa_t * mask_buf = NULL;
 801b854:	2300      	movs	r3, #0
 801b856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0 || mask_any) {
 801b85a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	dc03      	bgt.n	801b868 <draw_bg+0x21c>
 801b860:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801b864:	2b00      	cmp	r3, #0
 801b866:	d017      	beq.n	801b898 <draw_bg+0x24c>
        mask_buf = lv_mem_buf_get(clipped_w);
 801b868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b86a:	4618      	mov	r0, r3
 801b86c:	f006 fb04 	bl	8021e78 <lv_mem_buf_get>
 801b870:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 801b874:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b876:	b21a      	sxth	r2, r3
 801b878:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801b87c:	f107 0020 	add.w	r0, r7, #32
 801b880:	2300      	movs	r3, #0
 801b882:	f7f6 fbd7 	bl	8012034 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801b886:	f107 0320 	add.w	r3, r7, #32
 801b88a:	2100      	movs	r1, #0
 801b88c:	4618      	mov	r0, r3
 801b88e:	f7f6 f805 	bl	801189c <lv_draw_mask_add>
 801b892:	4603      	mov	r3, r0
 801b894:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    }

    int32_t h;

    lv_area_t blend_area;
    blend_area.x1 = clipped_coords.x1;
 801b898:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b89c:	833b      	strh	r3, [r7, #24]
    blend_area.x2 = clipped_coords.x2;
 801b89e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801b8a2:	83bb      	strh	r3, [r7, #28]

    blend_dsc.mask_buf = mask_buf;
 801b8a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b8a8:	647b      	str	r3, [r7, #68]	; 0x44
    blend_dsc.blend_area = &blend_area;
 801b8aa:	f107 0318 	add.w	r3, r7, #24
 801b8ae:	63bb      	str	r3, [r7, #56]	; 0x38
    blend_dsc.mask_area = &blend_area;
 801b8b0:	f107 0318 	add.w	r3, r7, #24
 801b8b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    blend_dsc.opa = LV_OPA_COVER;
 801b8b6:	23ff      	movs	r3, #255	; 0xff
 801b8b8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50


    /*Get gradient if appropriate*/
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 801b8bc:	68bb      	ldr	r3, [r7, #8]
 801b8be:	3305      	adds	r3, #5
 801b8c0:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801b8c4:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7fc fff7 	bl	80188bc <lv_gradient_get>
 801b8ce:	6778      	str	r0, [r7, #116]	; 0x74
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 801b8d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d00d      	beq.n	801b8f2 <draw_bg+0x2a6>
 801b8d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b8da:	2b02      	cmp	r3, #2
 801b8dc:	d109      	bne.n	801b8f2 <draw_bg+0x2a6>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 801b8de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b8e0:	689a      	ldr	r2, [r3, #8]
 801b8e2:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b8e6:	4619      	mov	r1, r3
 801b8e8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801b8ec:	1acb      	subs	r3, r1, r3
 801b8ee:	4413      	add	r3, r2
 801b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
#endif
#endif

    /*There is another mask too. Draw line by line. */
    if(mask_any) {
 801b8f2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d04c      	beq.n	801b994 <draw_bg+0x348>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801b8fa:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801b8fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b902:	e03f      	b.n	801b984 <draw_bg+0x338>
            blend_area.y1 = h;
 801b904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b908:	b21b      	sxth	r3, r3
 801b90a:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801b90c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b910:	b21b      	sxth	r3, r3
 801b912:	83fb      	strh	r3, [r7, #30]

            /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
             * It saves calculating the final opa in lv_draw_sw_blend*/
            lv_memset(mask_buf, opa, clipped_w);
 801b914:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b916:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801b91a:	4619      	mov	r1, r3
 801b91c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b920:	f006 fdc6 	bl	80224b0 <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801b924:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801b928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b92c:	b21a      	sxth	r2, r3
 801b92e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b930:	b21b      	sxth	r3, r3
 801b932:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b936:	f7f5 ffe3 	bl	8011900 <lv_draw_mask_apply>
 801b93a:	4603      	mov	r3, r0
 801b93c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b940:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801b944:	2b01      	cmp	r3, #1
 801b946:	d102      	bne.n	801b94e <draw_bg+0x302>
 801b948:	2302      	movs	r3, #2
 801b94a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801b94e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b952:	2b01      	cmp	r3, #1
 801b954:	d10b      	bne.n	801b96e <draw_bg+0x322>
 801b956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b958:	689b      	ldr	r3, [r3, #8]
 801b95a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801b95e:	4611      	mov	r1, r2
 801b960:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801b964:	1a52      	subs	r2, r2, r1
 801b966:	4413      	add	r3, r2
 801b968:	781b      	ldrb	r3, [r3, #0]
 801b96a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b96e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b972:	4619      	mov	r1, r3
 801b974:	68f8      	ldr	r0, [r7, #12]
 801b976:	f7fb fb91 	bl	801709c <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801b97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b97e:	3301      	adds	r3, #1
 801b980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b984:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801b988:	461a      	mov	r2, r3
 801b98a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b98e:	4293      	cmp	r3, r2
 801b990:	ddb8      	ble.n	801b904 <draw_bg+0x2b8>
        }
        goto bg_clean_up;
 801b992:	e130      	b.n	801bbf6 <draw_bg+0x5aa>
    }


    /* Draw the top of the rectangle line by line and mirror it to the bottom. */
    for(h = 0; h < rout; h++) {
 801b994:	2300      	movs	r3, #0
 801b996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b99a:	e084      	b.n	801baa6 <draw_bg+0x45a>
        lv_coord_t top_y = bg_coords.y1 + h;
 801b99c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801b9a0:	b29a      	uxth	r2, r3
 801b9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b9a6:	b29b      	uxth	r3, r3
 801b9a8:	4413      	add	r3, r2
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t bottom_y = bg_coords.y2 - h;
 801b9b0:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801b9b4:	b29a      	uxth	r2, r3
 801b9b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b9ba:	b29b      	uxth	r3, r3
 801b9bc:	1ad3      	subs	r3, r2, r3
 801b9be:	b29b      	uxth	r3, r3
 801b9c0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801b9c4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801b9c8:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801b9cc:	429a      	cmp	r2, r3
 801b9ce:	da05      	bge.n	801b9dc <draw_bg+0x390>
 801b9d0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801b9d4:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801b9d8:	429a      	cmp	r2, r3
 801b9da:	dc5e      	bgt.n	801ba9a <draw_bg+0x44e>

        /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
         * It saves calculating the final opa in lv_draw_sw_blend*/
        lv_memset(mask_buf, opa, clipped_w);
 801b9dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b9de:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801b9e2:	4619      	mov	r1, r3
 801b9e4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b9e8:	f006 fd62 	bl	80224b0 <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 801b9ec:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801b9f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b9f2:	b21b      	sxth	r3, r3
 801b9f4:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801b9f8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b9fc:	f7f5 ff80 	bl	8011900 <lv_draw_mask_apply>
 801ba00:	4603      	mov	r3, r0
 801ba02:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ba06:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801ba0a:	2b01      	cmp	r3, #1
 801ba0c:	d102      	bne.n	801ba14 <draw_bg+0x3c8>
 801ba0e:	2302      	movs	r3, #2
 801ba10:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(top_y >= clipped_coords.y1) {
 801ba14:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801ba18:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	db1a      	blt.n	801ba56 <draw_bg+0x40a>
            blend_area.y1 = top_y;
 801ba20:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801ba24:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = top_y;
 801ba26:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801ba2a:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  top_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 801ba2c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ba30:	2b01      	cmp	r3, #1
 801ba32:	d10a      	bne.n	801ba4a <draw_bg+0x3fe>
 801ba34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba36:	689b      	ldr	r3, [r3, #8]
 801ba38:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801ba3c:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801ba40:	1a52      	subs	r2, r2, r1
 801ba42:	4413      	add	r3, r2
 801ba44:	781b      	ldrb	r3, [r3, #0]
 801ba46:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ba4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba4e:	4619      	mov	r1, r3
 801ba50:	68f8      	ldr	r0, [r7, #12]
 801ba52:	f7fb fb23 	bl	801709c <lv_draw_sw_blend>
        }

        if(bottom_y <= clipped_coords.y2) {
 801ba56:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ba5a:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801ba5e:	429a      	cmp	r2, r3
 801ba60:	dc1c      	bgt.n	801ba9c <draw_bg+0x450>
            blend_area.y1 = bottom_y;
 801ba62:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801ba66:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = bottom_y;
 801ba68:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801ba6c:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  bottom_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 801ba6e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ba72:	2b01      	cmp	r3, #1
 801ba74:	d10a      	bne.n	801ba8c <draw_bg+0x440>
 801ba76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba78:	689b      	ldr	r3, [r3, #8]
 801ba7a:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801ba7e:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801ba82:	1a52      	subs	r2, r2, r1
 801ba84:	4413      	add	r3, r2
 801ba86:	781b      	ldrb	r3, [r3, #0]
 801ba88:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ba8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba90:	4619      	mov	r1, r3
 801ba92:	68f8      	ldr	r0, [r7, #12]
 801ba94:	f7fb fb02 	bl	801709c <lv_draw_sw_blend>
 801ba98:	e000      	b.n	801ba9c <draw_bg+0x450>
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801ba9a:	bf00      	nop
    for(h = 0; h < rout; h++) {
 801ba9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801baa0:	3301      	adds	r3, #1
 801baa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801baa6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801baaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801baac:	429a      	cmp	r2, r3
 801baae:	f6ff af75 	blt.w	801b99c <draw_bg+0x350>

    /* Draw the center of the rectangle.*/

    /*If no other masks and no gradient, the center is a simple rectangle*/
    lv_area_t center_coords;
    center_coords.x1 = bg_coords.x1;
 801bab2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801bab6:	823b      	strh	r3, [r7, #16]
    center_coords.x2 = bg_coords.x2;
 801bab8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801babc:	82bb      	strh	r3, [r7, #20]
    center_coords.y1 = bg_coords.y1 + rout;
 801babe:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801bac2:	b29a      	uxth	r2, r3
 801bac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bac6:	b29b      	uxth	r3, r3
 801bac8:	4413      	add	r3, r2
 801baca:	b29b      	uxth	r3, r3
 801bacc:	b21b      	sxth	r3, r3
 801bace:	827b      	strh	r3, [r7, #18]
    center_coords.y2 = bg_coords.y2 - rout;
 801bad0:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bad4:	b29a      	uxth	r2, r3
 801bad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bad8:	b29b      	uxth	r3, r3
 801bada:	1ad3      	subs	r3, r2, r3
 801badc:	b29b      	uxth	r3, r3
 801bade:	b21b      	sxth	r3, r3
 801bae0:	82fb      	strh	r3, [r7, #22]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 801bae2:	f107 0310 	add.w	r3, r7, #16
 801bae6:	4618      	mov	r0, r3
 801bae8:	f7f6 f808 	bl	8011afc <lv_draw_mask_is_any>
 801baec:	4603      	mov	r3, r0
 801baee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 801baf2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801baf6:	f083 0301 	eor.w	r3, r3, #1
 801bafa:	b2db      	uxtb	r3, r3
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d022      	beq.n	801bb46 <draw_bg+0x4fa>
 801bb00:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d11e      	bne.n	801bb46 <draw_bg+0x4fa>
        blend_area.y1 = bg_coords.y1 + rout;
 801bb08:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801bb0c:	b29a      	uxth	r2, r3
 801bb0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bb10:	b29b      	uxth	r3, r3
 801bb12:	4413      	add	r3, r2
 801bb14:	b29b      	uxth	r3, r3
 801bb16:	b21b      	sxth	r3, r3
 801bb18:	837b      	strh	r3, [r7, #26]
        blend_area.y2 = bg_coords.y2 - rout;
 801bb1a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bb1e:	b29a      	uxth	r2, r3
 801bb20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bb22:	b29b      	uxth	r3, r3
 801bb24:	1ad3      	subs	r3, r2, r3
 801bb26:	b29b      	uxth	r3, r3
 801bb28:	b21b      	sxth	r3, r3
 801bb2a:	83fb      	strh	r3, [r7, #30]
        blend_dsc.opa = opa;
 801bb2c:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bb30:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_buf = NULL;
 801bb34:	2300      	movs	r3, #0
 801bb36:	647b      	str	r3, [r7, #68]	; 0x44
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bb38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb3c:	4619      	mov	r1, r3
 801bb3e:	68f8      	ldr	r0, [r7, #12]
 801bb40:	f7fb faac 	bl	801709c <lv_draw_sw_blend>
 801bb44:	e057      	b.n	801bbf6 <draw_bg+0x5aa>
    }
    /*With gradient and/or mask draw line by line*/
    else {
        blend_dsc.opa = opa;
 801bb46:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bb4a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801bb4e:	2301      	movs	r3, #1
 801bb50:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        int32_t h_end = bg_coords.y2 - rout;
 801bb54:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bb58:	461a      	mov	r2, r3
 801bb5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bb5c:	1ad3      	subs	r3, r2, r3
 801bb5e:	66fb      	str	r3, [r7, #108]	; 0x6c
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801bb60:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801bb64:	461a      	mov	r2, r3
 801bb66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bb68:	4413      	add	r3, r2
 801bb6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bb6e:	e03c      	b.n	801bbea <draw_bg+0x59e>
            /*If there is no other mask do not apply mask as in the center there is no radius to mask*/
            if(mask_any_center) {
 801bb70:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d015      	beq.n	801bba4 <draw_bg+0x558>
                lv_memset(mask_buf, opa, clipped_w);
 801bb78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bb7a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bb7e:	4619      	mov	r1, r3
 801bb80:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bb84:	f006 fc94 	bl	80224b0 <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801bb88:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801bb8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb90:	b21a      	sxth	r2, r3
 801bb92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bb94:	b21b      	sxth	r3, r3
 801bb96:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bb9a:	f7f5 feb1 	bl	8011900 <lv_draw_mask_apply>
 801bb9e:	4603      	mov	r3, r0
 801bba0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            blend_area.y1 = h;
 801bba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bba8:	b21b      	sxth	r3, r3
 801bbaa:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801bbac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bbb0:	b21b      	sxth	r3, r3
 801bbb2:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801bbb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bbb8:	2b01      	cmp	r3, #1
 801bbba:	d10b      	bne.n	801bbd4 <draw_bg+0x588>
 801bbbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bbbe:	689b      	ldr	r3, [r3, #8]
 801bbc0:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801bbc4:	4611      	mov	r1, r2
 801bbc6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801bbca:	1a52      	subs	r2, r2, r1
 801bbcc:	4413      	add	r3, r2
 801bbce:	781b      	ldrb	r3, [r3, #0]
 801bbd0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bbd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bbd8:	4619      	mov	r1, r3
 801bbda:	68f8      	ldr	r0, [r7, #12]
 801bbdc:	f7fb fa5e 	bl	801709c <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801bbe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bbe4:	3301      	adds	r3, #1
 801bbe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bbea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801bbee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bbf0:	429a      	cmp	r2, r3
 801bbf2:	ddbd      	ble.n	801bb70 <draw_bg+0x524>
        }
    }


bg_clean_up:
 801bbf4:	bf00      	nop
    if(mask_buf) lv_mem_buf_release(mask_buf);
 801bbf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d003      	beq.n	801bc06 <draw_bg+0x5ba>
 801bbfe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bc02:	f006 f9e5 	bl	8021fd0 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 801bc06:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bc0e:	d009      	beq.n	801bc24 <draw_bg+0x5d8>
        lv_draw_mask_remove_id(mask_rout_id);
 801bc10:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801bc14:	4618      	mov	r0, r3
 801bc16:	f7f5 feb7 	bl	8011988 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 801bc1a:	f107 0320 	add.w	r3, r7, #32
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f7f5 ff02 	bl	8011a28 <lv_draw_mask_free_param>
    }
    if(grad) {
 801bc24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d006      	beq.n	801bc38 <draw_bg+0x5ec>
        lv_gradient_cleanup(grad);
 801bc2a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801bc2c:	f7fc ffb4 	bl	8018b98 <lv_gradient_cleanup>
 801bc30:	e002      	b.n	801bc38 <draw_bg+0x5ec>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801bc32:	bf00      	nop
 801bc34:	e000      	b.n	801bc38 <draw_bg+0x5ec>
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801bc36:	bf00      	nop
    }

#endif
}
 801bc38:	3798      	adds	r7, #152	; 0x98
 801bc3a:	46bd      	mov	sp, r7
 801bc3c:	bd80      	pop	{r7, pc}

0801bc3e <draw_bg_img>:

static void draw_bg_img(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801bc3e:	b590      	push	{r4, r7, lr}
 801bc40:	b0a3      	sub	sp, #140	; 0x8c
 801bc42:	af04      	add	r7, sp, #16
 801bc44:	60f8      	str	r0, [r7, #12]
 801bc46:	60b9      	str	r1, [r7, #8]
 801bc48:	607a      	str	r2, [r7, #4]
    if(dsc->bg_img_src == NULL) return;
 801bc4a:	68bb      	ldr	r3, [r7, #8]
 801bc4c:	68db      	ldr	r3, [r3, #12]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	f000 81a9 	beq.w	801bfa6 <draw_bg_img+0x368>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801bc54:	68bb      	ldr	r3, [r7, #8]
 801bc56:	7d5b      	ldrb	r3, [r3, #21]
 801bc58:	2b02      	cmp	r3, #2
 801bc5a:	f240 81a6 	bls.w	801bfaa <draw_bg_img+0x36c>

    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	689a      	ldr	r2, [r3, #8]
 801bc62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bc66:	6879      	ldr	r1, [r7, #4]
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f004 fd5b 	bl	8020724 <_lv_area_intersect>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	f083 0301 	eor.w	r3, r3, #1
 801bc74:	b2db      	uxtb	r3, r3
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	f040 8199 	bne.w	801bfae <draw_bg_img+0x370>
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	689b      	ldr	r3, [r3, #8]
 801bc80:	677b      	str	r3, [r7, #116]	; 0x74
    draw_ctx->clip_area = &clip_area;
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801bc88:	609a      	str	r2, [r3, #8]

    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 801bc8a:	68bb      	ldr	r3, [r7, #8]
 801bc8c:	68db      	ldr	r3, [r3, #12]
 801bc8e:	4618      	mov	r0, r3
 801bc90:	f7f4 fb5f 	bl	8010352 <lv_img_src_get_type>
 801bc94:	4603      	mov	r3, r0
 801bc96:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(src_type == LV_IMG_SRC_SYMBOL) {
 801bc9a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801bc9e:	2b02      	cmp	r3, #2
 801bca0:	d17f      	bne.n	801bda2 <draw_bg_img+0x164>
        lv_point_t size;
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bca2:	68bb      	ldr	r3, [r7, #8]
 801bca4:	68d9      	ldr	r1, [r3, #12]
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	691a      	ldr	r2, [r3, #16]
 801bcaa:	f107 0064 	add.w	r0, r7, #100	; 0x64
 801bcae:	2300      	movs	r3, #0
 801bcb0:	9302      	str	r3, [sp, #8]
 801bcb2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801bcb6:	9301      	str	r3, [sp, #4]
 801bcb8:	2300      	movs	r3, #0
 801bcba:	9300      	str	r3, [sp, #0]
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	f008 fad3 	bl	8024268 <lv_txt_get_size>
        lv_area_t a;
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bcc8:	b29c      	uxth	r4, r3
 801bcca:	6878      	ldr	r0, [r7, #4]
 801bccc:	f7ff fc59 	bl	801b582 <lv_area_get_width>
 801bcd0:	4603      	mov	r3, r0
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	da00      	bge.n	801bcd8 <draw_bg_img+0x9a>
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	105b      	asrs	r3, r3, #1
 801bcda:	b21b      	sxth	r3, r3
 801bcdc:	b29b      	uxth	r3, r3
 801bcde:	4423      	add	r3, r4
 801bce0:	b29a      	uxth	r2, r3
 801bce2:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	da00      	bge.n	801bcec <draw_bg_img+0xae>
 801bcea:	3301      	adds	r3, #1
 801bcec:	105b      	asrs	r3, r3, #1
 801bcee:	b21b      	sxth	r3, r3
 801bcf0:	b29b      	uxth	r3, r3
 801bcf2:	1ad3      	subs	r3, r2, r3
 801bcf4:	b29b      	uxth	r3, r3
 801bcf6:	b21b      	sxth	r3, r3
 801bcf8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        a.x2 = a.x1 + size.x - 1;
 801bcfc:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801bd00:	b29a      	uxth	r2, r3
 801bd02:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801bd06:	b29b      	uxth	r3, r3
 801bd08:	4413      	add	r3, r2
 801bd0a:	b29b      	uxth	r3, r3
 801bd0c:	3b01      	subs	r3, #1
 801bd0e:	b29b      	uxth	r3, r3
 801bd10:	b21b      	sxth	r3, r3
 801bd12:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bd1c:	b29c      	uxth	r4, r3
 801bd1e:	6878      	ldr	r0, [r7, #4]
 801bd20:	f7ff fc46 	bl	801b5b0 <lv_area_get_height>
 801bd24:	4603      	mov	r3, r0
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	da00      	bge.n	801bd2c <draw_bg_img+0xee>
 801bd2a:	3301      	adds	r3, #1
 801bd2c:	105b      	asrs	r3, r3, #1
 801bd2e:	b21b      	sxth	r3, r3
 801bd30:	b29b      	uxth	r3, r3
 801bd32:	4423      	add	r3, r4
 801bd34:	b29a      	uxth	r2, r3
 801bd36:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	da00      	bge.n	801bd40 <draw_bg_img+0x102>
 801bd3e:	3301      	adds	r3, #1
 801bd40:	105b      	asrs	r3, r3, #1
 801bd42:	b21b      	sxth	r3, r3
 801bd44:	b29b      	uxth	r3, r3
 801bd46:	1ad3      	subs	r3, r2, r3
 801bd48:	b29b      	uxth	r3, r3
 801bd4a:	b21b      	sxth	r3, r3
 801bd4c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        a.y2 = a.y1 + size.y - 1;
 801bd50:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801bd54:	b29a      	uxth	r2, r3
 801bd56:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bd5a:	b29b      	uxth	r3, r3
 801bd5c:	4413      	add	r3, r2
 801bd5e:	b29b      	uxth	r3, r3
 801bd60:	3b01      	subs	r3, #1
 801bd62:	b29b      	uxth	r3, r3
 801bd64:	b21b      	sxth	r3, r3
 801bd66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        lv_draw_label_dsc_t label_draw_dsc;
        lv_draw_label_dsc_init(&label_draw_dsc);
 801bd6a:	f107 0314 	add.w	r3, r7, #20
 801bd6e:	4618      	mov	r0, r3
 801bd70:	f7f4 fd9e 	bl	80108b0 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 801bd74:	68bb      	ldr	r3, [r7, #8]
 801bd76:	691b      	ldr	r3, [r3, #16]
 801bd78:	617b      	str	r3, [r7, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 801bd7a:	68bb      	ldr	r3, [r7, #8]
 801bd7c:	7d1b      	ldrb	r3, [r3, #20]
 801bd7e:	f887 3020 	strb.w	r3, [r7, #32]
        label_draw_dsc.opa = dsc->bg_img_opa;
 801bd82:	68bb      	ldr	r3, [r7, #8]
 801bd84:	7d5b      	ldrb	r3, [r3, #21]
 801bd86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 801bd8a:	68bb      	ldr	r3, [r7, #8]
 801bd8c:	68db      	ldr	r3, [r3, #12]
 801bd8e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801bd92:	f107 0114 	add.w	r1, r7, #20
 801bd96:	2000      	movs	r0, #0
 801bd98:	9000      	str	r0, [sp, #0]
 801bd9a:	68f8      	ldr	r0, [r7, #12]
 801bd9c:	f7f4 fdb4 	bl	8010908 <lv_draw_label>
 801bda0:	e0fd      	b.n	801bf9e <draw_bg_img+0x360>
    }
    else {
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 801bda2:	68bb      	ldr	r3, [r7, #8]
 801bda4:	68db      	ldr	r3, [r3, #12]
 801bda6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801bdaa:	4611      	mov	r1, r2
 801bdac:	4618      	mov	r0, r3
 801bdae:	f7f8 fb49 	bl	8014444 <lv_img_decoder_get_info>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if(res == LV_RES_OK) {
 801bdb8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801bdbc:	2b01      	cmp	r3, #1
 801bdbe:	f040 80ee 	bne.w	801bf9e <draw_bg_img+0x360>
            lv_draw_img_dsc_t img_dsc;
            lv_draw_img_dsc_init(&img_dsc);
 801bdc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	f7f4 f9df 	bl	801018a <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 801bdcc:	68bb      	ldr	r3, [r7, #8]
 801bdce:	789b      	ldrb	r3, [r3, #2]
 801bdd0:	f003 030f 	and.w	r3, r3, #15
 801bdd4:	b2da      	uxtb	r2, r3
 801bdd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801bdda:	f362 0303 	bfi	r3, r2, #0, #4
 801bdde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            img_dsc.recolor = dsc->bg_img_recolor;
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	7d1b      	ldrb	r3, [r3, #20]
 801bde6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	7d9b      	ldrb	r3, [r3, #22]
 801bdee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            img_dsc.opa = dsc->bg_img_opa;
 801bdf2:	68bb      	ldr	r3, [r7, #8]
 801bdf4:	7d5b      	ldrb	r3, [r3, #21]
 801bdf6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

            /*Center align*/
            if(dsc->bg_img_tiled == false) {
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	7ddb      	ldrb	r3, [r3, #23]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d163      	bne.n	801beca <draw_bg_img+0x28c>
                lv_area_t area;
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be08:	b29c      	uxth	r4, r3
 801be0a:	6878      	ldr	r0, [r7, #4]
 801be0c:	f7ff fbb9 	bl	801b582 <lv_area_get_width>
 801be10:	4603      	mov	r3, r0
 801be12:	2b00      	cmp	r3, #0
 801be14:	da00      	bge.n	801be18 <draw_bg_img+0x1da>
 801be16:	3301      	adds	r3, #1
 801be18:	105b      	asrs	r3, r3, #1
 801be1a:	b21b      	sxth	r3, r3
 801be1c:	b29b      	uxth	r3, r3
 801be1e:	4423      	add	r3, r4
 801be20:	b29a      	uxth	r2, r3
 801be22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801be24:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801be28:	b29b      	uxth	r3, r3
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	da00      	bge.n	801be30 <draw_bg_img+0x1f2>
 801be2e:	3301      	adds	r3, #1
 801be30:	105b      	asrs	r3, r3, #1
 801be32:	425b      	negs	r3, r3
 801be34:	b29b      	uxth	r3, r3
 801be36:	4413      	add	r3, r2
 801be38:	b29b      	uxth	r3, r3
 801be3a:	b21b      	sxth	r3, r3
 801be3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801be44:	b29c      	uxth	r4, r3
 801be46:	6878      	ldr	r0, [r7, #4]
 801be48:	f7ff fbb2 	bl	801b5b0 <lv_area_get_height>
 801be4c:	4603      	mov	r3, r0
 801be4e:	2b00      	cmp	r3, #0
 801be50:	da00      	bge.n	801be54 <draw_bg_img+0x216>
 801be52:	3301      	adds	r3, #1
 801be54:	105b      	asrs	r3, r3, #1
 801be56:	b21b      	sxth	r3, r3
 801be58:	b29b      	uxth	r3, r3
 801be5a:	4423      	add	r3, r4
 801be5c:	b29a      	uxth	r2, r3
 801be5e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801be62:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801be66:	b29b      	uxth	r3, r3
 801be68:	2b00      	cmp	r3, #0
 801be6a:	da00      	bge.n	801be6e <draw_bg_img+0x230>
 801be6c:	3301      	adds	r3, #1
 801be6e:	105b      	asrs	r3, r3, #1
 801be70:	425b      	negs	r3, r3
 801be72:	b29b      	uxth	r3, r3
 801be74:	4413      	add	r3, r2
 801be76:	b29b      	uxth	r3, r3
 801be78:	b21b      	sxth	r3, r3
 801be7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
                area.x2 = area.x1 + header.w - 1;
 801be7c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801be80:	b29b      	uxth	r3, r3
 801be82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801be84:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801be88:	b292      	uxth	r2, r2
 801be8a:	4413      	add	r3, r2
 801be8c:	b29b      	uxth	r3, r3
 801be8e:	3b01      	subs	r3, #1
 801be90:	b29b      	uxth	r3, r3
 801be92:	b21b      	sxth	r3, r3
 801be94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                area.y2 = area.y1 + header.h - 1;
 801be98:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801be9c:	b29b      	uxth	r3, r3
 801be9e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801bea2:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801bea6:	b292      	uxth	r2, r2
 801bea8:	4413      	add	r3, r2
 801beaa:	b29b      	uxth	r3, r3
 801beac:	3b01      	subs	r3, #1
 801beae:	b29b      	uxth	r3, r3
 801beb0:	b21b      	sxth	r3, r3
 801beb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801beb6:	68bb      	ldr	r3, [r7, #8]
 801beb8:	68db      	ldr	r3, [r3, #12]
 801beba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801bebe:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801bec2:	68f8      	ldr	r0, [r7, #12]
 801bec4:	f7f4 f97e 	bl	80101c4 <lv_draw_img>
 801bec8:	e069      	b.n	801bf9e <draw_bg_img+0x360>
            }
            else {
                lv_area_t area;
                area.y1 = coords->y1;
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bed0:	86fb      	strh	r3, [r7, #54]	; 0x36
                area.y2 = area.y1 + header.h - 1;
 801bed2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801bed6:	b29b      	uxth	r3, r3
 801bed8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801bedc:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801bee0:	b292      	uxth	r2, r2
 801bee2:	4413      	add	r3, r2
 801bee4:	b29b      	uxth	r3, r3
 801bee6:	3b01      	subs	r3, #1
 801bee8:	b29b      	uxth	r3, r3
 801beea:	b21b      	sxth	r3, r3
 801beec:	877b      	strh	r3, [r7, #58]	; 0x3a

                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801beee:	e04f      	b.n	801bf90 <draw_bg_img+0x352>

                    area.x1 = coords->x1;
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bef6:	86bb      	strh	r3, [r7, #52]	; 0x34
                    area.x2 = area.x1 + header.w - 1;
 801bef8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801befc:	b29b      	uxth	r3, r3
 801befe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bf00:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801bf04:	b292      	uxth	r2, r2
 801bf06:	4413      	add	r3, r2
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	3b01      	subs	r3, #1
 801bf0c:	b29b      	uxth	r3, r3
 801bf0e:	b21b      	sxth	r3, r3
 801bf10:	873b      	strh	r3, [r7, #56]	; 0x38
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801bf12:	e01e      	b.n	801bf52 <draw_bg_img+0x314>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801bf14:	68bb      	ldr	r3, [r7, #8]
 801bf16:	68db      	ldr	r3, [r3, #12]
 801bf18:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801bf1c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801bf20:	68f8      	ldr	r0, [r7, #12]
 801bf22:	f7f4 f94f 	bl	80101c4 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801bf26:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801bf2a:	b29b      	uxth	r3, r3
 801bf2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bf2e:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801bf32:	b292      	uxth	r2, r2
 801bf34:	4413      	add	r3, r2
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	b21b      	sxth	r3, r3
 801bf3a:	86bb      	strh	r3, [r7, #52]	; 0x34
 801bf3c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801bf40:	b29b      	uxth	r3, r3
 801bf42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bf44:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801bf48:	b292      	uxth	r2, r2
 801bf4a:	4413      	add	r3, r2
 801bf4c:	b29b      	uxth	r3, r3
 801bf4e:	b21b      	sxth	r3, r3
 801bf50:	873b      	strh	r3, [r7, #56]	; 0x38
 801bf52:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	ddd9      	ble.n	801bf14 <draw_bg_img+0x2d6>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801bf60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801bf64:	b29b      	uxth	r3, r3
 801bf66:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801bf6a:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801bf6e:	b292      	uxth	r2, r2
 801bf70:	4413      	add	r3, r2
 801bf72:	b29b      	uxth	r3, r3
 801bf74:	b21b      	sxth	r3, r3
 801bf76:	86fb      	strh	r3, [r7, #54]	; 0x36
 801bf78:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801bf7c:	b29b      	uxth	r3, r3
 801bf7e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801bf82:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801bf86:	b292      	uxth	r2, r2
 801bf88:	4413      	add	r3, r2
 801bf8a:	b29b      	uxth	r3, r3
 801bf8c:	b21b      	sxth	r3, r3
 801bf8e:	877b      	strh	r3, [r7, #58]	; 0x3a
 801bf90:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bf9a:	429a      	cmp	r2, r3
 801bf9c:	dda8      	ble.n	801bef0 <draw_bg_img+0x2b2>
        else {
            LV_LOG_WARN("Couldn't read the background image");
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801bfa2:	609a      	str	r2, [r3, #8]
 801bfa4:	e004      	b.n	801bfb0 <draw_bg_img+0x372>
    if(dsc->bg_img_src == NULL) return;
 801bfa6:	bf00      	nop
 801bfa8:	e002      	b.n	801bfb0 <draw_bg_img+0x372>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801bfaa:	bf00      	nop
 801bfac:	e000      	b.n	801bfb0 <draw_bg_img+0x372>
        return;
 801bfae:	bf00      	nop
}
 801bfb0:	377c      	adds	r7, #124	; 0x7c
 801bfb2:	46bd      	mov	sp, r7
 801bfb4:	bd90      	pop	{r4, r7, pc}

0801bfb6 <draw_border>:

static void draw_border(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801bfb6:	b580      	push	{r7, lr}
 801bfb8:	b090      	sub	sp, #64	; 0x40
 801bfba:	af04      	add	r7, sp, #16
 801bfbc:	60f8      	str	r0, [r7, #12]
 801bfbe:	60b9      	str	r1, [r7, #8]
 801bfc0:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801bfc2:	68bb      	ldr	r3, [r7, #8]
 801bfc4:	7f1b      	ldrb	r3, [r3, #28]
 801bfc6:	2b02      	cmp	r3, #2
 801bfc8:	f240 80db 	bls.w	801c182 <draw_border+0x1cc>
    if(dsc->border_width == 0) return;
 801bfcc:	68bb      	ldr	r3, [r7, #8]
 801bfce:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	f000 80d7 	beq.w	801c186 <draw_border+0x1d0>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801bfd8:	68bb      	ldr	r3, [r7, #8]
 801bfda:	7f5b      	ldrb	r3, [r3, #29]
 801bfdc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801bfe0:	b2db      	uxtb	r3, r3
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	f000 80d1 	beq.w	801c18a <draw_border+0x1d4>
    if(dsc->border_post) return;
 801bfe8:	68bb      	ldr	r3, [r7, #8]
 801bfea:	7f5b      	ldrb	r3, [r3, #29]
 801bfec:	f003 0301 	and.w	r3, r3, #1
 801bff0:	b2db      	uxtb	r3, r3
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	f040 80cb 	bne.w	801c18e <draw_border+0x1d8>

    int32_t coords_w = lv_area_get_width(coords);
 801bff8:	6878      	ldr	r0, [r7, #4]
 801bffa:	f7ff fac2 	bl	801b582 <lv_area_get_width>
 801bffe:	4603      	mov	r3, r0
 801c000:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t coords_h = lv_area_get_height(coords);
 801c002:	6878      	ldr	r0, [r7, #4]
 801c004:	f7ff fad4 	bl	801b5b0 <lv_area_get_height>
 801c008:	4603      	mov	r3, r0
 801c00a:	623b      	str	r3, [r7, #32]
    int32_t rout = dsc->radius;
 801c00c:	68bb      	ldr	r3, [r7, #8]
 801c00e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c012:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t short_side = LV_MIN(coords_w, coords_h);
 801c014:	6a3a      	ldr	r2, [r7, #32]
 801c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c018:	4293      	cmp	r3, r2
 801c01a:	bfa8      	it	ge
 801c01c:	4613      	movge	r3, r2
 801c01e:	61fb      	str	r3, [r7, #28]
    if(rout > short_side >> 1) rout = short_side >> 1;
 801c020:	69fb      	ldr	r3, [r7, #28]
 801c022:	105b      	asrs	r3, r3, #1
 801c024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c026:	429a      	cmp	r2, r3
 801c028:	dd02      	ble.n	801c030 <draw_border+0x7a>
 801c02a:	69fb      	ldr	r3, [r7, #28]
 801c02c:	105b      	asrs	r3, r3, #1
 801c02e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801c030:	f107 0314 	add.w	r3, r7, #20
 801c034:	6879      	ldr	r1, [r7, #4]
 801c036:	4618      	mov	r0, r3
 801c038:	f7ff fa84 	bl	801b544 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801c03c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c040:	b29a      	uxth	r2, r3
 801c042:	68bb      	ldr	r3, [r7, #8]
 801c044:	7f5b      	ldrb	r3, [r3, #29]
 801c046:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c04a:	b2db      	uxtb	r3, r3
 801c04c:	f003 0304 	and.w	r3, r3, #4
 801c050:	2b00      	cmp	r3, #0
 801c052:	d004      	beq.n	801c05e <draw_border+0xa8>
 801c054:	68bb      	ldr	r3, [r7, #8]
 801c056:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c05a:	b29b      	uxth	r3, r3
 801c05c:	e009      	b.n	801c072 <draw_border+0xbc>
 801c05e:	68bb      	ldr	r3, [r7, #8]
 801c060:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c064:	b299      	uxth	r1, r3
 801c066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c068:	b29b      	uxth	r3, r3
 801c06a:	440b      	add	r3, r1
 801c06c:	b29b      	uxth	r3, r3
 801c06e:	425b      	negs	r3, r3
 801c070:	b29b      	uxth	r3, r3
 801c072:	4413      	add	r3, r2
 801c074:	b29b      	uxth	r3, r3
 801c076:	b21b      	sxth	r3, r3
 801c078:	82bb      	strh	r3, [r7, #20]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 801c07a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801c07e:	b29a      	uxth	r2, r3
 801c080:	68bb      	ldr	r3, [r7, #8]
 801c082:	7f5b      	ldrb	r3, [r3, #29]
 801c084:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c088:	b2db      	uxtb	r3, r3
 801c08a:	f003 0308 	and.w	r3, r3, #8
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d004      	beq.n	801c09c <draw_border+0xe6>
 801c092:	68bb      	ldr	r3, [r7, #8]
 801c094:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c098:	b29b      	uxth	r3, r3
 801c09a:	e009      	b.n	801c0b0 <draw_border+0xfa>
 801c09c:	68bb      	ldr	r3, [r7, #8]
 801c09e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c0a2:	b299      	uxth	r1, r3
 801c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0a6:	b29b      	uxth	r3, r3
 801c0a8:	440b      	add	r3, r1
 801c0aa:	b29b      	uxth	r3, r3
 801c0ac:	425b      	negs	r3, r3
 801c0ae:	b29b      	uxth	r3, r3
 801c0b0:	1ad3      	subs	r3, r2, r3
 801c0b2:	b29b      	uxth	r3, r3
 801c0b4:	b21b      	sxth	r3, r3
 801c0b6:	833b      	strh	r3, [r7, #24]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 801c0b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c0bc:	b29a      	uxth	r2, r3
 801c0be:	68bb      	ldr	r3, [r7, #8]
 801c0c0:	7f5b      	ldrb	r3, [r3, #29]
 801c0c2:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c0c6:	b2db      	uxtb	r3, r3
 801c0c8:	f003 0302 	and.w	r3, r3, #2
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d004      	beq.n	801c0da <draw_border+0x124>
 801c0d0:	68bb      	ldr	r3, [r7, #8]
 801c0d2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c0d6:	b29b      	uxth	r3, r3
 801c0d8:	e009      	b.n	801c0ee <draw_border+0x138>
 801c0da:	68bb      	ldr	r3, [r7, #8]
 801c0dc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c0e0:	b299      	uxth	r1, r3
 801c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0e4:	b29b      	uxth	r3, r3
 801c0e6:	440b      	add	r3, r1
 801c0e8:	b29b      	uxth	r3, r3
 801c0ea:	425b      	negs	r3, r3
 801c0ec:	b29b      	uxth	r3, r3
 801c0ee:	4413      	add	r3, r2
 801c0f0:	b29b      	uxth	r3, r3
 801c0f2:	b21b      	sxth	r3, r3
 801c0f4:	82fb      	strh	r3, [r7, #22]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 801c0f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c0fa:	b29a      	uxth	r2, r3
 801c0fc:	68bb      	ldr	r3, [r7, #8]
 801c0fe:	7f5b      	ldrb	r3, [r3, #29]
 801c100:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c104:	b2db      	uxtb	r3, r3
 801c106:	f003 0301 	and.w	r3, r3, #1
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d004      	beq.n	801c118 <draw_border+0x162>
 801c10e:	68bb      	ldr	r3, [r7, #8]
 801c110:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c114:	b29b      	uxth	r3, r3
 801c116:	e009      	b.n	801c12c <draw_border+0x176>
 801c118:	68bb      	ldr	r3, [r7, #8]
 801c11a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c11e:	b299      	uxth	r1, r3
 801c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c122:	b29b      	uxth	r3, r3
 801c124:	440b      	add	r3, r1
 801c126:	b29b      	uxth	r3, r3
 801c128:	425b      	negs	r3, r3
 801c12a:	b29b      	uxth	r3, r3
 801c12c:	1ad3      	subs	r3, r2, r3
 801c12e:	b29b      	uxth	r3, r3
 801c130:	b21b      	sxth	r3, r3
 801c132:	837b      	strh	r3, [r7, #26]

    lv_coord_t rin = rout - dsc->border_width;
 801c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c136:	b29a      	uxth	r2, r3
 801c138:	68bb      	ldr	r3, [r7, #8]
 801c13a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c13e:	b29b      	uxth	r3, r3
 801c140:	1ad3      	subs	r3, r2, r3
 801c142:	b29b      	uxth	r3, r3
 801c144:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(rin < 0) rin = 0;
 801c146:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	da01      	bge.n	801c152 <draw_border+0x19c>
 801c14e:	2300      	movs	r3, #0
 801c150:	857b      	strh	r3, [r7, #42]	; 0x2a

    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 801c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c154:	b218      	sxth	r0, r3
 801c156:	68bb      	ldr	r3, [r7, #8]
 801c158:	7f1b      	ldrb	r3, [r3, #28]
 801c15a:	68ba      	ldr	r2, [r7, #8]
 801c15c:	7892      	ldrb	r2, [r2, #2]
 801c15e:	f107 0114 	add.w	r1, r7, #20
 801c162:	9203      	str	r2, [sp, #12]
 801c164:	9302      	str	r3, [sp, #8]
 801c166:	68bb      	ldr	r3, [r7, #8]
 801c168:	7e1b      	ldrb	r3, [r3, #24]
 801c16a:	f88d 3004 	strb.w	r3, [sp, #4]
 801c16e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801c172:	9300      	str	r3, [sp, #0]
 801c174:	4603      	mov	r3, r0
 801c176:	460a      	mov	r2, r1
 801c178:	6879      	ldr	r1, [r7, #4]
 801c17a:	68f8      	ldr	r0, [r7, #12]
 801c17c:	f001 fe78 	bl	801de70 <draw_border_generic>
 801c180:	e006      	b.n	801c190 <draw_border+0x1da>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801c182:	bf00      	nop
 801c184:	e004      	b.n	801c190 <draw_border+0x1da>
    if(dsc->border_width == 0) return;
 801c186:	bf00      	nop
 801c188:	e002      	b.n	801c190 <draw_border+0x1da>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801c18a:	bf00      	nop
 801c18c:	e000      	b.n	801c190 <draw_border+0x1da>
    if(dsc->border_post) return;
 801c18e:	bf00      	nop

}
 801c190:	3730      	adds	r7, #48	; 0x30
 801c192:	46bd      	mov	sp, r7
 801c194:	bd80      	pop	{r7, pc}

0801c196 <draw_shadow>:

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc,
                                              const lv_area_t * coords)
{
 801c196:	b590      	push	{r4, r7, lr}
 801c198:	b0b3      	sub	sp, #204	; 0xcc
 801c19a:	af00      	add	r7, sp, #0
 801c19c:	60f8      	str	r0, [r7, #12]
 801c19e:	60b9      	str	r1, [r7, #8]
 801c1a0:	607a      	str	r2, [r7, #4]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 801c1a2:	68bb      	ldr	r3, [r7, #8]
 801c1a4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	f001 82ab 	beq.w	801d704 <draw_shadow+0x156e>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801c1ae:	68bb      	ldr	r3, [r7, #8]
 801c1b0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c1b4:	2b02      	cmp	r3, #2
 801c1b6:	f241 82a7 	bls.w	801d708 <draw_shadow+0x1572>

    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801c1ba:	68bb      	ldr	r3, [r7, #8]
 801c1bc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c1c0:	2b01      	cmp	r3, #1
 801c1c2:	d10f      	bne.n	801c1e4 <draw_shadow+0x4e>
 801c1c4:	68bb      	ldr	r3, [r7, #8]
 801c1c6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	dc0a      	bgt.n	801c1e4 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801c1ce:	68bb      	ldr	r3, [r7, #8]
 801c1d0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d105      	bne.n	801c1e4 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801c1d8:	68bb      	ldr	r3, [r7, #8]
 801c1da:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	f001 8294 	beq.w	801d70c <draw_shadow+0x1576>
        return;
    }

    /*Calculate the rectangle which is blurred to get the shadow in `shadow_area`*/
    lv_area_t core_area;
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c1ea:	b29a      	uxth	r2, r3
 801c1ec:	68bb      	ldr	r3, [r7, #8]
 801c1ee:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801c1f2:	b29b      	uxth	r3, r3
 801c1f4:	4413      	add	r3, r2
 801c1f6:	b29a      	uxth	r2, r3
 801c1f8:	68bb      	ldr	r3, [r7, #8]
 801c1fa:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c1fe:	b29b      	uxth	r3, r3
 801c200:	1ad3      	subs	r3, r2, r3
 801c202:	b29b      	uxth	r3, r3
 801c204:	b21b      	sxth	r3, r3
 801c206:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c210:	b29a      	uxth	r2, r3
 801c212:	68bb      	ldr	r3, [r7, #8]
 801c214:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801c218:	b29b      	uxth	r3, r3
 801c21a:	4413      	add	r3, r2
 801c21c:	b29a      	uxth	r2, r3
 801c21e:	68bb      	ldr	r3, [r7, #8]
 801c220:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c224:	b29b      	uxth	r3, r3
 801c226:	4413      	add	r3, r2
 801c228:	b29b      	uxth	r3, r3
 801c22a:	b21b      	sxth	r3, r3
 801c22c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c236:	b29a      	uxth	r2, r3
 801c238:	68bb      	ldr	r3, [r7, #8]
 801c23a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c23e:	b29b      	uxth	r3, r3
 801c240:	4413      	add	r3, r2
 801c242:	b29a      	uxth	r2, r3
 801c244:	68bb      	ldr	r3, [r7, #8]
 801c246:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c24a:	b29b      	uxth	r3, r3
 801c24c:	1ad3      	subs	r3, r2, r3
 801c24e:	b29b      	uxth	r3, r3
 801c250:	b21b      	sxth	r3, r3
 801c252:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c25c:	b29a      	uxth	r2, r3
 801c25e:	68bb      	ldr	r3, [r7, #8]
 801c260:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c264:	b29b      	uxth	r3, r3
 801c266:	4413      	add	r3, r2
 801c268:	b29a      	uxth	r2, r3
 801c26a:	68bb      	ldr	r3, [r7, #8]
 801c26c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c270:	b29b      	uxth	r3, r3
 801c272:	4413      	add	r3, r2
 801c274:	b29b      	uxth	r3, r3
 801c276:	b21b      	sxth	r3, r3
 801c278:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    /*Calculate the bounding box of the shadow*/
    lv_area_t shadow_area;
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 801c27c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c280:	b29a      	uxth	r2, r3
 801c282:	68bb      	ldr	r3, [r7, #8]
 801c284:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c288:	2b00      	cmp	r3, #0
 801c28a:	da00      	bge.n	801c28e <draw_shadow+0xf8>
 801c28c:	3301      	adds	r3, #1
 801c28e:	105b      	asrs	r3, r3, #1
 801c290:	b21b      	sxth	r3, r3
 801c292:	b29b      	uxth	r3, r3
 801c294:	1ad3      	subs	r3, r2, r3
 801c296:	b29b      	uxth	r3, r3
 801c298:	3b01      	subs	r3, #1
 801c29a:	b29b      	uxth	r3, r3
 801c29c:	b21b      	sxth	r3, r3
 801c29e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 801c2a2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801c2a6:	b29a      	uxth	r2, r3
 801c2a8:	68bb      	ldr	r3, [r7, #8]
 801c2aa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	da00      	bge.n	801c2b4 <draw_shadow+0x11e>
 801c2b2:	3301      	adds	r3, #1
 801c2b4:	105b      	asrs	r3, r3, #1
 801c2b6:	b21b      	sxth	r3, r3
 801c2b8:	b29b      	uxth	r3, r3
 801c2ba:	4413      	add	r3, r2
 801c2bc:	b29b      	uxth	r3, r3
 801c2be:	3301      	adds	r3, #1
 801c2c0:	b29b      	uxth	r3, r3
 801c2c2:	b21b      	sxth	r3, r3
 801c2c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 801c2c8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c2cc:	b29a      	uxth	r2, r3
 801c2ce:	68bb      	ldr	r3, [r7, #8]
 801c2d0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	da00      	bge.n	801c2da <draw_shadow+0x144>
 801c2d8:	3301      	adds	r3, #1
 801c2da:	105b      	asrs	r3, r3, #1
 801c2dc:	b21b      	sxth	r3, r3
 801c2de:	b29b      	uxth	r3, r3
 801c2e0:	1ad3      	subs	r3, r2, r3
 801c2e2:	b29b      	uxth	r3, r3
 801c2e4:	3b01      	subs	r3, #1
 801c2e6:	b29b      	uxth	r3, r3
 801c2e8:	b21b      	sxth	r3, r3
 801c2ea:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 801c2ee:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801c2f2:	b29a      	uxth	r2, r3
 801c2f4:	68bb      	ldr	r3, [r7, #8]
 801c2f6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	da00      	bge.n	801c300 <draw_shadow+0x16a>
 801c2fe:	3301      	adds	r3, #1
 801c300:	105b      	asrs	r3, r3, #1
 801c302:	b21b      	sxth	r3, r3
 801c304:	b29b      	uxth	r3, r3
 801c306:	4413      	add	r3, r2
 801c308:	b29b      	uxth	r3, r3
 801c30a:	3301      	adds	r3, #1
 801c30c:	b29b      	uxth	r3, r3
 801c30e:	b21b      	sxth	r3, r3
 801c310:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_opa_t opa = dsc->shadow_opa;
 801c314:	68bb      	ldr	r3, [r7, #8]
 801c316:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c31a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801c31e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801c322:	2bfd      	cmp	r3, #253	; 0xfd
 801c324:	d902      	bls.n	801c32c <draw_shadow+0x196>
 801c326:	23ff      	movs	r3, #255	; 0xff
 801c328:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `shadow_area`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	689a      	ldr	r2, [r3, #8]
 801c330:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801c334:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c338:	4618      	mov	r0, r3
 801c33a:	f004 f9f3 	bl	8020724 <_lv_area_intersect>
 801c33e:	4603      	mov	r3, r0
 801c340:	f083 0301 	eor.w	r3, r3, #1
 801c344:	b2db      	uxtb	r3, r3
 801c346:	2b00      	cmp	r3, #0
 801c348:	f041 81e2 	bne.w	801d710 <draw_shadow+0x157a>

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_area;
    lv_area_copy(&bg_area, coords);
 801c34c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c350:	6879      	ldr	r1, [r7, #4]
 801c352:	4618      	mov	r0, r3
 801c354:	f7ff f8f6 	bl	801b544 <lv_area_copy>
    lv_area_increase(&bg_area, -1, -1);
 801c358:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c35c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c364:	4618      	mov	r0, r3
 801c366:	f004 f971 	bl	802064c <lv_area_increase>

    /*Get the clamped radius*/
    int32_t r_bg = dsc->radius;
 801c36a:	68bb      	ldr	r3, [r7, #8]
 801c36c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c370:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    lv_coord_t short_side = LV_MIN(lv_area_get_width(&bg_area), lv_area_get_height(&bg_area));
 801c374:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c378:	4618      	mov	r0, r3
 801c37a:	f7ff f902 	bl	801b582 <lv_area_get_width>
 801c37e:	4603      	mov	r3, r0
 801c380:	461c      	mov	r4, r3
 801c382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c386:	4618      	mov	r0, r3
 801c388:	f7ff f912 	bl	801b5b0 <lv_area_get_height>
 801c38c:	4603      	mov	r3, r0
 801c38e:	429c      	cmp	r4, r3
 801c390:	da06      	bge.n	801c3a0 <draw_shadow+0x20a>
 801c392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c396:	4618      	mov	r0, r3
 801c398:	f7ff f8f3 	bl	801b582 <lv_area_get_width>
 801c39c:	4603      	mov	r3, r0
 801c39e:	e005      	b.n	801c3ac <draw_shadow+0x216>
 801c3a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c3a4:	4618      	mov	r0, r3
 801c3a6:	f7ff f903 	bl	801b5b0 <lv_area_get_height>
 801c3aa:	4603      	mov	r3, r0
 801c3ac:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 801c3b0:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c3b4:	105b      	asrs	r3, r3, #1
 801c3b6:	b21b      	sxth	r3, r3
 801c3b8:	461a      	mov	r2, r3
 801c3ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c3be:	4293      	cmp	r3, r2
 801c3c0:	dd05      	ble.n	801c3ce <draw_shadow+0x238>
 801c3c2:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c3c6:	105b      	asrs	r3, r3, #1
 801c3c8:	b21b      	sxth	r3, r3
 801c3ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /*Get the clamped radius*/
    int32_t r_sh = dsc->radius;
 801c3ce:	68bb      	ldr	r3, [r7, #8]
 801c3d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c3d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    short_side = LV_MIN(lv_area_get_width(&core_area), lv_area_get_height(&core_area));
 801c3d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c3dc:	4618      	mov	r0, r3
 801c3de:	f7ff f8d0 	bl	801b582 <lv_area_get_width>
 801c3e2:	4603      	mov	r3, r0
 801c3e4:	461c      	mov	r4, r3
 801c3e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f7ff f8e0 	bl	801b5b0 <lv_area_get_height>
 801c3f0:	4603      	mov	r3, r0
 801c3f2:	429c      	cmp	r4, r3
 801c3f4:	da06      	bge.n	801c404 <draw_shadow+0x26e>
 801c3f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	f7ff f8c1 	bl	801b582 <lv_area_get_width>
 801c400:	4603      	mov	r3, r0
 801c402:	e005      	b.n	801c410 <draw_shadow+0x27a>
 801c404:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c408:	4618      	mov	r0, r3
 801c40a:	f7ff f8d1 	bl	801b5b0 <lv_area_get_height>
 801c40e:	4603      	mov	r3, r0
 801c410:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 801c414:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c418:	105b      	asrs	r3, r3, #1
 801c41a:	b21b      	sxth	r3, r3
 801c41c:	461a      	mov	r2, r3
 801c41e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c422:	4293      	cmp	r3, r2
 801c424:	dd05      	ble.n	801c432 <draw_shadow+0x29c>
 801c426:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c42a:	105b      	asrs	r3, r3, #1
 801c42c:	b21b      	sxth	r3, r3
 801c42e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


    /*Get how many pixels are affected by the blur on the corners*/
    int32_t corner_size = dsc->shadow_width  + r_sh;
 801c432:	68bb      	ldr	r3, [r7, #8]
 801c434:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c438:	461a      	mov	r2, r3
 801c43a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c43e:	4413      	add	r3, r2
 801c440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 801c444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c448:	fb03 f303 	mul.w	r3, r3, r3
 801c44c:	005b      	lsls	r3, r3, #1
 801c44e:	4618      	mov	r0, r3
 801c450:	f005 fd12 	bl	8021e78 <lv_mem_buf_get>
 801c454:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 801c458:	68bb      	ldr	r3, [r7, #8]
 801c45a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 801c45e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c462:	b21b      	sxth	r3, r3
 801c464:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801c468:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801c46c:	f001 f954 	bl	801d718 <shadow_draw_corner_buf>
#endif

    /*Skip a lot of masking if the background will cover the shadow that would be masked out*/
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 801c470:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c474:	4618      	mov	r0, r3
 801c476:	f7f5 fb41 	bl	8011afc <lv_draw_mask_is_any>
 801c47a:	4603      	mov	r3, r0
 801c47c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool simple = true;
 801c480:	2301      	movs	r3, #1
 801c482:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 801c486:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d107      	bne.n	801c49e <draw_shadow+0x308>
 801c48e:	68bb      	ldr	r3, [r7, #8]
 801c490:	78db      	ldrb	r3, [r3, #3]
 801c492:	2bff      	cmp	r3, #255	; 0xff
 801c494:	d103      	bne.n	801c49e <draw_shadow+0x308>
 801c496:	68bb      	ldr	r3, [r7, #8]
 801c498:	789b      	ldrb	r3, [r3, #2]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d002      	beq.n	801c4a4 <draw_shadow+0x30e>
 801c49e:	2300      	movs	r3, #0
 801c4a0:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

    /*Create a radius mask to clip remove shadow on the bg area*/

    lv_draw_mask_radius_param_t mask_rout_param;
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801c4a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c4a8:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    if(!simple) {
 801c4ac:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c4b0:	f083 0301 	eor.w	r3, r3, #1
 801c4b4:	b2db      	uxtb	r3, r3
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d012      	beq.n	801c4e0 <draw_shadow+0x34a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 801c4ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c4be:	b21a      	sxth	r2, r3
 801c4c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c4c4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801c4c8:	2301      	movs	r3, #1
 801c4ca:	f7f5 fdb3 	bl	8012034 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801c4ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c4d2:	2100      	movs	r1, #0
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f7f5 f9e1 	bl	801189c <lv_draw_mask_add>
 801c4da:	4603      	mov	r3, r0
 801c4dc:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    }
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 801c4e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	f7ff f84c 	bl	801b582 <lv_area_get_width>
 801c4ea:	4603      	mov	r3, r0
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	f005 fcc3 	bl	8021e78 <lv_mem_buf_get>
 801c4f2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_opa_t * sh_buf_tmp;
    lv_coord_t y;
    bool simple_sub;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801c4f6:	f107 0314 	add.w	r3, r7, #20
 801c4fa:	211c      	movs	r1, #28
 801c4fc:	4618      	mov	r0, r3
 801c4fe:	f006 f865 	bl	80225cc <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801c502:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c506:	617b      	str	r3, [r7, #20]
    blend_dsc.mask_area = &blend_area;
 801c508:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c50c:	62bb      	str	r3, [r7, #40]	; 0x28
    blend_dsc.mask_buf = mask_buf;
 801c50e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c512:	623b      	str	r3, [r7, #32]
    blend_dsc.color = dsc->shadow_color;
 801c514:	68bb      	ldr	r3, [r7, #8]
 801c516:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801c51a:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->shadow_opa;
 801c51c:	68bb      	ldr	r3, [r7, #8]
 801c51e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c522:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    blend_dsc.blend_mode = dsc->blend_mode;
 801c526:	68bb      	ldr	r3, [r7, #8]
 801c528:	789b      	ldrb	r3, [r3, #2]
 801c52a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 801c52e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801c532:	b29c      	uxth	r4, r3
 801c534:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c538:	4618      	mov	r0, r3
 801c53a:	f7ff f822 	bl	801b582 <lv_area_get_width>
 801c53e:	4603      	mov	r3, r0
 801c540:	2b00      	cmp	r3, #0
 801c542:	da00      	bge.n	801c546 <draw_shadow+0x3b0>
 801c544:	3301      	adds	r3, #1
 801c546:	105b      	asrs	r3, r3, #1
 801c548:	b21b      	sxth	r3, r3
 801c54a:	b29b      	uxth	r3, r3
 801c54c:	4423      	add	r3, r4
 801c54e:	b29b      	uxth	r3, r3
 801c550:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 801c554:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c558:	b29c      	uxth	r4, r3
 801c55a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c55e:	4618      	mov	r0, r3
 801c560:	f7ff f826 	bl	801b5b0 <lv_area_get_height>
 801c564:	4603      	mov	r3, r0
 801c566:	2b00      	cmp	r3, #0
 801c568:	da00      	bge.n	801c56c <draw_shadow+0x3d6>
 801c56a:	3301      	adds	r3, #1
 801c56c:	105b      	asrs	r3, r3, #1
 801c56e:	b21b      	sxth	r3, r3
 801c570:	b29b      	uxth	r3, r3
 801c572:	4423      	add	r3, r4
 801c574:	b29b      	uxth	r3, r3
 801c576:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    /*Draw the corners if they are on the current clip area and not fully covered by the bg*/

    /*Top right corner*/
    blend_area.x2 = shadow_area.x2;
 801c57a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c57e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801c580:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c584:	b29a      	uxth	r2, r3
 801c586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c58a:	b29b      	uxth	r3, r3
 801c58c:	1ad3      	subs	r3, r2, r3
 801c58e:	b29b      	uxth	r3, r3
 801c590:	3301      	adds	r3, #1
 801c592:	b29b      	uxth	r3, r3
 801c594:	b21b      	sxth	r3, r3
 801c596:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y1;
 801c598:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c59c:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801c59e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c5a2:	b29a      	uxth	r2, r3
 801c5a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	4413      	add	r3, r2
 801c5ac:	b29b      	uxth	r3, r3
 801c5ae:	3b01      	subs	r3, #1
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	b21b      	sxth	r3, r3
 801c5b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other top corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801c5b6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801c5ba:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801c5be:	4293      	cmp	r3, r2
 801c5c0:	bfb8      	it	lt
 801c5c2:	4613      	movlt	r3, r2
 801c5c4:	b21b      	sxth	r3, r3
 801c5c6:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801c5c8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c5cc:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801c5d0:	4293      	cmp	r3, r2
 801c5d2:	bfa8      	it	ge
 801c5d4:	4613      	movge	r3, r2
 801c5d6:	b21b      	sxth	r3, r3
 801c5d8:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	689a      	ldr	r2, [r3, #8]
 801c5de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c5e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c5e6:	4618      	mov	r0, r3
 801c5e8:	f004 f89c 	bl	8020724 <_lv_area_intersect>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	f000 80b3 	beq.w	801c75a <draw_shadow+0x5c4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801c5f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c5f8:	b21a      	sxth	r2, r3
 801c5fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c5fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c602:	4618      	mov	r0, r3
 801c604:	f004 fa72 	bl	8020aec <_lv_area_is_in>
 801c608:	4603      	mov	r3, r0
 801c60a:	f083 0301 	eor.w	r3, r3, #1
 801c60e:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c610:	2b00      	cmp	r3, #0
 801c612:	f000 80a2 	beq.w	801c75a <draw_shadow+0x5c4>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801c616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c61a:	4618      	mov	r0, r3
 801c61c:	f7fe ffb1 	bl	801b582 <lv_area_get_width>
 801c620:	4603      	mov	r3, r0
 801c622:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        sh_buf_tmp = sh_buf;
 801c626:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c62a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 801c62e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c632:	461a      	mov	r2, r3
 801c634:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c638:	1ad3      	subs	r3, r2, r3
 801c63a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801c63e:	fb02 f303 	mul.w	r3, r2, r3
 801c642:	461a      	mov	r2, r3
 801c644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c648:	4413      	add	r3, r2
 801c64a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801c64e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c652:	461a      	mov	r2, r3
 801c654:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c658:	4619      	mov	r1, r3
 801c65a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c65e:	1acb      	subs	r3, r1, r3
 801c660:	3301      	adds	r3, #1
 801c662:	1ad3      	subs	r3, r2, r3
 801c664:	461a      	mov	r2, r3
 801c666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c66a:	4413      	add	r3, r2
 801c66c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801c670:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c674:	2b00      	cmp	r3, #0
 801c676:	d010      	beq.n	801c69a <draw_shadow+0x504>
 801c678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c67c:	b21a      	sxth	r2, r3
 801c67e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c686:	4618      	mov	r0, r3
 801c688:	f004 face 	bl	8020c28 <_lv_area_is_out>
 801c68c:	4603      	mov	r3, r0
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d003      	beq.n	801c69a <draw_shadow+0x504>
 801c692:	2301      	movs	r3, #1
 801c694:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801c698:	e003      	b.n	801c6a2 <draw_shadow+0x50c>
        else simple_sub = simple;
 801c69a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c69e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        if(w > 0) {
 801c6a2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	dd57      	ble.n	801c75a <draw_shadow+0x5c4>
            blend_dsc.mask_buf = mask_buf;
 801c6aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c6ae:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801c6b0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c6b4:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801c6b6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c6ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801c6bc:	2302      	movs	r3, #2
 801c6be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801c6c2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801c6c4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c6c8:	e041      	b.n	801c74e <draw_shadow+0x5b8>
                blend_area.y1 = y;
 801c6ca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c6ce:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801c6d0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c6d4:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801c6d6:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801c6da:	f083 0301 	eor.w	r3, r3, #1
 801c6de:	b2db      	uxtb	r3, r3
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d01d      	beq.n	801c720 <draw_shadow+0x58a>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801c6e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c6e8:	461a      	mov	r2, r3
 801c6ea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801c6ee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c6f2:	f005 fcc5 	bl	8022080 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801c6f6:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801c6fa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801c6fe:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c702:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c706:	f7f5 f8fb 	bl	8011900 <lv_draw_mask_apply>
 801c70a:	4603      	mov	r3, r0
 801c70c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c710:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c714:	2b01      	cmp	r3, #1
 801c716:	d106      	bne.n	801c726 <draw_shadow+0x590>
 801c718:	2302      	movs	r3, #2
 801c71a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801c71e:	e002      	b.n	801c726 <draw_shadow+0x590>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801c720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c724:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c726:	f107 0314 	add.w	r3, r7, #20
 801c72a:	4619      	mov	r1, r3
 801c72c:	68f8      	ldr	r0, [r7, #12]
 801c72e:	f7fa fcb5 	bl	801709c <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801c732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c73a:	4413      	add	r3, r2
 801c73c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801c740:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801c744:	b29b      	uxth	r3, r3
 801c746:	3301      	adds	r3, #1
 801c748:	b29b      	uxth	r3, r3
 801c74a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c74e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c752:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c756:	429a      	cmp	r2, r3
 801c758:	ddb7      	ble.n	801c6ca <draw_shadow+0x534>
        }
    }

    /*Bottom right corner.
     *Almost the same as top right just read the lines of `sh_buf` from then end*/
    blend_area.x2 = shadow_area.x2;
 801c75a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c75e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801c760:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c764:	b29a      	uxth	r2, r3
 801c766:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c76a:	b29b      	uxth	r3, r3
 801c76c:	1ad3      	subs	r3, r2, r3
 801c76e:	b29b      	uxth	r3, r3
 801c770:	3301      	adds	r3, #1
 801c772:	b29b      	uxth	r3, r3
 801c774:	b21b      	sxth	r3, r3
 801c776:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801c778:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801c77c:	b29a      	uxth	r2, r3
 801c77e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c782:	b29b      	uxth	r3, r3
 801c784:	1ad3      	subs	r3, r2, r3
 801c786:	b29b      	uxth	r3, r3
 801c788:	3301      	adds	r3, #1
 801c78a:	b29b      	uxth	r3, r3
 801c78c:	b21b      	sxth	r3, r3
 801c78e:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801c790:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801c794:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801c796:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801c79a:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801c79e:	4293      	cmp	r3, r2
 801c7a0:	bfb8      	it	lt
 801c7a2:	4613      	movlt	r3, r2
 801c7a4:	b21b      	sxth	r3, r3
 801c7a6:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801c7a8:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801c7ac:	3301      	adds	r3, #1
 801c7ae:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801c7b2:	4293      	cmp	r3, r2
 801c7b4:	bfb8      	it	lt
 801c7b6:	4613      	movlt	r3, r2
 801c7b8:	b21b      	sxth	r3, r3
 801c7ba:	877b      	strh	r3, [r7, #58]	; 0x3a

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	689a      	ldr	r2, [r3, #8]
 801c7c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c7c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	f003 ffab 	bl	8020724 <_lv_area_intersect>
 801c7ce:	4603      	mov	r3, r0
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	f000 80b3 	beq.w	801c93c <draw_shadow+0x7a6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801c7d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c7da:	b21a      	sxth	r2, r3
 801c7dc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c7e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7e4:	4618      	mov	r0, r3
 801c7e6:	f004 f981 	bl	8020aec <_lv_area_is_in>
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	f083 0301 	eor.w	r3, r3, #1
 801c7f0:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	f000 80a2 	beq.w	801c93c <draw_shadow+0x7a6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801c7f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7fc:	4618      	mov	r0, r3
 801c7fe:	f7fe fec0 	bl	801b582 <lv_area_get_width>
 801c802:	4603      	mov	r3, r0
 801c804:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        sh_buf_tmp = sh_buf;
 801c808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c80c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801c810:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c814:	461a      	mov	r2, r3
 801c816:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c81a:	1ad3      	subs	r3, r2, r3
 801c81c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801c820:	fb02 f303 	mul.w	r3, r2, r3
 801c824:	461a      	mov	r2, r3
 801c826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c82a:	4413      	add	r3, r2
 801c82c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801c830:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c834:	461a      	mov	r2, r3
 801c836:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c83a:	4619      	mov	r1, r3
 801c83c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c840:	1acb      	subs	r3, r1, r3
 801c842:	3301      	adds	r3, #1
 801c844:	1ad3      	subs	r3, r2, r3
 801c846:	461a      	mov	r2, r3
 801c848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c84c:	4413      	add	r3, r2
 801c84e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801c852:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c856:	2b00      	cmp	r3, #0
 801c858:	d010      	beq.n	801c87c <draw_shadow+0x6e6>
 801c85a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c85e:	b21a      	sxth	r2, r3
 801c860:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c868:	4618      	mov	r0, r3
 801c86a:	f004 f9dd 	bl	8020c28 <_lv_area_is_out>
 801c86e:	4603      	mov	r3, r0
 801c870:	2b00      	cmp	r3, #0
 801c872:	d003      	beq.n	801c87c <draw_shadow+0x6e6>
 801c874:	2301      	movs	r3, #1
 801c876:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801c87a:	e003      	b.n	801c884 <draw_shadow+0x6ee>
        else simple_sub = simple;
 801c87c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c880:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801c884:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801c888:	2b00      	cmp	r3, #0
 801c88a:	dd57      	ble.n	801c93c <draw_shadow+0x7a6>
            blend_dsc.mask_buf = mask_buf;
 801c88c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c890:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801c892:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c896:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801c898:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c89c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801c89e:	2302      	movs	r3, #2
 801c8a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801c8a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c8a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c8aa:	e041      	b.n	801c930 <draw_shadow+0x79a>
                blend_area.y1 = y;
 801c8ac:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c8b0:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801c8b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c8b6:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801c8b8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801c8bc:	f083 0301 	eor.w	r3, r3, #1
 801c8c0:	b2db      	uxtb	r3, r3
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d01d      	beq.n	801c902 <draw_shadow+0x76c>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801c8c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c8ca:	461a      	mov	r2, r3
 801c8cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801c8d0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c8d4:	f005 fbd4 	bl	8022080 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801c8d8:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801c8dc:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801c8e0:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c8e4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c8e8:	f7f5 f80a 	bl	8011900 <lv_draw_mask_apply>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c8f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c8f6:	2b01      	cmp	r3, #1
 801c8f8:	d106      	bne.n	801c908 <draw_shadow+0x772>
 801c8fa:	2302      	movs	r3, #2
 801c8fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801c900:	e002      	b.n	801c908 <draw_shadow+0x772>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801c902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c906:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c908:	f107 0314 	add.w	r3, r7, #20
 801c90c:	4619      	mov	r1, r3
 801c90e:	68f8      	ldr	r0, [r7, #12]
 801c910:	f7fa fbc4 	bl	801709c <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801c914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c918:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c91c:	4413      	add	r3, r2
 801c91e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801c922:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801c926:	b29b      	uxth	r3, r3
 801c928:	3b01      	subs	r3, #1
 801c92a:	b29b      	uxth	r3, r3
 801c92c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c930:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c934:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c938:	429a      	cmp	r2, r3
 801c93a:	dab7      	bge.n	801c8ac <draw_shadow+0x716>
            }
        }
    }

    /*Top side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801c93c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801c940:	b29a      	uxth	r2, r3
 801c942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c946:	b29b      	uxth	r3, r3
 801c948:	4413      	add	r3, r2
 801c94a:	b29b      	uxth	r3, r3
 801c94c:	b21b      	sxth	r3, r3
 801c94e:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801c950:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c954:	b29a      	uxth	r2, r3
 801c956:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c95a:	b29b      	uxth	r3, r3
 801c95c:	1ad3      	subs	r3, r2, r3
 801c95e:	b29b      	uxth	r3, r3
 801c960:	b21b      	sxth	r3, r3
 801c962:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801c964:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c968:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801c96a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c96e:	b29a      	uxth	r2, r3
 801c970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c974:	b29b      	uxth	r3, r3
 801c976:	4413      	add	r3, r2
 801c978:	b29b      	uxth	r3, r3
 801c97a:	3b01      	subs	r3, #1
 801c97c:	b29b      	uxth	r3, r3
 801c97e:	b21b      	sxth	r3, r3
 801c980:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801c982:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c986:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801c98a:	4293      	cmp	r3, r2
 801c98c:	bfa8      	it	ge
 801c98e:	4613      	movge	r3, r2
 801c990:	b21b      	sxth	r3, r3
 801c992:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	689a      	ldr	r2, [r3, #8]
 801c998:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c99c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	f003 febf 	bl	8020724 <_lv_area_intersect>
 801c9a6:	4603      	mov	r3, r0
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	f000 80c2 	beq.w	801cb32 <draw_shadow+0x99c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801c9ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c9b2:	b21a      	sxth	r2, r3
 801c9b4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c9b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c9bc:	4618      	mov	r0, r3
 801c9be:	f004 f895 	bl	8020aec <_lv_area_is_in>
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	f083 0301 	eor.w	r3, r3, #1
 801c9c8:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	f000 80b1 	beq.w	801cb32 <draw_shadow+0x99c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801c9d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	f7fe fdd4 	bl	801b582 <lv_area_get_width>
 801c9da:	4603      	mov	r3, r0
 801c9dc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        sh_buf_tmp = sh_buf;
 801c9e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c9e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801c9e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c9ec:	461a      	mov	r2, r3
 801c9ee:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801c9f2:	1ad3      	subs	r3, r2, r3
 801c9f4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801c9f8:	fb02 f303 	mul.w	r3, r2, r3
 801c9fc:	461a      	mov	r2, r3
 801c9fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ca02:	4413      	add	r3, r2
 801ca04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801ca08:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d010      	beq.n	801ca32 <draw_shadow+0x89c>
 801ca10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ca14:	b21a      	sxth	r2, r3
 801ca16:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ca1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ca1e:	4618      	mov	r0, r3
 801ca20:	f004 f902 	bl	8020c28 <_lv_area_is_out>
 801ca24:	4603      	mov	r3, r0
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d003      	beq.n	801ca32 <draw_shadow+0x89c>
 801ca2a:	2301      	movs	r3, #1
 801ca2c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801ca30:	e003      	b.n	801ca3a <draw_shadow+0x8a4>
        else simple_sub = simple;
 801ca32:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ca36:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801ca3a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	dd77      	ble.n	801cb32 <draw_shadow+0x99c>
            if(!simple_sub) {
 801ca42:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ca46:	f083 0301 	eor.w	r3, r3, #1
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d003      	beq.n	801ca58 <draw_shadow+0x8c2>
                blend_dsc.mask_buf = mask_buf;
 801ca50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ca54:	623b      	str	r3, [r7, #32]
 801ca56:	e001      	b.n	801ca5c <draw_shadow+0x8c6>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801ca58:	2300      	movs	r3, #0
 801ca5a:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801ca5c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ca60:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801ca62:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ca66:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801ca68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801ca6a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ca6e:	e05a      	b.n	801cb26 <draw_shadow+0x990>
                blend_area.y1 = y;
 801ca70:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ca74:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801ca76:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ca7a:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801ca7c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ca80:	f083 0301 	eor.w	r3, r3, #1
 801ca84:	b2db      	uxtb	r3, r3
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d024      	beq.n	801cad4 <draw_shadow+0x93e>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801ca8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ca8e:	781b      	ldrb	r3, [r3, #0]
 801ca90:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801ca94:	4619      	mov	r1, r3
 801ca96:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ca9a:	f005 fd09 	bl	80224b0 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ca9e:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801caa2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801caa6:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801caaa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801caae:	f7f4 ff27 	bl	8011900 <lv_draw_mask_apply>
 801cab2:	4603      	mov	r3, r0
 801cab4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801cab8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cabc:	2b01      	cmp	r3, #1
 801cabe:	d102      	bne.n	801cac6 <draw_shadow+0x930>
 801cac0:	2302      	movs	r3, #2
 801cac2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cac6:	f107 0314 	add.w	r3, r7, #20
 801caca:	4619      	mov	r1, r3
 801cacc:	68f8      	ldr	r0, [r7, #12]
 801cace:	f7fa fae5 	bl	801709c <lv_draw_sw_blend>
 801cad2:	e01a      	b.n	801cb0a <draw_shadow+0x974>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801cad4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801cad8:	2bff      	cmp	r3, #255	; 0xff
 801cada:	d103      	bne.n	801cae4 <draw_shadow+0x94e>
 801cadc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cae0:	781b      	ldrb	r3, [r3, #0]
 801cae2:	e00a      	b.n	801cafa <draw_shadow+0x964>
 801cae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cae8:	781b      	ldrb	r3, [r3, #0]
 801caea:	461a      	mov	r2, r3
 801caec:	68bb      	ldr	r3, [r7, #8]
 801caee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801caf2:	fb02 f303 	mul.w	r3, r2, r3
 801caf6:	121b      	asrs	r3, r3, #8
 801caf8:	b2db      	uxtb	r3, r3
 801cafa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cafe:	f107 0314 	add.w	r3, r7, #20
 801cb02:	4619      	mov	r1, r3
 801cb04:	68f8      	ldr	r0, [r7, #12]
 801cb06:	f7fa fac9 	bl	801709c <lv_draw_sw_blend>
                }
                sh_buf_tmp += corner_size;
 801cb0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cb0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cb12:	4413      	add	r3, r2
 801cb14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801cb18:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cb1c:	b29b      	uxth	r3, r3
 801cb1e:	3301      	adds	r3, #1
 801cb20:	b29b      	uxth	r3, r3
 801cb22:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cb26:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cb2a:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cb2e:	429a      	cmp	r2, r3
 801cb30:	dd9e      	ble.n	801ca70 <draw_shadow+0x8da>
            }
        }
    }
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801cb32:	68bb      	ldr	r3, [r7, #8]
 801cb34:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cb38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Bottom side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801cb3c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801cb40:	b29a      	uxth	r2, r3
 801cb42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cb46:	b29b      	uxth	r3, r3
 801cb48:	4413      	add	r3, r2
 801cb4a:	b29b      	uxth	r3, r3
 801cb4c:	b21b      	sxth	r3, r3
 801cb4e:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801cb50:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cb54:	b29a      	uxth	r2, r3
 801cb56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cb5a:	b29b      	uxth	r3, r3
 801cb5c:	1ad3      	subs	r3, r2, r3
 801cb5e:	b29b      	uxth	r3, r3
 801cb60:	b21b      	sxth	r3, r3
 801cb62:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801cb64:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cb68:	b29a      	uxth	r2, r3
 801cb6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cb6e:	b29b      	uxth	r3, r3
 801cb70:	1ad3      	subs	r3, r2, r3
 801cb72:	b29b      	uxth	r3, r3
 801cb74:	3301      	adds	r3, #1
 801cb76:	b29b      	uxth	r3, r3
 801cb78:	b21b      	sxth	r3, r3
 801cb7a:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801cb7c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cb80:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801cb82:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801cb86:	3301      	adds	r3, #1
 801cb88:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801cb8c:	4293      	cmp	r3, r2
 801cb8e:	bfb8      	it	lt
 801cb90:	4613      	movlt	r3, r2
 801cb92:	b21b      	sxth	r3, r3
 801cb94:	877b      	strh	r3, [r7, #58]	; 0x3a


    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	689a      	ldr	r2, [r3, #8]
 801cb9a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801cb9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cba2:	4618      	mov	r0, r3
 801cba4:	f003 fdbe 	bl	8020724 <_lv_area_intersect>
 801cba8:	4603      	mov	r3, r0
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	f000 80dc 	beq.w	801cd68 <draw_shadow+0xbd2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801cbb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cbb4:	b21a      	sxth	r2, r3
 801cbb6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cbba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cbbe:	4618      	mov	r0, r3
 801cbc0:	f003 ff94 	bl	8020aec <_lv_area_is_in>
 801cbc4:	4603      	mov	r3, r0
 801cbc6:	f083 0301 	eor.w	r3, r3, #1
 801cbca:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	f000 80cb 	beq.w	801cd68 <draw_shadow+0xbd2>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801cbd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cbd6:	4618      	mov	r0, r3
 801cbd8:	f7fe fcd3 	bl	801b582 <lv_area_get_width>
 801cbdc:	4603      	mov	r3, r0
 801cbde:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        sh_buf_tmp = sh_buf;
 801cbe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801cbe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801cbea:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801cbee:	461a      	mov	r2, r3
 801cbf0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cbf4:	1ad3      	subs	r3, r2, r3
 801cbf6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801cbfa:	fb02 f303 	mul.w	r3, r2, r3
 801cbfe:	461a      	mov	r2, r3
 801cc00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cc04:	4413      	add	r3, r2
 801cc06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        if(w > 0) {
 801cc0a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	f340 80aa 	ble.w	801cd68 <draw_shadow+0xbd2>
            /*Do not mask if out of the bg*/
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801cc14:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d010      	beq.n	801cc3e <draw_shadow+0xaa8>
 801cc1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cc20:	b21a      	sxth	r2, r3
 801cc22:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cc26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cc2a:	4618      	mov	r0, r3
 801cc2c:	f003 fffc 	bl	8020c28 <_lv_area_is_out>
 801cc30:	4603      	mov	r3, r0
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d003      	beq.n	801cc3e <draw_shadow+0xaa8>
 801cc36:	2301      	movs	r3, #1
 801cc38:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801cc3c:	e003      	b.n	801cc46 <draw_shadow+0xab0>
            else simple_sub = simple;
 801cc3e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cc42:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

            if(!simple_sub) {
 801cc46:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801cc4a:	f083 0301 	eor.w	r3, r3, #1
 801cc4e:	b2db      	uxtb	r3, r3
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d003      	beq.n	801cc5c <draw_shadow+0xac6>
                blend_dsc.mask_buf = mask_buf;
 801cc54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cc58:	623b      	str	r3, [r7, #32]
 801cc5a:	e001      	b.n	801cc60 <draw_shadow+0xaca>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801cc5c:	2300      	movs	r3, #0
 801cc5e:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801cc60:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801cc64:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801cc66:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801cc6a:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801cc6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801cc6e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cc72:	e073      	b.n	801cd5c <draw_shadow+0xbc6>
                blend_area.y1 = y;
 801cc74:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cc78:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801cc7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cc7e:	87fb      	strh	r3, [r7, #62]	; 0x3e

                /*Do not mask if out of the bg*/
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801cc80:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d010      	beq.n	801ccaa <draw_shadow+0xb14>
 801cc88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cc8c:	b21a      	sxth	r2, r3
 801cc8e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cc92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cc96:	4618      	mov	r0, r3
 801cc98:	f003 ffc6 	bl	8020c28 <_lv_area_is_out>
 801cc9c:	4603      	mov	r3, r0
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d003      	beq.n	801ccaa <draw_shadow+0xb14>
 801cca2:	2301      	movs	r3, #1
 801cca4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801cca8:	e003      	b.n	801ccb2 <draw_shadow+0xb1c>
                else simple_sub = simple;
 801ccaa:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ccae:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

                if(!simple_sub) {
 801ccb2:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ccb6:	f083 0301 	eor.w	r3, r3, #1
 801ccba:	b2db      	uxtb	r3, r3
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d024      	beq.n	801cd0a <draw_shadow+0xb74>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801ccc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ccc4:	781b      	ldrb	r3, [r3, #0]
 801ccc6:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801ccca:	4619      	mov	r1, r3
 801cccc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ccd0:	f005 fbee 	bl	80224b0 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ccd4:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ccd8:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801ccdc:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cce0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cce4:	f7f4 fe0c 	bl	8011900 <lv_draw_mask_apply>
 801cce8:	4603      	mov	r3, r0
 801ccea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ccee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ccf2:	2b01      	cmp	r3, #1
 801ccf4:	d102      	bne.n	801ccfc <draw_shadow+0xb66>
 801ccf6:	2302      	movs	r3, #2
 801ccf8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ccfc:	f107 0314 	add.w	r3, r7, #20
 801cd00:	4619      	mov	r1, r3
 801cd02:	68f8      	ldr	r0, [r7, #12]
 801cd04:	f7fa f9ca 	bl	801709c <lv_draw_sw_blend>
 801cd08:	e01a      	b.n	801cd40 <draw_shadow+0xbaa>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801cd0a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801cd0e:	2bff      	cmp	r3, #255	; 0xff
 801cd10:	d103      	bne.n	801cd1a <draw_shadow+0xb84>
 801cd12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cd16:	781b      	ldrb	r3, [r3, #0]
 801cd18:	e00a      	b.n	801cd30 <draw_shadow+0xb9a>
 801cd1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cd1e:	781b      	ldrb	r3, [r3, #0]
 801cd20:	461a      	mov	r2, r3
 801cd22:	68bb      	ldr	r3, [r7, #8]
 801cd24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cd28:	fb02 f303 	mul.w	r3, r2, r3
 801cd2c:	121b      	asrs	r3, r3, #8
 801cd2e:	b2db      	uxtb	r3, r3
 801cd30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cd34:	f107 0314 	add.w	r3, r7, #20
 801cd38:	4619      	mov	r1, r3
 801cd3a:	68f8      	ldr	r0, [r7, #12]
 801cd3c:	f7fa f9ae 	bl	801709c <lv_draw_sw_blend>

                }
                sh_buf_tmp += corner_size;
 801cd40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cd48:	4413      	add	r3, r2
 801cd4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801cd4e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cd52:	b29b      	uxth	r3, r3
 801cd54:	3b01      	subs	r3, #1
 801cd56:	b29b      	uxth	r3, r3
 801cd58:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cd5c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801cd60:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cd64:	429a      	cmp	r2, r3
 801cd66:	da85      	bge.n	801cc74 <draw_shadow+0xade>
            }
        }
    }

    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801cd68:	68bb      	ldr	r3, [r7, #8]
 801cd6a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cd6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Right side*/
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801cd72:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cd76:	b29a      	uxth	r2, r3
 801cd78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd7c:	b29b      	uxth	r3, r3
 801cd7e:	1ad3      	subs	r3, r2, r3
 801cd80:	b29b      	uxth	r3, r3
 801cd82:	3301      	adds	r3, #1
 801cd84:	b29b      	uxth	r3, r3
 801cd86:	b21b      	sxth	r3, r3
 801cd88:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2;
 801cd8a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cd8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801cd90:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801cd94:	b29a      	uxth	r2, r3
 801cd96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd9a:	b29b      	uxth	r3, r3
 801cd9c:	4413      	add	r3, r2
 801cd9e:	b29b      	uxth	r3, r3
 801cda0:	b21b      	sxth	r3, r3
 801cda2:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801cda4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cda8:	b29a      	uxth	r2, r3
 801cdaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cdae:	b29b      	uxth	r3, r3
 801cdb0:	1ad3      	subs	r3, r2, r3
 801cdb2:	b29b      	uxth	r3, r3
 801cdb4:	b21b      	sxth	r3, r3
 801cdb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801cdb8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801cdbc:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801cdc0:	429a      	cmp	r2, r3
 801cdc2:	db02      	blt.n	801cdca <draw_shadow+0xc34>
 801cdc4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801cdc8:	e004      	b.n	801cdd4 <draw_shadow+0xc3e>
 801cdca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801cdce:	3301      	adds	r3, #1
 801cdd0:	b29b      	uxth	r3, r3
 801cdd2:	b21b      	sxth	r3, r3
 801cdd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801cdd6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801cdda:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801cdde:	4293      	cmp	r3, r2
 801cde0:	bfb8      	it	lt
 801cde2:	4613      	movlt	r3, r2
 801cde4:	b21b      	sxth	r3, r3
 801cde6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801cde8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801cdec:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801cdf0:	4293      	cmp	r3, r2
 801cdf2:	bfb8      	it	lt
 801cdf4:	4613      	movlt	r3, r2
 801cdf6:	b21b      	sxth	r3, r3
 801cdf8:	873b      	strh	r3, [r7, #56]	; 0x38

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	689a      	ldr	r2, [r3, #8]
 801cdfe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ce02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce06:	4618      	mov	r0, r3
 801ce08:	f003 fc8c 	bl	8020724 <_lv_area_intersect>
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	f000 80ac 	beq.w	801cf6c <draw_shadow+0xdd6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801ce14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ce18:	b21a      	sxth	r2, r3
 801ce1a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ce1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce22:	4618      	mov	r0, r3
 801ce24:	f003 fe62 	bl	8020aec <_lv_area_is_in>
 801ce28:	4603      	mov	r3, r0
 801ce2a:	f083 0301 	eor.w	r3, r3, #1
 801ce2e:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	f000 809b 	beq.w	801cf6c <draw_shadow+0xdd6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801ce36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce3a:	4618      	mov	r0, r3
 801ce3c:	f7fe fba1 	bl	801b582 <lv_area_get_width>
 801ce40:	4603      	mov	r3, r0
 801ce42:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        sh_buf_tmp = sh_buf;
 801ce46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ce4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801ce4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ce52:	3b01      	subs	r3, #1
 801ce54:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ce58:	fb02 f303 	mul.w	r3, r2, r3
 801ce5c:	461a      	mov	r2, r3
 801ce5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ce62:	4413      	add	r3, r2
 801ce64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801ce68:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ce6c:	461a      	mov	r2, r3
 801ce6e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ce72:	4619      	mov	r1, r3
 801ce74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ce78:	1acb      	subs	r3, r1, r3
 801ce7a:	3301      	adds	r3, #1
 801ce7c:	1ad3      	subs	r3, r2, r3
 801ce7e:	461a      	mov	r2, r3
 801ce80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ce84:	4413      	add	r3, r2
 801ce86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801ce8a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d010      	beq.n	801ceb4 <draw_shadow+0xd1e>
 801ce92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ce96:	b21a      	sxth	r2, r3
 801ce98:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ce9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cea0:	4618      	mov	r0, r3
 801cea2:	f003 fec1 	bl	8020c28 <_lv_area_is_out>
 801cea6:	4603      	mov	r3, r0
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d003      	beq.n	801ceb4 <draw_shadow+0xd1e>
 801ceac:	2301      	movs	r3, #1
 801ceae:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801ceb2:	e003      	b.n	801cebc <draw_shadow+0xd26>
        else simple_sub = simple;
 801ceb4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ceb8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801cebc:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d002      	beq.n	801ceca <draw_shadow+0xd34>
 801cec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cec8:	e001      	b.n	801cece <draw_shadow+0xd38>
 801ceca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cece:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801ced0:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	dd49      	ble.n	801cf6c <draw_shadow+0xdd6>
            blend_area.x1 = clip_area_sub.x1;
 801ced8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801cedc:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801cede:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801cee2:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801cee4:	2302      	movs	r3, #2
 801cee6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801ceea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801ceec:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cef0:	e036      	b.n	801cf60 <draw_shadow+0xdca>
                blend_area.y1 = y;
 801cef2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cef6:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801cef8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cefc:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801cefe:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801cf02:	f083 0301 	eor.w	r3, r3, #1
 801cf06:	b2db      	uxtb	r3, r3
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d01c      	beq.n	801cf46 <draw_shadow+0xdb0>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801cf0c:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801cf10:	461a      	mov	r2, r3
 801cf12:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801cf16:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cf1a:	f005 f8b1 	bl	8022080 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801cf1e:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801cf22:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801cf26:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cf2a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cf2e:	f7f4 fce7 	bl	8011900 <lv_draw_mask_apply>
 801cf32:	4603      	mov	r3, r0
 801cf34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801cf38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cf3c:	2b01      	cmp	r3, #1
 801cf3e:	d102      	bne.n	801cf46 <draw_shadow+0xdb0>
 801cf40:	2302      	movs	r3, #2
 801cf42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cf46:	f107 0314 	add.w	r3, r7, #20
 801cf4a:	4619      	mov	r1, r3
 801cf4c:	68f8      	ldr	r0, [r7, #12]
 801cf4e:	f7fa f8a5 	bl	801709c <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801cf52:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cf56:	b29b      	uxth	r3, r3
 801cf58:	3301      	adds	r3, #1
 801cf5a:	b29b      	uxth	r3, r3
 801cf5c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cf60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cf64:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cf68:	429a      	cmp	r2, r3
 801cf6a:	ddc2      	ble.n	801cef2 <draw_shadow+0xd5c>
            }
        }
    }

    /*Mirror the shadow corner buffer horizontally*/
    sh_buf_tmp = sh_buf ;
 801cf6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801cf70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801cf74:	2300      	movs	r3, #0
 801cf76:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cf7a:	e047      	b.n	801d00c <draw_shadow+0xe76>
        int32_t x;
        lv_opa_t * start = sh_buf_tmp;
 801cf7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cf80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 801cf84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cf88:	3b01      	subs	r3, #1
 801cf8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cf8e:	4413      	add	r3, r2
 801cf90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801cf94:	2300      	movs	r3, #0
 801cf96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801cf9a:	e01e      	b.n	801cfda <draw_shadow+0xe44>
            lv_opa_t tmp = *start;
 801cf9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801cfa0:	781b      	ldrb	r3, [r3, #0]
 801cfa2:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
            *start = *end;
 801cfa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cfaa:	781a      	ldrb	r2, [r3, #0]
 801cfac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801cfb0:	701a      	strb	r2, [r3, #0]
            *end = tmp;
 801cfb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cfb6:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 801cfba:	701a      	strb	r2, [r3, #0]

            start++;
 801cfbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801cfc0:	3301      	adds	r3, #1
 801cfc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            end--;
 801cfc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cfca:	3b01      	subs	r3, #1
 801cfcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801cfd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cfd4:	3301      	adds	r3, #1
 801cfd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801cfda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	da00      	bge.n	801cfe4 <draw_shadow+0xe4e>
 801cfe2:	3301      	adds	r3, #1
 801cfe4:	105b      	asrs	r3, r3, #1
 801cfe6:	461a      	mov	r2, r3
 801cfe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cfec:	4293      	cmp	r3, r2
 801cfee:	dbd5      	blt.n	801cf9c <draw_shadow+0xe06>
        }
        sh_buf_tmp += corner_size;
 801cff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cff4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cff8:	4413      	add	r3, r2
 801cffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801cffe:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d002:	b29b      	uxth	r3, r3
 801d004:	3301      	adds	r3, #1
 801d006:	b29b      	uxth	r3, r3
 801d008:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d00c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d010:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d014:	429a      	cmp	r2, r3
 801d016:	dcb1      	bgt.n	801cf7c <draw_shadow+0xde6>
    }

    /*Left side*/
    blend_area.x1 = shadow_area.x1;
 801d018:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d01c:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801d01e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d022:	b29a      	uxth	r2, r3
 801d024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d028:	b29b      	uxth	r3, r3
 801d02a:	4413      	add	r3, r2
 801d02c:	b29b      	uxth	r3, r3
 801d02e:	3b01      	subs	r3, #1
 801d030:	b29b      	uxth	r3, r3
 801d032:	b21b      	sxth	r3, r3
 801d034:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801d036:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d03a:	b29a      	uxth	r2, r3
 801d03c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d040:	b29b      	uxth	r3, r3
 801d042:	4413      	add	r3, r2
 801d044:	b29b      	uxth	r3, r3
 801d046:	b21b      	sxth	r3, r3
 801d048:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801d04a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d04e:	b29a      	uxth	r2, r3
 801d050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d054:	b29b      	uxth	r3, r3
 801d056:	1ad3      	subs	r3, r2, r3
 801d058:	b29b      	uxth	r3, r3
 801d05a:	b21b      	sxth	r3, r3
 801d05c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801d05e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d062:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d066:	429a      	cmp	r2, r3
 801d068:	db02      	blt.n	801d070 <draw_shadow+0xeda>
 801d06a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d06e:	e004      	b.n	801d07a <draw_shadow+0xee4>
 801d070:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801d074:	3301      	adds	r3, #1
 801d076:	b29b      	uxth	r3, r3
 801d078:	b21b      	sxth	r3, r3
 801d07a:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801d07c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d080:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d084:	4293      	cmp	r3, r2
 801d086:	bfb8      	it	lt
 801d088:	4613      	movlt	r3, r2
 801d08a:	b21b      	sxth	r3, r3
 801d08c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d08e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d092:	3b01      	subs	r3, #1
 801d094:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d098:	4293      	cmp	r3, r2
 801d09a:	bfa8      	it	ge
 801d09c:	4613      	movge	r3, r2
 801d09e:	b21b      	sxth	r3, r3
 801d0a0:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	689a      	ldr	r2, [r3, #8]
 801d0a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d0aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f003 fb38 	bl	8020724 <_lv_area_intersect>
 801d0b4:	4603      	mov	r3, r0
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	f000 80a7 	beq.w	801d20a <draw_shadow+0x1074>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d0bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d0c0:	b21a      	sxth	r2, r3
 801d0c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d0c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	f003 fd0e 	bl	8020aec <_lv_area_is_in>
 801d0d0:	4603      	mov	r3, r0
 801d0d2:	f083 0301 	eor.w	r3, r3, #1
 801d0d6:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	f000 8096 	beq.w	801d20a <draw_shadow+0x1074>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d0de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7fe fa4d 	bl	801b582 <lv_area_get_width>
 801d0e8:	4603      	mov	r3, r0
 801d0ea:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        sh_buf_tmp = sh_buf;
 801d0ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d0f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801d0f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d0fa:	3b01      	subs	r3, #1
 801d0fc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d100:	fb02 f303 	mul.w	r3, r2, r3
 801d104:	461a      	mov	r2, r3
 801d106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d10a:	4413      	add	r3, r2
 801d10c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d110:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d114:	461a      	mov	r2, r3
 801d116:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d11a:	1ad3      	subs	r3, r2, r3
 801d11c:	461a      	mov	r2, r3
 801d11e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d122:	4413      	add	r3, r2
 801d124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d128:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d010      	beq.n	801d152 <draw_shadow+0xfbc>
 801d130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d134:	b21a      	sxth	r2, r3
 801d136:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d13a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d13e:	4618      	mov	r0, r3
 801d140:	f003 fd72 	bl	8020c28 <_lv_area_is_out>
 801d144:	4603      	mov	r3, r0
 801d146:	2b00      	cmp	r3, #0
 801d148:	d003      	beq.n	801d152 <draw_shadow+0xfbc>
 801d14a:	2301      	movs	r3, #1
 801d14c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d150:	e003      	b.n	801d15a <draw_shadow+0xfc4>
        else simple_sub = simple;
 801d152:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d156:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801d15a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d002      	beq.n	801d168 <draw_shadow+0xfd2>
 801d162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d166:	e001      	b.n	801d16c <draw_shadow+0xfd6>
 801d168:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d16c:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801d16e:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d172:	2b00      	cmp	r3, #0
 801d174:	dd49      	ble.n	801d20a <draw_shadow+0x1074>
            blend_area.x1 = clip_area_sub.x1;
 801d176:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d17a:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d17c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d180:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d182:	2302      	movs	r3, #2
 801d184:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d188:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d18a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d18e:	e036      	b.n	801d1fe <draw_shadow+0x1068>
                blend_area.y1 = y;
 801d190:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d194:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d196:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d19a:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d19c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d1a0:	f083 0301 	eor.w	r3, r3, #1
 801d1a4:	b2db      	uxtb	r3, r3
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d01c      	beq.n	801d1e4 <draw_shadow+0x104e>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801d1aa:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d1ae:	461a      	mov	r2, r3
 801d1b0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d1b4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d1b8:	f004 ff62 	bl	8022080 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d1bc:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d1c0:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d1c4:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d1c8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d1cc:	f7f4 fb98 	bl	8011900 <lv_draw_mask_apply>
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d1d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d1da:	2b01      	cmp	r3, #1
 801d1dc:	d102      	bne.n	801d1e4 <draw_shadow+0x104e>
 801d1de:	2302      	movs	r3, #2
 801d1e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d1e4:	f107 0314 	add.w	r3, r7, #20
 801d1e8:	4619      	mov	r1, r3
 801d1ea:	68f8      	ldr	r0, [r7, #12]
 801d1ec:	f7f9 ff56 	bl	801709c <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d1f0:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d1f4:	b29b      	uxth	r3, r3
 801d1f6:	3301      	adds	r3, #1
 801d1f8:	b29b      	uxth	r3, r3
 801d1fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d1fe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d202:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d206:	429a      	cmp	r2, r3
 801d208:	ddc2      	ble.n	801d190 <draw_shadow+0xffa>
            }
        }
    }

    /*Top left corner*/
    blend_area.x1 = shadow_area.x1;
 801d20a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d20e:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801d210:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d214:	b29a      	uxth	r2, r3
 801d216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d21a:	b29b      	uxth	r3, r3
 801d21c:	4413      	add	r3, r2
 801d21e:	b29b      	uxth	r3, r3
 801d220:	3b01      	subs	r3, #1
 801d222:	b29b      	uxth	r3, r3
 801d224:	b21b      	sxth	r3, r3
 801d226:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801d228:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d22c:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801d22e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d232:	b29a      	uxth	r2, r3
 801d234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d238:	b29b      	uxth	r3, r3
 801d23a:	4413      	add	r3, r2
 801d23c:	b29b      	uxth	r3, r3
 801d23e:	3b01      	subs	r3, #1
 801d240:	b29b      	uxth	r3, r3
 801d242:	b21b      	sxth	r3, r3
 801d244:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d246:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d24a:	3b01      	subs	r3, #1
 801d24c:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d250:	4293      	cmp	r3, r2
 801d252:	bfa8      	it	ge
 801d254:	4613      	movge	r3, r2
 801d256:	b21b      	sxth	r3, r3
 801d258:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801d25a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d25e:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d262:	4293      	cmp	r3, r2
 801d264:	bfa8      	it	ge
 801d266:	4613      	movge	r3, r2
 801d268:	b21b      	sxth	r3, r3
 801d26a:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	689a      	ldr	r2, [r3, #8]
 801d270:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d278:	4618      	mov	r0, r3
 801d27a:	f003 fa53 	bl	8020724 <_lv_area_intersect>
 801d27e:	4603      	mov	r3, r0
 801d280:	2b00      	cmp	r3, #0
 801d282:	f000 80ae 	beq.w	801d3e2 <draw_shadow+0x124c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d28a:	b21a      	sxth	r2, r3
 801d28c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d294:	4618      	mov	r0, r3
 801d296:	f003 fc29 	bl	8020aec <_lv_area_is_in>
 801d29a:	4603      	mov	r3, r0
 801d29c:	f083 0301 	eor.w	r3, r3, #1
 801d2a0:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	f000 809d 	beq.w	801d3e2 <draw_shadow+0x124c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d2a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2ac:	4618      	mov	r0, r3
 801d2ae:	f7fe f968 	bl	801b582 <lv_area_get_width>
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        sh_buf_tmp = sh_buf;
 801d2b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d2bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801d2c0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d2c4:	461a      	mov	r2, r3
 801d2c6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d2ca:	1ad3      	subs	r3, r2, r3
 801d2cc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d2d0:	fb02 f303 	mul.w	r3, r2, r3
 801d2d4:	461a      	mov	r2, r3
 801d2d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d2da:	4413      	add	r3, r2
 801d2dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d2e0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d2e4:	461a      	mov	r2, r3
 801d2e6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d2ea:	1ad3      	subs	r3, r2, r3
 801d2ec:	461a      	mov	r2, r3
 801d2ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d2f2:	4413      	add	r3, r2
 801d2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d2f8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d010      	beq.n	801d322 <draw_shadow+0x118c>
 801d300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d304:	b21a      	sxth	r2, r3
 801d306:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d30a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d30e:	4618      	mov	r0, r3
 801d310:	f003 fc8a 	bl	8020c28 <_lv_area_is_out>
 801d314:	4603      	mov	r3, r0
 801d316:	2b00      	cmp	r3, #0
 801d318:	d003      	beq.n	801d322 <draw_shadow+0x118c>
 801d31a:	2301      	movs	r3, #1
 801d31c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d320:	e003      	b.n	801d32a <draw_shadow+0x1194>
        else simple_sub = simple;
 801d322:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d326:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801d32a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d32e:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801d330:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d334:	2b00      	cmp	r3, #0
 801d336:	dd54      	ble.n	801d3e2 <draw_shadow+0x124c>
            blend_area.x1 = clip_area_sub.x1;
 801d338:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d33c:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d33e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d342:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d344:	2302      	movs	r3, #2
 801d346:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d34a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d34c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d350:	e041      	b.n	801d3d6 <draw_shadow+0x1240>
                blend_area.y1 = y;
 801d352:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d356:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d358:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d35c:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d35e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d362:	f083 0301 	eor.w	r3, r3, #1
 801d366:	b2db      	uxtb	r3, r3
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d01d      	beq.n	801d3a8 <draw_shadow+0x1212>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801d36c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d370:	461a      	mov	r2, r3
 801d372:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d376:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d37a:	f004 fe81 	bl	8022080 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d37e:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d382:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d386:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d38a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d38e:	f7f4 fab7 	bl	8011900 <lv_draw_mask_apply>
 801d392:	4603      	mov	r3, r0
 801d394:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d398:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d39c:	2b01      	cmp	r3, #1
 801d39e:	d106      	bne.n	801d3ae <draw_shadow+0x1218>
 801d3a0:	2302      	movs	r3, #2
 801d3a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801d3a6:	e002      	b.n	801d3ae <draw_shadow+0x1218>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801d3a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d3ac:	623b      	str	r3, [r7, #32]
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d3ae:	f107 0314 	add.w	r3, r7, #20
 801d3b2:	4619      	mov	r1, r3
 801d3b4:	68f8      	ldr	r0, [r7, #12]
 801d3b6:	f7f9 fe71 	bl	801709c <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801d3ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d3be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d3c2:	4413      	add	r3, r2
 801d3c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d3c8:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d3cc:	b29b      	uxth	r3, r3
 801d3ce:	3301      	adds	r3, #1
 801d3d0:	b29b      	uxth	r3, r3
 801d3d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d3d6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d3da:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d3de:	429a      	cmp	r2, r3
 801d3e0:	ddb7      	ble.n	801d352 <draw_shadow+0x11bc>
        }
    }

    /*Bottom left corner.
     *Almost the same as bottom right just read the lines of `sh_buf` from then end*/
    blend_area.x1 = shadow_area.x1 ;
 801d3e2:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d3e6:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801d3e8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d3ec:	b29a      	uxth	r2, r3
 801d3ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d3f2:	b29b      	uxth	r3, r3
 801d3f4:	4413      	add	r3, r2
 801d3f6:	b29b      	uxth	r3, r3
 801d3f8:	3b01      	subs	r3, #1
 801d3fa:	b29b      	uxth	r3, r3
 801d3fc:	b21b      	sxth	r3, r3
 801d3fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801d400:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d404:	b29a      	uxth	r2, r3
 801d406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d40a:	b29b      	uxth	r3, r3
 801d40c:	1ad3      	subs	r3, r2, r3
 801d40e:	b29b      	uxth	r3, r3
 801d410:	3301      	adds	r3, #1
 801d412:	b29b      	uxth	r3, r3
 801d414:	b21b      	sxth	r3, r3
 801d416:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801d418:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d41c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801d41e:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801d422:	3301      	adds	r3, #1
 801d424:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801d428:	4293      	cmp	r3, r2
 801d42a:	bfb8      	it	lt
 801d42c:	4613      	movlt	r3, r2
 801d42e:	b21b      	sxth	r3, r3
 801d430:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d432:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d436:	3b01      	subs	r3, #1
 801d438:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d43c:	4293      	cmp	r3, r2
 801d43e:	bfa8      	it	ge
 801d440:	4613      	movge	r3, r2
 801d442:	b21b      	sxth	r3, r3
 801d444:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	689a      	ldr	r2, [r3, #8]
 801d44a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d44e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d452:	4618      	mov	r0, r3
 801d454:	f003 f966 	bl	8020724 <_lv_area_intersect>
 801d458:	4603      	mov	r3, r0
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	f000 80ae 	beq.w	801d5bc <draw_shadow+0x1426>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d464:	b21a      	sxth	r2, r3
 801d466:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d46a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d46e:	4618      	mov	r0, r3
 801d470:	f003 fb3c 	bl	8020aec <_lv_area_is_in>
 801d474:	4603      	mov	r3, r0
 801d476:	f083 0301 	eor.w	r3, r3, #1
 801d47a:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	f000 809d 	beq.w	801d5bc <draw_shadow+0x1426>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d486:	4618      	mov	r0, r3
 801d488:	f7fe f87b 	bl	801b582 <lv_area_get_width>
 801d48c:	4603      	mov	r3, r0
 801d48e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        sh_buf_tmp = sh_buf;
 801d492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801d49a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d49e:	461a      	mov	r2, r3
 801d4a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d4a4:	1ad3      	subs	r3, r2, r3
 801d4a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d4aa:	fb02 f303 	mul.w	r3, r2, r3
 801d4ae:	461a      	mov	r2, r3
 801d4b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d4b4:	4413      	add	r3, r2
 801d4b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d4ba:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d4be:	461a      	mov	r2, r3
 801d4c0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d4c4:	1ad3      	subs	r3, r2, r3
 801d4c6:	461a      	mov	r2, r3
 801d4c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d4cc:	4413      	add	r3, r2
 801d4ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d4d2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d010      	beq.n	801d4fc <draw_shadow+0x1366>
 801d4da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d4de:	b21a      	sxth	r2, r3
 801d4e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d4e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d4e8:	4618      	mov	r0, r3
 801d4ea:	f003 fb9d 	bl	8020c28 <_lv_area_is_out>
 801d4ee:	4603      	mov	r3, r0
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d003      	beq.n	801d4fc <draw_shadow+0x1366>
 801d4f4:	2301      	movs	r3, #1
 801d4f6:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d4fa:	e003      	b.n	801d504 <draw_shadow+0x136e>
        else simple_sub = simple;
 801d4fc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d500:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801d504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d508:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801d50a:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801d50e:	2b00      	cmp	r3, #0
 801d510:	dd54      	ble.n	801d5bc <draw_shadow+0x1426>
            blend_area.x1 = clip_area_sub.x1;
 801d512:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d516:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d518:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d51c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d51e:	2302      	movs	r3, #2
 801d520:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801d524:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d526:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d52a:	e041      	b.n	801d5b0 <draw_shadow+0x141a>
                blend_area.y1 = y;
 801d52c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d530:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d532:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d536:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d538:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d53c:	f083 0301 	eor.w	r3, r3, #1
 801d540:	b2db      	uxtb	r3, r3
 801d542:	2b00      	cmp	r3, #0
 801d544:	d01d      	beq.n	801d582 <draw_shadow+0x13ec>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801d546:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d54a:	461a      	mov	r2, r3
 801d54c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d550:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d554:	f004 fd94 	bl	8022080 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d558:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d55c:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801d560:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d564:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d568:	f7f4 f9ca 	bl	8011900 <lv_draw_mask_apply>
 801d56c:	4603      	mov	r3, r0
 801d56e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d576:	2b01      	cmp	r3, #1
 801d578:	d106      	bne.n	801d588 <draw_shadow+0x13f2>
 801d57a:	2302      	movs	r3, #2
 801d57c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801d580:	e002      	b.n	801d588 <draw_shadow+0x13f2>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801d582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d586:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d588:	f107 0314 	add.w	r3, r7, #20
 801d58c:	4619      	mov	r1, r3
 801d58e:	68f8      	ldr	r0, [r7, #12]
 801d590:	f7f9 fd84 	bl	801709c <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801d594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d598:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d59c:	4413      	add	r3, r2
 801d59e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801d5a2:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d5a6:	b29b      	uxth	r3, r3
 801d5a8:	3b01      	subs	r3, #1
 801d5aa:	b29b      	uxth	r3, r3
 801d5ac:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d5b0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d5b4:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d5b8:	429a      	cmp	r2, r3
 801d5ba:	dab7      	bge.n	801d52c <draw_shadow+0x1396>
            }
        }
    }

    /*Draw the center rectangle.*/
    blend_area.x1 = shadow_area.x1 + corner_size ;
 801d5bc:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d5c0:	b29a      	uxth	r2, r3
 801d5c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d5c6:	b29b      	uxth	r3, r3
 801d5c8:	4413      	add	r3, r2
 801d5ca:	b29b      	uxth	r3, r3
 801d5cc:	b21b      	sxth	r3, r3
 801d5ce:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801d5d0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801d5d4:	b29a      	uxth	r2, r3
 801d5d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d5da:	b29b      	uxth	r3, r3
 801d5dc:	1ad3      	subs	r3, r2, r3
 801d5de:	b29b      	uxth	r3, r3
 801d5e0:	b21b      	sxth	r3, r3
 801d5e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801d5e4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d5e8:	b29a      	uxth	r2, r3
 801d5ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d5ee:	b29b      	uxth	r3, r3
 801d5f0:	4413      	add	r3, r2
 801d5f2:	b29b      	uxth	r3, r3
 801d5f4:	b21b      	sxth	r3, r3
 801d5f6:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801d5f8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d5fc:	b29a      	uxth	r2, r3
 801d5fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d602:	b29b      	uxth	r3, r3
 801d604:	1ad3      	subs	r3, r2, r3
 801d606:	b29b      	uxth	r3, r3
 801d608:	b21b      	sxth	r3, r3
 801d60a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_dsc.mask_buf = mask_buf;
 801d60c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d610:	623b      	str	r3, [r7, #32]

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	689a      	ldr	r2, [r3, #8]
 801d616:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d61a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d61e:	4618      	mov	r0, r3
 801d620:	f003 f880 	bl	8020724 <_lv_area_intersect>
 801d624:	4603      	mov	r3, r0
 801d626:	2b00      	cmp	r3, #0
 801d628:	d052      	beq.n	801d6d0 <draw_shadow+0x153a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d62a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d62e:	b21a      	sxth	r2, r3
 801d630:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d638:	4618      	mov	r0, r3
 801d63a:	f003 fa57 	bl	8020aec <_lv_area_is_in>
 801d63e:	4603      	mov	r3, r0
 801d640:	f083 0301 	eor.w	r3, r3, #1
 801d644:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d646:	2b00      	cmp	r3, #0
 801d648:	d042      	beq.n	801d6d0 <draw_shadow+0x153a>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d64a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d64e:	4618      	mov	r0, r3
 801d650:	f7fd ff97 	bl	801b582 <lv_area_get_width>
 801d654:	4603      	mov	r3, r0
 801d656:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        if(w > 0) {
 801d65a:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d65e:	2b00      	cmp	r3, #0
 801d660:	dd36      	ble.n	801d6d0 <draw_shadow+0x153a>
            blend_area.x1 = clip_area_sub.x1;
 801d662:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d666:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d668:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d66c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d66e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d670:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d674:	e026      	b.n	801d6c4 <draw_shadow+0x152e>
                blend_area.y1 = y;
 801d676:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d67a:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d67c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d680:	87fb      	strh	r3, [r7, #62]	; 0x3e

                lv_memset_ff(mask_buf, w);
 801d682:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d686:	4619      	mov	r1, r3
 801d688:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d68c:	f005 f81f 	bl	80226ce <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d690:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d694:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d698:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d69c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d6a0:	f7f4 f92e 	bl	8011900 <lv_draw_mask_apply>
 801d6a4:	4603      	mov	r3, r0
 801d6a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d6aa:	f107 0314 	add.w	r3, r7, #20
 801d6ae:	4619      	mov	r1, r3
 801d6b0:	68f8      	ldr	r0, [r7, #12]
 801d6b2:	f7f9 fcf3 	bl	801709c <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d6b6:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d6ba:	b29b      	uxth	r3, r3
 801d6bc:	3301      	adds	r3, #1
 801d6be:	b29b      	uxth	r3, r3
 801d6c0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d6c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d6c8:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d6cc:	429a      	cmp	r2, r3
 801d6ce:	ddd2      	ble.n	801d676 <draw_shadow+0x14e0>
            }
        }
    }

    if(!simple) {
 801d6d0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d6d4:	f083 0301 	eor.w	r3, r3, #1
 801d6d8:	b2db      	uxtb	r3, r3
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d009      	beq.n	801d6f2 <draw_shadow+0x155c>
        lv_draw_mask_free_param(&mask_rout_param);
 801d6de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f7f4 f9a0 	bl	8011a28 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 801d6e8:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	f7f4 f94b 	bl	8011988 <lv_draw_mask_remove_id>
    }
    lv_mem_buf_release(sh_buf);
 801d6f2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801d6f6:	f004 fc6b 	bl	8021fd0 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 801d6fa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d6fe:	f004 fc67 	bl	8021fd0 <lv_mem_buf_release>
 801d702:	e006      	b.n	801d712 <draw_shadow+0x157c>
    if(dsc->shadow_width == 0) return;
 801d704:	bf00      	nop
 801d706:	e004      	b.n	801d712 <draw_shadow+0x157c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801d708:	bf00      	nop
 801d70a:	e002      	b.n	801d712 <draw_shadow+0x157c>
        return;
 801d70c:	bf00      	nop
 801d70e:	e000      	b.n	801d712 <draw_shadow+0x157c>
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801d710:	bf00      	nop
}
 801d712:	37cc      	adds	r7, #204	; 0xcc
 801d714:	46bd      	mov	sp, r7
 801d716:	bd90      	pop	{r4, r7, pc}

0801d718 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 801d718:	b590      	push	{r4, r7, lr}
 801d71a:	b09d      	sub	sp, #116	; 0x74
 801d71c:	af02      	add	r7, sp, #8
 801d71e:	60f8      	str	r0, [r7, #12]
 801d720:	60b9      	str	r1, [r7, #8]
 801d722:	4611      	mov	r1, r2
 801d724:	461a      	mov	r2, r3
 801d726:	460b      	mov	r3, r1
 801d728:	80fb      	strh	r3, [r7, #6]
 801d72a:	4613      	mov	r3, r2
 801d72c:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 801d72e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d732:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 801d734:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d73a:	4413      	add	r3, r2
 801d73c:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 801d73e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d742:	68f9      	ldr	r1, [r7, #12]
 801d744:	4618      	mov	r0, r3
 801d746:	f7fd fefd 	bl	801b544 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 801d74a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	da00      	bge.n	801d754 <shadow_draw_corner_buf+0x3c>
 801d752:	3301      	adds	r3, #1
 801d754:	105b      	asrs	r3, r3, #1
 801d756:	b21b      	sxth	r3, r3
 801d758:	b29a      	uxth	r2, r3
 801d75a:	88bb      	ldrh	r3, [r7, #4]
 801d75c:	4413      	add	r3, r2
 801d75e:	b29a      	uxth	r2, r3
 801d760:	88fb      	ldrh	r3, [r7, #6]
 801d762:	f003 0301 	and.w	r3, r3, #1
 801d766:	2b00      	cmp	r3, #0
 801d768:	bf0c      	ite	eq
 801d76a:	2301      	moveq	r3, #1
 801d76c:	2300      	movne	r3, #0
 801d76e:	b2db      	uxtb	r3, r3
 801d770:	b29b      	uxth	r3, r3
 801d772:	1ad3      	subs	r3, r2, r3
 801d774:	b29b      	uxth	r3, r3
 801d776:	3b01      	subs	r3, #1
 801d778:	b29b      	uxth	r3, r3
 801d77a:	b21b      	sxth	r3, r3
 801d77c:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y1 = sw / 2 + 1;
 801d77e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d782:	2b00      	cmp	r3, #0
 801d784:	da00      	bge.n	801d788 <shadow_draw_corner_buf+0x70>
 801d786:	3301      	adds	r3, #1
 801d788:	105b      	asrs	r3, r3, #1
 801d78a:	b21b      	sxth	r3, r3
 801d78c:	b29b      	uxth	r3, r3
 801d78e:	3301      	adds	r3, #1
 801d790:	b29b      	uxth	r3, r3
 801d792:	b21b      	sxth	r3, r3
 801d794:	85fb      	strh	r3, [r7, #46]	; 0x2e

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 801d796:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d79a:	b29c      	uxth	r4, r3
 801d79c:	68f8      	ldr	r0, [r7, #12]
 801d79e:	f7fd fef0 	bl	801b582 <lv_area_get_width>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	b29b      	uxth	r3, r3
 801d7a6:	1ae3      	subs	r3, r4, r3
 801d7a8:	b29b      	uxth	r3, r3
 801d7aa:	b21b      	sxth	r3, r3
 801d7ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 801d7ae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d7b2:	b29c      	uxth	r4, r3
 801d7b4:	68f8      	ldr	r0, [r7, #12]
 801d7b6:	f7fd fefb 	bl	801b5b0 <lv_area_get_height>
 801d7ba:	4603      	mov	r3, r0
 801d7bc:	b29b      	uxth	r3, r3
 801d7be:	4423      	add	r3, r4
 801d7c0:	b29b      	uxth	r3, r3
 801d7c2:	b21b      	sxth	r3, r3
 801d7c4:	867b      	strh	r3, [r7, #50]	; 0x32

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 801d7c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801d7ca:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801d7ce:	f107 0014 	add.w	r0, r7, #20
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	f7f4 fc2e 	bl	8012034 <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 801d7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d7da:	2b01      	cmp	r3, #1
 801d7dc:	d102      	bne.n	801d7e4 <shadow_draw_corner_buf+0xcc>
 801d7de:	2301      	movs	r3, #1
 801d7e0:	80fb      	strh	r3, [r7, #6]
 801d7e2:	e002      	b.n	801d7ea <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 801d7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d7e6:	105b      	asrs	r3, r3, #1
 801d7e8:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 801d7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d7ec:	4618      	mov	r0, r3
 801d7ee:	f004 fb43 	bl	8021e78 <lv_mem_buf_get>
 801d7f2:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 801d7f4:	68bb      	ldr	r3, [r7, #8]
 801d7f6:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801d7f8:	2300      	movs	r3, #0
 801d7fa:	667b      	str	r3, [r7, #100]	; 0x64
 801d7fc:	e062      	b.n	801d8c4 <shadow_draw_corner_buf+0x1ac>
        lv_memset_ff(mask_line, size);
 801d7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d800:	4619      	mov	r1, r3
 801d802:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d804:	f004 ff63 	bl	80226ce <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 801d808:	697c      	ldr	r4, [r7, #20]
 801d80a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d80c:	b21a      	sxth	r2, r3
 801d80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d810:	b219      	sxth	r1, r3
 801d812:	f107 0314 	add.w	r3, r7, #20
 801d816:	9300      	str	r3, [sp, #0]
 801d818:	460b      	mov	r3, r1
 801d81a:	2100      	movs	r1, #0
 801d81c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d81e:	47a0      	blx	r4
 801d820:	4603      	mov	r3, r0
 801d822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801d826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d106      	bne.n	801d83c <shadow_draw_corner_buf+0x124>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 801d82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d830:	005b      	lsls	r3, r3, #1
 801d832:	4619      	mov	r1, r3
 801d834:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d836:	f004 fec9 	bl	80225cc <lv_memset_00>
 801d83a:	e03b      	b.n	801d8b4 <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 801d83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d83e:	781b      	ldrb	r3, [r3, #0]
 801d840:	019a      	lsls	r2, r3, #6
 801d842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d846:	fb92 f3f3 	sdiv	r3, r2, r3
 801d84a:	b29a      	uxth	r2, r3
 801d84c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d84e:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801d850:	2301      	movs	r3, #1
 801d852:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d854:	e02a      	b.n	801d8ac <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 801d856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d85a:	4413      	add	r3, r2
 801d85c:	781a      	ldrb	r2, [r3, #0]
 801d85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d860:	3b01      	subs	r3, #1
 801d862:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d864:	440b      	add	r3, r1
 801d866:	781b      	ldrb	r3, [r3, #0]
 801d868:	429a      	cmp	r2, r3
 801d86a:	d10d      	bne.n	801d888 <shadow_draw_corner_buf+0x170>
 801d86c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d86e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801d872:	4413      	add	r3, r2
 801d874:	005b      	lsls	r3, r3, #1
 801d876:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d878:	441a      	add	r2, r3
 801d87a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d87c:	005b      	lsls	r3, r3, #1
 801d87e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d880:	440b      	add	r3, r1
 801d882:	8812      	ldrh	r2, [r2, #0]
 801d884:	801a      	strh	r2, [r3, #0]
 801d886:	e00e      	b.n	801d8a6 <shadow_draw_corner_buf+0x18e>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801d888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d88a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d88c:	4413      	add	r3, r2
 801d88e:	781b      	ldrb	r3, [r3, #0]
 801d890:	019a      	lsls	r2, r3, #6
 801d892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d896:	fb92 f1f3 	sdiv	r1, r2, r3
 801d89a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d89c:	005b      	lsls	r3, r3, #1
 801d89e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d8a0:	4413      	add	r3, r2
 801d8a2:	b28a      	uxth	r2, r1
 801d8a4:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801d8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d8a8:	3301      	adds	r3, #1
 801d8aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d8ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d8b0:	429a      	cmp	r2, r3
 801d8b2:	dbd0      	blt.n	801d856 <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 801d8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d8b6:	005b      	lsls	r3, r3, #1
 801d8b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d8ba:	4413      	add	r3, r2
 801d8bc:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801d8be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d8c0:	3301      	adds	r3, #1
 801d8c2:	667b      	str	r3, [r7, #100]	; 0x64
 801d8c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d8c8:	429a      	cmp	r2, r3
 801d8ca:	db98      	blt.n	801d7fe <shadow_draw_corner_buf+0xe6>
    }
    lv_mem_buf_release(mask_line);
 801d8cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d8ce:	f004 fb7f 	bl	8021fd0 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_param);
 801d8d2:	f107 0314 	add.w	r3, r7, #20
 801d8d6:	4618      	mov	r0, r3
 801d8d8:	f7f4 f8a6 	bl	8011a28 <lv_draw_mask_free_param>

    if(sw == 1) {
 801d8dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d8e0:	2b01      	cmp	r3, #1
 801d8e2:	d11a      	bne.n	801d91a <shadow_draw_corner_buf+0x202>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801d8e4:	68bb      	ldr	r3, [r7, #8]
 801d8e6:	63bb      	str	r3, [r7, #56]	; 0x38
        for(i = 0; i < size * size; i++) {
 801d8e8:	2300      	movs	r3, #0
 801d8ea:	65bb      	str	r3, [r7, #88]	; 0x58
 801d8ec:	e00e      	b.n	801d90c <shadow_draw_corner_buf+0x1f4>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 801d8ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d8f0:	005b      	lsls	r3, r3, #1
 801d8f2:	68ba      	ldr	r2, [r7, #8]
 801d8f4:	4413      	add	r3, r2
 801d8f6:	881b      	ldrh	r3, [r3, #0]
 801d8f8:	099b      	lsrs	r3, r3, #6
 801d8fa:	b299      	uxth	r1, r3
 801d8fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d8fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d900:	4413      	add	r3, r2
 801d902:	b2ca      	uxtb	r2, r1
 801d904:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 801d906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d908:	3301      	adds	r3, #1
 801d90a:	65bb      	str	r3, [r7, #88]	; 0x58
 801d90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d90e:	fb03 f303 	mul.w	r3, r3, r3
 801d912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d914:	429a      	cmp	r2, r3
 801d916:	dbea      	blt.n	801d8ee <shadow_draw_corner_buf+0x1d6>
        }
        return;
 801d918:	e070      	b.n	801d9fc <shadow_draw_corner_buf+0x2e4>
    }

    shadow_blur_corner(size, sw, sh_buf);
 801d91a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d91c:	b21b      	sxth	r3, r3
 801d91e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801d922:	68ba      	ldr	r2, [r7, #8]
 801d924:	4618      	mov	r0, r3
 801d926:	f000 f86c 	bl	801da02 <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 801d92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d92c:	b29b      	uxth	r3, r3
 801d92e:	f003 0301 	and.w	r3, r3, #1
 801d932:	b29a      	uxth	r2, r3
 801d934:	88fb      	ldrh	r3, [r7, #6]
 801d936:	4413      	add	r3, r2
 801d938:	b29b      	uxth	r3, r3
 801d93a:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 801d93c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d940:	2b01      	cmp	r3, #1
 801d942:	dd43      	ble.n	801d9cc <shadow_draw_corner_buf+0x2b4>
        uint32_t i;
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 801d944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d948:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801d94c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d950:	643b      	str	r3, [r7, #64]	; 0x40
        for(i = 0; i < (uint32_t)size * size; i++) {
 801d952:	2300      	movs	r3, #0
 801d954:	657b      	str	r3, [r7, #84]	; 0x54
 801d956:	e02a      	b.n	801d9ae <shadow_draw_corner_buf+0x296>
            if(sh_buf[i] == 0) continue;
 801d958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d95a:	005b      	lsls	r3, r3, #1
 801d95c:	68ba      	ldr	r2, [r7, #8]
 801d95e:	4413      	add	r3, r2
 801d960:	881b      	ldrh	r3, [r3, #0]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d01f      	beq.n	801d9a6 <shadow_draw_corner_buf+0x28e>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 801d966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d968:	005b      	lsls	r3, r3, #1
 801d96a:	68ba      	ldr	r2, [r7, #8]
 801d96c:	4413      	add	r3, r2
 801d96e:	881b      	ldrh	r3, [r3, #0]
 801d970:	2bff      	cmp	r3, #255	; 0xff
 801d972:	d107      	bne.n	801d984 <shadow_draw_corner_buf+0x26c>
 801d974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d976:	005b      	lsls	r3, r3, #1
 801d978:	68ba      	ldr	r2, [r7, #8]
 801d97a:	4413      	add	r3, r2
 801d97c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d97e:	b292      	uxth	r2, r2
 801d980:	801a      	strh	r2, [r3, #0]
 801d982:	e011      	b.n	801d9a8 <shadow_draw_corner_buf+0x290>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801d984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d986:	005b      	lsls	r3, r3, #1
 801d988:	68ba      	ldr	r2, [r7, #8]
 801d98a:	4413      	add	r3, r2
 801d98c:	881b      	ldrh	r3, [r3, #0]
 801d98e:	019a      	lsls	r2, r3, #6
 801d990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d994:	fb92 f1f3 	sdiv	r1, r2, r3
 801d998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d99a:	005b      	lsls	r3, r3, #1
 801d99c:	68ba      	ldr	r2, [r7, #8]
 801d99e:	4413      	add	r3, r2
 801d9a0:	b28a      	uxth	r2, r1
 801d9a2:	801a      	strh	r2, [r3, #0]
 801d9a4:	e000      	b.n	801d9a8 <shadow_draw_corner_buf+0x290>
            if(sh_buf[i] == 0) continue;
 801d9a6:	bf00      	nop
        for(i = 0; i < (uint32_t)size * size; i++) {
 801d9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d9aa:	3301      	adds	r3, #1
 801d9ac:	657b      	str	r3, [r7, #84]	; 0x54
 801d9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d9b2:	fb02 f303 	mul.w	r3, r2, r3
 801d9b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9b8:	429a      	cmp	r2, r3
 801d9ba:	d3cd      	bcc.n	801d958 <shadow_draw_corner_buf+0x240>
        }

        shadow_blur_corner(size, sw, sh_buf);
 801d9bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9be:	b21b      	sxth	r3, r3
 801d9c0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801d9c4:	68ba      	ldr	r2, [r7, #8]
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	f000 f81b 	bl	801da02 <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801d9cc:	68bb      	ldr	r3, [r7, #8]
 801d9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    for(x = 0; x < size * size; x++) {
 801d9d0:	2300      	movs	r3, #0
 801d9d2:	653b      	str	r3, [r7, #80]	; 0x50
 801d9d4:	e00c      	b.n	801d9f0 <shadow_draw_corner_buf+0x2d8>
        res_buf[x] = sh_buf[x];
 801d9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9d8:	005b      	lsls	r3, r3, #1
 801d9da:	68ba      	ldr	r2, [r7, #8]
 801d9dc:	4413      	add	r3, r2
 801d9de:	8819      	ldrh	r1, [r3, #0]
 801d9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d9e4:	4413      	add	r3, r2
 801d9e6:	b2ca      	uxtb	r2, r1
 801d9e8:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 801d9ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9ec:	3301      	adds	r3, #1
 801d9ee:	653b      	str	r3, [r7, #80]	; 0x50
 801d9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9f2:	fb03 f303 	mul.w	r3, r3, r3
 801d9f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d9f8:	429a      	cmp	r2, r3
 801d9fa:	dbec      	blt.n	801d9d6 <shadow_draw_corner_buf+0x2be>
    }
#endif

}
 801d9fc:	376c      	adds	r7, #108	; 0x6c
 801d9fe:	46bd      	mov	sp, r7
 801da00:	bd90      	pop	{r4, r7, pc}

0801da02 <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 801da02:	b580      	push	{r7, lr}
 801da04:	b092      	sub	sp, #72	; 0x48
 801da06:	af00      	add	r7, sp, #0
 801da08:	4603      	mov	r3, r0
 801da0a:	603a      	str	r2, [r7, #0]
 801da0c:	80fb      	strh	r3, [r7, #6]
 801da0e:	460b      	mov	r3, r1
 801da10:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 801da12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801da16:	105b      	asrs	r3, r3, #1
 801da18:	b21b      	sxth	r3, r3
 801da1a:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t s_right = (sw >> 1);
 801da1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801da20:	105b      	asrs	r3, r3, #1
 801da22:	b21b      	sxth	r3, r3
 801da24:	61bb      	str	r3, [r7, #24]
    if((sw & 1) == 0) s_left--;
 801da26:	88bb      	ldrh	r3, [r7, #4]
 801da28:	f003 0301 	and.w	r3, r3, #1
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d102      	bne.n	801da36 <shadow_blur_corner+0x34>
 801da30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da32:	3b01      	subs	r3, #1
 801da34:	647b      	str	r3, [r7, #68]	; 0x44

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 801da36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801da3a:	005b      	lsls	r3, r3, #1
 801da3c:	4618      	mov	r0, r3
 801da3e:	f004 fa1b 	bl	8021e78 <lv_mem_buf_get>
 801da42:	6178      	str	r0, [r7, #20]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 801da44:	683b      	ldr	r3, [r7, #0]
 801da46:	63bb      	str	r3, [r7, #56]	; 0x38

    for(y = 0; y < size; y++) {
 801da48:	2300      	movs	r3, #0
 801da4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801da4c:	e05f      	b.n	801db0e <shadow_blur_corner+0x10c>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 801da4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801da52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801da56:	4413      	add	r3, r2
 801da58:	005b      	lsls	r3, r3, #1
 801da5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801da5c:	4413      	add	r3, r2
 801da5e:	881b      	ldrh	r3, [r3, #0]
 801da60:	461a      	mov	r2, r3
 801da62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801da66:	fb02 f303 	mul.w	r3, r2, r3
 801da6a:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801da6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801da70:	3b01      	subs	r3, #1
 801da72:	643b      	str	r3, [r7, #64]	; 0x40
 801da74:	e037      	b.n	801dae6 <shadow_blur_corner+0xe4>
            sh_ups_blur_buf[x] = v;
 801da76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801da78:	005b      	lsls	r3, r3, #1
 801da7a:	697a      	ldr	r2, [r7, #20]
 801da7c:	4413      	add	r3, r2
 801da7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801da80:	b292      	uxth	r2, r2
 801da82:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 801da84:	2300      	movs	r3, #0
 801da86:	633b      	str	r3, [r7, #48]	; 0x30
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 801da88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801da8a:	69bb      	ldr	r3, [r7, #24]
 801da8c:	441a      	add	r2, r3
 801da8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801da92:	429a      	cmp	r2, r3
 801da94:	da07      	bge.n	801daa6 <shadow_blur_corner+0xa4>
 801da96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801da98:	69bb      	ldr	r3, [r7, #24]
 801da9a:	4413      	add	r3, r2
 801da9c:	005b      	lsls	r3, r3, #1
 801da9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801daa0:	4413      	add	r3, r2
 801daa2:	881b      	ldrh	r3, [r3, #0]
 801daa4:	633b      	str	r3, [r7, #48]	; 0x30
            v -= right_val;
 801daa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daaa:	1ad3      	subs	r3, r2, r3
 801daac:	637b      	str	r3, [r7, #52]	; 0x34

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 801daae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dab2:	1ad3      	subs	r3, r2, r3
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	dc03      	bgt.n	801dac0 <shadow_blur_corner+0xbe>
 801dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daba:	881b      	ldrh	r3, [r3, #0]
 801dabc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dabe:	e00b      	b.n	801dad8 <shadow_blur_corner+0xd6>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 801dac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dac4:	1ad3      	subs	r3, r2, r3
 801dac6:	461a      	mov	r2, r3
 801dac8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801dacc:	4413      	add	r3, r2
 801dace:	005b      	lsls	r3, r3, #1
 801dad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dad2:	4413      	add	r3, r2
 801dad4:	881b      	ldrh	r3, [r3, #0]
 801dad6:	62fb      	str	r3, [r7, #44]	; 0x2c
            v += left_val;
 801dad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dadc:	4413      	add	r3, r2
 801dade:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801dae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dae2:	3b01      	subs	r3, #1
 801dae4:	643b      	str	r3, [r7, #64]	; 0x40
 801dae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dae8:	2b00      	cmp	r3, #0
 801daea:	dac4      	bge.n	801da76 <shadow_blur_corner+0x74>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 801daec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801daf0:	005b      	lsls	r3, r3, #1
 801daf2:	461a      	mov	r2, r3
 801daf4:	6979      	ldr	r1, [r7, #20]
 801daf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801daf8:	f004 fac2 	bl	8022080 <lv_memcpy>
        sh_ups_tmp_buf += size;
 801dafc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801db00:	005b      	lsls	r3, r3, #1
 801db02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801db04:	4413      	add	r3, r2
 801db06:	63bb      	str	r3, [r7, #56]	; 0x38
    for(y = 0; y < size; y++) {
 801db08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801db0a:	3301      	adds	r3, #1
 801db0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801db0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801db12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801db14:	429a      	cmp	r2, r3
 801db16:	db9a      	blt.n	801da4e <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
 801db18:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801db1c:	613b      	str	r3, [r7, #16]
    uint32_t max_v_div = max_v / sw;
 801db1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801db22:	693a      	ldr	r2, [r7, #16]
 801db24:	fbb2 f3f3 	udiv	r3, r2, r3
 801db28:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (uint32_t)size * size; i++) {
 801db2a:	2300      	movs	r3, #0
 801db2c:	62bb      	str	r3, [r7, #40]	; 0x28
 801db2e:	e02c      	b.n	801db8a <shadow_blur_corner+0x188>
        if(sh_ups_buf[i] == 0) continue;
 801db30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db32:	005b      	lsls	r3, r3, #1
 801db34:	683a      	ldr	r2, [r7, #0]
 801db36:	4413      	add	r3, r2
 801db38:	881b      	ldrh	r3, [r3, #0]
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d021      	beq.n	801db82 <shadow_blur_corner+0x180>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 801db3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db40:	005b      	lsls	r3, r3, #1
 801db42:	683a      	ldr	r2, [r7, #0]
 801db44:	4413      	add	r3, r2
 801db46:	881b      	ldrh	r3, [r3, #0]
 801db48:	461a      	mov	r2, r3
 801db4a:	693b      	ldr	r3, [r7, #16]
 801db4c:	4293      	cmp	r3, r2
 801db4e:	d107      	bne.n	801db60 <shadow_blur_corner+0x15e>
 801db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db52:	005b      	lsls	r3, r3, #1
 801db54:	683a      	ldr	r2, [r7, #0]
 801db56:	4413      	add	r3, r2
 801db58:	68fa      	ldr	r2, [r7, #12]
 801db5a:	b292      	uxth	r2, r2
 801db5c:	801a      	strh	r2, [r3, #0]
 801db5e:	e011      	b.n	801db84 <shadow_blur_corner+0x182>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 801db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db62:	005b      	lsls	r3, r3, #1
 801db64:	683a      	ldr	r2, [r7, #0]
 801db66:	4413      	add	r3, r2
 801db68:	881b      	ldrh	r3, [r3, #0]
 801db6a:	461a      	mov	r2, r3
 801db6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801db70:	fb92 f1f3 	sdiv	r1, r2, r3
 801db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db76:	005b      	lsls	r3, r3, #1
 801db78:	683a      	ldr	r2, [r7, #0]
 801db7a:	4413      	add	r3, r2
 801db7c:	b28a      	uxth	r2, r1
 801db7e:	801a      	strh	r2, [r3, #0]
 801db80:	e000      	b.n	801db84 <shadow_blur_corner+0x182>
        if(sh_ups_buf[i] == 0) continue;
 801db82:	bf00      	nop
    for(i = 0; i < (uint32_t)size * size; i++) {
 801db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db86:	3301      	adds	r3, #1
 801db88:	62bb      	str	r3, [r7, #40]	; 0x28
 801db8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801db8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801db92:	fb02 f303 	mul.w	r3, r2, r3
 801db96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801db98:	429a      	cmp	r2, r3
 801db9a:	d3c9      	bcc.n	801db30 <shadow_blur_corner+0x12e>
    }

    for(x = 0; x < size; x++) {
 801db9c:	2300      	movs	r3, #0
 801db9e:	643b      	str	r3, [r7, #64]	; 0x40
 801dba0:	e090      	b.n	801dcc4 <shadow_blur_corner+0x2c2>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801dba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dba4:	005b      	lsls	r3, r3, #1
 801dba6:	683a      	ldr	r2, [r7, #0]
 801dba8:	4413      	add	r3, r2
 801dbaa:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t v = sh_ups_tmp_buf[0] * sw;
 801dbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbae:	881b      	ldrh	r3, [r3, #0]
 801dbb0:	461a      	mov	r2, r3
 801dbb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dbb6:	fb02 f303 	mul.w	r3, r2, r3
 801dbba:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dbc0:	e05b      	b.n	801dc7a <shadow_blur_corner+0x278>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 801dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	db03      	blt.n	801dbd0 <shadow_blur_corner+0x1ce>
 801dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbca:	119b      	asrs	r3, r3, #6
 801dbcc:	b299      	uxth	r1, r3
 801dbce:	e000      	b.n	801dbd2 <shadow_blur_corner+0x1d0>
 801dbd0:	2100      	movs	r1, #0
 801dbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dbd4:	005b      	lsls	r3, r3, #1
 801dbd6:	697a      	ldr	r2, [r7, #20]
 801dbd8:	4413      	add	r3, r2
 801dbda:	460a      	mov	r2, r1
 801dbdc:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 801dbde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dbe0:	69bb      	ldr	r3, [r7, #24]
 801dbe2:	1ad3      	subs	r3, r2, r3
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	dc03      	bgt.n	801dbf0 <shadow_blur_corner+0x1ee>
 801dbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbea:	881b      	ldrh	r3, [r3, #0]
 801dbec:	623b      	str	r3, [r7, #32]
 801dbee:	e00d      	b.n	801dc0c <shadow_blur_corner+0x20a>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 801dbf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dbf2:	69bb      	ldr	r3, [r7, #24]
 801dbf4:	1ad3      	subs	r3, r2, r3
 801dbf6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801dbfa:	fb03 f202 	mul.w	r2, r3, r2
 801dbfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc00:	4413      	add	r3, r2
 801dc02:	005b      	lsls	r3, r3, #1
 801dc04:	683a      	ldr	r2, [r7, #0]
 801dc06:	4413      	add	r3, r2
 801dc08:	881b      	ldrh	r3, [r3, #0]
 801dc0a:	623b      	str	r3, [r7, #32]
            v -= top_val;
 801dc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc0e:	6a3b      	ldr	r3, [r7, #32]
 801dc10:	1ad3      	subs	r3, r2, r3
 801dc12:	627b      	str	r3, [r7, #36]	; 0x24

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 801dc14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dc16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc18:	4413      	add	r3, r2
 801dc1a:	1c5a      	adds	r2, r3, #1
 801dc1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc20:	429a      	cmp	r2, r3
 801dc22:	da0f      	bge.n	801dc44 <shadow_blur_corner+0x242>
 801dc24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dc26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc28:	4413      	add	r3, r2
 801dc2a:	3301      	adds	r3, #1
 801dc2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801dc30:	fb03 f202 	mul.w	r2, r3, r2
 801dc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc36:	4413      	add	r3, r2
 801dc38:	005b      	lsls	r3, r3, #1
 801dc3a:	683a      	ldr	r2, [r7, #0]
 801dc3c:	4413      	add	r3, r2
 801dc3e:	881b      	ldrh	r3, [r3, #0]
 801dc40:	61fb      	str	r3, [r7, #28]
 801dc42:	e00d      	b.n	801dc60 <shadow_blur_corner+0x25e>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 801dc44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc48:	3b01      	subs	r3, #1
 801dc4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801dc4e:	fb03 f202 	mul.w	r2, r3, r2
 801dc52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc54:	4413      	add	r3, r2
 801dc56:	005b      	lsls	r3, r3, #1
 801dc58:	683a      	ldr	r2, [r7, #0]
 801dc5a:	4413      	add	r3, r2
 801dc5c:	881b      	ldrh	r3, [r3, #0]
 801dc5e:	61fb      	str	r3, [r7, #28]
            v += bottom_val;
 801dc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc62:	69fb      	ldr	r3, [r7, #28]
 801dc64:	4413      	add	r3, r2
 801dc66:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801dc68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc6a:	3301      	adds	r3, #1
 801dc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc72:	005b      	lsls	r3, r3, #1
 801dc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dc76:	4413      	add	r3, r2
 801dc78:	63bb      	str	r3, [r7, #56]	; 0x38
 801dc7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dc80:	429a      	cmp	r2, r3
 801dc82:	db9e      	blt.n	801dbc2 <shadow_blur_corner+0x1c0>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801dc84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc86:	005b      	lsls	r3, r3, #1
 801dc88:	683a      	ldr	r2, [r7, #0]
 801dc8a:	4413      	add	r3, r2
 801dc8c:	63bb      	str	r3, [r7, #56]	; 0x38
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801dc8e:	2300      	movs	r3, #0
 801dc90:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc92:	e00f      	b.n	801dcb4 <shadow_blur_corner+0x2b2>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 801dc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc96:	005b      	lsls	r3, r3, #1
 801dc98:	697a      	ldr	r2, [r7, #20]
 801dc9a:	4413      	add	r3, r2
 801dc9c:	881a      	ldrh	r2, [r3, #0]
 801dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dca0:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801dca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dca4:	3301      	adds	r3, #1
 801dca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dcac:	005b      	lsls	r3, r3, #1
 801dcae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dcb0:	4413      	add	r3, r2
 801dcb2:	63bb      	str	r3, [r7, #56]	; 0x38
 801dcb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dcb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dcba:	429a      	cmp	r2, r3
 801dcbc:	dbea      	blt.n	801dc94 <shadow_blur_corner+0x292>
    for(x = 0; x < size; x++) {
 801dcbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dcc0:	3301      	adds	r3, #1
 801dcc2:	643b      	str	r3, [r7, #64]	; 0x40
 801dcc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dcc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dcca:	429a      	cmp	r2, r3
 801dccc:	f6ff af69 	blt.w	801dba2 <shadow_blur_corner+0x1a0>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 801dcd0:	6978      	ldr	r0, [r7, #20]
 801dcd2:	f004 f97d 	bl	8021fd0 <lv_mem_buf_release>
}
 801dcd6:	bf00      	nop
 801dcd8:	3748      	adds	r7, #72	; 0x48
 801dcda:	46bd      	mov	sp, r7
 801dcdc:	bd80      	pop	{r7, pc}

0801dcde <draw_outline>:
#endif

static void draw_outline(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801dcde:	b5b0      	push	{r4, r5, r7, lr}
 801dce0:	b092      	sub	sp, #72	; 0x48
 801dce2:	af04      	add	r7, sp, #16
 801dce4:	60f8      	str	r0, [r7, #12]
 801dce6:	60b9      	str	r1, [r7, #8]
 801dce8:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801dcea:	68bb      	ldr	r3, [r7, #8]
 801dcec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801dcf0:	2b02      	cmp	r3, #2
 801dcf2:	f240 80b7 	bls.w	801de64 <draw_outline+0x186>
    if(dsc->outline_width == 0) return;
 801dcf6:	68bb      	ldr	r3, [r7, #8]
 801dcf8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	f000 80b3 	beq.w	801de68 <draw_outline+0x18a>

    lv_opa_t opa = dsc->outline_opa;
 801dd02:	68bb      	ldr	r3, [r7, #8]
 801dd04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801dd08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801dd0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801dd10:	2bfd      	cmp	r3, #253	; 0xfd
 801dd12:	d902      	bls.n	801dd1a <draw_outline+0x3c>
 801dd14:	23ff      	movs	r3, #255	; 0xff
 801dd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801dd1a:	f107 0318 	add.w	r3, r7, #24
 801dd1e:	6879      	ldr	r1, [r7, #4]
 801dd20:	4618      	mov	r0, r3
 801dd22:	f7fd fc0f 	bl	801b544 <lv_area_copy>

    /*Bring the outline closer to make sure there is no color bleeding with pad=0*/
    lv_coord_t pad = dsc->outline_pad - 1;
 801dd26:	68bb      	ldr	r3, [r7, #8]
 801dd28:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801dd2c:	b29b      	uxth	r3, r3
 801dd2e:	3b01      	subs	r3, #1
 801dd30:	b29b      	uxth	r3, r3
 801dd32:	863b      	strh	r3, [r7, #48]	; 0x30
    area_inner.x1 -= pad;
 801dd34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801dd38:	b29a      	uxth	r2, r3
 801dd3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dd3c:	1ad3      	subs	r3, r2, r3
 801dd3e:	b29b      	uxth	r3, r3
 801dd40:	b21b      	sxth	r3, r3
 801dd42:	833b      	strh	r3, [r7, #24]
    area_inner.y1 -= pad;
 801dd44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801dd48:	b29a      	uxth	r2, r3
 801dd4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dd4c:	1ad3      	subs	r3, r2, r3
 801dd4e:	b29b      	uxth	r3, r3
 801dd50:	b21b      	sxth	r3, r3
 801dd52:	837b      	strh	r3, [r7, #26]
    area_inner.x2 += pad;
 801dd54:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801dd58:	b29a      	uxth	r2, r3
 801dd5a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dd5c:	4413      	add	r3, r2
 801dd5e:	b29b      	uxth	r3, r3
 801dd60:	b21b      	sxth	r3, r3
 801dd62:	83bb      	strh	r3, [r7, #28]
    area_inner.y2 += pad;
 801dd64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801dd68:	b29a      	uxth	r2, r3
 801dd6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dd6c:	4413      	add	r3, r2
 801dd6e:	b29b      	uxth	r3, r3
 801dd70:	b21b      	sxth	r3, r3
 801dd72:	83fb      	strh	r3, [r7, #30]

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 801dd74:	f107 0218 	add.w	r2, r7, #24
 801dd78:	f107 0310 	add.w	r3, r7, #16
 801dd7c:	4611      	mov	r1, r2
 801dd7e:	4618      	mov	r0, r3
 801dd80:	f7fd fbe0 	bl	801b544 <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 801dd84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801dd88:	b29a      	uxth	r2, r3
 801dd8a:	68bb      	ldr	r3, [r7, #8]
 801dd8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	1ad3      	subs	r3, r2, r3
 801dd94:	b29b      	uxth	r3, r3
 801dd96:	b21b      	sxth	r3, r3
 801dd98:	823b      	strh	r3, [r7, #16]
    area_outer.x2 += dsc->outline_width;
 801dd9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801dd9e:	b29a      	uxth	r2, r3
 801dda0:	68bb      	ldr	r3, [r7, #8]
 801dda2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dda6:	b29b      	uxth	r3, r3
 801dda8:	4413      	add	r3, r2
 801ddaa:	b29b      	uxth	r3, r3
 801ddac:	b21b      	sxth	r3, r3
 801ddae:	82bb      	strh	r3, [r7, #20]
    area_outer.y1 -= dsc->outline_width;
 801ddb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ddb4:	b29a      	uxth	r2, r3
 801ddb6:	68bb      	ldr	r3, [r7, #8]
 801ddb8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ddbc:	b29b      	uxth	r3, r3
 801ddbe:	1ad3      	subs	r3, r2, r3
 801ddc0:	b29b      	uxth	r3, r3
 801ddc2:	b21b      	sxth	r3, r3
 801ddc4:	827b      	strh	r3, [r7, #18]
    area_outer.y2 += dsc->outline_width;
 801ddc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ddca:	b29a      	uxth	r2, r3
 801ddcc:	68bb      	ldr	r3, [r7, #8]
 801ddce:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ddd2:	b29b      	uxth	r3, r3
 801ddd4:	4413      	add	r3, r2
 801ddd6:	b29b      	uxth	r3, r3
 801ddd8:	b21b      	sxth	r3, r3
 801ddda:	82fb      	strh	r3, [r7, #22]


    int32_t inner_w = lv_area_get_width(&area_inner);
 801dddc:	f107 0318 	add.w	r3, r7, #24
 801dde0:	4618      	mov	r0, r3
 801dde2:	f7fd fbce 	bl	801b582 <lv_area_get_width>
 801dde6:	4603      	mov	r3, r0
 801dde8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t inner_h = lv_area_get_height(&area_inner);
 801ddea:	f107 0318 	add.w	r3, r7, #24
 801ddee:	4618      	mov	r0, r3
 801ddf0:	f7fd fbde 	bl	801b5b0 <lv_area_get_height>
 801ddf4:	4603      	mov	r3, r0
 801ddf6:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t rin = dsc->radius;
 801ddf8:	68bb      	ldr	r3, [r7, #8]
 801ddfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ddfe:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t short_side = LV_MIN(inner_w, inner_h);
 801de00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de04:	4293      	cmp	r3, r2
 801de06:	bfa8      	it	ge
 801de08:	4613      	movge	r3, r2
 801de0a:	627b      	str	r3, [r7, #36]	; 0x24
    if(rin > short_side >> 1) rin = short_side >> 1;
 801de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de0e:	105b      	asrs	r3, r3, #1
 801de10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de12:	429a      	cmp	r2, r3
 801de14:	dd02      	ble.n	801de1c <draw_outline+0x13e>
 801de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de18:	105b      	asrs	r3, r3, #1
 801de1a:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t rout = rin + dsc->outline_width;
 801de1c:	68bb      	ldr	r3, [r7, #8]
 801de1e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801de22:	b29a      	uxth	r2, r3
 801de24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de26:	b29b      	uxth	r3, r3
 801de28:	4413      	add	r3, r2
 801de2a:	b29b      	uxth	r3, r3
 801de2c:	847b      	strh	r3, [r7, #34]	; 0x22

    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 801de2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de30:	b21b      	sxth	r3, r3
 801de32:	68ba      	ldr	r2, [r7, #8]
 801de34:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801de38:	68b9      	ldr	r1, [r7, #8]
 801de3a:	7889      	ldrb	r1, [r1, #2]
 801de3c:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 801de40:	f107 0418 	add.w	r4, r7, #24
 801de44:	f107 0010 	add.w	r0, r7, #16
 801de48:	9103      	str	r1, [sp, #12]
 801de4a:	9202      	str	r2, [sp, #8]
 801de4c:	68ba      	ldr	r2, [r7, #8]
 801de4e:	7f92      	ldrb	r2, [r2, #30]
 801de50:	f88d 2004 	strb.w	r2, [sp, #4]
 801de54:	9300      	str	r3, [sp, #0]
 801de56:	462b      	mov	r3, r5
 801de58:	4622      	mov	r2, r4
 801de5a:	4601      	mov	r1, r0
 801de5c:	68f8      	ldr	r0, [r7, #12]
 801de5e:	f000 f807 	bl	801de70 <draw_border_generic>
 801de62:	e002      	b.n	801de6a <draw_outline+0x18c>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801de64:	bf00      	nop
 801de66:	e000      	b.n	801de6a <draw_outline+0x18c>
    if(dsc->outline_width == 0) return;
 801de68:	bf00      	nop
                        dsc->blend_mode);
}
 801de6a:	3738      	adds	r7, #56	; 0x38
 801de6c:	46bd      	mov	sp, r7
 801de6e:	bdb0      	pop	{r4, r5, r7, pc}

0801de70 <draw_border_generic>:

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 801de70:	b580      	push	{r7, lr}
 801de72:	b0a8      	sub	sp, #160	; 0xa0
 801de74:	af02      	add	r7, sp, #8
 801de76:	60f8      	str	r0, [r7, #12]
 801de78:	60b9      	str	r1, [r7, #8]
 801de7a:	607a      	str	r2, [r7, #4]
 801de7c:	807b      	strh	r3, [r7, #2]
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 801de7e:	68b8      	ldr	r0, [r7, #8]
 801de80:	f7f3 fe3c 	bl	8011afc <lv_draw_mask_is_any>
 801de84:	4603      	mov	r3, r0
 801de86:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 801de8a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801de8e:	f083 0301 	eor.w	r3, r3, #1
 801de92:	b2db      	uxtb	r3, r3
 801de94:	2b00      	cmp	r3, #0
 801de96:	d012      	beq.n	801debe <draw_border_generic+0x4e>
 801de98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d10e      	bne.n	801debe <draw_border_generic+0x4e>
 801dea0:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d10a      	bne.n	801debe <draw_border_generic+0x4e>
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 801dea8:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801deac:	9300      	str	r3, [sp, #0]
 801deae:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801deb2:	687a      	ldr	r2, [r7, #4]
 801deb4:	68b9      	ldr	r1, [r7, #8]
 801deb6:	68f8      	ldr	r0, [r7, #12]
 801deb8:	f000 fbb0 	bl	801e61c <draw_border_simple>
        return;
 801debc:	e3ab      	b.n	801e616 <draw_border_generic+0x7a6>
    }

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `coords`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	689a      	ldr	r2, [r3, #8]
 801dec2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dec6:	68b9      	ldr	r1, [r7, #8]
 801dec8:	4618      	mov	r0, r3
 801deca:	f002 fc2b 	bl	8020724 <_lv_area_intersect>
 801dece:	4603      	mov	r3, r0
 801ded0:	f083 0301 	eor.w	r3, r3, #1
 801ded4:	b2db      	uxtb	r3, r3
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	f040 839c 	bne.w	801e614 <draw_border_generic+0x7a4>
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 801dedc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dee0:	4618      	mov	r0, r3
 801dee2:	f7fd fb4e 	bl	801b582 <lv_area_get_width>
 801dee6:	4603      	mov	r3, r0
 801dee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801deec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801def0:	211c      	movs	r1, #28
 801def2:	4618      	mov	r0, r3
 801def4:	f004 fb6a 	bl	80225cc <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 801def8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801defc:	4618      	mov	r0, r3
 801defe:	f003 ffbb 	bl	8021e78 <lv_mem_buf_get>
 801df02:	4603      	mov	r3, r0
 801df04:	663b      	str	r3, [r7, #96]	; 0x60


    /*Create mask for the outer area*/
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801df06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801df0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0) {
 801df0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801df12:	2b00      	cmp	r3, #0
 801df14:	dd10      	ble.n	801df38 <draw_border_generic+0xc8>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 801df16:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801df1a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801df1e:	2300      	movs	r3, #0
 801df20:	68b9      	ldr	r1, [r7, #8]
 801df22:	f7f4 f887 	bl	8012034 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801df26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801df2a:	2100      	movs	r1, #0
 801df2c:	4618      	mov	r0, r3
 801df2e:	f7f3 fcb5 	bl	801189c <lv_draw_mask_add>
 801df32:	4603      	mov	r3, r0
 801df34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    }

    /*Create mask for the inner mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 801df38:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	; 0xa0
 801df3c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801df40:	2301      	movs	r3, #1
 801df42:	6879      	ldr	r1, [r7, #4]
 801df44:	f7f4 f876 	bl	8012034 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 801df48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801df4c:	2100      	movs	r1, #0
 801df4e:	4618      	mov	r0, r3
 801df50:	f7f3 fca4 	bl	801189c <lv_draw_mask_add>
 801df54:	4603      	mov	r3, r0
 801df56:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t h;
    lv_area_t blend_area;
    blend_dsc.blend_area = &blend_area;
 801df5a:	f107 031c 	add.w	r3, r7, #28
 801df5e:	657b      	str	r3, [r7, #84]	; 0x54
    blend_dsc.mask_area = &blend_area;
 801df60:	f107 031c 	add.w	r3, r7, #28
 801df64:	66bb      	str	r3, [r7, #104]	; 0x68
    blend_dsc.color = color;
 801df66:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801df6a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    blend_dsc.opa = opa;
 801df6e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801df72:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    blend_dsc.blend_mode = blend_mode;
 801df76:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 801df7a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

    /*Calculate the x and y coordinates where the straight parts area*/
    lv_area_t core_area;
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df84:	461a      	mov	r2, r3
 801df86:	68bb      	ldr	r3, [r7, #8]
 801df88:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df8c:	4619      	mov	r1, r3
 801df8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801df92:	440b      	add	r3, r1
 801df94:	4293      	cmp	r3, r2
 801df96:	bfb8      	it	lt
 801df98:	4613      	movlt	r3, r2
 801df9a:	b21b      	sxth	r3, r3
 801df9c:	82bb      	strh	r3, [r7, #20]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dfa4:	461a      	mov	r2, r3
 801dfa6:	68bb      	ldr	r3, [r7, #8]
 801dfa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dfac:	4619      	mov	r1, r3
 801dfae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801dfb2:	1acb      	subs	r3, r1, r3
 801dfb4:	4293      	cmp	r3, r2
 801dfb6:	bfa8      	it	ge
 801dfb8:	4613      	movge	r3, r2
 801dfba:	b21b      	sxth	r3, r3
 801dfbc:	833b      	strh	r3, [r7, #24]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dfc4:	461a      	mov	r2, r3
 801dfc6:	68bb      	ldr	r3, [r7, #8]
 801dfc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dfcc:	4619      	mov	r1, r3
 801dfce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801dfd2:	440b      	add	r3, r1
 801dfd4:	4293      	cmp	r3, r2
 801dfd6:	bfb8      	it	lt
 801dfd8:	4613      	movlt	r3, r2
 801dfda:	b21b      	sxth	r3, r3
 801dfdc:	82fb      	strh	r3, [r7, #22]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801dfe4:	461a      	mov	r2, r3
 801dfe6:	68bb      	ldr	r3, [r7, #8]
 801dfe8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801dfec:	4619      	mov	r1, r3
 801dfee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801dff2:	1acb      	subs	r3, r1, r3
 801dff4:	4293      	cmp	r3, r2
 801dff6:	bfa8      	it	ge
 801dff8:	4613      	movge	r3, r2
 801dffa:	b21b      	sxth	r3, r3
 801dffc:	837b      	strh	r3, [r7, #26]
    lv_coord_t core_w = lv_area_get_width(&core_area);
 801dffe:	f107 0314 	add.w	r3, r7, #20
 801e002:	4618      	mov	r0, r3
 801e004:	f7fd fabd 	bl	801b582 <lv_area_get_width>
 801e008:	4603      	mov	r3, r0
 801e00a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801e00e:	68bb      	ldr	r3, [r7, #8]
 801e010:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e01a:	429a      	cmp	r2, r3
 801e01c:	bfd4      	ite	le
 801e01e:	2301      	movle	r3, #1
 801e020:	2300      	movgt	r3, #0
 801e022:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801e026:	68bb      	ldr	r3, [r7, #8]
 801e028:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e032:	429a      	cmp	r2, r3
 801e034:	bfac      	ite	ge
 801e036:	2301      	movge	r3, #1
 801e038:	2300      	movlt	r3, #0
 801e03a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

    /*If there is other masks, need to draw line by line*/
    if(mask_any) {
 801e03e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801e042:	2b00      	cmp	r3, #0
 801e044:	d077      	beq.n	801e136 <draw_border_generic+0x2c6>
        blend_area.x1 = draw_area.x1;
 801e046:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e04a:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801e04c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e050:	843b      	strh	r3, [r7, #32]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801e052:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e05a:	e045      	b.n	801e0e8 <draw_border_generic+0x278>
            if(!top_side && h < core_area.y1) continue;
 801e05c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e060:	f083 0301 	eor.w	r3, r3, #1
 801e064:	b2db      	uxtb	r3, r3
 801e066:	2b00      	cmp	r3, #0
 801e068:	d006      	beq.n	801e078 <draw_border_generic+0x208>
 801e06a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e06e:	461a      	mov	r2, r3
 801e070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e074:	4293      	cmp	r3, r2
 801e076:	db31      	blt.n	801e0dc <draw_border_generic+0x26c>
            if(!bottom_side && h > core_area.y2) break;
 801e078:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e07c:	f083 0301 	eor.w	r3, r3, #1
 801e080:	b2db      	uxtb	r3, r3
 801e082:	2b00      	cmp	r3, #0
 801e084:	d006      	beq.n	801e094 <draw_border_generic+0x224>
 801e086:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e08a:	461a      	mov	r2, r3
 801e08c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e090:	4293      	cmp	r3, r2
 801e092:	dc31      	bgt.n	801e0f8 <draw_border_generic+0x288>

            blend_area.y1 = h;
 801e094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e098:	b21b      	sxth	r3, r3
 801e09a:	83fb      	strh	r3, [r7, #30]
            blend_area.y2 = h;
 801e09c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e0a0:	b21b      	sxth	r3, r3
 801e0a2:	847b      	strh	r3, [r7, #34]	; 0x22

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801e0a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e0a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801e0aa:	4611      	mov	r1, r2
 801e0ac:	4618      	mov	r0, r3
 801e0ae:	f004 fb0e 	bl	80226ce <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 801e0b2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e0b4:	f9b7 1070 	ldrsh.w	r1, [r7, #112]	; 0x70
 801e0b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e0bc:	b21a      	sxth	r2, r3
 801e0be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e0c2:	b21b      	sxth	r3, r3
 801e0c4:	f7f3 fc1c 	bl	8011900 <lv_draw_mask_apply>
 801e0c8:	4603      	mov	r3, r0
 801e0ca:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e0ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e0d2:	4619      	mov	r1, r3
 801e0d4:	68f8      	ldr	r0, [r7, #12]
 801e0d6:	f7f8 ffe1 	bl	801709c <lv_draw_sw_blend>
 801e0da:	e000      	b.n	801e0de <draw_border_generic+0x26e>
            if(!top_side && h < core_area.y1) continue;
 801e0dc:	bf00      	nop
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801e0de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e0e2:	3301      	adds	r3, #1
 801e0e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e0e8:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e0ec:	461a      	mov	r2, r3
 801e0ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e0f2:	4293      	cmp	r3, r2
 801e0f4:	ddb2      	ble.n	801e05c <draw_border_generic+0x1ec>
 801e0f6:	e000      	b.n	801e0fa <draw_border_generic+0x28a>
            if(!bottom_side && h > core_area.y2) break;
 801e0f8:	bf00      	nop
        }

        lv_draw_mask_free_param(&mask_rin_param);
 801e0fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e0fe:	4618      	mov	r0, r3
 801e100:	f7f3 fc92 	bl	8011a28 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 801e104:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e108:	4618      	mov	r0, r3
 801e10a:	f7f3 fc3d 	bl	8011988 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 801e10e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e116:	d009      	beq.n	801e12c <draw_border_generic+0x2bc>
            lv_draw_mask_free_param(&mask_rout_param);
 801e118:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e11c:	4618      	mov	r0, r3
 801e11e:	f7f3 fc83 	bl	8011a28 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 801e122:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e126:	4618      	mov	r0, r3
 801e128:	f7f3 fc2e 	bl	8011988 <lv_draw_mask_remove_id>
        }
        lv_mem_buf_release(blend_dsc.mask_buf);
 801e12c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e12e:	4618      	mov	r0, r3
 801e130:	f003 ff4e 	bl	8021fd0 <lv_mem_buf_release>
        return;
 801e134:	e26f      	b.n	801e616 <draw_border_generic+0x7a6>
    }

    /*No masks*/
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801e136:	68bb      	ldr	r3, [r7, #8]
 801e138:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e142:	429a      	cmp	r2, r3
 801e144:	bfd4      	ite	le
 801e146:	2301      	movle	r3, #1
 801e148:	2300      	movgt	r3, #0
 801e14a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801e14e:	68bb      	ldr	r3, [r7, #8]
 801e150:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e15a:	429a      	cmp	r2, r3
 801e15c:	bfac      	ite	ge
 801e15e:	2301      	movge	r3, #1
 801e160:	2300      	movlt	r3, #0
 801e162:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    bool split_hor = true;
 801e166:	2301      	movs	r3, #1
 801e168:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    if(left_side && right_side && top_side && bottom_side &&
 801e16c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e170:	2b00      	cmp	r3, #0
 801e172:	d012      	beq.n	801e19a <draw_border_generic+0x32a>
 801e174:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d00e      	beq.n	801e19a <draw_border_generic+0x32a>
 801e17c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e180:	2b00      	cmp	r3, #0
 801e182:	d00a      	beq.n	801e19a <draw_border_generic+0x32a>
 801e184:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d006      	beq.n	801e19a <draw_border_generic+0x32a>
 801e18c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e190:	2b31      	cmp	r3, #49	; 0x31
 801e192:	dc02      	bgt.n	801e19a <draw_border_generic+0x32a>
       core_w < SPLIT_LIMIT) {
        split_hor = false;
 801e194:	2300      	movs	r3, #0
 801e196:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801e19a:	2301      	movs	r3, #1
 801e19c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    /*Draw the straight lines first if they are long enough*/
    if(top_side && split_hor) {
 801e1a0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	d01b      	beq.n	801e1e0 <draw_border_generic+0x370>
 801e1a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	d017      	beq.n	801e1e0 <draw_border_generic+0x370>
        blend_area.x1 = core_area.x1;
 801e1b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e1b4:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801e1b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e1ba:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = outer_area->y1;
 801e1bc:	68bb      	ldr	r3, [r7, #8]
 801e1be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e1c2:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = inner_area->y1 - 1;
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e1ca:	b29b      	uxth	r3, r3
 801e1cc:	3b01      	subs	r3, #1
 801e1ce:	b29b      	uxth	r3, r3
 801e1d0:	b21b      	sxth	r3, r3
 801e1d2:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e1d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e1d8:	4619      	mov	r1, r3
 801e1da:	68f8      	ldr	r0, [r7, #12]
 801e1dc:	f7f8 ff5e 	bl	801709c <lv_draw_sw_blend>
    }

    if(bottom_side && split_hor) {
 801e1e0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d01b      	beq.n	801e220 <draw_border_generic+0x3b0>
 801e1e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d017      	beq.n	801e220 <draw_border_generic+0x3b0>
        blend_area.x1 = core_area.x1;
 801e1f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e1f4:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801e1f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e1fa:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = inner_area->y2 + 1;
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e202:	b29b      	uxth	r3, r3
 801e204:	3301      	adds	r3, #1
 801e206:	b29b      	uxth	r3, r3
 801e208:	b21b      	sxth	r3, r3
 801e20a:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = outer_area->y2;
 801e20c:	68bb      	ldr	r3, [r7, #8]
 801e20e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e212:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e218:	4619      	mov	r1, r3
 801e21a:	68f8      	ldr	r0, [r7, #12]
 801e21c:	f7f8 ff3e 	bl	801709c <lv_draw_sw_blend>
    }

    if(left_side) {
 801e220:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e224:	2b00      	cmp	r3, #0
 801e226:	d017      	beq.n	801e258 <draw_border_generic+0x3e8>
        blend_area.x1 = outer_area->x1;
 801e228:	68bb      	ldr	r3, [r7, #8]
 801e22a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e22e:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = inner_area->x1 - 1;
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e236:	b29b      	uxth	r3, r3
 801e238:	3b01      	subs	r3, #1
 801e23a:	b29b      	uxth	r3, r3
 801e23c:	b21b      	sxth	r3, r3
 801e23e:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801e240:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e244:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801e246:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e24a:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e24c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e250:	4619      	mov	r1, r3
 801e252:	68f8      	ldr	r0, [r7, #12]
 801e254:	f7f8 ff22 	bl	801709c <lv_draw_sw_blend>
    }

    if(right_side) {
 801e258:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d017      	beq.n	801e290 <draw_border_generic+0x420>
        blend_area.x1 = inner_area->x2 + 1;
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e266:	b29b      	uxth	r3, r3
 801e268:	3301      	adds	r3, #1
 801e26a:	b29b      	uxth	r3, r3
 801e26c:	b21b      	sxth	r3, r3
 801e26e:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = outer_area->x2;
 801e270:	68bb      	ldr	r3, [r7, #8]
 801e272:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e276:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801e278:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e27c:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801e27e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e282:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e284:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e288:	4619      	mov	r1, r3
 801e28a:	68f8      	ldr	r0, [r7, #12]
 801e28c:	f7f8 ff06 	bl	801709c <lv_draw_sw_blend>

    /*Draw the corners*/
    lv_coord_t blend_w;

    /*Left and right corner together if they are close to each other*/
    if(!split_hor) {
 801e290:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e294:	f083 0301 	eor.w	r3, r3, #1
 801e298:	b2db      	uxtb	r3, r3
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	f000 8081 	beq.w	801e3a2 <draw_border_generic+0x532>
        /*Calculate the top corner and mirror it to the bottom*/
        blend_area.x1 = draw_area.x1;
 801e2a0:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e2a4:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801e2a6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e2aa:	843b      	strh	r3, [r7, #32]
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e2b2:	461a      	mov	r2, r3
 801e2b4:	68bb      	ldr	r3, [r7, #8]
 801e2b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e2ba:	1ad2      	subs	r2, r2, r3
 801e2bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e2c0:	4293      	cmp	r3, r2
 801e2c2:	bfb8      	it	lt
 801e2c4:	4613      	movlt	r3, r2
 801e2c6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        for(h = 0; h < max_h; h++) {
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e2d0:	e060      	b.n	801e394 <draw_border_generic+0x524>
            lv_coord_t top_y = outer_area->y1 + h;
 801e2d2:	68bb      	ldr	r3, [r7, #8]
 801e2d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e2d8:	b29a      	uxth	r2, r3
 801e2da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2de:	b29b      	uxth	r3, r3
 801e2e0:	4413      	add	r3, r2
 801e2e2:	b29b      	uxth	r3, r3
 801e2e4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            lv_coord_t bottom_y = outer_area->y2 - h;
 801e2e8:	68bb      	ldr	r3, [r7, #8]
 801e2ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e2ee:	b29a      	uxth	r2, r3
 801e2f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2f4:	b29b      	uxth	r3, r3
 801e2f6:	1ad3      	subs	r3, r2, r3
 801e2f8:	b29b      	uxth	r3, r3
 801e2fa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801e2fe:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e302:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e306:	429a      	cmp	r2, r3
 801e308:	da05      	bge.n	801e316 <draw_border_generic+0x4a6>
 801e30a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e30e:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801e312:	429a      	cmp	r2, r3
 801e314:	dc38      	bgt.n	801e388 <draw_border_generic+0x518>

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801e316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e318:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801e31c:	4611      	mov	r1, r2
 801e31e:	4618      	mov	r0, r3
 801e320:	f004 f9d5 	bl	80226ce <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 801e324:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e326:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e32a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e32e:	b21b      	sxth	r3, r3
 801e330:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e334:	f7f3 fae4 	bl	8011900 <lv_draw_mask_apply>
 801e338:	4603      	mov	r3, r0
 801e33a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if(top_y >= draw_area.y1) {
 801e33e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e342:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e346:	429a      	cmp	r2, r3
 801e348:	db0b      	blt.n	801e362 <draw_border_generic+0x4f2>
                blend_area.y1 = top_y;
 801e34a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801e34e:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = top_y;
 801e350:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801e354:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e35a:	4619      	mov	r1, r3
 801e35c:	68f8      	ldr	r0, [r7, #12]
 801e35e:	f7f8 fe9d 	bl	801709c <lv_draw_sw_blend>
            }

            if(bottom_y <= draw_area.y2) {
 801e362:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e366:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801e36a:	429a      	cmp	r2, r3
 801e36c:	dc0d      	bgt.n	801e38a <draw_border_generic+0x51a>
                blend_area.y1 = bottom_y;
 801e36e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801e372:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = bottom_y;
 801e374:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801e378:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e37a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e37e:	4619      	mov	r1, r3
 801e380:	68f8      	ldr	r0, [r7, #12]
 801e382:	f7f8 fe8b 	bl	801709c <lv_draw_sw_blend>
 801e386:	e000      	b.n	801e38a <draw_border_generic+0x51a>
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801e388:	bf00      	nop
        for(h = 0; h < max_h; h++) {
 801e38a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e38e:	3301      	adds	r3, #1
 801e390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e394:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801e398:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801e39c:	429a      	cmp	r2, r3
 801e39e:	db98      	blt.n	801e2d2 <draw_border_generic+0x462>
 801e3a0:	e11f      	b.n	801e5e2 <draw_border_generic+0x772>
            }
        }
    }
    else {
        /*Left corners*/
        blend_area.x1 = draw_area.x1;
 801e3a2:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e3a6:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 801e3a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e3ac:	3b01      	subs	r3, #1
 801e3ae:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 801e3b2:	4293      	cmp	r3, r2
 801e3b4:	bfa8      	it	ge
 801e3b6:	4613      	movge	r3, r2
 801e3b8:	b21b      	sxth	r3, r3
 801e3ba:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801e3bc:	f107 031c 	add.w	r3, r7, #28
 801e3c0:	4618      	mov	r0, r3
 801e3c2:	f7fd f8de 	bl	801b582 <lv_area_get_width>
 801e3c6:	4603      	mov	r3, r0
 801e3c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(blend_w > 0) {
 801e3cc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	dd76      	ble.n	801e4c2 <draw_border_generic+0x652>
            if(left_side || top_side) {
 801e3d4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d103      	bne.n	801e3e4 <draw_border_generic+0x574>
 801e3dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d032      	beq.n	801e44a <draw_border_generic+0x5da>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e3e4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e3e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e3ec:	e026      	b.n	801e43c <draw_border_generic+0x5cc>
                    blend_area.y1 = h;
 801e3ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e3f2:	b21b      	sxth	r3, r3
 801e3f4:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e3f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e3fa:	b21b      	sxth	r3, r3
 801e3fc:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e3fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e400:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e404:	4611      	mov	r1, r2
 801e406:	4618      	mov	r0, r3
 801e408:	f004 f961 	bl	80226ce <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e40c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e40e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e412:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e416:	b21a      	sxth	r2, r3
 801e418:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e41c:	f7f3 fa70 	bl	8011900 <lv_draw_mask_apply>
 801e420:	4603      	mov	r3, r0
 801e422:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e426:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e42a:	4619      	mov	r1, r3
 801e42c:	68f8      	ldr	r0, [r7, #12]
 801e42e:	f7f8 fe35 	bl	801709c <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e436:	3301      	adds	r3, #1
 801e438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e43c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e440:	461a      	mov	r2, r3
 801e442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e446:	4293      	cmp	r3, r2
 801e448:	dbd1      	blt.n	801e3ee <draw_border_generic+0x57e>
                }
            }

            if(left_side || bottom_side) {
 801e44a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d103      	bne.n	801e45a <draw_border_generic+0x5ea>
 801e452:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e456:	2b00      	cmp	r3, #0
 801e458:	d033      	beq.n	801e4c2 <draw_border_generic+0x652>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e45a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e45e:	3301      	adds	r3, #1
 801e460:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e464:	e026      	b.n	801e4b4 <draw_border_generic+0x644>
                    blend_area.y1 = h;
 801e466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e46a:	b21b      	sxth	r3, r3
 801e46c:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e46e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e472:	b21b      	sxth	r3, r3
 801e474:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e478:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e47c:	4611      	mov	r1, r2
 801e47e:	4618      	mov	r0, r3
 801e480:	f004 f925 	bl	80226ce <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e484:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e486:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e48a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e48e:	b21a      	sxth	r2, r3
 801e490:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e494:	f7f3 fa34 	bl	8011900 <lv_draw_mask_apply>
 801e498:	4603      	mov	r3, r0
 801e49a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e49e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e4a2:	4619      	mov	r1, r3
 801e4a4:	68f8      	ldr	r0, [r7, #12]
 801e4a6:	f7f8 fdf9 	bl	801709c <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e4aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e4ae:	3301      	adds	r3, #1
 801e4b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e4b4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e4b8:	461a      	mov	r2, r3
 801e4ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e4be:	4293      	cmp	r3, r2
 801e4c0:	ddd1      	ble.n	801e466 <draw_border_generic+0x5f6>
                }
            }
        }

        /*Right corners*/
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 801e4c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e4c6:	3301      	adds	r3, #1
 801e4c8:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 801e4cc:	4293      	cmp	r3, r2
 801e4ce:	bfb8      	it	lt
 801e4d0:	4613      	movlt	r3, r2
 801e4d2:	b21b      	sxth	r3, r3
 801e4d4:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801e4d6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e4da:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801e4dc:	f107 031c 	add.w	r3, r7, #28
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	f7fd f84e 	bl	801b582 <lv_area_get_width>
 801e4e6:	4603      	mov	r3, r0
 801e4e8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if(blend_w > 0) {
 801e4ec:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	dd76      	ble.n	801e5e2 <draw_border_generic+0x772>
            if(right_side || top_side) {
 801e4f4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d103      	bne.n	801e504 <draw_border_generic+0x694>
 801e4fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e500:	2b00      	cmp	r3, #0
 801e502:	d032      	beq.n	801e56a <draw_border_generic+0x6fa>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e504:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e50c:	e026      	b.n	801e55c <draw_border_generic+0x6ec>
                    blend_area.y1 = h;
 801e50e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e512:	b21b      	sxth	r3, r3
 801e514:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e51a:	b21b      	sxth	r3, r3
 801e51c:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e51e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e520:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e524:	4611      	mov	r1, r2
 801e526:	4618      	mov	r0, r3
 801e528:	f004 f8d1 	bl	80226ce <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e52c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e52e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e536:	b21a      	sxth	r2, r3
 801e538:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e53c:	f7f3 f9e0 	bl	8011900 <lv_draw_mask_apply>
 801e540:	4603      	mov	r3, r0
 801e542:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e546:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e54a:	4619      	mov	r1, r3
 801e54c:	68f8      	ldr	r0, [r7, #12]
 801e54e:	f7f8 fda5 	bl	801709c <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e556:	3301      	adds	r3, #1
 801e558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e55c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e560:	461a      	mov	r2, r3
 801e562:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e566:	4293      	cmp	r3, r2
 801e568:	dbd1      	blt.n	801e50e <draw_border_generic+0x69e>
                }
            }

            if(right_side || bottom_side) {
 801e56a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d103      	bne.n	801e57a <draw_border_generic+0x70a>
 801e572:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e576:	2b00      	cmp	r3, #0
 801e578:	d033      	beq.n	801e5e2 <draw_border_generic+0x772>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e57a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e57e:	3301      	adds	r3, #1
 801e580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e584:	e026      	b.n	801e5d4 <draw_border_generic+0x764>
                    blend_area.y1 = h;
 801e586:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e58a:	b21b      	sxth	r3, r3
 801e58c:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e58e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e592:	b21b      	sxth	r3, r3
 801e594:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e598:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e59c:	4611      	mov	r1, r2
 801e59e:	4618      	mov	r0, r3
 801e5a0:	f004 f895 	bl	80226ce <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e5a4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e5a6:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e5aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e5ae:	b21a      	sxth	r2, r3
 801e5b0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e5b4:	f7f3 f9a4 	bl	8011900 <lv_draw_mask_apply>
 801e5b8:	4603      	mov	r3, r0
 801e5ba:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e5be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e5c2:	4619      	mov	r1, r3
 801e5c4:	68f8      	ldr	r0, [r7, #12]
 801e5c6:	f7f8 fd69 	bl	801709c <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e5ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e5ce:	3301      	adds	r3, #1
 801e5d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e5d4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e5d8:	461a      	mov	r2, r3
 801e5da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e5de:	4293      	cmp	r3, r2
 801e5e0:	ddd1      	ble.n	801e586 <draw_border_generic+0x716>
                }
            }
        }
    }

    lv_draw_mask_free_param(&mask_rin_param);
 801e5e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e5e6:	4618      	mov	r0, r3
 801e5e8:	f7f3 fa1e 	bl	8011a28 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 801e5ec:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e5f0:	4618      	mov	r0, r3
 801e5f2:	f7f3 f9c9 	bl	8011988 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 801e5f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e5fa:	4618      	mov	r0, r3
 801e5fc:	f7f3 fa14 	bl	8011a28 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 801e600:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e604:	4618      	mov	r0, r3
 801e606:	f7f3 f9bf 	bl	8011988 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 801e60a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e60c:	4618      	mov	r0, r3
 801e60e:	f003 fcdf 	bl	8021fd0 <lv_mem_buf_release>
 801e612:	e000      	b.n	801e616 <draw_border_generic+0x7a6>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801e614:	bf00      	nop
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
        return;
    }

#endif /*LV_DRAW_COMPLEX*/
}
 801e616:	3798      	adds	r7, #152	; 0x98
 801e618:	46bd      	mov	sp, r7
 801e61a:	bd80      	pop	{r7, pc}

0801e61c <draw_border_simple>:
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 801e61c:	b580      	push	{r7, lr}
 801e61e:	b08e      	sub	sp, #56	; 0x38
 801e620:	af00      	add	r7, sp, #0
 801e622:	60f8      	str	r0, [r7, #12]
 801e624:	60b9      	str	r1, [r7, #8]
 801e626:	607a      	str	r2, [r7, #4]
 801e628:	703b      	strb	r3, [r7, #0]
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 801e62a:	f107 0310 	add.w	r3, r7, #16
 801e62e:	211c      	movs	r1, #28
 801e630:	4618      	mov	r0, r3
 801e632:	f003 ffcb 	bl	80225cc <lv_memset_00>
    blend_dsc.blend_area = &a;
 801e636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e63a:	613b      	str	r3, [r7, #16]
    blend_dsc.color = color;
 801e63c:	783b      	ldrb	r3, [r7, #0]
 801e63e:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = opa;
 801e640:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801e644:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801e648:	68bb      	ldr	r3, [r7, #8]
 801e64a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e654:	429a      	cmp	r2, r3
 801e656:	bfd4      	ite	le
 801e658:	2301      	movle	r3, #1
 801e65a:	2300      	movgt	r3, #0
 801e65c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801e660:	68bb      	ldr	r3, [r7, #8]
 801e662:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e66c:	429a      	cmp	r2, r3
 801e66e:	bfac      	ite	ge
 801e670:	2301      	movge	r3, #1
 801e672:	2300      	movlt	r3, #0
 801e674:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801e678:	68bb      	ldr	r3, [r7, #8]
 801e67a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e684:	429a      	cmp	r2, r3
 801e686:	bfd4      	ite	le
 801e688:	2301      	movle	r3, #1
 801e68a:	2300      	movgt	r3, #0
 801e68c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801e690:	68bb      	ldr	r3, [r7, #8]
 801e692:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e69c:	429a      	cmp	r2, r3
 801e69e:	bfac      	ite	ge
 801e6a0:	2301      	movge	r3, #1
 801e6a2:	2300      	movlt	r3, #0
 801e6a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34


    /*Top*/
    a.x1 = outer_area->x1;
 801e6a8:	68bb      	ldr	r3, [r7, #8]
 801e6aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801e6b0:	68bb      	ldr	r3, [r7, #8]
 801e6b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e6b6:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = outer_area->y1;
 801e6b8:	68bb      	ldr	r3, [r7, #8]
 801e6ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e6be:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = inner_area->y1 - 1;
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e6c6:	b29b      	uxth	r3, r3
 801e6c8:	3b01      	subs	r3, #1
 801e6ca:	b29b      	uxth	r3, r3
 801e6cc:	b21b      	sxth	r3, r3
 801e6ce:	867b      	strh	r3, [r7, #50]	; 0x32
    if(top_side) {
 801e6d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d005      	beq.n	801e6e4 <draw_border_simple+0xc8>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e6d8:	f107 0310 	add.w	r3, r7, #16
 801e6dc:	4619      	mov	r1, r3
 801e6de:	68f8      	ldr	r0, [r7, #12]
 801e6e0:	f7f8 fcdc 	bl	801709c <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e6ea:	b29b      	uxth	r3, r3
 801e6ec:	3301      	adds	r3, #1
 801e6ee:	b29b      	uxth	r3, r3
 801e6f0:	b21b      	sxth	r3, r3
 801e6f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = outer_area->y2;
 801e6f4:	68bb      	ldr	r3, [r7, #8]
 801e6f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e6fa:	867b      	strh	r3, [r7, #50]	; 0x32
    if(bottom_side) {
 801e6fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801e700:	2b00      	cmp	r3, #0
 801e702:	d005      	beq.n	801e710 <draw_border_simple+0xf4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e704:	f107 0310 	add.w	r3, r7, #16
 801e708:	4619      	mov	r1, r3
 801e70a:	68f8      	ldr	r0, [r7, #12]
 801e70c:	f7f8 fcc6 	bl	801709c <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
 801e710:	68bb      	ldr	r3, [r7, #8]
 801e712:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e716:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = inner_area->x1 - 1;
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e71e:	b29b      	uxth	r3, r3
 801e720:	3b01      	subs	r3, #1
 801e722:	b29b      	uxth	r3, r3
 801e724:	b21b      	sxth	r3, r3
 801e726:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 801e728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d003      	beq.n	801e738 <draw_border_simple+0x11c>
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e736:	e002      	b.n	801e73e <draw_border_simple+0x122>
 801e738:	68bb      	ldr	r3, [r7, #8]
 801e73a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e73e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 801e740:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801e744:	2b00      	cmp	r3, #0
 801e746:	d003      	beq.n	801e750 <draw_border_simple+0x134>
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e74e:	e002      	b.n	801e756 <draw_border_simple+0x13a>
 801e750:	68bb      	ldr	r3, [r7, #8]
 801e752:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e756:	867b      	strh	r3, [r7, #50]	; 0x32
    if(left_side) {
 801e758:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d005      	beq.n	801e76c <draw_border_simple+0x150>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e760:	f107 0310 	add.w	r3, r7, #16
 801e764:	4619      	mov	r1, r3
 801e766:	68f8      	ldr	r0, [r7, #12]
 801e768:	f7f8 fc98 	bl	801709c <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e772:	b29b      	uxth	r3, r3
 801e774:	3301      	adds	r3, #1
 801e776:	b29b      	uxth	r3, r3
 801e778:	b21b      	sxth	r3, r3
 801e77a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801e77c:	68bb      	ldr	r3, [r7, #8]
 801e77e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e782:	863b      	strh	r3, [r7, #48]	; 0x30
    if(right_side) {
 801e784:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d005      	beq.n	801e798 <draw_border_simple+0x17c>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e78c:	f107 0310 	add.w	r3, r7, #16
 801e790:	4619      	mov	r1, r3
 801e792:	68f8      	ldr	r0, [r7, #12]
 801e794:	f7f8 fc82 	bl	801709c <lv_draw_sw_blend>
    }
}
 801e798:	bf00      	nop
 801e79a:	3738      	adds	r7, #56	; 0x38
 801e79c:	46bd      	mov	sp, r7
 801e79e:	bd80      	pop	{r7, pc}

0801e7a0 <lv_color_mix>:
{
 801e7a0:	b480      	push	{r7}
 801e7a2:	b085      	sub	sp, #20
 801e7a4:	af00      	add	r7, sp, #0
 801e7a6:	7138      	strb	r0, [r7, #4]
 801e7a8:	7039      	strb	r1, [r7, #0]
 801e7aa:	4613      	mov	r3, r2
 801e7ac:	70fb      	strb	r3, [r7, #3]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 801e7ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	da01      	bge.n	801e7ba <lv_color_mix+0x1a>
 801e7b6:	793b      	ldrb	r3, [r7, #4]
 801e7b8:	e000      	b.n	801e7bc <lv_color_mix+0x1c>
 801e7ba:	783b      	ldrb	r3, [r7, #0]
 801e7bc:	733b      	strb	r3, [r7, #12]
    return ret;
 801e7be:	7b3b      	ldrb	r3, [r7, #12]
}
 801e7c0:	4618      	mov	r0, r3
 801e7c2:	3714      	adds	r7, #20
 801e7c4:	46bd      	mov	sp, r7
 801e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7ca:	4770      	bx	lr

0801e7cc <lv_area_get_width>:
{
 801e7cc:	b480      	push	{r7}
 801e7ce:	b083      	sub	sp, #12
 801e7d0:	af00      	add	r7, sp, #0
 801e7d2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e7da:	b29a      	uxth	r2, r3
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e7e2:	b29b      	uxth	r3, r3
 801e7e4:	1ad3      	subs	r3, r2, r3
 801e7e6:	b29b      	uxth	r3, r3
 801e7e8:	3301      	adds	r3, #1
 801e7ea:	b29b      	uxth	r3, r3
 801e7ec:	b21b      	sxth	r3, r3
}
 801e7ee:	4618      	mov	r0, r3
 801e7f0:	370c      	adds	r7, #12
 801e7f2:	46bd      	mov	sp, r7
 801e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7f8:	4770      	bx	lr

0801e7fa <lv_area_get_height>:
{
 801e7fa:	b480      	push	{r7}
 801e7fc:	b083      	sub	sp, #12
 801e7fe:	af00      	add	r7, sp, #0
 801e800:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e808:	b29a      	uxth	r2, r3
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e810:	b29b      	uxth	r3, r3
 801e812:	1ad3      	subs	r3, r2, r3
 801e814:	b29b      	uxth	r3, r3
 801e816:	3301      	adds	r3, #1
 801e818:	b29b      	uxth	r3, r3
 801e81a:	b21b      	sxth	r3, r3
}
 801e81c:	4618      	mov	r0, r3
 801e81e:	370c      	adds	r7, #12
 801e820:	46bd      	mov	sp, r7
 801e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e826:	4770      	bx	lr

0801e828 <lv_draw_sw_transform>:
 **********************/

void lv_draw_sw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf,
                          lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                          const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801e828:	b590      	push	{r4, r7, lr}
 801e82a:	b0ab      	sub	sp, #172	; 0xac
 801e82c:	af08      	add	r7, sp, #32
 801e82e:	60f8      	str	r0, [r7, #12]
 801e830:	60b9      	str	r1, [r7, #8]
 801e832:	607a      	str	r2, [r7, #4]
 801e834:	807b      	strh	r3, [r7, #2]
    LV_UNUSED(draw_ctx);

    point_transform_dsc_t tr_dsc;
    tr_dsc.angle = -draw_dsc->angle;
 801e836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e83a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e83e:	425b      	negs	r3, r3
 801e840:	63fb      	str	r3, [r7, #60]	; 0x3c
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 801e842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e846:	885b      	ldrh	r3, [r3, #2]
 801e848:	461a      	mov	r2, r3
 801e84a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e84e:	fb93 f3f2 	sdiv	r3, r3, r2
 801e852:	63bb      	str	r3, [r7, #56]	; 0x38
    tr_dsc.pivot = draw_dsc->pivot;
 801e854:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e858:	685b      	ldr	r3, [r3, #4]
 801e85a:	64bb      	str	r3, [r7, #72]	; 0x48

    int32_t angle_low = tr_dsc.angle / 10;
 801e85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e85e:	4aaf      	ldr	r2, [pc, #700]	; (801eb1c <lv_draw_sw_transform+0x2f4>)
 801e860:	fb82 1203 	smull	r1, r2, r2, r3
 801e864:	1092      	asrs	r2, r2, #2
 801e866:	17db      	asrs	r3, r3, #31
 801e868:	1ad3      	subs	r3, r2, r3
 801e86a:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t angle_high = angle_low + 1;
 801e86c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e86e:	3301      	adds	r3, #1
 801e870:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 801e872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e876:	f06f 0109 	mvn.w	r1, #9
 801e87a:	fb01 f303 	mul.w	r3, r1, r3
 801e87e:	4413      	add	r3, r2
 801e880:	673b      	str	r3, [r7, #112]	; 0x70

    int32_t s1 = lv_trigo_sin(angle_low);
 801e882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e884:	b21b      	sxth	r3, r3
 801e886:	4618      	mov	r0, r3
 801e888:	f003 f952 	bl	8021b30 <lv_trigo_sin>
 801e88c:	4603      	mov	r3, r0
 801e88e:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t s2 = lv_trigo_sin(angle_high);
 801e890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e892:	b21b      	sxth	r3, r3
 801e894:	4618      	mov	r0, r3
 801e896:	f003 f94b 	bl	8021b30 <lv_trigo_sin>
 801e89a:	4603      	mov	r3, r0
 801e89c:	66bb      	str	r3, [r7, #104]	; 0x68

    int32_t c1 = lv_trigo_sin(angle_low + 90);
 801e89e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e8a0:	b29b      	uxth	r3, r3
 801e8a2:	335a      	adds	r3, #90	; 0x5a
 801e8a4:	b29b      	uxth	r3, r3
 801e8a6:	b21b      	sxth	r3, r3
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	f003 f941 	bl	8021b30 <lv_trigo_sin>
 801e8ae:	4603      	mov	r3, r0
 801e8b0:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 801e8b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e8b4:	b29b      	uxth	r3, r3
 801e8b6:	335a      	adds	r3, #90	; 0x5a
 801e8b8:	b29b      	uxth	r3, r3
 801e8ba:	b21b      	sxth	r3, r3
 801e8bc:	4618      	mov	r0, r3
 801e8be:	f003 f937 	bl	8021b30 <lv_trigo_sin>
 801e8c2:	4603      	mov	r3, r0
 801e8c4:	663b      	str	r3, [r7, #96]	; 0x60

    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801e8c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e8c8:	f1c3 030a 	rsb	r3, r3, #10
 801e8cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801e8ce:	fb03 f202 	mul.w	r2, r3, r2
 801e8d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e8d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801e8d6:	fb01 f303 	mul.w	r3, r1, r3
 801e8da:	4413      	add	r3, r2
 801e8dc:	4a8f      	ldr	r2, [pc, #572]	; (801eb1c <lv_draw_sw_transform+0x2f4>)
 801e8de:	fb82 1203 	smull	r1, r2, r2, r3
 801e8e2:	1092      	asrs	r2, r2, #2
 801e8e4:	17db      	asrs	r3, r3, #31
 801e8e6:	1ad3      	subs	r3, r2, r3
 801e8e8:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801e8ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e8ec:	f1c3 030a 	rsb	r3, r3, #10
 801e8f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801e8f2:	fb03 f202 	mul.w	r2, r3, r2
 801e8f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e8f8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801e8fa:	fb01 f303 	mul.w	r3, r1, r3
 801e8fe:	4413      	add	r3, r2
 801e900:	4a86      	ldr	r2, [pc, #536]	; (801eb1c <lv_draw_sw_transform+0x2f4>)
 801e902:	fb82 1203 	smull	r1, r2, r2, r3
 801e906:	1092      	asrs	r2, r2, #2
 801e908:	17db      	asrs	r3, r3, #31
 801e90a:	1ad3      	subs	r3, r2, r3
 801e90c:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 801e90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e910:	115b      	asrs	r3, r3, #5
 801e912:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 801e914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e916:	115b      	asrs	r3, r3, #5
 801e918:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 801e91a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801e91e:	021b      	lsls	r3, r3, #8
 801e920:	643b      	str	r3, [r7, #64]	; 0x40
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 801e922:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801e926:	021b      	lsls	r3, r3, #8
 801e928:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t dest_w = lv_area_get_width(dest_area);
 801e92a:	68b8      	ldr	r0, [r7, #8]
 801e92c:	f7ff ff4e 	bl	801e7cc <lv_area_get_width>
 801e930:	4603      	mov	r3, r0
 801e932:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_coord_t dest_h = lv_area_get_height(dest_area);
 801e936:	68b8      	ldr	r0, [r7, #8]
 801e938:	f7ff ff5f 	bl	801e7fa <lv_area_get_height>
 801e93c:	4603      	mov	r3, r0
 801e93e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_coord_t y;
    for(y = 0; y < dest_h; y++) {
 801e942:	2300      	movs	r3, #0
 801e944:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801e948:	e0db      	b.n	801eb02 <lv_draw_sw_transform+0x2da>
        int32_t xs1_ups, ys1_ups, xs2_ups, ys2_ups;

        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 801e94a:	68bb      	ldr	r3, [r7, #8]
 801e94c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e950:	461c      	mov	r4, r3
 801e952:	68bb      	ldr	r3, [r7, #8]
 801e954:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e958:	461a      	mov	r2, r3
 801e95a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e95e:	441a      	add	r2, r3
 801e960:	f107 011c 	add.w	r1, r7, #28
 801e964:	f107 0020 	add.w	r0, r7, #32
 801e968:	f107 0318 	add.w	r3, r7, #24
 801e96c:	9300      	str	r3, [sp, #0]
 801e96e:	460b      	mov	r3, r1
 801e970:	4621      	mov	r1, r4
 801e972:	f000 fbff 	bl	801f174 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 801e976:	68bb      	ldr	r3, [r7, #8]
 801e978:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e97c:	461c      	mov	r4, r3
 801e97e:	68bb      	ldr	r3, [r7, #8]
 801e980:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e984:	461a      	mov	r2, r3
 801e986:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e98a:	441a      	add	r2, r3
 801e98c:	f107 0114 	add.w	r1, r7, #20
 801e990:	f107 0020 	add.w	r0, r7, #32
 801e994:	f107 0310 	add.w	r3, r7, #16
 801e998:	9300      	str	r3, [sp, #0]
 801e99a:	460b      	mov	r3, r1
 801e99c:	4621      	mov	r1, r4
 801e99e:	f000 fbe9 	bl	801f174 <transform_point_upscaled>

        int32_t xs_diff = xs2_ups - xs1_ups;
 801e9a2:	697a      	ldr	r2, [r7, #20]
 801e9a4:	69fb      	ldr	r3, [r7, #28]
 801e9a6:	1ad3      	subs	r3, r2, r3
 801e9a8:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_diff = ys2_ups - ys1_ups;
 801e9aa:	693a      	ldr	r2, [r7, #16]
 801e9ac:	69bb      	ldr	r3, [r7, #24]
 801e9ae:	1ad3      	subs	r3, r2, r3
 801e9b0:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t xs_step_256 = 0;
 801e9b2:	2300      	movs	r3, #0
 801e9b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ys_step_256 = 0;
 801e9b8:	2300      	movs	r3, #0
 801e9ba:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(dest_w > 1) {
 801e9bc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e9c0:	2b01      	cmp	r3, #1
 801e9c2:	dd10      	ble.n	801e9e6 <lv_draw_sw_transform+0x1be>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 801e9c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e9c6:	021a      	lsls	r2, r3, #8
 801e9c8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e9cc:	3b01      	subs	r3, #1
 801e9ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 801e9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e9d8:	021a      	lsls	r2, r3, #8
 801e9da:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e9de:	3b01      	subs	r3, #1
 801e9e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9e4:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        int32_t xs_ups = xs1_ups + 0x80;
 801e9e6:	69fb      	ldr	r3, [r7, #28]
 801e9e8:	3380      	adds	r3, #128	; 0x80
 801e9ea:	653b      	str	r3, [r7, #80]	; 0x50
        int32_t ys_ups = ys1_ups + 0x80;
 801e9ec:	69bb      	ldr	r3, [r7, #24]
 801e9ee:	3380      	adds	r3, #128	; 0x80
 801e9f0:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(draw_dsc->antialias == 0) {
 801e9f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e9f6:	7c1b      	ldrb	r3, [r3, #16]
 801e9f8:	f003 0301 	and.w	r3, r3, #1
 801e9fc:	b2db      	uxtb	r3, r3
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d148      	bne.n	801ea94 <lv_draw_sw_transform+0x26c>
            switch(cf) {
 801ea02:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801ea06:	2b06      	cmp	r3, #6
 801ea08:	d023      	beq.n	801ea52 <lv_draw_sw_transform+0x22a>
 801ea0a:	2b06      	cmp	r3, #6
 801ea0c:	dc63      	bgt.n	801ead6 <lv_draw_sw_transform+0x2ae>
 801ea0e:	2b04      	cmp	r3, #4
 801ea10:	d01f      	beq.n	801ea52 <lv_draw_sw_transform+0x22a>
 801ea12:	2b05      	cmp	r3, #5
 801ea14:	d15f      	bne.n	801ead6 <lv_draw_sw_transform+0x2ae>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    argb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf);
 801ea16:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ea1a:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801ea1e:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801ea22:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801ea26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ea2a:	9206      	str	r2, [sp, #24]
 801ea2c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ea30:	9205      	str	r2, [sp, #20]
 801ea32:	9304      	str	r3, [sp, #16]
 801ea34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ea36:	9303      	str	r3, [sp, #12]
 801ea38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ea3c:	9302      	str	r3, [sp, #8]
 801ea3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea40:	9301      	str	r3, [sp, #4]
 801ea42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea44:	9300      	str	r3, [sp, #0]
 801ea46:	4623      	mov	r3, r4
 801ea48:	4602      	mov	r2, r0
 801ea4a:	6878      	ldr	r0, [r7, #4]
 801ea4c:	f000 f8ee 	bl	801ec2c <argb_no_aa>
                    break;
 801ea50:	e042      	b.n	801ead8 <lv_draw_sw_transform+0x2b0>
                case LV_IMG_CF_TRUE_COLOR:
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    rgb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801ea52:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ea56:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801ea5a:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801ea5e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801ea62:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801ea66:	9207      	str	r2, [sp, #28]
 801ea68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ea6c:	9206      	str	r2, [sp, #24]
 801ea6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ea72:	9205      	str	r2, [sp, #20]
 801ea74:	9304      	str	r3, [sp, #16]
 801ea76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ea78:	9303      	str	r3, [sp, #12]
 801ea7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ea7e:	9302      	str	r3, [sp, #8]
 801ea80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea82:	9301      	str	r3, [sp, #4]
 801ea84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea86:	9300      	str	r3, [sp, #0]
 801ea88:	4623      	mov	r3, r4
 801ea8a:	4602      	mov	r2, r0
 801ea8c:	6878      	ldr	r0, [r7, #4]
 801ea8e:	f000 f847 	bl	801eb20 <rgb_no_aa>
                    break;
 801ea92:	e021      	b.n	801ead8 <lv_draw_sw_transform+0x2b0>
                default:
                    break;
            }
        }
        else {
            argb_and_rgb_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801ea94:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ea98:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801ea9c:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801eaa0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801eaa4:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801eaa8:	9207      	str	r2, [sp, #28]
 801eaaa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801eaae:	9206      	str	r2, [sp, #24]
 801eab0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801eab4:	9205      	str	r2, [sp, #20]
 801eab6:	9304      	str	r3, [sp, #16]
 801eab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801eaba:	9303      	str	r3, [sp, #12]
 801eabc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801eac0:	9302      	str	r3, [sp, #8]
 801eac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eac4:	9301      	str	r3, [sp, #4]
 801eac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eac8:	9300      	str	r3, [sp, #0]
 801eaca:	4623      	mov	r3, r4
 801eacc:	4602      	mov	r2, r0
 801eace:	6878      	ldr	r0, [r7, #4]
 801ead0:	f000 f91d 	bl	801ed0e <argb_and_rgb_aa>
 801ead4:	e000      	b.n	801ead8 <lv_draw_sw_transform+0x2b0>
                    break;
 801ead6:	bf00      	nop
        }

        cbuf += dest_w;
 801ead8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801eadc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801eae0:	4413      	add	r3, r2
 801eae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        abuf += dest_w;
 801eae6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801eaea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801eaee:	4413      	add	r3, r2
 801eaf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for(y = 0; y < dest_h; y++) {
 801eaf4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801eaf8:	b29b      	uxth	r3, r3
 801eafa:	3301      	adds	r3, #1
 801eafc:	b29b      	uxth	r3, r3
 801eafe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801eb02:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801eb06:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801eb0a:	429a      	cmp	r2, r3
 801eb0c:	f6ff af1d 	blt.w	801e94a <lv_draw_sw_transform+0x122>
    }
}
 801eb10:	bf00      	nop
 801eb12:	bf00      	nop
 801eb14:	378c      	adds	r7, #140	; 0x8c
 801eb16:	46bd      	mov	sp, r7
 801eb18:	bd90      	pop	{r4, r7, pc}
 801eb1a:	bf00      	nop
 801eb1c:	66666667 	.word	0x66666667

0801eb20 <rgb_no_aa>:
 **********************/

static void rgb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                      int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                      int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801eb20:	b580      	push	{r7, lr}
 801eb22:	b08c      	sub	sp, #48	; 0x30
 801eb24:	af00      	add	r7, sp, #0
 801eb26:	60f8      	str	r0, [r7, #12]
 801eb28:	4608      	mov	r0, r1
 801eb2a:	4611      	mov	r1, r2
 801eb2c:	461a      	mov	r2, r3
 801eb2e:	4603      	mov	r3, r0
 801eb30:	817b      	strh	r3, [r7, #10]
 801eb32:	460b      	mov	r3, r1
 801eb34:	813b      	strh	r3, [r7, #8]
 801eb36:	4613      	mov	r3, r2
 801eb38:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801eb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb3c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t ys_ups_start = ys_ups;
 801eb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb40:	627b      	str	r3, [r7, #36]	; 0x24
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801eb42:	f7ef fdd1 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 801eb46:	6238      	str	r0, [r7, #32]
    lv_color_t ck = d->driver->color_chroma_key;
 801eb48:	6a3b      	ldr	r3, [r7, #32]
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801eb50:	743b      	strb	r3, [r7, #16]

    lv_memset_ff(abuf, x_end);
 801eb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801eb54:	4619      	mov	r1, r3
 801eb56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801eb58:	f003 fdb9 	bl	80226ce <lv_memset_ff>

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801eb60:	e05a      	b.n	801ec18 <rgb_no_aa+0xf8>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801eb62:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eb66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801eb68:	fb02 f303 	mul.w	r3, r2, r3
 801eb6c:	121b      	asrs	r3, r3, #8
 801eb6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eb70:	4413      	add	r3, r2
 801eb72:	63bb      	str	r3, [r7, #56]	; 0x38
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801eb74:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eb78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eb7a:	fb02 f303 	mul.w	r3, r2, r3
 801eb7e:	121b      	asrs	r3, r3, #8
 801eb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb82:	4413      	add	r3, r2
 801eb84:	63fb      	str	r3, [r7, #60]	; 0x3c

        int32_t xs_int = xs_ups >> 8;
 801eb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb88:	121b      	asrs	r3, r3, #8
 801eb8a:	61fb      	str	r3, [r7, #28]
        int32_t ys_int = ys_ups >> 8;
 801eb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb8e:	121b      	asrs	r3, r3, #8
 801eb90:	61bb      	str	r3, [r7, #24]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801eb92:	69fb      	ldr	r3, [r7, #28]
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	db0c      	blt.n	801ebb2 <rgb_no_aa+0x92>
 801eb98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801eb9c:	69fa      	ldr	r2, [r7, #28]
 801eb9e:	429a      	cmp	r2, r3
 801eba0:	da07      	bge.n	801ebb2 <rgb_no_aa+0x92>
 801eba2:	69bb      	ldr	r3, [r7, #24]
 801eba4:	2b00      	cmp	r3, #0
 801eba6:	db04      	blt.n	801ebb2 <rgb_no_aa+0x92>
 801eba8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ebac:	69ba      	ldr	r2, [r7, #24]
 801ebae:	429a      	cmp	r2, r3
 801ebb0:	db06      	blt.n	801ebc0 <rgb_no_aa+0xa0>
            abuf[x] = 0x00;
 801ebb2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ebb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ebb8:	4413      	add	r3, r2
 801ebba:	2200      	movs	r2, #0
 801ebbc:	701a      	strb	r2, [r3, #0]
 801ebbe:	e013      	b.n	801ebe8 <rgb_no_aa+0xc8>
        }
        else {

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            const uint8_t * src_tmp = src;
 801ebc0:	68fb      	ldr	r3, [r7, #12]
 801ebc2:	617b      	str	r3, [r7, #20]
            src_tmp += ys_int * src_stride + xs_int;
 801ebc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ebc8:	69ba      	ldr	r2, [r7, #24]
 801ebca:	fb03 f202 	mul.w	r2, r3, r2
 801ebce:	69fb      	ldr	r3, [r7, #28]
 801ebd0:	4413      	add	r3, r2
 801ebd2:	461a      	mov	r2, r3
 801ebd4:	697b      	ldr	r3, [r7, #20]
 801ebd6:	4413      	add	r3, r2
 801ebd8:	617b      	str	r3, [r7, #20]
            cbuf[x].full = src_tmp[0];
 801ebda:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ebde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ebe0:	4413      	add	r3, r2
 801ebe2:	697a      	ldr	r2, [r7, #20]
 801ebe4:	7812      	ldrb	r2, [r2, #0]
 801ebe6:	701a      	strb	r2, [r3, #0]
            const uint8_t * src_tmp = src;
            src_tmp += (ys_int * src_stride * sizeof(lv_color_t)) + xs_int * sizeof(lv_color_t);
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
        }
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 801ebe8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ebec:	2b06      	cmp	r3, #6
 801ebee:	d10d      	bne.n	801ec0c <rgb_no_aa+0xec>
 801ebf0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ebf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ebf6:	4413      	add	r3, r2
 801ebf8:	781a      	ldrb	r2, [r3, #0]
 801ebfa:	7c3b      	ldrb	r3, [r7, #16]
 801ebfc:	429a      	cmp	r2, r3
 801ebfe:	d105      	bne.n	801ec0c <rgb_no_aa+0xec>
            abuf[x] = 0x00;
 801ec00:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ec04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ec06:	4413      	add	r3, r2
 801ec08:	2200      	movs	r2, #0
 801ec0a:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801ec0c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ec10:	b29b      	uxth	r3, r3
 801ec12:	3301      	adds	r3, #1
 801ec14:	b29b      	uxth	r3, r3
 801ec16:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ec18:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ec1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ec1e:	429a      	cmp	r2, r3
 801ec20:	dc9f      	bgt.n	801eb62 <rgb_no_aa+0x42>
        }
    }
}
 801ec22:	bf00      	nop
 801ec24:	bf00      	nop
 801ec26:	3730      	adds	r7, #48	; 0x30
 801ec28:	46bd      	mov	sp, r7
 801ec2a:	bd80      	pop	{r7, pc}

0801ec2c <argb_no_aa>:

static void argb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                       int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                       int32_t x_end, lv_color_t * cbuf, uint8_t * abuf)
{
 801ec2c:	b480      	push	{r7}
 801ec2e:	b08b      	sub	sp, #44	; 0x2c
 801ec30:	af00      	add	r7, sp, #0
 801ec32:	60f8      	str	r0, [r7, #12]
 801ec34:	4608      	mov	r0, r1
 801ec36:	4611      	mov	r1, r2
 801ec38:	461a      	mov	r2, r3
 801ec3a:	4603      	mov	r3, r0
 801ec3c:	817b      	strh	r3, [r7, #10]
 801ec3e:	460b      	mov	r3, r1
 801ec40:	813b      	strh	r3, [r7, #8]
 801ec42:	4613      	mov	r3, r2
 801ec44:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec48:	623b      	str	r3, [r7, #32]
    int32_t ys_ups_start = ys_ups;
 801ec4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec4c:	61fb      	str	r3, [r7, #28]

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801ec4e:	2300      	movs	r3, #0
 801ec50:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ec52:	e050      	b.n	801ecf6 <argb_no_aa+0xca>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801ec54:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ec58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ec5a:	fb02 f303 	mul.w	r3, r2, r3
 801ec5e:	121b      	asrs	r3, r3, #8
 801ec60:	6a3a      	ldr	r2, [r7, #32]
 801ec62:	4413      	add	r3, r2
 801ec64:	633b      	str	r3, [r7, #48]	; 0x30
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801ec66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ec6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ec6c:	fb02 f303 	mul.w	r3, r2, r3
 801ec70:	121b      	asrs	r3, r3, #8
 801ec72:	69fa      	ldr	r2, [r7, #28]
 801ec74:	4413      	add	r3, r2
 801ec76:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t xs_int = xs_ups >> 8;
 801ec78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec7a:	121b      	asrs	r3, r3, #8
 801ec7c:	61bb      	str	r3, [r7, #24]
        int32_t ys_int = ys_ups >> 8;
 801ec7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec80:	121b      	asrs	r3, r3, #8
 801ec82:	617b      	str	r3, [r7, #20]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801ec84:	69bb      	ldr	r3, [r7, #24]
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	db0c      	blt.n	801eca4 <argb_no_aa+0x78>
 801ec8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ec8e:	69ba      	ldr	r2, [r7, #24]
 801ec90:	429a      	cmp	r2, r3
 801ec92:	da07      	bge.n	801eca4 <argb_no_aa+0x78>
 801ec94:	697b      	ldr	r3, [r7, #20]
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	db04      	blt.n	801eca4 <argb_no_aa+0x78>
 801ec9a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ec9e:	697a      	ldr	r2, [r7, #20]
 801eca0:	429a      	cmp	r2, r3
 801eca2:	db06      	blt.n	801ecb2 <argb_no_aa+0x86>
            abuf[x] = 0;
 801eca4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801eca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ecaa:	4413      	add	r3, r2
 801ecac:	2200      	movs	r2, #0
 801ecae:	701a      	strb	r2, [r3, #0]
 801ecb0:	e01b      	b.n	801ecea <argb_no_aa+0xbe>
        }
        else {
            const uint8_t * src_tmp = src;
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	613b      	str	r3, [r7, #16]
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801ecb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ecba:	697a      	ldr	r2, [r7, #20]
 801ecbc:	fb03 f202 	mul.w	r2, r3, r2
 801ecc0:	69bb      	ldr	r3, [r7, #24]
 801ecc2:	4413      	add	r3, r2
 801ecc4:	005b      	lsls	r3, r3, #1
 801ecc6:	461a      	mov	r2, r3
 801ecc8:	693b      	ldr	r3, [r7, #16]
 801ecca:	4413      	add	r3, r2
 801eccc:	613b      	str	r3, [r7, #16]

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801ecce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ecd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ecd4:	4413      	add	r3, r2
 801ecd6:	693a      	ldr	r2, [r7, #16]
 801ecd8:	7812      	ldrb	r2, [r2, #0]
 801ecda:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 16
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801ecdc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ece0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ece2:	4413      	add	r3, r2
 801ece4:	693a      	ldr	r2, [r7, #16]
 801ece6:	7852      	ldrb	r2, [r2, #1]
 801ece8:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801ecea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ecee:	b29b      	uxth	r3, r3
 801ecf0:	3301      	adds	r3, #1
 801ecf2:	b29b      	uxth	r3, r3
 801ecf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ecf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ecfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ecfc:	429a      	cmp	r2, r3
 801ecfe:	dca9      	bgt.n	801ec54 <argb_no_aa+0x28>
        }
    }
}
 801ed00:	bf00      	nop
 801ed02:	bf00      	nop
 801ed04:	372c      	adds	r7, #44	; 0x2c
 801ed06:	46bd      	mov	sp, r7
 801ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed0c:	4770      	bx	lr

0801ed0e <argb_and_rgb_aa>:


static void argb_and_rgb_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                            int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                            int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801ed0e:	b590      	push	{r4, r7, lr}
 801ed10:	b09b      	sub	sp, #108	; 0x6c
 801ed12:	af00      	add	r7, sp, #0
 801ed14:	60f8      	str	r0, [r7, #12]
 801ed16:	4608      	mov	r0, r1
 801ed18:	4611      	mov	r1, r2
 801ed1a:	461a      	mov	r2, r3
 801ed1c:	4603      	mov	r3, r0
 801ed1e:	817b      	strh	r3, [r7, #10]
 801ed20:	460b      	mov	r3, r1
 801ed22:	813b      	strh	r3, [r7, #8]
 801ed24:	4613      	mov	r3, r2
 801ed26:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801ed28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ed2a:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t ys_ups_start = ys_ups;
 801ed2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ed2e:	643b      	str	r3, [r7, #64]	; 0x40
    bool has_alpha;
    int32_t px_size;
    lv_color_t ck = {0};
 801ed30:	2300      	movs	r3, #0
 801ed32:	f887 3020 	strb.w	r3, [r7, #32]
    switch(cf) {
 801ed36:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801ed3a:	2b06      	cmp	r3, #6
 801ed3c:	d013      	beq.n	801ed66 <argb_and_rgb_aa+0x58>
 801ed3e:	2b06      	cmp	r3, #6
 801ed40:	f300 8214 	bgt.w	801f16c <argb_and_rgb_aa+0x45e>
 801ed44:	2b04      	cmp	r3, #4
 801ed46:	d002      	beq.n	801ed4e <argb_and_rgb_aa+0x40>
 801ed48:	2b05      	cmp	r3, #5
 801ed4a:	d006      	beq.n	801ed5a <argb_and_rgb_aa+0x4c>
            has_alpha = true;
            px_size = sizeof(lv_color_t);
            break;
#endif
        default:
            return;
 801ed4c:	e20e      	b.n	801f16c <argb_and_rgb_aa+0x45e>
            has_alpha = false;
 801ed4e:	2300      	movs	r3, #0
 801ed50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = sizeof(lv_color_t);
 801ed54:	2301      	movs	r3, #1
 801ed56:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801ed58:	e014      	b.n	801ed84 <argb_and_rgb_aa+0x76>
            has_alpha = true;
 801ed5a:	2301      	movs	r3, #1
 801ed5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 801ed60:	2302      	movs	r3, #2
 801ed62:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801ed64:	e00e      	b.n	801ed84 <argb_and_rgb_aa+0x76>
                has_alpha = true;
 801ed66:	2301      	movs	r3, #1
 801ed68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                px_size = sizeof(lv_color_t);
 801ed6c:	2301      	movs	r3, #1
 801ed6e:	663b      	str	r3, [r7, #96]	; 0x60
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801ed70:	f7ef fcba 	bl	800e6e8 <_lv_refr_get_disp_refreshing>
 801ed74:	63f8      	str	r0, [r7, #60]	; 0x3c
                ck = d->driver->color_chroma_key;
 801ed76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ed7e:	f887 3020 	strb.w	r3, [r7, #32]
                break;
 801ed82:	bf00      	nop
    }

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801ed84:	2300      	movs	r3, #0
 801ed86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801ed8a:	e1e7      	b.n	801f15c <argb_and_rgb_aa+0x44e>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801ed8c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ed90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ed94:	fb02 f303 	mul.w	r3, r2, r3
 801ed98:	121b      	asrs	r3, r3, #8
 801ed9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed9c:	4413      	add	r3, r2
 801ed9e:	67bb      	str	r3, [r7, #120]	; 0x78
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801eda0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801eda4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801eda8:	fb02 f303 	mul.w	r3, r2, r3
 801edac:	121b      	asrs	r3, r3, #8
 801edae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801edb0:	4413      	add	r3, r2
 801edb2:	67fb      	str	r3, [r7, #124]	; 0x7c

        int32_t xs_int = xs_ups >> 8;
 801edb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801edb6:	121b      	asrs	r3, r3, #8
 801edb8:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t ys_int = ys_ups >> 8;
 801edba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801edbc:	121b      	asrs	r3, r3, #8
 801edbe:	637b      	str	r3, [r7, #52]	; 0x34

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801edc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	db0c      	blt.n	801ede0 <argb_and_rgb_aa+0xd2>
 801edc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801edca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801edcc:	429a      	cmp	r2, r3
 801edce:	da07      	bge.n	801ede0 <argb_and_rgb_aa+0xd2>
 801edd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	db04      	blt.n	801ede0 <argb_and_rgb_aa+0xd2>
 801edd6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801edda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801eddc:	429a      	cmp	r2, r3
 801edde:	db07      	blt.n	801edf0 <argb_and_rgb_aa+0xe2>
            abuf[x] = 0x00;
 801ede0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ede4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801ede8:	4413      	add	r3, r2
 801edea:	2200      	movs	r2, #0
 801edec:	701a      	strb	r2, [r3, #0]
            continue;
 801edee:	e1ae      	b.n	801f14e <argb_and_rgb_aa+0x440>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 801edf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801edf2:	b2db      	uxtb	r3, r3
 801edf4:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_fract = ys_ups & 0xFF;
 801edf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801edf8:	b2db      	uxtb	r3, r3
 801edfa:	657b      	str	r3, [r7, #84]	; 0x54

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 801edfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801edfe:	2b7f      	cmp	r3, #127	; 0x7f
 801ee00:	dc08      	bgt.n	801ee14 <argb_and_rgb_aa+0x106>
            x_next = -1;
 801ee02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ee06:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (0x7F - xs_fract) * 2;
 801ee08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ee0a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801ee0e:	005b      	lsls	r3, r3, #1
 801ee10:	65bb      	str	r3, [r7, #88]	; 0x58
 801ee12:	e005      	b.n	801ee20 <argb_and_rgb_aa+0x112>
        }
        else {
            x_next = 1;
 801ee14:	2301      	movs	r3, #1
 801ee16:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (xs_fract - 0x80) * 2;
 801ee18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ee1a:	3b80      	subs	r3, #128	; 0x80
 801ee1c:	005b      	lsls	r3, r3, #1
 801ee1e:	65bb      	str	r3, [r7, #88]	; 0x58
        }
        if(ys_fract < 0x80) {
 801ee20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee22:	2b7f      	cmp	r3, #127	; 0x7f
 801ee24:	dc08      	bgt.n	801ee38 <argb_and_rgb_aa+0x12a>
            y_next = -1;
 801ee26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ee2a:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (0x7F - ys_fract) * 2;
 801ee2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee2e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801ee32:	005b      	lsls	r3, r3, #1
 801ee34:	657b      	str	r3, [r7, #84]	; 0x54
 801ee36:	e005      	b.n	801ee44 <argb_and_rgb_aa+0x136>
        }
        else {
            y_next = 1;
 801ee38:	2301      	movs	r3, #1
 801ee3a:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (ys_fract - 0x80) * 2;
 801ee3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee3e:	3b80      	subs	r3, #128	; 0x80
 801ee40:	005b      	lsls	r3, r3, #1
 801ee42:	657b      	str	r3, [r7, #84]	; 0x54
        }

        const uint8_t * src_tmp = src;
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	633b      	str	r3, [r7, #48]	; 0x30
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 801ee48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ee4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ee4e:	fb02 f303 	mul.w	r3, r2, r3
 801ee52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ee54:	fb03 f202 	mul.w	r2, r3, r2
 801ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801ee5c:	fb01 f303 	mul.w	r3, r1, r3
 801ee60:	4413      	add	r3, r2
 801ee62:	461a      	mov	r2, r3
 801ee64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee66:	4413      	add	r3, r2
 801ee68:	633b      	str	r3, [r7, #48]	; 0x30


        if(xs_int + x_next >= 0 &&
 801ee6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ee6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ee6e:	4413      	add	r3, r2
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	f2c0 80fe 	blt.w	801f072 <argb_and_rgb_aa+0x364>
           xs_int + x_next <= src_w - 1 &&
 801ee76:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801ee7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ee7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ee7e:	440b      	add	r3, r1
        if(xs_int + x_next >= 0 &&
 801ee80:	429a      	cmp	r2, r3
 801ee82:	f340 80f6 	ble.w	801f072 <argb_and_rgb_aa+0x364>
           ys_int + y_next >= 0 &&
 801ee86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ee88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee8a:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	f2c0 80f0 	blt.w	801f072 <argb_and_rgb_aa+0x364>
           ys_int + y_next <= src_h - 1) {
 801ee92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801ee96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ee98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee9a:	440b      	add	r3, r1
           ys_int + y_next >= 0 &&
 801ee9c:	429a      	cmp	r2, r3
 801ee9e:	f340 80e8 	ble.w	801f072 <argb_and_rgb_aa+0x364>

            const uint8_t * px_base = src_tmp;
 801eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eea4:	62fb      	str	r3, [r7, #44]	; 0x2c
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 801eea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eea8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801eeaa:	fb02 f303 	mul.w	r3, r2, r3
 801eeae:	461a      	mov	r2, r3
 801eeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eeb2:	4413      	add	r3, r2
 801eeb4:	62bb      	str	r3, [r7, #40]	; 0x28
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 801eeb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801eeba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801eebc:	fb02 f303 	mul.w	r3, r2, r3
 801eec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801eec2:	fb02 f303 	mul.w	r3, r2, r3
 801eec6:	461a      	mov	r2, r3
 801eec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eeca:	4413      	add	r3, r2
 801eecc:	627b      	str	r3, [r7, #36]	; 0x24
            lv_color_t c_base;
            lv_color_t c_ver;
            lv_color_t c_hor;

            if(has_alpha) {
 801eece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	f000 808e 	beq.w	801eff4 <argb_and_rgb_aa+0x2e6>
                lv_opa_t a_base;
                lv_opa_t a_ver;
                lv_opa_t a_hor;
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801eed8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801eedc:	2b05      	cmp	r3, #5
 801eede:	d10c      	bne.n	801eefa <argb_and_rgb_aa+0x1ec>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eee2:	785b      	ldrb	r3, [r3, #1]
 801eee4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eeea:	785b      	ldrb	r3, [r3, #1]
 801eeec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801eef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eef2:	785b      	ldrb	r3, [r3, #1]
 801eef4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801eef8:	e030      	b.n	801ef5c <argb_and_rgb_aa+0x24e>
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
                }
#endif
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801eefa:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801eefe:	2b06      	cmp	r3, #6
 801ef00:	d123      	bne.n	801ef4a <argb_and_rgb_aa+0x23c>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef04:	781a      	ldrb	r2, [r3, #0]
 801ef06:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ef0a:	429a      	cmp	r2, r3
 801ef0c:	d00b      	beq.n	801ef26 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801ef0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef10:	781a      	ldrb	r2, [r3, #0]
 801ef12:	f897 3020 	ldrb.w	r3, [r7, #32]
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801ef16:	429a      	cmp	r2, r3
 801ef18:	d005      	beq.n	801ef26 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_hor)->full == ck.full) {
 801ef1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef1c:	781a      	ldrb	r2, [r3, #0]
 801ef1e:	f897 3020 	ldrb.w	r3, [r7, #32]
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801ef22:	429a      	cmp	r2, r3
 801ef24:	d107      	bne.n	801ef36 <argb_and_rgb_aa+0x228>
                        abuf[x] = 0x00;
 801ef26:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ef2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801ef2e:	4413      	add	r3, r2
 801ef30:	2200      	movs	r2, #0
 801ef32:	701a      	strb	r2, [r3, #0]
                        continue;
 801ef34:	e10b      	b.n	801f14e <argb_and_rgb_aa+0x440>
                    }
                    else {
                        a_base = 0xff;
 801ef36:	23ff      	movs	r3, #255	; 0xff
 801ef38:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                        a_ver = 0xff;
 801ef3c:	23ff      	movs	r3, #255	; 0xff
 801ef3e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                        a_hor = 0xff;
 801ef42:	23ff      	movs	r3, #255	; 0xff
 801ef44:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801ef48:	e008      	b.n	801ef5c <argb_and_rgb_aa+0x24e>
                    }
                }
                else {
                    a_base = 0xff;
 801ef4a:	23ff      	movs	r3, #255	; 0xff
 801ef4c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = 0xff;
 801ef50:	23ff      	movs	r3, #255	; 0xff
 801ef52:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = 0xff;
 801ef56:	23ff      	movs	r3, #255	; 0xff
 801ef58:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                }

                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 801ef5c:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801ef60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801ef64:	429a      	cmp	r2, r3
 801ef66:	d00f      	beq.n	801ef88 <argb_and_rgb_aa+0x27a>
 801ef68:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801ef6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef6e:	fb03 f202 	mul.w	r2, r3, r2
 801ef72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801ef76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ef78:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801ef7c:	fb01 f303 	mul.w	r3, r1, r3
 801ef80:	4413      	add	r3, r2
 801ef82:	121b      	asrs	r3, r3, #8
 801ef84:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 801ef88:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 801ef8c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801ef90:	429a      	cmp	r2, r3
 801ef92:	d00f      	beq.n	801efb4 <argb_and_rgb_aa+0x2a6>
 801ef94:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801ef98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ef9a:	fb03 f202 	mul.w	r2, r3, r2
 801ef9e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801efa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801efa4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801efa8:	fb01 f303 	mul.w	r3, r1, r3
 801efac:	4413      	add	r3, r2
 801efae:	121b      	asrs	r3, r3, #8
 801efb0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                abuf[x] = (a_ver + a_hor) >> 1;
 801efb4:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801efb8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801efbc:	4413      	add	r3, r2
 801efbe:	1059      	asrs	r1, r3, #1
 801efc0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801efc4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801efc8:	4413      	add	r3, r2
 801efca:	b2ca      	uxtb	r2, r1
 801efcc:	701a      	strb	r2, [r3, #0]

                if(abuf[x] == 0x00) continue;
 801efce:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801efd2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801efd6:	4413      	add	r3, r2
 801efd8:	781b      	ldrb	r3, [r3, #0]
 801efda:	2b00      	cmp	r3, #0
 801efdc:	f000 80b6 	beq.w	801f14c <argb_and_rgb_aa+0x43e>

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
                c_base.full = px_base[0];
 801efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efe2:	781b      	ldrb	r3, [r3, #0]
 801efe4:	773b      	strb	r3, [r7, #28]
                c_ver.full = px_ver[0];
 801efe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efe8:	781b      	ldrb	r3, [r3, #0]
 801efea:	763b      	strb	r3, [r7, #24]
                c_hor.full = px_hor[0];
 801efec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efee:	781b      	ldrb	r3, [r3, #0]
 801eff0:	753b      	strb	r3, [r7, #20]
 801eff2:	e00f      	b.n	801f014 <argb_and_rgb_aa+0x306>
                c_hor.full = *((uint32_t *)px_hor);
#endif
            }
            /*No alpha channel -> RGB*/
            else {
                c_base = *((const lv_color_t *) px_base);
 801eff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eff6:	781b      	ldrb	r3, [r3, #0]
 801eff8:	773b      	strb	r3, [r7, #28]
                c_hor = *((const lv_color_t *) px_hor);
 801effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801effc:	781b      	ldrb	r3, [r3, #0]
 801effe:	753b      	strb	r3, [r7, #20]
                c_ver = *((const lv_color_t *) px_ver);
 801f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f002:	781b      	ldrb	r3, [r3, #0]
 801f004:	763b      	strb	r3, [r7, #24]
                abuf[x] = 0xff;
 801f006:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f00a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f00e:	4413      	add	r3, r2
 801f010:	22ff      	movs	r2, #255	; 0xff
 801f012:	701a      	strb	r2, [r3, #0]
            }

            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 801f014:	7f3a      	ldrb	r2, [r7, #28]
 801f016:	7e3b      	ldrb	r3, [r7, #24]
 801f018:	429a      	cmp	r2, r3
 801f01a:	d10b      	bne.n	801f034 <argb_and_rgb_aa+0x326>
 801f01c:	7f3a      	ldrb	r2, [r7, #28]
 801f01e:	7d3b      	ldrb	r3, [r7, #20]
 801f020:	429a      	cmp	r2, r3
 801f022:	d107      	bne.n	801f034 <argb_and_rgb_aa+0x326>
                cbuf[x] = c_base;
 801f024:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f028:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f02c:	4413      	add	r3, r2
 801f02e:	7f3a      	ldrb	r2, [r7, #28]
 801f030:	701a      	strb	r2, [r3, #0]
           ys_int + y_next <= src_h - 1) {
 801f032:	e08c      	b.n	801f14e <argb_and_rgb_aa+0x440>
            }
            else {
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 801f034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f036:	b2db      	uxtb	r3, r3
 801f038:	461a      	mov	r2, r3
 801f03a:	7f39      	ldrb	r1, [r7, #28]
 801f03c:	7e38      	ldrb	r0, [r7, #24]
 801f03e:	f7ff fbaf 	bl	801e7a0 <lv_color_mix>
 801f042:	4603      	mov	r3, r0
 801f044:	763b      	strb	r3, [r7, #24]
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 801f046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f048:	b2db      	uxtb	r3, r3
 801f04a:	461a      	mov	r2, r3
 801f04c:	7f39      	ldrb	r1, [r7, #28]
 801f04e:	7d38      	ldrb	r0, [r7, #20]
 801f050:	f7ff fba6 	bl	801e7a0 <lv_color_mix>
 801f054:	4603      	mov	r3, r0
 801f056:	753b      	strb	r3, [r7, #20]
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 801f058:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f05c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f060:	18d4      	adds	r4, r2, r3
 801f062:	227f      	movs	r2, #127	; 0x7f
 801f064:	7e39      	ldrb	r1, [r7, #24]
 801f066:	7d38      	ldrb	r0, [r7, #20]
 801f068:	f7ff fb9a 	bl	801e7a0 <lv_color_mix>
 801f06c:	4603      	mov	r3, r0
 801f06e:	7023      	strb	r3, [r4, #0]
           ys_int + y_next <= src_h - 1) {
 801f070:	e06d      	b.n	801f14e <argb_and_rgb_aa+0x440>
            }
        }
        /*Partially out of the image*/
        else {
#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801f072:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f076:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f07a:	4413      	add	r3, r2
 801f07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f07e:	7812      	ldrb	r2, [r2, #0]
 801f080:	701a      	strb	r2, [r3, #0]
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            lv_opa_t a;
            switch(cf) {
 801f082:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801f086:	2b05      	cmp	r3, #5
 801f088:	d002      	beq.n	801f090 <argb_and_rgb_aa+0x382>
 801f08a:	2b06      	cmp	r3, #6
 801f08c:	d005      	beq.n	801f09a <argb_and_rgb_aa+0x38c>
 801f08e:	e014      	b.n	801f0ba <argb_and_rgb_aa+0x3ac>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801f090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f092:	785b      	ldrb	r3, [r3, #1]
 801f094:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801f098:	e012      	b.n	801f0c0 <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 801f09a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f09e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f0a2:	4413      	add	r3, r2
 801f0a4:	781a      	ldrb	r2, [r3, #0]
 801f0a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f0aa:	429a      	cmp	r2, r3
 801f0ac:	d101      	bne.n	801f0b2 <argb_and_rgb_aa+0x3a4>
 801f0ae:	2300      	movs	r3, #0
 801f0b0:	e000      	b.n	801f0b4 <argb_and_rgb_aa+0x3a6>
 801f0b2:	23ff      	movs	r3, #255	; 0xff
 801f0b4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801f0b8:	e002      	b.n	801f0c0 <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_RGB565A8:
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
                    break;
#endif
                default:
                    a = 0xff;
 801f0ba:	23ff      	movs	r3, #255	; 0xff
 801f0bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801f0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d102      	bne.n	801f0cc <argb_and_rgb_aa+0x3be>
 801f0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	db08      	blt.n	801f0de <argb_and_rgb_aa+0x3d0>
 801f0cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801f0d0:	3b01      	subs	r3, #1
 801f0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f0d4:	429a      	cmp	r2, r3
 801f0d6:	d112      	bne.n	801f0fe <argb_and_rgb_aa+0x3f0>
 801f0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	dd0f      	ble.n	801f0fe <argb_and_rgb_aa+0x3f0>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 801f0de:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801f0e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f0e4:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f0e8:	fb02 f303 	mul.w	r3, r2, r3
 801f0ec:	1219      	asrs	r1, r3, #8
 801f0ee:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f0f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f0f6:	4413      	add	r3, r2
 801f0f8:	b2ca      	uxtb	r2, r1
 801f0fa:	701a      	strb	r2, [r3, #0]
 801f0fc:	e027      	b.n	801f14e <argb_and_rgb_aa+0x440>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 801f0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f100:	2b00      	cmp	r3, #0
 801f102:	d102      	bne.n	801f10a <argb_and_rgb_aa+0x3fc>
 801f104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f106:	2b00      	cmp	r3, #0
 801f108:	db08      	blt.n	801f11c <argb_and_rgb_aa+0x40e>
 801f10a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f10e:	3b01      	subs	r3, #1
 801f110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f112:	429a      	cmp	r2, r3
 801f114:	d112      	bne.n	801f13c <argb_and_rgb_aa+0x42e>
 801f116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f118:	2b00      	cmp	r3, #0
 801f11a:	dd0f      	ble.n	801f13c <argb_and_rgb_aa+0x42e>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 801f11c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801f120:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f122:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f126:	fb02 f303 	mul.w	r3, r2, r3
 801f12a:	1219      	asrs	r1, r3, #8
 801f12c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f130:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f134:	4413      	add	r3, r2
 801f136:	b2ca      	uxtb	r2, r1
 801f138:	701a      	strb	r2, [r3, #0]
 801f13a:	e008      	b.n	801f14e <argb_and_rgb_aa+0x440>
            }
            else {
                abuf[x] = 0x00;
 801f13c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f140:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f144:	4413      	add	r3, r2
 801f146:	2200      	movs	r2, #0
 801f148:	701a      	strb	r2, [r3, #0]
 801f14a:	e000      	b.n	801f14e <argb_and_rgb_aa+0x440>
                if(abuf[x] == 0x00) continue;
 801f14c:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 801f14e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f152:	b29b      	uxth	r3, r3
 801f154:	3301      	adds	r3, #1
 801f156:	b29b      	uxth	r3, r3
 801f158:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801f15c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f160:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801f164:	429a      	cmp	r2, r3
 801f166:	f73f ae11 	bgt.w	801ed8c <argb_and_rgb_aa+0x7e>
 801f16a:	e000      	b.n	801f16e <argb_and_rgb_aa+0x460>
            return;
 801f16c:	bf00      	nop
            }
        }
    }
}
 801f16e:	376c      	adds	r7, #108	; 0x6c
 801f170:	46bd      	mov	sp, r7
 801f172:	bd90      	pop	{r4, r7, pc}

0801f174 <transform_point_upscaled>:

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 801f174:	b480      	push	{r7}
 801f176:	b085      	sub	sp, #20
 801f178:	af00      	add	r7, sp, #0
 801f17a:	60f8      	str	r0, [r7, #12]
 801f17c:	60b9      	str	r1, [r7, #8]
 801f17e:	607a      	str	r2, [r7, #4]
 801f180:	603b      	str	r3, [r7, #0]
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 801f182:	68fb      	ldr	r3, [r7, #12]
 801f184:	69db      	ldr	r3, [r3, #28]
 801f186:	2b00      	cmp	r3, #0
 801f188:	d10d      	bne.n	801f1a6 <transform_point_upscaled+0x32>
 801f18a:	68fb      	ldr	r3, [r7, #12]
 801f18c:	699b      	ldr	r3, [r3, #24]
 801f18e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f192:	d108      	bne.n	801f1a6 <transform_point_upscaled+0x32>
        *xout = xin * 256;
 801f194:	68bb      	ldr	r3, [r7, #8]
 801f196:	021a      	lsls	r2, r3, #8
 801f198:	683b      	ldr	r3, [r7, #0]
 801f19a:	601a      	str	r2, [r3, #0]
        *yout = yin * 256;
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	021a      	lsls	r2, r3, #8
 801f1a0:	69bb      	ldr	r3, [r7, #24]
 801f1a2:	601a      	str	r2, [r3, #0]
        return;
 801f1a4:	e078      	b.n	801f298 <transform_point_upscaled+0x124>
    }

    xin -= t->pivot.x;
 801f1a6:	68fb      	ldr	r3, [r7, #12]
 801f1a8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801f1ac:	461a      	mov	r2, r3
 801f1ae:	68bb      	ldr	r3, [r7, #8]
 801f1b0:	1a9b      	subs	r3, r3, r2
 801f1b2:	60bb      	str	r3, [r7, #8]
    yin -= t->pivot.y;
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801f1ba:	461a      	mov	r2, r3
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	1a9b      	subs	r3, r3, r2
 801f1c0:	607b      	str	r3, [r7, #4]

    if(t->angle == 0) {
 801f1c2:	68fb      	ldr	r3, [r7, #12]
 801f1c4:	69db      	ldr	r3, [r3, #28]
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d114      	bne.n	801f1f4 <transform_point_upscaled+0x80>
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 801f1ca:	68fb      	ldr	r3, [r7, #12]
 801f1cc:	699b      	ldr	r3, [r3, #24]
 801f1ce:	68ba      	ldr	r2, [r7, #8]
 801f1d0:	fb03 f202 	mul.w	r2, r3, r2
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	6a1b      	ldr	r3, [r3, #32]
 801f1d8:	441a      	add	r2, r3
 801f1da:	683b      	ldr	r3, [r7, #0]
 801f1dc:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	699b      	ldr	r3, [r3, #24]
 801f1e2:	687a      	ldr	r2, [r7, #4]
 801f1e4:	fb03 f202 	mul.w	r2, r3, r2
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1ec:	441a      	add	r2, r3
 801f1ee:	69bb      	ldr	r3, [r7, #24]
 801f1f0:	601a      	str	r2, [r3, #0]
 801f1f2:	e051      	b.n	801f298 <transform_point_upscaled+0x124>
    }
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 801f1f4:	68fb      	ldr	r3, [r7, #12]
 801f1f6:	699b      	ldr	r3, [r3, #24]
 801f1f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f1fc:	d122      	bne.n	801f244 <transform_point_upscaled+0xd0>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	695b      	ldr	r3, [r3, #20]
 801f202:	68ba      	ldr	r2, [r7, #8]
 801f204:	fb03 f202 	mul.w	r2, r3, r2
 801f208:	68fb      	ldr	r3, [r7, #12]
 801f20a:	691b      	ldr	r3, [r3, #16]
 801f20c:	6879      	ldr	r1, [r7, #4]
 801f20e:	fb01 f303 	mul.w	r3, r1, r3
 801f212:	1ad3      	subs	r3, r2, r3
 801f214:	109a      	asrs	r2, r3, #2
 801f216:	68fb      	ldr	r3, [r7, #12]
 801f218:	6a1b      	ldr	r3, [r3, #32]
 801f21a:	441a      	add	r2, r3
 801f21c:	683b      	ldr	r3, [r7, #0]
 801f21e:	601a      	str	r2, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 801f220:	68fb      	ldr	r3, [r7, #12]
 801f222:	691b      	ldr	r3, [r3, #16]
 801f224:	68ba      	ldr	r2, [r7, #8]
 801f226:	fb03 f202 	mul.w	r2, r3, r2
 801f22a:	68fb      	ldr	r3, [r7, #12]
 801f22c:	695b      	ldr	r3, [r3, #20]
 801f22e:	6879      	ldr	r1, [r7, #4]
 801f230:	fb01 f303 	mul.w	r3, r1, r3
 801f234:	4413      	add	r3, r2
 801f236:	109a      	asrs	r2, r3, #2
 801f238:	68fb      	ldr	r3, [r7, #12]
 801f23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f23c:	441a      	add	r2, r3
 801f23e:	69bb      	ldr	r3, [r7, #24]
 801f240:	601a      	str	r2, [r3, #0]
 801f242:	e029      	b.n	801f298 <transform_point_upscaled+0x124>
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	695b      	ldr	r3, [r3, #20]
 801f248:	68ba      	ldr	r2, [r7, #8]
 801f24a:	fb03 f202 	mul.w	r2, r3, r2
 801f24e:	68fb      	ldr	r3, [r7, #12]
 801f250:	691b      	ldr	r3, [r3, #16]
 801f252:	6879      	ldr	r1, [r7, #4]
 801f254:	fb01 f303 	mul.w	r3, r1, r3
 801f258:	1ad3      	subs	r3, r2, r3
 801f25a:	68fa      	ldr	r2, [r7, #12]
 801f25c:	6992      	ldr	r2, [r2, #24]
 801f25e:	fb02 f303 	mul.w	r3, r2, r3
 801f262:	129a      	asrs	r2, r3, #10
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	6a1b      	ldr	r3, [r3, #32]
 801f268:	441a      	add	r2, r3
 801f26a:	683b      	ldr	r3, [r7, #0]
 801f26c:	601a      	str	r2, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	691b      	ldr	r3, [r3, #16]
 801f272:	68ba      	ldr	r2, [r7, #8]
 801f274:	fb03 f202 	mul.w	r2, r3, r2
 801f278:	68fb      	ldr	r3, [r7, #12]
 801f27a:	695b      	ldr	r3, [r3, #20]
 801f27c:	6879      	ldr	r1, [r7, #4]
 801f27e:	fb01 f303 	mul.w	r3, r1, r3
 801f282:	4413      	add	r3, r2
 801f284:	68fa      	ldr	r2, [r7, #12]
 801f286:	6992      	ldr	r2, [r2, #24]
 801f288:	fb02 f303 	mul.w	r3, r2, r3
 801f28c:	129a      	asrs	r2, r3, #10
 801f28e:	68fb      	ldr	r3, [r7, #12]
 801f290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f292:	441a      	add	r2, r3
 801f294:	69bb      	ldr	r3, [r7, #24]
 801f296:	601a      	str	r2, [r3, #0]
    }
}
 801f298:	3714      	adds	r7, #20
 801f29a:	46bd      	mov	sp, r7
 801f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2a0:	4770      	bx	lr

0801f2a2 <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 801f2a2:	b480      	push	{r7}
 801f2a4:	af00      	add	r7, sp, #0
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 801f2a6:	bf00      	nop
 801f2a8:	46bd      	mov	sp, r7
 801f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2ae:	4770      	bx	lr

0801f2b0 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 801f2b0:	b580      	push	{r7, lr}
 801f2b2:	b082      	sub	sp, #8
 801f2b4:	af00      	add	r7, sp, #0
 801f2b6:	6078      	str	r0, [r7, #4]
 801f2b8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_NULL(font_p);
 801f2ba:	687b      	ldr	r3, [r7, #4]
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	d100      	bne.n	801f2c2 <lv_font_get_glyph_bitmap+0x12>
 801f2c0:	e7fe      	b.n	801f2c0 <lv_font_get_glyph_bitmap+0x10>
    return font_p->get_glyph_bitmap(font_p, letter);
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	685b      	ldr	r3, [r3, #4]
 801f2c6:	6839      	ldr	r1, [r7, #0]
 801f2c8:	6878      	ldr	r0, [r7, #4]
 801f2ca:	4798      	blx	r3
 801f2cc:	4603      	mov	r3, r0
}
 801f2ce:	4618      	mov	r0, r3
 801f2d0:	3708      	adds	r7, #8
 801f2d2:	46bd      	mov	sp, r7
 801f2d4:	bd80      	pop	{r7, pc}

0801f2d6 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 801f2d6:	b590      	push	{r4, r7, lr}
 801f2d8:	b089      	sub	sp, #36	; 0x24
 801f2da:	af00      	add	r7, sp, #0
 801f2dc:	60f8      	str	r0, [r7, #12]
 801f2de:	60b9      	str	r1, [r7, #8]
 801f2e0:	607a      	str	r2, [r7, #4]
 801f2e2:	603b      	str	r3, [r7, #0]

    LV_ASSERT_NULL(font_p);
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d100      	bne.n	801f2ec <lv_font_get_glyph_dsc+0x16>
 801f2ea:	e7fe      	b.n	801f2ea <lv_font_get_glyph_dsc+0x14>
    LV_ASSERT_NULL(dsc_out);
 801f2ec:	68bb      	ldr	r3, [r7, #8]
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d100      	bne.n	801f2f4 <lv_font_get_glyph_dsc+0x1e>
 801f2f2:	e7fe      	b.n	801f2f2 <lv_font_get_glyph_dsc+0x1c>

#if LV_USE_FONT_PLACEHOLDER
    const lv_font_t * placeholder_font = NULL;
 801f2f4:	2300      	movs	r3, #0
 801f2f6:	61fb      	str	r3, [r7, #28]
#endif

    const lv_font_t * f = font_p;
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	61bb      	str	r3, [r7, #24]

    dsc_out->resolved_font = NULL;
 801f2fc:	68bb      	ldr	r3, [r7, #8]
 801f2fe:	2200      	movs	r2, #0
 801f300:	601a      	str	r2, [r3, #0]

    while(f) {
 801f302:	e01f      	b.n	801f344 <lv_font_get_glyph_dsc+0x6e>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 801f304:	69bb      	ldr	r3, [r7, #24]
 801f306:	681c      	ldr	r4, [r3, #0]
 801f308:	683b      	ldr	r3, [r7, #0]
 801f30a:	687a      	ldr	r2, [r7, #4]
 801f30c:	68b9      	ldr	r1, [r7, #8]
 801f30e:	69b8      	ldr	r0, [r7, #24]
 801f310:	47a0      	blx	r4
 801f312:	4603      	mov	r3, r0
 801f314:	75fb      	strb	r3, [r7, #23]
        if(found) {
 801f316:	7dfb      	ldrb	r3, [r7, #23]
 801f318:	2b00      	cmp	r3, #0
 801f31a:	d010      	beq.n	801f33e <lv_font_get_glyph_dsc+0x68>
            if(!dsc_out->is_placeholder) {
 801f31c:	68bb      	ldr	r3, [r7, #8]
 801f31e:	7b9b      	ldrb	r3, [r3, #14]
 801f320:	f003 0310 	and.w	r3, r3, #16
 801f324:	b2db      	uxtb	r3, r3
 801f326:	2b00      	cmp	r3, #0
 801f328:	d104      	bne.n	801f334 <lv_font_get_glyph_dsc+0x5e>
                dsc_out->resolved_font = f;
 801f32a:	68bb      	ldr	r3, [r7, #8]
 801f32c:	69ba      	ldr	r2, [r7, #24]
 801f32e:	601a      	str	r2, [r3, #0]
                return true;
 801f330:	2301      	movs	r3, #1
 801f332:	e059      	b.n	801f3e8 <lv_font_get_glyph_dsc+0x112>
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 801f334:	69fb      	ldr	r3, [r7, #28]
 801f336:	2b00      	cmp	r3, #0
 801f338:	d101      	bne.n	801f33e <lv_font_get_glyph_dsc+0x68>
                placeholder_font = f;
 801f33a:	69bb      	ldr	r3, [r7, #24]
 801f33c:	61fb      	str	r3, [r7, #28]
            }
#endif
        }
        f = f->fallback;
 801f33e:	69bb      	ldr	r3, [r7, #24]
 801f340:	695b      	ldr	r3, [r3, #20]
 801f342:	61bb      	str	r3, [r7, #24]
    while(f) {
 801f344:	69bb      	ldr	r3, [r7, #24]
 801f346:	2b00      	cmp	r3, #0
 801f348:	d1dc      	bne.n	801f304 <lv_font_get_glyph_dsc+0x2e>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 801f34a:	69fb      	ldr	r3, [r7, #28]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d00b      	beq.n	801f368 <lv_font_get_glyph_dsc+0x92>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 801f350:	69fb      	ldr	r3, [r7, #28]
 801f352:	681c      	ldr	r4, [r3, #0]
 801f354:	683b      	ldr	r3, [r7, #0]
 801f356:	687a      	ldr	r2, [r7, #4]
 801f358:	68b9      	ldr	r1, [r7, #8]
 801f35a:	69f8      	ldr	r0, [r7, #28]
 801f35c:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 801f35e:	68bb      	ldr	r3, [r7, #8]
 801f360:	69fa      	ldr	r2, [r7, #28]
 801f362:	601a      	str	r2, [r3, #0]
        return true;
 801f364:	2301      	movs	r3, #1
 801f366:	e03f      	b.n	801f3e8 <lv_font_get_glyph_dsc+0x112>
    }
#endif

    if(letter < 0x20 ||
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	2b1f      	cmp	r3, #31
 801f36c:	d909      	bls.n	801f382 <lv_font_get_glyph_dsc+0xac>
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801f374:	4293      	cmp	r3, r2
 801f376:	d004      	beq.n	801f382 <lv_font_get_glyph_dsc+0xac>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	f242 020c 	movw	r2, #8204	; 0x200c
 801f37e:	4293      	cmp	r3, r2
 801f380:	d106      	bne.n	801f390 <lv_font_get_glyph_dsc+0xba>
       letter == 0x200c) { /*ZERO WIDTH NON-JOINER*/
        dsc_out->box_w = 0;
 801f382:	68bb      	ldr	r3, [r7, #8]
 801f384:	2200      	movs	r2, #0
 801f386:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = 0;
 801f388:	68bb      	ldr	r3, [r7, #8]
 801f38a:	2200      	movs	r2, #0
 801f38c:	809a      	strh	r2, [r3, #4]
 801f38e:	e010      	b.n	801f3b2 <lv_font_get_glyph_dsc+0xdc>
    }
    else {
#if LV_USE_FONT_PLACEHOLDER
        dsc_out->box_w = font_p->line_height / 2;
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f396:	2b00      	cmp	r3, #0
 801f398:	da00      	bge.n	801f39c <lv_font_get_glyph_dsc+0xc6>
 801f39a:	3301      	adds	r3, #1
 801f39c:	105b      	asrs	r3, r3, #1
 801f39e:	b21b      	sxth	r3, r3
 801f3a0:	b29a      	uxth	r2, r3
 801f3a2:	68bb      	ldr	r3, [r7, #8]
 801f3a4:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 801f3a6:	68bb      	ldr	r3, [r7, #8]
 801f3a8:	88db      	ldrh	r3, [r3, #6]
 801f3aa:	3302      	adds	r3, #2
 801f3ac:	b29a      	uxth	r2, r3
 801f3ae:	68bb      	ldr	r3, [r7, #8]
 801f3b0:	809a      	strh	r2, [r3, #4]
        dsc_out->box_w = 0;
        dsc_out->adv_w = 0;
#endif
    }

    dsc_out->resolved_font = NULL;
 801f3b2:	68bb      	ldr	r3, [r7, #8]
 801f3b4:	2200      	movs	r2, #0
 801f3b6:	601a      	str	r2, [r3, #0]
    dsc_out->box_h = font_p->line_height;
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f3be:	b29a      	uxth	r2, r3
 801f3c0:	68bb      	ldr	r3, [r7, #8]
 801f3c2:	811a      	strh	r2, [r3, #8]
    dsc_out->ofs_x = 0;
 801f3c4:	68bb      	ldr	r3, [r7, #8]
 801f3c6:	2200      	movs	r2, #0
 801f3c8:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = 0;
 801f3ca:	68bb      	ldr	r3, [r7, #8]
 801f3cc:	2200      	movs	r2, #0
 801f3ce:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = 1;
 801f3d0:	68ba      	ldr	r2, [r7, #8]
 801f3d2:	7b93      	ldrb	r3, [r2, #14]
 801f3d4:	2101      	movs	r1, #1
 801f3d6:	f361 0303 	bfi	r3, r1, #0, #4
 801f3da:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = true;
 801f3dc:	68ba      	ldr	r2, [r7, #8]
 801f3de:	7b93      	ldrb	r3, [r2, #14]
 801f3e0:	f043 0310 	orr.w	r3, r3, #16
 801f3e4:	7393      	strb	r3, [r2, #14]

    return false;
 801f3e6:	2300      	movs	r3, #0
}
 801f3e8:	4618      	mov	r0, r3
 801f3ea:	3724      	adds	r7, #36	; 0x24
 801f3ec:	46bd      	mov	sp, r7
 801f3ee:	bd90      	pop	{r4, r7, pc}

0801f3f0 <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 801f3f0:	b580      	push	{r7, lr}
 801f3f2:	b088      	sub	sp, #32
 801f3f4:	af00      	add	r7, sp, #0
 801f3f6:	60f8      	str	r0, [r7, #12]
 801f3f8:	60b9      	str	r1, [r7, #8]
 801f3fa:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(font);
 801f3fc:	68fb      	ldr	r3, [r7, #12]
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d100      	bne.n	801f404 <lv_font_get_glyph_width+0x14>
 801f402:	e7fe      	b.n	801f402 <lv_font_get_glyph_width+0x12>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 801f404:	f107 0110 	add.w	r1, r7, #16
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	68ba      	ldr	r2, [r7, #8]
 801f40c:	68f8      	ldr	r0, [r7, #12]
 801f40e:	f7ff ff62 	bl	801f2d6 <lv_font_get_glyph_dsc>
    return g.adv_w;
 801f412:	8abb      	ldrh	r3, [r7, #20]
}
 801f414:	4618      	mov	r0, r3
 801f416:	3720      	adds	r7, #32
 801f418:	46bd      	mov	sp, r7
 801f41a:	bd80      	pop	{r7, pc}

0801f41c <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter a unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 801f41c:	b580      	push	{r7, lr}
 801f41e:	b086      	sub	sp, #24
 801f420:	af00      	add	r7, sp, #0
 801f422:	6078      	str	r0, [r7, #4]
 801f424:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 801f426:	683b      	ldr	r3, [r7, #0]
 801f428:	2b09      	cmp	r3, #9
 801f42a:	d101      	bne.n	801f430 <lv_font_get_bitmap_fmt_txt+0x14>
 801f42c:	2320      	movs	r3, #32
 801f42e:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f430:	687b      	ldr	r3, [r7, #4]
 801f432:	691b      	ldr	r3, [r3, #16]
 801f434:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801f436:	6839      	ldr	r1, [r7, #0]
 801f438:	6878      	ldr	r0, [r7, #4]
 801f43a:	f000 f8b9 	bl	801f5b0 <get_glyph_dsc_id>
 801f43e:	6138      	str	r0, [r7, #16]
    if(!gid) return NULL;
 801f440:	693b      	ldr	r3, [r7, #16]
 801f442:	2b00      	cmp	r3, #0
 801f444:	d101      	bne.n	801f44a <lv_font_get_bitmap_fmt_txt+0x2e>
 801f446:	2300      	movs	r3, #0
 801f448:	e015      	b.n	801f476 <lv_font_get_bitmap_fmt_txt+0x5a>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801f44a:	697b      	ldr	r3, [r7, #20]
 801f44c:	685a      	ldr	r2, [r3, #4]
 801f44e:	693b      	ldr	r3, [r7, #16]
 801f450:	00db      	lsls	r3, r3, #3
 801f452:	4413      	add	r3, r2
 801f454:	60fb      	str	r3, [r7, #12]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 801f456:	697b      	ldr	r3, [r7, #20]
 801f458:	7cdb      	ldrb	r3, [r3, #19]
 801f45a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801f45e:	b2db      	uxtb	r3, r3
 801f460:	2b00      	cmp	r3, #0
 801f462:	d107      	bne.n	801f474 <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801f464:	697b      	ldr	r3, [r7, #20]
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	68fa      	ldr	r2, [r7, #12]
 801f46a:	6812      	ldr	r2, [r2, #0]
 801f46c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801f470:	4413      	add	r3, r2
 801f472:	e000      	b.n	801f476 <lv_font_get_bitmap_fmt_txt+0x5a>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
                   (uint8_t)fdsc->bpp, prefilter);
        return LV_GC_ROOT(_lv_font_decompr_buf);
#else /*!LV_USE_FONT_COMPRESSED*/
        LV_LOG_WARN("Compressed fonts is used but LV_USE_FONT_COMPRESSED is not enabled in lv_conf.h");
        return NULL;
 801f474:	2300      	movs	r3, #0
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 801f476:	4618      	mov	r0, r3
 801f478:	3718      	adds	r7, #24
 801f47a:	46bd      	mov	sp, r7
 801f47c:	bd80      	pop	{r7, pc}

0801f47e <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 801f47e:	b580      	push	{r7, lr}
 801f480:	b08c      	sub	sp, #48	; 0x30
 801f482:	af00      	add	r7, sp, #0
 801f484:	60f8      	str	r0, [r7, #12]
 801f486:	60b9      	str	r1, [r7, #8]
 801f488:	607a      	str	r2, [r7, #4]
 801f48a:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 801f48c:	2300      	movs	r3, #0
 801f48e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	2b09      	cmp	r3, #9
 801f496:	d104      	bne.n	801f4a2 <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 801f498:	2320      	movs	r3, #32
 801f49a:	607b      	str	r3, [r7, #4]
        is_tab = true;
 801f49c:	2301      	movs	r3, #1
 801f49e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f4a2:	68fb      	ldr	r3, [r7, #12]
 801f4a4:	691b      	ldr	r3, [r3, #16]
 801f4a6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801f4a8:	6879      	ldr	r1, [r7, #4]
 801f4aa:	68f8      	ldr	r0, [r7, #12]
 801f4ac:	f000 f880 	bl	801f5b0 <get_glyph_dsc_id>
 801f4b0:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 801f4b2:	6a3b      	ldr	r3, [r7, #32]
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	d101      	bne.n	801f4bc <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 801f4b8:	2300      	movs	r3, #0
 801f4ba:	e06d      	b.n	801f598 <lv_font_get_glyph_dsc_fmt_txt+0x11a>

    int8_t kvalue = 0;
 801f4bc:	2300      	movs	r3, #0
 801f4be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 801f4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4c4:	68db      	ldr	r3, [r3, #12]
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d00f      	beq.n	801f4ea <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 801f4ca:	6839      	ldr	r1, [r7, #0]
 801f4cc:	68f8      	ldr	r0, [r7, #12]
 801f4ce:	f000 f86f 	bl	801f5b0 <get_glyph_dsc_id>
 801f4d2:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 801f4d4:	69fb      	ldr	r3, [r7, #28]
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d007      	beq.n	801f4ea <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 801f4da:	69fa      	ldr	r2, [r7, #28]
 801f4dc:	6a39      	ldr	r1, [r7, #32]
 801f4de:	68f8      	ldr	r0, [r7, #12]
 801f4e0:	f000 f9aa 	bl	801f838 <get_kern_value>
 801f4e4:	4603      	mov	r3, r0
 801f4e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4ec:	685a      	ldr	r2, [r3, #4]
 801f4ee:	6a3b      	ldr	r3, [r7, #32]
 801f4f0:	00db      	lsls	r3, r3, #3
 801f4f2:	4413      	add	r3, r2
 801f4f4:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801f4f6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801f4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f4fc:	8a12      	ldrh	r2, [r2, #16]
 801f4fe:	fb02 f303 	mul.w	r3, r2, r3
 801f502:	111b      	asrs	r3, r3, #4
 801f504:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 801f506:	69bb      	ldr	r3, [r7, #24]
 801f508:	885b      	ldrh	r3, [r3, #2]
 801f50a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 801f50e:	b29b      	uxth	r3, r3
 801f510:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 801f512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f516:	2b00      	cmp	r3, #0
 801f518:	d002      	beq.n	801f520 <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 801f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f51c:	005b      	lsls	r3, r3, #1
 801f51e:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 801f520:	697b      	ldr	r3, [r7, #20]
 801f522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f524:	4413      	add	r3, r2
 801f526:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801f528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f52a:	3308      	adds	r3, #8
 801f52c:	091b      	lsrs	r3, r3, #4
 801f52e:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 801f530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f532:	b29a      	uxth	r2, r3
 801f534:	68bb      	ldr	r3, [r7, #8]
 801f536:	809a      	strh	r2, [r3, #4]
    dsc_out->box_h = gdsc->box_h;
 801f538:	69bb      	ldr	r3, [r7, #24]
 801f53a:	795b      	ldrb	r3, [r3, #5]
 801f53c:	b29a      	uxth	r2, r3
 801f53e:	68bb      	ldr	r3, [r7, #8]
 801f540:	811a      	strh	r2, [r3, #8]
    dsc_out->box_w = gdsc->box_w;
 801f542:	69bb      	ldr	r3, [r7, #24]
 801f544:	791b      	ldrb	r3, [r3, #4]
 801f546:	b29a      	uxth	r2, r3
 801f548:	68bb      	ldr	r3, [r7, #8]
 801f54a:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 801f54c:	69bb      	ldr	r3, [r7, #24]
 801f54e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 801f552:	b21a      	sxth	r2, r3
 801f554:	68bb      	ldr	r3, [r7, #8]
 801f556:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 801f558:	69bb      	ldr	r3, [r7, #24]
 801f55a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801f55e:	b21a      	sxth	r2, r3
 801f560:	68bb      	ldr	r3, [r7, #8]
 801f562:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f566:	7cdb      	ldrb	r3, [r3, #19]
 801f568:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801f56c:	b2d9      	uxtb	r1, r3
 801f56e:	68ba      	ldr	r2, [r7, #8]
 801f570:	7b93      	ldrb	r3, [r2, #14]
 801f572:	f361 0303 	bfi	r3, r1, #0, #4
 801f576:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = false;
 801f578:	68ba      	ldr	r2, [r7, #8]
 801f57a:	7b93      	ldrb	r3, [r2, #14]
 801f57c:	f36f 1304 	bfc	r3, #4, #1
 801f580:	7393      	strb	r3, [r2, #14]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 801f582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f586:	2b00      	cmp	r3, #0
 801f588:	d005      	beq.n	801f596 <lv_font_get_glyph_dsc_fmt_txt+0x118>
 801f58a:	68bb      	ldr	r3, [r7, #8]
 801f58c:	88db      	ldrh	r3, [r3, #6]
 801f58e:	005b      	lsls	r3, r3, #1
 801f590:	b29a      	uxth	r2, r3
 801f592:	68bb      	ldr	r3, [r7, #8]
 801f594:	80da      	strh	r2, [r3, #6]

    return true;
 801f596:	2301      	movs	r3, #1
}
 801f598:	4618      	mov	r0, r3
 801f59a:	3730      	adds	r7, #48	; 0x30
 801f59c:	46bd      	mov	sp, r7
 801f59e:	bd80      	pop	{r7, pc}

0801f5a0 <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 801f5a0:	b480      	push	{r7}
 801f5a2:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
    }
#endif
}
 801f5a4:	bf00      	nop
 801f5a6:	46bd      	mov	sp, r7
 801f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ac:	4770      	bx	lr
	...

0801f5b0 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 801f5b0:	b590      	push	{r4, r7, lr}
 801f5b2:	b091      	sub	sp, #68	; 0x44
 801f5b4:	af02      	add	r7, sp, #8
 801f5b6:	6078      	str	r0, [r7, #4]
 801f5b8:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 801f5ba:	683b      	ldr	r3, [r7, #0]
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	d101      	bne.n	801f5c4 <get_glyph_dsc_id+0x14>
 801f5c0:	2300      	movs	r3, #0
 801f5c2:	e133      	b.n	801f82c <get_glyph_dsc_id+0x27c>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	691b      	ldr	r3, [r3, #16]
 801f5c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801f5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5cc:	695b      	ldr	r3, [r3, #20]
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	d009      	beq.n	801f5e6 <get_glyph_dsc_id+0x36>
 801f5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5d4:	695b      	ldr	r3, [r3, #20]
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	683a      	ldr	r2, [r7, #0]
 801f5da:	429a      	cmp	r2, r3
 801f5dc:	d103      	bne.n	801f5e6 <get_glyph_dsc_id+0x36>
 801f5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5e0:	695b      	ldr	r3, [r3, #20]
 801f5e2:	685b      	ldr	r3, [r3, #4]
 801f5e4:	e122      	b.n	801f82c <get_glyph_dsc_id+0x27c>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 801f5e6:	2300      	movs	r3, #0
 801f5e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 801f5ea:	e108      	b.n	801f7fe <get_glyph_dsc_id+0x24e>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801f5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5ee:	6899      	ldr	r1, [r3, #8]
 801f5f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f5f2:	4613      	mov	r3, r2
 801f5f4:	009b      	lsls	r3, r3, #2
 801f5f6:	4413      	add	r3, r2
 801f5f8:	009b      	lsls	r3, r3, #2
 801f5fa:	440b      	add	r3, r1
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	683a      	ldr	r2, [r7, #0]
 801f600:	1ad3      	subs	r3, r2, r3
 801f602:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801f604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f606:	6899      	ldr	r1, [r3, #8]
 801f608:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f60a:	4613      	mov	r3, r2
 801f60c:	009b      	lsls	r3, r3, #2
 801f60e:	4413      	add	r3, r2
 801f610:	009b      	lsls	r3, r3, #2
 801f612:	440b      	add	r3, r1
 801f614:	889b      	ldrh	r3, [r3, #4]
 801f616:	461a      	mov	r2, r3
 801f618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f61a:	4293      	cmp	r3, r2
 801f61c:	d903      	bls.n	801f626 <get_glyph_dsc_id+0x76>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801f61e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801f620:	3301      	adds	r3, #1
 801f622:	86fb      	strh	r3, [r7, #54]	; 0x36
 801f624:	e0eb      	b.n	801f7fe <get_glyph_dsc_id+0x24e>
        uint32_t glyph_id = 0;
 801f626:	2300      	movs	r3, #0
 801f628:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f62c:	6899      	ldr	r1, [r3, #8]
 801f62e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f630:	4613      	mov	r3, r2
 801f632:	009b      	lsls	r3, r3, #2
 801f634:	4413      	add	r3, r2
 801f636:	009b      	lsls	r3, r3, #2
 801f638:	440b      	add	r3, r1
 801f63a:	7c9b      	ldrb	r3, [r3, #18]
 801f63c:	2b02      	cmp	r3, #2
 801f63e:	d10d      	bne.n	801f65c <get_glyph_dsc_id+0xac>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801f640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f642:	6899      	ldr	r1, [r3, #8]
 801f644:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f646:	4613      	mov	r3, r2
 801f648:	009b      	lsls	r3, r3, #2
 801f64a:	4413      	add	r3, r2
 801f64c:	009b      	lsls	r3, r3, #2
 801f64e:	440b      	add	r3, r1
 801f650:	88db      	ldrh	r3, [r3, #6]
 801f652:	461a      	mov	r2, r3
 801f654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f656:	4413      	add	r3, r2
 801f658:	633b      	str	r3, [r7, #48]	; 0x30
 801f65a:	e0c2      	b.n	801f7e2 <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801f65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f65e:	6899      	ldr	r1, [r3, #8]
 801f660:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f662:	4613      	mov	r3, r2
 801f664:	009b      	lsls	r3, r3, #2
 801f666:	4413      	add	r3, r2
 801f668:	009b      	lsls	r3, r3, #2
 801f66a:	440b      	add	r3, r1
 801f66c:	7c9b      	ldrb	r3, [r3, #18]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d11a      	bne.n	801f6a8 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f674:	6899      	ldr	r1, [r3, #8]
 801f676:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f678:	4613      	mov	r3, r2
 801f67a:	009b      	lsls	r3, r3, #2
 801f67c:	4413      	add	r3, r2
 801f67e:	009b      	lsls	r3, r3, #2
 801f680:	440b      	add	r3, r1
 801f682:	68db      	ldr	r3, [r3, #12]
 801f684:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801f686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f688:	6899      	ldr	r1, [r3, #8]
 801f68a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f68c:	4613      	mov	r3, r2
 801f68e:	009b      	lsls	r3, r3, #2
 801f690:	4413      	add	r3, r2
 801f692:	009b      	lsls	r3, r3, #2
 801f694:	440b      	add	r3, r1
 801f696:	88db      	ldrh	r3, [r3, #6]
 801f698:	4619      	mov	r1, r3
 801f69a:	693a      	ldr	r2, [r7, #16]
 801f69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f69e:	4413      	add	r3, r2
 801f6a0:	781b      	ldrb	r3, [r3, #0]
 801f6a2:	440b      	add	r3, r1
 801f6a4:	633b      	str	r3, [r7, #48]	; 0x30
 801f6a6:	e09c      	b.n	801f7e2 <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6aa:	6899      	ldr	r1, [r3, #8]
 801f6ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f6ae:	4613      	mov	r3, r2
 801f6b0:	009b      	lsls	r3, r3, #2
 801f6b2:	4413      	add	r3, r2
 801f6b4:	009b      	lsls	r3, r3, #2
 801f6b6:	440b      	add	r3, r1
 801f6b8:	7c9b      	ldrb	r3, [r3, #18]
 801f6ba:	2b03      	cmp	r3, #3
 801f6bc:	d13c      	bne.n	801f738 <get_glyph_dsc_id+0x188>
            uint16_t key = rcp;
 801f6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6c0:	b29b      	uxth	r3, r3
 801f6c2:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6c6:	6899      	ldr	r1, [r3, #8]
 801f6c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f6ca:	4613      	mov	r3, r2
 801f6cc:	009b      	lsls	r3, r3, #2
 801f6ce:	4413      	add	r3, r2
 801f6d0:	009b      	lsls	r3, r3, #2
 801f6d2:	440b      	add	r3, r1
 801f6d4:	689c      	ldr	r4, [r3, #8]
 801f6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6d8:	6899      	ldr	r1, [r3, #8]
 801f6da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f6dc:	4613      	mov	r3, r2
 801f6de:	009b      	lsls	r3, r3, #2
 801f6e0:	4413      	add	r3, r2
 801f6e2:	009b      	lsls	r3, r3, #2
 801f6e4:	440b      	add	r3, r1
 801f6e6:	8a1b      	ldrh	r3, [r3, #16]
 801f6e8:	461a      	mov	r2, r3
 801f6ea:	f107 000e 	add.w	r0, r7, #14
 801f6ee:	4b51      	ldr	r3, [pc, #324]	; (801f834 <get_glyph_dsc_id+0x284>)
 801f6f0:	9300      	str	r3, [sp, #0]
 801f6f2:	2302      	movs	r3, #2
 801f6f4:	4621      	mov	r1, r4
 801f6f6:	f005 faeb 	bl	8024cd0 <_lv_utils_bsearch>
 801f6fa:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801f6fc:	69bb      	ldr	r3, [r7, #24]
 801f6fe:	2b00      	cmp	r3, #0
 801f700:	d06f      	beq.n	801f7e2 <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f704:	6899      	ldr	r1, [r3, #8]
 801f706:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f708:	4613      	mov	r3, r2
 801f70a:	009b      	lsls	r3, r3, #2
 801f70c:	4413      	add	r3, r2
 801f70e:	009b      	lsls	r3, r3, #2
 801f710:	440b      	add	r3, r1
 801f712:	689b      	ldr	r3, [r3, #8]
 801f714:	69ba      	ldr	r2, [r7, #24]
 801f716:	1ad3      	subs	r3, r2, r3
 801f718:	105b      	asrs	r3, r3, #1
 801f71a:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801f71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f71e:	6899      	ldr	r1, [r3, #8]
 801f720:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f722:	4613      	mov	r3, r2
 801f724:	009b      	lsls	r3, r3, #2
 801f726:	4413      	add	r3, r2
 801f728:	009b      	lsls	r3, r3, #2
 801f72a:	440b      	add	r3, r1
 801f72c:	88db      	ldrh	r3, [r3, #6]
 801f72e:	461a      	mov	r2, r3
 801f730:	697b      	ldr	r3, [r7, #20]
 801f732:	4413      	add	r3, r2
 801f734:	633b      	str	r3, [r7, #48]	; 0x30
 801f736:	e054      	b.n	801f7e2 <get_glyph_dsc_id+0x232>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 801f738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f73a:	6899      	ldr	r1, [r3, #8]
 801f73c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f73e:	4613      	mov	r3, r2
 801f740:	009b      	lsls	r3, r3, #2
 801f742:	4413      	add	r3, r2
 801f744:	009b      	lsls	r3, r3, #2
 801f746:	440b      	add	r3, r1
 801f748:	7c9b      	ldrb	r3, [r3, #18]
 801f74a:	2b01      	cmp	r3, #1
 801f74c:	d149      	bne.n	801f7e2 <get_glyph_dsc_id+0x232>
            uint16_t key = rcp;
 801f74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f750:	b29b      	uxth	r3, r3
 801f752:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801f754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f756:	6899      	ldr	r1, [r3, #8]
 801f758:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f75a:	4613      	mov	r3, r2
 801f75c:	009b      	lsls	r3, r3, #2
 801f75e:	4413      	add	r3, r2
 801f760:	009b      	lsls	r3, r3, #2
 801f762:	440b      	add	r3, r1
 801f764:	689c      	ldr	r4, [r3, #8]
 801f766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f768:	6899      	ldr	r1, [r3, #8]
 801f76a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f76c:	4613      	mov	r3, r2
 801f76e:	009b      	lsls	r3, r3, #2
 801f770:	4413      	add	r3, r2
 801f772:	009b      	lsls	r3, r3, #2
 801f774:	440b      	add	r3, r1
 801f776:	8a1b      	ldrh	r3, [r3, #16]
 801f778:	461a      	mov	r2, r3
 801f77a:	f107 000c 	add.w	r0, r7, #12
 801f77e:	4b2d      	ldr	r3, [pc, #180]	; (801f834 <get_glyph_dsc_id+0x284>)
 801f780:	9300      	str	r3, [sp, #0]
 801f782:	2302      	movs	r3, #2
 801f784:	4621      	mov	r1, r4
 801f786:	f005 faa3 	bl	8024cd0 <_lv_utils_bsearch>
 801f78a:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d027      	beq.n	801f7e2 <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801f792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f794:	6899      	ldr	r1, [r3, #8]
 801f796:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f798:	4613      	mov	r3, r2
 801f79a:	009b      	lsls	r3, r3, #2
 801f79c:	4413      	add	r3, r2
 801f79e:	009b      	lsls	r3, r3, #2
 801f7a0:	440b      	add	r3, r1
 801f7a2:	689b      	ldr	r3, [r3, #8]
 801f7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f7a6:	1ad3      	subs	r3, r2, r3
 801f7a8:	105b      	asrs	r3, r3, #1
 801f7aa:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 801f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7ae:	6899      	ldr	r1, [r3, #8]
 801f7b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f7b2:	4613      	mov	r3, r2
 801f7b4:	009b      	lsls	r3, r3, #2
 801f7b6:	4413      	add	r3, r2
 801f7b8:	009b      	lsls	r3, r3, #2
 801f7ba:	440b      	add	r3, r1
 801f7bc:	68db      	ldr	r3, [r3, #12]
 801f7be:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7c2:	6899      	ldr	r1, [r3, #8]
 801f7c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f7c6:	4613      	mov	r3, r2
 801f7c8:	009b      	lsls	r3, r3, #2
 801f7ca:	4413      	add	r3, r2
 801f7cc:	009b      	lsls	r3, r3, #2
 801f7ce:	440b      	add	r3, r1
 801f7d0:	88db      	ldrh	r3, [r3, #6]
 801f7d2:	4619      	mov	r1, r3
 801f7d4:	6a3b      	ldr	r3, [r7, #32]
 801f7d6:	005b      	lsls	r3, r3, #1
 801f7d8:	69fa      	ldr	r2, [r7, #28]
 801f7da:	4413      	add	r3, r2
 801f7dc:	881b      	ldrh	r3, [r3, #0]
 801f7de:	440b      	add	r3, r1
 801f7e0:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        if(fdsc->cache) {
 801f7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7e4:	695b      	ldr	r3, [r3, #20]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d007      	beq.n	801f7fa <get_glyph_dsc_id+0x24a>
            fdsc->cache->last_letter = letter;
 801f7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7ec:	695b      	ldr	r3, [r3, #20]
 801f7ee:	683a      	ldr	r2, [r7, #0]
 801f7f0:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 801f7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7f4:	695b      	ldr	r3, [r3, #20]
 801f7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f7f8:	605a      	str	r2, [r3, #4]
        }
        return glyph_id;
 801f7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f7fc:	e016      	b.n	801f82c <get_glyph_dsc_id+0x27c>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f800:	8a5b      	ldrh	r3, [r3, #18]
 801f802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f806:	b29b      	uxth	r3, r3
 801f808:	461a      	mov	r2, r3
 801f80a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801f80c:	4293      	cmp	r3, r2
 801f80e:	f4ff aeed 	bcc.w	801f5ec <get_glyph_dsc_id+0x3c>
    }

    if(fdsc->cache) {
 801f812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f814:	695b      	ldr	r3, [r3, #20]
 801f816:	2b00      	cmp	r3, #0
 801f818:	d007      	beq.n	801f82a <get_glyph_dsc_id+0x27a>
        fdsc->cache->last_letter = letter;
 801f81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f81c:	695b      	ldr	r3, [r3, #20]
 801f81e:	683a      	ldr	r2, [r7, #0]
 801f820:	601a      	str	r2, [r3, #0]
        fdsc->cache->last_glyph_id = 0;
 801f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f824:	695b      	ldr	r3, [r3, #20]
 801f826:	2200      	movs	r2, #0
 801f828:	605a      	str	r2, [r3, #4]
    }
    return 0;
 801f82a:	2300      	movs	r3, #0

}
 801f82c:	4618      	mov	r0, r3
 801f82e:	373c      	adds	r7, #60	; 0x3c
 801f830:	46bd      	mov	sp, r7
 801f832:	bd90      	pop	{r4, r7, pc}
 801f834:	0801fa19 	.word	0x0801fa19

0801f838 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 801f838:	b580      	push	{r7, lr}
 801f83a:	b094      	sub	sp, #80	; 0x50
 801f83c:	af02      	add	r7, sp, #8
 801f83e:	60f8      	str	r0, [r7, #12]
 801f840:	60b9      	str	r1, [r7, #8]
 801f842:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f844:	68fb      	ldr	r3, [r7, #12]
 801f846:	691b      	ldr	r3, [r3, #16]
 801f848:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 801f84a:	2300      	movs	r3, #0
 801f84c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 801f850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f852:	7cdb      	ldrb	r3, [r3, #19]
 801f854:	f003 0320 	and.w	r3, r3, #32
 801f858:	b2db      	uxtb	r3, r3
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	d160      	bne.n	801f920 <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 801f85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f860:	68db      	ldr	r3, [r3, #12]
 801f862:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 801f864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f866:	7adb      	ldrb	r3, [r3, #11]
 801f868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801f86c:	b2db      	uxtb	r3, r3
 801f86e:	2b00      	cmp	r3, #0
 801f870:	d129      	bne.n	801f8c6 <get_kern_value+0x8e>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
 801f872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f874:	681b      	ldr	r3, [r3, #0]
 801f876:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	b29b      	uxth	r3, r3
 801f87c:	021b      	lsls	r3, r3, #8
 801f87e:	b29a      	uxth	r2, r3
 801f880:	68bb      	ldr	r3, [r7, #8]
 801f882:	b29b      	uxth	r3, r3
 801f884:	4413      	add	r3, r2
 801f886:	b29b      	uxth	r3, r3
 801f888:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801f88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f88c:	689b      	ldr	r3, [r3, #8]
 801f88e:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801f892:	461a      	mov	r2, r3
 801f894:	f107 001a 	add.w	r0, r7, #26
 801f898:	4b39      	ldr	r3, [pc, #228]	; (801f980 <get_kern_value+0x148>)
 801f89a:	9300      	str	r3, [sp, #0]
 801f89c:	2302      	movs	r3, #2
 801f89e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f8a0:	f005 fa16 	bl	8024cd0 <_lv_utils_bsearch>
 801f8a4:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801f8a6:	6a3b      	ldr	r3, [r7, #32]
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d063      	beq.n	801f974 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801f8ac:	6a3a      	ldr	r2, [r7, #32]
 801f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8b0:	1ad3      	subs	r3, r2, r3
 801f8b2:	105b      	asrs	r3, r3, #1
 801f8b4:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 801f8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8b8:	685a      	ldr	r2, [r3, #4]
 801f8ba:	69fb      	ldr	r3, [r7, #28]
 801f8bc:	4413      	add	r3, r2
 801f8be:	781b      	ldrb	r3, [r3, #0]
 801f8c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801f8c4:	e056      	b.n	801f974 <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 801f8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8c8:	7adb      	ldrb	r3, [r3, #11]
 801f8ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801f8ce:	b2db      	uxtb	r3, r3
 801f8d0:	2b40      	cmp	r3, #64	; 0x40
 801f8d2:	d14f      	bne.n	801f974 <get_kern_value+0x13c>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint32_t * g_ids = kdsc->glyph_ids;
 801f8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	041a      	lsls	r2, r3, #16
 801f8de:	68bb      	ldr	r3, [r7, #8]
 801f8e0:	4413      	add	r3, r2
 801f8e2:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801f8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8e6:	689b      	ldr	r3, [r3, #8]
 801f8e8:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801f8ec:	461a      	mov	r2, r3
 801f8ee:	f107 0014 	add.w	r0, r7, #20
 801f8f2:	4b24      	ldr	r3, [pc, #144]	; (801f984 <get_kern_value+0x14c>)
 801f8f4:	9300      	str	r3, [sp, #0]
 801f8f6:	2304      	movs	r3, #4
 801f8f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f8fa:	f005 f9e9 	bl	8024cd0 <_lv_utils_bsearch>
 801f8fe:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801f900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f902:	2b00      	cmp	r3, #0
 801f904:	d036      	beq.n	801f974 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801f906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f90a:	1ad3      	subs	r3, r2, r3
 801f90c:	109b      	asrs	r3, r3, #2
 801f90e:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 801f910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f912:	685a      	ldr	r2, [r3, #4]
 801f914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f916:	4413      	add	r3, r2
 801f918:	781b      	ldrb	r3, [r3, #0]
 801f91a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801f91e:	e029      	b.n	801f974 <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 801f920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f922:	68db      	ldr	r3, [r3, #12]
 801f924:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 801f926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f928:	685a      	ldr	r2, [r3, #4]
 801f92a:	68bb      	ldr	r3, [r7, #8]
 801f92c:	4413      	add	r3, r2
 801f92e:	781b      	ldrb	r3, [r3, #0]
 801f930:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801f934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f936:	689a      	ldr	r2, [r3, #8]
 801f938:	687b      	ldr	r3, [r7, #4]
 801f93a:	4413      	add	r3, r2
 801f93c:	781b      	ldrb	r3, [r3, #0]
 801f93e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 801f942:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801f946:	2b00      	cmp	r3, #0
 801f948:	d014      	beq.n	801f974 <get_kern_value+0x13c>
 801f94a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801f94e:	2b00      	cmp	r3, #0
 801f950:	d010      	beq.n	801f974 <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 801f952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f954:	681b      	ldr	r3, [r3, #0]
 801f956:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801f95a:	3a01      	subs	r2, #1
 801f95c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f95e:	7b49      	ldrb	r1, [r1, #13]
 801f960:	fb02 f101 	mul.w	r1, r2, r1
 801f964:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801f968:	3a01      	subs	r2, #1
 801f96a:	440a      	add	r2, r1
 801f96c:	4413      	add	r3, r2
 801f96e:	781b      	ldrb	r3, [r3, #0]
 801f970:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 801f974:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801f978:	4618      	mov	r0, r3
 801f97a:	3748      	adds	r7, #72	; 0x48
 801f97c:	46bd      	mov	sp, r7
 801f97e:	bd80      	pop	{r7, pc}
 801f980:	0801f989 	.word	0x0801f989
 801f984:	0801f9d1 	.word	0x0801f9d1

0801f988 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 801f988:	b480      	push	{r7}
 801f98a:	b085      	sub	sp, #20
 801f98c:	af00      	add	r7, sp, #0
 801f98e:	6078      	str	r0, [r7, #4]
 801f990:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 801f992:	687b      	ldr	r3, [r7, #4]
 801f994:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 801f996:	683b      	ldr	r3, [r7, #0]
 801f998:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801f99a:	68fb      	ldr	r3, [r7, #12]
 801f99c:	781a      	ldrb	r2, [r3, #0]
 801f99e:	68bb      	ldr	r3, [r7, #8]
 801f9a0:	781b      	ldrb	r3, [r3, #0]
 801f9a2:	429a      	cmp	r2, r3
 801f9a4:	d006      	beq.n	801f9b4 <kern_pair_8_compare+0x2c>
 801f9a6:	68fb      	ldr	r3, [r7, #12]
 801f9a8:	781b      	ldrb	r3, [r3, #0]
 801f9aa:	461a      	mov	r2, r3
 801f9ac:	68bb      	ldr	r3, [r7, #8]
 801f9ae:	781b      	ldrb	r3, [r3, #0]
 801f9b0:	1ad3      	subs	r3, r2, r3
 801f9b2:	e007      	b.n	801f9c4 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 801f9b4:	68fb      	ldr	r3, [r7, #12]
 801f9b6:	3301      	adds	r3, #1
 801f9b8:	781b      	ldrb	r3, [r3, #0]
 801f9ba:	461a      	mov	r2, r3
 801f9bc:	68bb      	ldr	r3, [r7, #8]
 801f9be:	3301      	adds	r3, #1
 801f9c0:	781b      	ldrb	r3, [r3, #0]
 801f9c2:	1ad3      	subs	r3, r2, r3

}
 801f9c4:	4618      	mov	r0, r3
 801f9c6:	3714      	adds	r7, #20
 801f9c8:	46bd      	mov	sp, r7
 801f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9ce:	4770      	bx	lr

0801f9d0 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 801f9d0:	b480      	push	{r7}
 801f9d2:	b085      	sub	sp, #20
 801f9d4:	af00      	add	r7, sp, #0
 801f9d6:	6078      	str	r0, [r7, #4]
 801f9d8:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 801f9de:	683b      	ldr	r3, [r7, #0]
 801f9e0:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801f9e2:	68fb      	ldr	r3, [r7, #12]
 801f9e4:	881a      	ldrh	r2, [r3, #0]
 801f9e6:	68bb      	ldr	r3, [r7, #8]
 801f9e8:	881b      	ldrh	r3, [r3, #0]
 801f9ea:	429a      	cmp	r2, r3
 801f9ec:	d006      	beq.n	801f9fc <kern_pair_16_compare+0x2c>
 801f9ee:	68fb      	ldr	r3, [r7, #12]
 801f9f0:	881b      	ldrh	r3, [r3, #0]
 801f9f2:	461a      	mov	r2, r3
 801f9f4:	68bb      	ldr	r3, [r7, #8]
 801f9f6:	881b      	ldrh	r3, [r3, #0]
 801f9f8:	1ad3      	subs	r3, r2, r3
 801f9fa:	e007      	b.n	801fa0c <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 801f9fc:	68fb      	ldr	r3, [r7, #12]
 801f9fe:	3302      	adds	r3, #2
 801fa00:	881b      	ldrh	r3, [r3, #0]
 801fa02:	461a      	mov	r2, r3
 801fa04:	68bb      	ldr	r3, [r7, #8]
 801fa06:	3302      	adds	r3, #2
 801fa08:	881b      	ldrh	r3, [r3, #0]
 801fa0a:	1ad3      	subs	r3, r2, r3
}
 801fa0c:	4618      	mov	r0, r3
 801fa0e:	3714      	adds	r7, #20
 801fa10:	46bd      	mov	sp, r7
 801fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa16:	4770      	bx	lr

0801fa18 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 801fa18:	b480      	push	{r7}
 801fa1a:	b083      	sub	sp, #12
 801fa1c:	af00      	add	r7, sp, #0
 801fa1e:	6078      	str	r0, [r7, #4]
 801fa20:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	881b      	ldrh	r3, [r3, #0]
 801fa26:	461a      	mov	r2, r3
 801fa28:	683b      	ldr	r3, [r7, #0]
 801fa2a:	881b      	ldrh	r3, [r3, #0]
 801fa2c:	1ad3      	subs	r3, r2, r3
}
 801fa2e:	4618      	mov	r0, r3
 801fa30:	370c      	adds	r7, #12
 801fa32:	46bd      	mov	sp, r7
 801fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa38:	4770      	bx	lr

0801fa3a <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801fa3a:	b480      	push	{r7}
 801fa3c:	b083      	sub	sp, #12
 801fa3e:	af00      	add	r7, sp, #0
 801fa40:	4603      	mov	r3, r0
 801fa42:	71fb      	strb	r3, [r7, #7]
 801fa44:	460b      	mov	r3, r1
 801fa46:	71bb      	strb	r3, [r7, #6]
 801fa48:	4613      	mov	r3, r2
 801fa4a:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801fa4c:	797b      	ldrb	r3, [r7, #5]
 801fa4e:	09db      	lsrs	r3, r3, #7
 801fa50:	b2da      	uxtb	r2, r3
 801fa52:	79bb      	ldrb	r3, [r7, #6]
 801fa54:	09db      	lsrs	r3, r3, #7
 801fa56:	b2db      	uxtb	r3, r3
 801fa58:	4313      	orrs	r3, r2
 801fa5a:	b2da      	uxtb	r2, r3
 801fa5c:	79fb      	ldrb	r3, [r7, #7]
 801fa5e:	09db      	lsrs	r3, r3, #7
 801fa60:	b2db      	uxtb	r3, r3
 801fa62:	4313      	orrs	r3, r2
 801fa64:	b2db      	uxtb	r3, r3
}
 801fa66:	4618      	mov	r0, r3
 801fa68:	370c      	adds	r7, #12
 801fa6a:	46bd      	mov	sp, r7
 801fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa70:	4770      	bx	lr

0801fa72 <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 801fa72:	b580      	push	{r7, lr}
 801fa74:	b082      	sub	sp, #8
 801fa76:	af00      	add	r7, sp, #0
 801fa78:	6078      	str	r0, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    lv_color_t r;
    r.full = c | 0xFF000000;
    return r;
#else /*LV_COLOR_DEPTH == 8*/
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	0c1b      	lsrs	r3, r3, #16
 801fa7e:	b2d8      	uxtb	r0, r3
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	0a1b      	lsrs	r3, r3, #8
 801fa84:	b2db      	uxtb	r3, r3
 801fa86:	687a      	ldr	r2, [r7, #4]
 801fa88:	b2d2      	uxtb	r2, r2
 801fa8a:	4619      	mov	r1, r3
 801fa8c:	f7ff ffd5 	bl	801fa3a <lv_color_make>
 801fa90:	4603      	mov	r3, r0
#endif
}
 801fa92:	4618      	mov	r0, r3
 801fa94:	3708      	adds	r7, #8
 801fa96:	46bd      	mov	sp, r7
 801fa98:	bd80      	pop	{r7, pc}

0801fa9a <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 801fa9a:	b580      	push	{r7, lr}
 801fa9c:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 801fa9e:	22ff      	movs	r2, #255	; 0xff
 801faa0:	21ff      	movs	r1, #255	; 0xff
 801faa2:	20ff      	movs	r0, #255	; 0xff
 801faa4:	f7ff ffc9 	bl	801fa3a <lv_color_make>
 801faa8:	4603      	mov	r3, r0
}
 801faaa:	4618      	mov	r0, r3
 801faac:	bd80      	pop	{r7, pc}
	...

0801fab0 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 801fab0:	b580      	push	{r7, lr}
 801fab2:	b082      	sub	sp, #8
 801fab4:	af00      	add	r7, sp, #0
 801fab6:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 801fab8:	4a04      	ldr	r2, [pc, #16]	; (801facc <lv_obj_remove_style_all+0x1c>)
 801faba:	2100      	movs	r1, #0
 801fabc:	6878      	ldr	r0, [r7, #4]
 801fabe:	f7ec fd79 	bl	800c5b4 <lv_obj_remove_style>
}
 801fac2:	bf00      	nop
 801fac4:	3708      	adds	r7, #8
 801fac6:	46bd      	mov	sp, r7
 801fac8:	bd80      	pop	{r7, pc}
 801faca:	bf00      	nop
 801facc:	000fffff 	.word	0x000fffff

0801fad0 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801fad0:	b590      	push	{r4, r7, lr}
 801fad2:	b083      	sub	sp, #12
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	6078      	str	r0, [r7, #4]
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 801fad8:	2150      	movs	r1, #80	; 0x50
 801fada:	6878      	ldr	r0, [r7, #4]
 801fadc:	f002 fd76 	bl	80225cc <lv_memset_00>

    driver->hor_res          = 320;
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801fae6:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = 240;
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	22f0      	movs	r2, #240	; 0xf0
 801faec:	805a      	strh	r2, [r3, #2]
    driver->physical_hor_res = -1;
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801faf4:	809a      	strh	r2, [r3, #4]
    driver->physical_ver_res = -1;
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fafc:	80da      	strh	r2, [r3, #6]
    driver->offset_x         = 0;
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	2200      	movs	r2, #0
 801fb02:	811a      	strh	r2, [r3, #8]
    driver->offset_y         = 0;
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	2200      	movs	r2, #0
 801fb08:	815a      	strh	r2, [r3, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801fb0a:	687a      	ldr	r2, [r7, #4]
 801fb0c:	7c13      	ldrb	r3, [r2, #16]
 801fb0e:	f36f 03c3 	bfc	r3, #3, #1
 801fb12:	7413      	strb	r3, [r2, #16]
    driver->screen_transp    = 0;
 801fb14:	687a      	ldr	r2, [r7, #4]
 801fb16:	7c13      	ldrb	r3, [r2, #16]
 801fb18:	f36f 1386 	bfc	r3, #6, #1
 801fb1c:	7413      	strb	r3, [r2, #16]
    driver->dpi              = LV_DPI_DEF;
 801fb1e:	687a      	ldr	r2, [r7, #4]
 801fb20:	6913      	ldr	r3, [r2, #16]
 801fb22:	2182      	movs	r1, #130	; 0x82
 801fb24:	f361 13d0 	bfi	r3, r1, #7, #10
 801fb28:	6113      	str	r3, [r2, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 801fb2a:	687c      	ldr	r4, [r7, #4]
 801fb2c:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 801fb30:	f7ff ff9f 	bl	801fa72 <lv_color_hex>
 801fb34:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	4a06      	ldr	r2, [pc, #24]	; (801fb54 <lv_disp_drv_init+0x84>)
 801fb3c:	641a      	str	r2, [r3, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 801fb3e:	687b      	ldr	r3, [r7, #4]
 801fb40:	4a04      	ldr	r2, [pc, #16]	; (801fb54 <lv_disp_drv_init+0x84>)
 801fb42:	645a      	str	r2, [r3, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	2254      	movs	r2, #84	; 0x54
 801fb48:	649a      	str	r2, [r3, #72]	; 0x48
#endif

}
 801fb4a:	bf00      	nop
 801fb4c:	370c      	adds	r7, #12
 801fb4e:	46bd      	mov	sp, r7
 801fb50:	bd90      	pop	{r4, r7, pc}
 801fb52:	bf00      	nop
 801fb54:	0801536d 	.word	0x0801536d

0801fb58 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801fb58:	b580      	push	{r7, lr}
 801fb5a:	b084      	sub	sp, #16
 801fb5c:	af00      	add	r7, sp, #0
 801fb5e:	60f8      	str	r0, [r7, #12]
 801fb60:	60b9      	str	r1, [r7, #8]
 801fb62:	607a      	str	r2, [r7, #4]
 801fb64:	603b      	str	r3, [r7, #0]
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 801fb66:	211c      	movs	r1, #28
 801fb68:	68f8      	ldr	r0, [r7, #12]
 801fb6a:	f002 fd2f 	bl	80225cc <lv_memset_00>

    draw_buf->buf1    = buf1;
 801fb6e:	68fb      	ldr	r3, [r7, #12]
 801fb70:	68ba      	ldr	r2, [r7, #8]
 801fb72:	601a      	str	r2, [r3, #0]
    draw_buf->buf2    = buf2;
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	687a      	ldr	r2, [r7, #4]
 801fb78:	605a      	str	r2, [r3, #4]
    draw_buf->buf_act = draw_buf->buf1;
 801fb7a:	68fb      	ldr	r3, [r7, #12]
 801fb7c:	681a      	ldr	r2, [r3, #0]
 801fb7e:	68fb      	ldr	r3, [r7, #12]
 801fb80:	609a      	str	r2, [r3, #8]
    draw_buf->size    = size_in_px_cnt;
 801fb82:	68fb      	ldr	r3, [r7, #12]
 801fb84:	683a      	ldr	r2, [r7, #0]
 801fb86:	60da      	str	r2, [r3, #12]
}
 801fb88:	bf00      	nop
 801fb8a:	3710      	adds	r7, #16
 801fb8c:	46bd      	mov	sp, r7
 801fb8e:	bd80      	pop	{r7, pc}

0801fb90 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 801fb90:	b590      	push	{r4, r7, lr}
 801fb92:	b087      	sub	sp, #28
 801fb94:	af00      	add	r7, sp, #0
 801fb96:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801fb98:	485f      	ldr	r0, [pc, #380]	; (801fd18 <lv_disp_drv_register+0x188>)
 801fb9a:	f001 fe5f 	bl	802185c <_lv_ll_ins_head>
 801fb9e:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(disp);
 801fba0:	697b      	ldr	r3, [r7, #20]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d100      	bne.n	801fba8 <lv_disp_drv_register+0x18>
 801fba6:	e7fe      	b.n	801fba6 <lv_disp_drv_register+0x16>
    if(!disp) {
 801fba8:	697b      	ldr	r3, [r7, #20]
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	d101      	bne.n	801fbb2 <lv_disp_drv_register+0x22>
        return NULL;
 801fbae:	2300      	movs	r3, #0
 801fbb0:	e0ae      	b.n	801fd10 <lv_disp_drv_register+0x180>
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d116      	bne.n	801fbe8 <lv_disp_drv_register+0x58>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fbbe:	4618      	mov	r0, r3
 801fbc0:	f002 f8d0 	bl	8021d64 <lv_mem_alloc>
 801fbc4:	6138      	str	r0, [r7, #16]
        LV_ASSERT_MALLOC(draw_ctx);
 801fbc6:	693b      	ldr	r3, [r7, #16]
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	d100      	bne.n	801fbce <lv_disp_drv_register+0x3e>
 801fbcc:	e7fe      	b.n	801fbcc <lv_disp_drv_register+0x3c>
        if(draw_ctx == NULL) return NULL;
 801fbce:	693b      	ldr	r3, [r7, #16]
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d101      	bne.n	801fbd8 <lv_disp_drv_register+0x48>
 801fbd4:	2300      	movs	r3, #0
 801fbd6:	e09b      	b.n	801fd10 <lv_disp_drv_register+0x180>
        driver->draw_ctx_init(driver, draw_ctx);
 801fbd8:	687b      	ldr	r3, [r7, #4]
 801fbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fbdc:	6939      	ldr	r1, [r7, #16]
 801fbde:	6878      	ldr	r0, [r7, #4]
 801fbe0:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	693a      	ldr	r2, [r7, #16]
 801fbe6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 801fbe8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801fbec:	6978      	ldr	r0, [r7, #20]
 801fbee:	f002 fced 	bl	80225cc <lv_memset_00>

    disp->driver = driver;
 801fbf2:	697b      	ldr	r3, [r7, #20]
 801fbf4:	687a      	ldr	r2, [r7, #4]
 801fbf6:	601a      	str	r2, [r3, #0]

    disp->inv_en_cnt = 1;
 801fbf8:	697b      	ldr	r3, [r7, #20]
 801fbfa:	2201      	movs	r2, #1
 801fbfc:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

    lv_disp_t * disp_def_tmp = disp_def;
 801fc00:	4b46      	ldr	r3, [pc, #280]	; (801fd1c <lv_disp_drv_register+0x18c>)
 801fc02:	681b      	ldr	r3, [r3, #0]
 801fc04:	60fb      	str	r3, [r7, #12]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801fc06:	4a45      	ldr	r2, [pc, #276]	; (801fd1c <lv_disp_drv_register+0x18c>)
 801fc08:	697b      	ldr	r3, [r7, #20]
 801fc0a:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 801fc0c:	697a      	ldr	r2, [r7, #20]
 801fc0e:	211e      	movs	r1, #30
 801fc10:	4843      	ldr	r0, [pc, #268]	; (801fd20 <lv_disp_drv_register+0x190>)
 801fc12:	f003 fbaf 	bl	8023374 <lv_timer_create>
 801fc16:	4602      	mov	r2, r0
 801fc18:	697b      	ldr	r3, [r7, #20]
 801fc1a:	605a      	str	r2, [r3, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 801fc1c:	697b      	ldr	r3, [r7, #20]
 801fc1e:	685b      	ldr	r3, [r3, #4]
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d100      	bne.n	801fc26 <lv_disp_drv_register+0x96>
 801fc24:	e7fe      	b.n	801fc24 <lv_disp_drv_register+0x94>
    if(disp->refr_timer == NULL) {
 801fc26:	697b      	ldr	r3, [r7, #20]
 801fc28:	685b      	ldr	r3, [r3, #4]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d104      	bne.n	801fc38 <lv_disp_drv_register+0xa8>
        lv_mem_free(disp);
 801fc2e:	6978      	ldr	r0, [r7, #20]
 801fc30:	f002 f8c8 	bl	8021dc4 <lv_mem_free>
        return NULL;
 801fc34:	2300      	movs	r3, #0
 801fc36:	e06b      	b.n	801fd10 <lv_disp_drv_register+0x180>
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	7c1b      	ldrb	r3, [r3, #16]
 801fc3c:	f003 0302 	and.w	r3, r3, #2
 801fc40:	b2db      	uxtb	r3, r3
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d012      	beq.n	801fc6c <lv_disp_drv_register+0xdc>
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	68db      	ldr	r3, [r3, #12]
 801fc4a:	68da      	ldr	r2, [r3, #12]
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fc52:	4619      	mov	r1, r3
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fc5a:	fb01 f303 	mul.w	r3, r1, r3
 801fc5e:	429a      	cmp	r2, r3
 801fc60:	d204      	bcs.n	801fc6c <lv_disp_drv_register+0xdc>
        driver->full_refresh = 0;
 801fc62:	687a      	ldr	r2, [r7, #4]
 801fc64:	7c13      	ldrb	r3, [r2, #16]
 801fc66:	f36f 0341 	bfc	r3, #1, #1
 801fc6a:	7413      	strb	r3, [r2, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 801fc6c:	697c      	ldr	r4, [r7, #20]
 801fc6e:	f7ff ff14 	bl	801fa9a <lv_color_white>
 801fc72:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801fc76:	697b      	ldr	r3, [r7, #20]
 801fc78:	22ff      	movs	r2, #255	; 0xff
 801fc7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 801fc7e:	2000      	movs	r0, #0
 801fc80:	f7e6 f89e 	bl	8005dc0 <lv_obj_create>
 801fc84:	4602      	mov	r2, r0
 801fc86:	697b      	ldr	r3, [r7, #20]
 801fc88:	611a      	str	r2, [r3, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 801fc8a:	2000      	movs	r0, #0
 801fc8c:	f7e6 f898 	bl	8005dc0 <lv_obj_create>
 801fc90:	4602      	mov	r2, r0
 801fc92:	697b      	ldr	r3, [r7, #20]
 801fc94:	61da      	str	r2, [r3, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 801fc96:	2000      	movs	r0, #0
 801fc98:	f7e6 f892 	bl	8005dc0 <lv_obj_create>
 801fc9c:	4602      	mov	r2, r0
 801fc9e:	697b      	ldr	r3, [r7, #20]
 801fca0:	621a      	str	r2, [r3, #32]
    lv_obj_remove_style_all(disp->top_layer);
 801fca2:	697b      	ldr	r3, [r7, #20]
 801fca4:	69db      	ldr	r3, [r3, #28]
 801fca6:	4618      	mov	r0, r3
 801fca8:	f7ff ff02 	bl	801fab0 <lv_obj_remove_style_all>
    lv_obj_remove_style_all(disp->sys_layer);
 801fcac:	697b      	ldr	r3, [r7, #20]
 801fcae:	6a1b      	ldr	r3, [r3, #32]
 801fcb0:	4618      	mov	r0, r3
 801fcb2:	f7ff fefd 	bl	801fab0 <lv_obj_remove_style_all>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 801fcb6:	697b      	ldr	r3, [r7, #20]
 801fcb8:	69db      	ldr	r3, [r3, #28]
 801fcba:	2102      	movs	r1, #2
 801fcbc:	4618      	mov	r0, r3
 801fcbe:	f7e6 f893 	bl	8005de8 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 801fcc2:	697b      	ldr	r3, [r7, #20]
 801fcc4:	6a1b      	ldr	r3, [r3, #32]
 801fcc6:	2102      	movs	r1, #2
 801fcc8:	4618      	mov	r0, r3
 801fcca:	f7e6 f88d 	bl	8005de8 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 801fcce:	697b      	ldr	r3, [r7, #20]
 801fcd0:	69db      	ldr	r3, [r3, #28]
 801fcd2:	2100      	movs	r1, #0
 801fcd4:	4618      	mov	r0, r3
 801fcd6:	f7ea fb78 	bl	800a3ca <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 801fcda:	697b      	ldr	r3, [r7, #20]
 801fcdc:	6a1b      	ldr	r3, [r3, #32]
 801fcde:	2100      	movs	r1, #0
 801fce0:	4618      	mov	r0, r3
 801fce2:	f7ea fb72 	bl	800a3ca <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 801fce6:	697b      	ldr	r3, [r7, #20]
 801fce8:	691b      	ldr	r3, [r3, #16]
 801fcea:	4618      	mov	r0, r3
 801fcec:	f7e9 fce9 	bl	80096c2 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801fcf0:	4a0a      	ldr	r2, [pc, #40]	; (801fd1c <lv_disp_drv_register+0x18c>)
 801fcf2:	68fb      	ldr	r3, [r7, #12]
 801fcf4:	6013      	str	r3, [r2, #0]
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 801fcf6:	4b09      	ldr	r3, [pc, #36]	; (801fd1c <lv_disp_drv_register+0x18c>)
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	d102      	bne.n	801fd04 <lv_disp_drv_register+0x174>
 801fcfe:	4a07      	ldr	r2, [pc, #28]	; (801fd1c <lv_disp_drv_register+0x18c>)
 801fd00:	697b      	ldr	r3, [r7, #20]
 801fd02:	6013      	str	r3, [r2, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 801fd04:	697b      	ldr	r3, [r7, #20]
 801fd06:	685b      	ldr	r3, [r3, #4]
 801fd08:	4618      	mov	r0, r3
 801fd0a:	f003 fb9f 	bl	802344c <lv_timer_ready>

    return disp;
 801fd0e:	697b      	ldr	r3, [r7, #20]
}
 801fd10:	4618      	mov	r0, r3
 801fd12:	371c      	adds	r7, #28
 801fd14:	46bd      	mov	sp, r7
 801fd16:	bd90      	pop	{r4, r7, pc}
 801fd18:	20000868 	.word	0x20000868
 801fd1c:	2000083c 	.word	0x2000083c
 801fd20:	0800e701 	.word	0x0800e701

0801fd24 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 801fd24:	b480      	push	{r7}
 801fd26:	af00      	add	r7, sp, #0
    return disp_def;
 801fd28:	4b03      	ldr	r3, [pc, #12]	; (801fd38 <lv_disp_get_default+0x14>)
 801fd2a:	681b      	ldr	r3, [r3, #0]
}
 801fd2c:	4618      	mov	r0, r3
 801fd2e:	46bd      	mov	sp, r7
 801fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd34:	4770      	bx	lr
 801fd36:	bf00      	nop
 801fd38:	2000083c 	.word	0x2000083c

0801fd3c <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801fd3c:	b580      	push	{r7, lr}
 801fd3e:	b082      	sub	sp, #8
 801fd40:	af00      	add	r7, sp, #0
 801fd42:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801fd44:	687b      	ldr	r3, [r7, #4]
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d102      	bne.n	801fd50 <lv_disp_get_hor_res+0x14>
 801fd4a:	f7ff ffeb 	bl	801fd24 <lv_disp_get_default>
 801fd4e:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	d101      	bne.n	801fd5a <lv_disp_get_hor_res+0x1e>
        return 0;
 801fd56:	2300      	movs	r3, #0
 801fd58:	e012      	b.n	801fd80 <lv_disp_get_hor_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	681b      	ldr	r3, [r3, #0]
 801fd5e:	7c1b      	ldrb	r3, [r3, #16]
 801fd60:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fd64:	b2db      	uxtb	r3, r3
 801fd66:	2b01      	cmp	r3, #1
 801fd68:	d001      	beq.n	801fd6e <lv_disp_get_hor_res+0x32>
 801fd6a:	2b03      	cmp	r3, #3
 801fd6c:	d104      	bne.n	801fd78 <lv_disp_get_hor_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fd76:	e003      	b.n	801fd80 <lv_disp_get_hor_res+0x44>
            default:
                return disp->driver->hor_res;
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	681b      	ldr	r3, [r3, #0]
 801fd7c:	f9b3 3000 	ldrsh.w	r3, [r3]
        }
    }
}
 801fd80:	4618      	mov	r0, r3
 801fd82:	3708      	adds	r7, #8
 801fd84:	46bd      	mov	sp, r7
 801fd86:	bd80      	pop	{r7, pc}

0801fd88 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b082      	sub	sp, #8
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	d102      	bne.n	801fd9c <lv_disp_get_ver_res+0x14>
 801fd96:	f7ff ffc5 	bl	801fd24 <lv_disp_get_default>
 801fd9a:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d101      	bne.n	801fda6 <lv_disp_get_ver_res+0x1e>
        return 0;
 801fda2:	2300      	movs	r3, #0
 801fda4:	e012      	b.n	801fdcc <lv_disp_get_ver_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	7c1b      	ldrb	r3, [r3, #16]
 801fdac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fdb0:	b2db      	uxtb	r3, r3
 801fdb2:	2b01      	cmp	r3, #1
 801fdb4:	d001      	beq.n	801fdba <lv_disp_get_ver_res+0x32>
 801fdb6:	2b03      	cmp	r3, #3
 801fdb8:	d104      	bne.n	801fdc4 <lv_disp_get_ver_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 801fdba:	687b      	ldr	r3, [r7, #4]
 801fdbc:	681b      	ldr	r3, [r3, #0]
 801fdbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fdc2:	e003      	b.n	801fdcc <lv_disp_get_ver_res+0x44>
            default:
                return disp->driver->ver_res;
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        }
    }
}
 801fdcc:	4618      	mov	r0, r3
 801fdce:	3708      	adds	r7, #8
 801fdd0:	46bd      	mov	sp, r7
 801fdd2:	bd80      	pop	{r7, pc}

0801fdd4 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 801fdd4:	b580      	push	{r7, lr}
 801fdd6:	b082      	sub	sp, #8
 801fdd8:	af00      	add	r7, sp, #0
 801fdda:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	d102      	bne.n	801fde8 <lv_disp_get_dpi+0x14>
 801fde2:	f7ff ff9f 	bl	801fd24 <lv_disp_get_default>
 801fde6:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d101      	bne.n	801fdf2 <lv_disp_get_dpi+0x1e>
 801fdee:	2382      	movs	r3, #130	; 0x82
 801fdf0:	e006      	b.n	801fe00 <lv_disp_get_dpi+0x2c>
    return disp->driver->dpi;
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	691b      	ldr	r3, [r3, #16]
 801fdf8:	f3c3 13c9 	ubfx	r3, r3, #7, #10
 801fdfc:	b29b      	uxth	r3, r3
 801fdfe:	b21b      	sxth	r3, r3
}
 801fe00:	4618      	mov	r0, r3
 801fe02:	3708      	adds	r7, #8
 801fe04:	46bd      	mov	sp, r7
 801fe06:	bd80      	pop	{r7, pc}

0801fe08 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 801fe08:	b480      	push	{r7}
 801fe0a:	b083      	sub	sp, #12
 801fe0c:	af00      	add	r7, sp, #0
 801fe0e:	6078      	str	r0, [r7, #4]
    disp_drv->draw_buf->flushing = 0;
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	68db      	ldr	r3, [r3, #12]
 801fe14:	2200      	movs	r2, #0
 801fe16:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	68db      	ldr	r3, [r3, #12]
 801fe1c:	2200      	movs	r2, #0
 801fe1e:	615a      	str	r2, [r3, #20]
}
 801fe20:	bf00      	nop
 801fe22:	370c      	adds	r7, #12
 801fe24:	46bd      	mov	sp, r7
 801fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe2a:	4770      	bx	lr

0801fe2c <lv_disp_get_draw_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
 801fe2c:	b480      	push	{r7}
 801fe2e:	b083      	sub	sp, #12
 801fe30:	af00      	add	r7, sp, #0
 801fe32:	6078      	str	r0, [r7, #4]
    return disp->driver->draw_buf;
 801fe34:	687b      	ldr	r3, [r7, #4]
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	68db      	ldr	r3, [r3, #12]
}
 801fe3a:	4618      	mov	r0, r3
 801fe3c:	370c      	adds	r7, #12
 801fe3e:	46bd      	mov	sp, r7
 801fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe44:	4770      	bx	lr
	...

0801fe48 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 801fe48:	b580      	push	{r7, lr}
 801fe4a:	b082      	sub	sp, #8
 801fe4c:	af00      	add	r7, sp, #0
 801fe4e:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d104      	bne.n	801fe60 <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801fe56:	4807      	ldr	r0, [pc, #28]	; (801fe74 <lv_indev_get_next+0x2c>)
 801fe58:	f001 fdc5 	bl	80219e6 <_lv_ll_get_head>
 801fe5c:	4603      	mov	r3, r0
 801fe5e:	e004      	b.n	801fe6a <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801fe60:	6879      	ldr	r1, [r7, #4]
 801fe62:	4804      	ldr	r0, [pc, #16]	; (801fe74 <lv_indev_get_next+0x2c>)
 801fe64:	f001 fde1 	bl	8021a2a <_lv_ll_get_next>
 801fe68:	4603      	mov	r3, r0
}
 801fe6a:	4618      	mov	r0, r3
 801fe6c:	3708      	adds	r7, #8
 801fe6e:	46bd      	mov	sp, r7
 801fe70:	bd80      	pop	{r7, pc}
 801fe72:	bf00      	nop
 801fe74:	20000874 	.word	0x20000874

0801fe78 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 801fe78:	b480      	push	{r7}
 801fe7a:	b083      	sub	sp, #12
 801fe7c:	af00      	add	r7, sp, #0
 801fe7e:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 801fe80:	4b07      	ldr	r3, [pc, #28]	; (801fea0 <lv_tick_inc+0x28>)
 801fe82:	2200      	movs	r2, #0
 801fe84:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801fe86:	4b07      	ldr	r3, [pc, #28]	; (801fea4 <lv_tick_inc+0x2c>)
 801fe88:	681a      	ldr	r2, [r3, #0]
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	4413      	add	r3, r2
 801fe8e:	4a05      	ldr	r2, [pc, #20]	; (801fea4 <lv_tick_inc+0x2c>)
 801fe90:	6013      	str	r3, [r2, #0]
}
 801fe92:	bf00      	nop
 801fe94:	370c      	adds	r7, #12
 801fe96:	46bd      	mov	sp, r7
 801fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe9c:	4770      	bx	lr
 801fe9e:	bf00      	nop
 801fea0:	20000844 	.word	0x20000844
 801fea4:	20000840 	.word	0x20000840

0801fea8 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 801fea8:	b480      	push	{r7}
 801feaa:	b083      	sub	sp, #12
 801feac:	af00      	add	r7, sp, #0
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801feae:	4b09      	ldr	r3, [pc, #36]	; (801fed4 <lv_tick_get+0x2c>)
 801feb0:	2201      	movs	r2, #1
 801feb2:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 801feb4:	4b08      	ldr	r3, [pc, #32]	; (801fed8 <lv_tick_get+0x30>)
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 801feba:	4b06      	ldr	r3, [pc, #24]	; (801fed4 <lv_tick_get+0x2c>)
 801febc:	781b      	ldrb	r3, [r3, #0]
 801febe:	b2db      	uxtb	r3, r3
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d0f4      	beq.n	801feae <lv_tick_get+0x6>

    return result;
 801fec4:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801fec6:	4618      	mov	r0, r3
 801fec8:	370c      	adds	r7, #12
 801feca:	46bd      	mov	sp, r7
 801fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fed0:	4770      	bx	lr
 801fed2:	bf00      	nop
 801fed4:	20000844 	.word	0x20000844
 801fed8:	20000840 	.word	0x20000840

0801fedc <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801fedc:	b580      	push	{r7, lr}
 801fede:	b084      	sub	sp, #16
 801fee0:	af00      	add	r7, sp, #0
 801fee2:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801fee4:	f7ff ffe0 	bl	801fea8 <lv_tick_get>
 801fee8:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 801feea:	68fa      	ldr	r2, [r7, #12]
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	429a      	cmp	r2, r3
 801fef0:	d304      	bcc.n	801fefc <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801fef2:	68fa      	ldr	r2, [r7, #12]
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	1ad3      	subs	r3, r2, r3
 801fef8:	607b      	str	r3, [r7, #4]
 801fefa:	e006      	b.n	801ff0a <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	425b      	negs	r3, r3
 801ff00:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801ff02:	687a      	ldr	r2, [r7, #4]
 801ff04:	68fb      	ldr	r3, [r7, #12]
 801ff06:	4413      	add	r3, r2
 801ff08:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 801ff0a:	687b      	ldr	r3, [r7, #4]
}
 801ff0c:	4618      	mov	r0, r3
 801ff0e:	3710      	adds	r7, #16
 801ff10:	46bd      	mov	sp, r7
 801ff12:	bd80      	pop	{r7, pc}

0801ff14 <_lv_anim_core_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_anim_core_init(void)
{
 801ff14:	b580      	push	{r7, lr}
 801ff16:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801ff18:	2144      	movs	r1, #68	; 0x44
 801ff1a:	4809      	ldr	r0, [pc, #36]	; (801ff40 <_lv_anim_core_init+0x2c>)
 801ff1c:	f001 fc85 	bl	802182a <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 801ff20:	2200      	movs	r2, #0
 801ff22:	211e      	movs	r1, #30
 801ff24:	4807      	ldr	r0, [pc, #28]	; (801ff44 <_lv_anim_core_init+0x30>)
 801ff26:	f003 fa25 	bl	8023374 <lv_timer_create>
 801ff2a:	4603      	mov	r3, r0
 801ff2c:	4a06      	ldr	r2, [pc, #24]	; (801ff48 <_lv_anim_core_init+0x34>)
 801ff2e:	6013      	str	r3, [r2, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 801ff30:	f000 fae8 	bl	8020504 <anim_mark_list_change>
    anim_list_changed = false;
 801ff34:	4b05      	ldr	r3, [pc, #20]	; (801ff4c <_lv_anim_core_init+0x38>)
 801ff36:	2200      	movs	r2, #0
 801ff38:	701a      	strb	r2, [r3, #0]
}
 801ff3a:	bf00      	nop
 801ff3c:	bd80      	pop	{r7, pc}
 801ff3e:	bf00      	nop
 801ff40:	2000088c 	.word	0x2000088c
 801ff44:	08020259 	.word	0x08020259
 801ff48:	20000850 	.word	0x20000850
 801ff4c:	2000084c 	.word	0x2000084c

0801ff50 <lv_anim_init>:

void lv_anim_init(lv_anim_t * a)
{
 801ff50:	b580      	push	{r7, lr}
 801ff52:	b082      	sub	sp, #8
 801ff54:	af00      	add	r7, sp, #0
 801ff56:	6078      	str	r0, [r7, #4]
    lv_memset_00(a, sizeof(lv_anim_t));
 801ff58:	2144      	movs	r1, #68	; 0x44
 801ff5a:	6878      	ldr	r0, [r7, #4]
 801ff5c:	f002 fb36 	bl	80225cc <lv_memset_00>
    a->time = 500;
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801ff66:	62da      	str	r2, [r3, #44]	; 0x2c
    a->start_value = 0;
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	2200      	movs	r2, #0
 801ff6c:	621a      	str	r2, [r3, #32]
    a->end_value = 100;
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	2264      	movs	r2, #100	; 0x64
 801ff72:	629a      	str	r2, [r3, #40]	; 0x28
    a->repeat_cnt = 1;
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	2201      	movs	r2, #1
 801ff78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	4a06      	ldr	r2, [pc, #24]	; (801ff98 <lv_anim_init+0x48>)
 801ff80:	61da      	str	r2, [r3, #28]
    a->early_apply = 1;
 801ff82:	687a      	ldr	r2, [r7, #4]
 801ff84:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801ff88:	f043 0301 	orr.w	r3, r3, #1
 801ff8c:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 801ff90:	bf00      	nop
 801ff92:	3708      	adds	r7, #8
 801ff94:	46bd      	mov	sp, r7
 801ff96:	bd80      	pop	{r7, pc}
 801ff98:	080201a3 	.word	0x080201a3

0801ff9c <lv_anim_start>:

lv_anim_t * lv_anim_start(const lv_anim_t * a)
{
 801ff9c:	b580      	push	{r7, lr}
 801ff9e:	b084      	sub	sp, #16
 801ffa0:	af00      	add	r7, sp, #0
 801ffa2:	6078      	str	r0, [r7, #4]
    TRACE_ANIM("begin");

    /*Do not let two animations for the same 'var' with the same 'exec_cb'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	685b      	ldr	r3, [r3, #4]
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d007      	beq.n	801ffbc <lv_anim_start+0x20>
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	681a      	ldr	r2, [r3, #0]
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	685b      	ldr	r3, [r3, #4]
 801ffb4:	4619      	mov	r1, r3
 801ffb6:	4610      	mov	r0, r2
 801ffb8:	f000 f868 	bl	802008c <lv_anim_del>

    /*If the list is empty the anim timer was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 801ffbc:	4830      	ldr	r0, [pc, #192]	; (8020080 <lv_anim_start+0xe4>)
 801ffbe:	f001 fd5d 	bl	8021a7c <_lv_ll_is_empty>
 801ffc2:	4603      	mov	r3, r0
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d004      	beq.n	801ffd2 <lv_anim_start+0x36>
        last_timer_run = lv_tick_get();
 801ffc8:	f7ff ff6e 	bl	801fea8 <lv_tick_get>
 801ffcc:	4603      	mov	r3, r0
 801ffce:	4a2d      	ldr	r2, [pc, #180]	; (8020084 <lv_anim_start+0xe8>)
 801ffd0:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801ffd2:	482b      	ldr	r0, [pc, #172]	; (8020080 <lv_anim_start+0xe4>)
 801ffd4:	f001 fc42 	bl	802185c <_lv_ll_ins_head>
 801ffd8:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(new_anim);
 801ffda:	68fb      	ldr	r3, [r7, #12]
 801ffdc:	2b00      	cmp	r3, #0
 801ffde:	d100      	bne.n	801ffe2 <lv_anim_start+0x46>
 801ffe0:	e7fe      	b.n	801ffe0 <lv_anim_start+0x44>
    if(new_anim == NULL) return NULL;
 801ffe2:	68fb      	ldr	r3, [r7, #12]
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d101      	bne.n	801ffec <lv_anim_start+0x50>
 801ffe8:	2300      	movs	r3, #0
 801ffea:	e045      	b.n	8020078 <lv_anim_start+0xdc>

    /*Initialize the animation descriptor*/
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 801ffec:	2244      	movs	r2, #68	; 0x44
 801ffee:	6879      	ldr	r1, [r7, #4]
 801fff0:	68f8      	ldr	r0, [r7, #12]
 801fff2:	f002 f845 	bl	8022080 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	687a      	ldr	r2, [r7, #4]
 801fffc:	429a      	cmp	r2, r3
 801fffe:	d102      	bne.n	8020006 <lv_anim_start+0x6a>
 8020000:	68fb      	ldr	r3, [r7, #12]
 8020002:	68fa      	ldr	r2, [r7, #12]
 8020004:	601a      	str	r2, [r3, #0]
    new_anim->run_round = anim_run_round;
 8020006:	4b20      	ldr	r3, [pc, #128]	; (8020088 <lv_anim_start+0xec>)
 8020008:	7819      	ldrb	r1, [r3, #0]
 802000a:	68fa      	ldr	r2, [r7, #12]
 802000c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8020010:	f361 0382 	bfi	r3, r1, #2, #1
 8020014:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

    /*Set the start value*/
    if(new_anim->early_apply) {
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802001e:	f003 0301 	and.w	r3, r3, #1
 8020022:	b2db      	uxtb	r3, r3
 8020024:	2b00      	cmp	r3, #0
 8020026:	d024      	beq.n	8020072 <lv_anim_start+0xd6>
        if(new_anim->get_value_cb) {
 8020028:	68fb      	ldr	r3, [r7, #12]
 802002a:	695b      	ldr	r3, [r3, #20]
 802002c:	2b00      	cmp	r3, #0
 802002e:	d010      	beq.n	8020052 <lv_anim_start+0xb6>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 8020030:	68fb      	ldr	r3, [r7, #12]
 8020032:	695b      	ldr	r3, [r3, #20]
 8020034:	68f8      	ldr	r0, [r7, #12]
 8020036:	4798      	blx	r3
 8020038:	60b8      	str	r0, [r7, #8]
            new_anim->start_value += v_ofs;
 802003a:	68fb      	ldr	r3, [r7, #12]
 802003c:	6a1a      	ldr	r2, [r3, #32]
 802003e:	68bb      	ldr	r3, [r7, #8]
 8020040:	441a      	add	r2, r3
 8020042:	68fb      	ldr	r3, [r7, #12]
 8020044:	621a      	str	r2, [r3, #32]
            new_anim->end_value += v_ofs;
 8020046:	68fb      	ldr	r3, [r7, #12]
 8020048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802004a:	68bb      	ldr	r3, [r7, #8]
 802004c:	441a      	add	r2, r3
 802004e:	68fb      	ldr	r3, [r7, #12]
 8020050:	629a      	str	r2, [r3, #40]	; 0x28
        }

        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8020052:	68fb      	ldr	r3, [r7, #12]
 8020054:	685b      	ldr	r3, [r3, #4]
 8020056:	2b00      	cmp	r3, #0
 8020058:	d00b      	beq.n	8020072 <lv_anim_start+0xd6>
 802005a:	68fb      	ldr	r3, [r7, #12]
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	2b00      	cmp	r3, #0
 8020060:	d007      	beq.n	8020072 <lv_anim_start+0xd6>
 8020062:	68fb      	ldr	r3, [r7, #12]
 8020064:	685b      	ldr	r3, [r3, #4]
 8020066:	68fa      	ldr	r2, [r7, #12]
 8020068:	6810      	ldr	r0, [r2, #0]
 802006a:	68fa      	ldr	r2, [r7, #12]
 802006c:	6a12      	ldr	r2, [r2, #32]
 802006e:	4611      	mov	r1, r2
 8020070:	4798      	blx	r3
    }

    /*Creating an animation changed the linked list.
     *It's important if it happens in a ready callback. (see `anim_timer`)*/
    anim_mark_list_change();
 8020072:	f000 fa47 	bl	8020504 <anim_mark_list_change>

    TRACE_ANIM("finished");
    return new_anim;
 8020076:	68fb      	ldr	r3, [r7, #12]
}
 8020078:	4618      	mov	r0, r3
 802007a:	3710      	adds	r7, #16
 802007c:	46bd      	mov	sp, r7
 802007e:	bd80      	pop	{r7, pc}
 8020080:	2000088c 	.word	0x2000088c
 8020084:	20000848 	.word	0x20000848
 8020088:	2000084d 	.word	0x2000084d

0802008c <lv_anim_del>:

    return playtime;
}

bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 802008c:	b580      	push	{r7, lr}
 802008e:	b086      	sub	sp, #24
 8020090:	af00      	add	r7, sp, #0
 8020092:	6078      	str	r0, [r7, #4]
 8020094:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 8020096:	2300      	movs	r3, #0
 8020098:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 802009a:	481b      	ldr	r0, [pc, #108]	; (8020108 <lv_anim_del+0x7c>)
 802009c:	f001 fca3 	bl	80219e6 <_lv_ll_get_head>
 80200a0:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 80200a2:	e029      	b.n	80200f8 <lv_anim_del+0x6c>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80200a4:	6979      	ldr	r1, [r7, #20]
 80200a6:	4818      	ldr	r0, [pc, #96]	; (8020108 <lv_anim_del+0x7c>)
 80200a8:	f001 fcbf 	bl	8021a2a <_lv_ll_get_next>
 80200ac:	60f8      	str	r0, [r7, #12]

        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80200ae:	697b      	ldr	r3, [r7, #20]
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	687a      	ldr	r2, [r7, #4]
 80200b4:	429a      	cmp	r2, r3
 80200b6:	d002      	beq.n	80200be <lv_anim_del+0x32>
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	d11a      	bne.n	80200f4 <lv_anim_del+0x68>
 80200be:	697b      	ldr	r3, [r7, #20]
 80200c0:	685b      	ldr	r3, [r3, #4]
 80200c2:	683a      	ldr	r2, [r7, #0]
 80200c4:	429a      	cmp	r2, r3
 80200c6:	d002      	beq.n	80200ce <lv_anim_del+0x42>
 80200c8:	683b      	ldr	r3, [r7, #0]
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d112      	bne.n	80200f4 <lv_anim_del+0x68>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80200ce:	6979      	ldr	r1, [r7, #20]
 80200d0:	480d      	ldr	r0, [pc, #52]	; (8020108 <lv_anim_del+0x7c>)
 80200d2:	f001 fc2b 	bl	802192c <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 80200d6:	697b      	ldr	r3, [r7, #20]
 80200d8:	691b      	ldr	r3, [r3, #16]
 80200da:	2b00      	cmp	r3, #0
 80200dc:	d003      	beq.n	80200e6 <lv_anim_del+0x5a>
 80200de:	697b      	ldr	r3, [r7, #20]
 80200e0:	691b      	ldr	r3, [r3, #16]
 80200e2:	6978      	ldr	r0, [r7, #20]
 80200e4:	4798      	blx	r3
            lv_mem_free(a);
 80200e6:	6978      	ldr	r0, [r7, #20]
 80200e8:	f001 fe6c 	bl	8021dc4 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 80200ec:	f000 fa0a 	bl	8020504 <anim_mark_list_change>
                                       the linked list*/
            del = true;
 80200f0:	2301      	movs	r3, #1
 80200f2:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 80200f4:	68fb      	ldr	r3, [r7, #12]
 80200f6:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 80200f8:	697b      	ldr	r3, [r7, #20]
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	d1d2      	bne.n	80200a4 <lv_anim_del+0x18>
    }

    return del;
 80200fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8020100:	4618      	mov	r0, r3
 8020102:	3718      	adds	r7, #24
 8020104:	46bd      	mov	sp, r7
 8020106:	bd80      	pop	{r7, pc}
 8020108:	2000088c 	.word	0x2000088c

0802010c <lv_anim_get>:
    _lv_ll_clear(&LV_GC_ROOT(_lv_anim_ll));
    anim_mark_list_change();
}

lv_anim_t * lv_anim_get(void * var, lv_anim_exec_xcb_t exec_cb)
{
 802010c:	b580      	push	{r7, lr}
 802010e:	b084      	sub	sp, #16
 8020110:	af00      	add	r7, sp, #0
 8020112:	6078      	str	r0, [r7, #4]
 8020114:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8020116:	4810      	ldr	r0, [pc, #64]	; (8020158 <lv_anim_get+0x4c>)
 8020118:	f001 fc65 	bl	80219e6 <_lv_ll_get_head>
 802011c:	60f8      	str	r0, [r7, #12]
 802011e:	e013      	b.n	8020148 <lv_anim_get+0x3c>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8020120:	68fb      	ldr	r3, [r7, #12]
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	687a      	ldr	r2, [r7, #4]
 8020126:	429a      	cmp	r2, r3
 8020128:	d109      	bne.n	802013e <lv_anim_get+0x32>
 802012a:	68fb      	ldr	r3, [r7, #12]
 802012c:	685b      	ldr	r3, [r3, #4]
 802012e:	683a      	ldr	r2, [r7, #0]
 8020130:	429a      	cmp	r2, r3
 8020132:	d002      	beq.n	802013a <lv_anim_get+0x2e>
 8020134:	683b      	ldr	r3, [r7, #0]
 8020136:	2b00      	cmp	r3, #0
 8020138:	d101      	bne.n	802013e <lv_anim_get+0x32>
            return a;
 802013a:	68fb      	ldr	r3, [r7, #12]
 802013c:	e008      	b.n	8020150 <lv_anim_get+0x44>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 802013e:	68f9      	ldr	r1, [r7, #12]
 8020140:	4805      	ldr	r0, [pc, #20]	; (8020158 <lv_anim_get+0x4c>)
 8020142:	f001 fc72 	bl	8021a2a <_lv_ll_get_next>
 8020146:	60f8      	str	r0, [r7, #12]
 8020148:	68fb      	ldr	r3, [r7, #12]
 802014a:	2b00      	cmp	r3, #0
 802014c:	d1e8      	bne.n	8020120 <lv_anim_get+0x14>
        }
    }

    return NULL;
 802014e:	2300      	movs	r3, #0
}
 8020150:	4618      	mov	r0, r3
 8020152:	3710      	adds	r7, #16
 8020154:	46bd      	mov	sp, r7
 8020156:	bd80      	pop	{r7, pc}
 8020158:	2000088c 	.word	0x2000088c

0802015c <lv_anim_speed_to_time>:

    return cnt;
}

uint32_t lv_anim_speed_to_time(uint32_t speed, int32_t start, int32_t end)
{
 802015c:	b480      	push	{r7}
 802015e:	b087      	sub	sp, #28
 8020160:	af00      	add	r7, sp, #0
 8020162:	60f8      	str	r0, [r7, #12]
 8020164:	60b9      	str	r1, [r7, #8]
 8020166:	607a      	str	r2, [r7, #4]
    uint32_t d    = LV_ABS(start - end);
 8020168:	68ba      	ldr	r2, [r7, #8]
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	1ad3      	subs	r3, r2, r3
 802016e:	2b00      	cmp	r3, #0
 8020170:	bfb8      	it	lt
 8020172:	425b      	neglt	r3, r3
 8020174:	613b      	str	r3, [r7, #16]
    uint32_t time = (d * 1000) / speed;
 8020176:	693b      	ldr	r3, [r7, #16]
 8020178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802017c:	fb03 f202 	mul.w	r2, r3, r2
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	fbb2 f3f3 	udiv	r3, r2, r3
 8020186:	617b      	str	r3, [r7, #20]

    if(time == 0) {
 8020188:	697b      	ldr	r3, [r7, #20]
 802018a:	2b00      	cmp	r3, #0
 802018c:	d102      	bne.n	8020194 <lv_anim_speed_to_time+0x38>
        time++;
 802018e:	697b      	ldr	r3, [r7, #20]
 8020190:	3301      	adds	r3, #1
 8020192:	617b      	str	r3, [r7, #20]
    }

    return time;
 8020194:	697b      	ldr	r3, [r7, #20]
}
 8020196:	4618      	mov	r0, r3
 8020198:	371c      	adds	r7, #28
 802019a:	46bd      	mov	sp, r7
 802019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201a0:	4770      	bx	lr

080201a2 <lv_anim_path_linear>:
{
    anim_timer(NULL);
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
 80201a2:	b580      	push	{r7, lr}
 80201a4:	b086      	sub	sp, #24
 80201a6:	af02      	add	r7, sp, #8
 80201a8:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80201b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80201b6:	9300      	str	r3, [sp, #0]
 80201b8:	2300      	movs	r3, #0
 80201ba:	2100      	movs	r1, #0
 80201bc:	f001 fd7a 	bl	8021cb4 <lv_map>
 80201c0:	60f8      	str	r0, [r7, #12]

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	6a1b      	ldr	r3, [r3, #32]
 80201ca:	1ad2      	subs	r2, r2, r3
 80201cc:	68fb      	ldr	r3, [r7, #12]
 80201ce:	fb02 f303 	mul.w	r3, r2, r3
 80201d2:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 80201d4:	68bb      	ldr	r3, [r7, #8]
 80201d6:	129b      	asrs	r3, r3, #10
 80201d8:	60bb      	str	r3, [r7, #8]
    new_value += a->start_value;
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	6a1b      	ldr	r3, [r3, #32]
 80201de:	68ba      	ldr	r2, [r7, #8]
 80201e0:	4413      	add	r3, r2
 80201e2:	60bb      	str	r3, [r7, #8]

    return new_value;
 80201e4:	68bb      	ldr	r3, [r7, #8]
}
 80201e6:	4618      	mov	r0, r3
 80201e8:	3710      	adds	r7, #16
 80201ea:	46bd      	mov	sp, r7
 80201ec:	bd80      	pop	{r7, pc}

080201ee <lv_anim_path_ease_out>:

    return new_value;
}

int32_t lv_anim_path_ease_out(const lv_anim_t * a)
{
 80201ee:	b580      	push	{r7, lr}
 80201f0:	b088      	sub	sp, #32
 80201f2:	af02      	add	r7, sp, #8
 80201f4:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80201fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020202:	9300      	str	r3, [sp, #0]
 8020204:	2300      	movs	r3, #0
 8020206:	2100      	movs	r1, #0
 8020208:	f001 fd54 	bl	8021cb4 <lv_map>
 802020c:	4603      	mov	r3, r0
 802020e:	617b      	str	r3, [r7, #20]
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 8020210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020214:	9300      	str	r3, [sp, #0]
 8020216:	f240 33b6 	movw	r3, #950	; 0x3b6
 802021a:	f44f 7261 	mov.w	r2, #900	; 0x384
 802021e:	2100      	movs	r1, #0
 8020220:	6978      	ldr	r0, [r7, #20]
 8020222:	f001 fcf5 	bl	8021c10 <lv_bezier3>
 8020226:	4603      	mov	r3, r0
 8020228:	613b      	str	r3, [r7, #16]

    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	6a1b      	ldr	r3, [r3, #32]
 8020232:	1ad2      	subs	r2, r2, r3
 8020234:	693b      	ldr	r3, [r7, #16]
 8020236:	fb02 f303 	mul.w	r3, r2, r3
 802023a:	60fb      	str	r3, [r7, #12]
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 802023c:	68fb      	ldr	r3, [r7, #12]
 802023e:	129b      	asrs	r3, r3, #10
 8020240:	60fb      	str	r3, [r7, #12]
    new_value += a->start_value;
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	6a1b      	ldr	r3, [r3, #32]
 8020246:	68fa      	ldr	r2, [r7, #12]
 8020248:	4413      	add	r3, r2
 802024a:	60fb      	str	r3, [r7, #12]

    return new_value;
 802024c:	68fb      	ldr	r3, [r7, #12]
}
 802024e:	4618      	mov	r0, r3
 8020250:	3718      	adds	r7, #24
 8020252:	46bd      	mov	sp, r7
 8020254:	bd80      	pop	{r7, pc}
	...

08020258 <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 8020258:	b580      	push	{r7, lr}
 802025a:	b088      	sub	sp, #32
 802025c:	af00      	add	r7, sp, #0
 802025e:	6078      	str	r0, [r7, #4]
    LV_UNUSED(param);

    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8020260:	4b5d      	ldr	r3, [pc, #372]	; (80203d8 <anim_timer+0x180>)
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	4618      	mov	r0, r3
 8020266:	f7ff fe39 	bl	801fedc <lv_tick_elaps>
 802026a:	61b8      	str	r0, [r7, #24]

    /*Flip the run round*/
    anim_run_round = anim_run_round ? false : true;
 802026c:	4b5b      	ldr	r3, [pc, #364]	; (80203dc <anim_timer+0x184>)
 802026e:	781b      	ldrb	r3, [r3, #0]
 8020270:	f083 0301 	eor.w	r3, r3, #1
 8020274:	b2da      	uxtb	r2, r3
 8020276:	4b59      	ldr	r3, [pc, #356]	; (80203dc <anim_timer+0x184>)
 8020278:	701a      	strb	r2, [r3, #0]

    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 802027a:	4859      	ldr	r0, [pc, #356]	; (80203e0 <anim_timer+0x188>)
 802027c:	f001 fbb3 	bl	80219e6 <_lv_ll_get_head>
 8020280:	61f8      	str	r0, [r7, #28]

    while(a != NULL) {
 8020282:	e09c      	b.n	80203be <anim_timer+0x166>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8020284:	4b57      	ldr	r3, [pc, #348]	; (80203e4 <anim_timer+0x18c>)
 8020286:	2200      	movs	r2, #0
 8020288:	701a      	strb	r2, [r3, #0]

        if(a->run_round != anim_run_round) {
 802028a:	69fb      	ldr	r3, [r7, #28]
 802028c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020290:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8020294:	b2da      	uxtb	r2, r3
 8020296:	4b51      	ldr	r3, [pc, #324]	; (80203dc <anim_timer+0x184>)
 8020298:	781b      	ldrb	r3, [r3, #0]
 802029a:	429a      	cmp	r2, r3
 802029c:	f000 8081 	beq.w	80203a2 <anim_timer+0x14a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 80202a0:	4b4e      	ldr	r3, [pc, #312]	; (80203dc <anim_timer+0x184>)
 80202a2:	7819      	ldrb	r1, [r3, #0]
 80202a4:	69fa      	ldr	r2, [r7, #28]
 80202a6:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80202aa:	f361 0382 	bfi	r3, r1, #2, #1
 80202ae:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 80202b2:	69fb      	ldr	r3, [r7, #28]
 80202b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80202b6:	461a      	mov	r2, r3
 80202b8:	69bb      	ldr	r3, [r7, #24]
 80202ba:	4413      	add	r3, r2
 80202bc:	617b      	str	r3, [r7, #20]
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 80202be:	69fb      	ldr	r3, [r7, #28]
 80202c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80202c4:	f003 0308 	and.w	r3, r3, #8
 80202c8:	b2db      	uxtb	r3, r3
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d132      	bne.n	8020334 <anim_timer+0xdc>
 80202ce:	69fb      	ldr	r3, [r7, #28]
 80202d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	dc2e      	bgt.n	8020334 <anim_timer+0xdc>
 80202d6:	697b      	ldr	r3, [r7, #20]
 80202d8:	2b00      	cmp	r3, #0
 80202da:	db2b      	blt.n	8020334 <anim_timer+0xdc>
                if(a->early_apply == 0 && a->get_value_cb) {
 80202dc:	69fb      	ldr	r3, [r7, #28]
 80202de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80202e2:	f003 0301 	and.w	r3, r3, #1
 80202e6:	b2db      	uxtb	r3, r3
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d114      	bne.n	8020316 <anim_timer+0xbe>
 80202ec:	69fb      	ldr	r3, [r7, #28]
 80202ee:	695b      	ldr	r3, [r3, #20]
 80202f0:	2b00      	cmp	r3, #0
 80202f2:	d010      	beq.n	8020316 <anim_timer+0xbe>
                    int32_t v_ofs = a->get_value_cb(a);
 80202f4:	69fb      	ldr	r3, [r7, #28]
 80202f6:	695b      	ldr	r3, [r3, #20]
 80202f8:	69f8      	ldr	r0, [r7, #28]
 80202fa:	4798      	blx	r3
 80202fc:	6138      	str	r0, [r7, #16]
                    a->start_value += v_ofs;
 80202fe:	69fb      	ldr	r3, [r7, #28]
 8020300:	6a1a      	ldr	r2, [r3, #32]
 8020302:	693b      	ldr	r3, [r7, #16]
 8020304:	441a      	add	r2, r3
 8020306:	69fb      	ldr	r3, [r7, #28]
 8020308:	621a      	str	r2, [r3, #32]
                    a->end_value += v_ofs;
 802030a:	69fb      	ldr	r3, [r7, #28]
 802030c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802030e:	693b      	ldr	r3, [r7, #16]
 8020310:	441a      	add	r2, r3
 8020312:	69fb      	ldr	r3, [r7, #28]
 8020314:	629a      	str	r2, [r3, #40]	; 0x28
                }
                if(a->start_cb) a->start_cb(a);
 8020316:	69fb      	ldr	r3, [r7, #28]
 8020318:	689b      	ldr	r3, [r3, #8]
 802031a:	2b00      	cmp	r3, #0
 802031c:	d003      	beq.n	8020326 <anim_timer+0xce>
 802031e:	69fb      	ldr	r3, [r7, #28]
 8020320:	689b      	ldr	r3, [r3, #8]
 8020322:	69f8      	ldr	r0, [r7, #28]
 8020324:	4798      	blx	r3
                a->start_cb_called = 1;
 8020326:	69fa      	ldr	r2, [r7, #28]
 8020328:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 802032c:	f043 0308 	orr.w	r3, r3, #8
 8020330:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
            a->act_time += elaps;
 8020334:	69fb      	ldr	r3, [r7, #28]
 8020336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020338:	461a      	mov	r2, r3
 802033a:	69bb      	ldr	r3, [r7, #24]
 802033c:	4413      	add	r3, r2
 802033e:	461a      	mov	r2, r3
 8020340:	69fb      	ldr	r3, [r7, #28]
 8020342:	631a      	str	r2, [r3, #48]	; 0x30
            if(a->act_time >= 0) {
 8020344:	69fb      	ldr	r3, [r7, #28]
 8020346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020348:	2b00      	cmp	r3, #0
 802034a:	db2a      	blt.n	80203a2 <anim_timer+0x14a>
                if(a->act_time > a->time) a->act_time = a->time;
 802034c:	69fb      	ldr	r3, [r7, #28]
 802034e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020350:	69fb      	ldr	r3, [r7, #28]
 8020352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020354:	429a      	cmp	r2, r3
 8020356:	dd03      	ble.n	8020360 <anim_timer+0x108>
 8020358:	69fb      	ldr	r3, [r7, #28]
 802035a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802035c:	69fb      	ldr	r3, [r7, #28]
 802035e:	631a      	str	r2, [r3, #48]	; 0x30

                int32_t new_value;
                new_value = a->path_cb(a);
 8020360:	69fb      	ldr	r3, [r7, #28]
 8020362:	69db      	ldr	r3, [r3, #28]
 8020364:	69f8      	ldr	r0, [r7, #28]
 8020366:	4798      	blx	r3
 8020368:	60f8      	str	r0, [r7, #12]

                if(new_value != a->current_value) {
 802036a:	69fb      	ldr	r3, [r7, #28]
 802036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802036e:	68fa      	ldr	r2, [r7, #12]
 8020370:	429a      	cmp	r2, r3
 8020372:	d00d      	beq.n	8020390 <anim_timer+0x138>
                    a->current_value = new_value;
 8020374:	69fb      	ldr	r3, [r7, #28]
 8020376:	68fa      	ldr	r2, [r7, #12]
 8020378:	625a      	str	r2, [r3, #36]	; 0x24
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 802037a:	69fb      	ldr	r3, [r7, #28]
 802037c:	685b      	ldr	r3, [r3, #4]
 802037e:	2b00      	cmp	r3, #0
 8020380:	d006      	beq.n	8020390 <anim_timer+0x138>
 8020382:	69fb      	ldr	r3, [r7, #28]
 8020384:	685b      	ldr	r3, [r3, #4]
 8020386:	69fa      	ldr	r2, [r7, #28]
 8020388:	6812      	ldr	r2, [r2, #0]
 802038a:	68f9      	ldr	r1, [r7, #12]
 802038c:	4610      	mov	r0, r2
 802038e:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 8020390:	69fb      	ldr	r3, [r7, #28]
 8020392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020394:	69fb      	ldr	r3, [r7, #28]
 8020396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020398:	429a      	cmp	r2, r3
 802039a:	db02      	blt.n	80203a2 <anim_timer+0x14a>
                    anim_ready_handler(a);
 802039c:	69f8      	ldr	r0, [r7, #28]
 802039e:	f000 f823 	bl	80203e8 <anim_ready_handler>
            }
        }

        /*If the linked list changed due to anim. delete then it's not safe to continue
         *the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 80203a2:	4b10      	ldr	r3, [pc, #64]	; (80203e4 <anim_timer+0x18c>)
 80203a4:	781b      	ldrb	r3, [r3, #0]
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	d004      	beq.n	80203b4 <anim_timer+0x15c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80203aa:	480d      	ldr	r0, [pc, #52]	; (80203e0 <anim_timer+0x188>)
 80203ac:	f001 fb1b 	bl	80219e6 <_lv_ll_get_head>
 80203b0:	61f8      	str	r0, [r7, #28]
 80203b2:	e004      	b.n	80203be <anim_timer+0x166>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80203b4:	69f9      	ldr	r1, [r7, #28]
 80203b6:	480a      	ldr	r0, [pc, #40]	; (80203e0 <anim_timer+0x188>)
 80203b8:	f001 fb37 	bl	8021a2a <_lv_ll_get_next>
 80203bc:	61f8      	str	r0, [r7, #28]
    while(a != NULL) {
 80203be:	69fb      	ldr	r3, [r7, #28]
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	f47f af5f 	bne.w	8020284 <anim_timer+0x2c>
    }

    last_timer_run = lv_tick_get();
 80203c6:	f7ff fd6f 	bl	801fea8 <lv_tick_get>
 80203ca:	4603      	mov	r3, r0
 80203cc:	4a02      	ldr	r2, [pc, #8]	; (80203d8 <anim_timer+0x180>)
 80203ce:	6013      	str	r3, [r2, #0]
}
 80203d0:	bf00      	nop
 80203d2:	3720      	adds	r7, #32
 80203d4:	46bd      	mov	sp, r7
 80203d6:	bd80      	pop	{r7, pc}
 80203d8:	20000848 	.word	0x20000848
 80203dc:	2000084d 	.word	0x2000084d
 80203e0:	2000088c 	.word	0x2000088c
 80203e4:	2000084c 	.word	0x2000084c

080203e8 <anim_ready_handler>:
 * Called when an animation is ready to do the necessary thinks
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 */
static void anim_ready_handler(lv_anim_t * a)
{
 80203e8:	b580      	push	{r7, lr}
 80203ea:	b084      	sub	sp, #16
 80203ec:	af00      	add	r7, sp, #0
 80203ee:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 80203f0:	687b      	ldr	r3, [r7, #4]
 80203f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80203f6:	f003 0302 	and.w	r3, r3, #2
 80203fa:	b2db      	uxtb	r3, r3
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	d113      	bne.n	8020428 <anim_ready_handler+0x40>
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8020406:	2b00      	cmp	r3, #0
 8020408:	d00e      	beq.n	8020428 <anim_ready_handler+0x40>
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8020410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020414:	4293      	cmp	r3, r2
 8020416:	d007      	beq.n	8020428 <anim_ready_handler+0x40>
        a->repeat_cnt--;
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 802041e:	3b01      	subs	r3, #1
 8020420:	b29a      	uxth	r2, r3
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready*/
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 802042e:	2b00      	cmp	r3, #0
 8020430:	d125      	bne.n	802047e <anim_ready_handler+0x96>
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020436:	2b00      	cmp	r3, #0
 8020438:	d007      	beq.n	802044a <anim_ready_handler+0x62>
 802043a:	687b      	ldr	r3, [r7, #4]
 802043c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020440:	f003 0302 	and.w	r3, r3, #2
 8020444:	b2db      	uxtb	r3, r3
 8020446:	2b00      	cmp	r3, #0
 8020448:	d019      	beq.n	802047e <anim_ready_handler+0x96>

        /*Delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 802044a:	6879      	ldr	r1, [r7, #4]
 802044c:	482c      	ldr	r0, [pc, #176]	; (8020500 <anim_ready_handler+0x118>)
 802044e:	f001 fa6d 	bl	802192c <_lv_ll_remove>
        /*Flag that the list has changed*/
        anim_mark_list_change();
 8020452:	f000 f857 	bl	8020504 <anim_mark_list_change>

        /*Call the callback function at the end*/
        if(a->ready_cb != NULL) a->ready_cb(a);
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	68db      	ldr	r3, [r3, #12]
 802045a:	2b00      	cmp	r3, #0
 802045c:	d003      	beq.n	8020466 <anim_ready_handler+0x7e>
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	68db      	ldr	r3, [r3, #12]
 8020462:	6878      	ldr	r0, [r7, #4]
 8020464:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	691b      	ldr	r3, [r3, #16]
 802046a:	2b00      	cmp	r3, #0
 802046c:	d003      	beq.n	8020476 <anim_ready_handler+0x8e>
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	691b      	ldr	r3, [r3, #16]
 8020472:	6878      	ldr	r0, [r7, #4]
 8020474:	4798      	blx	r3
        lv_mem_free(a);
 8020476:	6878      	ldr	r0, [r7, #4]
 8020478:	f001 fca4 	bl	8021dc4 <lv_mem_free>
            tmp = a->time;
            a->time = a->playback_time;
            a->playback_time = tmp;
        }
    }
}
 802047c:	e03c      	b.n	80204f8 <anim_ready_handler+0x110>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020482:	425a      	negs	r2, r3
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	631a      	str	r2, [r3, #48]	; 0x30
        if(a->playback_time != 0) {
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802048c:	2b00      	cmp	r3, #0
 802048e:	d033      	beq.n	80204f8 <anim_ready_handler+0x110>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020496:	f003 0302 	and.w	r3, r3, #2
 802049a:	b2db      	uxtb	r3, r3
 802049c:	2b00      	cmp	r3, #0
 802049e:	d104      	bne.n	80204aa <anim_ready_handler+0xc2>
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80204a4:	425a      	negs	r2, r3
 80204a6:	687b      	ldr	r3, [r7, #4]
 80204a8:	631a      	str	r2, [r3, #48]	; 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80204b0:	f003 0302 	and.w	r3, r3, #2
 80204b4:	b2db      	uxtb	r3, r3
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	bf0c      	ite	eq
 80204ba:	2301      	moveq	r3, #1
 80204bc:	2300      	movne	r3, #0
 80204be:	b2d9      	uxtb	r1, r3
 80204c0:	687a      	ldr	r2, [r7, #4]
 80204c2:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80204c6:	f361 0341 	bfi	r3, r1, #1, #1
 80204ca:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            int32_t tmp    = a->start_value;
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	6a1b      	ldr	r3, [r3, #32]
 80204d2:	60fb      	str	r3, [r7, #12]
            a->start_value = a->end_value;
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	621a      	str	r2, [r3, #32]
            a->end_value   = tmp;
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	68fa      	ldr	r2, [r7, #12]
 80204e0:	629a      	str	r2, [r3, #40]	; 0x28
            tmp = a->time;
 80204e2:	687b      	ldr	r3, [r7, #4]
 80204e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80204e6:	60fb      	str	r3, [r7, #12]
            a->time = a->playback_time;
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80204ec:	461a      	mov	r2, r3
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	62da      	str	r2, [r3, #44]	; 0x2c
            a->playback_time = tmp;
 80204f2:	68fa      	ldr	r2, [r7, #12]
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80204f8:	bf00      	nop
 80204fa:	3710      	adds	r7, #16
 80204fc:	46bd      	mov	sp, r7
 80204fe:	bd80      	pop	{r7, pc}
 8020500:	2000088c 	.word	0x2000088c

08020504 <anim_mark_list_change>:

static void anim_mark_list_change(void)
{
 8020504:	b580      	push	{r7, lr}
 8020506:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 8020508:	4b0a      	ldr	r3, [pc, #40]	; (8020534 <anim_mark_list_change+0x30>)
 802050a:	2201      	movs	r2, #1
 802050c:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 802050e:	480a      	ldr	r0, [pc, #40]	; (8020538 <anim_mark_list_change+0x34>)
 8020510:	f001 fa69 	bl	80219e6 <_lv_ll_get_head>
 8020514:	4603      	mov	r3, r0
 8020516:	2b00      	cmp	r3, #0
 8020518:	d105      	bne.n	8020526 <anim_mark_list_change+0x22>
        lv_timer_pause(_lv_anim_tmr);
 802051a:	4b08      	ldr	r3, [pc, #32]	; (802053c <anim_mark_list_change+0x38>)
 802051c:	681b      	ldr	r3, [r3, #0]
 802051e:	4618      	mov	r0, r3
 8020520:	f002 ff76 	bl	8023410 <lv_timer_pause>
    else
        lv_timer_resume(_lv_anim_tmr);
}
 8020524:	e004      	b.n	8020530 <anim_mark_list_change+0x2c>
        lv_timer_resume(_lv_anim_tmr);
 8020526:	4b05      	ldr	r3, [pc, #20]	; (802053c <anim_mark_list_change+0x38>)
 8020528:	681b      	ldr	r3, [r3, #0]
 802052a:	4618      	mov	r0, r3
 802052c:	f002 ff7f 	bl	802342e <lv_timer_resume>
}
 8020530:	bf00      	nop
 8020532:	bd80      	pop	{r7, pc}
 8020534:	2000084c 	.word	0x2000084c
 8020538:	2000088c 	.word	0x2000088c
 802053c:	20000850 	.word	0x20000850

08020540 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8020540:	b480      	push	{r7}
 8020542:	b083      	sub	sp, #12
 8020544:	af00      	add	r7, sp, #0
 8020546:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802054e:	b29a      	uxth	r2, r3
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020556:	b29b      	uxth	r3, r3
 8020558:	1ad3      	subs	r3, r2, r3
 802055a:	b29b      	uxth	r3, r3
 802055c:	3301      	adds	r3, #1
 802055e:	b29b      	uxth	r3, r3
 8020560:	b21b      	sxth	r3, r3
}
 8020562:	4618      	mov	r0, r3
 8020564:	370c      	adds	r7, #12
 8020566:	46bd      	mov	sp, r7
 8020568:	f85d 7b04 	ldr.w	r7, [sp], #4
 802056c:	4770      	bx	lr

0802056e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 802056e:	b480      	push	{r7}
 8020570:	b083      	sub	sp, #12
 8020572:	af00      	add	r7, sp, #0
 8020574:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802057c:	b29a      	uxth	r2, r3
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020584:	b29b      	uxth	r3, r3
 8020586:	1ad3      	subs	r3, r2, r3
 8020588:	b29b      	uxth	r3, r3
 802058a:	3301      	adds	r3, #1
 802058c:	b29b      	uxth	r3, r3
 802058e:	b21b      	sxth	r3, r3
}
 8020590:	4618      	mov	r0, r3
 8020592:	370c      	adds	r7, #12
 8020594:	46bd      	mov	sp, r7
 8020596:	f85d 7b04 	ldr.w	r7, [sp], #4
 802059a:	4770      	bx	lr

0802059c <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 802059c:	b480      	push	{r7}
 802059e:	b085      	sub	sp, #20
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	60f8      	str	r0, [r7, #12]
 80205a4:	4608      	mov	r0, r1
 80205a6:	4611      	mov	r1, r2
 80205a8:	461a      	mov	r2, r3
 80205aa:	4603      	mov	r3, r0
 80205ac:	817b      	strh	r3, [r7, #10]
 80205ae:	460b      	mov	r3, r1
 80205b0:	813b      	strh	r3, [r7, #8]
 80205b2:	4613      	mov	r3, r2
 80205b4:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 80205b6:	68fb      	ldr	r3, [r7, #12]
 80205b8:	897a      	ldrh	r2, [r7, #10]
 80205ba:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 80205bc:	68fb      	ldr	r3, [r7, #12]
 80205be:	893a      	ldrh	r2, [r7, #8]
 80205c0:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 80205c2:	68fb      	ldr	r3, [r7, #12]
 80205c4:	88fa      	ldrh	r2, [r7, #6]
 80205c6:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 80205c8:	68fb      	ldr	r3, [r7, #12]
 80205ca:	8b3a      	ldrh	r2, [r7, #24]
 80205cc:	80da      	strh	r2, [r3, #6]
}
 80205ce:	bf00      	nop
 80205d0:	3714      	adds	r7, #20
 80205d2:	46bd      	mov	sp, r7
 80205d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205d8:	4770      	bx	lr

080205da <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 80205da:	b480      	push	{r7}
 80205dc:	b083      	sub	sp, #12
 80205de:	af00      	add	r7, sp, #0
 80205e0:	6078      	str	r0, [r7, #4]
 80205e2:	460b      	mov	r3, r1
 80205e4:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80205ec:	b29a      	uxth	r2, r3
 80205ee:	887b      	ldrh	r3, [r7, #2]
 80205f0:	4413      	add	r3, r2
 80205f2:	b29b      	uxth	r3, r3
 80205f4:	3b01      	subs	r3, #1
 80205f6:	b29b      	uxth	r3, r3
 80205f8:	b21a      	sxth	r2, r3
 80205fa:	687b      	ldr	r3, [r7, #4]
 80205fc:	80da      	strh	r2, [r3, #6]
}
 80205fe:	bf00      	nop
 8020600:	370c      	adds	r7, #12
 8020602:	46bd      	mov	sp, r7
 8020604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020608:	4770      	bx	lr

0802060a <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 802060a:	b480      	push	{r7}
 802060c:	b085      	sub	sp, #20
 802060e:	af00      	add	r7, sp, #0
 8020610:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8020612:	687b      	ldr	r3, [r7, #4]
 8020614:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020618:	461a      	mov	r2, r3
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020620:	1ad3      	subs	r3, r2, r3
 8020622:	3301      	adds	r3, #1
 8020624:	461a      	mov	r2, r3
 8020626:	687b      	ldr	r3, [r7, #4]
 8020628:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802062c:	4619      	mov	r1, r3
 802062e:	687b      	ldr	r3, [r7, #4]
 8020630:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020634:	1acb      	subs	r3, r1, r3
 8020636:	3301      	adds	r3, #1
 8020638:	fb02 f303 	mul.w	r3, r2, r3
 802063c:	60fb      	str	r3, [r7, #12]

    return size;
 802063e:	68fb      	ldr	r3, [r7, #12]
}
 8020640:	4618      	mov	r0, r3
 8020642:	3714      	adds	r7, #20
 8020644:	46bd      	mov	sp, r7
 8020646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802064a:	4770      	bx	lr

0802064c <lv_area_increase>:

void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra)
{
 802064c:	b480      	push	{r7}
 802064e:	b083      	sub	sp, #12
 8020650:	af00      	add	r7, sp, #0
 8020652:	6078      	str	r0, [r7, #4]
 8020654:	460b      	mov	r3, r1
 8020656:	807b      	strh	r3, [r7, #2]
 8020658:	4613      	mov	r3, r2
 802065a:	803b      	strh	r3, [r7, #0]
    area->x1 -= w_extra;
 802065c:	687b      	ldr	r3, [r7, #4]
 802065e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020662:	b29a      	uxth	r2, r3
 8020664:	887b      	ldrh	r3, [r7, #2]
 8020666:	1ad3      	subs	r3, r2, r3
 8020668:	b29b      	uxth	r3, r3
 802066a:	b21a      	sxth	r2, r3
 802066c:	687b      	ldr	r3, [r7, #4]
 802066e:	801a      	strh	r2, [r3, #0]
    area->x2 += w_extra;
 8020670:	687b      	ldr	r3, [r7, #4]
 8020672:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020676:	b29a      	uxth	r2, r3
 8020678:	887b      	ldrh	r3, [r7, #2]
 802067a:	4413      	add	r3, r2
 802067c:	b29b      	uxth	r3, r3
 802067e:	b21a      	sxth	r2, r3
 8020680:	687b      	ldr	r3, [r7, #4]
 8020682:	809a      	strh	r2, [r3, #4]
    area->y1 -= h_extra;
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802068a:	b29a      	uxth	r2, r3
 802068c:	883b      	ldrh	r3, [r7, #0]
 802068e:	1ad3      	subs	r3, r2, r3
 8020690:	b29b      	uxth	r3, r3
 8020692:	b21a      	sxth	r2, r3
 8020694:	687b      	ldr	r3, [r7, #4]
 8020696:	805a      	strh	r2, [r3, #2]
    area->y2 += h_extra;
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802069e:	b29a      	uxth	r2, r3
 80206a0:	883b      	ldrh	r3, [r7, #0]
 80206a2:	4413      	add	r3, r2
 80206a4:	b29b      	uxth	r3, r3
 80206a6:	b21a      	sxth	r2, r3
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	80da      	strh	r2, [r3, #6]
}
 80206ac:	bf00      	nop
 80206ae:	370c      	adds	r7, #12
 80206b0:	46bd      	mov	sp, r7
 80206b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206b6:	4770      	bx	lr

080206b8 <lv_area_move>:

void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 80206b8:	b480      	push	{r7}
 80206ba:	b083      	sub	sp, #12
 80206bc:	af00      	add	r7, sp, #0
 80206be:	6078      	str	r0, [r7, #4]
 80206c0:	460b      	mov	r3, r1
 80206c2:	807b      	strh	r3, [r7, #2]
 80206c4:	4613      	mov	r3, r2
 80206c6:	803b      	strh	r3, [r7, #0]
    area->x1 += x_ofs;
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80206ce:	b29a      	uxth	r2, r3
 80206d0:	887b      	ldrh	r3, [r7, #2]
 80206d2:	4413      	add	r3, r2
 80206d4:	b29b      	uxth	r3, r3
 80206d6:	b21a      	sxth	r2, r3
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	801a      	strh	r2, [r3, #0]
    area->x2 += x_ofs;
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80206e2:	b29a      	uxth	r2, r3
 80206e4:	887b      	ldrh	r3, [r7, #2]
 80206e6:	4413      	add	r3, r2
 80206e8:	b29b      	uxth	r3, r3
 80206ea:	b21a      	sxth	r2, r3
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	809a      	strh	r2, [r3, #4]
    area->y1 += y_ofs;
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80206f6:	b29a      	uxth	r2, r3
 80206f8:	883b      	ldrh	r3, [r7, #0]
 80206fa:	4413      	add	r3, r2
 80206fc:	b29b      	uxth	r3, r3
 80206fe:	b21a      	sxth	r2, r3
 8020700:	687b      	ldr	r3, [r7, #4]
 8020702:	805a      	strh	r2, [r3, #2]
    area->y2 += y_ofs;
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802070a:	b29a      	uxth	r2, r3
 802070c:	883b      	ldrh	r3, [r7, #0]
 802070e:	4413      	add	r3, r2
 8020710:	b29b      	uxth	r3, r3
 8020712:	b21a      	sxth	r2, r3
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	80da      	strh	r2, [r3, #6]
}
 8020718:	bf00      	nop
 802071a:	370c      	adds	r7, #12
 802071c:	46bd      	mov	sp, r7
 802071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020722:	4770      	bx	lr

08020724 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8020724:	b480      	push	{r7}
 8020726:	b087      	sub	sp, #28
 8020728:	af00      	add	r7, sp, #0
 802072a:	60f8      	str	r0, [r7, #12]
 802072c:	60b9      	str	r1, [r7, #8]
 802072e:	607a      	str	r2, [r7, #4]
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8020730:	687b      	ldr	r3, [r7, #4]
 8020732:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020736:	68bb      	ldr	r3, [r7, #8]
 8020738:	f9b3 3000 	ldrsh.w	r3, [r3]
 802073c:	4293      	cmp	r3, r2
 802073e:	bfb8      	it	lt
 8020740:	4613      	movlt	r3, r2
 8020742:	b21a      	sxth	r2, r3
 8020744:	68fb      	ldr	r3, [r7, #12]
 8020746:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8020748:	687b      	ldr	r3, [r7, #4]
 802074a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802074e:	68bb      	ldr	r3, [r7, #8]
 8020750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020754:	4293      	cmp	r3, r2
 8020756:	bfb8      	it	lt
 8020758:	4613      	movlt	r3, r2
 802075a:	b21a      	sxth	r2, r3
 802075c:	68fb      	ldr	r3, [r7, #12]
 802075e:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8020760:	687b      	ldr	r3, [r7, #4]
 8020762:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020766:	68bb      	ldr	r3, [r7, #8]
 8020768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802076c:	4293      	cmp	r3, r2
 802076e:	bfa8      	it	ge
 8020770:	4613      	movge	r3, r2
 8020772:	b21a      	sxth	r2, r3
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802077e:	68bb      	ldr	r3, [r7, #8]
 8020780:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020784:	4293      	cmp	r3, r2
 8020786:	bfa8      	it	ge
 8020788:	4613      	movge	r3, r2
 802078a:	b21a      	sxth	r2, r3
 802078c:	68fb      	ldr	r3, [r7, #12]
 802078e:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 8020790:	2301      	movs	r3, #1
 8020792:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	f9b3 2000 	ldrsh.w	r2, [r3]
 802079a:	68fb      	ldr	r3, [r7, #12]
 802079c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80207a0:	429a      	cmp	r2, r3
 80207a2:	dc07      	bgt.n	80207b4 <_lv_area_intersect+0x90>
 80207a4:	68fb      	ldr	r3, [r7, #12]
 80207a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80207b0:	429a      	cmp	r2, r3
 80207b2:	dd01      	ble.n	80207b8 <_lv_area_intersect+0x94>
        union_ok = false;
 80207b4:	2300      	movs	r3, #0
 80207b6:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 80207b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80207ba:	4618      	mov	r0, r3
 80207bc:	371c      	adds	r7, #28
 80207be:	46bd      	mov	sp, r7
 80207c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207c4:	4770      	bx	lr

080207c6 <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 80207c6:	b480      	push	{r7}
 80207c8:	b085      	sub	sp, #20
 80207ca:	af00      	add	r7, sp, #0
 80207cc:	60f8      	str	r0, [r7, #12]
 80207ce:	60b9      	str	r1, [r7, #8]
 80207d0:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80207d2:	687b      	ldr	r3, [r7, #4]
 80207d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80207d8:	68bb      	ldr	r3, [r7, #8]
 80207da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80207de:	4293      	cmp	r3, r2
 80207e0:	bfa8      	it	ge
 80207e2:	4613      	movge	r3, r2
 80207e4:	b21a      	sxth	r2, r3
 80207e6:	68fb      	ldr	r3, [r7, #12]
 80207e8:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80207f0:	68bb      	ldr	r3, [r7, #8]
 80207f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80207f6:	4293      	cmp	r3, r2
 80207f8:	bfa8      	it	ge
 80207fa:	4613      	movge	r3, r2
 80207fc:	b21a      	sxth	r2, r3
 80207fe:	68fb      	ldr	r3, [r7, #12]
 8020800:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020808:	68bb      	ldr	r3, [r7, #8]
 802080a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802080e:	4293      	cmp	r3, r2
 8020810:	bfb8      	it	lt
 8020812:	4613      	movlt	r3, r2
 8020814:	b21a      	sxth	r2, r3
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020820:	68bb      	ldr	r3, [r7, #8]
 8020822:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020826:	4293      	cmp	r3, r2
 8020828:	bfb8      	it	lt
 802082a:	4613      	movlt	r3, r2
 802082c:	b21a      	sxth	r2, r3
 802082e:	68fb      	ldr	r3, [r7, #12]
 8020830:	80da      	strh	r2, [r3, #6]
}
 8020832:	bf00      	nop
 8020834:	3714      	adds	r7, #20
 8020836:	46bd      	mov	sp, r7
 8020838:	f85d 7b04 	ldr.w	r7, [sp], #4
 802083c:	4770      	bx	lr

0802083e <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 802083e:	b580      	push	{r7, lr}
 8020840:	b088      	sub	sp, #32
 8020842:	af00      	add	r7, sp, #0
 8020844:	60f8      	str	r0, [r7, #12]
 8020846:	60b9      	str	r1, [r7, #8]
 8020848:	4613      	mov	r3, r2
 802084a:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 802084c:	2300      	movs	r3, #0
 802084e:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8020850:	68bb      	ldr	r3, [r7, #8]
 8020852:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020856:	68fb      	ldr	r3, [r7, #12]
 8020858:	f9b3 3000 	ldrsh.w	r3, [r3]
 802085c:	429a      	cmp	r2, r3
 802085e:	db19      	blt.n	8020894 <_lv_area_is_point_on+0x56>
 8020860:	68bb      	ldr	r3, [r7, #8]
 8020862:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020866:	68fb      	ldr	r3, [r7, #12]
 8020868:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802086c:	429a      	cmp	r2, r3
 802086e:	dc11      	bgt.n	8020894 <_lv_area_is_point_on+0x56>
 8020870:	68bb      	ldr	r3, [r7, #8]
 8020872:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020876:	68fb      	ldr	r3, [r7, #12]
 8020878:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802087c:	429a      	cmp	r2, r3
 802087e:	db09      	blt.n	8020894 <_lv_area_is_point_on+0x56>
 8020880:	68bb      	ldr	r3, [r7, #8]
 8020882:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020886:	68fb      	ldr	r3, [r7, #12]
 8020888:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802088c:	429a      	cmp	r2, r3
 802088e:	dc01      	bgt.n	8020894 <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 8020890:	2301      	movs	r3, #1
 8020892:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 8020894:	7ffb      	ldrb	r3, [r7, #31]
 8020896:	f083 0301 	eor.w	r3, r3, #1
 802089a:	b2db      	uxtb	r3, r3
 802089c:	2b00      	cmp	r3, #0
 802089e:	d001      	beq.n	80208a4 <_lv_area_is_point_on+0x66>
        return false;
 80208a0:	2300      	movs	r3, #0
 80208a2:	e0f1      	b.n	8020a88 <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 80208a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	dc01      	bgt.n	80208b0 <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 80208ac:	2301      	movs	r3, #1
 80208ae:	e0eb      	b.n	8020a88 <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 80208b0:	68f8      	ldr	r0, [r7, #12]
 80208b2:	f7ff fe45 	bl	8020540 <lv_area_get_width>
 80208b6:	4603      	mov	r3, r0
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	da00      	bge.n	80208be <_lv_area_is_point_on+0x80>
 80208bc:	3301      	adds	r3, #1
 80208be:	105b      	asrs	r3, r3, #1
 80208c0:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80208c2:	68f8      	ldr	r0, [r7, #12]
 80208c4:	f7ff fe53 	bl	802056e <lv_area_get_height>
 80208c8:	4603      	mov	r3, r0
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	da00      	bge.n	80208d0 <_lv_area_is_point_on+0x92>
 80208ce:	3301      	adds	r3, #1
 80208d0:	105b      	asrs	r3, r3, #1
 80208d2:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MIN(w, h);
 80208d4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80208d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80208dc:	4293      	cmp	r3, r2
 80208de:	bfa8      	it	ge
 80208e0:	4613      	movge	r3, r2
 80208e2:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 80208e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80208e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80208ec:	429a      	cmp	r2, r3
 80208ee:	dd01      	ble.n	80208f4 <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 80208f0:	8b3b      	ldrh	r3, [r7, #24]
 80208f2:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 80208f4:	68fb      	ldr	r3, [r7, #12]
 80208f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80208fa:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 80208fc:	68fb      	ldr	r3, [r7, #12]
 80208fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020902:	b29a      	uxth	r2, r3
 8020904:	88fb      	ldrh	r3, [r7, #6]
 8020906:	4413      	add	r3, r2
 8020908:	b29b      	uxth	r3, r3
 802090a:	b21b      	sxth	r3, r3
 802090c:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 802090e:	68fb      	ldr	r3, [r7, #12]
 8020910:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020914:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 8020916:	68fb      	ldr	r3, [r7, #12]
 8020918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802091c:	b29a      	uxth	r2, r3
 802091e:	88fb      	ldrh	r3, [r7, #6]
 8020920:	4413      	add	r3, r2
 8020922:	b29b      	uxth	r3, r3
 8020924:	b21b      	sxth	r3, r3
 8020926:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020928:	f107 0310 	add.w	r3, r7, #16
 802092c:	2200      	movs	r2, #0
 802092e:	68b9      	ldr	r1, [r7, #8]
 8020930:	4618      	mov	r0, r3
 8020932:	f7ff ff84 	bl	802083e <_lv_area_is_point_on>
 8020936:	4603      	mov	r3, r0
 8020938:	2b00      	cmp	r3, #0
 802093a:	d017      	beq.n	802096c <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 802093c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020940:	b29a      	uxth	r2, r3
 8020942:	88fb      	ldrh	r3, [r7, #6]
 8020944:	4413      	add	r3, r2
 8020946:	b29b      	uxth	r3, r3
 8020948:	b21b      	sxth	r3, r3
 802094a:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 802094c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020950:	b29a      	uxth	r2, r3
 8020952:	88fb      	ldrh	r3, [r7, #6]
 8020954:	4413      	add	r3, r2
 8020956:	b29b      	uxth	r3, r3
 8020958:	b21b      	sxth	r3, r3
 802095a:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 802095c:	f107 0310 	add.w	r3, r7, #16
 8020960:	68b9      	ldr	r1, [r7, #8]
 8020962:	4618      	mov	r0, r3
 8020964:	f000 fb30 	bl	8020fc8 <lv_point_within_circle>
 8020968:	4603      	mov	r3, r0
 802096a:	e08d      	b.n	8020a88 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 802096c:	68fb      	ldr	r3, [r7, #12]
 802096e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020972:	b29a      	uxth	r2, r3
 8020974:	88fb      	ldrh	r3, [r7, #6]
 8020976:	1ad3      	subs	r3, r2, r3
 8020978:	b29b      	uxth	r3, r3
 802097a:	b21b      	sxth	r3, r3
 802097c:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 802097e:	68fb      	ldr	r3, [r7, #12]
 8020980:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020984:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020986:	f107 0310 	add.w	r3, r7, #16
 802098a:	2200      	movs	r2, #0
 802098c:	68b9      	ldr	r1, [r7, #8]
 802098e:	4618      	mov	r0, r3
 8020990:	f7ff ff55 	bl	802083e <_lv_area_is_point_on>
 8020994:	4603      	mov	r3, r0
 8020996:	2b00      	cmp	r3, #0
 8020998:	d017      	beq.n	80209ca <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 802099a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802099e:	b29a      	uxth	r2, r3
 80209a0:	88fb      	ldrh	r3, [r7, #6]
 80209a2:	4413      	add	r3, r2
 80209a4:	b29b      	uxth	r3, r3
 80209a6:	b21b      	sxth	r3, r3
 80209a8:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 80209aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80209ae:	b29a      	uxth	r2, r3
 80209b0:	88fb      	ldrh	r3, [r7, #6]
 80209b2:	1ad3      	subs	r3, r2, r3
 80209b4:	b29b      	uxth	r3, r3
 80209b6:	b21b      	sxth	r3, r3
 80209b8:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 80209ba:	f107 0310 	add.w	r3, r7, #16
 80209be:	68b9      	ldr	r1, [r7, #8]
 80209c0:	4618      	mov	r0, r3
 80209c2:	f000 fb01 	bl	8020fc8 <lv_point_within_circle>
 80209c6:	4603      	mov	r3, r0
 80209c8:	e05e      	b.n	8020a88 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 80209ca:	68fb      	ldr	r3, [r7, #12]
 80209cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80209d0:	b29a      	uxth	r2, r3
 80209d2:	88fb      	ldrh	r3, [r7, #6]
 80209d4:	1ad3      	subs	r3, r2, r3
 80209d6:	b29b      	uxth	r3, r3
 80209d8:	b21b      	sxth	r3, r3
 80209da:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 80209dc:	68fb      	ldr	r3, [r7, #12]
 80209de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80209e2:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80209e4:	f107 0310 	add.w	r3, r7, #16
 80209e8:	2200      	movs	r2, #0
 80209ea:	68b9      	ldr	r1, [r7, #8]
 80209ec:	4618      	mov	r0, r3
 80209ee:	f7ff ff26 	bl	802083e <_lv_area_is_point_on>
 80209f2:	4603      	mov	r3, r0
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	d017      	beq.n	8020a28 <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 80209f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80209fc:	b29a      	uxth	r2, r3
 80209fe:	88fb      	ldrh	r3, [r7, #6]
 8020a00:	1ad3      	subs	r3, r2, r3
 8020a02:	b29b      	uxth	r3, r3
 8020a04:	b21b      	sxth	r3, r3
 8020a06:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 8020a08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020a0c:	b29a      	uxth	r2, r3
 8020a0e:	88fb      	ldrh	r3, [r7, #6]
 8020a10:	1ad3      	subs	r3, r2, r3
 8020a12:	b29b      	uxth	r3, r3
 8020a14:	b21b      	sxth	r3, r3
 8020a16:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 8020a18:	f107 0310 	add.w	r3, r7, #16
 8020a1c:	68b9      	ldr	r1, [r7, #8]
 8020a1e:	4618      	mov	r0, r3
 8020a20:	f000 fad2 	bl	8020fc8 <lv_point_within_circle>
 8020a24:	4603      	mov	r3, r0
 8020a26:	e02f      	b.n	8020a88 <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 8020a28:	68fb      	ldr	r3, [r7, #12]
 8020a2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020a2e:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 8020a30:	68fb      	ldr	r3, [r7, #12]
 8020a32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020a36:	b29a      	uxth	r2, r3
 8020a38:	88fb      	ldrh	r3, [r7, #6]
 8020a3a:	4413      	add	r3, r2
 8020a3c:	b29b      	uxth	r3, r3
 8020a3e:	b21b      	sxth	r3, r3
 8020a40:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020a42:	f107 0310 	add.w	r3, r7, #16
 8020a46:	2200      	movs	r2, #0
 8020a48:	68b9      	ldr	r1, [r7, #8]
 8020a4a:	4618      	mov	r0, r3
 8020a4c:	f7ff fef7 	bl	802083e <_lv_area_is_point_on>
 8020a50:	4603      	mov	r3, r0
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d017      	beq.n	8020a86 <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 8020a56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8020a5a:	b29a      	uxth	r2, r3
 8020a5c:	88fb      	ldrh	r3, [r7, #6]
 8020a5e:	1ad3      	subs	r3, r2, r3
 8020a60:	b29b      	uxth	r3, r3
 8020a62:	b21b      	sxth	r3, r3
 8020a64:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 8020a66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020a6a:	b29a      	uxth	r2, r3
 8020a6c:	88fb      	ldrh	r3, [r7, #6]
 8020a6e:	4413      	add	r3, r2
 8020a70:	b29b      	uxth	r3, r3
 8020a72:	b21b      	sxth	r3, r3
 8020a74:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 8020a76:	f107 0310 	add.w	r3, r7, #16
 8020a7a:	68b9      	ldr	r1, [r7, #8]
 8020a7c:	4618      	mov	r0, r3
 8020a7e:	f000 faa3 	bl	8020fc8 <lv_point_within_circle>
 8020a82:	4603      	mov	r3, r0
 8020a84:	e000      	b.n	8020a88 <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 8020a86:	2301      	movs	r3, #1
}
 8020a88:	4618      	mov	r0, r3
 8020a8a:	3720      	adds	r7, #32
 8020a8c:	46bd      	mov	sp, r7
 8020a8e:	bd80      	pop	{r7, pc}

08020a90 <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8020a90:	b480      	push	{r7}
 8020a92:	b083      	sub	sp, #12
 8020a94:	af00      	add	r7, sp, #0
 8020a96:	6078      	str	r0, [r7, #4]
 8020a98:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8020a9a:	687b      	ldr	r3, [r7, #4]
 8020a9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020aa0:	683b      	ldr	r3, [r7, #0]
 8020aa2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020aa6:	429a      	cmp	r2, r3
 8020aa8:	dc19      	bgt.n	8020ade <_lv_area_is_on+0x4e>
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020ab0:	683b      	ldr	r3, [r7, #0]
 8020ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ab6:	429a      	cmp	r2, r3
 8020ab8:	db11      	blt.n	8020ade <_lv_area_is_on+0x4e>
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ac0:	683b      	ldr	r3, [r7, #0]
 8020ac2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020ac6:	429a      	cmp	r2, r3
 8020ac8:	dc09      	bgt.n	8020ade <_lv_area_is_on+0x4e>
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020ad0:	683b      	ldr	r3, [r7, #0]
 8020ad2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ad6:	429a      	cmp	r2, r3
 8020ad8:	db01      	blt.n	8020ade <_lv_area_is_on+0x4e>
        return true;
 8020ada:	2301      	movs	r3, #1
 8020adc:	e000      	b.n	8020ae0 <_lv_area_is_on+0x50>
    }
    else {
        return false;
 8020ade:	2300      	movs	r3, #0
    }
}
 8020ae0:	4618      	mov	r0, r3
 8020ae2:	370c      	adds	r7, #12
 8020ae4:	46bd      	mov	sp, r7
 8020ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aea:	4770      	bx	lr

08020aec <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 8020aec:	b580      	push	{r7, lr}
 8020aee:	b086      	sub	sp, #24
 8020af0:	af00      	add	r7, sp, #0
 8020af2:	60f8      	str	r0, [r7, #12]
 8020af4:	60b9      	str	r1, [r7, #8]
 8020af6:	4613      	mov	r3, r2
 8020af8:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 8020afa:	2300      	movs	r3, #0
 8020afc:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8020afe:	68fb      	ldr	r3, [r7, #12]
 8020b00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b04:	68bb      	ldr	r3, [r7, #8]
 8020b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020b0a:	429a      	cmp	r2, r3
 8020b0c:	db19      	blt.n	8020b42 <_lv_area_is_in+0x56>
 8020b0e:	68fb      	ldr	r3, [r7, #12]
 8020b10:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020b14:	68bb      	ldr	r3, [r7, #8]
 8020b16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020b1a:	429a      	cmp	r2, r3
 8020b1c:	db11      	blt.n	8020b42 <_lv_area_is_in+0x56>
 8020b1e:	68fb      	ldr	r3, [r7, #12]
 8020b20:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020b24:	68bb      	ldr	r3, [r7, #8]
 8020b26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020b2a:	429a      	cmp	r2, r3
 8020b2c:	dc09      	bgt.n	8020b42 <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 8020b2e:	68fb      	ldr	r3, [r7, #12]
 8020b30:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020b34:	68bb      	ldr	r3, [r7, #8]
 8020b36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8020b3a:	429a      	cmp	r2, r3
 8020b3c:	dc01      	bgt.n	8020b42 <_lv_area_is_in+0x56>
        is_in = true;
 8020b3e:	2301      	movs	r3, #1
 8020b40:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 8020b42:	7dfb      	ldrb	r3, [r7, #23]
 8020b44:	f083 0301 	eor.w	r3, r3, #1
 8020b48:	b2db      	uxtb	r3, r3
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	d001      	beq.n	8020b52 <_lv_area_is_in+0x66>
 8020b4e:	2300      	movs	r3, #0
 8020b50:	e066      	b.n	8020c20 <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 8020b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d101      	bne.n	8020b5e <_lv_area_is_in+0x72>
 8020b5a:	2301      	movs	r3, #1
 8020b5c:	e060      	b.n	8020c20 <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 8020b5e:	68fb      	ldr	r3, [r7, #12]
 8020b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020b64:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 8020b66:	68fb      	ldr	r3, [r7, #12]
 8020b68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020b6c:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020b6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020b72:	f107 0310 	add.w	r3, r7, #16
 8020b76:	4619      	mov	r1, r3
 8020b78:	68b8      	ldr	r0, [r7, #8]
 8020b7a:	f7ff fe60 	bl	802083e <_lv_area_is_point_on>
 8020b7e:	4603      	mov	r3, r0
 8020b80:	f083 0301 	eor.w	r3, r3, #1
 8020b84:	b2db      	uxtb	r3, r3
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	d001      	beq.n	8020b8e <_lv_area_is_in+0xa2>
 8020b8a:	2300      	movs	r3, #0
 8020b8c:	e048      	b.n	8020c20 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 8020b8e:	68fb      	ldr	r3, [r7, #12]
 8020b90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020b94:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 8020b96:	68fb      	ldr	r3, [r7, #12]
 8020b98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020b9c:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020b9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020ba2:	f107 0310 	add.w	r3, r7, #16
 8020ba6:	4619      	mov	r1, r3
 8020ba8:	68b8      	ldr	r0, [r7, #8]
 8020baa:	f7ff fe48 	bl	802083e <_lv_area_is_point_on>
 8020bae:	4603      	mov	r3, r0
 8020bb0:	f083 0301 	eor.w	r3, r3, #1
 8020bb4:	b2db      	uxtb	r3, r3
 8020bb6:	2b00      	cmp	r3, #0
 8020bb8:	d001      	beq.n	8020bbe <_lv_area_is_in+0xd2>
 8020bba:	2300      	movs	r3, #0
 8020bbc:	e030      	b.n	8020c20 <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 8020bbe:	68fb      	ldr	r3, [r7, #12]
 8020bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020bc4:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 8020bc6:	68fb      	ldr	r3, [r7, #12]
 8020bc8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020bcc:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020bce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020bd2:	f107 0310 	add.w	r3, r7, #16
 8020bd6:	4619      	mov	r1, r3
 8020bd8:	68b8      	ldr	r0, [r7, #8]
 8020bda:	f7ff fe30 	bl	802083e <_lv_area_is_point_on>
 8020bde:	4603      	mov	r3, r0
 8020be0:	f083 0301 	eor.w	r3, r3, #1
 8020be4:	b2db      	uxtb	r3, r3
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	d001      	beq.n	8020bee <_lv_area_is_in+0x102>
 8020bea:	2300      	movs	r3, #0
 8020bec:	e018      	b.n	8020c20 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 8020bee:	68fb      	ldr	r3, [r7, #12]
 8020bf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020bf4:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 8020bf6:	68fb      	ldr	r3, [r7, #12]
 8020bf8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020bfc:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020bfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020c02:	f107 0310 	add.w	r3, r7, #16
 8020c06:	4619      	mov	r1, r3
 8020c08:	68b8      	ldr	r0, [r7, #8]
 8020c0a:	f7ff fe18 	bl	802083e <_lv_area_is_point_on>
 8020c0e:	4603      	mov	r3, r0
 8020c10:	f083 0301 	eor.w	r3, r3, #1
 8020c14:	b2db      	uxtb	r3, r3
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d001      	beq.n	8020c1e <_lv_area_is_in+0x132>
 8020c1a:	2300      	movs	r3, #0
 8020c1c:	e000      	b.n	8020c20 <_lv_area_is_in+0x134>

    return true;
 8020c1e:	2301      	movs	r3, #1
}
 8020c20:	4618      	mov	r0, r3
 8020c22:	3718      	adds	r7, #24
 8020c24:	46bd      	mov	sp, r7
 8020c26:	bd80      	pop	{r7, pc}

08020c28 <_lv_area_is_out>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `aout_p` is fully outside `aholder_p`
 */
bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 8020c28:	b580      	push	{r7, lr}
 8020c2a:	b086      	sub	sp, #24
 8020c2c:	af00      	add	r7, sp, #0
 8020c2e:	60f8      	str	r0, [r7, #12]
 8020c30:	60b9      	str	r1, [r7, #8]
 8020c32:	4613      	mov	r3, r2
 8020c34:	80fb      	strh	r3, [r7, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8020c36:	68fb      	ldr	r3, [r7, #12]
 8020c38:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020c3c:	68bb      	ldr	r3, [r7, #8]
 8020c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020c42:	429a      	cmp	r2, r3
 8020c44:	db17      	blt.n	8020c76 <_lv_area_is_out+0x4e>
 8020c46:	68fb      	ldr	r3, [r7, #12]
 8020c48:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020c4c:	68bb      	ldr	r3, [r7, #8]
 8020c4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020c52:	429a      	cmp	r2, r3
 8020c54:	db0f      	blt.n	8020c76 <_lv_area_is_out+0x4e>
 8020c56:	68fb      	ldr	r3, [r7, #12]
 8020c58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020c5c:	68bb      	ldr	r3, [r7, #8]
 8020c5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020c62:	429a      	cmp	r2, r3
 8020c64:	dc07      	bgt.n	8020c76 <_lv_area_is_out+0x4e>
       aout_p->y1 > aholder_p->y2) {
 8020c66:	68fb      	ldr	r3, [r7, #12]
 8020c68:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020c6c:	68bb      	ldr	r3, [r7, #8]
 8020c6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8020c72:	429a      	cmp	r2, r3
 8020c74:	dd01      	ble.n	8020c7a <_lv_area_is_out+0x52>
        return true;
 8020c76:	2301      	movs	r3, #1
 8020c78:	e05a      	b.n	8020d30 <_lv_area_is_out+0x108>
    }

    if(radius == 0) return false;
 8020c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d101      	bne.n	8020c86 <_lv_area_is_out+0x5e>
 8020c82:	2300      	movs	r3, #0
 8020c84:	e054      	b.n	8020d30 <_lv_area_is_out+0x108>

    /*Check if the corner points are outside the radius or not*/
    lv_point_t p;

    p.x = aout_p->x1;
 8020c86:	68fb      	ldr	r3, [r7, #12]
 8020c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020c8c:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 8020c8e:	68fb      	ldr	r3, [r7, #12]
 8020c90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020c94:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020c96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020c9a:	f107 0314 	add.w	r3, r7, #20
 8020c9e:	4619      	mov	r1, r3
 8020ca0:	68b8      	ldr	r0, [r7, #8]
 8020ca2:	f7ff fdcc 	bl	802083e <_lv_area_is_point_on>
 8020ca6:	4603      	mov	r3, r0
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d001      	beq.n	8020cb0 <_lv_area_is_out+0x88>
 8020cac:	2300      	movs	r3, #0
 8020cae:	e03f      	b.n	8020d30 <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 8020cb0:	68fb      	ldr	r3, [r7, #12]
 8020cb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020cb6:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 8020cb8:	68fb      	ldr	r3, [r7, #12]
 8020cba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020cbe:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020cc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020cc4:	f107 0314 	add.w	r3, r7, #20
 8020cc8:	4619      	mov	r1, r3
 8020cca:	68b8      	ldr	r0, [r7, #8]
 8020ccc:	f7ff fdb7 	bl	802083e <_lv_area_is_point_on>
 8020cd0:	4603      	mov	r3, r0
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	d001      	beq.n	8020cda <_lv_area_is_out+0xb2>
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	e02a      	b.n	8020d30 <_lv_area_is_out+0x108>

    p.x = aout_p->x1;
 8020cda:	68fb      	ldr	r3, [r7, #12]
 8020cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ce0:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 8020ce2:	68fb      	ldr	r3, [r7, #12]
 8020ce4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020ce8:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020cea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020cee:	f107 0314 	add.w	r3, r7, #20
 8020cf2:	4619      	mov	r1, r3
 8020cf4:	68b8      	ldr	r0, [r7, #8]
 8020cf6:	f7ff fda2 	bl	802083e <_lv_area_is_point_on>
 8020cfa:	4603      	mov	r3, r0
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	d001      	beq.n	8020d04 <_lv_area_is_out+0xdc>
 8020d00:	2300      	movs	r3, #0
 8020d02:	e015      	b.n	8020d30 <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 8020d04:	68fb      	ldr	r3, [r7, #12]
 8020d06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020d0a:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 8020d0c:	68fb      	ldr	r3, [r7, #12]
 8020d0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020d12:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020d14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020d18:	f107 0314 	add.w	r3, r7, #20
 8020d1c:	4619      	mov	r1, r3
 8020d1e:	68b8      	ldr	r0, [r7, #8]
 8020d20:	f7ff fd8d 	bl	802083e <_lv_area_is_point_on>
 8020d24:	4603      	mov	r3, r0
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d001      	beq.n	8020d2e <_lv_area_is_out+0x106>
 8020d2a:	2300      	movs	r3, #0
 8020d2c:	e000      	b.n	8020d30 <_lv_area_is_out+0x108>

    return true;
 8020d2e:	2301      	movs	r3, #1
}
 8020d30:	4618      	mov	r0, r3
 8020d32:	3718      	adds	r7, #24
 8020d34:	46bd      	mov	sp, r7
 8020d36:	bd80      	pop	{r7, pc}

08020d38 <lv_point_transform>:
    to_align->y2 = to_align->y1 + h - 1;
}

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot)
{
 8020d38:	b580      	push	{r7, lr}
 8020d3a:	b08e      	sub	sp, #56	; 0x38
 8020d3c:	af00      	add	r7, sp, #0
 8020d3e:	60f8      	str	r0, [r7, #12]
 8020d40:	60b9      	str	r1, [r7, #8]
 8020d42:	607a      	str	r2, [r7, #4]
 8020d44:	603b      	str	r3, [r7, #0]
    if(angle == 0 && zoom == 256) {
 8020d46:	68bb      	ldr	r3, [r7, #8]
 8020d48:	2b00      	cmp	r3, #0
 8020d4a:	d104      	bne.n	8020d56 <lv_point_transform+0x1e>
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020d52:	f000 812c 	beq.w	8020fae <lv_point_transform+0x276>
        return;
    }

    p->x -= pivot->x;
 8020d56:	68fb      	ldr	r3, [r7, #12]
 8020d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d5c:	b29a      	uxth	r2, r3
 8020d5e:	683b      	ldr	r3, [r7, #0]
 8020d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d64:	b29b      	uxth	r3, r3
 8020d66:	1ad3      	subs	r3, r2, r3
 8020d68:	b29b      	uxth	r3, r3
 8020d6a:	b21a      	sxth	r2, r3
 8020d6c:	68fb      	ldr	r3, [r7, #12]
 8020d6e:	801a      	strh	r2, [r3, #0]
    p->y -= pivot->y;
 8020d70:	68fb      	ldr	r3, [r7, #12]
 8020d72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020d76:	b29a      	uxth	r2, r3
 8020d78:	683b      	ldr	r3, [r7, #0]
 8020d7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020d7e:	b29b      	uxth	r3, r3
 8020d80:	1ad3      	subs	r3, r2, r3
 8020d82:	b29b      	uxth	r3, r3
 8020d84:	b21a      	sxth	r2, r3
 8020d86:	68fb      	ldr	r3, [r7, #12]
 8020d88:	805a      	strh	r2, [r3, #2]

    if(angle == 0) {
 8020d8a:	68bb      	ldr	r3, [r7, #8]
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d124      	bne.n	8020dda <lv_point_transform+0xa2>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8020d90:	68fb      	ldr	r3, [r7, #12]
 8020d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d96:	461a      	mov	r2, r3
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	fb02 f303 	mul.w	r3, r2, r3
 8020d9e:	121b      	asrs	r3, r3, #8
 8020da0:	b29a      	uxth	r2, r3
 8020da2:	683b      	ldr	r3, [r7, #0]
 8020da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020da8:	b29b      	uxth	r3, r3
 8020daa:	4413      	add	r3, r2
 8020dac:	b29b      	uxth	r3, r3
 8020dae:	b21a      	sxth	r2, r3
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	801a      	strh	r2, [r3, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8020db4:	68fb      	ldr	r3, [r7, #12]
 8020db6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020dba:	461a      	mov	r2, r3
 8020dbc:	687b      	ldr	r3, [r7, #4]
 8020dbe:	fb02 f303 	mul.w	r3, r2, r3
 8020dc2:	121b      	asrs	r3, r3, #8
 8020dc4:	b29a      	uxth	r2, r3
 8020dc6:	683b      	ldr	r3, [r7, #0]
 8020dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020dcc:	b29b      	uxth	r3, r3
 8020dce:	4413      	add	r3, r2
 8020dd0:	b29b      	uxth	r3, r3
 8020dd2:	b21a      	sxth	r2, r3
 8020dd4:	68fb      	ldr	r3, [r7, #12]
 8020dd6:	805a      	strh	r2, [r3, #2]
        return;
 8020dd8:	e0ea      	b.n	8020fb0 <lv_point_transform+0x278>
    }

    static int32_t angle_prev = INT32_MIN;
    static int32_t sinma;
    static int32_t cosma;
    if(angle_prev != angle) {
 8020dda:	4b77      	ldr	r3, [pc, #476]	; (8020fb8 <lv_point_transform+0x280>)
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	68ba      	ldr	r2, [r7, #8]
 8020de0:	429a      	cmp	r2, r3
 8020de2:	d078      	beq.n	8020ed6 <lv_point_transform+0x19e>
        int32_t angle_limited = angle;
 8020de4:	68bb      	ldr	r3, [r7, #8]
 8020de6:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited > 3600) angle_limited -= 3600;
 8020de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020dea:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8020dee:	dd03      	ble.n	8020df8 <lv_point_transform+0xc0>
 8020df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020df2:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8020df6:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited < 0) angle_limited += 3600;
 8020df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	da03      	bge.n	8020e06 <lv_point_transform+0xce>
 8020dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020e00:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8020e04:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t angle_low = angle_limited / 10;
 8020e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020e08:	4a6c      	ldr	r2, [pc, #432]	; (8020fbc <lv_point_transform+0x284>)
 8020e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8020e0e:	1092      	asrs	r2, r2, #2
 8020e10:	17db      	asrs	r3, r3, #31
 8020e12:	1ad3      	subs	r3, r2, r3
 8020e14:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t angle_high = angle_low + 1;
 8020e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e18:	3301      	adds	r3, #1
 8020e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8020e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e1e:	f06f 0209 	mvn.w	r2, #9
 8020e22:	fb02 f303 	mul.w	r3, r2, r3
 8020e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020e28:	4413      	add	r3, r2
 8020e2a:	62bb      	str	r3, [r7, #40]	; 0x28

        int32_t s1 = lv_trigo_sin(angle_low);
 8020e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e2e:	b21b      	sxth	r3, r3
 8020e30:	4618      	mov	r0, r3
 8020e32:	f000 fe7d 	bl	8021b30 <lv_trigo_sin>
 8020e36:	4603      	mov	r3, r0
 8020e38:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t s2 = lv_trigo_sin(angle_high);
 8020e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e3c:	b21b      	sxth	r3, r3
 8020e3e:	4618      	mov	r0, r3
 8020e40:	f000 fe76 	bl	8021b30 <lv_trigo_sin>
 8020e44:	4603      	mov	r3, r0
 8020e46:	623b      	str	r3, [r7, #32]

        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8020e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e4a:	b29b      	uxth	r3, r3
 8020e4c:	335a      	adds	r3, #90	; 0x5a
 8020e4e:	b29b      	uxth	r3, r3
 8020e50:	b21b      	sxth	r3, r3
 8020e52:	4618      	mov	r0, r3
 8020e54:	f000 fe6c 	bl	8021b30 <lv_trigo_sin>
 8020e58:	4603      	mov	r3, r0
 8020e5a:	61fb      	str	r3, [r7, #28]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 8020e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e5e:	b29b      	uxth	r3, r3
 8020e60:	335a      	adds	r3, #90	; 0x5a
 8020e62:	b29b      	uxth	r3, r3
 8020e64:	b21b      	sxth	r3, r3
 8020e66:	4618      	mov	r0, r3
 8020e68:	f000 fe62 	bl	8021b30 <lv_trigo_sin>
 8020e6c:	4603      	mov	r3, r0
 8020e6e:	61bb      	str	r3, [r7, #24]

        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8020e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e72:	f1c3 030a 	rsb	r3, r3, #10
 8020e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020e78:	fb03 f202 	mul.w	r2, r3, r2
 8020e7c:	6a3b      	ldr	r3, [r7, #32]
 8020e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020e80:	fb01 f303 	mul.w	r3, r1, r3
 8020e84:	4413      	add	r3, r2
 8020e86:	4a4d      	ldr	r2, [pc, #308]	; (8020fbc <lv_point_transform+0x284>)
 8020e88:	fb82 1203 	smull	r1, r2, r2, r3
 8020e8c:	1092      	asrs	r2, r2, #2
 8020e8e:	17db      	asrs	r3, r3, #31
 8020e90:	1ad3      	subs	r3, r2, r3
 8020e92:	4a4b      	ldr	r2, [pc, #300]	; (8020fc0 <lv_point_transform+0x288>)
 8020e94:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8020e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e98:	f1c3 030a 	rsb	r3, r3, #10
 8020e9c:	69fa      	ldr	r2, [r7, #28]
 8020e9e:	fb03 f202 	mul.w	r2, r3, r2
 8020ea2:	69bb      	ldr	r3, [r7, #24]
 8020ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020ea6:	fb01 f303 	mul.w	r3, r1, r3
 8020eaa:	4413      	add	r3, r2
 8020eac:	4a43      	ldr	r2, [pc, #268]	; (8020fbc <lv_point_transform+0x284>)
 8020eae:	fb82 1203 	smull	r1, r2, r2, r3
 8020eb2:	1092      	asrs	r2, r2, #2
 8020eb4:	17db      	asrs	r3, r3, #31
 8020eb6:	1ad3      	subs	r3, r2, r3
 8020eb8:	4a42      	ldr	r2, [pc, #264]	; (8020fc4 <lv_point_transform+0x28c>)
 8020eba:	6013      	str	r3, [r2, #0]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8020ebc:	4b40      	ldr	r3, [pc, #256]	; (8020fc0 <lv_point_transform+0x288>)
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	115b      	asrs	r3, r3, #5
 8020ec2:	4a3f      	ldr	r2, [pc, #252]	; (8020fc0 <lv_point_transform+0x288>)
 8020ec4:	6013      	str	r3, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8020ec6:	4b3f      	ldr	r3, [pc, #252]	; (8020fc4 <lv_point_transform+0x28c>)
 8020ec8:	681b      	ldr	r3, [r3, #0]
 8020eca:	115b      	asrs	r3, r3, #5
 8020ecc:	4a3d      	ldr	r2, [pc, #244]	; (8020fc4 <lv_point_transform+0x28c>)
 8020ece:	6013      	str	r3, [r2, #0]
        angle_prev = angle;
 8020ed0:	4a39      	ldr	r2, [pc, #228]	; (8020fb8 <lv_point_transform+0x280>)
 8020ed2:	68bb      	ldr	r3, [r7, #8]
 8020ed4:	6013      	str	r3, [r2, #0]
    }
    int32_t x = p->x;
 8020ed6:	68fb      	ldr	r3, [r7, #12]
 8020ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020edc:	617b      	str	r3, [r7, #20]
    int32_t y = p->y;
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ee4:	613b      	str	r3, [r7, #16]
    if(zoom == 256) {
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020eec:	d12c      	bne.n	8020f48 <lv_point_transform+0x210>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8020eee:	4b35      	ldr	r3, [pc, #212]	; (8020fc4 <lv_point_transform+0x28c>)
 8020ef0:	681b      	ldr	r3, [r3, #0]
 8020ef2:	697a      	ldr	r2, [r7, #20]
 8020ef4:	fb03 f202 	mul.w	r2, r3, r2
 8020ef8:	4b31      	ldr	r3, [pc, #196]	; (8020fc0 <lv_point_transform+0x288>)
 8020efa:	681b      	ldr	r3, [r3, #0]
 8020efc:	6939      	ldr	r1, [r7, #16]
 8020efe:	fb01 f303 	mul.w	r3, r1, r3
 8020f02:	1ad3      	subs	r3, r2, r3
 8020f04:	129b      	asrs	r3, r3, #10
 8020f06:	b29a      	uxth	r2, r3
 8020f08:	683b      	ldr	r3, [r7, #0]
 8020f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f0e:	b29b      	uxth	r3, r3
 8020f10:	4413      	add	r3, r2
 8020f12:	b29b      	uxth	r3, r3
 8020f14:	b21a      	sxth	r2, r3
 8020f16:	68fb      	ldr	r3, [r7, #12]
 8020f18:	801a      	strh	r2, [r3, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8020f1a:	4b29      	ldr	r3, [pc, #164]	; (8020fc0 <lv_point_transform+0x288>)
 8020f1c:	681b      	ldr	r3, [r3, #0]
 8020f1e:	697a      	ldr	r2, [r7, #20]
 8020f20:	fb03 f202 	mul.w	r2, r3, r2
 8020f24:	4b27      	ldr	r3, [pc, #156]	; (8020fc4 <lv_point_transform+0x28c>)
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	6939      	ldr	r1, [r7, #16]
 8020f2a:	fb01 f303 	mul.w	r3, r1, r3
 8020f2e:	4413      	add	r3, r2
 8020f30:	129b      	asrs	r3, r3, #10
 8020f32:	b29a      	uxth	r2, r3
 8020f34:	683b      	ldr	r3, [r7, #0]
 8020f36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020f3a:	b29b      	uxth	r3, r3
 8020f3c:	4413      	add	r3, r2
 8020f3e:	b29b      	uxth	r3, r3
 8020f40:	b21a      	sxth	r2, r3
 8020f42:	68fb      	ldr	r3, [r7, #12]
 8020f44:	805a      	strh	r2, [r3, #2]
 8020f46:	e033      	b.n	8020fb0 <lv_point_transform+0x278>
    }
    else {
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8020f48:	4b1e      	ldr	r3, [pc, #120]	; (8020fc4 <lv_point_transform+0x28c>)
 8020f4a:	681b      	ldr	r3, [r3, #0]
 8020f4c:	697a      	ldr	r2, [r7, #20]
 8020f4e:	fb03 f202 	mul.w	r2, r3, r2
 8020f52:	4b1b      	ldr	r3, [pc, #108]	; (8020fc0 <lv_point_transform+0x288>)
 8020f54:	681b      	ldr	r3, [r3, #0]
 8020f56:	6939      	ldr	r1, [r7, #16]
 8020f58:	fb01 f303 	mul.w	r3, r1, r3
 8020f5c:	1ad3      	subs	r3, r2, r3
 8020f5e:	687a      	ldr	r2, [r7, #4]
 8020f60:	fb02 f303 	mul.w	r3, r2, r3
 8020f64:	149b      	asrs	r3, r3, #18
 8020f66:	b29a      	uxth	r2, r3
 8020f68:	683b      	ldr	r3, [r7, #0]
 8020f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f6e:	b29b      	uxth	r3, r3
 8020f70:	4413      	add	r3, r2
 8020f72:	b29b      	uxth	r3, r3
 8020f74:	b21a      	sxth	r2, r3
 8020f76:	68fb      	ldr	r3, [r7, #12]
 8020f78:	801a      	strh	r2, [r3, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8020f7a:	4b11      	ldr	r3, [pc, #68]	; (8020fc0 <lv_point_transform+0x288>)
 8020f7c:	681b      	ldr	r3, [r3, #0]
 8020f7e:	697a      	ldr	r2, [r7, #20]
 8020f80:	fb03 f202 	mul.w	r2, r3, r2
 8020f84:	4b0f      	ldr	r3, [pc, #60]	; (8020fc4 <lv_point_transform+0x28c>)
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	6939      	ldr	r1, [r7, #16]
 8020f8a:	fb01 f303 	mul.w	r3, r1, r3
 8020f8e:	4413      	add	r3, r2
 8020f90:	687a      	ldr	r2, [r7, #4]
 8020f92:	fb02 f303 	mul.w	r3, r2, r3
 8020f96:	149b      	asrs	r3, r3, #18
 8020f98:	b29a      	uxth	r2, r3
 8020f9a:	683b      	ldr	r3, [r7, #0]
 8020f9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020fa0:	b29b      	uxth	r3, r3
 8020fa2:	4413      	add	r3, r2
 8020fa4:	b29b      	uxth	r3, r3
 8020fa6:	b21a      	sxth	r2, r3
 8020fa8:	68fb      	ldr	r3, [r7, #12]
 8020faa:	805a      	strh	r2, [r3, #2]
 8020fac:	e000      	b.n	8020fb0 <lv_point_transform+0x278>
        return;
 8020fae:	bf00      	nop
    }
}
 8020fb0:	3738      	adds	r7, #56	; 0x38
 8020fb2:	46bd      	mov	sp, r7
 8020fb4:	bd80      	pop	{r7, pc}
 8020fb6:	bf00      	nop
 8020fb8:	20000010 	.word	0x20000010
 8020fbc:	66666667 	.word	0x66666667
 8020fc0:	20000854 	.word	0x20000854
 8020fc4:	20000858 	.word	0x20000858

08020fc8 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 8020fc8:	b480      	push	{r7}
 8020fca:	b089      	sub	sp, #36	; 0x24
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	6078      	str	r0, [r7, #4]
 8020fd0:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020fd8:	461a      	mov	r2, r3
 8020fda:	687b      	ldr	r3, [r7, #4]
 8020fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020fe0:	1ad3      	subs	r3, r2, r3
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	da00      	bge.n	8020fe8 <lv_point_within_circle+0x20>
 8020fe6:	3301      	adds	r3, #1
 8020fe8:	105b      	asrs	r3, r3, #1
 8020fea:	83fb      	strh	r3, [r7, #30]

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ff2:	b29a      	uxth	r2, r3
 8020ff4:	8bfb      	ldrh	r3, [r7, #30]
 8020ff6:	4413      	add	r3, r2
 8020ff8:	b29b      	uxth	r3, r3
 8020ffa:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021002:	b29a      	uxth	r2, r3
 8021004:	8bfb      	ldrh	r3, [r7, #30]
 8021006:	4413      	add	r3, r2
 8021008:	b29b      	uxth	r3, r3
 802100a:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 802100c:	683b      	ldr	r3, [r7, #0]
 802100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021012:	b29a      	uxth	r2, r3
 8021014:	8bbb      	ldrh	r3, [r7, #28]
 8021016:	1ad3      	subs	r3, r2, r3
 8021018:	b29b      	uxth	r3, r3
 802101a:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 802101c:	683b      	ldr	r3, [r7, #0]
 802101e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021022:	b29a      	uxth	r2, r3
 8021024:	8b7b      	ldrh	r3, [r7, #26]
 8021026:	1ad3      	subs	r3, r2, r3
 8021028:	b29b      	uxth	r3, r3
 802102a:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 802102c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8021030:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8021034:	fb02 f303 	mul.w	r3, r2, r3
 8021038:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 802103a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 802103e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8021042:	fb03 f202 	mul.w	r2, r3, r2
 8021046:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802104a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 802104e:	fb01 f303 	mul.w	r3, r1, r3
 8021052:	4413      	add	r3, r2
 8021054:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 8021056:	68fa      	ldr	r2, [r7, #12]
 8021058:	693b      	ldr	r3, [r7, #16]
 802105a:	429a      	cmp	r2, r3
 802105c:	d801      	bhi.n	8021062 <lv_point_within_circle+0x9a>
        return true;
 802105e:	2301      	movs	r3, #1
 8021060:	e000      	b.n	8021064 <lv_point_within_circle+0x9c>
    else
        return false;
 8021062:	2300      	movs	r3, #0
}
 8021064:	4618      	mov	r0, r3
 8021066:	3724      	adds	r7, #36	; 0x24
 8021068:	46bd      	mov	sp, r7
 802106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802106e:	4770      	bx	lr

08021070 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8021070:	b480      	push	{r7}
 8021072:	b083      	sub	sp, #12
 8021074:	af00      	add	r7, sp, #0
 8021076:	4603      	mov	r3, r0
 8021078:	71fb      	strb	r3, [r7, #7]
 802107a:	460b      	mov	r3, r1
 802107c:	71bb      	strb	r3, [r7, #6]
 802107e:	4613      	mov	r3, r2
 8021080:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8021082:	797b      	ldrb	r3, [r7, #5]
 8021084:	09db      	lsrs	r3, r3, #7
 8021086:	b2da      	uxtb	r2, r3
 8021088:	79bb      	ldrb	r3, [r7, #6]
 802108a:	09db      	lsrs	r3, r3, #7
 802108c:	b2db      	uxtb	r3, r3
 802108e:	4313      	orrs	r3, r2
 8021090:	b2da      	uxtb	r2, r3
 8021092:	79fb      	ldrb	r3, [r7, #7]
 8021094:	09db      	lsrs	r3, r3, #7
 8021096:	b2db      	uxtb	r3, r3
 8021098:	4313      	orrs	r3, r2
 802109a:	b2db      	uxtb	r3, r3
}
 802109c:	4618      	mov	r0, r3
 802109e:	370c      	adds	r7, #12
 80210a0:	46bd      	mov	sp, r7
 80210a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210a6:	4770      	bx	lr

080210a8 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 80210a8:	b580      	push	{r7, lr}
 80210aa:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80210ac:	2200      	movs	r2, #0
 80210ae:	2100      	movs	r1, #0
 80210b0:	2000      	movs	r0, #0
 80210b2:	f7ff ffdd 	bl	8021070 <lv_color_make>
 80210b6:	4603      	mov	r3, r0
}
 80210b8:	4618      	mov	r0, r3
 80210ba:	bd80      	pop	{r7, pc}

080210bc <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 80210bc:	b480      	push	{r7}
 80210be:	b085      	sub	sp, #20
 80210c0:	af00      	add	r7, sp, #0
 80210c2:	60f8      	str	r0, [r7, #12]
 80210c4:	7239      	strb	r1, [r7, #8]
 80210c6:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num--;
    }
#else
    while(px_num > 16) {
 80210c8:	e062      	b.n	8021190 <lv_color_fill+0xd4>
        *buf = color;
 80210ca:	68fb      	ldr	r3, [r7, #12]
 80210cc:	7a3a      	ldrb	r2, [r7, #8]
 80210ce:	701a      	strb	r2, [r3, #0]
        buf++;
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	3301      	adds	r3, #1
 80210d4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210d6:	68fb      	ldr	r3, [r7, #12]
 80210d8:	7a3a      	ldrb	r2, [r7, #8]
 80210da:	701a      	strb	r2, [r3, #0]
        buf++;
 80210dc:	68fb      	ldr	r3, [r7, #12]
 80210de:	3301      	adds	r3, #1
 80210e0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210e2:	68fb      	ldr	r3, [r7, #12]
 80210e4:	7a3a      	ldrb	r2, [r7, #8]
 80210e6:	701a      	strb	r2, [r3, #0]
        buf++;
 80210e8:	68fb      	ldr	r3, [r7, #12]
 80210ea:	3301      	adds	r3, #1
 80210ec:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210ee:	68fb      	ldr	r3, [r7, #12]
 80210f0:	7a3a      	ldrb	r2, [r7, #8]
 80210f2:	701a      	strb	r2, [r3, #0]
        buf++;
 80210f4:	68fb      	ldr	r3, [r7, #12]
 80210f6:	3301      	adds	r3, #1
 80210f8:	60fb      	str	r3, [r7, #12]

        *buf = color;
 80210fa:	68fb      	ldr	r3, [r7, #12]
 80210fc:	7a3a      	ldrb	r2, [r7, #8]
 80210fe:	701a      	strb	r2, [r3, #0]
        buf++;
 8021100:	68fb      	ldr	r3, [r7, #12]
 8021102:	3301      	adds	r3, #1
 8021104:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	7a3a      	ldrb	r2, [r7, #8]
 802110a:	701a      	strb	r2, [r3, #0]
        buf++;
 802110c:	68fb      	ldr	r3, [r7, #12]
 802110e:	3301      	adds	r3, #1
 8021110:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021112:	68fb      	ldr	r3, [r7, #12]
 8021114:	7a3a      	ldrb	r2, [r7, #8]
 8021116:	701a      	strb	r2, [r3, #0]
        buf++;
 8021118:	68fb      	ldr	r3, [r7, #12]
 802111a:	3301      	adds	r3, #1
 802111c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802111e:	68fb      	ldr	r3, [r7, #12]
 8021120:	7a3a      	ldrb	r2, [r7, #8]
 8021122:	701a      	strb	r2, [r3, #0]
        buf++;
 8021124:	68fb      	ldr	r3, [r7, #12]
 8021126:	3301      	adds	r3, #1
 8021128:	60fb      	str	r3, [r7, #12]

        *buf = color;
 802112a:	68fb      	ldr	r3, [r7, #12]
 802112c:	7a3a      	ldrb	r2, [r7, #8]
 802112e:	701a      	strb	r2, [r3, #0]
        buf++;
 8021130:	68fb      	ldr	r3, [r7, #12]
 8021132:	3301      	adds	r3, #1
 8021134:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021136:	68fb      	ldr	r3, [r7, #12]
 8021138:	7a3a      	ldrb	r2, [r7, #8]
 802113a:	701a      	strb	r2, [r3, #0]
        buf++;
 802113c:	68fb      	ldr	r3, [r7, #12]
 802113e:	3301      	adds	r3, #1
 8021140:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021142:	68fb      	ldr	r3, [r7, #12]
 8021144:	7a3a      	ldrb	r2, [r7, #8]
 8021146:	701a      	strb	r2, [r3, #0]
        buf++;
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	3301      	adds	r3, #1
 802114c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802114e:	68fb      	ldr	r3, [r7, #12]
 8021150:	7a3a      	ldrb	r2, [r7, #8]
 8021152:	701a      	strb	r2, [r3, #0]
        buf++;
 8021154:	68fb      	ldr	r3, [r7, #12]
 8021156:	3301      	adds	r3, #1
 8021158:	60fb      	str	r3, [r7, #12]

        *buf = color;
 802115a:	68fb      	ldr	r3, [r7, #12]
 802115c:	7a3a      	ldrb	r2, [r7, #8]
 802115e:	701a      	strb	r2, [r3, #0]
        buf++;
 8021160:	68fb      	ldr	r3, [r7, #12]
 8021162:	3301      	adds	r3, #1
 8021164:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021166:	68fb      	ldr	r3, [r7, #12]
 8021168:	7a3a      	ldrb	r2, [r7, #8]
 802116a:	701a      	strb	r2, [r3, #0]
        buf++;
 802116c:	68fb      	ldr	r3, [r7, #12]
 802116e:	3301      	adds	r3, #1
 8021170:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021172:	68fb      	ldr	r3, [r7, #12]
 8021174:	7a3a      	ldrb	r2, [r7, #8]
 8021176:	701a      	strb	r2, [r3, #0]
        buf++;
 8021178:	68fb      	ldr	r3, [r7, #12]
 802117a:	3301      	adds	r3, #1
 802117c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802117e:	68fb      	ldr	r3, [r7, #12]
 8021180:	7a3a      	ldrb	r2, [r7, #8]
 8021182:	701a      	strb	r2, [r3, #0]
        buf++;
 8021184:	68fb      	ldr	r3, [r7, #12]
 8021186:	3301      	adds	r3, #1
 8021188:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 802118a:	687b      	ldr	r3, [r7, #4]
 802118c:	3b10      	subs	r3, #16
 802118e:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	2b10      	cmp	r3, #16
 8021194:	d899      	bhi.n	80210ca <lv_color_fill+0xe>
    }
    while(px_num) {
 8021196:	e008      	b.n	80211aa <lv_color_fill+0xee>
        *buf = color;
 8021198:	68fb      	ldr	r3, [r7, #12]
 802119a:	7a3a      	ldrb	r2, [r7, #8]
 802119c:	701a      	strb	r2, [r3, #0]
        buf++;
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	3301      	adds	r3, #1
 80211a2:	60fb      	str	r3, [r7, #12]
        px_num--;
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	3b01      	subs	r3, #1
 80211a8:	607b      	str	r3, [r7, #4]
    while(px_num) {
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	2b00      	cmp	r3, #0
 80211ae:	d1f3      	bne.n	8021198 <lv_color_fill+0xdc>
    }
#endif
}
 80211b0:	bf00      	nop
 80211b2:	bf00      	nop
 80211b4:	3714      	adds	r7, #20
 80211b6:	46bd      	mov	sp, r7
 80211b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211bc:	4770      	bx	lr
	...

080211c0 <lv_palette_main>:
    color32.full = lv_color_to32(color);
    return lv_color_rgb_to_hsv(color32.ch.red, color32.ch.green, color32.ch.blue);
}

lv_color_t lv_palette_main(lv_palette_t p)
{
 80211c0:	b580      	push	{r7, lr}
 80211c2:	b082      	sub	sp, #8
 80211c4:	af00      	add	r7, sp, #0
 80211c6:	4603      	mov	r3, r0
 80211c8:	71fb      	strb	r3, [r7, #7]
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 80211ca:	79fb      	ldrb	r3, [r7, #7]
 80211cc:	2b12      	cmp	r3, #18
 80211ce:	d903      	bls.n	80211d8 <lv_palette_main+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
 80211d0:	f7ff ff6a 	bl	80210a8 <lv_color_black>
 80211d4:	4603      	mov	r3, r0
 80211d6:	e002      	b.n	80211de <lv_palette_main+0x1e>
    }

    return colors[p];
 80211d8:	79fb      	ldrb	r3, [r7, #7]
 80211da:	4a03      	ldr	r2, [pc, #12]	; (80211e8 <lv_palette_main+0x28>)
 80211dc:	5cd3      	ldrb	r3, [r2, r3]

}
 80211de:	4618      	mov	r0, r3
 80211e0:	3708      	adds	r7, #8
 80211e2:	46bd      	mov	sp, r7
 80211e4:	bd80      	pop	{r7, pc}
 80211e6:	bf00      	nop
 80211e8:	0802de80 	.word	0x0802de80

080211ec <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 80211ec:	b580      	push	{r7, lr}
 80211ee:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 80211f0:	2104      	movs	r1, #4
 80211f2:	4802      	ldr	r0, [pc, #8]	; (80211fc <_lv_fs_init+0x10>)
 80211f4:	f000 fb19 	bl	802182a <_lv_ll_init>
}
 80211f8:	bf00      	nop
 80211fa:	bd80      	pop	{r7, pc}
 80211fc:	20000880 	.word	0x20000880

08021200 <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 8021200:	b580      	push	{r7, lr}
 8021202:	b088      	sub	sp, #32
 8021204:	af00      	add	r7, sp, #0
 8021206:	60f8      	str	r0, [r7, #12]
 8021208:	60b9      	str	r1, [r7, #8]
 802120a:	4613      	mov	r3, r2
 802120c:	71fb      	strb	r3, [r7, #7]
    if(path == NULL) {
 802120e:	68bb      	ldr	r3, [r7, #8]
 8021210:	2b00      	cmp	r3, #0
 8021212:	d101      	bne.n	8021218 <lv_fs_open+0x18>
        LV_LOG_WARN("Can't open file: path is NULL");
        return LV_FS_RES_INV_PARAM;
 8021214:	230b      	movs	r3, #11
 8021216:	e05c      	b.n	80212d2 <lv_fs_open+0xd2>
    }

    char letter = path[0];
 8021218:	68bb      	ldr	r3, [r7, #8]
 802121a:	781b      	ldrb	r3, [r3, #0]
 802121c:	77fb      	strb	r3, [r7, #31]
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 802121e:	7ffb      	ldrb	r3, [r7, #31]
 8021220:	4618      	mov	r0, r3
 8021222:	f000 fa9b 	bl	802175c <lv_fs_get_drv>
 8021226:	61b8      	str	r0, [r7, #24]

    if(drv == NULL) {
 8021228:	69bb      	ldr	r3, [r7, #24]
 802122a:	2b00      	cmp	r3, #0
 802122c:	d101      	bne.n	8021232 <lv_fs_open+0x32>
        LV_LOG_WARN("Can't open file (%s): unknown driver letter", path);
        return LV_FS_RES_NOT_EX;
 802122e:	2303      	movs	r3, #3
 8021230:	e04f      	b.n	80212d2 <lv_fs_open+0xd2>
    }

    if(drv->ready_cb) {
 8021232:	69bb      	ldr	r3, [r7, #24]
 8021234:	685b      	ldr	r3, [r3, #4]
 8021236:	2b00      	cmp	r3, #0
 8021238:	d00b      	beq.n	8021252 <lv_fs_open+0x52>
        if(drv->ready_cb(drv) == false) {
 802123a:	69bb      	ldr	r3, [r7, #24]
 802123c:	685b      	ldr	r3, [r3, #4]
 802123e:	69b8      	ldr	r0, [r7, #24]
 8021240:	4798      	blx	r3
 8021242:	4603      	mov	r3, r0
 8021244:	f083 0301 	eor.w	r3, r3, #1
 8021248:	b2db      	uxtb	r3, r3
 802124a:	2b00      	cmp	r3, #0
 802124c:	d001      	beq.n	8021252 <lv_fs_open+0x52>
            LV_LOG_WARN("Can't open file (%s): driver not ready", path);
            return LV_FS_RES_HW_ERR;
 802124e:	2301      	movs	r3, #1
 8021250:	e03f      	b.n	80212d2 <lv_fs_open+0xd2>
        }
    }

    if(drv->open_cb == NULL) {
 8021252:	69bb      	ldr	r3, [r7, #24]
 8021254:	689b      	ldr	r3, [r3, #8]
 8021256:	2b00      	cmp	r3, #0
 8021258:	d101      	bne.n	802125e <lv_fs_open+0x5e>
        LV_LOG_WARN("Can't open file (%s): open function not exists", path);
        return LV_FS_RES_NOT_IMP;
 802125a:	2309      	movs	r3, #9
 802125c:	e039      	b.n	80212d2 <lv_fs_open+0xd2>
    }

    const char * real_path = lv_fs_get_real_path(path);
 802125e:	68b8      	ldr	r0, [r7, #8]
 8021260:	f000 face 	bl	8021800 <lv_fs_get_real_path>
 8021264:	6178      	str	r0, [r7, #20]
    void * file_d = drv->open_cb(drv, real_path, mode);
 8021266:	69bb      	ldr	r3, [r7, #24]
 8021268:	689b      	ldr	r3, [r3, #8]
 802126a:	79fa      	ldrb	r2, [r7, #7]
 802126c:	6979      	ldr	r1, [r7, #20]
 802126e:	69b8      	ldr	r0, [r7, #24]
 8021270:	4798      	blx	r3
 8021272:	6138      	str	r0, [r7, #16]

    if(file_d == NULL || file_d == (void *)(-1)) {
 8021274:	693b      	ldr	r3, [r7, #16]
 8021276:	2b00      	cmp	r3, #0
 8021278:	d003      	beq.n	8021282 <lv_fs_open+0x82>
 802127a:	693b      	ldr	r3, [r7, #16]
 802127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021280:	d101      	bne.n	8021286 <lv_fs_open+0x86>
        return LV_FS_RES_UNKNOWN;
 8021282:	230c      	movs	r3, #12
 8021284:	e025      	b.n	80212d2 <lv_fs_open+0xd2>
    }

    file_p->drv = drv;
 8021286:	68fb      	ldr	r3, [r7, #12]
 8021288:	69ba      	ldr	r2, [r7, #24]
 802128a:	605a      	str	r2, [r3, #4]
    file_p->file_d = file_d;
 802128c:	68fb      	ldr	r3, [r7, #12]
 802128e:	693a      	ldr	r2, [r7, #16]
 8021290:	601a      	str	r2, [r3, #0]

    if(drv->cache_size) {
 8021292:	69bb      	ldr	r3, [r7, #24]
 8021294:	885b      	ldrh	r3, [r3, #2]
 8021296:	2b00      	cmp	r3, #0
 8021298:	d01a      	beq.n	80212d0 <lv_fs_open+0xd0>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 802129a:	2010      	movs	r0, #16
 802129c:	f000 fd62 	bl	8021d64 <lv_mem_alloc>
 80212a0:	4602      	mov	r2, r0
 80212a2:	68fb      	ldr	r3, [r7, #12]
 80212a4:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 80212a6:	68fb      	ldr	r3, [r7, #12]
 80212a8:	689b      	ldr	r3, [r3, #8]
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	d100      	bne.n	80212b0 <lv_fs_open+0xb0>
 80212ae:	e7fe      	b.n	80212ae <lv_fs_open+0xae>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 80212b0:	68fb      	ldr	r3, [r7, #12]
 80212b2:	689b      	ldr	r3, [r3, #8]
 80212b4:	2110      	movs	r1, #16
 80212b6:	4618      	mov	r0, r3
 80212b8:	f001 f988 	bl	80225cc <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	689b      	ldr	r3, [r3, #8]
 80212c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80212c4:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 80212c6:	68fb      	ldr	r3, [r7, #12]
 80212c8:	689b      	ldr	r3, [r3, #8]
 80212ca:	f06f 0201 	mvn.w	r2, #1
 80212ce:	605a      	str	r2, [r3, #4]
    }

    return LV_FS_RES_OK;
 80212d0:	2300      	movs	r3, #0
}
 80212d2:	4618      	mov	r0, r3
 80212d4:	3720      	adds	r7, #32
 80212d6:	46bd      	mov	sp, r7
 80212d8:	bd80      	pop	{r7, pc}

080212da <lv_fs_close>:

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 80212da:	b580      	push	{r7, lr}
 80212dc:	b084      	sub	sp, #16
 80212de:	af00      	add	r7, sp, #0
 80212e0:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	685b      	ldr	r3, [r3, #4]
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	d101      	bne.n	80212ee <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 80212ea:	230b      	movs	r3, #11
 80212ec:	e034      	b.n	8021358 <lv_fs_close+0x7e>
    }

    if(file_p->drv->close_cb == NULL) {
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	685b      	ldr	r3, [r3, #4]
 80212f2:	68db      	ldr	r3, [r3, #12]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d101      	bne.n	80212fc <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 80212f8:	2309      	movs	r3, #9
 80212fa:	e02d      	b.n	8021358 <lv_fs_close+0x7e>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	685b      	ldr	r3, [r3, #4]
 8021300:	68db      	ldr	r3, [r3, #12]
 8021302:	687a      	ldr	r2, [r7, #4]
 8021304:	6850      	ldr	r0, [r2, #4]
 8021306:	687a      	ldr	r2, [r7, #4]
 8021308:	6812      	ldr	r2, [r2, #0]
 802130a:	4611      	mov	r1, r2
 802130c:	4798      	blx	r3
 802130e:	4603      	mov	r3, r0
 8021310:	73fb      	strb	r3, [r7, #15]

    if(file_p->drv->cache_size && file_p->cache) {
 8021312:	687b      	ldr	r3, [r7, #4]
 8021314:	685b      	ldr	r3, [r3, #4]
 8021316:	885b      	ldrh	r3, [r3, #2]
 8021318:	2b00      	cmp	r3, #0
 802131a:	d013      	beq.n	8021344 <lv_fs_close+0x6a>
 802131c:	687b      	ldr	r3, [r7, #4]
 802131e:	689b      	ldr	r3, [r3, #8]
 8021320:	2b00      	cmp	r3, #0
 8021322:	d00f      	beq.n	8021344 <lv_fs_close+0x6a>
        if(file_p->cache->buffer) {
 8021324:	687b      	ldr	r3, [r7, #4]
 8021326:	689b      	ldr	r3, [r3, #8]
 8021328:	68db      	ldr	r3, [r3, #12]
 802132a:	2b00      	cmp	r3, #0
 802132c:	d005      	beq.n	802133a <lv_fs_close+0x60>
            lv_mem_free(file_p->cache->buffer);
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	689b      	ldr	r3, [r3, #8]
 8021332:	68db      	ldr	r3, [r3, #12]
 8021334:	4618      	mov	r0, r3
 8021336:	f000 fd45 	bl	8021dc4 <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	689b      	ldr	r3, [r3, #8]
 802133e:	4618      	mov	r0, r3
 8021340:	f000 fd40 	bl	8021dc4 <lv_mem_free>
    }

    file_p->file_d = NULL;
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	2200      	movs	r2, #0
 8021348:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 802134a:	687b      	ldr	r3, [r7, #4]
 802134c:	2200      	movs	r2, #0
 802134e:	605a      	str	r2, [r3, #4]
    file_p->cache  = NULL;
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	2200      	movs	r2, #0
 8021354:	609a      	str	r2, [r3, #8]

    return res;
 8021356:	7bfb      	ldrb	r3, [r7, #15]
}
 8021358:	4618      	mov	r0, r3
 802135a:	3710      	adds	r7, #16
 802135c:	46bd      	mov	sp, r7
 802135e:	bd80      	pop	{r7, pc}

08021360 <lv_fs_read_cached>:

static lv_fs_res_t lv_fs_read_cached(lv_fs_file_t * file_p, char * buf, uint32_t btr, uint32_t * br)
{
 8021360:	b5b0      	push	{r4, r5, r7, lr}
 8021362:	b090      	sub	sp, #64	; 0x40
 8021364:	af02      	add	r7, sp, #8
 8021366:	60f8      	str	r0, [r7, #12]
 8021368:	60b9      	str	r1, [r7, #8]
 802136a:	607a      	str	r2, [r7, #4]
 802136c:	603b      	str	r3, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 802136e:	2300      	movs	r3, #0
 8021370:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t file_position = file_p->cache->file_position;
 8021374:	68fb      	ldr	r3, [r7, #12]
 8021376:	689b      	ldr	r3, [r3, #8]
 8021378:	689b      	ldr	r3, [r3, #8]
 802137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t start = file_p->cache->start;
 802137c:	68fb      	ldr	r3, [r7, #12]
 802137e:	689b      	ldr	r3, [r3, #8]
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t end = file_p->cache->end;
 8021384:	68fb      	ldr	r3, [r7, #12]
 8021386:	689b      	ldr	r3, [r3, #8]
 8021388:	685b      	ldr	r3, [r3, #4]
 802138a:	627b      	str	r3, [r7, #36]	; 0x24
    char * buffer = file_p->cache->buffer;
 802138c:	68fb      	ldr	r3, [r7, #12]
 802138e:	689b      	ldr	r3, [r3, #8]
 8021390:	68db      	ldr	r3, [r3, #12]
 8021392:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t buffer_size = file_p->drv->cache_size;
 8021394:	68fb      	ldr	r3, [r7, #12]
 8021396:	685b      	ldr	r3, [r3, #4]
 8021398:	885b      	ldrh	r3, [r3, #2]
 802139a:	847b      	strh	r3, [r7, #34]	; 0x22

    if(start <= file_position && file_position < end) {
 802139c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213a0:	429a      	cmp	r2, r3
 80213a2:	f200 8082 	bhi.w	80214aa <lv_fs_read_cached+0x14a>
 80213a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80213a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213aa:	429a      	cmp	r2, r3
 80213ac:	d27d      	bcs.n	80214aa <lv_fs_read_cached+0x14a>
        /* Data can be read from cache buffer */
        uint16_t buffer_offset = file_position - start;
 80213ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213b0:	b29a      	uxth	r2, r3
 80213b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213b4:	b29b      	uxth	r3, r3
 80213b6:	1ad3      	subs	r3, r2, r3
 80213b8:	843b      	strh	r3, [r7, #32]
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 80213ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80213bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213be:	1ad2      	subs	r2, r2, r3
 80213c0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80213c2:	8c3b      	ldrh	r3, [r7, #32]
 80213c4:	1acb      	subs	r3, r1, r3
 80213c6:	4293      	cmp	r3, r2
 80213c8:	bf28      	it	cs
 80213ca:	4613      	movcs	r3, r2
 80213cc:	61fb      	str	r3, [r7, #28]

        if(btr <= buffer_remaining_length) {
 80213ce:	687a      	ldr	r2, [r7, #4]
 80213d0:	69fb      	ldr	r3, [r7, #28]
 80213d2:	429a      	cmp	r2, r3
 80213d4:	d80b      	bhi.n	80213ee <lv_fs_read_cached+0x8e>
            /*Data is in cache buffer, and buffer end not reached, no need to read from FS*/
            lv_memcpy(buf, buffer + buffer_offset, btr);
 80213d6:	8c3b      	ldrh	r3, [r7, #32]
 80213d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80213da:	4413      	add	r3, r2
 80213dc:	687a      	ldr	r2, [r7, #4]
 80213de:	4619      	mov	r1, r3
 80213e0:	68b8      	ldr	r0, [r7, #8]
 80213e2:	f000 fe4d 	bl	8022080 <lv_memcpy>
            *br = btr;
 80213e6:	683b      	ldr	r3, [r7, #0]
 80213e8:	687a      	ldr	r2, [r7, #4]
 80213ea:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 80213ec:	e0b3      	b.n	8021556 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*First part of data is in cache buffer, but we need to read rest of data from FS*/
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 80213ee:	8c3b      	ldrh	r3, [r7, #32]
 80213f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80213f2:	4413      	add	r3, r2
 80213f4:	69fa      	ldr	r2, [r7, #28]
 80213f6:	4619      	mov	r1, r3
 80213f8:	68b8      	ldr	r0, [r7, #8]
 80213fa:	f000 fe41 	bl	8022080 <lv_memcpy>

            uint32_t bytes_read_to_buffer = 0;
 80213fe:	2300      	movs	r3, #0
 8021400:	617b      	str	r3, [r7, #20]
            if(btr > buffer_size) {
 8021402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021404:	687a      	ldr	r2, [r7, #4]
 8021406:	429a      	cmp	r2, r3
 8021408:	d916      	bls.n	8021438 <lv_fs_read_cached+0xd8>
                /*If remaining data chuck is bigger than buffer size, then do not use cache, instead read it directly from FS*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 802140a:	68fb      	ldr	r3, [r7, #12]
 802140c:	685b      	ldr	r3, [r3, #4]
 802140e:	691c      	ldr	r4, [r3, #16]
 8021410:	68fb      	ldr	r3, [r7, #12]
 8021412:	6858      	ldr	r0, [r3, #4]
 8021414:	68fb      	ldr	r3, [r7, #12]
 8021416:	6819      	ldr	r1, [r3, #0]
 8021418:	68ba      	ldr	r2, [r7, #8]
 802141a:	69fb      	ldr	r3, [r7, #28]
 802141c:	18d5      	adds	r5, r2, r3
 802141e:	687a      	ldr	r2, [r7, #4]
 8021420:	69fb      	ldr	r3, [r7, #28]
 8021422:	1ad2      	subs	r2, r2, r3
 8021424:	f107 0314 	add.w	r3, r7, #20
 8021428:	9300      	str	r3, [sp, #0]
 802142a:	4613      	mov	r3, r2
 802142c:	462a      	mov	r2, r5
 802142e:	47a0      	blx	r4
 8021430:	4603      	mov	r3, r0
 8021432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8021436:	e02e      	b.n	8021496 <lv_fs_read_cached+0x136>
                                           btr - buffer_remaining_length, &bytes_read_to_buffer);
            }
            else {
                /*If remaining data chunk is smaller than buffer size, then read into cache buffer*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8021438:	68fb      	ldr	r3, [r7, #12]
 802143a:	685b      	ldr	r3, [r3, #4]
 802143c:	691c      	ldr	r4, [r3, #16]
 802143e:	68fb      	ldr	r3, [r7, #12]
 8021440:	6858      	ldr	r0, [r3, #4]
 8021442:	68fb      	ldr	r3, [r7, #12]
 8021444:	6819      	ldr	r1, [r3, #0]
 8021446:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021448:	f107 0314 	add.w	r3, r7, #20
 802144c:	9300      	str	r3, [sp, #0]
 802144e:	4613      	mov	r3, r2
 8021450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021452:	47a0      	blx	r4
 8021454:	4603      	mov	r3, r0
 8021456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                file_p->cache->start = file_p->cache->end;
 802145a:	68fb      	ldr	r3, [r7, #12]
 802145c:	689a      	ldr	r2, [r3, #8]
 802145e:	68fb      	ldr	r3, [r7, #12]
 8021460:	689b      	ldr	r3, [r3, #8]
 8021462:	6852      	ldr	r2, [r2, #4]
 8021464:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8021466:	68fb      	ldr	r3, [r7, #12]
 8021468:	689b      	ldr	r3, [r3, #8]
 802146a:	6819      	ldr	r1, [r3, #0]
 802146c:	697a      	ldr	r2, [r7, #20]
 802146e:	68fb      	ldr	r3, [r7, #12]
 8021470:	689b      	ldr	r3, [r3, #8]
 8021472:	440a      	add	r2, r1
 8021474:	605a      	str	r2, [r3, #4]

                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8021476:	687a      	ldr	r2, [r7, #4]
 8021478:	69fb      	ldr	r3, [r7, #28]
 802147a:	1ad2      	subs	r2, r2, r3
 802147c:	697b      	ldr	r3, [r7, #20]
 802147e:	4293      	cmp	r3, r2
 8021480:	bf28      	it	cs
 8021482:	4613      	movcs	r3, r2
 8021484:	837b      	strh	r3, [r7, #26]
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 8021486:	68ba      	ldr	r2, [r7, #8]
 8021488:	69fb      	ldr	r3, [r7, #28]
 802148a:	4413      	add	r3, r2
 802148c:	8b7a      	ldrh	r2, [r7, #26]
 802148e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021490:	4618      	mov	r0, r3
 8021492:	f000 fdf5 	bl	8022080 <lv_memcpy>
            }
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8021496:	697a      	ldr	r2, [r7, #20]
 8021498:	69fb      	ldr	r3, [r7, #28]
 802149a:	441a      	add	r2, r3
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	429a      	cmp	r2, r3
 80214a0:	bf28      	it	cs
 80214a2:	461a      	movcs	r2, r3
 80214a4:	683b      	ldr	r3, [r7, #0]
 80214a6:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 80214a8:	e055      	b.n	8021556 <lv_fs_read_cached+0x1f6>
        }
    }
    else {
        /*Data is not in cache buffer*/
        if(btr > buffer_size) {
 80214aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80214ac:	687a      	ldr	r2, [r7, #4]
 80214ae:	429a      	cmp	r2, r3
 80214b0:	d90f      	bls.n	80214d2 <lv_fs_read_cached+0x172>
            /*If bigger data is requested, then do not use cache, instead read it directly*/
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 80214b2:	68fb      	ldr	r3, [r7, #12]
 80214b4:	685b      	ldr	r3, [r3, #4]
 80214b6:	691c      	ldr	r4, [r3, #16]
 80214b8:	68fb      	ldr	r3, [r7, #12]
 80214ba:	6858      	ldr	r0, [r3, #4]
 80214bc:	68fb      	ldr	r3, [r7, #12]
 80214be:	6819      	ldr	r1, [r3, #0]
 80214c0:	683b      	ldr	r3, [r7, #0]
 80214c2:	9300      	str	r3, [sp, #0]
 80214c4:	687b      	ldr	r3, [r7, #4]
 80214c6:	68ba      	ldr	r2, [r7, #8]
 80214c8:	47a0      	blx	r4
 80214ca:	4603      	mov	r3, r0
 80214cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80214d0:	e041      	b.n	8021556 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*If small data is requested, then read from FS into cache buffer*/
            if(buffer == NULL) {
 80214d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214d4:	2b00      	cmp	r3, #0
 80214d6:	d111      	bne.n	80214fc <lv_fs_read_cached+0x19c>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 80214d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80214da:	68fb      	ldr	r3, [r7, #12]
 80214dc:	689c      	ldr	r4, [r3, #8]
 80214de:	4610      	mov	r0, r2
 80214e0:	f000 fc40 	bl	8021d64 <lv_mem_alloc>
 80214e4:	4603      	mov	r3, r0
 80214e6:	60e3      	str	r3, [r4, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 80214e8:	68fb      	ldr	r3, [r7, #12]
 80214ea:	689b      	ldr	r3, [r3, #8]
 80214ec:	68db      	ldr	r3, [r3, #12]
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d100      	bne.n	80214f4 <lv_fs_read_cached+0x194>
 80214f2:	e7fe      	b.n	80214f2 <lv_fs_read_cached+0x192>
                buffer = file_p->cache->buffer;
 80214f4:	68fb      	ldr	r3, [r7, #12]
 80214f6:	689b      	ldr	r3, [r3, #8]
 80214f8:	68db      	ldr	r3, [r3, #12]
 80214fa:	633b      	str	r3, [r7, #48]	; 0x30
            }

            uint32_t bytes_read_to_buffer = 0;
 80214fc:	2300      	movs	r3, #0
 80214fe:	613b      	str	r3, [r7, #16]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8021500:	68fb      	ldr	r3, [r7, #12]
 8021502:	685b      	ldr	r3, [r3, #4]
 8021504:	691c      	ldr	r4, [r3, #16]
 8021506:	68fb      	ldr	r3, [r7, #12]
 8021508:	6858      	ldr	r0, [r3, #4]
 802150a:	68fb      	ldr	r3, [r7, #12]
 802150c:	6819      	ldr	r1, [r3, #0]
 802150e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021510:	f107 0310 	add.w	r3, r7, #16
 8021514:	9300      	str	r3, [sp, #0]
 8021516:	4613      	mov	r3, r2
 8021518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802151a:	47a0      	blx	r4
 802151c:	4603      	mov	r3, r0
 802151e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            file_p->cache->start = file_position;
 8021522:	68fb      	ldr	r3, [r7, #12]
 8021524:	689b      	ldr	r3, [r3, #8]
 8021526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021528:	601a      	str	r2, [r3, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 802152a:	68fb      	ldr	r3, [r7, #12]
 802152c:	689b      	ldr	r3, [r3, #8]
 802152e:	6819      	ldr	r1, [r3, #0]
 8021530:	693a      	ldr	r2, [r7, #16]
 8021532:	68fb      	ldr	r3, [r7, #12]
 8021534:	689b      	ldr	r3, [r3, #8]
 8021536:	440a      	add	r2, r1
 8021538:	605a      	str	r2, [r3, #4]

            *br = LV_MIN(btr, bytes_read_to_buffer);
 802153a:	693a      	ldr	r2, [r7, #16]
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	429a      	cmp	r2, r3
 8021540:	bf28      	it	cs
 8021542:	461a      	movcs	r2, r3
 8021544:	683b      	ldr	r3, [r7, #0]
 8021546:	601a      	str	r2, [r3, #0]
            lv_memcpy(buf, buffer, *br);
 8021548:	683b      	ldr	r3, [r7, #0]
 802154a:	681b      	ldr	r3, [r3, #0]
 802154c:	461a      	mov	r2, r3
 802154e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021550:	68b8      	ldr	r0, [r7, #8]
 8021552:	f000 fd95 	bl	8022080 <lv_memcpy>

        }
    }

    if(res == LV_FS_RES_OK) {
 8021556:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802155a:	2b00      	cmp	r3, #0
 802155c:	d108      	bne.n	8021570 <lv_fs_read_cached+0x210>
        file_p->cache->file_position += *br;
 802155e:	68fb      	ldr	r3, [r7, #12]
 8021560:	689b      	ldr	r3, [r3, #8]
 8021562:	6899      	ldr	r1, [r3, #8]
 8021564:	683b      	ldr	r3, [r7, #0]
 8021566:	681a      	ldr	r2, [r3, #0]
 8021568:	68fb      	ldr	r3, [r7, #12]
 802156a:	689b      	ldr	r3, [r3, #8]
 802156c:	440a      	add	r2, r1
 802156e:	609a      	str	r2, [r3, #8]
    }

    return res;
 8021570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8021574:	4618      	mov	r0, r3
 8021576:	3738      	adds	r7, #56	; 0x38
 8021578:	46bd      	mov	sp, r7
 802157a:	bdb0      	pop	{r4, r5, r7, pc}

0802157c <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 802157c:	b590      	push	{r4, r7, lr}
 802157e:	b089      	sub	sp, #36	; 0x24
 8021580:	af02      	add	r7, sp, #8
 8021582:	60f8      	str	r0, [r7, #12]
 8021584:	60b9      	str	r1, [r7, #8]
 8021586:	607a      	str	r2, [r7, #4]
 8021588:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 802158a:	683b      	ldr	r3, [r7, #0]
 802158c:	2b00      	cmp	r3, #0
 802158e:	d002      	beq.n	8021596 <lv_fs_read+0x1a>
 8021590:	683b      	ldr	r3, [r7, #0]
 8021592:	2200      	movs	r2, #0
 8021594:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8021596:	68fb      	ldr	r3, [r7, #12]
 8021598:	685b      	ldr	r3, [r3, #4]
 802159a:	2b00      	cmp	r3, #0
 802159c:	d101      	bne.n	80215a2 <lv_fs_read+0x26>
 802159e:	230b      	movs	r3, #11
 80215a0:	e02d      	b.n	80215fe <lv_fs_read+0x82>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 80215a2:	68fb      	ldr	r3, [r7, #12]
 80215a4:	685b      	ldr	r3, [r3, #4]
 80215a6:	691b      	ldr	r3, [r3, #16]
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	d101      	bne.n	80215b0 <lv_fs_read+0x34>
 80215ac:	2309      	movs	r3, #9
 80215ae:	e026      	b.n	80215fe <lv_fs_read+0x82>

    uint32_t br_tmp = 0;
 80215b0:	2300      	movs	r3, #0
 80215b2:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 80215b4:	68fb      	ldr	r3, [r7, #12]
 80215b6:	685b      	ldr	r3, [r3, #4]
 80215b8:	885b      	ldrh	r3, [r3, #2]
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d009      	beq.n	80215d2 <lv_fs_read+0x56>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 80215be:	f107 0310 	add.w	r3, r7, #16
 80215c2:	687a      	ldr	r2, [r7, #4]
 80215c4:	68b9      	ldr	r1, [r7, #8]
 80215c6:	68f8      	ldr	r0, [r7, #12]
 80215c8:	f7ff feca 	bl	8021360 <lv_fs_read_cached>
 80215cc:	4603      	mov	r3, r0
 80215ce:	75fb      	strb	r3, [r7, #23]
 80215d0:	e00e      	b.n	80215f0 <lv_fs_read+0x74>
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 80215d2:	68fb      	ldr	r3, [r7, #12]
 80215d4:	685b      	ldr	r3, [r3, #4]
 80215d6:	691c      	ldr	r4, [r3, #16]
 80215d8:	68fb      	ldr	r3, [r7, #12]
 80215da:	6858      	ldr	r0, [r3, #4]
 80215dc:	68fb      	ldr	r3, [r7, #12]
 80215de:	6819      	ldr	r1, [r3, #0]
 80215e0:	f107 0310 	add.w	r3, r7, #16
 80215e4:	9300      	str	r3, [sp, #0]
 80215e6:	687b      	ldr	r3, [r7, #4]
 80215e8:	68ba      	ldr	r2, [r7, #8]
 80215ea:	47a0      	blx	r4
 80215ec:	4603      	mov	r3, r0
 80215ee:	75fb      	strb	r3, [r7, #23]
    }

    if(br != NULL) *br = br_tmp;
 80215f0:	683b      	ldr	r3, [r7, #0]
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d002      	beq.n	80215fc <lv_fs_read+0x80>
 80215f6:	693a      	ldr	r2, [r7, #16]
 80215f8:	683b      	ldr	r3, [r7, #0]
 80215fa:	601a      	str	r2, [r3, #0]

    return res;
 80215fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80215fe:	4618      	mov	r0, r3
 8021600:	371c      	adds	r7, #28
 8021602:	46bd      	mov	sp, r7
 8021604:	bd90      	pop	{r4, r7, pc}

08021606 <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 8021606:	b590      	push	{r4, r7, lr}
 8021608:	b087      	sub	sp, #28
 802160a:	af00      	add	r7, sp, #0
 802160c:	60f8      	str	r0, [r7, #12]
 802160e:	60b9      	str	r1, [r7, #8]
 8021610:	4613      	mov	r3, r2
 8021612:	71fb      	strb	r3, [r7, #7]
    if(file_p->drv == NULL) {
 8021614:	68fb      	ldr	r3, [r7, #12]
 8021616:	685b      	ldr	r3, [r3, #4]
 8021618:	2b00      	cmp	r3, #0
 802161a:	d101      	bne.n	8021620 <lv_fs_seek+0x1a>
        return LV_FS_RES_INV_PARAM;
 802161c:	230b      	movs	r3, #11
 802161e:	e098      	b.n	8021752 <lv_fs_seek+0x14c>
    }

    if(file_p->drv->seek_cb == NULL) {
 8021620:	68fb      	ldr	r3, [r7, #12]
 8021622:	685b      	ldr	r3, [r3, #4]
 8021624:	699b      	ldr	r3, [r3, #24]
 8021626:	2b00      	cmp	r3, #0
 8021628:	d101      	bne.n	802162e <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 802162a:	2309      	movs	r3, #9
 802162c:	e091      	b.n	8021752 <lv_fs_seek+0x14c>
    }

    lv_fs_res_t res = LV_FS_RES_OK;
 802162e:	2300      	movs	r3, #0
 8021630:	75fb      	strb	r3, [r7, #23]
    if(file_p->drv->cache_size) {
 8021632:	68fb      	ldr	r3, [r7, #12]
 8021634:	685b      	ldr	r3, [r3, #4]
 8021636:	885b      	ldrh	r3, [r3, #2]
 8021638:	2b00      	cmp	r3, #0
 802163a:	d077      	beq.n	802172c <lv_fs_seek+0x126>
        switch(whence) {
 802163c:	79fb      	ldrb	r3, [r7, #7]
 802163e:	2b02      	cmp	r3, #2
 8021640:	d051      	beq.n	80216e6 <lv_fs_seek+0xe0>
 8021642:	2b02      	cmp	r3, #2
 8021644:	f300 8084 	bgt.w	8021750 <lv_fs_seek+0x14a>
 8021648:	2b00      	cmp	r3, #0
 802164a:	d002      	beq.n	8021652 <lv_fs_seek+0x4c>
 802164c:	2b01      	cmp	r3, #1
 802164e:	d023      	beq.n	8021698 <lv_fs_seek+0x92>
 8021650:	e07e      	b.n	8021750 <lv_fs_seek+0x14a>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 8021652:	68fb      	ldr	r3, [r7, #12]
 8021654:	689b      	ldr	r3, [r3, #8]
 8021656:	68ba      	ldr	r2, [r7, #8]
 8021658:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 802165a:	68fb      	ldr	r3, [r7, #12]
 802165c:	689b      	ldr	r3, [r3, #8]
 802165e:	689a      	ldr	r2, [r3, #8]
 8021660:	68fb      	ldr	r3, [r7, #12]
 8021662:	689b      	ldr	r3, [r3, #8]
 8021664:	681b      	ldr	r3, [r3, #0]
 8021666:	429a      	cmp	r2, r3
 8021668:	d307      	bcc.n	802167a <lv_fs_seek+0x74>
 802166a:	68fb      	ldr	r3, [r7, #12]
 802166c:	689b      	ldr	r3, [r3, #8]
 802166e:	689a      	ldr	r2, [r3, #8]
 8021670:	68fb      	ldr	r3, [r7, #12]
 8021672:	689b      	ldr	r3, [r3, #8]
 8021674:	685b      	ldr	r3, [r3, #4]
 8021676:	429a      	cmp	r2, r3
 8021678:	d965      	bls.n	8021746 <lv_fs_seek+0x140>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 802167a:	68fb      	ldr	r3, [r7, #12]
 802167c:	685b      	ldr	r3, [r3, #4]
 802167e:	699c      	ldr	r4, [r3, #24]
 8021680:	68fb      	ldr	r3, [r7, #12]
 8021682:	6858      	ldr	r0, [r3, #4]
 8021684:	68fb      	ldr	r3, [r7, #12]
 8021686:	6819      	ldr	r1, [r3, #0]
 8021688:	68fb      	ldr	r3, [r7, #12]
 802168a:	689b      	ldr	r3, [r3, #8]
 802168c:	689a      	ldr	r2, [r3, #8]
 802168e:	2300      	movs	r3, #0
 8021690:	47a0      	blx	r4
 8021692:	4603      	mov	r3, r0
 8021694:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 8021696:	e056      	b.n	8021746 <lv_fs_seek+0x140>
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 8021698:	68fb      	ldr	r3, [r7, #12]
 802169a:	689b      	ldr	r3, [r3, #8]
 802169c:	6899      	ldr	r1, [r3, #8]
 802169e:	68fb      	ldr	r3, [r7, #12]
 80216a0:	689b      	ldr	r3, [r3, #8]
 80216a2:	68ba      	ldr	r2, [r7, #8]
 80216a4:	440a      	add	r2, r1
 80216a6:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 80216a8:	68fb      	ldr	r3, [r7, #12]
 80216aa:	689b      	ldr	r3, [r3, #8]
 80216ac:	689a      	ldr	r2, [r3, #8]
 80216ae:	68fb      	ldr	r3, [r7, #12]
 80216b0:	689b      	ldr	r3, [r3, #8]
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	429a      	cmp	r2, r3
 80216b6:	d307      	bcc.n	80216c8 <lv_fs_seek+0xc2>
 80216b8:	68fb      	ldr	r3, [r7, #12]
 80216ba:	689b      	ldr	r3, [r3, #8]
 80216bc:	689a      	ldr	r2, [r3, #8]
 80216be:	68fb      	ldr	r3, [r7, #12]
 80216c0:	689b      	ldr	r3, [r3, #8]
 80216c2:	685b      	ldr	r3, [r3, #4]
 80216c4:	429a      	cmp	r2, r3
 80216c6:	d940      	bls.n	802174a <lv_fs_seek+0x144>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 80216c8:	68fb      	ldr	r3, [r7, #12]
 80216ca:	685b      	ldr	r3, [r3, #4]
 80216cc:	699c      	ldr	r4, [r3, #24]
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	6858      	ldr	r0, [r3, #4]
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	6819      	ldr	r1, [r3, #0]
 80216d6:	68fb      	ldr	r3, [r7, #12]
 80216d8:	689b      	ldr	r3, [r3, #8]
 80216da:	689a      	ldr	r2, [r3, #8]
 80216dc:	2300      	movs	r3, #0
 80216de:	47a0      	blx	r4
 80216e0:	4603      	mov	r3, r0
 80216e2:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 80216e4:	e031      	b.n	802174a <lv_fs_seek+0x144>
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80216e6:	68fb      	ldr	r3, [r7, #12]
 80216e8:	685b      	ldr	r3, [r3, #4]
 80216ea:	699c      	ldr	r4, [r3, #24]
 80216ec:	68fb      	ldr	r3, [r7, #12]
 80216ee:	6858      	ldr	r0, [r3, #4]
 80216f0:	68fb      	ldr	r3, [r7, #12]
 80216f2:	6819      	ldr	r1, [r3, #0]
 80216f4:	79fb      	ldrb	r3, [r7, #7]
 80216f6:	68ba      	ldr	r2, [r7, #8]
 80216f8:	47a0      	blx	r4
 80216fa:	4603      	mov	r3, r0
 80216fc:	75fb      	strb	r3, [r7, #23]
                    if(res == LV_FS_RES_OK) {
 80216fe:	7dfb      	ldrb	r3, [r7, #23]
 8021700:	2b00      	cmp	r3, #0
 8021702:	d124      	bne.n	802174e <lv_fs_seek+0x148>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8021704:	68fb      	ldr	r3, [r7, #12]
 8021706:	685b      	ldr	r3, [r3, #4]
 8021708:	69db      	ldr	r3, [r3, #28]
 802170a:	68fa      	ldr	r2, [r7, #12]
 802170c:	6850      	ldr	r0, [r2, #4]
 802170e:	68fa      	ldr	r2, [r7, #12]
 8021710:	6811      	ldr	r1, [r2, #0]
 8021712:	f107 0210 	add.w	r2, r7, #16
 8021716:	4798      	blx	r3
 8021718:	4603      	mov	r3, r0
 802171a:	75fb      	strb	r3, [r7, #23]

                        if(res == LV_FS_RES_OK) {
 802171c:	7dfb      	ldrb	r3, [r7, #23]
 802171e:	2b00      	cmp	r3, #0
 8021720:	d115      	bne.n	802174e <lv_fs_seek+0x148>
                            file_p->cache->file_position = tmp_position;
 8021722:	68fb      	ldr	r3, [r7, #12]
 8021724:	689b      	ldr	r3, [r3, #8]
 8021726:	693a      	ldr	r2, [r7, #16]
 8021728:	609a      	str	r2, [r3, #8]
                        }
                    }
                    break;
 802172a:	e010      	b.n	802174e <lv_fs_seek+0x148>
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 802172c:	68fb      	ldr	r3, [r7, #12]
 802172e:	685b      	ldr	r3, [r3, #4]
 8021730:	699c      	ldr	r4, [r3, #24]
 8021732:	68fb      	ldr	r3, [r7, #12]
 8021734:	6858      	ldr	r0, [r3, #4]
 8021736:	68fb      	ldr	r3, [r7, #12]
 8021738:	6819      	ldr	r1, [r3, #0]
 802173a:	79fb      	ldrb	r3, [r7, #7]
 802173c:	68ba      	ldr	r2, [r7, #8]
 802173e:	47a0      	blx	r4
 8021740:	4603      	mov	r3, r0
 8021742:	75fb      	strb	r3, [r7, #23]
 8021744:	e004      	b.n	8021750 <lv_fs_seek+0x14a>
                    break;
 8021746:	bf00      	nop
 8021748:	e002      	b.n	8021750 <lv_fs_seek+0x14a>
                    break;
 802174a:	bf00      	nop
 802174c:	e000      	b.n	8021750 <lv_fs_seek+0x14a>
                    break;
 802174e:	bf00      	nop
    }

    return res;
 8021750:	7dfb      	ldrb	r3, [r7, #23]
}
 8021752:	4618      	mov	r0, r3
 8021754:	371c      	adds	r7, #28
 8021756:	46bd      	mov	sp, r7
 8021758:	bd90      	pop	{r4, r7, pc}
	...

0802175c <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 802175c:	b580      	push	{r7, lr}
 802175e:	b084      	sub	sp, #16
 8021760:	af00      	add	r7, sp, #0
 8021762:	4603      	mov	r3, r0
 8021764:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8021766:	480d      	ldr	r0, [pc, #52]	; (802179c <lv_fs_get_drv+0x40>)
 8021768:	f000 f93d 	bl	80219e6 <_lv_ll_get_head>
 802176c:	60f8      	str	r0, [r7, #12]
 802176e:	e00d      	b.n	802178c <lv_fs_get_drv+0x30>
        if((*drv)->letter == letter) {
 8021770:	68fb      	ldr	r3, [r7, #12]
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	781b      	ldrb	r3, [r3, #0]
 8021776:	79fa      	ldrb	r2, [r7, #7]
 8021778:	429a      	cmp	r2, r3
 802177a:	d102      	bne.n	8021782 <lv_fs_get_drv+0x26>
            return *drv;
 802177c:	68fb      	ldr	r3, [r7, #12]
 802177e:	681b      	ldr	r3, [r3, #0]
 8021780:	e008      	b.n	8021794 <lv_fs_get_drv+0x38>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8021782:	68f9      	ldr	r1, [r7, #12]
 8021784:	4805      	ldr	r0, [pc, #20]	; (802179c <lv_fs_get_drv+0x40>)
 8021786:	f000 f950 	bl	8021a2a <_lv_ll_get_next>
 802178a:	60f8      	str	r0, [r7, #12]
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	2b00      	cmp	r3, #0
 8021790:	d1ee      	bne.n	8021770 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 8021792:	2300      	movs	r3, #0
}
 8021794:	4618      	mov	r0, r3
 8021796:	3710      	adds	r7, #16
 8021798:	46bd      	mov	sp, r7
 802179a:	bd80      	pop	{r7, pc}
 802179c:	20000880 	.word	0x20000880

080217a0 <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 80217a0:	b580      	push	{r7, lr}
 80217a2:	b084      	sub	sp, #16
 80217a4:	af00      	add	r7, sp, #0
 80217a6:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 80217a8:	6878      	ldr	r0, [r7, #4]
 80217aa:	f7de fd4f 	bl	800024c <strlen>
 80217ae:	60f8      	str	r0, [r7, #12]
 80217b0:	e01b      	b.n	80217ea <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 80217b2:	687a      	ldr	r2, [r7, #4]
 80217b4:	68fb      	ldr	r3, [r7, #12]
 80217b6:	4413      	add	r3, r2
 80217b8:	781b      	ldrb	r3, [r3, #0]
 80217ba:	2b2e      	cmp	r3, #46	; 0x2e
 80217bc:	d104      	bne.n	80217c8 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 80217be:	68fb      	ldr	r3, [r7, #12]
 80217c0:	3301      	adds	r3, #1
 80217c2:	687a      	ldr	r2, [r7, #4]
 80217c4:	4413      	add	r3, r2
 80217c6:	e014      	b.n	80217f2 <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 80217c8:	687a      	ldr	r2, [r7, #4]
 80217ca:	68fb      	ldr	r3, [r7, #12]
 80217cc:	4413      	add	r3, r2
 80217ce:	781b      	ldrb	r3, [r3, #0]
 80217d0:	2b2f      	cmp	r3, #47	; 0x2f
 80217d2:	d005      	beq.n	80217e0 <lv_fs_get_ext+0x40>
 80217d4:	687a      	ldr	r2, [r7, #4]
 80217d6:	68fb      	ldr	r3, [r7, #12]
 80217d8:	4413      	add	r3, r2
 80217da:	781b      	ldrb	r3, [r3, #0]
 80217dc:	2b5c      	cmp	r3, #92	; 0x5c
 80217de:	d101      	bne.n	80217e4 <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 80217e0:	4b06      	ldr	r3, [pc, #24]	; (80217fc <lv_fs_get_ext+0x5c>)
 80217e2:	e006      	b.n	80217f2 <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 80217e4:	68fb      	ldr	r3, [r7, #12]
 80217e6:	3b01      	subs	r3, #1
 80217e8:	60fb      	str	r3, [r7, #12]
 80217ea:	68fb      	ldr	r3, [r7, #12]
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d1e0      	bne.n	80217b2 <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
 80217f0:	4b02      	ldr	r3, [pc, #8]	; (80217fc <lv_fs_get_ext+0x5c>)
}
 80217f2:	4618      	mov	r0, r3
 80217f4:	3710      	adds	r7, #16
 80217f6:	46bd      	mov	sp, r7
 80217f8:	bd80      	pop	{r7, pc}
 80217fa:	bf00      	nop
 80217fc:	08026798 	.word	0x08026798

08021800 <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 8021800:	b480      	push	{r7}
 8021802:	b083      	sub	sp, #12
 8021804:	af00      	add	r7, sp, #0
 8021806:	6078      	str	r0, [r7, #4]
    path++; /*Ignore the driver letter*/
 8021808:	687b      	ldr	r3, [r7, #4]
 802180a:	3301      	adds	r3, #1
 802180c:	607b      	str	r3, [r7, #4]
    if(*path == ':') path++;
 802180e:	687b      	ldr	r3, [r7, #4]
 8021810:	781b      	ldrb	r3, [r3, #0]
 8021812:	2b3a      	cmp	r3, #58	; 0x3a
 8021814:	d102      	bne.n	802181c <lv_fs_get_real_path+0x1c>
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	3301      	adds	r3, #1
 802181a:	607b      	str	r3, [r7, #4]

    return path;
 802181c:	687b      	ldr	r3, [r7, #4]
}
 802181e:	4618      	mov	r0, r3
 8021820:	370c      	adds	r7, #12
 8021822:	46bd      	mov	sp, r7
 8021824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021828:	4770      	bx	lr

0802182a <_lv_ll_init>:
 * Initialize linked list
 * @param ll_p pointer to lv_ll_t variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 802182a:	b480      	push	{r7}
 802182c:	b083      	sub	sp, #12
 802182e:	af00      	add	r7, sp, #0
 8021830:	6078      	str	r0, [r7, #4]
 8021832:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 8021834:	687b      	ldr	r3, [r7, #4]
 8021836:	2200      	movs	r2, #0
 8021838:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 802183a:	687b      	ldr	r3, [r7, #4]
 802183c:	2200      	movs	r2, #0
 802183e:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 8021840:	683b      	ldr	r3, [r7, #0]
 8021842:	3303      	adds	r3, #3
 8021844:	f023 0303 	bic.w	r3, r3, #3
 8021848:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 802184a:	687b      	ldr	r3, [r7, #4]
 802184c:	683a      	ldr	r2, [r7, #0]
 802184e:	601a      	str	r2, [r3, #0]
}
 8021850:	bf00      	nop
 8021852:	370c      	adds	r7, #12
 8021854:	46bd      	mov	sp, r7
 8021856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802185a:	4770      	bx	lr

0802185c <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 802185c:	b580      	push	{r7, lr}
 802185e:	b084      	sub	sp, #16
 8021860:	af00      	add	r7, sp, #0
 8021862:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8021864:	687b      	ldr	r3, [r7, #4]
 8021866:	681b      	ldr	r3, [r3, #0]
 8021868:	3308      	adds	r3, #8
 802186a:	4618      	mov	r0, r3
 802186c:	f000 fa7a 	bl	8021d64 <lv_mem_alloc>
 8021870:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8021872:	68fb      	ldr	r3, [r7, #12]
 8021874:	2b00      	cmp	r3, #0
 8021876:	d020      	beq.n	80218ba <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8021878:	2200      	movs	r2, #0
 802187a:	68f9      	ldr	r1, [r7, #12]
 802187c:	6878      	ldr	r0, [r7, #4]
 802187e:	f000 f917 	bl	8021ab0 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8021882:	687b      	ldr	r3, [r7, #4]
 8021884:	685b      	ldr	r3, [r3, #4]
 8021886:	461a      	mov	r2, r3
 8021888:	68f9      	ldr	r1, [r7, #12]
 802188a:	6878      	ldr	r0, [r7, #4]
 802188c:	f000 f92f 	bl	8021aee <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	685b      	ldr	r3, [r3, #4]
 8021894:	2b00      	cmp	r3, #0
 8021896:	d006      	beq.n	80218a6 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8021898:	687b      	ldr	r3, [r7, #4]
 802189a:	685b      	ldr	r3, [r3, #4]
 802189c:	68fa      	ldr	r2, [r7, #12]
 802189e:	4619      	mov	r1, r3
 80218a0:	6878      	ldr	r0, [r7, #4]
 80218a2:	f000 f905 	bl	8021ab0 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	68fa      	ldr	r2, [r7, #12]
 80218aa:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80218ac:	687b      	ldr	r3, [r7, #4]
 80218ae:	689b      	ldr	r3, [r3, #8]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d102      	bne.n	80218ba <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	68fa      	ldr	r2, [r7, #12]
 80218b8:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 80218ba:	68fb      	ldr	r3, [r7, #12]
}
 80218bc:	4618      	mov	r0, r3
 80218be:	3710      	adds	r7, #16
 80218c0:	46bd      	mov	sp, r7
 80218c2:	bd80      	pop	{r7, pc}

080218c4 <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 80218c4:	b580      	push	{r7, lr}
 80218c6:	b084      	sub	sp, #16
 80218c8:	af00      	add	r7, sp, #0
 80218ca:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	681b      	ldr	r3, [r3, #0]
 80218d0:	3308      	adds	r3, #8
 80218d2:	4618      	mov	r0, r3
 80218d4:	f000 fa46 	bl	8021d64 <lv_mem_alloc>
 80218d8:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 80218da:	68fb      	ldr	r3, [r7, #12]
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d020      	beq.n	8021922 <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 80218e0:	2200      	movs	r2, #0
 80218e2:	68f9      	ldr	r1, [r7, #12]
 80218e4:	6878      	ldr	r0, [r7, #4]
 80218e6:	f000 f902 	bl	8021aee <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 80218ea:	687b      	ldr	r3, [r7, #4]
 80218ec:	689b      	ldr	r3, [r3, #8]
 80218ee:	461a      	mov	r2, r3
 80218f0:	68f9      	ldr	r1, [r7, #12]
 80218f2:	6878      	ldr	r0, [r7, #4]
 80218f4:	f000 f8dc 	bl	8021ab0 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	689b      	ldr	r3, [r3, #8]
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d006      	beq.n	802190e <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 8021900:	687b      	ldr	r3, [r7, #4]
 8021902:	689b      	ldr	r3, [r3, #8]
 8021904:	68fa      	ldr	r2, [r7, #12]
 8021906:	4619      	mov	r1, r3
 8021908:	6878      	ldr	r0, [r7, #4]
 802190a:	f000 f8f0 	bl	8021aee <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 802190e:	687b      	ldr	r3, [r7, #4]
 8021910:	68fa      	ldr	r2, [r7, #12]
 8021912:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8021914:	687b      	ldr	r3, [r7, #4]
 8021916:	685b      	ldr	r3, [r3, #4]
 8021918:	2b00      	cmp	r3, #0
 802191a:	d102      	bne.n	8021922 <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	68fa      	ldr	r2, [r7, #12]
 8021920:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 8021922:	68fb      	ldr	r3, [r7, #12]
}
 8021924:	4618      	mov	r0, r3
 8021926:	3710      	adds	r7, #16
 8021928:	46bd      	mov	sp, r7
 802192a:	bd80      	pop	{r7, pc}

0802192c <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 802192c:	b580      	push	{r7, lr}
 802192e:	b084      	sub	sp, #16
 8021930:	af00      	add	r7, sp, #0
 8021932:	6078      	str	r0, [r7, #4]
 8021934:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return;
 8021936:	687b      	ldr	r3, [r7, #4]
 8021938:	2b00      	cmp	r3, #0
 802193a:	d050      	beq.n	80219de <_lv_ll_remove+0xb2>

    if(_lv_ll_get_head(ll_p) == node_p) {
 802193c:	6878      	ldr	r0, [r7, #4]
 802193e:	f000 f852 	bl	80219e6 <_lv_ll_get_head>
 8021942:	4602      	mov	r2, r0
 8021944:	683b      	ldr	r3, [r7, #0]
 8021946:	4293      	cmp	r3, r2
 8021948:	d116      	bne.n	8021978 <_lv_ll_remove+0x4c>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 802194a:	6839      	ldr	r1, [r7, #0]
 802194c:	6878      	ldr	r0, [r7, #4]
 802194e:	f000 f86c 	bl	8021a2a <_lv_ll_get_next>
 8021952:	4602      	mov	r2, r0
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 8021958:	687b      	ldr	r3, [r7, #4]
 802195a:	685b      	ldr	r3, [r3, #4]
 802195c:	2b00      	cmp	r3, #0
 802195e:	d103      	bne.n	8021968 <_lv_ll_remove+0x3c>
            ll_p->tail = NULL;
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	2200      	movs	r2, #0
 8021964:	609a      	str	r2, [r3, #8]
 8021966:	e03b      	b.n	80219e0 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_prev(ll_p, ll_p->head, NULL);
 8021968:	687b      	ldr	r3, [r7, #4]
 802196a:	685b      	ldr	r3, [r3, #4]
 802196c:	2200      	movs	r2, #0
 802196e:	4619      	mov	r1, r3
 8021970:	6878      	ldr	r0, [r7, #4]
 8021972:	f000 f89d 	bl	8021ab0 <node_set_prev>
 8021976:	e033      	b.n	80219e0 <_lv_ll_remove+0xb4>
        }
    }
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8021978:	6878      	ldr	r0, [r7, #4]
 802197a:	f000 f845 	bl	8021a08 <_lv_ll_get_tail>
 802197e:	4602      	mov	r2, r0
 8021980:	683b      	ldr	r3, [r7, #0]
 8021982:	4293      	cmp	r3, r2
 8021984:	d116      	bne.n	80219b4 <_lv_ll_remove+0x88>
        /*The new tail will be the node before 'n_act'*/
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8021986:	6839      	ldr	r1, [r7, #0]
 8021988:	6878      	ldr	r0, [r7, #4]
 802198a:	f000 f863 	bl	8021a54 <_lv_ll_get_prev>
 802198e:	4602      	mov	r2, r0
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	689b      	ldr	r3, [r3, #8]
 8021998:	2b00      	cmp	r3, #0
 802199a:	d103      	bne.n	80219a4 <_lv_ll_remove+0x78>
            ll_p->head = NULL;
 802199c:	687b      	ldr	r3, [r7, #4]
 802199e:	2200      	movs	r2, #0
 80219a0:	605a      	str	r2, [r3, #4]
 80219a2:	e01d      	b.n	80219e0 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_next(ll_p, ll_p->tail, NULL);
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	689b      	ldr	r3, [r3, #8]
 80219a8:	2200      	movs	r2, #0
 80219aa:	4619      	mov	r1, r3
 80219ac:	6878      	ldr	r0, [r7, #4]
 80219ae:	f000 f89e 	bl	8021aee <node_set_next>
 80219b2:	e015      	b.n	80219e0 <_lv_ll_remove+0xb4>
        }
    }
    else {
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 80219b4:	6839      	ldr	r1, [r7, #0]
 80219b6:	6878      	ldr	r0, [r7, #4]
 80219b8:	f000 f84c 	bl	8021a54 <_lv_ll_get_prev>
 80219bc:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 80219be:	6839      	ldr	r1, [r7, #0]
 80219c0:	6878      	ldr	r0, [r7, #4]
 80219c2:	f000 f832 	bl	8021a2a <_lv_ll_get_next>
 80219c6:	60b8      	str	r0, [r7, #8]

        node_set_next(ll_p, n_prev, n_next);
 80219c8:	68ba      	ldr	r2, [r7, #8]
 80219ca:	68f9      	ldr	r1, [r7, #12]
 80219cc:	6878      	ldr	r0, [r7, #4]
 80219ce:	f000 f88e 	bl	8021aee <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 80219d2:	68fa      	ldr	r2, [r7, #12]
 80219d4:	68b9      	ldr	r1, [r7, #8]
 80219d6:	6878      	ldr	r0, [r7, #4]
 80219d8:	f000 f86a 	bl	8021ab0 <node_set_prev>
 80219dc:	e000      	b.n	80219e0 <_lv_ll_remove+0xb4>
    if(ll_p == NULL) return;
 80219de:	bf00      	nop
    }
}
 80219e0:	3710      	adds	r7, #16
 80219e2:	46bd      	mov	sp, r7
 80219e4:	bd80      	pop	{r7, pc}

080219e6 <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 80219e6:	b480      	push	{r7}
 80219e8:	b083      	sub	sp, #12
 80219ea:	af00      	add	r7, sp, #0
 80219ec:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 80219ee:	687b      	ldr	r3, [r7, #4]
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d101      	bne.n	80219f8 <_lv_ll_get_head+0x12>
 80219f4:	2300      	movs	r3, #0
 80219f6:	e001      	b.n	80219fc <_lv_ll_get_head+0x16>
    return ll_p->head;
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	685b      	ldr	r3, [r3, #4]
}
 80219fc:	4618      	mov	r0, r3
 80219fe:	370c      	adds	r7, #12
 8021a00:	46bd      	mov	sp, r7
 8021a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a06:	4770      	bx	lr

08021a08 <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the tail of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 8021a08:	b480      	push	{r7}
 8021a0a:	b083      	sub	sp, #12
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	2b00      	cmp	r3, #0
 8021a14:	d101      	bne.n	8021a1a <_lv_ll_get_tail+0x12>
 8021a16:	2300      	movs	r3, #0
 8021a18:	e001      	b.n	8021a1e <_lv_ll_get_tail+0x16>
    return ll_p->tail;
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	689b      	ldr	r3, [r3, #8]
}
 8021a1e:	4618      	mov	r0, r3
 8021a20:	370c      	adds	r7, #12
 8021a22:	46bd      	mov	sp, r7
 8021a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a28:	4770      	bx	lr

08021a2a <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 8021a2a:	b480      	push	{r7}
 8021a2c:	b085      	sub	sp, #20
 8021a2e:	af00      	add	r7, sp, #0
 8021a30:	6078      	str	r0, [r7, #4]
 8021a32:	6039      	str	r1, [r7, #0]
    /*Pointer to the next node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 8021a34:	683b      	ldr	r3, [r7, #0]
 8021a36:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	681b      	ldr	r3, [r3, #0]
 8021a3c:	3304      	adds	r3, #4
 8021a3e:	68fa      	ldr	r2, [r7, #12]
 8021a40:	4413      	add	r3, r2
 8021a42:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8021a44:	68fb      	ldr	r3, [r7, #12]
 8021a46:	681b      	ldr	r3, [r3, #0]
}
 8021a48:	4618      	mov	r0, r3
 8021a4a:	3714      	adds	r7, #20
 8021a4c:	46bd      	mov	sp, r7
 8021a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a52:	4770      	bx	lr

08021a54 <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 8021a54:	b480      	push	{r7}
 8021a56:	b085      	sub	sp, #20
 8021a58:	af00      	add	r7, sp, #0
 8021a5a:	6078      	str	r0, [r7, #4]
 8021a5c:	6039      	str	r1, [r7, #0]
    /*Pointer to the prev. node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 8021a5e:	683b      	ldr	r3, [r7, #0]
 8021a60:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	68fa      	ldr	r2, [r7, #12]
 8021a68:	4413      	add	r3, r2
 8021a6a:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8021a6c:	68fb      	ldr	r3, [r7, #12]
 8021a6e:	681b      	ldr	r3, [r3, #0]
}
 8021a70:	4618      	mov	r0, r3
 8021a72:	3714      	adds	r7, #20
 8021a74:	46bd      	mov	sp, r7
 8021a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a7a:	4770      	bx	lr

08021a7c <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 8021a7c:	b480      	push	{r7}
 8021a7e:	b083      	sub	sp, #12
 8021a80:	af00      	add	r7, sp, #0
 8021a82:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 8021a84:	687b      	ldr	r3, [r7, #4]
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	d101      	bne.n	8021a8e <_lv_ll_is_empty+0x12>
 8021a8a:	2301      	movs	r3, #1
 8021a8c:	e00a      	b.n	8021aa4 <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	685b      	ldr	r3, [r3, #4]
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d105      	bne.n	8021aa2 <_lv_ll_is_empty+0x26>
 8021a96:	687b      	ldr	r3, [r7, #4]
 8021a98:	689b      	ldr	r3, [r3, #8]
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d101      	bne.n	8021aa2 <_lv_ll_is_empty+0x26>
 8021a9e:	2301      	movs	r3, #1
 8021aa0:	e000      	b.n	8021aa4 <_lv_ll_is_empty+0x28>

    return false;
 8021aa2:	2300      	movs	r3, #0
}
 8021aa4:	4618      	mov	r0, r3
 8021aa6:	370c      	adds	r7, #12
 8021aa8:	46bd      	mov	sp, r7
 8021aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021aae:	4770      	bx	lr

08021ab0 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 8021ab0:	b480      	push	{r7}
 8021ab2:	b089      	sub	sp, #36	; 0x24
 8021ab4:	af00      	add	r7, sp, #0
 8021ab6:	60f8      	str	r0, [r7, #12]
 8021ab8:	60b9      	str	r1, [r7, #8]
 8021aba:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8021abc:	68bb      	ldr	r3, [r7, #8]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d00f      	beq.n	8021ae2 <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *)act;
 8021ac2:	68bb      	ldr	r3, [r7, #8]
 8021ac4:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 8021ac6:	68fb      	ldr	r3, [r7, #12]
 8021ac8:	681b      	ldr	r3, [r3, #0]
 8021aca:	69fa      	ldr	r2, [r7, #28]
 8021acc:	4413      	add	r3, r2
 8021ace:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 8021ad0:	69fb      	ldr	r3, [r7, #28]
 8021ad2:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 8021ad4:	1d3b      	adds	r3, r7, #4
 8021ad6:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 8021ad8:	697b      	ldr	r3, [r7, #20]
 8021ada:	681a      	ldr	r2, [r3, #0]
 8021adc:	69bb      	ldr	r3, [r7, #24]
 8021ade:	601a      	str	r2, [r3, #0]
 8021ae0:	e000      	b.n	8021ae4 <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8021ae2:	bf00      	nop
}
 8021ae4:	3724      	adds	r7, #36	; 0x24
 8021ae6:	46bd      	mov	sp, r7
 8021ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021aec:	4770      	bx	lr

08021aee <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 8021aee:	b480      	push	{r7}
 8021af0:	b089      	sub	sp, #36	; 0x24
 8021af2:	af00      	add	r7, sp, #0
 8021af4:	60f8      	str	r0, [r7, #12]
 8021af6:	60b9      	str	r1, [r7, #8]
 8021af8:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8021afa:	68bb      	ldr	r3, [r7, #8]
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d010      	beq.n	8021b22 <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *)act;
 8021b00:	68bb      	ldr	r3, [r7, #8]
 8021b02:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 8021b04:	68fb      	ldr	r3, [r7, #12]
 8021b06:	681b      	ldr	r3, [r3, #0]
 8021b08:	3304      	adds	r3, #4
 8021b0a:	69fa      	ldr	r2, [r7, #28]
 8021b0c:	4413      	add	r3, r2
 8021b0e:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 8021b10:	69fb      	ldr	r3, [r7, #28]
 8021b12:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 8021b14:	1d3b      	adds	r3, r7, #4
 8021b16:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 8021b18:	697b      	ldr	r3, [r7, #20]
 8021b1a:	681a      	ldr	r2, [r3, #0]
 8021b1c:	69bb      	ldr	r3, [r7, #24]
 8021b1e:	601a      	str	r2, [r3, #0]
 8021b20:	e000      	b.n	8021b24 <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8021b22:	bf00      	nop
}
 8021b24:	3724      	adds	r7, #36	; 0x24
 8021b26:	46bd      	mov	sp, r7
 8021b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b2c:	4770      	bx	lr
	...

08021b30 <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
 8021b30:	b480      	push	{r7}
 8021b32:	b085      	sub	sp, #20
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	4603      	mov	r3, r0
 8021b38:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 8021b3a:	2300      	movs	r3, #0
 8021b3c:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 8021b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b42:	4a31      	ldr	r2, [pc, #196]	; (8021c08 <lv_trigo_sin+0xd8>)
 8021b44:	fb82 1203 	smull	r1, r2, r2, r3
 8021b48:	441a      	add	r2, r3
 8021b4a:	1211      	asrs	r1, r2, #8
 8021b4c:	17da      	asrs	r2, r3, #31
 8021b4e:	1a8a      	subs	r2, r1, r2
 8021b50:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8021b54:	fb01 f202 	mul.w	r2, r1, r2
 8021b58:	1a9b      	subs	r3, r3, r2
 8021b5a:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 8021b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b60:	2b00      	cmp	r3, #0
 8021b62:	da04      	bge.n	8021b6e <lv_trigo_sin+0x3e>
 8021b64:	88fb      	ldrh	r3, [r7, #6]
 8021b66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8021b6a:	b29b      	uxth	r3, r3
 8021b6c:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 8021b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b72:	2b59      	cmp	r3, #89	; 0x59
 8021b74:	dc06      	bgt.n	8021b84 <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 8021b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b7a:	4a24      	ldr	r2, [pc, #144]	; (8021c0c <lv_trigo_sin+0xdc>)
 8021b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021b80:	81fb      	strh	r3, [r7, #14]
 8021b82:	e038      	b.n	8021bf6 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 8021b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b88:	2b59      	cmp	r3, #89	; 0x59
 8021b8a:	dd0f      	ble.n	8021bac <lv_trigo_sin+0x7c>
 8021b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b90:	2bb3      	cmp	r3, #179	; 0xb3
 8021b92:	dc0b      	bgt.n	8021bac <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 8021b94:	88fb      	ldrh	r3, [r7, #6]
 8021b96:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8021b9a:	b29b      	uxth	r3, r3
 8021b9c:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 8021b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021ba2:	4a1a      	ldr	r2, [pc, #104]	; (8021c0c <lv_trigo_sin+0xdc>)
 8021ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021ba8:	81fb      	strh	r3, [r7, #14]
 8021baa:	e024      	b.n	8021bf6 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 8021bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021bb0:	2bb3      	cmp	r3, #179	; 0xb3
 8021bb2:	dd12      	ble.n	8021bda <lv_trigo_sin+0xaa>
 8021bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021bb8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8021bbc:	da0d      	bge.n	8021bda <lv_trigo_sin+0xaa>
        angle = angle - 180;
 8021bbe:	88fb      	ldrh	r3, [r7, #6]
 8021bc0:	3bb4      	subs	r3, #180	; 0xb4
 8021bc2:	b29b      	uxth	r3, r3
 8021bc4:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8021bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021bca:	4a10      	ldr	r2, [pc, #64]	; (8021c0c <lv_trigo_sin+0xdc>)
 8021bcc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8021bd0:	b29b      	uxth	r3, r3
 8021bd2:	425b      	negs	r3, r3
 8021bd4:	b29b      	uxth	r3, r3
 8021bd6:	81fb      	strh	r3, [r7, #14]
 8021bd8:	e00d      	b.n	8021bf6 <lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8021bda:	88fb      	ldrh	r3, [r7, #6]
 8021bdc:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8021be0:	b29b      	uxth	r3, r3
 8021be2:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8021be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021be8:	4a08      	ldr	r2, [pc, #32]	; (8021c0c <lv_trigo_sin+0xdc>)
 8021bea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8021bee:	b29b      	uxth	r3, r3
 8021bf0:	425b      	negs	r3, r3
 8021bf2:	b29b      	uxth	r3, r3
 8021bf4:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8021bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8021bfa:	4618      	mov	r0, r3
 8021bfc:	3714      	adds	r7, #20
 8021bfe:	46bd      	mov	sp, r7
 8021c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c04:	4770      	bx	lr
 8021c06:	bf00      	nop
 8021c08:	b60b60b7 	.word	0xb60b60b7
 8021c0c:	0802de94 	.word	0x0802de94

08021c10 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8021c10:	b480      	push	{r7}
 8021c12:	b08f      	sub	sp, #60	; 0x3c
 8021c14:	af00      	add	r7, sp, #0
 8021c16:	60f8      	str	r0, [r7, #12]
 8021c18:	60b9      	str	r1, [r7, #8]
 8021c1a:	607a      	str	r2, [r7, #4]
 8021c1c:	603b      	str	r3, [r7, #0]
    uint32_t t_rem  = 1024 - t;
 8021c1e:	68fb      	ldr	r3, [r7, #12]
 8021c20:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8021c24:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8021c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021c28:	fb03 f303 	mul.w	r3, r3, r3
 8021c2c:	0a9b      	lsrs	r3, r3, #10
 8021c2e:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8021c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021c34:	fb02 f303 	mul.w	r3, r2, r3
 8021c38:	0a9b      	lsrs	r3, r3, #10
 8021c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t t2     = (t * t) >> 10;
 8021c3c:	68fb      	ldr	r3, [r7, #12]
 8021c3e:	fb03 f303 	mul.w	r3, r3, r3
 8021c42:	0a9b      	lsrs	r3, r3, #10
 8021c44:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t t3     = (t2 * t) >> 10;
 8021c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c48:	68fa      	ldr	r2, [r7, #12]
 8021c4a:	fb02 f303 	mul.w	r3, r2, r3
 8021c4e:	0a9b      	lsrs	r3, r3, #10
 8021c50:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t v1 = (t_rem3 * u0) >> 10;
 8021c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c54:	68ba      	ldr	r2, [r7, #8]
 8021c56:	fb02 f303 	mul.w	r3, r2, r3
 8021c5a:	0a9b      	lsrs	r3, r3, #10
 8021c5c:	623b      	str	r3, [r7, #32]
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8021c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c60:	68fa      	ldr	r2, [r7, #12]
 8021c62:	fb02 f303 	mul.w	r3, r2, r3
 8021c66:	687a      	ldr	r2, [r7, #4]
 8021c68:	fb03 f202 	mul.w	r2, r3, r2
 8021c6c:	4613      	mov	r3, r2
 8021c6e:	005b      	lsls	r3, r3, #1
 8021c70:	4413      	add	r3, r2
 8021c72:	0d1b      	lsrs	r3, r3, #20
 8021c74:	61fb      	str	r3, [r7, #28]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8021c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021c7a:	fb02 f303 	mul.w	r3, r2, r3
 8021c7e:	683a      	ldr	r2, [r7, #0]
 8021c80:	fb03 f202 	mul.w	r2, r3, r2
 8021c84:	4613      	mov	r3, r2
 8021c86:	005b      	lsls	r3, r3, #1
 8021c88:	4413      	add	r3, r2
 8021c8a:	0d1b      	lsrs	r3, r3, #20
 8021c8c:	61bb      	str	r3, [r7, #24]
    uint32_t v4 = (t3 * u3) >> 10;
 8021c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021c92:	fb02 f303 	mul.w	r3, r2, r3
 8021c96:	0a9b      	lsrs	r3, r3, #10
 8021c98:	617b      	str	r3, [r7, #20]

    return v1 + v2 + v3 + v4;
 8021c9a:	6a3a      	ldr	r2, [r7, #32]
 8021c9c:	69fb      	ldr	r3, [r7, #28]
 8021c9e:	441a      	add	r2, r3
 8021ca0:	69bb      	ldr	r3, [r7, #24]
 8021ca2:	441a      	add	r2, r3
 8021ca4:	697b      	ldr	r3, [r7, #20]
 8021ca6:	4413      	add	r3, r2
}
 8021ca8:	4618      	mov	r0, r3
 8021caa:	373c      	adds	r7, #60	; 0x3c
 8021cac:	46bd      	mov	sp, r7
 8021cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cb2:	4770      	bx	lr

08021cb4 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8021cb4:	b480      	push	{r7}
 8021cb6:	b087      	sub	sp, #28
 8021cb8:	af00      	add	r7, sp, #0
 8021cba:	60f8      	str	r0, [r7, #12]
 8021cbc:	60b9      	str	r1, [r7, #8]
 8021cbe:	607a      	str	r2, [r7, #4]
 8021cc0:	603b      	str	r3, [r7, #0]
    if(max_in >= min_in && x >= max_in) return max_out;
 8021cc2:	687a      	ldr	r2, [r7, #4]
 8021cc4:	68bb      	ldr	r3, [r7, #8]
 8021cc6:	429a      	cmp	r2, r3
 8021cc8:	db05      	blt.n	8021cd6 <lv_map+0x22>
 8021cca:	68fa      	ldr	r2, [r7, #12]
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	429a      	cmp	r2, r3
 8021cd0:	db01      	blt.n	8021cd6 <lv_map+0x22>
 8021cd2:	6a3b      	ldr	r3, [r7, #32]
 8021cd4:	e030      	b.n	8021d38 <lv_map+0x84>
    if(max_in >= min_in && x <= min_in) return min_out;
 8021cd6:	687a      	ldr	r2, [r7, #4]
 8021cd8:	68bb      	ldr	r3, [r7, #8]
 8021cda:	429a      	cmp	r2, r3
 8021cdc:	db05      	blt.n	8021cea <lv_map+0x36>
 8021cde:	68fa      	ldr	r2, [r7, #12]
 8021ce0:	68bb      	ldr	r3, [r7, #8]
 8021ce2:	429a      	cmp	r2, r3
 8021ce4:	dc01      	bgt.n	8021cea <lv_map+0x36>
 8021ce6:	683b      	ldr	r3, [r7, #0]
 8021ce8:	e026      	b.n	8021d38 <lv_map+0x84>

    if(max_in <= min_in && x <= max_in) return max_out;
 8021cea:	687a      	ldr	r2, [r7, #4]
 8021cec:	68bb      	ldr	r3, [r7, #8]
 8021cee:	429a      	cmp	r2, r3
 8021cf0:	dc05      	bgt.n	8021cfe <lv_map+0x4a>
 8021cf2:	68fa      	ldr	r2, [r7, #12]
 8021cf4:	687b      	ldr	r3, [r7, #4]
 8021cf6:	429a      	cmp	r2, r3
 8021cf8:	dc01      	bgt.n	8021cfe <lv_map+0x4a>
 8021cfa:	6a3b      	ldr	r3, [r7, #32]
 8021cfc:	e01c      	b.n	8021d38 <lv_map+0x84>
    if(max_in <= min_in && x >= min_in) return min_out;
 8021cfe:	687a      	ldr	r2, [r7, #4]
 8021d00:	68bb      	ldr	r3, [r7, #8]
 8021d02:	429a      	cmp	r2, r3
 8021d04:	dc05      	bgt.n	8021d12 <lv_map+0x5e>
 8021d06:	68fa      	ldr	r2, [r7, #12]
 8021d08:	68bb      	ldr	r3, [r7, #8]
 8021d0a:	429a      	cmp	r2, r3
 8021d0c:	db01      	blt.n	8021d12 <lv_map+0x5e>
 8021d0e:	683b      	ldr	r3, [r7, #0]
 8021d10:	e012      	b.n	8021d38 <lv_map+0x84>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 8021d12:	687a      	ldr	r2, [r7, #4]
 8021d14:	68bb      	ldr	r3, [r7, #8]
 8021d16:	1ad3      	subs	r3, r2, r3
 8021d18:	617b      	str	r3, [r7, #20]
    int32_t delta_out = max_out - min_out;
 8021d1a:	6a3a      	ldr	r2, [r7, #32]
 8021d1c:	683b      	ldr	r3, [r7, #0]
 8021d1e:	1ad3      	subs	r3, r2, r3
 8021d20:	613b      	str	r3, [r7, #16]

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021d22:	68fa      	ldr	r2, [r7, #12]
 8021d24:	68bb      	ldr	r3, [r7, #8]
 8021d26:	1ad3      	subs	r3, r2, r3
 8021d28:	693a      	ldr	r2, [r7, #16]
 8021d2a:	fb03 f202 	mul.w	r2, r3, r2
 8021d2e:	697b      	ldr	r3, [r7, #20]
 8021d30:	fb92 f2f3 	sdiv	r2, r2, r3
 8021d34:	683b      	ldr	r3, [r7, #0]
 8021d36:	4413      	add	r3, r2
}
 8021d38:	4618      	mov	r0, r3
 8021d3a:	371c      	adds	r7, #28
 8021d3c:	46bd      	mov	sp, r7
 8021d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d42:	4770      	bx	lr

08021d44 <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8021d44:	b580      	push	{r7, lr}
 8021d46:	af00      	add	r7, sp, #0
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8021d48:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8021d4c:	4803      	ldr	r0, [pc, #12]	; (8021d5c <lv_mem_init+0x18>)
 8021d4e:	f002 f960 	bl	8024012 <lv_tlsf_create_with_pool>
 8021d52:	4603      	mov	r3, r0
 8021d54:	4a02      	ldr	r2, [pc, #8]	; (8021d60 <lv_mem_init+0x1c>)
 8021d56:	6013      	str	r3, [r2, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 8021d58:	bf00      	nop
 8021d5a:	bd80      	pop	{r7, pc}
 8021d5c:	20000a74 	.word	0x20000a74
 8021d60:	20000a68 	.word	0x20000a68

08021d64 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8021d64:	b580      	push	{r7, lr}
 8021d66:	b084      	sub	sp, #16
 8021d68:	af00      	add	r7, sp, #0
 8021d6a:	6078      	str	r0, [r7, #4]
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	2b00      	cmp	r3, #0
 8021d70:	d101      	bne.n	8021d76 <lv_mem_alloc+0x12>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 8021d72:	4b10      	ldr	r3, [pc, #64]	; (8021db4 <lv_mem_alloc+0x50>)
 8021d74:	e019      	b.n	8021daa <lv_mem_alloc+0x46>
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8021d76:	4b10      	ldr	r3, [pc, #64]	; (8021db8 <lv_mem_alloc+0x54>)
 8021d78:	681b      	ldr	r3, [r3, #0]
 8021d7a:	6879      	ldr	r1, [r7, #4]
 8021d7c:	4618      	mov	r0, r3
 8021d7e:	f002 f965 	bl	802404c <lv_tlsf_malloc>
 8021d82:	60f8      	str	r0, [r7, #12]
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 8021d84:	68fb      	ldr	r3, [r7, #12]
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	d00e      	beq.n	8021da8 <lv_mem_alloc+0x44>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 8021d8a:	4b0c      	ldr	r3, [pc, #48]	; (8021dbc <lv_mem_alloc+0x58>)
 8021d8c:	681a      	ldr	r2, [r3, #0]
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	4413      	add	r3, r2
 8021d92:	4a0a      	ldr	r2, [pc, #40]	; (8021dbc <lv_mem_alloc+0x58>)
 8021d94:	6013      	str	r3, [r2, #0]
        max_used = LV_MAX(cur_used, max_used);
 8021d96:	4b0a      	ldr	r3, [pc, #40]	; (8021dc0 <lv_mem_alloc+0x5c>)
 8021d98:	681a      	ldr	r2, [r3, #0]
 8021d9a:	4b08      	ldr	r3, [pc, #32]	; (8021dbc <lv_mem_alloc+0x58>)
 8021d9c:	681b      	ldr	r3, [r3, #0]
 8021d9e:	4293      	cmp	r3, r2
 8021da0:	bf38      	it	cc
 8021da2:	4613      	movcc	r3, r2
 8021da4:	4a06      	ldr	r2, [pc, #24]	; (8021dc0 <lv_mem_alloc+0x5c>)
 8021da6:	6013      	str	r3, [r2, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
 8021da8:	68fb      	ldr	r3, [r7, #12]
}
 8021daa:	4618      	mov	r0, r3
 8021dac:	3710      	adds	r7, #16
 8021dae:	46bd      	mov	sp, r7
 8021db0:	bd80      	pop	{r7, pc}
 8021db2:	bf00      	nop
 8021db4:	20000014 	.word	0x20000014
 8021db8:	20000a68 	.word	0x20000a68
 8021dbc:	20000a6c 	.word	0x20000a6c
 8021dc0:	20000a70 	.word	0x20000a70

08021dc4 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 8021dc4:	b580      	push	{r7, lr}
 8021dc6:	b084      	sub	sp, #16
 8021dc8:	af00      	add	r7, sp, #0
 8021dca:	6078      	str	r0, [r7, #4]
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	4a11      	ldr	r2, [pc, #68]	; (8021e14 <lv_mem_free+0x50>)
 8021dd0:	4293      	cmp	r3, r2
 8021dd2:	d019      	beq.n	8021e08 <lv_mem_free+0x44>
    if(data == NULL) return;
 8021dd4:	687b      	ldr	r3, [r7, #4]
 8021dd6:	2b00      	cmp	r3, #0
 8021dd8:	d018      	beq.n	8021e0c <lv_mem_free+0x48>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8021dda:	4b0f      	ldr	r3, [pc, #60]	; (8021e18 <lv_mem_free+0x54>)
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	6879      	ldr	r1, [r7, #4]
 8021de0:	4618      	mov	r0, r3
 8021de2:	f002 f94e 	bl	8024082 <lv_tlsf_free>
 8021de6:	60f8      	str	r0, [r7, #12]
    if(cur_used > size) cur_used -= size;
 8021de8:	4b0c      	ldr	r3, [pc, #48]	; (8021e1c <lv_mem_free+0x58>)
 8021dea:	681b      	ldr	r3, [r3, #0]
 8021dec:	68fa      	ldr	r2, [r7, #12]
 8021dee:	429a      	cmp	r2, r3
 8021df0:	d206      	bcs.n	8021e00 <lv_mem_free+0x3c>
 8021df2:	4b0a      	ldr	r3, [pc, #40]	; (8021e1c <lv_mem_free+0x58>)
 8021df4:	681a      	ldr	r2, [r3, #0]
 8021df6:	68fb      	ldr	r3, [r7, #12]
 8021df8:	1ad3      	subs	r3, r2, r3
 8021dfa:	4a08      	ldr	r2, [pc, #32]	; (8021e1c <lv_mem_free+0x58>)
 8021dfc:	6013      	str	r3, [r2, #0]
 8021dfe:	e006      	b.n	8021e0e <lv_mem_free+0x4a>
    else cur_used = 0;
 8021e00:	4b06      	ldr	r3, [pc, #24]	; (8021e1c <lv_mem_free+0x58>)
 8021e02:	2200      	movs	r2, #0
 8021e04:	601a      	str	r2, [r3, #0]
 8021e06:	e002      	b.n	8021e0e <lv_mem_free+0x4a>
    if(data == &zero_mem) return;
 8021e08:	bf00      	nop
 8021e0a:	e000      	b.n	8021e0e <lv_mem_free+0x4a>
    if(data == NULL) return;
 8021e0c:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8021e0e:	3710      	adds	r7, #16
 8021e10:	46bd      	mov	sp, r7
 8021e12:	bd80      	pop	{r7, pc}
 8021e14:	20000014 	.word	0x20000014
 8021e18:	20000a68 	.word	0x20000a68
 8021e1c:	20000a6c 	.word	0x20000a6c

08021e20 <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 8021e20:	b580      	push	{r7, lr}
 8021e22:	b084      	sub	sp, #16
 8021e24:	af00      	add	r7, sp, #0
 8021e26:	6078      	str	r0, [r7, #4]
 8021e28:	6039      	str	r1, [r7, #0]
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8021e2a:	683b      	ldr	r3, [r7, #0]
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d104      	bne.n	8021e3a <lv_mem_realloc+0x1a>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
 8021e30:	6878      	ldr	r0, [r7, #4]
 8021e32:	f7ff ffc7 	bl	8021dc4 <lv_mem_free>
        return &zero_mem;
 8021e36:	4b0e      	ldr	r3, [pc, #56]	; (8021e70 <lv_mem_realloc+0x50>)
 8021e38:	e016      	b.n	8021e68 <lv_mem_realloc+0x48>
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	4a0c      	ldr	r2, [pc, #48]	; (8021e70 <lv_mem_realloc+0x50>)
 8021e3e:	4293      	cmp	r3, r2
 8021e40:	d104      	bne.n	8021e4c <lv_mem_realloc+0x2c>
 8021e42:	6838      	ldr	r0, [r7, #0]
 8021e44:	f7ff ff8e 	bl	8021d64 <lv_mem_alloc>
 8021e48:	4603      	mov	r3, r0
 8021e4a:	e00d      	b.n	8021e68 <lv_mem_realloc+0x48>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8021e4c:	4b09      	ldr	r3, [pc, #36]	; (8021e74 <lv_mem_realloc+0x54>)
 8021e4e:	681b      	ldr	r3, [r3, #0]
 8021e50:	683a      	ldr	r2, [r7, #0]
 8021e52:	6879      	ldr	r1, [r7, #4]
 8021e54:	4618      	mov	r0, r3
 8021e56:	f002 f944 	bl	80240e2 <lv_tlsf_realloc>
 8021e5a:	60f8      	str	r0, [r7, #12]
#else
    void * new_p = LV_MEM_CUSTOM_REALLOC(data_p, new_size);
#endif
    if(new_p == NULL) {
 8021e5c:	68fb      	ldr	r3, [r7, #12]
 8021e5e:	2b00      	cmp	r3, #0
 8021e60:	d101      	bne.n	8021e66 <lv_mem_realloc+0x46>
        LV_LOG_ERROR("couldn't allocate memory");
        return NULL;
 8021e62:	2300      	movs	r3, #0
 8021e64:	e000      	b.n	8021e68 <lv_mem_realloc+0x48>
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
 8021e66:	68fb      	ldr	r3, [r7, #12]
}
 8021e68:	4618      	mov	r0, r3
 8021e6a:	3710      	adds	r7, #16
 8021e6c:	46bd      	mov	sp, r7
 8021e6e:	bd80      	pop	{r7, pc}
 8021e70:	20000014 	.word	0x20000014
 8021e74:	20000a68 	.word	0x20000a68

08021e78 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 8021e78:	b580      	push	{r7, lr}
 8021e7a:	b084      	sub	sp, #16
 8021e7c:	af00      	add	r7, sp, #0
 8021e7e:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d101      	bne.n	8021e8a <lv_mem_buf_get+0x12>
 8021e86:	2300      	movs	r3, #0
 8021e88:	e09c      	b.n	8021fc4 <lv_mem_buf_get+0x14c>

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 8021e8a:	23ff      	movs	r3, #255	; 0xff
 8021e8c:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021e8e:	2300      	movs	r3, #0
 8021e90:	73bb      	strb	r3, [r7, #14]
 8021e92:	e041      	b.n	8021f18 <lv_mem_buf_get+0xa0>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8021e94:	7bbb      	ldrb	r3, [r7, #14]
 8021e96:	4a4d      	ldr	r2, [pc, #308]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021e98:	00db      	lsls	r3, r3, #3
 8021e9a:	4413      	add	r3, r2
 8021e9c:	799b      	ldrb	r3, [r3, #6]
 8021e9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8021ea2:	b2db      	uxtb	r3, r3
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d134      	bne.n	8021f12 <lv_mem_buf_get+0x9a>
 8021ea8:	7bbb      	ldrb	r3, [r7, #14]
 8021eaa:	4a48      	ldr	r2, [pc, #288]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021eac:	00db      	lsls	r3, r3, #3
 8021eae:	4413      	add	r3, r2
 8021eb0:	889b      	ldrh	r3, [r3, #4]
 8021eb2:	461a      	mov	r2, r3
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	4293      	cmp	r3, r2
 8021eb8:	d82b      	bhi.n	8021f12 <lv_mem_buf_get+0x9a>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8021eba:	7bbb      	ldrb	r3, [r7, #14]
 8021ebc:	4a43      	ldr	r2, [pc, #268]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021ebe:	00db      	lsls	r3, r3, #3
 8021ec0:	4413      	add	r3, r2
 8021ec2:	889b      	ldrh	r3, [r3, #4]
 8021ec4:	461a      	mov	r2, r3
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	4293      	cmp	r3, r2
 8021eca:	d10c      	bne.n	8021ee6 <lv_mem_buf_get+0x6e>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8021ecc:	7bbb      	ldrb	r3, [r7, #14]
 8021ece:	4a3f      	ldr	r2, [pc, #252]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021ed0:	00db      	lsls	r3, r3, #3
 8021ed2:	4413      	add	r3, r2
 8021ed4:	799a      	ldrb	r2, [r3, #6]
 8021ed6:	f042 0201 	orr.w	r2, r2, #1
 8021eda:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8021edc:	7bbb      	ldrb	r3, [r7, #14]
 8021ede:	4a3b      	ldr	r2, [pc, #236]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021ee0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021ee4:	e06e      	b.n	8021fc4 <lv_mem_buf_get+0x14c>
            }
            else if(i_guess < 0) {
 8021ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	da02      	bge.n	8021ef4 <lv_mem_buf_get+0x7c>
                i_guess = i;
 8021eee:	7bbb      	ldrb	r3, [r7, #14]
 8021ef0:	73fb      	strb	r3, [r7, #15]
 8021ef2:	e00e      	b.n	8021f12 <lv_mem_buf_get+0x9a>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8021ef4:	7bbb      	ldrb	r3, [r7, #14]
 8021ef6:	4a35      	ldr	r2, [pc, #212]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021ef8:	00db      	lsls	r3, r3, #3
 8021efa:	4413      	add	r3, r2
 8021efc:	889a      	ldrh	r2, [r3, #4]
 8021efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021f02:	4932      	ldr	r1, [pc, #200]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021f04:	00db      	lsls	r3, r3, #3
 8021f06:	440b      	add	r3, r1
 8021f08:	889b      	ldrh	r3, [r3, #4]
 8021f0a:	429a      	cmp	r2, r3
 8021f0c:	d201      	bcs.n	8021f12 <lv_mem_buf_get+0x9a>
                i_guess = i;
 8021f0e:	7bbb      	ldrb	r3, [r7, #14]
 8021f10:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021f12:	7bbb      	ldrb	r3, [r7, #14]
 8021f14:	3301      	adds	r3, #1
 8021f16:	73bb      	strb	r3, [r7, #14]
 8021f18:	7bbb      	ldrb	r3, [r7, #14]
 8021f1a:	2b0f      	cmp	r3, #15
 8021f1c:	d9ba      	bls.n	8021e94 <lv_mem_buf_get+0x1c>
            }
        }
    }

    if(i_guess >= 0) {
 8021f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	db0e      	blt.n	8021f44 <lv_mem_buf_get+0xcc>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8021f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021f2a:	4a28      	ldr	r2, [pc, #160]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021f2c:	00db      	lsls	r3, r3, #3
 8021f2e:	4413      	add	r3, r2
 8021f30:	799a      	ldrb	r2, [r3, #6]
 8021f32:	f042 0201 	orr.w	r2, r2, #1
 8021f36:	719a      	strb	r2, [r3, #6]
        MEM_TRACE("returning already allocated buffer (buffer id: %d, address: %p)", i_guess,
                  LV_GC_ROOT(lv_mem_buf[i_guess]).p);
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8021f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021f3c:	4a23      	ldr	r2, [pc, #140]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021f3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021f42:	e03f      	b.n	8021fc4 <lv_mem_buf_get+0x14c>
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021f44:	2300      	movs	r3, #0
 8021f46:	737b      	strb	r3, [r7, #13]
 8021f48:	e038      	b.n	8021fbc <lv_mem_buf_get+0x144>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8021f4a:	7b7b      	ldrb	r3, [r7, #13]
 8021f4c:	4a1f      	ldr	r2, [pc, #124]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021f4e:	00db      	lsls	r3, r3, #3
 8021f50:	4413      	add	r3, r2
 8021f52:	799b      	ldrb	r3, [r3, #6]
 8021f54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8021f58:	b2db      	uxtb	r3, r3
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	d12b      	bne.n	8021fb6 <lv_mem_buf_get+0x13e>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8021f5e:	7b7b      	ldrb	r3, [r7, #13]
 8021f60:	4a1a      	ldr	r2, [pc, #104]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021f62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021f66:	6879      	ldr	r1, [r7, #4]
 8021f68:	4618      	mov	r0, r3
 8021f6a:	f7ff ff59 	bl	8021e20 <lv_mem_realloc>
 8021f6e:	60b8      	str	r0, [r7, #8]
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8021f70:	68bb      	ldr	r3, [r7, #8]
 8021f72:	2b00      	cmp	r3, #0
 8021f74:	d100      	bne.n	8021f78 <lv_mem_buf_get+0x100>
 8021f76:	e7fe      	b.n	8021f76 <lv_mem_buf_get+0xfe>
            if(buf == NULL) return NULL;
 8021f78:	68bb      	ldr	r3, [r7, #8]
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d101      	bne.n	8021f82 <lv_mem_buf_get+0x10a>
 8021f7e:	2300      	movs	r3, #0
 8021f80:	e020      	b.n	8021fc4 <lv_mem_buf_get+0x14c>

            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8021f82:	7b7b      	ldrb	r3, [r7, #13]
 8021f84:	4a11      	ldr	r2, [pc, #68]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021f86:	00db      	lsls	r3, r3, #3
 8021f88:	4413      	add	r3, r2
 8021f8a:	799a      	ldrb	r2, [r3, #6]
 8021f8c:	f042 0201 	orr.w	r2, r2, #1
 8021f90:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8021f92:	7b7b      	ldrb	r3, [r7, #13]
 8021f94:	687a      	ldr	r2, [r7, #4]
 8021f96:	b291      	uxth	r1, r2
 8021f98:	4a0c      	ldr	r2, [pc, #48]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021f9a:	00db      	lsls	r3, r3, #3
 8021f9c:	4413      	add	r3, r2
 8021f9e:	460a      	mov	r2, r1
 8021fa0:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8021fa2:	7b7b      	ldrb	r3, [r7, #13]
 8021fa4:	4909      	ldr	r1, [pc, #36]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021fa6:	68ba      	ldr	r2, [r7, #8]
 8021fa8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            MEM_TRACE("allocated (buffer id: %d, address: %p)", i, LV_GC_ROOT(lv_mem_buf[i]).p);
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8021fac:	7b7b      	ldrb	r3, [r7, #13]
 8021fae:	4a07      	ldr	r2, [pc, #28]	; (8021fcc <lv_mem_buf_get+0x154>)
 8021fb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021fb4:	e006      	b.n	8021fc4 <lv_mem_buf_get+0x14c>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021fb6:	7b7b      	ldrb	r3, [r7, #13]
 8021fb8:	3301      	adds	r3, #1
 8021fba:	737b      	strb	r3, [r7, #13]
 8021fbc:	7b7b      	ldrb	r3, [r7, #13]
 8021fbe:	2b0f      	cmp	r3, #15
 8021fc0:	d9c3      	bls.n	8021f4a <lv_mem_buf_get+0xd2>
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8021fc2:	e7fe      	b.n	8021fc2 <lv_mem_buf_get+0x14a>
    return NULL;
}
 8021fc4:	4618      	mov	r0, r3
 8021fc6:	3710      	adds	r7, #16
 8021fc8:	46bd      	mov	sp, r7
 8021fca:	bd80      	pop	{r7, pc}
 8021fcc:	200008f0 	.word	0x200008f0

08021fd0 <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 8021fd0:	b480      	push	{r7}
 8021fd2:	b085      	sub	sp, #20
 8021fd4:	af00      	add	r7, sp, #0
 8021fd6:	6078      	str	r0, [r7, #4]
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021fd8:	2300      	movs	r3, #0
 8021fda:	73fb      	strb	r3, [r7, #15]
 8021fdc:	e012      	b.n	8022004 <lv_mem_buf_release+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8021fde:	7bfb      	ldrb	r3, [r7, #15]
 8021fe0:	4a0c      	ldr	r2, [pc, #48]	; (8022014 <lv_mem_buf_release+0x44>)
 8021fe2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021fe6:	687a      	ldr	r2, [r7, #4]
 8021fe8:	429a      	cmp	r2, r3
 8021fea:	d108      	bne.n	8021ffe <lv_mem_buf_release+0x2e>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8021fec:	7bfb      	ldrb	r3, [r7, #15]
 8021fee:	4a09      	ldr	r2, [pc, #36]	; (8022014 <lv_mem_buf_release+0x44>)
 8021ff0:	00db      	lsls	r3, r3, #3
 8021ff2:	4413      	add	r3, r2
 8021ff4:	799a      	ldrb	r2, [r3, #6]
 8021ff6:	f36f 0200 	bfc	r2, #0, #1
 8021ffa:	719a      	strb	r2, [r3, #6]
            return;
 8021ffc:	e005      	b.n	802200a <lv_mem_buf_release+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021ffe:	7bfb      	ldrb	r3, [r7, #15]
 8022000:	3301      	adds	r3, #1
 8022002:	73fb      	strb	r3, [r7, #15]
 8022004:	7bfb      	ldrb	r3, [r7, #15]
 8022006:	2b0f      	cmp	r3, #15
 8022008:	d9e9      	bls.n	8021fde <lv_mem_buf_release+0xe>
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 802200a:	3714      	adds	r7, #20
 802200c:	46bd      	mov	sp, r7
 802200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022012:	4770      	bx	lr
 8022014:	200008f0 	.word	0x200008f0

08022018 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 8022018:	b580      	push	{r7, lr}
 802201a:	b082      	sub	sp, #8
 802201c:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802201e:	2300      	movs	r3, #0
 8022020:	71fb      	strb	r3, [r7, #7]
 8022022:	e022      	b.n	802206a <lv_mem_buf_free_all+0x52>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8022024:	79fb      	ldrb	r3, [r7, #7]
 8022026:	4a15      	ldr	r2, [pc, #84]	; (802207c <lv_mem_buf_free_all+0x64>)
 8022028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802202c:	2b00      	cmp	r3, #0
 802202e:	d019      	beq.n	8022064 <lv_mem_buf_free_all+0x4c>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8022030:	79fb      	ldrb	r3, [r7, #7]
 8022032:	4a12      	ldr	r2, [pc, #72]	; (802207c <lv_mem_buf_free_all+0x64>)
 8022034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8022038:	4618      	mov	r0, r3
 802203a:	f7ff fec3 	bl	8021dc4 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 802203e:	79fb      	ldrb	r3, [r7, #7]
 8022040:	4a0e      	ldr	r2, [pc, #56]	; (802207c <lv_mem_buf_free_all+0x64>)
 8022042:	2100      	movs	r1, #0
 8022044:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8022048:	79fb      	ldrb	r3, [r7, #7]
 802204a:	4a0c      	ldr	r2, [pc, #48]	; (802207c <lv_mem_buf_free_all+0x64>)
 802204c:	00db      	lsls	r3, r3, #3
 802204e:	4413      	add	r3, r2
 8022050:	799a      	ldrb	r2, [r3, #6]
 8022052:	f36f 0200 	bfc	r2, #0, #1
 8022056:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8022058:	79fb      	ldrb	r3, [r7, #7]
 802205a:	4a08      	ldr	r2, [pc, #32]	; (802207c <lv_mem_buf_free_all+0x64>)
 802205c:	00db      	lsls	r3, r3, #3
 802205e:	4413      	add	r3, r2
 8022060:	2200      	movs	r2, #0
 8022062:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8022064:	79fb      	ldrb	r3, [r7, #7]
 8022066:	3301      	adds	r3, #1
 8022068:	71fb      	strb	r3, [r7, #7]
 802206a:	79fb      	ldrb	r3, [r7, #7]
 802206c:	2b0f      	cmp	r3, #15
 802206e:	d9d9      	bls.n	8022024 <lv_mem_buf_free_all+0xc>
        }
    }
}
 8022070:	bf00      	nop
 8022072:	bf00      	nop
 8022074:	3708      	adds	r7, #8
 8022076:	46bd      	mov	sp, r7
 8022078:	bd80      	pop	{r7, pc}
 802207a:	bf00      	nop
 802207c:	200008f0 	.word	0x200008f0

08022080 <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 8022080:	b480      	push	{r7}
 8022082:	b08b      	sub	sp, #44	; 0x2c
 8022084:	af00      	add	r7, sp, #0
 8022086:	60f8      	str	r0, [r7, #12]
 8022088:	60b9      	str	r1, [r7, #8]
 802208a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 802208c:	68fb      	ldr	r3, [r7, #12]
 802208e:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 8022090:	68bb      	ldr	r3, [r7, #8]
 8022092:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8022094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022096:	f003 0303 	and.w	r3, r3, #3
 802209a:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 802209c:	6a3b      	ldr	r3, [r7, #32]
 802209e:	f003 0303 	and.w	r3, r3, #3
 80220a2:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 80220a4:	693a      	ldr	r2, [r7, #16]
 80220a6:	69fb      	ldr	r3, [r7, #28]
 80220a8:	429a      	cmp	r2, r3
 80220aa:	f000 815b 	beq.w	8022364 <lv_memcpy+0x2e4>
        while(len > 32) {
 80220ae:	e142      	b.n	8022336 <lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 80220b0:	6a3b      	ldr	r3, [r7, #32]
 80220b2:	781a      	ldrb	r2, [r3, #0]
 80220b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220b6:	701a      	strb	r2, [r3, #0]
 80220b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220ba:	3301      	adds	r3, #1
 80220bc:	627b      	str	r3, [r7, #36]	; 0x24
 80220be:	6a3b      	ldr	r3, [r7, #32]
 80220c0:	3301      	adds	r3, #1
 80220c2:	623b      	str	r3, [r7, #32]
 80220c4:	6a3b      	ldr	r3, [r7, #32]
 80220c6:	781a      	ldrb	r2, [r3, #0]
 80220c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220ca:	701a      	strb	r2, [r3, #0]
 80220cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220ce:	3301      	adds	r3, #1
 80220d0:	627b      	str	r3, [r7, #36]	; 0x24
 80220d2:	6a3b      	ldr	r3, [r7, #32]
 80220d4:	3301      	adds	r3, #1
 80220d6:	623b      	str	r3, [r7, #32]
 80220d8:	6a3b      	ldr	r3, [r7, #32]
 80220da:	781a      	ldrb	r2, [r3, #0]
 80220dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220de:	701a      	strb	r2, [r3, #0]
 80220e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220e2:	3301      	adds	r3, #1
 80220e4:	627b      	str	r3, [r7, #36]	; 0x24
 80220e6:	6a3b      	ldr	r3, [r7, #32]
 80220e8:	3301      	adds	r3, #1
 80220ea:	623b      	str	r3, [r7, #32]
 80220ec:	6a3b      	ldr	r3, [r7, #32]
 80220ee:	781a      	ldrb	r2, [r3, #0]
 80220f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220f2:	701a      	strb	r2, [r3, #0]
 80220f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220f6:	3301      	adds	r3, #1
 80220f8:	627b      	str	r3, [r7, #36]	; 0x24
 80220fa:	6a3b      	ldr	r3, [r7, #32]
 80220fc:	3301      	adds	r3, #1
 80220fe:	623b      	str	r3, [r7, #32]
 8022100:	6a3b      	ldr	r3, [r7, #32]
 8022102:	781a      	ldrb	r2, [r3, #0]
 8022104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022106:	701a      	strb	r2, [r3, #0]
 8022108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802210a:	3301      	adds	r3, #1
 802210c:	627b      	str	r3, [r7, #36]	; 0x24
 802210e:	6a3b      	ldr	r3, [r7, #32]
 8022110:	3301      	adds	r3, #1
 8022112:	623b      	str	r3, [r7, #32]
 8022114:	6a3b      	ldr	r3, [r7, #32]
 8022116:	781a      	ldrb	r2, [r3, #0]
 8022118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802211a:	701a      	strb	r2, [r3, #0]
 802211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802211e:	3301      	adds	r3, #1
 8022120:	627b      	str	r3, [r7, #36]	; 0x24
 8022122:	6a3b      	ldr	r3, [r7, #32]
 8022124:	3301      	adds	r3, #1
 8022126:	623b      	str	r3, [r7, #32]
 8022128:	6a3b      	ldr	r3, [r7, #32]
 802212a:	781a      	ldrb	r2, [r3, #0]
 802212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802212e:	701a      	strb	r2, [r3, #0]
 8022130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022132:	3301      	adds	r3, #1
 8022134:	627b      	str	r3, [r7, #36]	; 0x24
 8022136:	6a3b      	ldr	r3, [r7, #32]
 8022138:	3301      	adds	r3, #1
 802213a:	623b      	str	r3, [r7, #32]
 802213c:	6a3b      	ldr	r3, [r7, #32]
 802213e:	781a      	ldrb	r2, [r3, #0]
 8022140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022142:	701a      	strb	r2, [r3, #0]
 8022144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022146:	3301      	adds	r3, #1
 8022148:	627b      	str	r3, [r7, #36]	; 0x24
 802214a:	6a3b      	ldr	r3, [r7, #32]
 802214c:	3301      	adds	r3, #1
 802214e:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8022150:	6a3b      	ldr	r3, [r7, #32]
 8022152:	781a      	ldrb	r2, [r3, #0]
 8022154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022156:	701a      	strb	r2, [r3, #0]
 8022158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802215a:	3301      	adds	r3, #1
 802215c:	627b      	str	r3, [r7, #36]	; 0x24
 802215e:	6a3b      	ldr	r3, [r7, #32]
 8022160:	3301      	adds	r3, #1
 8022162:	623b      	str	r3, [r7, #32]
 8022164:	6a3b      	ldr	r3, [r7, #32]
 8022166:	781a      	ldrb	r2, [r3, #0]
 8022168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802216a:	701a      	strb	r2, [r3, #0]
 802216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802216e:	3301      	adds	r3, #1
 8022170:	627b      	str	r3, [r7, #36]	; 0x24
 8022172:	6a3b      	ldr	r3, [r7, #32]
 8022174:	3301      	adds	r3, #1
 8022176:	623b      	str	r3, [r7, #32]
 8022178:	6a3b      	ldr	r3, [r7, #32]
 802217a:	781a      	ldrb	r2, [r3, #0]
 802217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802217e:	701a      	strb	r2, [r3, #0]
 8022180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022182:	3301      	adds	r3, #1
 8022184:	627b      	str	r3, [r7, #36]	; 0x24
 8022186:	6a3b      	ldr	r3, [r7, #32]
 8022188:	3301      	adds	r3, #1
 802218a:	623b      	str	r3, [r7, #32]
 802218c:	6a3b      	ldr	r3, [r7, #32]
 802218e:	781a      	ldrb	r2, [r3, #0]
 8022190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022192:	701a      	strb	r2, [r3, #0]
 8022194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022196:	3301      	adds	r3, #1
 8022198:	627b      	str	r3, [r7, #36]	; 0x24
 802219a:	6a3b      	ldr	r3, [r7, #32]
 802219c:	3301      	adds	r3, #1
 802219e:	623b      	str	r3, [r7, #32]
 80221a0:	6a3b      	ldr	r3, [r7, #32]
 80221a2:	781a      	ldrb	r2, [r3, #0]
 80221a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221a6:	701a      	strb	r2, [r3, #0]
 80221a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221aa:	3301      	adds	r3, #1
 80221ac:	627b      	str	r3, [r7, #36]	; 0x24
 80221ae:	6a3b      	ldr	r3, [r7, #32]
 80221b0:	3301      	adds	r3, #1
 80221b2:	623b      	str	r3, [r7, #32]
 80221b4:	6a3b      	ldr	r3, [r7, #32]
 80221b6:	781a      	ldrb	r2, [r3, #0]
 80221b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221ba:	701a      	strb	r2, [r3, #0]
 80221bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221be:	3301      	adds	r3, #1
 80221c0:	627b      	str	r3, [r7, #36]	; 0x24
 80221c2:	6a3b      	ldr	r3, [r7, #32]
 80221c4:	3301      	adds	r3, #1
 80221c6:	623b      	str	r3, [r7, #32]
 80221c8:	6a3b      	ldr	r3, [r7, #32]
 80221ca:	781a      	ldrb	r2, [r3, #0]
 80221cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221ce:	701a      	strb	r2, [r3, #0]
 80221d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221d2:	3301      	adds	r3, #1
 80221d4:	627b      	str	r3, [r7, #36]	; 0x24
 80221d6:	6a3b      	ldr	r3, [r7, #32]
 80221d8:	3301      	adds	r3, #1
 80221da:	623b      	str	r3, [r7, #32]
 80221dc:	6a3b      	ldr	r3, [r7, #32]
 80221de:	781a      	ldrb	r2, [r3, #0]
 80221e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221e2:	701a      	strb	r2, [r3, #0]
 80221e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221e6:	3301      	adds	r3, #1
 80221e8:	627b      	str	r3, [r7, #36]	; 0x24
 80221ea:	6a3b      	ldr	r3, [r7, #32]
 80221ec:	3301      	adds	r3, #1
 80221ee:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 80221f0:	6a3b      	ldr	r3, [r7, #32]
 80221f2:	781a      	ldrb	r2, [r3, #0]
 80221f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221f6:	701a      	strb	r2, [r3, #0]
 80221f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221fa:	3301      	adds	r3, #1
 80221fc:	627b      	str	r3, [r7, #36]	; 0x24
 80221fe:	6a3b      	ldr	r3, [r7, #32]
 8022200:	3301      	adds	r3, #1
 8022202:	623b      	str	r3, [r7, #32]
 8022204:	6a3b      	ldr	r3, [r7, #32]
 8022206:	781a      	ldrb	r2, [r3, #0]
 8022208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802220a:	701a      	strb	r2, [r3, #0]
 802220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802220e:	3301      	adds	r3, #1
 8022210:	627b      	str	r3, [r7, #36]	; 0x24
 8022212:	6a3b      	ldr	r3, [r7, #32]
 8022214:	3301      	adds	r3, #1
 8022216:	623b      	str	r3, [r7, #32]
 8022218:	6a3b      	ldr	r3, [r7, #32]
 802221a:	781a      	ldrb	r2, [r3, #0]
 802221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802221e:	701a      	strb	r2, [r3, #0]
 8022220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022222:	3301      	adds	r3, #1
 8022224:	627b      	str	r3, [r7, #36]	; 0x24
 8022226:	6a3b      	ldr	r3, [r7, #32]
 8022228:	3301      	adds	r3, #1
 802222a:	623b      	str	r3, [r7, #32]
 802222c:	6a3b      	ldr	r3, [r7, #32]
 802222e:	781a      	ldrb	r2, [r3, #0]
 8022230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022232:	701a      	strb	r2, [r3, #0]
 8022234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022236:	3301      	adds	r3, #1
 8022238:	627b      	str	r3, [r7, #36]	; 0x24
 802223a:	6a3b      	ldr	r3, [r7, #32]
 802223c:	3301      	adds	r3, #1
 802223e:	623b      	str	r3, [r7, #32]
 8022240:	6a3b      	ldr	r3, [r7, #32]
 8022242:	781a      	ldrb	r2, [r3, #0]
 8022244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022246:	701a      	strb	r2, [r3, #0]
 8022248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802224a:	3301      	adds	r3, #1
 802224c:	627b      	str	r3, [r7, #36]	; 0x24
 802224e:	6a3b      	ldr	r3, [r7, #32]
 8022250:	3301      	adds	r3, #1
 8022252:	623b      	str	r3, [r7, #32]
 8022254:	6a3b      	ldr	r3, [r7, #32]
 8022256:	781a      	ldrb	r2, [r3, #0]
 8022258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802225a:	701a      	strb	r2, [r3, #0]
 802225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802225e:	3301      	adds	r3, #1
 8022260:	627b      	str	r3, [r7, #36]	; 0x24
 8022262:	6a3b      	ldr	r3, [r7, #32]
 8022264:	3301      	adds	r3, #1
 8022266:	623b      	str	r3, [r7, #32]
 8022268:	6a3b      	ldr	r3, [r7, #32]
 802226a:	781a      	ldrb	r2, [r3, #0]
 802226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802226e:	701a      	strb	r2, [r3, #0]
 8022270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022272:	3301      	adds	r3, #1
 8022274:	627b      	str	r3, [r7, #36]	; 0x24
 8022276:	6a3b      	ldr	r3, [r7, #32]
 8022278:	3301      	adds	r3, #1
 802227a:	623b      	str	r3, [r7, #32]
 802227c:	6a3b      	ldr	r3, [r7, #32]
 802227e:	781a      	ldrb	r2, [r3, #0]
 8022280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022282:	701a      	strb	r2, [r3, #0]
 8022284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022286:	3301      	adds	r3, #1
 8022288:	627b      	str	r3, [r7, #36]	; 0x24
 802228a:	6a3b      	ldr	r3, [r7, #32]
 802228c:	3301      	adds	r3, #1
 802228e:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8022290:	6a3b      	ldr	r3, [r7, #32]
 8022292:	781a      	ldrb	r2, [r3, #0]
 8022294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022296:	701a      	strb	r2, [r3, #0]
 8022298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802229a:	3301      	adds	r3, #1
 802229c:	627b      	str	r3, [r7, #36]	; 0x24
 802229e:	6a3b      	ldr	r3, [r7, #32]
 80222a0:	3301      	adds	r3, #1
 80222a2:	623b      	str	r3, [r7, #32]
 80222a4:	6a3b      	ldr	r3, [r7, #32]
 80222a6:	781a      	ldrb	r2, [r3, #0]
 80222a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222aa:	701a      	strb	r2, [r3, #0]
 80222ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ae:	3301      	adds	r3, #1
 80222b0:	627b      	str	r3, [r7, #36]	; 0x24
 80222b2:	6a3b      	ldr	r3, [r7, #32]
 80222b4:	3301      	adds	r3, #1
 80222b6:	623b      	str	r3, [r7, #32]
 80222b8:	6a3b      	ldr	r3, [r7, #32]
 80222ba:	781a      	ldrb	r2, [r3, #0]
 80222bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222be:	701a      	strb	r2, [r3, #0]
 80222c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222c2:	3301      	adds	r3, #1
 80222c4:	627b      	str	r3, [r7, #36]	; 0x24
 80222c6:	6a3b      	ldr	r3, [r7, #32]
 80222c8:	3301      	adds	r3, #1
 80222ca:	623b      	str	r3, [r7, #32]
 80222cc:	6a3b      	ldr	r3, [r7, #32]
 80222ce:	781a      	ldrb	r2, [r3, #0]
 80222d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222d2:	701a      	strb	r2, [r3, #0]
 80222d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222d6:	3301      	adds	r3, #1
 80222d8:	627b      	str	r3, [r7, #36]	; 0x24
 80222da:	6a3b      	ldr	r3, [r7, #32]
 80222dc:	3301      	adds	r3, #1
 80222de:	623b      	str	r3, [r7, #32]
 80222e0:	6a3b      	ldr	r3, [r7, #32]
 80222e2:	781a      	ldrb	r2, [r3, #0]
 80222e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222e6:	701a      	strb	r2, [r3, #0]
 80222e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ea:	3301      	adds	r3, #1
 80222ec:	627b      	str	r3, [r7, #36]	; 0x24
 80222ee:	6a3b      	ldr	r3, [r7, #32]
 80222f0:	3301      	adds	r3, #1
 80222f2:	623b      	str	r3, [r7, #32]
 80222f4:	6a3b      	ldr	r3, [r7, #32]
 80222f6:	781a      	ldrb	r2, [r3, #0]
 80222f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222fa:	701a      	strb	r2, [r3, #0]
 80222fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222fe:	3301      	adds	r3, #1
 8022300:	627b      	str	r3, [r7, #36]	; 0x24
 8022302:	6a3b      	ldr	r3, [r7, #32]
 8022304:	3301      	adds	r3, #1
 8022306:	623b      	str	r3, [r7, #32]
 8022308:	6a3b      	ldr	r3, [r7, #32]
 802230a:	781a      	ldrb	r2, [r3, #0]
 802230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802230e:	701a      	strb	r2, [r3, #0]
 8022310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022312:	3301      	adds	r3, #1
 8022314:	627b      	str	r3, [r7, #36]	; 0x24
 8022316:	6a3b      	ldr	r3, [r7, #32]
 8022318:	3301      	adds	r3, #1
 802231a:	623b      	str	r3, [r7, #32]
 802231c:	6a3b      	ldr	r3, [r7, #32]
 802231e:	781a      	ldrb	r2, [r3, #0]
 8022320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022322:	701a      	strb	r2, [r3, #0]
 8022324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022326:	3301      	adds	r3, #1
 8022328:	627b      	str	r3, [r7, #36]	; 0x24
 802232a:	6a3b      	ldr	r3, [r7, #32]
 802232c:	3301      	adds	r3, #1
 802232e:	623b      	str	r3, [r7, #32]
            len -= 32;
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	3b20      	subs	r3, #32
 8022334:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 8022336:	687b      	ldr	r3, [r7, #4]
 8022338:	2b20      	cmp	r3, #32
 802233a:	f63f aeb9 	bhi.w	80220b0 <lv_memcpy+0x30>
        }
        while(len) {
 802233e:	e00c      	b.n	802235a <lv_memcpy+0x2da>
            COPY8
 8022340:	6a3b      	ldr	r3, [r7, #32]
 8022342:	781a      	ldrb	r2, [r3, #0]
 8022344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022346:	701a      	strb	r2, [r3, #0]
 8022348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802234a:	3301      	adds	r3, #1
 802234c:	627b      	str	r3, [r7, #36]	; 0x24
 802234e:	6a3b      	ldr	r3, [r7, #32]
 8022350:	3301      	adds	r3, #1
 8022352:	623b      	str	r3, [r7, #32]
            len--;
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	3b01      	subs	r3, #1
 8022358:	607b      	str	r3, [r7, #4]
        while(len) {
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	2b00      	cmp	r3, #0
 802235e:	d1ef      	bne.n	8022340 <lv_memcpy+0x2c0>
        }
        return dst;
 8022360:	68fb      	ldr	r3, [r7, #12]
 8022362:	e09f      	b.n	80224a4 <lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 8022364:	69fb      	ldr	r3, [r7, #28]
 8022366:	2b00      	cmp	r3, #0
 8022368:	d01a      	beq.n	80223a0 <lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 802236a:	69fb      	ldr	r3, [r7, #28]
 802236c:	f1c3 0304 	rsb	r3, r3, #4
 8022370:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 8022372:	e00f      	b.n	8022394 <lv_memcpy+0x314>
            COPY8;
 8022374:	6a3b      	ldr	r3, [r7, #32]
 8022376:	781a      	ldrb	r2, [r3, #0]
 8022378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802237a:	701a      	strb	r2, [r3, #0]
 802237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802237e:	3301      	adds	r3, #1
 8022380:	627b      	str	r3, [r7, #36]	; 0x24
 8022382:	6a3b      	ldr	r3, [r7, #32]
 8022384:	3301      	adds	r3, #1
 8022386:	623b      	str	r3, [r7, #32]
            d_align--;
 8022388:	69fb      	ldr	r3, [r7, #28]
 802238a:	3b01      	subs	r3, #1
 802238c:	61fb      	str	r3, [r7, #28]
            len--;
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	3b01      	subs	r3, #1
 8022392:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 8022394:	69fb      	ldr	r3, [r7, #28]
 8022396:	2b00      	cmp	r3, #0
 8022398:	d002      	beq.n	80223a0 <lv_memcpy+0x320>
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	2b00      	cmp	r3, #0
 802239e:	d1e9      	bne.n	8022374 <lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80223a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223a2:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 80223a4:	6a3b      	ldr	r3, [r7, #32]
 80223a6:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 80223a8:	e052      	b.n	8022450 <lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 80223aa:	697b      	ldr	r3, [r7, #20]
 80223ac:	681a      	ldr	r2, [r3, #0]
 80223ae:	69bb      	ldr	r3, [r7, #24]
 80223b0:	601a      	str	r2, [r3, #0]
 80223b2:	69bb      	ldr	r3, [r7, #24]
 80223b4:	3304      	adds	r3, #4
 80223b6:	61bb      	str	r3, [r7, #24]
 80223b8:	697b      	ldr	r3, [r7, #20]
 80223ba:	3304      	adds	r3, #4
 80223bc:	617b      	str	r3, [r7, #20]
 80223be:	697b      	ldr	r3, [r7, #20]
 80223c0:	681a      	ldr	r2, [r3, #0]
 80223c2:	69bb      	ldr	r3, [r7, #24]
 80223c4:	601a      	str	r2, [r3, #0]
 80223c6:	69bb      	ldr	r3, [r7, #24]
 80223c8:	3304      	adds	r3, #4
 80223ca:	61bb      	str	r3, [r7, #24]
 80223cc:	697b      	ldr	r3, [r7, #20]
 80223ce:	3304      	adds	r3, #4
 80223d0:	617b      	str	r3, [r7, #20]
 80223d2:	697b      	ldr	r3, [r7, #20]
 80223d4:	681a      	ldr	r2, [r3, #0]
 80223d6:	69bb      	ldr	r3, [r7, #24]
 80223d8:	601a      	str	r2, [r3, #0]
 80223da:	69bb      	ldr	r3, [r7, #24]
 80223dc:	3304      	adds	r3, #4
 80223de:	61bb      	str	r3, [r7, #24]
 80223e0:	697b      	ldr	r3, [r7, #20]
 80223e2:	3304      	adds	r3, #4
 80223e4:	617b      	str	r3, [r7, #20]
 80223e6:	697b      	ldr	r3, [r7, #20]
 80223e8:	681a      	ldr	r2, [r3, #0]
 80223ea:	69bb      	ldr	r3, [r7, #24]
 80223ec:	601a      	str	r2, [r3, #0]
 80223ee:	69bb      	ldr	r3, [r7, #24]
 80223f0:	3304      	adds	r3, #4
 80223f2:	61bb      	str	r3, [r7, #24]
 80223f4:	697b      	ldr	r3, [r7, #20]
 80223f6:	3304      	adds	r3, #4
 80223f8:	617b      	str	r3, [r7, #20]
 80223fa:	697b      	ldr	r3, [r7, #20]
 80223fc:	681a      	ldr	r2, [r3, #0]
 80223fe:	69bb      	ldr	r3, [r7, #24]
 8022400:	601a      	str	r2, [r3, #0]
 8022402:	69bb      	ldr	r3, [r7, #24]
 8022404:	3304      	adds	r3, #4
 8022406:	61bb      	str	r3, [r7, #24]
 8022408:	697b      	ldr	r3, [r7, #20]
 802240a:	3304      	adds	r3, #4
 802240c:	617b      	str	r3, [r7, #20]
 802240e:	697b      	ldr	r3, [r7, #20]
 8022410:	681a      	ldr	r2, [r3, #0]
 8022412:	69bb      	ldr	r3, [r7, #24]
 8022414:	601a      	str	r2, [r3, #0]
 8022416:	69bb      	ldr	r3, [r7, #24]
 8022418:	3304      	adds	r3, #4
 802241a:	61bb      	str	r3, [r7, #24]
 802241c:	697b      	ldr	r3, [r7, #20]
 802241e:	3304      	adds	r3, #4
 8022420:	617b      	str	r3, [r7, #20]
 8022422:	697b      	ldr	r3, [r7, #20]
 8022424:	681a      	ldr	r2, [r3, #0]
 8022426:	69bb      	ldr	r3, [r7, #24]
 8022428:	601a      	str	r2, [r3, #0]
 802242a:	69bb      	ldr	r3, [r7, #24]
 802242c:	3304      	adds	r3, #4
 802242e:	61bb      	str	r3, [r7, #24]
 8022430:	697b      	ldr	r3, [r7, #20]
 8022432:	3304      	adds	r3, #4
 8022434:	617b      	str	r3, [r7, #20]
 8022436:	697b      	ldr	r3, [r7, #20]
 8022438:	681a      	ldr	r2, [r3, #0]
 802243a:	69bb      	ldr	r3, [r7, #24]
 802243c:	601a      	str	r2, [r3, #0]
 802243e:	69bb      	ldr	r3, [r7, #24]
 8022440:	3304      	adds	r3, #4
 8022442:	61bb      	str	r3, [r7, #24]
 8022444:	697b      	ldr	r3, [r7, #20]
 8022446:	3304      	adds	r3, #4
 8022448:	617b      	str	r3, [r7, #20]
        len -= 32;
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	3b20      	subs	r3, #32
 802244e:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	2b20      	cmp	r3, #32
 8022454:	d8a9      	bhi.n	80223aa <lv_memcpy+0x32a>
    }

    while(len > 4) {
 8022456:	e00c      	b.n	8022472 <lv_memcpy+0x3f2>
        COPY32;
 8022458:	697b      	ldr	r3, [r7, #20]
 802245a:	681a      	ldr	r2, [r3, #0]
 802245c:	69bb      	ldr	r3, [r7, #24]
 802245e:	601a      	str	r2, [r3, #0]
 8022460:	69bb      	ldr	r3, [r7, #24]
 8022462:	3304      	adds	r3, #4
 8022464:	61bb      	str	r3, [r7, #24]
 8022466:	697b      	ldr	r3, [r7, #20]
 8022468:	3304      	adds	r3, #4
 802246a:	617b      	str	r3, [r7, #20]
        len -= 4;
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	3b04      	subs	r3, #4
 8022470:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	2b04      	cmp	r3, #4
 8022476:	d8ef      	bhi.n	8022458 <lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 8022478:	69bb      	ldr	r3, [r7, #24]
 802247a:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 802247c:	697b      	ldr	r3, [r7, #20]
 802247e:	623b      	str	r3, [r7, #32]
    while(len) {
 8022480:	e00c      	b.n	802249c <lv_memcpy+0x41c>
        COPY8
 8022482:	6a3b      	ldr	r3, [r7, #32]
 8022484:	781a      	ldrb	r2, [r3, #0]
 8022486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022488:	701a      	strb	r2, [r3, #0]
 802248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802248c:	3301      	adds	r3, #1
 802248e:	627b      	str	r3, [r7, #36]	; 0x24
 8022490:	6a3b      	ldr	r3, [r7, #32]
 8022492:	3301      	adds	r3, #1
 8022494:	623b      	str	r3, [r7, #32]
        len--;
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	3b01      	subs	r3, #1
 802249a:	607b      	str	r3, [r7, #4]
    while(len) {
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d1ef      	bne.n	8022482 <lv_memcpy+0x402>
    }

    return dst;
 80224a2:	68fb      	ldr	r3, [r7, #12]
}
 80224a4:	4618      	mov	r0, r3
 80224a6:	372c      	adds	r7, #44	; 0x2c
 80224a8:	46bd      	mov	sp, r7
 80224aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224ae:	4770      	bx	lr

080224b0 <lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset(void * dst, uint8_t v, size_t len)
{
 80224b0:	b480      	push	{r7}
 80224b2:	b089      	sub	sp, #36	; 0x24
 80224b4:	af00      	add	r7, sp, #0
 80224b6:	60f8      	str	r0, [r7, #12]
 80224b8:	460b      	mov	r3, r1
 80224ba:	607a      	str	r2, [r7, #4]
 80224bc:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *)dst;
 80224be:	68fb      	ldr	r3, [r7, #12]
 80224c0:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 80224c2:	69fb      	ldr	r3, [r7, #28]
 80224c4:	f003 0303 	and.w	r3, r3, #3
 80224c8:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 80224ca:	69bb      	ldr	r3, [r7, #24]
 80224cc:	2b00      	cmp	r3, #0
 80224ce:	d016      	beq.n	80224fe <lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 80224d0:	69bb      	ldr	r3, [r7, #24]
 80224d2:	f1c3 0304 	rsb	r3, r3, #4
 80224d6:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 80224d8:	e00b      	b.n	80224f2 <lv_memset+0x42>
            SET8(v);
 80224da:	69fb      	ldr	r3, [r7, #28]
 80224dc:	7afa      	ldrb	r2, [r7, #11]
 80224de:	701a      	strb	r2, [r3, #0]
 80224e0:	69fb      	ldr	r3, [r7, #28]
 80224e2:	3301      	adds	r3, #1
 80224e4:	61fb      	str	r3, [r7, #28]
            len--;
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	3b01      	subs	r3, #1
 80224ea:	607b      	str	r3, [r7, #4]
            d_align--;
 80224ec:	69bb      	ldr	r3, [r7, #24]
 80224ee:	3b01      	subs	r3, #1
 80224f0:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 80224f2:	69bb      	ldr	r3, [r7, #24]
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d002      	beq.n	80224fe <lv_memset+0x4e>
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d1ed      	bne.n	80224da <lv_memset+0x2a>
        }
    }

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 80224fe:	7afa      	ldrb	r2, [r7, #11]
 8022500:	7afb      	ldrb	r3, [r7, #11]
 8022502:	021b      	lsls	r3, r3, #8
 8022504:	441a      	add	r2, r3
 8022506:	7afb      	ldrb	r3, [r7, #11]
 8022508:	041b      	lsls	r3, r3, #16
 802250a:	441a      	add	r2, r3
 802250c:	7afb      	ldrb	r3, [r7, #11]
 802250e:	061b      	lsls	r3, r3, #24
 8022510:	4413      	add	r3, r2
 8022512:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 8022514:	69fb      	ldr	r3, [r7, #28]
 8022516:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 8022518:	e032      	b.n	8022580 <lv_memset+0xd0>
        REPEAT8(SET32(v32));
 802251a:	697b      	ldr	r3, [r7, #20]
 802251c:	693a      	ldr	r2, [r7, #16]
 802251e:	601a      	str	r2, [r3, #0]
 8022520:	697b      	ldr	r3, [r7, #20]
 8022522:	3304      	adds	r3, #4
 8022524:	617b      	str	r3, [r7, #20]
 8022526:	697b      	ldr	r3, [r7, #20]
 8022528:	693a      	ldr	r2, [r7, #16]
 802252a:	601a      	str	r2, [r3, #0]
 802252c:	697b      	ldr	r3, [r7, #20]
 802252e:	3304      	adds	r3, #4
 8022530:	617b      	str	r3, [r7, #20]
 8022532:	697b      	ldr	r3, [r7, #20]
 8022534:	693a      	ldr	r2, [r7, #16]
 8022536:	601a      	str	r2, [r3, #0]
 8022538:	697b      	ldr	r3, [r7, #20]
 802253a:	3304      	adds	r3, #4
 802253c:	617b      	str	r3, [r7, #20]
 802253e:	697b      	ldr	r3, [r7, #20]
 8022540:	693a      	ldr	r2, [r7, #16]
 8022542:	601a      	str	r2, [r3, #0]
 8022544:	697b      	ldr	r3, [r7, #20]
 8022546:	3304      	adds	r3, #4
 8022548:	617b      	str	r3, [r7, #20]
 802254a:	697b      	ldr	r3, [r7, #20]
 802254c:	693a      	ldr	r2, [r7, #16]
 802254e:	601a      	str	r2, [r3, #0]
 8022550:	697b      	ldr	r3, [r7, #20]
 8022552:	3304      	adds	r3, #4
 8022554:	617b      	str	r3, [r7, #20]
 8022556:	697b      	ldr	r3, [r7, #20]
 8022558:	693a      	ldr	r2, [r7, #16]
 802255a:	601a      	str	r2, [r3, #0]
 802255c:	697b      	ldr	r3, [r7, #20]
 802255e:	3304      	adds	r3, #4
 8022560:	617b      	str	r3, [r7, #20]
 8022562:	697b      	ldr	r3, [r7, #20]
 8022564:	693a      	ldr	r2, [r7, #16]
 8022566:	601a      	str	r2, [r3, #0]
 8022568:	697b      	ldr	r3, [r7, #20]
 802256a:	3304      	adds	r3, #4
 802256c:	617b      	str	r3, [r7, #20]
 802256e:	697b      	ldr	r3, [r7, #20]
 8022570:	693a      	ldr	r2, [r7, #16]
 8022572:	601a      	str	r2, [r3, #0]
 8022574:	697b      	ldr	r3, [r7, #20]
 8022576:	3304      	adds	r3, #4
 8022578:	617b      	str	r3, [r7, #20]
        len -= 32;
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	3b20      	subs	r3, #32
 802257e:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	2b20      	cmp	r3, #32
 8022584:	d8c9      	bhi.n	802251a <lv_memset+0x6a>
    }

    while(len > 4) {
 8022586:	e008      	b.n	802259a <lv_memset+0xea>
        SET32(v32);
 8022588:	697b      	ldr	r3, [r7, #20]
 802258a:	693a      	ldr	r2, [r7, #16]
 802258c:	601a      	str	r2, [r3, #0]
 802258e:	697b      	ldr	r3, [r7, #20]
 8022590:	3304      	adds	r3, #4
 8022592:	617b      	str	r3, [r7, #20]
        len -= 4;
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	3b04      	subs	r3, #4
 8022598:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	2b04      	cmp	r3, #4
 802259e:	d8f3      	bhi.n	8022588 <lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 80225a0:	697b      	ldr	r3, [r7, #20]
 80225a2:	61fb      	str	r3, [r7, #28]
    while(len) {
 80225a4:	e008      	b.n	80225b8 <lv_memset+0x108>
        SET8(v);
 80225a6:	69fb      	ldr	r3, [r7, #28]
 80225a8:	7afa      	ldrb	r2, [r7, #11]
 80225aa:	701a      	strb	r2, [r3, #0]
 80225ac:	69fb      	ldr	r3, [r7, #28]
 80225ae:	3301      	adds	r3, #1
 80225b0:	61fb      	str	r3, [r7, #28]
        len--;
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	3b01      	subs	r3, #1
 80225b6:	607b      	str	r3, [r7, #4]
    while(len) {
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d1f3      	bne.n	80225a6 <lv_memset+0xf6>
    }
}
 80225be:	bf00      	nop
 80225c0:	bf00      	nop
 80225c2:	3724      	adds	r7, #36	; 0x24
 80225c4:	46bd      	mov	sp, r7
 80225c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225ca:	4770      	bx	lr

080225cc <lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_00(void * dst, size_t len)
{
 80225cc:	b480      	push	{r7}
 80225ce:	b087      	sub	sp, #28
 80225d0:	af00      	add	r7, sp, #0
 80225d2:	6078      	str	r0, [r7, #4]
 80225d4:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 80225d6:	687b      	ldr	r3, [r7, #4]
 80225d8:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 80225da:	697b      	ldr	r3, [r7, #20]
 80225dc:	f003 0303 	and.w	r3, r3, #3
 80225e0:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 80225e2:	693b      	ldr	r3, [r7, #16]
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d016      	beq.n	8022616 <lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 80225e8:	693b      	ldr	r3, [r7, #16]
 80225ea:	f1c3 0304 	rsb	r3, r3, #4
 80225ee:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 80225f0:	e00b      	b.n	802260a <lv_memset_00+0x3e>
            SET8(0);
 80225f2:	697b      	ldr	r3, [r7, #20]
 80225f4:	2200      	movs	r2, #0
 80225f6:	701a      	strb	r2, [r3, #0]
 80225f8:	697b      	ldr	r3, [r7, #20]
 80225fa:	3301      	adds	r3, #1
 80225fc:	617b      	str	r3, [r7, #20]
            len--;
 80225fe:	683b      	ldr	r3, [r7, #0]
 8022600:	3b01      	subs	r3, #1
 8022602:	603b      	str	r3, [r7, #0]
            d_align--;
 8022604:	693b      	ldr	r3, [r7, #16]
 8022606:	3b01      	subs	r3, #1
 8022608:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802260a:	693b      	ldr	r3, [r7, #16]
 802260c:	2b00      	cmp	r3, #0
 802260e:	d002      	beq.n	8022616 <lv_memset_00+0x4a>
 8022610:	683b      	ldr	r3, [r7, #0]
 8022612:	2b00      	cmp	r3, #0
 8022614:	d1ed      	bne.n	80225f2 <lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 8022616:	697b      	ldr	r3, [r7, #20]
 8022618:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 802261a:	e032      	b.n	8022682 <lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 802261c:	68fb      	ldr	r3, [r7, #12]
 802261e:	2200      	movs	r2, #0
 8022620:	601a      	str	r2, [r3, #0]
 8022622:	68fb      	ldr	r3, [r7, #12]
 8022624:	3304      	adds	r3, #4
 8022626:	60fb      	str	r3, [r7, #12]
 8022628:	68fb      	ldr	r3, [r7, #12]
 802262a:	2200      	movs	r2, #0
 802262c:	601a      	str	r2, [r3, #0]
 802262e:	68fb      	ldr	r3, [r7, #12]
 8022630:	3304      	adds	r3, #4
 8022632:	60fb      	str	r3, [r7, #12]
 8022634:	68fb      	ldr	r3, [r7, #12]
 8022636:	2200      	movs	r2, #0
 8022638:	601a      	str	r2, [r3, #0]
 802263a:	68fb      	ldr	r3, [r7, #12]
 802263c:	3304      	adds	r3, #4
 802263e:	60fb      	str	r3, [r7, #12]
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	2200      	movs	r2, #0
 8022644:	601a      	str	r2, [r3, #0]
 8022646:	68fb      	ldr	r3, [r7, #12]
 8022648:	3304      	adds	r3, #4
 802264a:	60fb      	str	r3, [r7, #12]
 802264c:	68fb      	ldr	r3, [r7, #12]
 802264e:	2200      	movs	r2, #0
 8022650:	601a      	str	r2, [r3, #0]
 8022652:	68fb      	ldr	r3, [r7, #12]
 8022654:	3304      	adds	r3, #4
 8022656:	60fb      	str	r3, [r7, #12]
 8022658:	68fb      	ldr	r3, [r7, #12]
 802265a:	2200      	movs	r2, #0
 802265c:	601a      	str	r2, [r3, #0]
 802265e:	68fb      	ldr	r3, [r7, #12]
 8022660:	3304      	adds	r3, #4
 8022662:	60fb      	str	r3, [r7, #12]
 8022664:	68fb      	ldr	r3, [r7, #12]
 8022666:	2200      	movs	r2, #0
 8022668:	601a      	str	r2, [r3, #0]
 802266a:	68fb      	ldr	r3, [r7, #12]
 802266c:	3304      	adds	r3, #4
 802266e:	60fb      	str	r3, [r7, #12]
 8022670:	68fb      	ldr	r3, [r7, #12]
 8022672:	2200      	movs	r2, #0
 8022674:	601a      	str	r2, [r3, #0]
 8022676:	68fb      	ldr	r3, [r7, #12]
 8022678:	3304      	adds	r3, #4
 802267a:	60fb      	str	r3, [r7, #12]
        len -= 32;
 802267c:	683b      	ldr	r3, [r7, #0]
 802267e:	3b20      	subs	r3, #32
 8022680:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 8022682:	683b      	ldr	r3, [r7, #0]
 8022684:	2b20      	cmp	r3, #32
 8022686:	d8c9      	bhi.n	802261c <lv_memset_00+0x50>
    }

    while(len > 4) {
 8022688:	e008      	b.n	802269c <lv_memset_00+0xd0>
        SET32(0);
 802268a:	68fb      	ldr	r3, [r7, #12]
 802268c:	2200      	movs	r2, #0
 802268e:	601a      	str	r2, [r3, #0]
 8022690:	68fb      	ldr	r3, [r7, #12]
 8022692:	3304      	adds	r3, #4
 8022694:	60fb      	str	r3, [r7, #12]
        len -= 4;
 8022696:	683b      	ldr	r3, [r7, #0]
 8022698:	3b04      	subs	r3, #4
 802269a:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 802269c:	683b      	ldr	r3, [r7, #0]
 802269e:	2b04      	cmp	r3, #4
 80226a0:	d8f3      	bhi.n	802268a <lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 80226a2:	68fb      	ldr	r3, [r7, #12]
 80226a4:	617b      	str	r3, [r7, #20]
    while(len) {
 80226a6:	e008      	b.n	80226ba <lv_memset_00+0xee>
        SET8(0);
 80226a8:	697b      	ldr	r3, [r7, #20]
 80226aa:	2200      	movs	r2, #0
 80226ac:	701a      	strb	r2, [r3, #0]
 80226ae:	697b      	ldr	r3, [r7, #20]
 80226b0:	3301      	adds	r3, #1
 80226b2:	617b      	str	r3, [r7, #20]
        len--;
 80226b4:	683b      	ldr	r3, [r7, #0]
 80226b6:	3b01      	subs	r3, #1
 80226b8:	603b      	str	r3, [r7, #0]
    while(len) {
 80226ba:	683b      	ldr	r3, [r7, #0]
 80226bc:	2b00      	cmp	r3, #0
 80226be:	d1f3      	bne.n	80226a8 <lv_memset_00+0xdc>
    }
}
 80226c0:	bf00      	nop
 80226c2:	bf00      	nop
 80226c4:	371c      	adds	r7, #28
 80226c6:	46bd      	mov	sp, r7
 80226c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226cc:	4770      	bx	lr

080226ce <lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_ff(void * dst, size_t len)
{
 80226ce:	b480      	push	{r7}
 80226d0:	b087      	sub	sp, #28
 80226d2:	af00      	add	r7, sp, #0
 80226d4:	6078      	str	r0, [r7, #4]
 80226d6:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 80226dc:	697b      	ldr	r3, [r7, #20]
 80226de:	f003 0303 	and.w	r3, r3, #3
 80226e2:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 80226e4:	693b      	ldr	r3, [r7, #16]
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d016      	beq.n	8022718 <lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 80226ea:	693b      	ldr	r3, [r7, #16]
 80226ec:	f1c3 0304 	rsb	r3, r3, #4
 80226f0:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 80226f2:	e00b      	b.n	802270c <lv_memset_ff+0x3e>
            SET8(0xFF);
 80226f4:	697b      	ldr	r3, [r7, #20]
 80226f6:	22ff      	movs	r2, #255	; 0xff
 80226f8:	701a      	strb	r2, [r3, #0]
 80226fa:	697b      	ldr	r3, [r7, #20]
 80226fc:	3301      	adds	r3, #1
 80226fe:	617b      	str	r3, [r7, #20]
            len--;
 8022700:	683b      	ldr	r3, [r7, #0]
 8022702:	3b01      	subs	r3, #1
 8022704:	603b      	str	r3, [r7, #0]
            d_align--;
 8022706:	693b      	ldr	r3, [r7, #16]
 8022708:	3b01      	subs	r3, #1
 802270a:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802270c:	693b      	ldr	r3, [r7, #16]
 802270e:	2b00      	cmp	r3, #0
 8022710:	d002      	beq.n	8022718 <lv_memset_ff+0x4a>
 8022712:	683b      	ldr	r3, [r7, #0]
 8022714:	2b00      	cmp	r3, #0
 8022716:	d1ed      	bne.n	80226f4 <lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 8022718:	697b      	ldr	r3, [r7, #20]
 802271a:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 802271c:	e03a      	b.n	8022794 <lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 802271e:	68fb      	ldr	r3, [r7, #12]
 8022720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022724:	601a      	str	r2, [r3, #0]
 8022726:	68fb      	ldr	r3, [r7, #12]
 8022728:	3304      	adds	r3, #4
 802272a:	60fb      	str	r3, [r7, #12]
 802272c:	68fb      	ldr	r3, [r7, #12]
 802272e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022732:	601a      	str	r2, [r3, #0]
 8022734:	68fb      	ldr	r3, [r7, #12]
 8022736:	3304      	adds	r3, #4
 8022738:	60fb      	str	r3, [r7, #12]
 802273a:	68fb      	ldr	r3, [r7, #12]
 802273c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022740:	601a      	str	r2, [r3, #0]
 8022742:	68fb      	ldr	r3, [r7, #12]
 8022744:	3304      	adds	r3, #4
 8022746:	60fb      	str	r3, [r7, #12]
 8022748:	68fb      	ldr	r3, [r7, #12]
 802274a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802274e:	601a      	str	r2, [r3, #0]
 8022750:	68fb      	ldr	r3, [r7, #12]
 8022752:	3304      	adds	r3, #4
 8022754:	60fb      	str	r3, [r7, #12]
 8022756:	68fb      	ldr	r3, [r7, #12]
 8022758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802275c:	601a      	str	r2, [r3, #0]
 802275e:	68fb      	ldr	r3, [r7, #12]
 8022760:	3304      	adds	r3, #4
 8022762:	60fb      	str	r3, [r7, #12]
 8022764:	68fb      	ldr	r3, [r7, #12]
 8022766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802276a:	601a      	str	r2, [r3, #0]
 802276c:	68fb      	ldr	r3, [r7, #12]
 802276e:	3304      	adds	r3, #4
 8022770:	60fb      	str	r3, [r7, #12]
 8022772:	68fb      	ldr	r3, [r7, #12]
 8022774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022778:	601a      	str	r2, [r3, #0]
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	3304      	adds	r3, #4
 802277e:	60fb      	str	r3, [r7, #12]
 8022780:	68fb      	ldr	r3, [r7, #12]
 8022782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022786:	601a      	str	r2, [r3, #0]
 8022788:	68fb      	ldr	r3, [r7, #12]
 802278a:	3304      	adds	r3, #4
 802278c:	60fb      	str	r3, [r7, #12]
        len -= 32;
 802278e:	683b      	ldr	r3, [r7, #0]
 8022790:	3b20      	subs	r3, #32
 8022792:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 8022794:	683b      	ldr	r3, [r7, #0]
 8022796:	2b20      	cmp	r3, #32
 8022798:	d8c1      	bhi.n	802271e <lv_memset_ff+0x50>
    }

    while(len > 4) {
 802279a:	e009      	b.n	80227b0 <lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 802279c:	68fb      	ldr	r3, [r7, #12]
 802279e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80227a2:	601a      	str	r2, [r3, #0]
 80227a4:	68fb      	ldr	r3, [r7, #12]
 80227a6:	3304      	adds	r3, #4
 80227a8:	60fb      	str	r3, [r7, #12]
        len -= 4;
 80227aa:	683b      	ldr	r3, [r7, #0]
 80227ac:	3b04      	subs	r3, #4
 80227ae:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 80227b0:	683b      	ldr	r3, [r7, #0]
 80227b2:	2b04      	cmp	r3, #4
 80227b4:	d8f2      	bhi.n	802279c <lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 80227b6:	68fb      	ldr	r3, [r7, #12]
 80227b8:	617b      	str	r3, [r7, #20]
    while(len) {
 80227ba:	e008      	b.n	80227ce <lv_memset_ff+0x100>
        SET8(0xFF);
 80227bc:	697b      	ldr	r3, [r7, #20]
 80227be:	22ff      	movs	r2, #255	; 0xff
 80227c0:	701a      	strb	r2, [r3, #0]
 80227c2:	697b      	ldr	r3, [r7, #20]
 80227c4:	3301      	adds	r3, #1
 80227c6:	617b      	str	r3, [r7, #20]
        len--;
 80227c8:	683b      	ldr	r3, [r7, #0]
 80227ca:	3b01      	subs	r3, #1
 80227cc:	603b      	str	r3, [r7, #0]
    while(len) {
 80227ce:	683b      	ldr	r3, [r7, #0]
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	d1f3      	bne.n	80227bc <lv_memset_ff+0xee>
    }
}
 80227d4:	bf00      	nop
 80227d6:	bf00      	nop
 80227d8:	371c      	adds	r7, #28
 80227da:	46bd      	mov	sp, r7
 80227dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227e0:	4770      	bx	lr

080227e2 <lv_color_make>:
{
 80227e2:	b480      	push	{r7}
 80227e4:	b083      	sub	sp, #12
 80227e6:	af00      	add	r7, sp, #0
 80227e8:	4603      	mov	r3, r0
 80227ea:	71fb      	strb	r3, [r7, #7]
 80227ec:	460b      	mov	r3, r1
 80227ee:	71bb      	strb	r3, [r7, #6]
 80227f0:	4613      	mov	r3, r2
 80227f2:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80227f4:	797b      	ldrb	r3, [r7, #5]
 80227f6:	09db      	lsrs	r3, r3, #7
 80227f8:	b2da      	uxtb	r2, r3
 80227fa:	79bb      	ldrb	r3, [r7, #6]
 80227fc:	09db      	lsrs	r3, r3, #7
 80227fe:	b2db      	uxtb	r3, r3
 8022800:	4313      	orrs	r3, r2
 8022802:	b2da      	uxtb	r2, r3
 8022804:	79fb      	ldrb	r3, [r7, #7]
 8022806:	09db      	lsrs	r3, r3, #7
 8022808:	b2db      	uxtb	r3, r3
 802280a:	4313      	orrs	r3, r2
 802280c:	b2db      	uxtb	r3, r3
}
 802280e:	4618      	mov	r0, r3
 8022810:	370c      	adds	r7, #12
 8022812:	46bd      	mov	sp, r7
 8022814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022818:	4770      	bx	lr

0802281a <lv_color_white>:
{
 802281a:	b580      	push	{r7, lr}
 802281c:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 802281e:	22ff      	movs	r2, #255	; 0xff
 8022820:	21ff      	movs	r1, #255	; 0xff
 8022822:	20ff      	movs	r0, #255	; 0xff
 8022824:	f7ff ffdd 	bl	80227e2 <lv_color_make>
 8022828:	4603      	mov	r3, r0
}
 802282a:	4618      	mov	r0, r3
 802282c:	bd80      	pop	{r7, pc}

0802282e <lv_color_black>:
{
 802282e:	b580      	push	{r7, lr}
 8022830:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8022832:	2200      	movs	r2, #0
 8022834:	2100      	movs	r1, #0
 8022836:	2000      	movs	r0, #0
 8022838:	f7ff ffd3 	bl	80227e2 <lv_color_make>
 802283c:	4603      	mov	r3, r0
}
 802283e:	4618      	mov	r0, r3
 8022840:	bd80      	pop	{r7, pc}

08022842 <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8022842:	b580      	push	{r7, lr}
 8022844:	b08c      	sub	sp, #48	; 0x30
 8022846:	af00      	add	r7, sp, #0
 8022848:	60f8      	str	r0, [r7, #12]
 802284a:	460b      	mov	r3, r1
 802284c:	607a      	str	r2, [r7, #4]
 802284e:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022850:	68fb      	ldr	r3, [r7, #12]
 8022852:	891b      	ldrh	r3, [r3, #8]
 8022854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022858:	4293      	cmp	r3, r2
 802285a:	d137      	bne.n	80228cc <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 802285c:	2300      	movs	r3, #0
 802285e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022860:	e02c      	b.n	80228bc <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 8022862:	68fb      	ldr	r3, [r7, #12]
 8022864:	685a      	ldr	r2, [r3, #4]
 8022866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022868:	00db      	lsls	r3, r3, #3
 802286a:	4413      	add	r3, r2
 802286c:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 802286e:	697b      	ldr	r3, [r7, #20]
 8022870:	881b      	ldrh	r3, [r3, #0]
 8022872:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022876:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8022878:	8a7a      	ldrh	r2, [r7, #18]
 802287a:	897b      	ldrh	r3, [r7, #10]
 802287c:	429a      	cmp	r2, r3
 802287e:	d11a      	bne.n	80228b6 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8022880:	697b      	ldr	r3, [r7, #20]
 8022882:	881b      	ldrh	r3, [r3, #0]
 8022884:	b21b      	sxth	r3, r3
 8022886:	2b00      	cmp	r3, #0
 8022888:	da01      	bge.n	802288e <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 802288a:	2302      	movs	r3, #2
 802288c:	e098      	b.n	80229c0 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 802288e:	697b      	ldr	r3, [r7, #20]
 8022890:	881b      	ldrh	r3, [r3, #0]
 8022892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022896:	2b00      	cmp	r3, #0
 8022898:	d007      	beq.n	80228aa <lv_style_get_prop_inlined+0x68>
 802289a:	8a7b      	ldrh	r3, [r7, #18]
 802289c:	4618      	mov	r0, r3
 802289e:	f000 f9cd 	bl	8022c3c <lv_style_prop_get_default>
 80228a2:	4602      	mov	r2, r0
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	601a      	str	r2, [r3, #0]
 80228a8:	e003      	b.n	80228b2 <lv_style_get_prop_inlined+0x70>
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	697a      	ldr	r2, [r7, #20]
 80228ae:	6852      	ldr	r2, [r2, #4]
 80228b0:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 80228b2:	2301      	movs	r3, #1
 80228b4:	e084      	b.n	80229c0 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 80228b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228b8:	3301      	adds	r3, #1
 80228ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80228bc:	68fb      	ldr	r3, [r7, #12]
 80228be:	7adb      	ldrb	r3, [r3, #11]
 80228c0:	461a      	mov	r2, r3
 80228c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228c4:	4293      	cmp	r3, r2
 80228c6:	d3cc      	bcc.n	8022862 <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 80228c8:	2300      	movs	r3, #0
 80228ca:	e079      	b.n	80229c0 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 80228cc:	68fb      	ldr	r3, [r7, #12]
 80228ce:	7adb      	ldrb	r3, [r3, #11]
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	d101      	bne.n	80228d8 <lv_style_get_prop_inlined+0x96>
 80228d4:	2300      	movs	r3, #0
 80228d6:	e073      	b.n	80229c0 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 80228d8:	68fb      	ldr	r3, [r7, #12]
 80228da:	7adb      	ldrb	r3, [r3, #11]
 80228dc:	2b01      	cmp	r3, #1
 80228de:	d948      	bls.n	8022972 <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80228e0:	68fb      	ldr	r3, [r7, #12]
 80228e2:	685a      	ldr	r2, [r3, #4]
 80228e4:	68fb      	ldr	r3, [r7, #12]
 80228e6:	7adb      	ldrb	r3, [r3, #11]
 80228e8:	009b      	lsls	r3, r3, #2
 80228ea:	4413      	add	r3, r2
 80228ec:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 80228ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80228f0:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80228f2:	2300      	movs	r3, #0
 80228f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80228f6:	e035      	b.n	8022964 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 80228f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228fa:	005b      	lsls	r3, r3, #1
 80228fc:	6a3a      	ldr	r2, [r7, #32]
 80228fe:	4413      	add	r3, r2
 8022900:	881b      	ldrh	r3, [r3, #0]
 8022902:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022906:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 8022908:	8bfa      	ldrh	r2, [r7, #30]
 802290a:	897b      	ldrh	r3, [r7, #10]
 802290c:	429a      	cmp	r2, r3
 802290e:	d126      	bne.n	802295e <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8022910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022912:	005b      	lsls	r3, r3, #1
 8022914:	6a3a      	ldr	r2, [r7, #32]
 8022916:	4413      	add	r3, r2
 8022918:	881b      	ldrh	r3, [r3, #0]
 802291a:	b21b      	sxth	r3, r3
 802291c:	2b00      	cmp	r3, #0
 802291e:	da01      	bge.n	8022924 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8022920:	2302      	movs	r3, #2
 8022922:	e04d      	b.n	80229c0 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8022924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022926:	005b      	lsls	r3, r3, #1
 8022928:	6a3a      	ldr	r2, [r7, #32]
 802292a:	4413      	add	r3, r2
 802292c:	881b      	ldrh	r3, [r3, #0]
 802292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022932:	2b00      	cmp	r3, #0
 8022934:	d007      	beq.n	8022946 <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8022936:	8bfb      	ldrh	r3, [r7, #30]
 8022938:	4618      	mov	r0, r3
 802293a:	f000 f97f 	bl	8022c3c <lv_style_prop_get_default>
 802293e:	4602      	mov	r2, r0
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	601a      	str	r2, [r3, #0]
 8022944:	e009      	b.n	802295a <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8022946:	68fb      	ldr	r3, [r7, #12]
 8022948:	685b      	ldr	r3, [r3, #4]
 802294a:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 802294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802294e:	009b      	lsls	r3, r3, #2
 8022950:	69ba      	ldr	r2, [r7, #24]
 8022952:	441a      	add	r2, r3
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	6812      	ldr	r2, [r2, #0]
 8022958:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 802295a:	2301      	movs	r3, #1
 802295c:	e030      	b.n	80229c0 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 802295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022960:	3301      	adds	r3, #1
 8022962:	62bb      	str	r3, [r7, #40]	; 0x28
 8022964:	68fb      	ldr	r3, [r7, #12]
 8022966:	7adb      	ldrb	r3, [r3, #11]
 8022968:	461a      	mov	r2, r3
 802296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802296c:	4293      	cmp	r3, r2
 802296e:	d3c3      	bcc.n	80228f8 <lv_style_get_prop_inlined+0xb6>
 8022970:	e025      	b.n	80229be <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8022972:	68fb      	ldr	r3, [r7, #12]
 8022974:	891b      	ldrh	r3, [r3, #8]
 8022976:	f3c3 020d 	ubfx	r2, r3, #0, #14
 802297a:	897b      	ldrh	r3, [r7, #10]
 802297c:	429a      	cmp	r2, r3
 802297e:	d11e      	bne.n	80229be <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8022980:	68fb      	ldr	r3, [r7, #12]
 8022982:	891b      	ldrh	r3, [r3, #8]
 8022984:	b21b      	sxth	r3, r3
 8022986:	2b00      	cmp	r3, #0
 8022988:	da01      	bge.n	802298e <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 802298a:	2302      	movs	r3, #2
 802298c:	e018      	b.n	80229c0 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 802298e:	68fb      	ldr	r3, [r7, #12]
 8022990:	891b      	ldrh	r3, [r3, #8]
 8022992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022996:	2b00      	cmp	r3, #0
 8022998:	d00b      	beq.n	80229b2 <lv_style_get_prop_inlined+0x170>
 802299a:	68fb      	ldr	r3, [r7, #12]
 802299c:	891b      	ldrh	r3, [r3, #8]
 802299e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80229a2:	b29b      	uxth	r3, r3
 80229a4:	4618      	mov	r0, r3
 80229a6:	f000 f949 	bl	8022c3c <lv_style_prop_get_default>
 80229aa:	4602      	mov	r2, r0
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	601a      	str	r2, [r3, #0]
 80229b0:	e003      	b.n	80229ba <lv_style_get_prop_inlined+0x178>
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	68fa      	ldr	r2, [r7, #12]
 80229b6:	6852      	ldr	r2, [r2, #4]
 80229b8:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 80229ba:	2301      	movs	r3, #1
 80229bc:	e000      	b.n	80229c0 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 80229be:	2300      	movs	r3, #0
}
 80229c0:	4618      	mov	r0, r3
 80229c2:	3730      	adds	r7, #48	; 0x30
 80229c4:	46bd      	mov	sp, r7
 80229c6:	bd80      	pop	{r7, pc}

080229c8 <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
 80229c8:	b580      	push	{r7, lr}
 80229ca:	b082      	sub	sp, #8
 80229cc:	af00      	add	r7, sp, #0
 80229ce:	6078      	str	r0, [r7, #4]
#if LV_USE_ASSERT_STYLE
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	681b      	ldr	r3, [r3, #0]
 80229d4:	4a06      	ldr	r2, [pc, #24]	; (80229f0 <lv_style_init+0x28>)
 80229d6:	4293      	cmp	r3, r2
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 80229d8:	210c      	movs	r1, #12
 80229da:	6878      	ldr	r0, [r7, #4]
 80229dc:	f7ff fdf6 	bl	80225cc <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	4a03      	ldr	r2, [pc, #12]	; (80229f0 <lv_style_init+0x28>)
 80229e4:	601a      	str	r2, [r3, #0]
#endif
}
 80229e6:	bf00      	nop
 80229e8:	3708      	adds	r7, #8
 80229ea:	46bd      	mov	sp, r7
 80229ec:	bd80      	pop	{r7, pc}
 80229ee:	bf00      	nop
 80229f0:	aabbccdd 	.word	0xaabbccdd

080229f4 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
 80229f4:	b580      	push	{r7, lr}
 80229f6:	b082      	sub	sp, #8
 80229f8:	af00      	add	r7, sp, #0
 80229fa:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	d100      	bne.n	8022a04 <lv_style_reset+0x10>
 8022a02:	e7fe      	b.n	8022a02 <lv_style_reset+0xe>
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	681b      	ldr	r3, [r3, #0]
 8022a08:	4a0f      	ldr	r2, [pc, #60]	; (8022a48 <lv_style_reset+0x54>)
 8022a0a:	4293      	cmp	r3, r2
 8022a0c:	d000      	beq.n	8022a10 <lv_style_reset+0x1c>
 8022a0e:	e7fe      	b.n	8022a0e <lv_style_reset+0x1a>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	891b      	ldrh	r3, [r3, #8]
 8022a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022a18:	4293      	cmp	r3, r2
 8022a1a:	d010      	beq.n	8022a3e <lv_style_reset+0x4a>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8022a1c:	687b      	ldr	r3, [r7, #4]
 8022a1e:	7adb      	ldrb	r3, [r3, #11]
 8022a20:	2b01      	cmp	r3, #1
 8022a22:	d904      	bls.n	8022a2e <lv_style_reset+0x3a>
 8022a24:	687b      	ldr	r3, [r7, #4]
 8022a26:	685b      	ldr	r3, [r3, #4]
 8022a28:	4618      	mov	r0, r3
 8022a2a:	f7ff f9cb 	bl	8021dc4 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8022a2e:	210c      	movs	r1, #12
 8022a30:	6878      	ldr	r0, [r7, #4]
 8022a32:	f7ff fdcb 	bl	80225cc <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	4a03      	ldr	r2, [pc, #12]	; (8022a48 <lv_style_reset+0x54>)
 8022a3a:	601a      	str	r2, [r3, #0]
 8022a3c:	e000      	b.n	8022a40 <lv_style_reset+0x4c>
        return;
 8022a3e:	bf00      	nop
#endif
}
 8022a40:	3708      	adds	r7, #8
 8022a42:	46bd      	mov	sp, r7
 8022a44:	bd80      	pop	{r7, pc}
 8022a46:	bf00      	nop
 8022a48:	aabbccdd 	.word	0xaabbccdd

08022a4c <lv_style_remove_prop>:
{
    return last_custom_prop_id - _LV_STYLE_LAST_BUILT_IN_PROP;
}

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8022a4c:	b580      	push	{r7, lr}
 8022a4e:	b08c      	sub	sp, #48	; 0x30
 8022a50:	af00      	add	r7, sp, #0
 8022a52:	6078      	str	r0, [r7, #4]
 8022a54:	460b      	mov	r3, r1
 8022a56:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	d100      	bne.n	8022a60 <lv_style_remove_prop+0x14>
 8022a5e:	e7fe      	b.n	8022a5e <lv_style_remove_prop+0x12>
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	681b      	ldr	r3, [r3, #0]
 8022a64:	4a61      	ldr	r2, [pc, #388]	; (8022bec <lv_style_remove_prop+0x1a0>)
 8022a66:	4293      	cmp	r3, r2
 8022a68:	d000      	beq.n	8022a6c <lv_style_remove_prop+0x20>
 8022a6a:	e7fe      	b.n	8022a6a <lv_style_remove_prop+0x1e>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	891b      	ldrh	r3, [r3, #8]
 8022a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022a74:	4293      	cmp	r3, r2
 8022a76:	d101      	bne.n	8022a7c <lv_style_remove_prop+0x30>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
 8022a78:	2300      	movs	r3, #0
 8022a7a:	e0b2      	b.n	8022be2 <lv_style_remove_prop+0x196>
    }

    if(style->prop_cnt == 0)  return false;
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	7adb      	ldrb	r3, [r3, #11]
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d101      	bne.n	8022a88 <lv_style_remove_prop+0x3c>
 8022a84:	2300      	movs	r3, #0
 8022a86:	e0ac      	b.n	8022be2 <lv_style_remove_prop+0x196>

    if(style->prop_cnt == 1) {
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	7adb      	ldrb	r3, [r3, #11]
 8022a8c:	2b01      	cmp	r3, #1
 8022a8e:	d110      	bne.n	8022ab2 <lv_style_remove_prop+0x66>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	891b      	ldrh	r3, [r3, #8]
 8022a94:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022a98:	887b      	ldrh	r3, [r7, #2]
 8022a9a:	429a      	cmp	r2, r3
 8022a9c:	d107      	bne.n	8022aae <lv_style_remove_prop+0x62>
            style->prop1 = LV_STYLE_PROP_INV;
 8022a9e:	687b      	ldr	r3, [r7, #4]
 8022aa0:	2200      	movs	r2, #0
 8022aa2:	811a      	strh	r2, [r3, #8]
            style->prop_cnt = 0;
 8022aa4:	687b      	ldr	r3, [r7, #4]
 8022aa6:	2200      	movs	r2, #0
 8022aa8:	72da      	strb	r2, [r3, #11]
            return true;
 8022aaa:	2301      	movs	r3, #1
 8022aac:	e099      	b.n	8022be2 <lv_style_remove_prop+0x196>
        }
        return false;
 8022aae:	2300      	movs	r3, #0
 8022ab0:	e097      	b.n	8022be2 <lv_style_remove_prop+0x196>
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	685a      	ldr	r2, [r3, #4]
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	7adb      	ldrb	r3, [r3, #11]
 8022aba:	009b      	lsls	r3, r3, #2
 8022abc:	4413      	add	r3, r2
 8022abe:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t * old_props = (uint16_t *)tmp;
 8022ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ac2:	623b      	str	r3, [r7, #32]
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
 8022ac4:	2300      	movs	r3, #0
 8022ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022ac8:	e083      	b.n	8022bd2 <lv_style_remove_prop+0x186>
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8022aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022acc:	005b      	lsls	r3, r3, #1
 8022ace:	6a3a      	ldr	r2, [r7, #32]
 8022ad0:	4413      	add	r3, r2
 8022ad2:	881b      	ldrh	r3, [r3, #0]
 8022ad4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022ad8:	887b      	ldrh	r3, [r7, #2]
 8022ada:	429a      	cmp	r2, r3
 8022adc:	d176      	bne.n	8022bcc <lv_style_remove_prop+0x180>
            lv_style_value_t * old_values = (lv_style_value_t *)style->v_p.values_and_props;
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	685b      	ldr	r3, [r3, #4]
 8022ae2:	61fb      	str	r3, [r7, #28]

            if(style->prop_cnt == 2) {
 8022ae4:	687b      	ldr	r3, [r7, #4]
 8022ae6:	7adb      	ldrb	r3, [r3, #11]
 8022ae8:	2b02      	cmp	r3, #2
 8022aea:	d119      	bne.n	8022b20 <lv_style_remove_prop+0xd4>
                style->prop_cnt = 1;
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	2201      	movs	r2, #1
 8022af0:	72da      	strb	r2, [r3, #11]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8022af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022af4:	2b00      	cmp	r3, #0
 8022af6:	d102      	bne.n	8022afe <lv_style_remove_prop+0xb2>
 8022af8:	6a3b      	ldr	r3, [r7, #32]
 8022afa:	885b      	ldrh	r3, [r3, #2]
 8022afc:	e001      	b.n	8022b02 <lv_style_remove_prop+0xb6>
 8022afe:	6a3b      	ldr	r3, [r7, #32]
 8022b00:	881b      	ldrh	r3, [r3, #0]
 8022b02:	687a      	ldr	r2, [r7, #4]
 8022b04:	8113      	strh	r3, [r2, #8]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8022b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b08:	2b00      	cmp	r3, #0
 8022b0a:	d104      	bne.n	8022b16 <lv_style_remove_prop+0xca>
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	69fa      	ldr	r2, [r7, #28]
 8022b10:	6852      	ldr	r2, [r2, #4]
 8022b12:	605a      	str	r2, [r3, #4]
 8022b14:	e055      	b.n	8022bc2 <lv_style_remove_prop+0x176>
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	69fa      	ldr	r2, [r7, #28]
 8022b1a:	6812      	ldr	r2, [r2, #0]
 8022b1c:	605a      	str	r2, [r3, #4]
 8022b1e:	e050      	b.n	8022bc2 <lv_style_remove_prop+0x176>
            }
            else {
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8022b20:	687b      	ldr	r3, [r7, #4]
 8022b22:	7adb      	ldrb	r3, [r3, #11]
 8022b24:	3b01      	subs	r3, #1
 8022b26:	461a      	mov	r2, r3
 8022b28:	4613      	mov	r3, r2
 8022b2a:	005b      	lsls	r3, r3, #1
 8022b2c:	4413      	add	r3, r2
 8022b2e:	005b      	lsls	r3, r3, #1
 8022b30:	61bb      	str	r3, [r7, #24]
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8022b32:	69b8      	ldr	r0, [r7, #24]
 8022b34:	f7ff f916 	bl	8021d64 <lv_mem_alloc>
 8022b38:	6178      	str	r0, [r7, #20]
                if(new_values_and_props == NULL) return false;
 8022b3a:	697b      	ldr	r3, [r7, #20]
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d101      	bne.n	8022b44 <lv_style_remove_prop+0xf8>
 8022b40:	2300      	movs	r3, #0
 8022b42:	e04e      	b.n	8022be2 <lv_style_remove_prop+0x196>
                style->v_p.values_and_props = new_values_and_props;
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	697a      	ldr	r2, [r7, #20]
 8022b48:	605a      	str	r2, [r3, #4]
                style->prop_cnt--;
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	7adb      	ldrb	r3, [r3, #11]
 8022b4e:	3b01      	subs	r3, #1
 8022b50:	b2da      	uxtb	r2, r3
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	72da      	strb	r2, [r3, #11]

                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	7adb      	ldrb	r3, [r3, #11]
 8022b5a:	009b      	lsls	r3, r3, #2
 8022b5c:	697a      	ldr	r2, [r7, #20]
 8022b5e:	4413      	add	r3, r2
 8022b60:	627b      	str	r3, [r7, #36]	; 0x24
                uint16_t * new_props = (uint16_t *)tmp;
 8022b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b64:	613b      	str	r3, [r7, #16]
                lv_style_value_t * new_values = (lv_style_value_t *)new_values_and_props;
 8022b66:	697b      	ldr	r3, [r7, #20]
 8022b68:	60fb      	str	r3, [r7, #12]

                uint32_t j;
                for(i = j = 0; j <= style->prop_cnt;
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8022b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022b72:	e020      	b.n	8022bb6 <lv_style_remove_prop+0x16a>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
                    if(old_props[j] != prop) {
 8022b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b76:	005b      	lsls	r3, r3, #1
 8022b78:	6a3a      	ldr	r2, [r7, #32]
 8022b7a:	4413      	add	r3, r2
 8022b7c:	881b      	ldrh	r3, [r3, #0]
 8022b7e:	887a      	ldrh	r2, [r7, #2]
 8022b80:	429a      	cmp	r2, r3
 8022b82:	d015      	beq.n	8022bb0 <lv_style_remove_prop+0x164>
                        new_values[i] = old_values[j];
 8022b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b86:	009b      	lsls	r3, r3, #2
 8022b88:	69fa      	ldr	r2, [r7, #28]
 8022b8a:	441a      	add	r2, r3
 8022b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b8e:	009b      	lsls	r3, r3, #2
 8022b90:	68f9      	ldr	r1, [r7, #12]
 8022b92:	440b      	add	r3, r1
 8022b94:	6812      	ldr	r2, [r2, #0]
 8022b96:	601a      	str	r2, [r3, #0]
                        new_props[i++] = old_props[j];
 8022b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b9a:	005b      	lsls	r3, r3, #1
 8022b9c:	6a3a      	ldr	r2, [r7, #32]
 8022b9e:	441a      	add	r2, r3
 8022ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ba2:	1c59      	adds	r1, r3, #1
 8022ba4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8022ba6:	005b      	lsls	r3, r3, #1
 8022ba8:	6939      	ldr	r1, [r7, #16]
 8022baa:	440b      	add	r3, r1
 8022bac:	8812      	ldrh	r2, [r2, #0]
 8022bae:	801a      	strh	r2, [r3, #0]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8022bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bb2:	3301      	adds	r3, #1
 8022bb4:	62bb      	str	r3, [r7, #40]	; 0x28
                for(i = j = 0; j <= style->prop_cnt;
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	7adb      	ldrb	r3, [r3, #11]
 8022bba:	461a      	mov	r2, r3
 8022bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bbe:	4293      	cmp	r3, r2
 8022bc0:	d9d8      	bls.n	8022b74 <lv_style_remove_prop+0x128>
                    }
                }
            }

            lv_mem_free(old_values);
 8022bc2:	69f8      	ldr	r0, [r7, #28]
 8022bc4:	f7ff f8fe 	bl	8021dc4 <lv_mem_free>
            return true;
 8022bc8:	2301      	movs	r3, #1
 8022bca:	e00a      	b.n	8022be2 <lv_style_remove_prop+0x196>
    for(i = 0; i < style->prop_cnt; i++) {
 8022bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022bce:	3301      	adds	r3, #1
 8022bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022bd2:	687b      	ldr	r3, [r7, #4]
 8022bd4:	7adb      	ldrb	r3, [r3, #11]
 8022bd6:	461a      	mov	r2, r3
 8022bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022bda:	4293      	cmp	r3, r2
 8022bdc:	f4ff af75 	bcc.w	8022aca <lv_style_remove_prop+0x7e>
        }
    }

    return false;
 8022be0:	2300      	movs	r3, #0
}
 8022be2:	4618      	mov	r0, r3
 8022be4:	3730      	adds	r7, #48	; 0x30
 8022be6:	46bd      	mov	sp, r7
 8022be8:	bd80      	pop	{r7, pc}
 8022bea:	bf00      	nop
 8022bec:	aabbccdd 	.word	0xaabbccdd

08022bf0 <lv_style_set_prop>:

void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
{
 8022bf0:	b580      	push	{r7, lr}
 8022bf2:	b084      	sub	sp, #16
 8022bf4:	af00      	add	r7, sp, #0
 8022bf6:	60f8      	str	r0, [r7, #12]
 8022bf8:	460b      	mov	r3, r1
 8022bfa:	607a      	str	r2, [r7, #4]
 8022bfc:	817b      	strh	r3, [r7, #10]
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 8022bfe:	8979      	ldrh	r1, [r7, #10]
 8022c00:	4b04      	ldr	r3, [pc, #16]	; (8022c14 <lv_style_set_prop+0x24>)
 8022c02:	687a      	ldr	r2, [r7, #4]
 8022c04:	68f8      	ldr	r0, [r7, #12]
 8022c06:	f000 f9a5 	bl	8022f54 <lv_style_set_prop_internal>
}
 8022c0a:	bf00      	nop
 8022c0c:	3710      	adds	r7, #16
 8022c0e:	46bd      	mov	sp, r7
 8022c10:	bd80      	pop	{r7, pc}
 8022c12:	bf00      	nop
 8022c14:	08022f2d 	.word	0x08022f2d

08022c18 <lv_style_get_prop>:
{
    lv_style_set_prop_internal(style, prop | meta, null_style_value, lv_style_set_prop_meta_helper);
}

lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 8022c18:	b580      	push	{r7, lr}
 8022c1a:	b084      	sub	sp, #16
 8022c1c:	af00      	add	r7, sp, #0
 8022c1e:	60f8      	str	r0, [r7, #12]
 8022c20:	460b      	mov	r3, r1
 8022c22:	607a      	str	r2, [r7, #4]
 8022c24:	817b      	strh	r3, [r7, #10]
    return lv_style_get_prop_inlined(style, prop, value);
 8022c26:	897b      	ldrh	r3, [r7, #10]
 8022c28:	687a      	ldr	r2, [r7, #4]
 8022c2a:	4619      	mov	r1, r3
 8022c2c:	68f8      	ldr	r0, [r7, #12]
 8022c2e:	f7ff fe08 	bl	8022842 <lv_style_get_prop_inlined>
 8022c32:	4603      	mov	r3, r0
}
 8022c34:	4618      	mov	r0, r3
 8022c36:	3710      	adds	r7, #16
 8022c38:	46bd      	mov	sp, r7
 8022c3a:	bd80      	pop	{r7, pc}

08022c3c <lv_style_prop_get_default>:
    LV_UNUSED(user_data);
#endif
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
 8022c3c:	b580      	push	{r7, lr}
 8022c3e:	b084      	sub	sp, #16
 8022c40:	af00      	add	r7, sp, #0
 8022c42:	4603      	mov	r3, r0
 8022c44:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value;
    switch(prop) {
 8022c46:	88fb      	ldrh	r3, [r7, #6]
 8022c48:	3b03      	subs	r3, #3
 8022c4a:	2b69      	cmp	r3, #105	; 0x69
 8022c4c:	f200 80f4 	bhi.w	8022e38 <lv_style_prop_get_default+0x1fc>
 8022c50:	a201      	add	r2, pc, #4	; (adr r2, 8022c58 <lv_style_prop_get_default+0x1c>)
 8022c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022c56:	bf00      	nop
 8022c58:	08022e31 	.word	0x08022e31
 8022c5c:	08022e39 	.word	0x08022e39
 8022c60:	08022e39 	.word	0x08022e39
 8022c64:	08022e31 	.word	0x08022e31
 8022c68:	08022e39 	.word	0x08022e39
 8022c6c:	08022e39 	.word	0x08022e39
 8022c70:	08022e39 	.word	0x08022e39
 8022c74:	08022e39 	.word	0x08022e39
 8022c78:	08022e39 	.word	0x08022e39
 8022c7c:	08022e39 	.word	0x08022e39
 8022c80:	08022e39 	.word	0x08022e39
 8022c84:	08022e39 	.word	0x08022e39
 8022c88:	08022e39 	.word	0x08022e39
 8022c8c:	08022e39 	.word	0x08022e39
 8022c90:	08022e39 	.word	0x08022e39
 8022c94:	08022e39 	.word	0x08022e39
 8022c98:	08022e39 	.word	0x08022e39
 8022c9c:	08022e39 	.word	0x08022e39
 8022ca0:	08022e39 	.word	0x08022e39
 8022ca4:	08022e39 	.word	0x08022e39
 8022ca8:	08022e39 	.word	0x08022e39
 8022cac:	08022e39 	.word	0x08022e39
 8022cb0:	08022e39 	.word	0x08022e39
 8022cb4:	08022e39 	.word	0x08022e39
 8022cb8:	08022e39 	.word	0x08022e39
 8022cbc:	08022e39 	.word	0x08022e39
 8022cc0:	08022e39 	.word	0x08022e39
 8022cc4:	08022e39 	.word	0x08022e39
 8022cc8:	08022e39 	.word	0x08022e39
 8022ccc:	08022e09 	.word	0x08022e09
 8022cd0:	08022e39 	.word	0x08022e39
 8022cd4:	08022e11 	.word	0x08022e11
 8022cd8:	08022e39 	.word	0x08022e39
 8022cdc:	08022e39 	.word	0x08022e39
 8022ce0:	08022e1f 	.word	0x08022e1f
 8022ce4:	08022e39 	.word	0x08022e39
 8022ce8:	08022e39 	.word	0x08022e39
 8022cec:	08022e39 	.word	0x08022e39
 8022cf0:	08022e19 	.word	0x08022e19
 8022cf4:	08022e39 	.word	0x08022e39
 8022cf8:	08022e39 	.word	0x08022e39
 8022cfc:	08022e39 	.word	0x08022e39
 8022d00:	08022e39 	.word	0x08022e39
 8022d04:	08022e39 	.word	0x08022e39
 8022d08:	08022e39 	.word	0x08022e39
 8022d0c:	08022e11 	.word	0x08022e11
 8022d10:	08022e19 	.word	0x08022e19
 8022d14:	08022e39 	.word	0x08022e39
 8022d18:	08022e25 	.word	0x08022e25
 8022d1c:	08022e39 	.word	0x08022e39
 8022d20:	08022e39 	.word	0x08022e39
 8022d24:	08022e11 	.word	0x08022e11
 8022d28:	08022e19 	.word	0x08022e19
 8022d2c:	08022e39 	.word	0x08022e39
 8022d30:	08022e39 	.word	0x08022e39
 8022d34:	08022e39 	.word	0x08022e39
 8022d38:	08022e39 	.word	0x08022e39
 8022d3c:	08022e39 	.word	0x08022e39
 8022d40:	08022e39 	.word	0x08022e39
 8022d44:	08022e39 	.word	0x08022e39
 8022d48:	08022e39 	.word	0x08022e39
 8022d4c:	08022e39 	.word	0x08022e39
 8022d50:	08022e39 	.word	0x08022e39
 8022d54:	08022e39 	.word	0x08022e39
 8022d58:	08022e39 	.word	0x08022e39
 8022d5c:	08022e11 	.word	0x08022e11
 8022d60:	08022e19 	.word	0x08022e19
 8022d64:	08022e19 	.word	0x08022e19
 8022d68:	08022e11 	.word	0x08022e11
 8022d6c:	08022e39 	.word	0x08022e39
 8022d70:	08022e39 	.word	0x08022e39
 8022d74:	08022e39 	.word	0x08022e39
 8022d78:	08022e39 	.word	0x08022e39
 8022d7c:	08022e39 	.word	0x08022e39
 8022d80:	08022e11 	.word	0x08022e11
 8022d84:	08022e19 	.word	0x08022e19
 8022d88:	08022e39 	.word	0x08022e39
 8022d8c:	08022e39 	.word	0x08022e39
 8022d90:	08022e39 	.word	0x08022e39
 8022d94:	08022e11 	.word	0x08022e11
 8022d98:	08022e19 	.word	0x08022e19
 8022d9c:	08022e39 	.word	0x08022e39
 8022da0:	08022e11 	.word	0x08022e11
 8022da4:	08022e19 	.word	0x08022e19
 8022da8:	08022e2b 	.word	0x08022e2b
 8022dac:	08022e39 	.word	0x08022e39
 8022db0:	08022e39 	.word	0x08022e39
 8022db4:	08022e39 	.word	0x08022e39
 8022db8:	08022e39 	.word	0x08022e39
 8022dbc:	08022e39 	.word	0x08022e39
 8022dc0:	08022e39 	.word	0x08022e39
 8022dc4:	08022e39 	.word	0x08022e39
 8022dc8:	08022e39 	.word	0x08022e39
 8022dcc:	08022e19 	.word	0x08022e19
 8022dd0:	08022e39 	.word	0x08022e39
 8022dd4:	08022e39 	.word	0x08022e39
 8022dd8:	08022e39 	.word	0x08022e39
 8022ddc:	08022e39 	.word	0x08022e39
 8022de0:	08022e39 	.word	0x08022e39
 8022de4:	08022e39 	.word	0x08022e39
 8022de8:	08022e39 	.word	0x08022e39
 8022dec:	08022e39 	.word	0x08022e39
 8022df0:	08022e39 	.word	0x08022e39
 8022df4:	08022e39 	.word	0x08022e39
 8022df8:	08022e39 	.word	0x08022e39
 8022dfc:	08022e01 	.word	0x08022e01
        case LV_STYLE_TRANSFORM_ZOOM:
            value.num = LV_IMG_ZOOM_NONE;
 8022e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022e04:	60fb      	str	r3, [r7, #12]
            break;
 8022e06:	e01c      	b.n	8022e42 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_COLOR:
            value.color = lv_color_white();
 8022e08:	f7ff fd07 	bl	802281a <lv_color_white>
 8022e0c:	7338      	strb	r0, [r7, #12]
            break;
 8022e0e:	e018      	b.n	8022e42 <lv_style_prop_get_default+0x206>
        case LV_STYLE_OUTLINE_COLOR:
        case LV_STYLE_ARC_COLOR:
        case LV_STYLE_LINE_COLOR:
        case LV_STYLE_TEXT_COLOR:
        case LV_STYLE_IMG_RECOLOR:
            value.color = lv_color_black();
 8022e10:	f7ff fd0d 	bl	802282e <lv_color_black>
 8022e14:	7338      	strb	r0, [r7, #12]
            break;
 8022e16:	e014      	b.n	8022e42 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 8022e18:	23ff      	movs	r3, #255	; 0xff
 8022e1a:	60fb      	str	r3, [r7, #12]
            break;
 8022e1c:	e011      	b.n	8022e42 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_GRAD_STOP:
            value.num = 255;
 8022e1e:	23ff      	movs	r3, #255	; 0xff
 8022e20:	60fb      	str	r3, [r7, #12]
            break;
 8022e22:	e00e      	b.n	8022e42 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BORDER_SIDE:
            value.num = LV_BORDER_SIDE_FULL;
 8022e24:	230f      	movs	r3, #15
 8022e26:	60fb      	str	r3, [r7, #12]
            break;
 8022e28:	e00b      	b.n	8022e42 <lv_style_prop_get_default+0x206>
        case LV_STYLE_TEXT_FONT:
            value.ptr = LV_FONT_DEFAULT;
 8022e2a:	4b08      	ldr	r3, [pc, #32]	; (8022e4c <lv_style_prop_get_default+0x210>)
 8022e2c:	60fb      	str	r3, [r7, #12]
            break;
 8022e2e:	e008      	b.n	8022e42 <lv_style_prop_get_default+0x206>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
 8022e30:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8022e34:	60fb      	str	r3, [r7, #12]
            break;
 8022e36:	e004      	b.n	8022e42 <lv_style_prop_get_default+0x206>
        default:
            value.ptr = NULL;
 8022e38:	2300      	movs	r3, #0
 8022e3a:	60fb      	str	r3, [r7, #12]
            value.num = 0;
 8022e3c:	2300      	movs	r3, #0
 8022e3e:	60fb      	str	r3, [r7, #12]
            break;
 8022e40:	bf00      	nop
    }

    return value;
 8022e42:	68fb      	ldr	r3, [r7, #12]
}
 8022e44:	4618      	mov	r0, r3
 8022e46:	3710      	adds	r7, #16
 8022e48:	46bd      	mov	sp, r7
 8022e4a:	bd80      	pop	{r7, pc}
 8022e4c:	0802d92c 	.word	0x0802d92c

08022e50 <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
 8022e50:	b480      	push	{r7}
 8022e52:	b083      	sub	sp, #12
 8022e54:	af00      	add	r7, sp, #0
 8022e56:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d100      	bne.n	8022e60 <lv_style_is_empty+0x10>
 8022e5e:	e7fe      	b.n	8022e5e <lv_style_is_empty+0xe>
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	681b      	ldr	r3, [r3, #0]
 8022e64:	4a08      	ldr	r2, [pc, #32]	; (8022e88 <lv_style_is_empty+0x38>)
 8022e66:	4293      	cmp	r3, r2
 8022e68:	d000      	beq.n	8022e6c <lv_style_is_empty+0x1c>
 8022e6a:	e7fe      	b.n	8022e6a <lv_style_is_empty+0x1a>

    return style->prop_cnt == 0 ? true : false;
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	7adb      	ldrb	r3, [r3, #11]
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	bf0c      	ite	eq
 8022e74:	2301      	moveq	r3, #1
 8022e76:	2300      	movne	r3, #0
 8022e78:	b2db      	uxtb	r3, r3
}
 8022e7a:	4618      	mov	r0, r3
 8022e7c:	370c      	adds	r7, #12
 8022e7e:	46bd      	mov	sp, r7
 8022e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e84:	4770      	bx	lr
 8022e86:	bf00      	nop
 8022e88:	aabbccdd 	.word	0xaabbccdd

08022e8c <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
 8022e8c:	b480      	push	{r7}
 8022e8e:	b085      	sub	sp, #20
 8022e90:	af00      	add	r7, sp, #0
 8022e92:	4603      	mov	r3, r0
 8022e94:	80fb      	strh	r3, [r7, #6]
    uint16_t group = (prop & 0x1FF) >> 4;
 8022e96:	88fb      	ldrh	r3, [r7, #6]
 8022e98:	111b      	asrs	r3, r3, #4
 8022e9a:	b29b      	uxth	r3, r3
 8022e9c:	f003 031f 	and.w	r3, r3, #31
 8022ea0:	81fb      	strh	r3, [r7, #14]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8022ea2:	89fb      	ldrh	r3, [r7, #14]
 8022ea4:	2b07      	cmp	r3, #7
 8022ea6:	d901      	bls.n	8022eac <_lv_style_get_prop_group+0x20>
 8022ea8:	2307      	movs	r3, #7
 8022eaa:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)group;
 8022eac:	89fb      	ldrh	r3, [r7, #14]
 8022eae:	b2db      	uxtb	r3, r3
}
 8022eb0:	4618      	mov	r0, r3
 8022eb2:	3714      	adds	r7, #20
 8022eb4:	46bd      	mov	sp, r7
 8022eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eba:	4770      	bx	lr

08022ebc <_lv_style_prop_lookup_flags>:

uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop)
{
 8022ebc:	b480      	push	{r7}
 8022ebe:	b083      	sub	sp, #12
 8022ec0:	af00      	add	r7, sp, #0
 8022ec2:	4603      	mov	r3, r0
 8022ec4:	80fb      	strh	r3, [r7, #6]
    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    extern uint32_t _lv_style_custom_prop_flag_lookup_table_size;
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8022ec6:	88fb      	ldrh	r3, [r7, #6]
 8022ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022ecc:	4293      	cmp	r3, r2
 8022ece:	d101      	bne.n	8022ed4 <_lv_style_prop_lookup_flags+0x18>
 8022ed0:	231f      	movs	r3, #31
 8022ed2:	e01e      	b.n	8022f12 <_lv_style_prop_lookup_flags+0x56>
    if(prop == LV_STYLE_PROP_INV) return 0;
 8022ed4:	88fb      	ldrh	r3, [r7, #6]
 8022ed6:	2b00      	cmp	r3, #0
 8022ed8:	d101      	bne.n	8022ede <_lv_style_prop_lookup_flags+0x22>
 8022eda:	2300      	movs	r3, #0
 8022edc:	e019      	b.n	8022f12 <_lv_style_prop_lookup_flags+0x56>

    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 8022ede:	88fb      	ldrh	r3, [r7, #6]
 8022ee0:	2b6f      	cmp	r3, #111	; 0x6f
 8022ee2:	d803      	bhi.n	8022eec <_lv_style_prop_lookup_flags+0x30>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 8022ee4:	88fb      	ldrh	r3, [r7, #6]
 8022ee6:	4a0e      	ldr	r2, [pc, #56]	; (8022f20 <_lv_style_prop_lookup_flags+0x64>)
 8022ee8:	5cd3      	ldrb	r3, [r2, r3]
 8022eea:	e012      	b.n	8022f12 <_lv_style_prop_lookup_flags+0x56>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 8022eec:	88fb      	ldrh	r3, [r7, #6]
 8022eee:	3b70      	subs	r3, #112	; 0x70
 8022ef0:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8022ef2:	4b0c      	ldr	r3, [pc, #48]	; (8022f24 <_lv_style_prop_lookup_flags+0x68>)
 8022ef4:	681b      	ldr	r3, [r3, #0]
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d00a      	beq.n	8022f10 <_lv_style_prop_lookup_flags+0x54>
 8022efa:	88fa      	ldrh	r2, [r7, #6]
 8022efc:	4b0a      	ldr	r3, [pc, #40]	; (8022f28 <_lv_style_prop_lookup_flags+0x6c>)
 8022efe:	681b      	ldr	r3, [r3, #0]
 8022f00:	429a      	cmp	r2, r3
 8022f02:	d205      	bcs.n	8022f10 <_lv_style_prop_lookup_flags+0x54>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 8022f04:	4b07      	ldr	r3, [pc, #28]	; (8022f24 <_lv_style_prop_lookup_flags+0x68>)
 8022f06:	681a      	ldr	r2, [r3, #0]
 8022f08:	88fb      	ldrh	r3, [r7, #6]
 8022f0a:	4413      	add	r3, r2
 8022f0c:	781b      	ldrb	r3, [r3, #0]
 8022f0e:	e000      	b.n	8022f12 <_lv_style_prop_lookup_flags+0x56>
    return 0;
 8022f10:	2300      	movs	r3, #0
}
 8022f12:	4618      	mov	r0, r3
 8022f14:	370c      	adds	r7, #12
 8022f16:	46bd      	mov	sp, r7
 8022f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f1c:	4770      	bx	lr
 8022f1e:	bf00      	nop
 8022f20:	0802df4c 	.word	0x0802df4c
 8022f24:	20000a64 	.word	0x20000a64
 8022f28:	2000ca74 	.word	0x2000ca74

08022f2c <lv_style_set_prop_helper>:
 *   STATIC FUNCTIONS
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
 8022f2c:	b480      	push	{r7}
 8022f2e:	b085      	sub	sp, #20
 8022f30:	af00      	add	r7, sp, #0
 8022f32:	60b9      	str	r1, [r7, #8]
 8022f34:	607a      	str	r2, [r7, #4]
 8022f36:	603b      	str	r3, [r7, #0]
 8022f38:	4603      	mov	r3, r0
 8022f3a:	81fb      	strh	r3, [r7, #14]
    *prop_storage = prop;
 8022f3c:	687b      	ldr	r3, [r7, #4]
 8022f3e:	89fa      	ldrh	r2, [r7, #14]
 8022f40:	801a      	strh	r2, [r3, #0]
    *value_storage = value;
 8022f42:	683b      	ldr	r3, [r7, #0]
 8022f44:	68ba      	ldr	r2, [r7, #8]
 8022f46:	601a      	str	r2, [r3, #0]
}
 8022f48:	bf00      	nop
 8022f4a:	3714      	adds	r7, #20
 8022f4c:	46bd      	mov	sp, r7
 8022f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f52:	4770      	bx	lr

08022f54 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 8022f54:	b590      	push	{r4, r7, lr}
 8022f56:	b095      	sub	sp, #84	; 0x54
 8022f58:	af00      	add	r7, sp, #0
 8022f5a:	60f8      	str	r0, [r7, #12]
 8022f5c:	607a      	str	r2, [r7, #4]
 8022f5e:	603b      	str	r3, [r7, #0]
 8022f60:	460b      	mov	r3, r1
 8022f62:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);
 8022f64:	68fb      	ldr	r3, [r7, #12]
 8022f66:	2b00      	cmp	r3, #0
 8022f68:	d100      	bne.n	8022f6c <lv_style_set_prop_internal+0x18>
 8022f6a:	e7fe      	b.n	8022f6a <lv_style_set_prop_internal+0x16>
 8022f6c:	68fb      	ldr	r3, [r7, #12]
 8022f6e:	681b      	ldr	r3, [r3, #0]
 8022f70:	4a8b      	ldr	r2, [pc, #556]	; (80231a0 <lv_style_set_prop_internal+0x24c>)
 8022f72:	4293      	cmp	r3, r2
 8022f74:	d000      	beq.n	8022f78 <lv_style_set_prop_internal+0x24>
 8022f76:	e7fe      	b.n	8022f76 <lv_style_set_prop_internal+0x22>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022f78:	68fb      	ldr	r3, [r7, #12]
 8022f7a:	891b      	ldrh	r3, [r3, #8]
 8022f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022f80:	4293      	cmp	r3, r2
 8022f82:	f000 8104 	beq.w	802318e <lv_style_set_prop_internal+0x23a>
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8022f86:	897b      	ldrh	r3, [r7, #10]
 8022f88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022f8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    if(style->prop_cnt > 1) {
 8022f90:	68fb      	ldr	r3, [r7, #12]
 8022f92:	7adb      	ldrb	r3, [r3, #11]
 8022f94:	2b01      	cmp	r3, #1
 8022f96:	f240 808d 	bls.w	80230b4 <lv_style_set_prop_internal+0x160>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	685a      	ldr	r2, [r3, #4]
 8022f9e:	68fb      	ldr	r3, [r7, #12]
 8022fa0:	7adb      	ldrb	r3, [r3, #11]
 8022fa2:	009b      	lsls	r3, r3, #2
 8022fa4:	4413      	add	r3, r2
 8022fa6:	633b      	str	r3, [r7, #48]	; 0x30
        uint16_t * props = (uint16_t *)tmp;
 8022fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022fac:	68fb      	ldr	r3, [r7, #12]
 8022fae:	7adb      	ldrb	r3, [r3, #11]
 8022fb0:	3b01      	subs	r3, #1
 8022fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022fb4:	e01e      	b.n	8022ff4 <lv_style_set_prop_internal+0xa0>
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8022fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022fb8:	005b      	lsls	r3, r3, #1
 8022fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022fbc:	4413      	add	r3, r2
 8022fbe:	881b      	ldrh	r3, [r3, #0]
 8022fc0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022fc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8022fc8:	429a      	cmp	r2, r3
 8022fca:	d110      	bne.n	8022fee <lv_style_set_prop_internal+0x9a>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8022fcc:	68fb      	ldr	r3, [r7, #12]
 8022fce:	685b      	ldr	r3, [r3, #4]
 8022fd0:	61fb      	str	r3, [r7, #28]
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8022fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022fd4:	005b      	lsls	r3, r3, #1
 8022fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022fd8:	18d1      	adds	r1, r2, r3
 8022fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022fdc:	009b      	lsls	r3, r3, #2
 8022fde:	69fa      	ldr	r2, [r7, #28]
 8022fe0:	4413      	add	r3, r2
 8022fe2:	8978      	ldrh	r0, [r7, #10]
 8022fe4:	683c      	ldr	r4, [r7, #0]
 8022fe6:	460a      	mov	r2, r1
 8022fe8:	6879      	ldr	r1, [r7, #4]
 8022fea:	47a0      	blx	r4
                return;
 8022fec:	e0d4      	b.n	8023198 <lv_style_set_prop_internal+0x244>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022ff0:	3b01      	subs	r3, #1
 8022ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	dadd      	bge.n	8022fb6 <lv_style_set_prop_internal+0x62>
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8022ffa:	68fb      	ldr	r3, [r7, #12]
 8022ffc:	7adb      	ldrb	r3, [r3, #11]
 8022ffe:	3301      	adds	r3, #1
 8023000:	461a      	mov	r2, r3
 8023002:	4613      	mov	r3, r2
 8023004:	005b      	lsls	r3, r3, #1
 8023006:	4413      	add	r3, r2
 8023008:	005b      	lsls	r3, r3, #1
 802300a:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 802300c:	68fb      	ldr	r3, [r7, #12]
 802300e:	685b      	ldr	r3, [r3, #4]
 8023010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023012:	4618      	mov	r0, r3
 8023014:	f7fe ff04 	bl	8021e20 <lv_mem_realloc>
 8023018:	6278      	str	r0, [r7, #36]	; 0x24
        if(values_and_props == NULL) return;
 802301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802301c:	2b00      	cmp	r3, #0
 802301e:	f000 80b8 	beq.w	8023192 <lv_style_set_prop_internal+0x23e>
        style->v_p.values_and_props = values_and_props;
 8023022:	68fb      	ldr	r3, [r7, #12]
 8023024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023026:	605a      	str	r2, [r3, #4]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8023028:	68fb      	ldr	r3, [r7, #12]
 802302a:	7adb      	ldrb	r3, [r3, #11]
 802302c:	009b      	lsls	r3, r3, #2
 802302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023030:	4413      	add	r3, r2
 8023032:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 8023034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023036:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8023038:	68fb      	ldr	r3, [r7, #12]
 802303a:	7adb      	ldrb	r3, [r3, #11]
 802303c:	3b01      	subs	r3, #1
 802303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023040:	e00d      	b.n	802305e <lv_style_set_prop_internal+0x10a>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8023042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023044:	005b      	lsls	r3, r3, #1
 8023046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023048:	441a      	add	r2, r3
 802304a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802304c:	3302      	adds	r3, #2
 802304e:	005b      	lsls	r3, r3, #1
 8023050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023052:	440b      	add	r3, r1
 8023054:	8812      	ldrh	r2, [r2, #0]
 8023056:	801a      	strh	r2, [r3, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8023058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802305a:	3b01      	subs	r3, #1
 802305c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023060:	2b00      	cmp	r3, #0
 8023062:	daee      	bge.n	8023042 <lv_style_set_prop_internal+0xee>
        }
        style->prop_cnt++;
 8023064:	68fb      	ldr	r3, [r7, #12]
 8023066:	7adb      	ldrb	r3, [r3, #11]
 8023068:	3301      	adds	r3, #1
 802306a:	b2da      	uxtb	r2, r3
 802306c:	68fb      	ldr	r3, [r7, #12]
 802306e:	72da      	strb	r2, [r3, #11]

        /*Go to the new position wit the props*/
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8023070:	68fb      	ldr	r3, [r7, #12]
 8023072:	7adb      	ldrb	r3, [r3, #11]
 8023074:	009b      	lsls	r3, r3, #2
 8023076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023078:	4413      	add	r3, r2
 802307a:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 802307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802307e:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 8023080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023082:	623b      	str	r3, [r7, #32]

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8023084:	68fb      	ldr	r3, [r7, #12]
 8023086:	7adb      	ldrb	r3, [r3, #11]
 8023088:	461a      	mov	r2, r3
 802308a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802308e:	4413      	add	r3, r2
 8023090:	005b      	lsls	r3, r3, #1
 8023092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023094:	18d1      	adds	r1, r2, r3
 8023096:	68fb      	ldr	r3, [r7, #12]
 8023098:	7adb      	ldrb	r3, [r3, #11]
 802309a:	461a      	mov	r2, r3
 802309c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80230a0:	4413      	add	r3, r2
 80230a2:	009b      	lsls	r3, r3, #2
 80230a4:	6a3a      	ldr	r2, [r7, #32]
 80230a6:	4413      	add	r3, r2
 80230a8:	8978      	ldrh	r0, [r7, #10]
 80230aa:	683c      	ldr	r4, [r7, #0]
 80230ac:	460a      	mov	r2, r1
 80230ae:	6879      	ldr	r1, [r7, #4]
 80230b0:	47a0      	blx	r4
 80230b2:	e057      	b.n	8023164 <lv_style_set_prop_internal+0x210>
    }
    else if(style->prop_cnt == 1) {
 80230b4:	68fb      	ldr	r3, [r7, #12]
 80230b6:	7adb      	ldrb	r3, [r3, #11]
 80230b8:	2b01      	cmp	r3, #1
 80230ba:	d147      	bne.n	802314c <lv_style_set_prop_internal+0x1f8>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 80230bc:	68fb      	ldr	r3, [r7, #12]
 80230be:	891b      	ldrh	r3, [r3, #8]
 80230c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80230c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80230c8:	429a      	cmp	r2, r3
 80230ca:	d109      	bne.n	80230e0 <lv_style_set_prop_internal+0x18c>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 80230cc:	68fb      	ldr	r3, [r7, #12]
 80230ce:	f103 0208 	add.w	r2, r3, #8
 80230d2:	68fb      	ldr	r3, [r7, #12]
 80230d4:	3304      	adds	r3, #4
 80230d6:	8978      	ldrh	r0, [r7, #10]
 80230d8:	683c      	ldr	r4, [r7, #0]
 80230da:	6879      	ldr	r1, [r7, #4]
 80230dc:	47a0      	blx	r4
            return;
 80230de:	e05b      	b.n	8023198 <lv_style_set_prop_internal+0x244>
        }
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80230e0:	68fb      	ldr	r3, [r7, #12]
 80230e2:	7adb      	ldrb	r3, [r3, #11]
 80230e4:	3301      	adds	r3, #1
 80230e6:	461a      	mov	r2, r3
 80230e8:	4613      	mov	r3, r2
 80230ea:	005b      	lsls	r3, r3, #1
 80230ec:	4413      	add	r3, r2
 80230ee:	005b      	lsls	r3, r3, #1
 80230f0:	647b      	str	r3, [r7, #68]	; 0x44
        uint8_t * values_and_props = lv_mem_alloc(size);
 80230f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80230f4:	f7fe fe36 	bl	8021d64 <lv_mem_alloc>
 80230f8:	6438      	str	r0, [r7, #64]	; 0x40
        if(values_and_props == NULL) return;
 80230fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80230fc:	2b00      	cmp	r3, #0
 80230fe:	d04a      	beq.n	8023196 <lv_style_set_prop_internal+0x242>
        lv_style_value_t value_tmp = style->v_p.value1;
 8023100:	68fb      	ldr	r3, [r7, #12]
 8023102:	685b      	ldr	r3, [r3, #4]
 8023104:	617b      	str	r3, [r7, #20]
        style->v_p.values_and_props = values_and_props;
 8023106:	68fb      	ldr	r3, [r7, #12]
 8023108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802310a:	605a      	str	r2, [r3, #4]
        style->prop_cnt++;
 802310c:	68fb      	ldr	r3, [r7, #12]
 802310e:	7adb      	ldrb	r3, [r3, #11]
 8023110:	3301      	adds	r3, #1
 8023112:	b2da      	uxtb	r2, r3
 8023114:	68fb      	ldr	r3, [r7, #12]
 8023116:	72da      	strb	r2, [r3, #11]

        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8023118:	68fb      	ldr	r3, [r7, #12]
 802311a:	7adb      	ldrb	r3, [r3, #11]
 802311c:	009b      	lsls	r3, r3, #2
 802311e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023120:	4413      	add	r3, r2
 8023122:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint16_t * props = (uint16_t *)tmp;
 8023124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023126:	63bb      	str	r3, [r7, #56]	; 0x38
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 8023128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802312a:	637b      	str	r3, [r7, #52]	; 0x34
        props[0] = style->prop1;
 802312c:	68fb      	ldr	r3, [r7, #12]
 802312e:	891a      	ldrh	r2, [r3, #8]
 8023130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023132:	801a      	strh	r2, [r3, #0]
        values[0] = value_tmp;
 8023134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023136:	697a      	ldr	r2, [r7, #20]
 8023138:	601a      	str	r2, [r3, #0]
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 802313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802313c:	1c9a      	adds	r2, r3, #2
 802313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023140:	3304      	adds	r3, #4
 8023142:	8978      	ldrh	r0, [r7, #10]
 8023144:	683c      	ldr	r4, [r7, #0]
 8023146:	6879      	ldr	r1, [r7, #4]
 8023148:	47a0      	blx	r4
 802314a:	e00b      	b.n	8023164 <lv_style_set_prop_internal+0x210>
    }
    else {
        style->prop_cnt = 1;
 802314c:	68fb      	ldr	r3, [r7, #12]
 802314e:	2201      	movs	r2, #1
 8023150:	72da      	strb	r2, [r3, #11]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8023152:	68fb      	ldr	r3, [r7, #12]
 8023154:	f103 0208 	add.w	r2, r3, #8
 8023158:	68fb      	ldr	r3, [r7, #12]
 802315a:	3304      	adds	r3, #4
 802315c:	8978      	ldrh	r0, [r7, #10]
 802315e:	683c      	ldr	r4, [r7, #0]
 8023160:	6879      	ldr	r1, [r7, #4]
 8023162:	47a0      	blx	r4
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 8023164:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8023168:	4618      	mov	r0, r3
 802316a:	f7ff fe8f 	bl	8022e8c <_lv_style_get_prop_group>
 802316e:	4603      	mov	r3, r0
 8023170:	76fb      	strb	r3, [r7, #27]
    style->has_group |= 1 << group;
 8023172:	68fb      	ldr	r3, [r7, #12]
 8023174:	7a9b      	ldrb	r3, [r3, #10]
 8023176:	b25a      	sxtb	r2, r3
 8023178:	7efb      	ldrb	r3, [r7, #27]
 802317a:	2101      	movs	r1, #1
 802317c:	fa01 f303 	lsl.w	r3, r1, r3
 8023180:	b25b      	sxtb	r3, r3
 8023182:	4313      	orrs	r3, r2
 8023184:	b25b      	sxtb	r3, r3
 8023186:	b2da      	uxtb	r2, r3
 8023188:	68fb      	ldr	r3, [r7, #12]
 802318a:	729a      	strb	r2, [r3, #10]
 802318c:	e004      	b.n	8023198 <lv_style_set_prop_internal+0x244>
        return;
 802318e:	bf00      	nop
 8023190:	e002      	b.n	8023198 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8023192:	bf00      	nop
 8023194:	e000      	b.n	8023198 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8023196:	bf00      	nop
}
 8023198:	3754      	adds	r7, #84	; 0x54
 802319a:	46bd      	mov	sp, r7
 802319c:	bd90      	pop	{r4, r7, pc}
 802319e:	bf00      	nop
 80231a0:	aabbccdd 	.word	0xaabbccdd

080231a4 <lv_style_set_text_font>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_OPA, v);
}

void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
{
 80231a4:	b580      	push	{r7, lr}
 80231a6:	b084      	sub	sp, #16
 80231a8:	af00      	add	r7, sp, #0
 80231aa:	6078      	str	r0, [r7, #4]
 80231ac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = {
 80231ae:	683b      	ldr	r3, [r7, #0]
 80231b0:	60fb      	str	r3, [r7, #12]
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 80231b2:	68fa      	ldr	r2, [r7, #12]
 80231b4:	2157      	movs	r1, #87	; 0x57
 80231b6:	6878      	ldr	r0, [r7, #4]
 80231b8:	f7ff fd1a 	bl	8022bf0 <lv_style_set_prop>
}
 80231bc:	bf00      	nop
 80231be:	3710      	adds	r7, #16
 80231c0:	46bd      	mov	sp, r7
 80231c2:	bd80      	pop	{r7, pc}

080231c4 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 80231c4:	b580      	push	{r7, lr}
 80231c6:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 80231c8:	2118      	movs	r1, #24
 80231ca:	4804      	ldr	r0, [pc, #16]	; (80231dc <_lv_timer_core_init+0x18>)
 80231cc:	f7fe fb2d 	bl	802182a <_lv_ll_init>

    /*Initially enable the lv_timer handling*/
    lv_timer_enable(true);
 80231d0:	2001      	movs	r0, #1
 80231d2:	f000 f94d 	bl	8023470 <lv_timer_enable>
}
 80231d6:	bf00      	nop
 80231d8:	bd80      	pop	{r7, pc}
 80231da:	bf00      	nop
 80231dc:	2000085c 	.word	0x2000085c

080231e0 <lv_timer_handler>:
/**
 * Call it periodically to handle lv_timers.
 * @return the time after which it must be called again
 */
LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler(void)
{
 80231e0:	b580      	push	{r7, lr}
 80231e2:	b086      	sub	sp, #24
 80231e4:	af00      	add	r7, sp, #0
    TIMER_TRACE("begin");

    /*Avoid concurrent running of the timer handler*/
    static bool already_running = false;
    if(already_running) {
 80231e6:	4b59      	ldr	r3, [pc, #356]	; (802334c <lv_timer_handler+0x16c>)
 80231e8:	781b      	ldrb	r3, [r3, #0]
 80231ea:	2b00      	cmp	r3, #0
 80231ec:	d001      	beq.n	80231f2 <lv_timer_handler+0x12>
        TIMER_TRACE("already running, concurrent calls are not allow, returning");
        return 1;
 80231ee:	2301      	movs	r3, #1
 80231f0:	e0a7      	b.n	8023342 <lv_timer_handler+0x162>
    }
    already_running = true;
 80231f2:	4b56      	ldr	r3, [pc, #344]	; (802334c <lv_timer_handler+0x16c>)
 80231f4:	2201      	movs	r2, #1
 80231f6:	701a      	strb	r2, [r3, #0]

    if(lv_timer_run == false) {
 80231f8:	4b55      	ldr	r3, [pc, #340]	; (8023350 <lv_timer_handler+0x170>)
 80231fa:	781b      	ldrb	r3, [r3, #0]
 80231fc:	f083 0301 	eor.w	r3, r3, #1
 8023200:	b2db      	uxtb	r3, r3
 8023202:	2b00      	cmp	r3, #0
 8023204:	d004      	beq.n	8023210 <lv_timer_handler+0x30>
        already_running = false; /*Release mutex*/
 8023206:	4b51      	ldr	r3, [pc, #324]	; (802334c <lv_timer_handler+0x16c>)
 8023208:	2200      	movs	r2, #0
 802320a:	701a      	strb	r2, [r3, #0]
        return 1;
 802320c:	2301      	movs	r3, #1
 802320e:	e098      	b.n	8023342 <lv_timer_handler+0x162>
    }

    static uint32_t idle_period_start = 0;
    static uint32_t busy_time         = 0;

    uint32_t handler_start = lv_tick_get();
 8023210:	f7fc fe4a 	bl	801fea8 <lv_tick_get>
 8023214:	60f8      	str	r0, [r7, #12]

    if(handler_start == 0) {
 8023216:	68fb      	ldr	r3, [r7, #12]
 8023218:	2b00      	cmp	r3, #0
 802321a:	d10b      	bne.n	8023234 <lv_timer_handler+0x54>
        static uint32_t run_cnt = 0;
        run_cnt++;
 802321c:	4b4d      	ldr	r3, [pc, #308]	; (8023354 <lv_timer_handler+0x174>)
 802321e:	681b      	ldr	r3, [r3, #0]
 8023220:	3301      	adds	r3, #1
 8023222:	4a4c      	ldr	r2, [pc, #304]	; (8023354 <lv_timer_handler+0x174>)
 8023224:	6013      	str	r3, [r2, #0]
        if(run_cnt > 100) {
 8023226:	4b4b      	ldr	r3, [pc, #300]	; (8023354 <lv_timer_handler+0x174>)
 8023228:	681b      	ldr	r3, [r3, #0]
 802322a:	2b64      	cmp	r3, #100	; 0x64
 802322c:	d902      	bls.n	8023234 <lv_timer_handler+0x54>
            run_cnt = 0;
 802322e:	4b49      	ldr	r3, [pc, #292]	; (8023354 <lv_timer_handler+0x174>)
 8023230:	2200      	movs	r2, #0
 8023232:	601a      	str	r2, [r3, #0]
    }

    /*Run all timer from the list*/
    lv_timer_t * next;
    do {
        timer_deleted             = false;
 8023234:	4b48      	ldr	r3, [pc, #288]	; (8023358 <lv_timer_handler+0x178>)
 8023236:	2200      	movs	r2, #0
 8023238:	701a      	strb	r2, [r3, #0]
        timer_created             = false;
 802323a:	4b48      	ldr	r3, [pc, #288]	; (802335c <lv_timer_handler+0x17c>)
 802323c:	2200      	movs	r2, #0
 802323e:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8023240:	4847      	ldr	r0, [pc, #284]	; (8023360 <lv_timer_handler+0x180>)
 8023242:	f7fe fbd0 	bl	80219e6 <_lv_ll_get_head>
 8023246:	4603      	mov	r3, r0
 8023248:	4a46      	ldr	r2, [pc, #280]	; (8023364 <lv_timer_handler+0x184>)
 802324a:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 802324c:	e019      	b.n	8023282 <lv_timer_handler+0xa2>
            /*The timer might be deleted if it runs only once ('repeat_count = 1')
             *So get next element until the current is surely valid*/
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 802324e:	4b45      	ldr	r3, [pc, #276]	; (8023364 <lv_timer_handler+0x184>)
 8023250:	681b      	ldr	r3, [r3, #0]
 8023252:	4619      	mov	r1, r3
 8023254:	4842      	ldr	r0, [pc, #264]	; (8023360 <lv_timer_handler+0x180>)
 8023256:	f7fe fbe8 	bl	8021a2a <_lv_ll_get_next>
 802325a:	6178      	str	r0, [r7, #20]

            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 802325c:	4b41      	ldr	r3, [pc, #260]	; (8023364 <lv_timer_handler+0x184>)
 802325e:	681b      	ldr	r3, [r3, #0]
 8023260:	4618      	mov	r0, r3
 8023262:	f000 f915 	bl	8023490 <lv_timer_exec>
 8023266:	4603      	mov	r3, r0
 8023268:	2b00      	cmp	r3, #0
 802326a:	d007      	beq.n	802327c <lv_timer_handler+0x9c>
                /*If a timer was created or deleted then this or the next item might be corrupted*/
                if(timer_created || timer_deleted) {
 802326c:	4b3b      	ldr	r3, [pc, #236]	; (802335c <lv_timer_handler+0x17c>)
 802326e:	781b      	ldrb	r3, [r3, #0]
 8023270:	2b00      	cmp	r3, #0
 8023272:	d10a      	bne.n	802328a <lv_timer_handler+0xaa>
 8023274:	4b38      	ldr	r3, [pc, #224]	; (8023358 <lv_timer_handler+0x178>)
 8023276:	781b      	ldrb	r3, [r3, #0]
 8023278:	2b00      	cmp	r3, #0
 802327a:	d106      	bne.n	802328a <lv_timer_handler+0xaa>
                    TIMER_TRACE("Start from the first timer again because a timer was created or deleted");
                    break;
                }
            }

            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 802327c:	4a39      	ldr	r2, [pc, #228]	; (8023364 <lv_timer_handler+0x184>)
 802327e:	697b      	ldr	r3, [r7, #20]
 8023280:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8023282:	4b38      	ldr	r3, [pc, #224]	; (8023364 <lv_timer_handler+0x184>)
 8023284:	681b      	ldr	r3, [r3, #0]
 8023286:	2b00      	cmp	r3, #0
 8023288:	d1e1      	bne.n	802324e <lv_timer_handler+0x6e>
        }
    } while(LV_GC_ROOT(_lv_timer_act));
 802328a:	4b36      	ldr	r3, [pc, #216]	; (8023364 <lv_timer_handler+0x184>)
 802328c:	681b      	ldr	r3, [r3, #0]
 802328e:	2b00      	cmp	r3, #0
 8023290:	d1d0      	bne.n	8023234 <lv_timer_handler+0x54>

    uint32_t time_till_next = LV_NO_TIMER_READY;
 8023292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023296:	613b      	str	r3, [r7, #16]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8023298:	4831      	ldr	r0, [pc, #196]	; (8023360 <lv_timer_handler+0x180>)
 802329a:	f7fe fba4 	bl	80219e6 <_lv_ll_get_head>
 802329e:	6178      	str	r0, [r7, #20]
    while(next) {
 80232a0:	e015      	b.n	80232ce <lv_timer_handler+0xee>
        if(!next->paused) {
 80232a2:	697b      	ldr	r3, [r7, #20]
 80232a4:	7d1b      	ldrb	r3, [r3, #20]
 80232a6:	f003 0301 	and.w	r3, r3, #1
 80232aa:	b2db      	uxtb	r3, r3
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d109      	bne.n	80232c4 <lv_timer_handler+0xe4>
            uint32_t delay = lv_timer_time_remaining(next);
 80232b0:	6978      	ldr	r0, [r7, #20]
 80232b2:	f000 f935 	bl	8023520 <lv_timer_time_remaining>
 80232b6:	6078      	str	r0, [r7, #4]
            if(delay < time_till_next)
 80232b8:	687a      	ldr	r2, [r7, #4]
 80232ba:	693b      	ldr	r3, [r7, #16]
 80232bc:	429a      	cmp	r2, r3
 80232be:	d201      	bcs.n	80232c4 <lv_timer_handler+0xe4>
                time_till_next = delay;
 80232c0:	687b      	ldr	r3, [r7, #4]
 80232c2:	613b      	str	r3, [r7, #16]
        }

        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 80232c4:	6979      	ldr	r1, [r7, #20]
 80232c6:	4826      	ldr	r0, [pc, #152]	; (8023360 <lv_timer_handler+0x180>)
 80232c8:	f7fe fbaf 	bl	8021a2a <_lv_ll_get_next>
 80232cc:	6178      	str	r0, [r7, #20]
    while(next) {
 80232ce:	697b      	ldr	r3, [r7, #20]
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d1e6      	bne.n	80232a2 <lv_timer_handler+0xc2>
    }

    busy_time += lv_tick_elaps(handler_start);
 80232d4:	68f8      	ldr	r0, [r7, #12]
 80232d6:	f7fc fe01 	bl	801fedc <lv_tick_elaps>
 80232da:	4602      	mov	r2, r0
 80232dc:	4b22      	ldr	r3, [pc, #136]	; (8023368 <lv_timer_handler+0x188>)
 80232de:	681b      	ldr	r3, [r3, #0]
 80232e0:	4413      	add	r3, r2
 80232e2:	4a21      	ldr	r2, [pc, #132]	; (8023368 <lv_timer_handler+0x188>)
 80232e4:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80232e6:	4b21      	ldr	r3, [pc, #132]	; (802336c <lv_timer_handler+0x18c>)
 80232e8:	681b      	ldr	r3, [r3, #0]
 80232ea:	4618      	mov	r0, r3
 80232ec:	f7fc fdf6 	bl	801fedc <lv_tick_elaps>
 80232f0:	60b8      	str	r0, [r7, #8]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 80232f2:	68bb      	ldr	r3, [r7, #8]
 80232f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80232f8:	d31f      	bcc.n	802333a <lv_timer_handler+0x15a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 80232fa:	4b1b      	ldr	r3, [pc, #108]	; (8023368 <lv_timer_handler+0x188>)
 80232fc:	681b      	ldr	r3, [r3, #0]
 80232fe:	2264      	movs	r2, #100	; 0x64
 8023300:	fb03 f202 	mul.w	r2, r3, r2
 8023304:	68bb      	ldr	r3, [r7, #8]
 8023306:	fbb2 f3f3 	udiv	r3, r2, r3
 802330a:	b2da      	uxtb	r2, r3
 802330c:	4b18      	ldr	r3, [pc, #96]	; (8023370 <lv_timer_handler+0x190>)
 802330e:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8023310:	4b17      	ldr	r3, [pc, #92]	; (8023370 <lv_timer_handler+0x190>)
 8023312:	781b      	ldrb	r3, [r3, #0]
 8023314:	2b64      	cmp	r3, #100	; 0x64
 8023316:	d805      	bhi.n	8023324 <lv_timer_handler+0x144>
 8023318:	4b15      	ldr	r3, [pc, #84]	; (8023370 <lv_timer_handler+0x190>)
 802331a:	781b      	ldrb	r3, [r3, #0]
 802331c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8023320:	b2db      	uxtb	r3, r3
 8023322:	e000      	b.n	8023326 <lv_timer_handler+0x146>
 8023324:	2300      	movs	r3, #0
 8023326:	4a12      	ldr	r2, [pc, #72]	; (8023370 <lv_timer_handler+0x190>)
 8023328:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 802332a:	4b0f      	ldr	r3, [pc, #60]	; (8023368 <lv_timer_handler+0x188>)
 802332c:	2200      	movs	r2, #0
 802332e:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 8023330:	f7fc fdba 	bl	801fea8 <lv_tick_get>
 8023334:	4603      	mov	r3, r0
 8023336:	4a0d      	ldr	r2, [pc, #52]	; (802336c <lv_timer_handler+0x18c>)
 8023338:	6013      	str	r3, [r2, #0]
    }

    already_running = false; /*Release the mutex*/
 802333a:	4b04      	ldr	r3, [pc, #16]	; (802334c <lv_timer_handler+0x16c>)
 802333c:	2200      	movs	r2, #0
 802333e:	701a      	strb	r2, [r3, #0]

    TIMER_TRACE("finished (%d ms until the next timer call)", time_till_next);
    return time_till_next;
 8023340:	693b      	ldr	r3, [r7, #16]
}
 8023342:	4618      	mov	r0, r3
 8023344:	3718      	adds	r7, #24
 8023346:	46bd      	mov	sp, r7
 8023348:	bd80      	pop	{r7, pc}
 802334a:	bf00      	nop
 802334c:	2000ca7c 	.word	0x2000ca7c
 8023350:	2000ca78 	.word	0x2000ca78
 8023354:	2000ca80 	.word	0x2000ca80
 8023358:	2000ca7a 	.word	0x2000ca7a
 802335c:	2000ca7b 	.word	0x2000ca7b
 8023360:	2000085c 	.word	0x2000085c
 8023364:	200008ec 	.word	0x200008ec
 8023368:	2000ca84 	.word	0x2000ca84
 802336c:	2000ca88 	.word	0x2000ca88
 8023370:	2000ca79 	.word	0x2000ca79

08023374 <lv_timer_create>:
 * @param period call period in ms unit
 * @param user_data custom parameter
 * @return pointer to the new timer
 */
lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * user_data)
{
 8023374:	b580      	push	{r7, lr}
 8023376:	b086      	sub	sp, #24
 8023378:	af00      	add	r7, sp, #0
 802337a:	60f8      	str	r0, [r7, #12]
 802337c:	60b9      	str	r1, [r7, #8]
 802337e:	607a      	str	r2, [r7, #4]
    lv_timer_t * new_timer = NULL;
 8023380:	2300      	movs	r3, #0
 8023382:	617b      	str	r3, [r7, #20]

    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8023384:	4815      	ldr	r0, [pc, #84]	; (80233dc <lv_timer_create+0x68>)
 8023386:	f7fe fa69 	bl	802185c <_lv_ll_ins_head>
 802338a:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(new_timer);
 802338c:	697b      	ldr	r3, [r7, #20]
 802338e:	2b00      	cmp	r3, #0
 8023390:	d100      	bne.n	8023394 <lv_timer_create+0x20>
 8023392:	e7fe      	b.n	8023392 <lv_timer_create+0x1e>
    if(new_timer == NULL) return NULL;
 8023394:	697b      	ldr	r3, [r7, #20]
 8023396:	2b00      	cmp	r3, #0
 8023398:	d101      	bne.n	802339e <lv_timer_create+0x2a>
 802339a:	2300      	movs	r3, #0
 802339c:	e01a      	b.n	80233d4 <lv_timer_create+0x60>

    new_timer->period = period;
 802339e:	697b      	ldr	r3, [r7, #20]
 80233a0:	68ba      	ldr	r2, [r7, #8]
 80233a2:	601a      	str	r2, [r3, #0]
    new_timer->timer_cb = timer_xcb;
 80233a4:	697b      	ldr	r3, [r7, #20]
 80233a6:	68fa      	ldr	r2, [r7, #12]
 80233a8:	609a      	str	r2, [r3, #8]
    new_timer->repeat_count = -1;
 80233aa:	697b      	ldr	r3, [r7, #20]
 80233ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80233b0:	611a      	str	r2, [r3, #16]
    new_timer->paused = 0;
 80233b2:	697a      	ldr	r2, [r7, #20]
 80233b4:	7d13      	ldrb	r3, [r2, #20]
 80233b6:	f36f 0300 	bfc	r3, #0, #1
 80233ba:	7513      	strb	r3, [r2, #20]
    new_timer->last_run = lv_tick_get();
 80233bc:	f7fc fd74 	bl	801fea8 <lv_tick_get>
 80233c0:	4602      	mov	r2, r0
 80233c2:	697b      	ldr	r3, [r7, #20]
 80233c4:	605a      	str	r2, [r3, #4]
    new_timer->user_data = user_data;
 80233c6:	697b      	ldr	r3, [r7, #20]
 80233c8:	687a      	ldr	r2, [r7, #4]
 80233ca:	60da      	str	r2, [r3, #12]

    timer_created = true;
 80233cc:	4b04      	ldr	r3, [pc, #16]	; (80233e0 <lv_timer_create+0x6c>)
 80233ce:	2201      	movs	r2, #1
 80233d0:	701a      	strb	r2, [r3, #0]

    return new_timer;
 80233d2:	697b      	ldr	r3, [r7, #20]
}
 80233d4:	4618      	mov	r0, r3
 80233d6:	3718      	adds	r7, #24
 80233d8:	46bd      	mov	sp, r7
 80233da:	bd80      	pop	{r7, pc}
 80233dc:	2000085c 	.word	0x2000085c
 80233e0:	2000ca7b 	.word	0x2000ca7b

080233e4 <lv_timer_del>:
/**
 * Delete a lv_timer
 * @param timer pointer to timer created by timer
 */
void lv_timer_del(lv_timer_t * timer)
{
 80233e4:	b580      	push	{r7, lr}
 80233e6:	b082      	sub	sp, #8
 80233e8:	af00      	add	r7, sp, #0
 80233ea:	6078      	str	r0, [r7, #4]
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 80233ec:	6879      	ldr	r1, [r7, #4]
 80233ee:	4806      	ldr	r0, [pc, #24]	; (8023408 <lv_timer_del+0x24>)
 80233f0:	f7fe fa9c 	bl	802192c <_lv_ll_remove>
    timer_deleted = true;
 80233f4:	4b05      	ldr	r3, [pc, #20]	; (802340c <lv_timer_del+0x28>)
 80233f6:	2201      	movs	r2, #1
 80233f8:	701a      	strb	r2, [r3, #0]

    lv_mem_free(timer);
 80233fa:	6878      	ldr	r0, [r7, #4]
 80233fc:	f7fe fce2 	bl	8021dc4 <lv_mem_free>
}
 8023400:	bf00      	nop
 8023402:	3708      	adds	r7, #8
 8023404:	46bd      	mov	sp, r7
 8023406:	bd80      	pop	{r7, pc}
 8023408:	2000085c 	.word	0x2000085c
 802340c:	2000ca7a 	.word	0x2000ca7a

08023410 <lv_timer_pause>:
/**
 * Pause/resume a timer.
 * @param timer pointer to an lv_timer
 */
void lv_timer_pause(lv_timer_t * timer)
{
 8023410:	b480      	push	{r7}
 8023412:	b083      	sub	sp, #12
 8023414:	af00      	add	r7, sp, #0
 8023416:	6078      	str	r0, [r7, #4]
    timer->paused = true;
 8023418:	687a      	ldr	r2, [r7, #4]
 802341a:	7d13      	ldrb	r3, [r2, #20]
 802341c:	f043 0301 	orr.w	r3, r3, #1
 8023420:	7513      	strb	r3, [r2, #20]
}
 8023422:	bf00      	nop
 8023424:	370c      	adds	r7, #12
 8023426:	46bd      	mov	sp, r7
 8023428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802342c:	4770      	bx	lr

0802342e <lv_timer_resume>:

void lv_timer_resume(lv_timer_t * timer)
{
 802342e:	b480      	push	{r7}
 8023430:	b083      	sub	sp, #12
 8023432:	af00      	add	r7, sp, #0
 8023434:	6078      	str	r0, [r7, #4]
    timer->paused = false;
 8023436:	687a      	ldr	r2, [r7, #4]
 8023438:	7d13      	ldrb	r3, [r2, #20]
 802343a:	f36f 0300 	bfc	r3, #0, #1
 802343e:	7513      	strb	r3, [r2, #20]
}
 8023440:	bf00      	nop
 8023442:	370c      	adds	r7, #12
 8023444:	46bd      	mov	sp, r7
 8023446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802344a:	4770      	bx	lr

0802344c <lv_timer_ready>:
/**
 * Make a lv_timer ready. It will not wait its period.
 * @param timer pointer to a lv_timer.
 */
void lv_timer_ready(lv_timer_t * timer)
{
 802344c:	b580      	push	{r7, lr}
 802344e:	b082      	sub	sp, #8
 8023450:	af00      	add	r7, sp, #0
 8023452:	6078      	str	r0, [r7, #4]
    timer->last_run = lv_tick_get() - timer->period - 1;
 8023454:	f7fc fd28 	bl	801fea8 <lv_tick_get>
 8023458:	4602      	mov	r2, r0
 802345a:	687b      	ldr	r3, [r7, #4]
 802345c:	681b      	ldr	r3, [r3, #0]
 802345e:	1ad3      	subs	r3, r2, r3
 8023460:	1e5a      	subs	r2, r3, #1
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	605a      	str	r2, [r3, #4]
}
 8023466:	bf00      	nop
 8023468:	3708      	adds	r7, #8
 802346a:	46bd      	mov	sp, r7
 802346c:	bd80      	pop	{r7, pc}
	...

08023470 <lv_timer_enable>:
/**
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
 8023470:	b480      	push	{r7}
 8023472:	b083      	sub	sp, #12
 8023474:	af00      	add	r7, sp, #0
 8023476:	4603      	mov	r3, r0
 8023478:	71fb      	strb	r3, [r7, #7]
    lv_timer_run = en;
 802347a:	4a04      	ldr	r2, [pc, #16]	; (802348c <lv_timer_enable+0x1c>)
 802347c:	79fb      	ldrb	r3, [r7, #7]
 802347e:	7013      	strb	r3, [r2, #0]
}
 8023480:	bf00      	nop
 8023482:	370c      	adds	r7, #12
 8023484:	46bd      	mov	sp, r7
 8023486:	f85d 7b04 	ldr.w	r7, [sp], #4
 802348a:	4770      	bx	lr
 802348c:	2000ca78 	.word	0x2000ca78

08023490 <lv_timer_exec>:
 * Execute timer if its remaining time is zero
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
 8023490:	b580      	push	{r7, lr}
 8023492:	b084      	sub	sp, #16
 8023494:	af00      	add	r7, sp, #0
 8023496:	6078      	str	r0, [r7, #4]
    if(timer->paused) return false;
 8023498:	687b      	ldr	r3, [r7, #4]
 802349a:	7d1b      	ldrb	r3, [r3, #20]
 802349c:	f003 0301 	and.w	r3, r3, #1
 80234a0:	b2db      	uxtb	r3, r3
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	d001      	beq.n	80234aa <lv_timer_exec+0x1a>
 80234a6:	2300      	movs	r3, #0
 80234a8:	e034      	b.n	8023514 <lv_timer_exec+0x84>

    bool exec = false;
 80234aa:	2300      	movs	r3, #0
 80234ac:	73fb      	strb	r3, [r7, #15]
    if(lv_timer_time_remaining(timer) == 0) {
 80234ae:	6878      	ldr	r0, [r7, #4]
 80234b0:	f000 f836 	bl	8023520 <lv_timer_time_remaining>
 80234b4:	4603      	mov	r3, r0
 80234b6:	2b00      	cmp	r3, #0
 80234b8:	d11d      	bne.n	80234f6 <lv_timer_exec+0x66>
        /* Decrement the repeat count before executing the timer_cb.
         * If any timer is deleted `if(timer->repeat_count == 0)` is not executed below
         * but at least the repeat count is zero and the timer can be deleted in the next round*/
        int32_t original_repeat_count = timer->repeat_count;
 80234ba:	687b      	ldr	r3, [r7, #4]
 80234bc:	691b      	ldr	r3, [r3, #16]
 80234be:	60bb      	str	r3, [r7, #8]
        if(timer->repeat_count > 0) timer->repeat_count--;
 80234c0:	687b      	ldr	r3, [r7, #4]
 80234c2:	691b      	ldr	r3, [r3, #16]
 80234c4:	2b00      	cmp	r3, #0
 80234c6:	dd04      	ble.n	80234d2 <lv_timer_exec+0x42>
 80234c8:	687b      	ldr	r3, [r7, #4]
 80234ca:	691b      	ldr	r3, [r3, #16]
 80234cc:	1e5a      	subs	r2, r3, #1
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	611a      	str	r2, [r3, #16]
        timer->last_run = lv_tick_get();
 80234d2:	f7fc fce9 	bl	801fea8 <lv_tick_get>
 80234d6:	4602      	mov	r2, r0
 80234d8:	687b      	ldr	r3, [r7, #4]
 80234da:	605a      	str	r2, [r3, #4]
        TIMER_TRACE("calling timer callback: %p", *((void **)&timer->timer_cb));
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	689b      	ldr	r3, [r3, #8]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d006      	beq.n	80234f2 <lv_timer_exec+0x62>
 80234e4:	68bb      	ldr	r3, [r7, #8]
 80234e6:	2b00      	cmp	r3, #0
 80234e8:	d003      	beq.n	80234f2 <lv_timer_exec+0x62>
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	689b      	ldr	r3, [r3, #8]
 80234ee:	6878      	ldr	r0, [r7, #4]
 80234f0:	4798      	blx	r3
        TIMER_TRACE("timer callback %p finished", *((void **)&timer->timer_cb));
        LV_ASSERT_MEM_INTEGRITY();
        exec = true;
 80234f2:	2301      	movs	r3, #1
 80234f4:	73fb      	strb	r3, [r7, #15]
    }

    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 80234f6:	4b09      	ldr	r3, [pc, #36]	; (802351c <lv_timer_exec+0x8c>)
 80234f8:	781b      	ldrb	r3, [r3, #0]
 80234fa:	f083 0301 	eor.w	r3, r3, #1
 80234fe:	b2db      	uxtb	r3, r3
 8023500:	2b00      	cmp	r3, #0
 8023502:	d006      	beq.n	8023512 <lv_timer_exec+0x82>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	691b      	ldr	r3, [r3, #16]
 8023508:	2b00      	cmp	r3, #0
 802350a:	d102      	bne.n	8023512 <lv_timer_exec+0x82>
            TIMER_TRACE("deleting timer with %p callback because the repeat count is over", *((void **)&timer->timer_cb));
            lv_timer_del(timer);
 802350c:	6878      	ldr	r0, [r7, #4]
 802350e:	f7ff ff69 	bl	80233e4 <lv_timer_del>
        }
    }

    return exec;
 8023512:	7bfb      	ldrb	r3, [r7, #15]
}
 8023514:	4618      	mov	r0, r3
 8023516:	3710      	adds	r7, #16
 8023518:	46bd      	mov	sp, r7
 802351a:	bd80      	pop	{r7, pc}
 802351c:	2000ca7a 	.word	0x2000ca7a

08023520 <lv_timer_time_remaining>:
 * Find out how much time remains before a timer must be run.
 * @param timer pointer to lv_timer
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
 8023520:	b580      	push	{r7, lr}
 8023522:	b084      	sub	sp, #16
 8023524:	af00      	add	r7, sp, #0
 8023526:	6078      	str	r0, [r7, #4]
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8023528:	687b      	ldr	r3, [r7, #4]
 802352a:	685b      	ldr	r3, [r3, #4]
 802352c:	4618      	mov	r0, r3
 802352e:	f7fc fcd5 	bl	801fedc <lv_tick_elaps>
 8023532:	60f8      	str	r0, [r7, #12]
    if(elp >= timer->period)
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	681b      	ldr	r3, [r3, #0]
 8023538:	68fa      	ldr	r2, [r7, #12]
 802353a:	429a      	cmp	r2, r3
 802353c:	d301      	bcc.n	8023542 <lv_timer_time_remaining+0x22>
        return 0;
 802353e:	2300      	movs	r3, #0
 8023540:	e003      	b.n	802354a <lv_timer_time_remaining+0x2a>
    return timer->period - elp;
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	681a      	ldr	r2, [r3, #0]
 8023546:	68fb      	ldr	r3, [r7, #12]
 8023548:	1ad3      	subs	r3, r2, r3
}
 802354a:	4618      	mov	r0, r3
 802354c:	3710      	adds	r7, #16
 802354e:	46bd      	mov	sp, r7
 8023550:	bd80      	pop	{r7, pc}

08023552 <tlsf_ffs>:
}

#else

tlsf_decl int tlsf_ffs(unsigned int word)
{
 8023552:	b480      	push	{r7}
 8023554:	b083      	sub	sp, #12
 8023556:	af00      	add	r7, sp, #0
 8023558:	6078      	str	r0, [r7, #4]
    return __builtin_ffs(word) - 1;
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	fa93 f2a3 	rbit	r2, r3
 8023560:	fab2 f282 	clz	r2, r2
 8023564:	2b00      	cmp	r3, #0
 8023566:	d101      	bne.n	802356c <tlsf_ffs+0x1a>
 8023568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802356c:	1c53      	adds	r3, r2, #1
 802356e:	3b01      	subs	r3, #1
}
 8023570:	4618      	mov	r0, r3
 8023572:	370c      	adds	r7, #12
 8023574:	46bd      	mov	sp, r7
 8023576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802357a:	4770      	bx	lr

0802357c <tlsf_fls>:

#endif

tlsf_decl int tlsf_fls(unsigned int word)
{
 802357c:	b480      	push	{r7}
 802357e:	b085      	sub	sp, #20
 8023580:	af00      	add	r7, sp, #0
 8023582:	6078      	str	r0, [r7, #4]
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8023584:	687b      	ldr	r3, [r7, #4]
 8023586:	2b00      	cmp	r3, #0
 8023588:	d005      	beq.n	8023596 <tlsf_fls+0x1a>
 802358a:	687b      	ldr	r3, [r7, #4]
 802358c:	fab3 f383 	clz	r3, r3
 8023590:	f1c3 0320 	rsb	r3, r3, #32
 8023594:	e000      	b.n	8023598 <tlsf_fls+0x1c>
 8023596:	2300      	movs	r3, #0
 8023598:	60fb      	str	r3, [r7, #12]
    return bit - 1;
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	3b01      	subs	r3, #1
}
 802359e:	4618      	mov	r0, r3
 80235a0:	3714      	adds	r7, #20
 80235a2:	46bd      	mov	sp, r7
 80235a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235a8:	4770      	bx	lr

080235aa <block_size>:
/*
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
 80235aa:	b480      	push	{r7}
 80235ac:	b083      	sub	sp, #12
 80235ae:	af00      	add	r7, sp, #0
 80235b0:	6078      	str	r0, [r7, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80235b2:	687b      	ldr	r3, [r7, #4]
 80235b4:	685a      	ldr	r2, [r3, #4]
 80235b6:	2101      	movs	r1, #1
 80235b8:	2302      	movs	r3, #2
 80235ba:	430b      	orrs	r3, r1
 80235bc:	43db      	mvns	r3, r3
 80235be:	4013      	ands	r3, r2
}
 80235c0:	4618      	mov	r0, r3
 80235c2:	370c      	adds	r7, #12
 80235c4:	46bd      	mov	sp, r7
 80235c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ca:	4770      	bx	lr

080235cc <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
 80235cc:	b480      	push	{r7}
 80235ce:	b085      	sub	sp, #20
 80235d0:	af00      	add	r7, sp, #0
 80235d2:	6078      	str	r0, [r7, #4]
 80235d4:	6039      	str	r1, [r7, #0]
    const size_t oldsize = block->size;
 80235d6:	687b      	ldr	r3, [r7, #4]
 80235d8:	685b      	ldr	r3, [r3, #4]
 80235da:	60fb      	str	r3, [r7, #12]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80235dc:	2201      	movs	r2, #1
 80235de:	2302      	movs	r3, #2
 80235e0:	431a      	orrs	r2, r3
 80235e2:	68fb      	ldr	r3, [r7, #12]
 80235e4:	401a      	ands	r2, r3
 80235e6:	683b      	ldr	r3, [r7, #0]
 80235e8:	431a      	orrs	r2, r3
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	605a      	str	r2, [r3, #4]
}
 80235ee:	bf00      	nop
 80235f0:	3714      	adds	r7, #20
 80235f2:	46bd      	mov	sp, r7
 80235f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235f8:	4770      	bx	lr

080235fa <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 80235fa:	b580      	push	{r7, lr}
 80235fc:	b082      	sub	sp, #8
 80235fe:	af00      	add	r7, sp, #0
 8023600:	6078      	str	r0, [r7, #4]
    return block_size(block) == 0;
 8023602:	6878      	ldr	r0, [r7, #4]
 8023604:	f7ff ffd1 	bl	80235aa <block_size>
 8023608:	4603      	mov	r3, r0
 802360a:	2b00      	cmp	r3, #0
 802360c:	bf0c      	ite	eq
 802360e:	2301      	moveq	r3, #1
 8023610:	2300      	movne	r3, #0
 8023612:	b2db      	uxtb	r3, r3
}
 8023614:	4618      	mov	r0, r3
 8023616:	3708      	adds	r7, #8
 8023618:	46bd      	mov	sp, r7
 802361a:	bd80      	pop	{r7, pc}

0802361c <block_is_free>:

static int block_is_free(const block_header_t * block)
{
 802361c:	b480      	push	{r7}
 802361e:	b083      	sub	sp, #12
 8023620:	af00      	add	r7, sp, #0
 8023622:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 8023624:	687b      	ldr	r3, [r7, #4]
 8023626:	685b      	ldr	r3, [r3, #4]
 8023628:	2201      	movs	r2, #1
 802362a:	4013      	ands	r3, r2
}
 802362c:	4618      	mov	r0, r3
 802362e:	370c      	adds	r7, #12
 8023630:	46bd      	mov	sp, r7
 8023632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023636:	4770      	bx	lr

08023638 <block_set_free>:

static void block_set_free(block_header_t * block)
{
 8023638:	b480      	push	{r7}
 802363a:	b083      	sub	sp, #12
 802363c:	af00      	add	r7, sp, #0
 802363e:	6078      	str	r0, [r7, #4]
    block->size |= block_header_free_bit;
 8023640:	687b      	ldr	r3, [r7, #4]
 8023642:	685b      	ldr	r3, [r3, #4]
 8023644:	2201      	movs	r2, #1
 8023646:	431a      	orrs	r2, r3
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	605a      	str	r2, [r3, #4]
}
 802364c:	bf00      	nop
 802364e:	370c      	adds	r7, #12
 8023650:	46bd      	mov	sp, r7
 8023652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023656:	4770      	bx	lr

08023658 <block_set_used>:

static void block_set_used(block_header_t * block)
{
 8023658:	b480      	push	{r7}
 802365a:	b083      	sub	sp, #12
 802365c:	af00      	add	r7, sp, #0
 802365e:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_free_bit;
 8023660:	687b      	ldr	r3, [r7, #4]
 8023662:	685a      	ldr	r2, [r3, #4]
 8023664:	2301      	movs	r3, #1
 8023666:	43db      	mvns	r3, r3
 8023668:	401a      	ands	r2, r3
 802366a:	687b      	ldr	r3, [r7, #4]
 802366c:	605a      	str	r2, [r3, #4]
}
 802366e:	bf00      	nop
 8023670:	370c      	adds	r7, #12
 8023672:	46bd      	mov	sp, r7
 8023674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023678:	4770      	bx	lr

0802367a <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
 802367a:	b480      	push	{r7}
 802367c:	b083      	sub	sp, #12
 802367e:	af00      	add	r7, sp, #0
 8023680:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 8023682:	687b      	ldr	r3, [r7, #4]
 8023684:	685b      	ldr	r3, [r3, #4]
 8023686:	2202      	movs	r2, #2
 8023688:	4013      	ands	r3, r2
}
 802368a:	4618      	mov	r0, r3
 802368c:	370c      	adds	r7, #12
 802368e:	46bd      	mov	sp, r7
 8023690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023694:	4770      	bx	lr

08023696 <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
 8023696:	b480      	push	{r7}
 8023698:	b083      	sub	sp, #12
 802369a:	af00      	add	r7, sp, #0
 802369c:	6078      	str	r0, [r7, #4]
    block->size |= block_header_prev_free_bit;
 802369e:	687b      	ldr	r3, [r7, #4]
 80236a0:	685b      	ldr	r3, [r3, #4]
 80236a2:	2202      	movs	r2, #2
 80236a4:	431a      	orrs	r2, r3
 80236a6:	687b      	ldr	r3, [r7, #4]
 80236a8:	605a      	str	r2, [r3, #4]
}
 80236aa:	bf00      	nop
 80236ac:	370c      	adds	r7, #12
 80236ae:	46bd      	mov	sp, r7
 80236b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236b4:	4770      	bx	lr

080236b6 <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
 80236b6:	b480      	push	{r7}
 80236b8:	b083      	sub	sp, #12
 80236ba:	af00      	add	r7, sp, #0
 80236bc:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_prev_free_bit;
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	685a      	ldr	r2, [r3, #4]
 80236c2:	2302      	movs	r3, #2
 80236c4:	43db      	mvns	r3, r3
 80236c6:	401a      	ands	r2, r3
 80236c8:	687b      	ldr	r3, [r7, #4]
 80236ca:	605a      	str	r2, [r3, #4]
}
 80236cc:	bf00      	nop
 80236ce:	370c      	adds	r7, #12
 80236d0:	46bd      	mov	sp, r7
 80236d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236d6:	4770      	bx	lr

080236d8 <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
 80236d8:	b480      	push	{r7}
 80236da:	b083      	sub	sp, #12
 80236dc:	af00      	add	r7, sp, #0
 80236de:	6078      	str	r0, [r7, #4]
    return tlsf_cast(block_header_t *,
 80236e0:	2308      	movs	r3, #8
 80236e2:	425b      	negs	r3, r3
 80236e4:	687a      	ldr	r2, [r7, #4]
 80236e6:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 80236e8:	4618      	mov	r0, r3
 80236ea:	370c      	adds	r7, #12
 80236ec:	46bd      	mov	sp, r7
 80236ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236f2:	4770      	bx	lr

080236f4 <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
 80236f4:	b480      	push	{r7}
 80236f6:	b083      	sub	sp, #12
 80236f8:	af00      	add	r7, sp, #0
 80236fa:	6078      	str	r0, [r7, #4]
    return tlsf_cast(void *,
 80236fc:	2208      	movs	r2, #8
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 8023702:	4618      	mov	r0, r3
 8023704:	370c      	adds	r7, #12
 8023706:	46bd      	mov	sp, r7
 8023708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802370c:	4770      	bx	lr

0802370e <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
 802370e:	b480      	push	{r7}
 8023710:	b083      	sub	sp, #12
 8023712:	af00      	add	r7, sp, #0
 8023714:	6078      	str	r0, [r7, #4]
 8023716:	6039      	str	r1, [r7, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023718:	687a      	ldr	r2, [r7, #4]
 802371a:	683b      	ldr	r3, [r7, #0]
 802371c:	4413      	add	r3, r2
}
 802371e:	4618      	mov	r0, r3
 8023720:	370c      	adds	r7, #12
 8023722:	46bd      	mov	sp, r7
 8023724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023728:	4770      	bx	lr

0802372a <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 802372a:	b580      	push	{r7, lr}
 802372c:	b082      	sub	sp, #8
 802372e:	af00      	add	r7, sp, #0
 8023730:	6078      	str	r0, [r7, #4]
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 8023732:	6878      	ldr	r0, [r7, #4]
 8023734:	f7ff ffa1 	bl	802367a <block_is_prev_free>
 8023738:	4603      	mov	r3, r0
 802373a:	2b00      	cmp	r3, #0
 802373c:	d100      	bne.n	8023740 <block_prev+0x16>
 802373e:	e7fe      	b.n	802373e <block_prev+0x14>
    return block->prev_phys_block;
 8023740:	687b      	ldr	r3, [r7, #4]
 8023742:	681b      	ldr	r3, [r3, #0]
}
 8023744:	4618      	mov	r0, r3
 8023746:	3708      	adds	r7, #8
 8023748:	46bd      	mov	sp, r7
 802374a:	bd80      	pop	{r7, pc}

0802374c <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 802374c:	b590      	push	{r4, r7, lr}
 802374e:	b085      	sub	sp, #20
 8023750:	af00      	add	r7, sp, #0
 8023752:	6078      	str	r0, [r7, #4]
    block_header_t * next = offset_to_block(block_to_ptr(block),
 8023754:	6878      	ldr	r0, [r7, #4]
 8023756:	f7ff ffcd 	bl	80236f4 <block_to_ptr>
 802375a:	4604      	mov	r4, r0
                                            block_size(block) - block_header_overhead);
 802375c:	6878      	ldr	r0, [r7, #4]
 802375e:	f7ff ff24 	bl	80235aa <block_size>
 8023762:	4603      	mov	r3, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 8023764:	2204      	movs	r2, #4
 8023766:	1a9b      	subs	r3, r3, r2
 8023768:	4619      	mov	r1, r3
 802376a:	4620      	mov	r0, r4
 802376c:	f7ff ffcf 	bl	802370e <offset_to_block>
 8023770:	60f8      	str	r0, [r7, #12]
    tlsf_assert(!block_is_last(block));
 8023772:	6878      	ldr	r0, [r7, #4]
 8023774:	f7ff ff41 	bl	80235fa <block_is_last>
 8023778:	4603      	mov	r3, r0
 802377a:	2b00      	cmp	r3, #0
 802377c:	d000      	beq.n	8023780 <block_next+0x34>
 802377e:	e7fe      	b.n	802377e <block_next+0x32>
    return next;
 8023780:	68fb      	ldr	r3, [r7, #12]
}
 8023782:	4618      	mov	r0, r3
 8023784:	3714      	adds	r7, #20
 8023786:	46bd      	mov	sp, r7
 8023788:	bd90      	pop	{r4, r7, pc}

0802378a <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 802378a:	b580      	push	{r7, lr}
 802378c:	b084      	sub	sp, #16
 802378e:	af00      	add	r7, sp, #0
 8023790:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 8023792:	6878      	ldr	r0, [r7, #4]
 8023794:	f7ff ffda 	bl	802374c <block_next>
 8023798:	60f8      	str	r0, [r7, #12]
    next->prev_phys_block = block;
 802379a:	68fb      	ldr	r3, [r7, #12]
 802379c:	687a      	ldr	r2, [r7, #4]
 802379e:	601a      	str	r2, [r3, #0]
    return next;
 80237a0:	68fb      	ldr	r3, [r7, #12]
}
 80237a2:	4618      	mov	r0, r3
 80237a4:	3710      	adds	r7, #16
 80237a6:	46bd      	mov	sp, r7
 80237a8:	bd80      	pop	{r7, pc}

080237aa <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 80237aa:	b580      	push	{r7, lr}
 80237ac:	b084      	sub	sp, #16
 80237ae:	af00      	add	r7, sp, #0
 80237b0:	6078      	str	r0, [r7, #4]
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 80237b2:	6878      	ldr	r0, [r7, #4]
 80237b4:	f7ff ffe9 	bl	802378a <block_link_next>
 80237b8:	60f8      	str	r0, [r7, #12]
    block_set_prev_free(next);
 80237ba:	68f8      	ldr	r0, [r7, #12]
 80237bc:	f7ff ff6b 	bl	8023696 <block_set_prev_free>
    block_set_free(block);
 80237c0:	6878      	ldr	r0, [r7, #4]
 80237c2:	f7ff ff39 	bl	8023638 <block_set_free>
}
 80237c6:	bf00      	nop
 80237c8:	3710      	adds	r7, #16
 80237ca:	46bd      	mov	sp, r7
 80237cc:	bd80      	pop	{r7, pc}

080237ce <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 80237ce:	b580      	push	{r7, lr}
 80237d0:	b084      	sub	sp, #16
 80237d2:	af00      	add	r7, sp, #0
 80237d4:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 80237d6:	6878      	ldr	r0, [r7, #4]
 80237d8:	f7ff ffb8 	bl	802374c <block_next>
 80237dc:	60f8      	str	r0, [r7, #12]
    block_set_prev_used(next);
 80237de:	68f8      	ldr	r0, [r7, #12]
 80237e0:	f7ff ff69 	bl	80236b6 <block_set_prev_used>
    block_set_used(block);
 80237e4:	6878      	ldr	r0, [r7, #4]
 80237e6:	f7ff ff37 	bl	8023658 <block_set_used>
}
 80237ea:	bf00      	nop
 80237ec:	3710      	adds	r7, #16
 80237ee:	46bd      	mov	sp, r7
 80237f0:	bd80      	pop	{r7, pc}

080237f2 <align_up>:

static size_t align_up(size_t x, size_t align)
{
 80237f2:	b480      	push	{r7}
 80237f4:	b083      	sub	sp, #12
 80237f6:	af00      	add	r7, sp, #0
 80237f8:	6078      	str	r0, [r7, #4]
 80237fa:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80237fc:	683b      	ldr	r3, [r7, #0]
 80237fe:	1e5a      	subs	r2, r3, #1
 8023800:	683b      	ldr	r3, [r7, #0]
 8023802:	4013      	ands	r3, r2
 8023804:	2b00      	cmp	r3, #0
 8023806:	d000      	beq.n	802380a <align_up+0x18>
 8023808:	e7fe      	b.n	8023808 <align_up+0x16>
    return (x + (align - 1)) & ~(align - 1);
 802380a:	683a      	ldr	r2, [r7, #0]
 802380c:	687b      	ldr	r3, [r7, #4]
 802380e:	4413      	add	r3, r2
 8023810:	1e5a      	subs	r2, r3, #1
 8023812:	683b      	ldr	r3, [r7, #0]
 8023814:	425b      	negs	r3, r3
 8023816:	4013      	ands	r3, r2
}
 8023818:	4618      	mov	r0, r3
 802381a:	370c      	adds	r7, #12
 802381c:	46bd      	mov	sp, r7
 802381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023822:	4770      	bx	lr

08023824 <align_down>:

static size_t align_down(size_t x, size_t align)
{
 8023824:	b480      	push	{r7}
 8023826:	b083      	sub	sp, #12
 8023828:	af00      	add	r7, sp, #0
 802382a:	6078      	str	r0, [r7, #4]
 802382c:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 802382e:	683b      	ldr	r3, [r7, #0]
 8023830:	1e5a      	subs	r2, r3, #1
 8023832:	683b      	ldr	r3, [r7, #0]
 8023834:	4013      	ands	r3, r2
 8023836:	2b00      	cmp	r3, #0
 8023838:	d000      	beq.n	802383c <align_down+0x18>
 802383a:	e7fe      	b.n	802383a <align_down+0x16>
    return x - (x & (align - 1));
 802383c:	683b      	ldr	r3, [r7, #0]
 802383e:	425a      	negs	r2, r3
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	4013      	ands	r3, r2
}
 8023844:	4618      	mov	r0, r3
 8023846:	370c      	adds	r7, #12
 8023848:	46bd      	mov	sp, r7
 802384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802384e:	4770      	bx	lr

08023850 <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
 8023850:	b480      	push	{r7}
 8023852:	b085      	sub	sp, #20
 8023854:	af00      	add	r7, sp, #0
 8023856:	6078      	str	r0, [r7, #4]
 8023858:	6039      	str	r1, [r7, #0]
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 802385a:	687a      	ldr	r2, [r7, #4]
 802385c:	683b      	ldr	r3, [r7, #0]
 802385e:	4413      	add	r3, r2
 8023860:	1e5a      	subs	r2, r3, #1
 8023862:	683b      	ldr	r3, [r7, #0]
 8023864:	425b      	negs	r3, r3
 8023866:	4013      	ands	r3, r2
    const tlsfptr_t aligned =
 8023868:	60fb      	str	r3, [r7, #12]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 802386a:	683b      	ldr	r3, [r7, #0]
 802386c:	1e5a      	subs	r2, r3, #1
 802386e:	683b      	ldr	r3, [r7, #0]
 8023870:	4013      	ands	r3, r2
 8023872:	2b00      	cmp	r3, #0
 8023874:	d000      	beq.n	8023878 <align_ptr+0x28>
 8023876:	e7fe      	b.n	8023876 <align_ptr+0x26>
    return tlsf_cast(void *, aligned);
 8023878:	68fb      	ldr	r3, [r7, #12]
}
 802387a:	4618      	mov	r0, r3
 802387c:	3714      	adds	r7, #20
 802387e:	46bd      	mov	sp, r7
 8023880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023884:	4770      	bx	lr

08023886 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 8023886:	b580      	push	{r7, lr}
 8023888:	b084      	sub	sp, #16
 802388a:	af00      	add	r7, sp, #0
 802388c:	6078      	str	r0, [r7, #4]
 802388e:	6039      	str	r1, [r7, #0]
    size_t adjust = 0;
 8023890:	2300      	movs	r3, #0
 8023892:	60fb      	str	r3, [r7, #12]
    if(size) {
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	2b00      	cmp	r3, #0
 8023898:	d00f      	beq.n	80238ba <adjust_request_size+0x34>
        const size_t aligned = align_up(size, align);
 802389a:	6839      	ldr	r1, [r7, #0]
 802389c:	6878      	ldr	r0, [r7, #4]
 802389e:	f7ff ffa8 	bl	80237f2 <align_up>
 80238a2:	60b8      	str	r0, [r7, #8]

        /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
        if(aligned < block_size_max) {
 80238a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80238a8:	68bb      	ldr	r3, [r7, #8]
 80238aa:	4293      	cmp	r3, r2
 80238ac:	d205      	bcs.n	80238ba <adjust_request_size+0x34>
            adjust = tlsf_max(aligned, block_size_min);
 80238ae:	220c      	movs	r2, #12
 80238b0:	68bb      	ldr	r3, [r7, #8]
 80238b2:	4293      	cmp	r3, r2
 80238b4:	bf38      	it	cc
 80238b6:	4613      	movcc	r3, r2
 80238b8:	60fb      	str	r3, [r7, #12]
        }
    }
    return adjust;
 80238ba:	68fb      	ldr	r3, [r7, #12]
}
 80238bc:	4618      	mov	r0, r3
 80238be:	3710      	adds	r7, #16
 80238c0:	46bd      	mov	sp, r7
 80238c2:	bd80      	pop	{r7, pc}

080238c4 <mapping_insert>:
** TLSF utility functions. In most cases, these are direct translations of
** the documentation found in the white paper.
*/

static void mapping_insert(size_t size, int * fli, int * sli)
{
 80238c4:	b580      	push	{r7, lr}
 80238c6:	b086      	sub	sp, #24
 80238c8:	af00      	add	r7, sp, #0
 80238ca:	60f8      	str	r0, [r7, #12]
 80238cc:	60b9      	str	r1, [r7, #8]
 80238ce:	607a      	str	r2, [r7, #4]
    int fl, sl;
    if(size < SMALL_BLOCK_SIZE) {
 80238d0:	68fb      	ldr	r3, [r7, #12]
 80238d2:	2b7f      	cmp	r3, #127	; 0x7f
 80238d4:	d808      	bhi.n	80238e8 <mapping_insert+0x24>
        /* Store small blocks in first list. */
        fl = 0;
 80238d6:	2300      	movs	r3, #0
 80238d8:	617b      	str	r3, [r7, #20]
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 80238da:	68fb      	ldr	r3, [r7, #12]
 80238dc:	2b00      	cmp	r3, #0
 80238de:	da00      	bge.n	80238e2 <mapping_insert+0x1e>
 80238e0:	3303      	adds	r3, #3
 80238e2:	109b      	asrs	r3, r3, #2
 80238e4:	613b      	str	r3, [r7, #16]
 80238e6:	e00e      	b.n	8023906 <mapping_insert+0x42>
    }
    else {
        fl = tlsf_fls_sizet(size);
 80238e8:	68f8      	ldr	r0, [r7, #12]
 80238ea:	f7ff fe47 	bl	802357c <tlsf_fls>
 80238ee:	6178      	str	r0, [r7, #20]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 80238f0:	697b      	ldr	r3, [r7, #20]
 80238f2:	3b05      	subs	r3, #5
 80238f4:	68fa      	ldr	r2, [r7, #12]
 80238f6:	fa22 f303 	lsr.w	r3, r2, r3
 80238fa:	f083 0320 	eor.w	r3, r3, #32
 80238fe:	613b      	str	r3, [r7, #16]
        fl -= (FL_INDEX_SHIFT - 1);
 8023900:	697b      	ldr	r3, [r7, #20]
 8023902:	3b06      	subs	r3, #6
 8023904:	617b      	str	r3, [r7, #20]
    }
    *fli = fl;
 8023906:	68bb      	ldr	r3, [r7, #8]
 8023908:	697a      	ldr	r2, [r7, #20]
 802390a:	601a      	str	r2, [r3, #0]
    *sli = sl;
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	693a      	ldr	r2, [r7, #16]
 8023910:	601a      	str	r2, [r3, #0]
}
 8023912:	bf00      	nop
 8023914:	3718      	adds	r7, #24
 8023916:	46bd      	mov	sp, r7
 8023918:	bd80      	pop	{r7, pc}

0802391a <mapping_search>:

/* This version rounds up to the next block size (for allocations) */
static void mapping_search(size_t size, int * fli, int * sli)
{
 802391a:	b580      	push	{r7, lr}
 802391c:	b086      	sub	sp, #24
 802391e:	af00      	add	r7, sp, #0
 8023920:	60f8      	str	r0, [r7, #12]
 8023922:	60b9      	str	r1, [r7, #8]
 8023924:	607a      	str	r2, [r7, #4]
    if(size >= SMALL_BLOCK_SIZE) {
 8023926:	68fb      	ldr	r3, [r7, #12]
 8023928:	2b7f      	cmp	r3, #127	; 0x7f
 802392a:	d90d      	bls.n	8023948 <mapping_search+0x2e>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 802392c:	68f8      	ldr	r0, [r7, #12]
 802392e:	f7ff fe25 	bl	802357c <tlsf_fls>
 8023932:	4603      	mov	r3, r0
 8023934:	3b05      	subs	r3, #5
 8023936:	2201      	movs	r2, #1
 8023938:	fa02 f303 	lsl.w	r3, r2, r3
 802393c:	3b01      	subs	r3, #1
 802393e:	617b      	str	r3, [r7, #20]
        size += round;
 8023940:	68fa      	ldr	r2, [r7, #12]
 8023942:	697b      	ldr	r3, [r7, #20]
 8023944:	4413      	add	r3, r2
 8023946:	60fb      	str	r3, [r7, #12]
    }
    mapping_insert(size, fli, sli);
 8023948:	687a      	ldr	r2, [r7, #4]
 802394a:	68b9      	ldr	r1, [r7, #8]
 802394c:	68f8      	ldr	r0, [r7, #12]
 802394e:	f7ff ffb9 	bl	80238c4 <mapping_insert>
}
 8023952:	bf00      	nop
 8023954:	3718      	adds	r7, #24
 8023956:	46bd      	mov	sp, r7
 8023958:	bd80      	pop	{r7, pc}

0802395a <search_suitable_block>:

static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
{
 802395a:	b580      	push	{r7, lr}
 802395c:	b088      	sub	sp, #32
 802395e:	af00      	add	r7, sp, #0
 8023960:	60f8      	str	r0, [r7, #12]
 8023962:	60b9      	str	r1, [r7, #8]
 8023964:	607a      	str	r2, [r7, #4]
    int fl = *fli;
 8023966:	68bb      	ldr	r3, [r7, #8]
 8023968:	681b      	ldr	r3, [r3, #0]
 802396a:	61fb      	str	r3, [r7, #28]
    int sl = *sli;
 802396c:	687b      	ldr	r3, [r7, #4]
 802396e:	681b      	ldr	r3, [r3, #0]
 8023970:	617b      	str	r3, [r7, #20]

    /*
    ** First, search for a block in the list associated with the given
    ** fl/sl index.
    */
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8023972:	68fa      	ldr	r2, [r7, #12]
 8023974:	69fb      	ldr	r3, [r7, #28]
 8023976:	3304      	adds	r3, #4
 8023978:	009b      	lsls	r3, r3, #2
 802397a:	4413      	add	r3, r2
 802397c:	685a      	ldr	r2, [r3, #4]
 802397e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023982:	697b      	ldr	r3, [r7, #20]
 8023984:	fa01 f303 	lsl.w	r3, r1, r3
 8023988:	4013      	ands	r3, r2
 802398a:	61bb      	str	r3, [r7, #24]
    if(!sl_map) {
 802398c:	69bb      	ldr	r3, [r7, #24]
 802398e:	2b00      	cmp	r3, #0
 8023990:	d11c      	bne.n	80239cc <search_suitable_block+0x72>
        /* No block exists. Search in the next largest first-level list. */
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8023992:	68fb      	ldr	r3, [r7, #12]
 8023994:	691a      	ldr	r2, [r3, #16]
 8023996:	69fb      	ldr	r3, [r7, #28]
 8023998:	3301      	adds	r3, #1
 802399a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802399e:	fa01 f303 	lsl.w	r3, r1, r3
 80239a2:	4013      	ands	r3, r2
 80239a4:	613b      	str	r3, [r7, #16]
        if(!fl_map) {
 80239a6:	693b      	ldr	r3, [r7, #16]
 80239a8:	2b00      	cmp	r3, #0
 80239aa:	d101      	bne.n	80239b0 <search_suitable_block+0x56>
            /* No free blocks available, memory has been exhausted. */
            return 0;
 80239ac:	2300      	movs	r3, #0
 80239ae:	e021      	b.n	80239f4 <search_suitable_block+0x9a>
        }

        fl = tlsf_ffs(fl_map);
 80239b0:	6938      	ldr	r0, [r7, #16]
 80239b2:	f7ff fdce 	bl	8023552 <tlsf_ffs>
 80239b6:	61f8      	str	r0, [r7, #28]
        *fli = fl;
 80239b8:	68bb      	ldr	r3, [r7, #8]
 80239ba:	69fa      	ldr	r2, [r7, #28]
 80239bc:	601a      	str	r2, [r3, #0]
        sl_map = control->sl_bitmap[fl];
 80239be:	68fa      	ldr	r2, [r7, #12]
 80239c0:	69fb      	ldr	r3, [r7, #28]
 80239c2:	3304      	adds	r3, #4
 80239c4:	009b      	lsls	r3, r3, #2
 80239c6:	4413      	add	r3, r2
 80239c8:	685b      	ldr	r3, [r3, #4]
 80239ca:	61bb      	str	r3, [r7, #24]
    }
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 80239cc:	69bb      	ldr	r3, [r7, #24]
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	d100      	bne.n	80239d4 <search_suitable_block+0x7a>
 80239d2:	e7fe      	b.n	80239d2 <search_suitable_block+0x78>
    sl = tlsf_ffs(sl_map);
 80239d4:	69b8      	ldr	r0, [r7, #24]
 80239d6:	f7ff fdbc 	bl	8023552 <tlsf_ffs>
 80239da:	6178      	str	r0, [r7, #20]
    *sli = sl;
 80239dc:	687b      	ldr	r3, [r7, #4]
 80239de:	697a      	ldr	r2, [r7, #20]
 80239e0:	601a      	str	r2, [r3, #0]

    /* Return the first block in the free list. */
    return control->blocks[fl][sl];
 80239e2:	68fa      	ldr	r2, [r7, #12]
 80239e4:	69fb      	ldr	r3, [r7, #28]
 80239e6:	0159      	lsls	r1, r3, #5
 80239e8:	697b      	ldr	r3, [r7, #20]
 80239ea:	440b      	add	r3, r1
 80239ec:	330e      	adds	r3, #14
 80239ee:	009b      	lsls	r3, r3, #2
 80239f0:	4413      	add	r3, r2
 80239f2:	685b      	ldr	r3, [r3, #4]
}
 80239f4:	4618      	mov	r0, r3
 80239f6:	3720      	adds	r7, #32
 80239f8:	46bd      	mov	sp, r7
 80239fa:	bd80      	pop	{r7, pc}

080239fc <remove_free_block>:

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 80239fc:	b480      	push	{r7}
 80239fe:	b087      	sub	sp, #28
 8023a00:	af00      	add	r7, sp, #0
 8023a02:	60f8      	str	r0, [r7, #12]
 8023a04:	60b9      	str	r1, [r7, #8]
 8023a06:	607a      	str	r2, [r7, #4]
 8023a08:	603b      	str	r3, [r7, #0]
    block_header_t * prev = block->prev_free;
 8023a0a:	68bb      	ldr	r3, [r7, #8]
 8023a0c:	68db      	ldr	r3, [r3, #12]
 8023a0e:	617b      	str	r3, [r7, #20]
    block_header_t * next = block->next_free;
 8023a10:	68bb      	ldr	r3, [r7, #8]
 8023a12:	689b      	ldr	r3, [r3, #8]
 8023a14:	613b      	str	r3, [r7, #16]
    tlsf_assert(prev && "prev_free field can not be null");
 8023a16:	697b      	ldr	r3, [r7, #20]
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	d100      	bne.n	8023a1e <remove_free_block+0x22>
 8023a1c:	e7fe      	b.n	8023a1c <remove_free_block+0x20>
    tlsf_assert(next && "next_free field can not be null");
 8023a1e:	693b      	ldr	r3, [r7, #16]
 8023a20:	2b00      	cmp	r3, #0
 8023a22:	d100      	bne.n	8023a26 <remove_free_block+0x2a>
 8023a24:	e7fe      	b.n	8023a24 <remove_free_block+0x28>
    next->prev_free = prev;
 8023a26:	693b      	ldr	r3, [r7, #16]
 8023a28:	697a      	ldr	r2, [r7, #20]
 8023a2a:	60da      	str	r2, [r3, #12]
    prev->next_free = next;
 8023a2c:	697b      	ldr	r3, [r7, #20]
 8023a2e:	693a      	ldr	r2, [r7, #16]
 8023a30:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 8023a32:	68fa      	ldr	r2, [r7, #12]
 8023a34:	687b      	ldr	r3, [r7, #4]
 8023a36:	0159      	lsls	r1, r3, #5
 8023a38:	683b      	ldr	r3, [r7, #0]
 8023a3a:	440b      	add	r3, r1
 8023a3c:	330e      	adds	r3, #14
 8023a3e:	009b      	lsls	r3, r3, #2
 8023a40:	4413      	add	r3, r2
 8023a42:	685b      	ldr	r3, [r3, #4]
 8023a44:	68ba      	ldr	r2, [r7, #8]
 8023a46:	429a      	cmp	r2, r3
 8023a48:	d131      	bne.n	8023aae <remove_free_block+0xb2>
        control->blocks[fl][sl] = next;
 8023a4a:	68fa      	ldr	r2, [r7, #12]
 8023a4c:	687b      	ldr	r3, [r7, #4]
 8023a4e:	0159      	lsls	r1, r3, #5
 8023a50:	683b      	ldr	r3, [r7, #0]
 8023a52:	440b      	add	r3, r1
 8023a54:	330e      	adds	r3, #14
 8023a56:	009b      	lsls	r3, r3, #2
 8023a58:	4413      	add	r3, r2
 8023a5a:	693a      	ldr	r2, [r7, #16]
 8023a5c:	605a      	str	r2, [r3, #4]

        /* If the new head is null, clear the bitmap. */
        if(next == &control->block_null) {
 8023a5e:	68fb      	ldr	r3, [r7, #12]
 8023a60:	693a      	ldr	r2, [r7, #16]
 8023a62:	429a      	cmp	r2, r3
 8023a64:	d123      	bne.n	8023aae <remove_free_block+0xb2>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8023a66:	68fa      	ldr	r2, [r7, #12]
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	3304      	adds	r3, #4
 8023a6c:	009b      	lsls	r3, r3, #2
 8023a6e:	4413      	add	r3, r2
 8023a70:	685a      	ldr	r2, [r3, #4]
 8023a72:	2101      	movs	r1, #1
 8023a74:	683b      	ldr	r3, [r7, #0]
 8023a76:	fa01 f303 	lsl.w	r3, r1, r3
 8023a7a:	43db      	mvns	r3, r3
 8023a7c:	401a      	ands	r2, r3
 8023a7e:	68f9      	ldr	r1, [r7, #12]
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	3304      	adds	r3, #4
 8023a84:	009b      	lsls	r3, r3, #2
 8023a86:	440b      	add	r3, r1
 8023a88:	605a      	str	r2, [r3, #4]

            /* If the second bitmap is now empty, clear the fl bitmap. */
            if(!control->sl_bitmap[fl]) {
 8023a8a:	68fa      	ldr	r2, [r7, #12]
 8023a8c:	687b      	ldr	r3, [r7, #4]
 8023a8e:	3304      	adds	r3, #4
 8023a90:	009b      	lsls	r3, r3, #2
 8023a92:	4413      	add	r3, r2
 8023a94:	685b      	ldr	r3, [r3, #4]
 8023a96:	2b00      	cmp	r3, #0
 8023a98:	d109      	bne.n	8023aae <remove_free_block+0xb2>
                control->fl_bitmap &= ~(1U << fl);
 8023a9a:	68fb      	ldr	r3, [r7, #12]
 8023a9c:	691a      	ldr	r2, [r3, #16]
 8023a9e:	2101      	movs	r1, #1
 8023aa0:	687b      	ldr	r3, [r7, #4]
 8023aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8023aa6:	43db      	mvns	r3, r3
 8023aa8:	401a      	ands	r2, r3
 8023aaa:	68fb      	ldr	r3, [r7, #12]
 8023aac:	611a      	str	r2, [r3, #16]
            }
        }
    }
}
 8023aae:	bf00      	nop
 8023ab0:	371c      	adds	r7, #28
 8023ab2:	46bd      	mov	sp, r7
 8023ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ab8:	4770      	bx	lr

08023aba <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8023aba:	b590      	push	{r4, r7, lr}
 8023abc:	b087      	sub	sp, #28
 8023abe:	af00      	add	r7, sp, #0
 8023ac0:	60f8      	str	r0, [r7, #12]
 8023ac2:	60b9      	str	r1, [r7, #8]
 8023ac4:	607a      	str	r2, [r7, #4]
 8023ac6:	603b      	str	r3, [r7, #0]
    block_header_t * current = control->blocks[fl][sl];
 8023ac8:	68fa      	ldr	r2, [r7, #12]
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	0159      	lsls	r1, r3, #5
 8023ace:	683b      	ldr	r3, [r7, #0]
 8023ad0:	440b      	add	r3, r1
 8023ad2:	330e      	adds	r3, #14
 8023ad4:	009b      	lsls	r3, r3, #2
 8023ad6:	4413      	add	r3, r2
 8023ad8:	685b      	ldr	r3, [r3, #4]
 8023ada:	617b      	str	r3, [r7, #20]
    tlsf_assert(current && "free list cannot have a null entry");
 8023adc:	697b      	ldr	r3, [r7, #20]
 8023ade:	2b00      	cmp	r3, #0
 8023ae0:	d100      	bne.n	8023ae4 <insert_free_block+0x2a>
 8023ae2:	e7fe      	b.n	8023ae2 <insert_free_block+0x28>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 8023ae4:	68bb      	ldr	r3, [r7, #8]
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d100      	bne.n	8023aec <insert_free_block+0x32>
 8023aea:	e7fe      	b.n	8023aea <insert_free_block+0x30>
    block->next_free = current;
 8023aec:	68bb      	ldr	r3, [r7, #8]
 8023aee:	697a      	ldr	r2, [r7, #20]
 8023af0:	609a      	str	r2, [r3, #8]
    block->prev_free = &control->block_null;
 8023af2:	68fa      	ldr	r2, [r7, #12]
 8023af4:	68bb      	ldr	r3, [r7, #8]
 8023af6:	60da      	str	r2, [r3, #12]
    current->prev_free = block;
 8023af8:	697b      	ldr	r3, [r7, #20]
 8023afa:	68ba      	ldr	r2, [r7, #8]
 8023afc:	60da      	str	r2, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8023afe:	68b8      	ldr	r0, [r7, #8]
 8023b00:	f7ff fdf8 	bl	80236f4 <block_to_ptr>
 8023b04:	4604      	mov	r4, r0
 8023b06:	68b8      	ldr	r0, [r7, #8]
 8023b08:	f7ff fdf4 	bl	80236f4 <block_to_ptr>
 8023b0c:	4603      	mov	r3, r0
 8023b0e:	2104      	movs	r1, #4
 8023b10:	4618      	mov	r0, r3
 8023b12:	f7ff fe9d 	bl	8023850 <align_ptr>
 8023b16:	4603      	mov	r3, r0
 8023b18:	429c      	cmp	r4, r3
 8023b1a:	d000      	beq.n	8023b1e <insert_free_block+0x64>
 8023b1c:	e7fe      	b.n	8023b1c <insert_free_block+0x62>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 8023b1e:	68fa      	ldr	r2, [r7, #12]
 8023b20:	687b      	ldr	r3, [r7, #4]
 8023b22:	0159      	lsls	r1, r3, #5
 8023b24:	683b      	ldr	r3, [r7, #0]
 8023b26:	440b      	add	r3, r1
 8023b28:	330e      	adds	r3, #14
 8023b2a:	009b      	lsls	r3, r3, #2
 8023b2c:	4413      	add	r3, r2
 8023b2e:	68ba      	ldr	r2, [r7, #8]
 8023b30:	605a      	str	r2, [r3, #4]
    control->fl_bitmap |= (1U << fl);
 8023b32:	68fb      	ldr	r3, [r7, #12]
 8023b34:	691a      	ldr	r2, [r3, #16]
 8023b36:	2101      	movs	r1, #1
 8023b38:	687b      	ldr	r3, [r7, #4]
 8023b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8023b3e:	431a      	orrs	r2, r3
 8023b40:	68fb      	ldr	r3, [r7, #12]
 8023b42:	611a      	str	r2, [r3, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8023b44:	68fa      	ldr	r2, [r7, #12]
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	3304      	adds	r3, #4
 8023b4a:	009b      	lsls	r3, r3, #2
 8023b4c:	4413      	add	r3, r2
 8023b4e:	685a      	ldr	r2, [r3, #4]
 8023b50:	2101      	movs	r1, #1
 8023b52:	683b      	ldr	r3, [r7, #0]
 8023b54:	fa01 f303 	lsl.w	r3, r1, r3
 8023b58:	431a      	orrs	r2, r3
 8023b5a:	68f9      	ldr	r1, [r7, #12]
 8023b5c:	687b      	ldr	r3, [r7, #4]
 8023b5e:	3304      	adds	r3, #4
 8023b60:	009b      	lsls	r3, r3, #2
 8023b62:	440b      	add	r3, r1
 8023b64:	605a      	str	r2, [r3, #4]
}
 8023b66:	bf00      	nop
 8023b68:	371c      	adds	r7, #28
 8023b6a:	46bd      	mov	sp, r7
 8023b6c:	bd90      	pop	{r4, r7, pc}

08023b6e <block_remove>:

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 8023b6e:	b580      	push	{r7, lr}
 8023b70:	b084      	sub	sp, #16
 8023b72:	af00      	add	r7, sp, #0
 8023b74:	6078      	str	r0, [r7, #4]
 8023b76:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8023b78:	6838      	ldr	r0, [r7, #0]
 8023b7a:	f7ff fd16 	bl	80235aa <block_size>
 8023b7e:	f107 0208 	add.w	r2, r7, #8
 8023b82:	f107 030c 	add.w	r3, r7, #12
 8023b86:	4619      	mov	r1, r3
 8023b88:	f7ff fe9c 	bl	80238c4 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8023b8c:	68fa      	ldr	r2, [r7, #12]
 8023b8e:	68bb      	ldr	r3, [r7, #8]
 8023b90:	6839      	ldr	r1, [r7, #0]
 8023b92:	6878      	ldr	r0, [r7, #4]
 8023b94:	f7ff ff32 	bl	80239fc <remove_free_block>
}
 8023b98:	bf00      	nop
 8023b9a:	3710      	adds	r7, #16
 8023b9c:	46bd      	mov	sp, r7
 8023b9e:	bd80      	pop	{r7, pc}

08023ba0 <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 8023ba0:	b580      	push	{r7, lr}
 8023ba2:	b084      	sub	sp, #16
 8023ba4:	af00      	add	r7, sp, #0
 8023ba6:	6078      	str	r0, [r7, #4]
 8023ba8:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8023baa:	6838      	ldr	r0, [r7, #0]
 8023bac:	f7ff fcfd 	bl	80235aa <block_size>
 8023bb0:	f107 0208 	add.w	r2, r7, #8
 8023bb4:	f107 030c 	add.w	r3, r7, #12
 8023bb8:	4619      	mov	r1, r3
 8023bba:	f7ff fe83 	bl	80238c4 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 8023bbe:	68fa      	ldr	r2, [r7, #12]
 8023bc0:	68bb      	ldr	r3, [r7, #8]
 8023bc2:	6839      	ldr	r1, [r7, #0]
 8023bc4:	6878      	ldr	r0, [r7, #4]
 8023bc6:	f7ff ff78 	bl	8023aba <insert_free_block>
}
 8023bca:	bf00      	nop
 8023bcc:	3710      	adds	r7, #16
 8023bce:	46bd      	mov	sp, r7
 8023bd0:	bd80      	pop	{r7, pc}

08023bd2 <block_can_split>:

static int block_can_split(block_header_t * block, size_t size)
{
 8023bd2:	b580      	push	{r7, lr}
 8023bd4:	b082      	sub	sp, #8
 8023bd6:	af00      	add	r7, sp, #0
 8023bd8:	6078      	str	r0, [r7, #4]
 8023bda:	6039      	str	r1, [r7, #0]
    return block_size(block) >= sizeof(block_header_t) + size;
 8023bdc:	6878      	ldr	r0, [r7, #4]
 8023bde:	f7ff fce4 	bl	80235aa <block_size>
 8023be2:	4602      	mov	r2, r0
 8023be4:	683b      	ldr	r3, [r7, #0]
 8023be6:	3310      	adds	r3, #16
 8023be8:	429a      	cmp	r2, r3
 8023bea:	bf2c      	ite	cs
 8023bec:	2301      	movcs	r3, #1
 8023bee:	2300      	movcc	r3, #0
 8023bf0:	b2db      	uxtb	r3, r3
}
 8023bf2:	4618      	mov	r0, r3
 8023bf4:	3708      	adds	r7, #8
 8023bf6:	46bd      	mov	sp, r7
 8023bf8:	bd80      	pop	{r7, pc}

08023bfa <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8023bfa:	b590      	push	{r4, r7, lr}
 8023bfc:	b085      	sub	sp, #20
 8023bfe:	af00      	add	r7, sp, #0
 8023c00:	6078      	str	r0, [r7, #4]
 8023c02:	6039      	str	r1, [r7, #0]
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 8023c04:	6878      	ldr	r0, [r7, #4]
 8023c06:	f7ff fd75 	bl	80236f4 <block_to_ptr>
 8023c0a:	4602      	mov	r2, r0
 8023c0c:	2104      	movs	r1, #4
 8023c0e:	683b      	ldr	r3, [r7, #0]
 8023c10:	1a5b      	subs	r3, r3, r1
 8023c12:	4619      	mov	r1, r3
 8023c14:	4610      	mov	r0, r2
 8023c16:	f7ff fd7a 	bl	802370e <offset_to_block>
 8023c1a:	60f8      	str	r0, [r7, #12]

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8023c1c:	6878      	ldr	r0, [r7, #4]
 8023c1e:	f7ff fcc4 	bl	80235aa <block_size>
 8023c22:	4602      	mov	r2, r0
 8023c24:	2104      	movs	r1, #4
 8023c26:	683b      	ldr	r3, [r7, #0]
 8023c28:	440b      	add	r3, r1
 8023c2a:	1ad3      	subs	r3, r2, r3
 8023c2c:	60bb      	str	r3, [r7, #8]

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8023c2e:	68f8      	ldr	r0, [r7, #12]
 8023c30:	f7ff fd60 	bl	80236f4 <block_to_ptr>
 8023c34:	4604      	mov	r4, r0
 8023c36:	68f8      	ldr	r0, [r7, #12]
 8023c38:	f7ff fd5c 	bl	80236f4 <block_to_ptr>
 8023c3c:	4603      	mov	r3, r0
 8023c3e:	2104      	movs	r1, #4
 8023c40:	4618      	mov	r0, r3
 8023c42:	f7ff fe05 	bl	8023850 <align_ptr>
 8023c46:	4603      	mov	r3, r0
 8023c48:	429c      	cmp	r4, r3
 8023c4a:	d000      	beq.n	8023c4e <block_split+0x54>
 8023c4c:	e7fe      	b.n	8023c4c <block_split+0x52>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8023c4e:	6878      	ldr	r0, [r7, #4]
 8023c50:	f7ff fcab 	bl	80235aa <block_size>
 8023c54:	4601      	mov	r1, r0
 8023c56:	68ba      	ldr	r2, [r7, #8]
 8023c58:	683b      	ldr	r3, [r7, #0]
 8023c5a:	4413      	add	r3, r2
 8023c5c:	2204      	movs	r2, #4
 8023c5e:	4413      	add	r3, r2
 8023c60:	4299      	cmp	r1, r3
 8023c62:	d000      	beq.n	8023c66 <block_split+0x6c>
 8023c64:	e7fe      	b.n	8023c64 <block_split+0x6a>
    block_set_size(remaining, remain_size);
 8023c66:	68b9      	ldr	r1, [r7, #8]
 8023c68:	68f8      	ldr	r0, [r7, #12]
 8023c6a:	f7ff fcaf 	bl	80235cc <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8023c6e:	68f8      	ldr	r0, [r7, #12]
 8023c70:	f7ff fc9b 	bl	80235aa <block_size>
 8023c74:	4603      	mov	r3, r0
 8023c76:	220c      	movs	r2, #12
 8023c78:	4293      	cmp	r3, r2
 8023c7a:	d200      	bcs.n	8023c7e <block_split+0x84>
 8023c7c:	e7fe      	b.n	8023c7c <block_split+0x82>

    block_set_size(block, size);
 8023c7e:	6839      	ldr	r1, [r7, #0]
 8023c80:	6878      	ldr	r0, [r7, #4]
 8023c82:	f7ff fca3 	bl	80235cc <block_set_size>
    block_mark_as_free(remaining);
 8023c86:	68f8      	ldr	r0, [r7, #12]
 8023c88:	f7ff fd8f 	bl	80237aa <block_mark_as_free>

    return remaining;
 8023c8c:	68fb      	ldr	r3, [r7, #12]
}
 8023c8e:	4618      	mov	r0, r3
 8023c90:	3714      	adds	r7, #20
 8023c92:	46bd      	mov	sp, r7
 8023c94:	bd90      	pop	{r4, r7, pc}

08023c96 <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 8023c96:	b580      	push	{r7, lr}
 8023c98:	b082      	sub	sp, #8
 8023c9a:	af00      	add	r7, sp, #0
 8023c9c:	6078      	str	r0, [r7, #4]
 8023c9e:	6039      	str	r1, [r7, #0]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8023ca0:	6878      	ldr	r0, [r7, #4]
 8023ca2:	f7ff fcaa 	bl	80235fa <block_is_last>
 8023ca6:	4603      	mov	r3, r0
 8023ca8:	2b00      	cmp	r3, #0
 8023caa:	d000      	beq.n	8023cae <block_absorb+0x18>
 8023cac:	e7fe      	b.n	8023cac <block_absorb+0x16>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 8023cae:	6838      	ldr	r0, [r7, #0]
 8023cb0:	f7ff fc7b 	bl	80235aa <block_size>
 8023cb4:	4603      	mov	r3, r0
 8023cb6:	2204      	movs	r2, #4
 8023cb8:	441a      	add	r2, r3
 8023cba:	687b      	ldr	r3, [r7, #4]
 8023cbc:	685b      	ldr	r3, [r3, #4]
 8023cbe:	441a      	add	r2, r3
 8023cc0:	687b      	ldr	r3, [r7, #4]
 8023cc2:	605a      	str	r2, [r3, #4]
    block_link_next(prev);
 8023cc4:	6878      	ldr	r0, [r7, #4]
 8023cc6:	f7ff fd60 	bl	802378a <block_link_next>
    return prev;
 8023cca:	687b      	ldr	r3, [r7, #4]
}
 8023ccc:	4618      	mov	r0, r3
 8023cce:	3708      	adds	r7, #8
 8023cd0:	46bd      	mov	sp, r7
 8023cd2:	bd80      	pop	{r7, pc}

08023cd4 <block_merge_prev>:

/* Merge a just-freed block with an adjacent previous free block. */
static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
{
 8023cd4:	b580      	push	{r7, lr}
 8023cd6:	b084      	sub	sp, #16
 8023cd8:	af00      	add	r7, sp, #0
 8023cda:	6078      	str	r0, [r7, #4]
 8023cdc:	6039      	str	r1, [r7, #0]
    if(block_is_prev_free(block)) {
 8023cde:	6838      	ldr	r0, [r7, #0]
 8023ce0:	f7ff fccb 	bl	802367a <block_is_prev_free>
 8023ce4:	4603      	mov	r3, r0
 8023ce6:	2b00      	cmp	r3, #0
 8023ce8:	d017      	beq.n	8023d1a <block_merge_prev+0x46>
        block_header_t * prev = block_prev(block);
 8023cea:	6838      	ldr	r0, [r7, #0]
 8023cec:	f7ff fd1d 	bl	802372a <block_prev>
 8023cf0:	60f8      	str	r0, [r7, #12]
        tlsf_assert(prev && "prev physical block can't be null");
 8023cf2:	68fb      	ldr	r3, [r7, #12]
 8023cf4:	2b00      	cmp	r3, #0
 8023cf6:	d100      	bne.n	8023cfa <block_merge_prev+0x26>
 8023cf8:	e7fe      	b.n	8023cf8 <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8023cfa:	68f8      	ldr	r0, [r7, #12]
 8023cfc:	f7ff fc8e 	bl	802361c <block_is_free>
 8023d00:	4603      	mov	r3, r0
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	d100      	bne.n	8023d08 <block_merge_prev+0x34>
 8023d06:	e7fe      	b.n	8023d06 <block_merge_prev+0x32>
        block_remove(control, prev);
 8023d08:	68f9      	ldr	r1, [r7, #12]
 8023d0a:	6878      	ldr	r0, [r7, #4]
 8023d0c:	f7ff ff2f 	bl	8023b6e <block_remove>
        block = block_absorb(prev, block);
 8023d10:	6839      	ldr	r1, [r7, #0]
 8023d12:	68f8      	ldr	r0, [r7, #12]
 8023d14:	f7ff ffbf 	bl	8023c96 <block_absorb>
 8023d18:	6038      	str	r0, [r7, #0]
    }

    return block;
 8023d1a:	683b      	ldr	r3, [r7, #0]
}
 8023d1c:	4618      	mov	r0, r3
 8023d1e:	3710      	adds	r7, #16
 8023d20:	46bd      	mov	sp, r7
 8023d22:	bd80      	pop	{r7, pc}

08023d24 <block_merge_next>:

/* Merge a just-freed block with an adjacent free block. */
static block_header_t * block_merge_next(control_t * control, block_header_t * block)
{
 8023d24:	b580      	push	{r7, lr}
 8023d26:	b084      	sub	sp, #16
 8023d28:	af00      	add	r7, sp, #0
 8023d2a:	6078      	str	r0, [r7, #4]
 8023d2c:	6039      	str	r1, [r7, #0]
    block_header_t * next = block_next(block);
 8023d2e:	6838      	ldr	r0, [r7, #0]
 8023d30:	f7ff fd0c 	bl	802374c <block_next>
 8023d34:	60f8      	str	r0, [r7, #12]
    tlsf_assert(next && "next physical block can't be null");
 8023d36:	68fb      	ldr	r3, [r7, #12]
 8023d38:	2b00      	cmp	r3, #0
 8023d3a:	d100      	bne.n	8023d3e <block_merge_next+0x1a>
 8023d3c:	e7fe      	b.n	8023d3c <block_merge_next+0x18>

    if(block_is_free(next)) {
 8023d3e:	68f8      	ldr	r0, [r7, #12]
 8023d40:	f7ff fc6c 	bl	802361c <block_is_free>
 8023d44:	4603      	mov	r3, r0
 8023d46:	2b00      	cmp	r3, #0
 8023d48:	d00f      	beq.n	8023d6a <block_merge_next+0x46>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8023d4a:	6838      	ldr	r0, [r7, #0]
 8023d4c:	f7ff fc55 	bl	80235fa <block_is_last>
 8023d50:	4603      	mov	r3, r0
 8023d52:	2b00      	cmp	r3, #0
 8023d54:	d000      	beq.n	8023d58 <block_merge_next+0x34>
 8023d56:	e7fe      	b.n	8023d56 <block_merge_next+0x32>
        block_remove(control, next);
 8023d58:	68f9      	ldr	r1, [r7, #12]
 8023d5a:	6878      	ldr	r0, [r7, #4]
 8023d5c:	f7ff ff07 	bl	8023b6e <block_remove>
        block = block_absorb(block, next);
 8023d60:	68f9      	ldr	r1, [r7, #12]
 8023d62:	6838      	ldr	r0, [r7, #0]
 8023d64:	f7ff ff97 	bl	8023c96 <block_absorb>
 8023d68:	6038      	str	r0, [r7, #0]
    }

    return block;
 8023d6a:	683b      	ldr	r3, [r7, #0]
}
 8023d6c:	4618      	mov	r0, r3
 8023d6e:	3710      	adds	r7, #16
 8023d70:	46bd      	mov	sp, r7
 8023d72:	bd80      	pop	{r7, pc}

08023d74 <block_trim_free>:

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
 8023d74:	b580      	push	{r7, lr}
 8023d76:	b086      	sub	sp, #24
 8023d78:	af00      	add	r7, sp, #0
 8023d7a:	60f8      	str	r0, [r7, #12]
 8023d7c:	60b9      	str	r1, [r7, #8]
 8023d7e:	607a      	str	r2, [r7, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 8023d80:	68b8      	ldr	r0, [r7, #8]
 8023d82:	f7ff fc4b 	bl	802361c <block_is_free>
 8023d86:	4603      	mov	r3, r0
 8023d88:	2b00      	cmp	r3, #0
 8023d8a:	d100      	bne.n	8023d8e <block_trim_free+0x1a>
 8023d8c:	e7fe      	b.n	8023d8c <block_trim_free+0x18>
    if(block_can_split(block, size)) {
 8023d8e:	6879      	ldr	r1, [r7, #4]
 8023d90:	68b8      	ldr	r0, [r7, #8]
 8023d92:	f7ff ff1e 	bl	8023bd2 <block_can_split>
 8023d96:	4603      	mov	r3, r0
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	d00e      	beq.n	8023dba <block_trim_free+0x46>
        block_header_t * remaining_block = block_split(block, size);
 8023d9c:	6879      	ldr	r1, [r7, #4]
 8023d9e:	68b8      	ldr	r0, [r7, #8]
 8023da0:	f7ff ff2b 	bl	8023bfa <block_split>
 8023da4:	6178      	str	r0, [r7, #20]
        block_link_next(block);
 8023da6:	68b8      	ldr	r0, [r7, #8]
 8023da8:	f7ff fcef 	bl	802378a <block_link_next>
        block_set_prev_free(remaining_block);
 8023dac:	6978      	ldr	r0, [r7, #20]
 8023dae:	f7ff fc72 	bl	8023696 <block_set_prev_free>
        block_insert(control, remaining_block);
 8023db2:	6979      	ldr	r1, [r7, #20]
 8023db4:	68f8      	ldr	r0, [r7, #12]
 8023db6:	f7ff fef3 	bl	8023ba0 <block_insert>
    }
}
 8023dba:	bf00      	nop
 8023dbc:	3718      	adds	r7, #24
 8023dbe:	46bd      	mov	sp, r7
 8023dc0:	bd80      	pop	{r7, pc}

08023dc2 <block_trim_used>:

/* Trim any trailing block space off the end of a used block, return to pool. */
static void block_trim_used(control_t * control, block_header_t * block, size_t size)
{
 8023dc2:	b580      	push	{r7, lr}
 8023dc4:	b086      	sub	sp, #24
 8023dc6:	af00      	add	r7, sp, #0
 8023dc8:	60f8      	str	r0, [r7, #12]
 8023dca:	60b9      	str	r1, [r7, #8]
 8023dcc:	607a      	str	r2, [r7, #4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 8023dce:	68b8      	ldr	r0, [r7, #8]
 8023dd0:	f7ff fc24 	bl	802361c <block_is_free>
 8023dd4:	4603      	mov	r3, r0
 8023dd6:	2b00      	cmp	r3, #0
 8023dd8:	d000      	beq.n	8023ddc <block_trim_used+0x1a>
 8023dda:	e7fe      	b.n	8023dda <block_trim_used+0x18>
    if(block_can_split(block, size)) {
 8023ddc:	6879      	ldr	r1, [r7, #4]
 8023dde:	68b8      	ldr	r0, [r7, #8]
 8023de0:	f7ff fef7 	bl	8023bd2 <block_can_split>
 8023de4:	4603      	mov	r3, r0
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	d010      	beq.n	8023e0c <block_trim_used+0x4a>
        /* If the next block is free, we must coalesce. */
        block_header_t * remaining_block = block_split(block, size);
 8023dea:	6879      	ldr	r1, [r7, #4]
 8023dec:	68b8      	ldr	r0, [r7, #8]
 8023dee:	f7ff ff04 	bl	8023bfa <block_split>
 8023df2:	6178      	str	r0, [r7, #20]
        block_set_prev_used(remaining_block);
 8023df4:	6978      	ldr	r0, [r7, #20]
 8023df6:	f7ff fc5e 	bl	80236b6 <block_set_prev_used>

        remaining_block = block_merge_next(control, remaining_block);
 8023dfa:	6979      	ldr	r1, [r7, #20]
 8023dfc:	68f8      	ldr	r0, [r7, #12]
 8023dfe:	f7ff ff91 	bl	8023d24 <block_merge_next>
 8023e02:	6178      	str	r0, [r7, #20]
        block_insert(control, remaining_block);
 8023e04:	6979      	ldr	r1, [r7, #20]
 8023e06:	68f8      	ldr	r0, [r7, #12]
 8023e08:	f7ff feca 	bl	8023ba0 <block_insert>
    }
}
 8023e0c:	bf00      	nop
 8023e0e:	3718      	adds	r7, #24
 8023e10:	46bd      	mov	sp, r7
 8023e12:	bd80      	pop	{r7, pc}

08023e14 <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 8023e14:	b580      	push	{r7, lr}
 8023e16:	b086      	sub	sp, #24
 8023e18:	af00      	add	r7, sp, #0
 8023e1a:	6078      	str	r0, [r7, #4]
 8023e1c:	6039      	str	r1, [r7, #0]
    int fl = 0, sl = 0;
 8023e1e:	2300      	movs	r3, #0
 8023e20:	613b      	str	r3, [r7, #16]
 8023e22:	2300      	movs	r3, #0
 8023e24:	60fb      	str	r3, [r7, #12]
    block_header_t * block = 0;
 8023e26:	2300      	movs	r3, #0
 8023e28:	617b      	str	r3, [r7, #20]

    if(size) {
 8023e2a:	683b      	ldr	r3, [r7, #0]
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d013      	beq.n	8023e58 <block_locate_free+0x44>
        mapping_search(size, &fl, &sl);
 8023e30:	f107 020c 	add.w	r2, r7, #12
 8023e34:	f107 0310 	add.w	r3, r7, #16
 8023e38:	4619      	mov	r1, r3
 8023e3a:	6838      	ldr	r0, [r7, #0]
 8023e3c:	f7ff fd6d 	bl	802391a <mapping_search>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 8023e40:	693b      	ldr	r3, [r7, #16]
 8023e42:	2b09      	cmp	r3, #9
 8023e44:	dc08      	bgt.n	8023e58 <block_locate_free+0x44>
            block = search_suitable_block(control, &fl, &sl);
 8023e46:	f107 020c 	add.w	r2, r7, #12
 8023e4a:	f107 0310 	add.w	r3, r7, #16
 8023e4e:	4619      	mov	r1, r3
 8023e50:	6878      	ldr	r0, [r7, #4]
 8023e52:	f7ff fd82 	bl	802395a <search_suitable_block>
 8023e56:	6178      	str	r0, [r7, #20]
        }
    }

    if(block) {
 8023e58:	697b      	ldr	r3, [r7, #20]
 8023e5a:	2b00      	cmp	r3, #0
 8023e5c:	d00d      	beq.n	8023e7a <block_locate_free+0x66>
        tlsf_assert(block_size(block) >= size);
 8023e5e:	6978      	ldr	r0, [r7, #20]
 8023e60:	f7ff fba3 	bl	80235aa <block_size>
 8023e64:	4602      	mov	r2, r0
 8023e66:	683b      	ldr	r3, [r7, #0]
 8023e68:	4293      	cmp	r3, r2
 8023e6a:	d900      	bls.n	8023e6e <block_locate_free+0x5a>
 8023e6c:	e7fe      	b.n	8023e6c <block_locate_free+0x58>
        remove_free_block(control, block, fl, sl);
 8023e6e:	693a      	ldr	r2, [r7, #16]
 8023e70:	68fb      	ldr	r3, [r7, #12]
 8023e72:	6979      	ldr	r1, [r7, #20]
 8023e74:	6878      	ldr	r0, [r7, #4]
 8023e76:	f7ff fdc1 	bl	80239fc <remove_free_block>
    }

    return block;
 8023e7a:	697b      	ldr	r3, [r7, #20]
}
 8023e7c:	4618      	mov	r0, r3
 8023e7e:	3718      	adds	r7, #24
 8023e80:	46bd      	mov	sp, r7
 8023e82:	bd80      	pop	{r7, pc}

08023e84 <block_prepare_used>:

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 8023e84:	b580      	push	{r7, lr}
 8023e86:	b086      	sub	sp, #24
 8023e88:	af00      	add	r7, sp, #0
 8023e8a:	60f8      	str	r0, [r7, #12]
 8023e8c:	60b9      	str	r1, [r7, #8]
 8023e8e:	607a      	str	r2, [r7, #4]
    void * p = 0;
 8023e90:	2300      	movs	r3, #0
 8023e92:	617b      	str	r3, [r7, #20]
    if(block) {
 8023e94:	68bb      	ldr	r3, [r7, #8]
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d00f      	beq.n	8023eba <block_prepare_used+0x36>
        tlsf_assert(size && "size must be non-zero");
 8023e9a:	687b      	ldr	r3, [r7, #4]
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	d100      	bne.n	8023ea2 <block_prepare_used+0x1e>
 8023ea0:	e7fe      	b.n	8023ea0 <block_prepare_used+0x1c>
        block_trim_free(control, block, size);
 8023ea2:	687a      	ldr	r2, [r7, #4]
 8023ea4:	68b9      	ldr	r1, [r7, #8]
 8023ea6:	68f8      	ldr	r0, [r7, #12]
 8023ea8:	f7ff ff64 	bl	8023d74 <block_trim_free>
        block_mark_as_used(block);
 8023eac:	68b8      	ldr	r0, [r7, #8]
 8023eae:	f7ff fc8e 	bl	80237ce <block_mark_as_used>
        p = block_to_ptr(block);
 8023eb2:	68b8      	ldr	r0, [r7, #8]
 8023eb4:	f7ff fc1e 	bl	80236f4 <block_to_ptr>
 8023eb8:	6178      	str	r0, [r7, #20]
    }
    return p;
 8023eba:	697b      	ldr	r3, [r7, #20]
}
 8023ebc:	4618      	mov	r0, r3
 8023ebe:	3718      	adds	r7, #24
 8023ec0:	46bd      	mov	sp, r7
 8023ec2:	bd80      	pop	{r7, pc}

08023ec4 <control_constructor>:

/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
 8023ec4:	b480      	push	{r7}
 8023ec6:	b085      	sub	sp, #20
 8023ec8:	af00      	add	r7, sp, #0
 8023eca:	6078      	str	r0, [r7, #4]
    int i, j;

    control->block_null.next_free = &control->block_null;
 8023ecc:	687a      	ldr	r2, [r7, #4]
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	609a      	str	r2, [r3, #8]
    control->block_null.prev_free = &control->block_null;
 8023ed2:	687a      	ldr	r2, [r7, #4]
 8023ed4:	687b      	ldr	r3, [r7, #4]
 8023ed6:	60da      	str	r2, [r3, #12]

    control->fl_bitmap = 0;
 8023ed8:	687b      	ldr	r3, [r7, #4]
 8023eda:	2200      	movs	r2, #0
 8023edc:	611a      	str	r2, [r3, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8023ede:	2300      	movs	r3, #0
 8023ee0:	60fb      	str	r3, [r7, #12]
 8023ee2:	e01c      	b.n	8023f1e <control_constructor+0x5a>
        control->sl_bitmap[i] = 0;
 8023ee4:	687a      	ldr	r2, [r7, #4]
 8023ee6:	68fb      	ldr	r3, [r7, #12]
 8023ee8:	3304      	adds	r3, #4
 8023eea:	009b      	lsls	r3, r3, #2
 8023eec:	4413      	add	r3, r2
 8023eee:	2200      	movs	r2, #0
 8023ef0:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8023ef2:	2300      	movs	r3, #0
 8023ef4:	60bb      	str	r3, [r7, #8]
 8023ef6:	e00c      	b.n	8023f12 <control_constructor+0x4e>
            control->blocks[i][j] = &control->block_null;
 8023ef8:	687a      	ldr	r2, [r7, #4]
 8023efa:	6879      	ldr	r1, [r7, #4]
 8023efc:	68fb      	ldr	r3, [r7, #12]
 8023efe:	0158      	lsls	r0, r3, #5
 8023f00:	68bb      	ldr	r3, [r7, #8]
 8023f02:	4403      	add	r3, r0
 8023f04:	330e      	adds	r3, #14
 8023f06:	009b      	lsls	r3, r3, #2
 8023f08:	440b      	add	r3, r1
 8023f0a:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8023f0c:	68bb      	ldr	r3, [r7, #8]
 8023f0e:	3301      	adds	r3, #1
 8023f10:	60bb      	str	r3, [r7, #8]
 8023f12:	68bb      	ldr	r3, [r7, #8]
 8023f14:	2b1f      	cmp	r3, #31
 8023f16:	ddef      	ble.n	8023ef8 <control_constructor+0x34>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8023f18:	68fb      	ldr	r3, [r7, #12]
 8023f1a:	3301      	adds	r3, #1
 8023f1c:	60fb      	str	r3, [r7, #12]
 8023f1e:	68fb      	ldr	r3, [r7, #12]
 8023f20:	2b09      	cmp	r3, #9
 8023f22:	dddf      	ble.n	8023ee4 <control_constructor+0x20>
        }
    }
}
 8023f24:	bf00      	nop
 8023f26:	bf00      	nop
 8023f28:	3714      	adds	r7, #20
 8023f2a:	46bd      	mov	sp, r7
 8023f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f30:	4770      	bx	lr

08023f32 <lv_tlsf_size>:
/*
** Size of the TLSF structures in a given memory block passed to
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
 8023f32:	b480      	push	{r7}
 8023f34:	af00      	add	r7, sp, #0
    return sizeof(control_t);
 8023f36:	f240 533c 	movw	r3, #1340	; 0x53c
}
 8023f3a:	4618      	mov	r0, r3
 8023f3c:	46bd      	mov	sp, r7
 8023f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f42:	4770      	bx	lr

08023f44 <lv_tlsf_pool_overhead>:
** Overhead of the TLSF structures in a given memory block passed to
** lv_tlsf_add_pool, equal to the overhead of a free block and the
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
 8023f44:	b480      	push	{r7}
 8023f46:	af00      	add	r7, sp, #0
    return 2 * block_header_overhead;
 8023f48:	2304      	movs	r3, #4
 8023f4a:	005b      	lsls	r3, r3, #1
}
 8023f4c:	4618      	mov	r0, r3
 8023f4e:	46bd      	mov	sp, r7
 8023f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f54:	4770      	bx	lr

08023f56 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 8023f56:	b580      	push	{r7, lr}
 8023f58:	b088      	sub	sp, #32
 8023f5a:	af00      	add	r7, sp, #0
 8023f5c:	60f8      	str	r0, [r7, #12]
 8023f5e:	60b9      	str	r1, [r7, #8]
 8023f60:	607a      	str	r2, [r7, #4]
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 8023f62:	f7ff ffef 	bl	8023f44 <lv_tlsf_pool_overhead>
 8023f66:	61f8      	str	r0, [r7, #28]
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8023f68:	687a      	ldr	r2, [r7, #4]
 8023f6a:	69fb      	ldr	r3, [r7, #28]
 8023f6c:	1ad3      	subs	r3, r2, r3
 8023f6e:	2104      	movs	r1, #4
 8023f70:	4618      	mov	r0, r3
 8023f72:	f7ff fc57 	bl	8023824 <align_down>
 8023f76:	61b8      	str	r0, [r7, #24]

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8023f78:	68bb      	ldr	r3, [r7, #8]
 8023f7a:	f003 0303 	and.w	r3, r3, #3
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	d001      	beq.n	8023f86 <lv_tlsf_add_pool+0x30>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 8023f82:	2300      	movs	r3, #0
 8023f84:	e02e      	b.n	8023fe4 <lv_tlsf_add_pool+0x8e>
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 8023f86:	220c      	movs	r2, #12
 8023f88:	69bb      	ldr	r3, [r7, #24]
 8023f8a:	4293      	cmp	r3, r2
 8023f8c:	d304      	bcc.n	8023f98 <lv_tlsf_add_pool+0x42>
 8023f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023f92:	69bb      	ldr	r3, [r7, #24]
 8023f94:	4293      	cmp	r3, r2
 8023f96:	d901      	bls.n	8023f9c <lv_tlsf_add_pool+0x46>
#else
        printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
               (unsigned int)(pool_overhead + block_size_min),
               (unsigned int)(pool_overhead + block_size_max));
#endif
        return 0;
 8023f98:	2300      	movs	r3, #0
 8023f9a:	e023      	b.n	8023fe4 <lv_tlsf_add_pool+0x8e>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 8023f9c:	2304      	movs	r3, #4
 8023f9e:	425b      	negs	r3, r3
 8023fa0:	4619      	mov	r1, r3
 8023fa2:	68b8      	ldr	r0, [r7, #8]
 8023fa4:	f7ff fbb3 	bl	802370e <offset_to_block>
 8023fa8:	6178      	str	r0, [r7, #20]
    block_set_size(block, pool_bytes);
 8023faa:	69b9      	ldr	r1, [r7, #24]
 8023fac:	6978      	ldr	r0, [r7, #20]
 8023fae:	f7ff fb0d 	bl	80235cc <block_set_size>
    block_set_free(block);
 8023fb2:	6978      	ldr	r0, [r7, #20]
 8023fb4:	f7ff fb40 	bl	8023638 <block_set_free>
    block_set_prev_used(block);
 8023fb8:	6978      	ldr	r0, [r7, #20]
 8023fba:	f7ff fb7c 	bl	80236b6 <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 8023fbe:	6979      	ldr	r1, [r7, #20]
 8023fc0:	68f8      	ldr	r0, [r7, #12]
 8023fc2:	f7ff fded 	bl	8023ba0 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8023fc6:	6978      	ldr	r0, [r7, #20]
 8023fc8:	f7ff fbdf 	bl	802378a <block_link_next>
 8023fcc:	6138      	str	r0, [r7, #16]
    block_set_size(next, 0);
 8023fce:	2100      	movs	r1, #0
 8023fd0:	6938      	ldr	r0, [r7, #16]
 8023fd2:	f7ff fafb 	bl	80235cc <block_set_size>
    block_set_used(next);
 8023fd6:	6938      	ldr	r0, [r7, #16]
 8023fd8:	f7ff fb3e 	bl	8023658 <block_set_used>
    block_set_prev_free(next);
 8023fdc:	6938      	ldr	r0, [r7, #16]
 8023fde:	f7ff fb5a 	bl	8023696 <block_set_prev_free>

    return mem;
 8023fe2:	68bb      	ldr	r3, [r7, #8]
}
 8023fe4:	4618      	mov	r0, r3
 8023fe6:	3720      	adds	r7, #32
 8023fe8:	46bd      	mov	sp, r7
 8023fea:	bd80      	pop	{r7, pc}

08023fec <lv_tlsf_create>:
    return rv;
}
#endif

lv_tlsf_t lv_tlsf_create(void * mem)
{
 8023fec:	b580      	push	{r7, lr}
 8023fee:	b082      	sub	sp, #8
 8023ff0:	af00      	add	r7, sp, #0
 8023ff2:	6078      	str	r0, [r7, #4]
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8023ff4:	687b      	ldr	r3, [r7, #4]
 8023ff6:	f003 0303 	and.w	r3, r3, #3
 8023ffa:	2b00      	cmp	r3, #0
 8023ffc:	d001      	beq.n	8024002 <lv_tlsf_create+0x16>
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 8023ffe:	2300      	movs	r3, #0
 8024000:	e003      	b.n	802400a <lv_tlsf_create+0x1e>
    }

    control_constructor(tlsf_cast(control_t *, mem));
 8024002:	6878      	ldr	r0, [r7, #4]
 8024004:	f7ff ff5e 	bl	8023ec4 <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 8024008:	687b      	ldr	r3, [r7, #4]
}
 802400a:	4618      	mov	r0, r3
 802400c:	3708      	adds	r7, #8
 802400e:	46bd      	mov	sp, r7
 8024010:	bd80      	pop	{r7, pc}

08024012 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8024012:	b590      	push	{r4, r7, lr}
 8024014:	b085      	sub	sp, #20
 8024016:	af00      	add	r7, sp, #0
 8024018:	6078      	str	r0, [r7, #4]
 802401a:	6039      	str	r1, [r7, #0]
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 802401c:	6878      	ldr	r0, [r7, #4]
 802401e:	f7ff ffe5 	bl	8023fec <lv_tlsf_create>
 8024022:	60f8      	str	r0, [r7, #12]
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8024024:	f7ff ff85 	bl	8023f32 <lv_tlsf_size>
 8024028:	4602      	mov	r2, r0
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	189c      	adds	r4, r3, r2
 802402e:	f7ff ff80 	bl	8023f32 <lv_tlsf_size>
 8024032:	4602      	mov	r2, r0
 8024034:	683b      	ldr	r3, [r7, #0]
 8024036:	1a9b      	subs	r3, r3, r2
 8024038:	461a      	mov	r2, r3
 802403a:	4621      	mov	r1, r4
 802403c:	68f8      	ldr	r0, [r7, #12]
 802403e:	f7ff ff8a 	bl	8023f56 <lv_tlsf_add_pool>
    return tlsf;
 8024042:	68fb      	ldr	r3, [r7, #12]
}
 8024044:	4618      	mov	r0, r3
 8024046:	3714      	adds	r7, #20
 8024048:	46bd      	mov	sp, r7
 802404a:	bd90      	pop	{r4, r7, pc}

0802404c <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 802404c:	b580      	push	{r7, lr}
 802404e:	b086      	sub	sp, #24
 8024050:	af00      	add	r7, sp, #0
 8024052:	6078      	str	r0, [r7, #4]
 8024054:	6039      	str	r1, [r7, #0]
    control_t * control = tlsf_cast(control_t *, tlsf);
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	617b      	str	r3, [r7, #20]
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 802405a:	2104      	movs	r1, #4
 802405c:	6838      	ldr	r0, [r7, #0]
 802405e:	f7ff fc12 	bl	8023886 <adjust_request_size>
 8024062:	6138      	str	r0, [r7, #16]
    block_header_t * block = block_locate_free(control, adjust);
 8024064:	6939      	ldr	r1, [r7, #16]
 8024066:	6978      	ldr	r0, [r7, #20]
 8024068:	f7ff fed4 	bl	8023e14 <block_locate_free>
 802406c:	60f8      	str	r0, [r7, #12]
    return block_prepare_used(control, block, adjust);
 802406e:	693a      	ldr	r2, [r7, #16]
 8024070:	68f9      	ldr	r1, [r7, #12]
 8024072:	6978      	ldr	r0, [r7, #20]
 8024074:	f7ff ff06 	bl	8023e84 <block_prepare_used>
 8024078:	4603      	mov	r3, r0
}
 802407a:	4618      	mov	r0, r3
 802407c:	3718      	adds	r7, #24
 802407e:	46bd      	mov	sp, r7
 8024080:	bd80      	pop	{r7, pc}

08024082 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8024082:	b580      	push	{r7, lr}
 8024084:	b086      	sub	sp, #24
 8024086:	af00      	add	r7, sp, #0
 8024088:	6078      	str	r0, [r7, #4]
 802408a:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 802408c:	2300      	movs	r3, #0
 802408e:	617b      	str	r3, [r7, #20]
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8024090:	683b      	ldr	r3, [r7, #0]
 8024092:	2b00      	cmp	r3, #0
 8024094:	d020      	beq.n	80240d8 <lv_tlsf_free+0x56>
        control_t * control = tlsf_cast(control_t *, tlsf);
 8024096:	687b      	ldr	r3, [r7, #4]
 8024098:	613b      	str	r3, [r7, #16]
        block_header_t * block = block_from_ptr(ptr);
 802409a:	6838      	ldr	r0, [r7, #0]
 802409c:	f7ff fb1c 	bl	80236d8 <block_from_ptr>
 80240a0:	60f8      	str	r0, [r7, #12]
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80240a2:	68f8      	ldr	r0, [r7, #12]
 80240a4:	f7ff faba 	bl	802361c <block_is_free>
 80240a8:	4603      	mov	r3, r0
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	d000      	beq.n	80240b0 <lv_tlsf_free+0x2e>
 80240ae:	e7fe      	b.n	80240ae <lv_tlsf_free+0x2c>
        size = block->size;
 80240b0:	68fb      	ldr	r3, [r7, #12]
 80240b2:	685b      	ldr	r3, [r3, #4]
 80240b4:	617b      	str	r3, [r7, #20]
        block_mark_as_free(block);
 80240b6:	68f8      	ldr	r0, [r7, #12]
 80240b8:	f7ff fb77 	bl	80237aa <block_mark_as_free>
        block = block_merge_prev(control, block);
 80240bc:	68f9      	ldr	r1, [r7, #12]
 80240be:	6938      	ldr	r0, [r7, #16]
 80240c0:	f7ff fe08 	bl	8023cd4 <block_merge_prev>
 80240c4:	60f8      	str	r0, [r7, #12]
        block = block_merge_next(control, block);
 80240c6:	68f9      	ldr	r1, [r7, #12]
 80240c8:	6938      	ldr	r0, [r7, #16]
 80240ca:	f7ff fe2b 	bl	8023d24 <block_merge_next>
 80240ce:	60f8      	str	r0, [r7, #12]
        block_insert(control, block);
 80240d0:	68f9      	ldr	r1, [r7, #12]
 80240d2:	6938      	ldr	r0, [r7, #16]
 80240d4:	f7ff fd64 	bl	8023ba0 <block_insert>
    }

    return size;
 80240d8:	697b      	ldr	r3, [r7, #20]
}
 80240da:	4618      	mov	r0, r3
 80240dc:	3718      	adds	r7, #24
 80240de:	46bd      	mov	sp, r7
 80240e0:	bd80      	pop	{r7, pc}

080240e2 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 80240e2:	b580      	push	{r7, lr}
 80240e4:	b08c      	sub	sp, #48	; 0x30
 80240e6:	af00      	add	r7, sp, #0
 80240e8:	60f8      	str	r0, [r7, #12]
 80240ea:	60b9      	str	r1, [r7, #8]
 80240ec:	607a      	str	r2, [r7, #4]
    control_t * control = tlsf_cast(control_t *, tlsf);
 80240ee:	68fb      	ldr	r3, [r7, #12]
 80240f0:	62bb      	str	r3, [r7, #40]	; 0x28
    void * p = 0;
 80240f2:	2300      	movs	r3, #0
 80240f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 80240f6:	68bb      	ldr	r3, [r7, #8]
 80240f8:	2b00      	cmp	r3, #0
 80240fa:	d007      	beq.n	802410c <lv_tlsf_realloc+0x2a>
 80240fc:	687b      	ldr	r3, [r7, #4]
 80240fe:	2b00      	cmp	r3, #0
 8024100:	d104      	bne.n	802410c <lv_tlsf_realloc+0x2a>
        lv_tlsf_free(tlsf, ptr);
 8024102:	68b9      	ldr	r1, [r7, #8]
 8024104:	68f8      	ldr	r0, [r7, #12]
 8024106:	f7ff ffbc 	bl	8024082 <lv_tlsf_free>
 802410a:	e06a      	b.n	80241e2 <lv_tlsf_realloc+0x100>
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 802410c:	68bb      	ldr	r3, [r7, #8]
 802410e:	2b00      	cmp	r3, #0
 8024110:	d105      	bne.n	802411e <lv_tlsf_realloc+0x3c>
        p = lv_tlsf_malloc(tlsf, size);
 8024112:	6879      	ldr	r1, [r7, #4]
 8024114:	68f8      	ldr	r0, [r7, #12]
 8024116:	f7ff ff99 	bl	802404c <lv_tlsf_malloc>
 802411a:	62f8      	str	r0, [r7, #44]	; 0x2c
 802411c:	e061      	b.n	80241e2 <lv_tlsf_realloc+0x100>
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 802411e:	68b8      	ldr	r0, [r7, #8]
 8024120:	f7ff fada 	bl	80236d8 <block_from_ptr>
 8024124:	6278      	str	r0, [r7, #36]	; 0x24
        block_header_t * next = block_next(block);
 8024126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024128:	f7ff fb10 	bl	802374c <block_next>
 802412c:	6238      	str	r0, [r7, #32]

        const size_t cursize = block_size(block);
 802412e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024130:	f7ff fa3b 	bl	80235aa <block_size>
 8024134:	61f8      	str	r0, [r7, #28]
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 8024136:	6a38      	ldr	r0, [r7, #32]
 8024138:	f7ff fa37 	bl	80235aa <block_size>
 802413c:	4602      	mov	r2, r0
 802413e:	69fb      	ldr	r3, [r7, #28]
 8024140:	4413      	add	r3, r2
 8024142:	2204      	movs	r2, #4
 8024144:	4413      	add	r3, r2
 8024146:	61bb      	str	r3, [r7, #24]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8024148:	2104      	movs	r1, #4
 802414a:	6878      	ldr	r0, [r7, #4]
 802414c:	f7ff fb9b 	bl	8023886 <adjust_request_size>
 8024150:	6178      	str	r0, [r7, #20]
        if(size > cursize && adjust == 0) {
 8024152:	687a      	ldr	r2, [r7, #4]
 8024154:	69fb      	ldr	r3, [r7, #28]
 8024156:	429a      	cmp	r2, r3
 8024158:	d904      	bls.n	8024164 <lv_tlsf_realloc+0x82>
 802415a:	697b      	ldr	r3, [r7, #20]
 802415c:	2b00      	cmp	r3, #0
 802415e:	d101      	bne.n	8024164 <lv_tlsf_realloc+0x82>
            /* The request is probably too large, fail */
            return NULL;
 8024160:	2300      	movs	r3, #0
 8024162:	e03f      	b.n	80241e4 <lv_tlsf_realloc+0x102>
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8024164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024166:	f7ff fa59 	bl	802361c <block_is_free>
 802416a:	4603      	mov	r3, r0
 802416c:	2b00      	cmp	r3, #0
 802416e:	d000      	beq.n	8024172 <lv_tlsf_realloc+0x90>
 8024170:	e7fe      	b.n	8024170 <lv_tlsf_realloc+0x8e>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8024172:	697a      	ldr	r2, [r7, #20]
 8024174:	69fb      	ldr	r3, [r7, #28]
 8024176:	429a      	cmp	r2, r3
 8024178:	d921      	bls.n	80241be <lv_tlsf_realloc+0xdc>
 802417a:	6a38      	ldr	r0, [r7, #32]
 802417c:	f7ff fa4e 	bl	802361c <block_is_free>
 8024180:	4603      	mov	r3, r0
 8024182:	2b00      	cmp	r3, #0
 8024184:	d003      	beq.n	802418e <lv_tlsf_realloc+0xac>
 8024186:	697a      	ldr	r2, [r7, #20]
 8024188:	69bb      	ldr	r3, [r7, #24]
 802418a:	429a      	cmp	r2, r3
 802418c:	d917      	bls.n	80241be <lv_tlsf_realloc+0xdc>
            p = lv_tlsf_malloc(tlsf, size);
 802418e:	6879      	ldr	r1, [r7, #4]
 8024190:	68f8      	ldr	r0, [r7, #12]
 8024192:	f7ff ff5b 	bl	802404c <lv_tlsf_malloc>
 8024196:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(p) {
 8024198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802419a:	2b00      	cmp	r3, #0
 802419c:	d021      	beq.n	80241e2 <lv_tlsf_realloc+0x100>
                const size_t minsize = tlsf_min(cursize, size);
 802419e:	687a      	ldr	r2, [r7, #4]
 80241a0:	69fb      	ldr	r3, [r7, #28]
 80241a2:	4293      	cmp	r3, r2
 80241a4:	bf28      	it	cs
 80241a6:	4613      	movcs	r3, r2
 80241a8:	613b      	str	r3, [r7, #16]
                lv_memcpy(p, ptr, minsize);
 80241aa:	693a      	ldr	r2, [r7, #16]
 80241ac:	68b9      	ldr	r1, [r7, #8]
 80241ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80241b0:	f7fd ff66 	bl	8022080 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 80241b4:	68b9      	ldr	r1, [r7, #8]
 80241b6:	68f8      	ldr	r0, [r7, #12]
 80241b8:	f7ff ff63 	bl	8024082 <lv_tlsf_free>
            if(p) {
 80241bc:	e011      	b.n	80241e2 <lv_tlsf_realloc+0x100>
            }
        }
        else {
            /* Do we need to expand to the next block? */
            if(adjust > cursize) {
 80241be:	697a      	ldr	r2, [r7, #20]
 80241c0:	69fb      	ldr	r3, [r7, #28]
 80241c2:	429a      	cmp	r2, r3
 80241c4:	d906      	bls.n	80241d4 <lv_tlsf_realloc+0xf2>
                block_merge_next(control, block);
 80241c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80241c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80241ca:	f7ff fdab 	bl	8023d24 <block_merge_next>
                block_mark_as_used(block);
 80241ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80241d0:	f7ff fafd 	bl	80237ce <block_mark_as_used>
            }

            /* Trim the resulting block and return the original pointer. */
            block_trim_used(control, block, adjust);
 80241d4:	697a      	ldr	r2, [r7, #20]
 80241d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80241d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80241da:	f7ff fdf2 	bl	8023dc2 <block_trim_used>
            p = ptr;
 80241de:	68bb      	ldr	r3, [r7, #8]
 80241e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    return p;
 80241e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80241e4:	4618      	mov	r0, r3
 80241e6:	3730      	adds	r7, #48	; 0x30
 80241e8:	46bd      	mov	sp, r7
 80241ea:	bd80      	pop	{r7, pc}

080241ec <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 80241ec:	b480      	push	{r7}
 80241ee:	b083      	sub	sp, #12
 80241f0:	af00      	add	r7, sp, #0
 80241f2:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 80241f4:	687b      	ldr	r3, [r7, #4]
 80241f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80241fa:	4618      	mov	r0, r3
 80241fc:	370c      	adds	r7, #12
 80241fe:	46bd      	mov	sp, r7
 8024200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024204:	4770      	bx	lr
	...

08024208 <_lv_txt_is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool _lv_txt_is_break_char(uint32_t letter)
{
 8024208:	b480      	push	{r7}
 802420a:	b085      	sub	sp, #20
 802420c:	af00      	add	r7, sp, #0
 802420e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 8024210:	2300      	movs	r3, #0
 8024212:	73bb      	strb	r3, [r7, #14]

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8024214:	687b      	ldr	r3, [r7, #4]
 8024216:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 802421a:	d306      	bcc.n	802422a <_lv_txt_is_break_char+0x22>
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	f649 72a5 	movw	r2, #40869	; 0x9fa5
 8024222:	4293      	cmp	r3, r2
 8024224:	d801      	bhi.n	802422a <_lv_txt_is_break_char+0x22>
        return true;
 8024226:	2301      	movs	r3, #1
 8024228:	e015      	b.n	8024256 <_lv_txt_is_break_char+0x4e>
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 802422a:	2300      	movs	r3, #0
 802422c:	73fb      	strb	r3, [r7, #15]
 802422e:	e00c      	b.n	802424a <_lv_txt_is_break_char+0x42>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8024230:	7bfb      	ldrb	r3, [r7, #15]
 8024232:	4a0c      	ldr	r2, [pc, #48]	; (8024264 <_lv_txt_is_break_char+0x5c>)
 8024234:	5cd3      	ldrb	r3, [r2, r3]
 8024236:	461a      	mov	r2, r3
 8024238:	687b      	ldr	r3, [r7, #4]
 802423a:	4293      	cmp	r3, r2
 802423c:	d102      	bne.n	8024244 <_lv_txt_is_break_char+0x3c>
            ret = true; /*If match then it is break char*/
 802423e:	2301      	movs	r3, #1
 8024240:	73bb      	strb	r3, [r7, #14]
            break;
 8024242:	e007      	b.n	8024254 <_lv_txt_is_break_char+0x4c>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8024244:	7bfb      	ldrb	r3, [r7, #15]
 8024246:	3301      	adds	r3, #1
 8024248:	73fb      	strb	r3, [r7, #15]
 802424a:	7bfb      	ldrb	r3, [r7, #15]
 802424c:	4a05      	ldr	r2, [pc, #20]	; (8024264 <_lv_txt_is_break_char+0x5c>)
 802424e:	5cd3      	ldrb	r3, [r2, r3]
 8024250:	2b00      	cmp	r3, #0
 8024252:	d1ed      	bne.n	8024230 <_lv_txt_is_break_char+0x28>
        }
    }

    return ret;
 8024254:	7bbb      	ldrb	r3, [r7, #14]
}
 8024256:	4618      	mov	r0, r3
 8024258:	3714      	adds	r7, #20
 802425a:	46bd      	mov	sp, r7
 802425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024260:	4770      	bx	lr
 8024262:	bf00      	nop
 8024264:	0802679c 	.word	0x0802679c

08024268 <lv_txt_get_size>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_text_flag_t flag)
{
 8024268:	b580      	push	{r7, lr}
 802426a:	b08a      	sub	sp, #40	; 0x28
 802426c:	af02      	add	r7, sp, #8
 802426e:	60f8      	str	r0, [r7, #12]
 8024270:	60b9      	str	r1, [r7, #8]
 8024272:	607a      	str	r2, [r7, #4]
 8024274:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 8024276:	68fb      	ldr	r3, [r7, #12]
 8024278:	2200      	movs	r2, #0
 802427a:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 802427c:	68fb      	ldr	r3, [r7, #12]
 802427e:	2200      	movs	r2, #0
 8024280:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 8024282:	68bb      	ldr	r3, [r7, #8]
 8024284:	2b00      	cmp	r3, #0
 8024286:	f000 80a2 	beq.w	80243ce <lv_txt_get_size+0x166>
    if(font == NULL) return;
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	2b00      	cmp	r3, #0
 802428e:	f000 80a0 	beq.w	80243d2 <lv_txt_get_size+0x16a>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8024292:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8024296:	f003 0302 	and.w	r3, r3, #2
 802429a:	2b00      	cmp	r3, #0
 802429c:	d002      	beq.n	80242a4 <lv_txt_get_size+0x3c>
 802429e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80242a2:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 80242a4:	2300      	movs	r3, #0
 80242a6:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 80242a8:	2300      	movs	r3, #0
 80242aa:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 80242ac:	6878      	ldr	r0, [r7, #4]
 80242ae:	f7ff ff9d 	bl	80241ec <lv_font_get_line_height>
 80242b2:	4603      	mov	r3, r0
 80242b4:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 80242b6:	e051      	b.n	802435c <lv_txt_get_size+0xf4>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 80242b8:	68ba      	ldr	r2, [r7, #8]
 80242ba:	69fb      	ldr	r3, [r7, #28]
 80242bc:	18d0      	adds	r0, r2, r3
 80242be:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80242c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80242c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80242ca:	9301      	str	r3, [sp, #4]
 80242cc:	2300      	movs	r3, #0
 80242ce:	9300      	str	r3, [sp, #0]
 80242d0:	460b      	mov	r3, r1
 80242d2:	6879      	ldr	r1, [r7, #4]
 80242d4:	f000 f964 	bl	80245a0 <_lv_txt_get_next_line>
 80242d8:	4602      	mov	r2, r0
 80242da:	69bb      	ldr	r3, [r7, #24]
 80242dc:	4413      	add	r3, r2
 80242de:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80242e0:	68fb      	ldr	r3, [r7, #12]
 80242e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80242e6:	461a      	mov	r2, r3
 80242e8:	8afb      	ldrh	r3, [r7, #22]
 80242ea:	441a      	add	r2, r3
 80242ec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80242f0:	4413      	add	r3, r2
 80242f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80242f6:	d26e      	bcs.n	80243d6 <lv_txt_get_size+0x16e>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 80242f8:	68fb      	ldr	r3, [r7, #12]
 80242fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80242fe:	b29a      	uxth	r2, r3
 8024300:	8afb      	ldrh	r3, [r7, #22]
 8024302:	4413      	add	r3, r2
 8024304:	b29b      	uxth	r3, r3
 8024306:	b21a      	sxth	r2, r3
 8024308:	68fb      	ldr	r3, [r7, #12]
 802430a:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 802430c:	68fb      	ldr	r3, [r7, #12]
 802430e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024312:	b29a      	uxth	r2, r3
 8024314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8024316:	4413      	add	r3, r2
 8024318:	b29b      	uxth	r3, r3
 802431a:	b21a      	sxth	r2, r3
 802431c:	68fb      	ldr	r3, [r7, #12]
 802431e:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8024320:	68ba      	ldr	r2, [r7, #8]
 8024322:	69fb      	ldr	r3, [r7, #28]
 8024324:	18d0      	adds	r0, r2, r3
 8024326:	69ba      	ldr	r2, [r7, #24]
 8024328:	69fb      	ldr	r3, [r7, #28]
 802432a:	1ad1      	subs	r1, r2, r3
 802432c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8024330:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8024334:	9300      	str	r3, [sp, #0]
 8024336:	4613      	mov	r3, r2
 8024338:	687a      	ldr	r2, [r7, #4]
 802433a:	f000 fa0f 	bl	802475c <lv_txt_get_width>
 802433e:	4603      	mov	r3, r0
 8024340:	82bb      	strh	r3, [r7, #20]
                                                      flag);

        size_res->x = LV_MAX(act_line_length, size_res->x);
 8024342:	68fb      	ldr	r3, [r7, #12]
 8024344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024348:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802434c:	4293      	cmp	r3, r2
 802434e:	bfb8      	it	lt
 8024350:	4613      	movlt	r3, r2
 8024352:	b21a      	sxth	r2, r3
 8024354:	68fb      	ldr	r3, [r7, #12]
 8024356:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 8024358:	69bb      	ldr	r3, [r7, #24]
 802435a:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 802435c:	68ba      	ldr	r2, [r7, #8]
 802435e:	69fb      	ldr	r3, [r7, #28]
 8024360:	4413      	add	r3, r2
 8024362:	781b      	ldrb	r3, [r3, #0]
 8024364:	2b00      	cmp	r3, #0
 8024366:	d1a7      	bne.n	80242b8 <lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8024368:	69fb      	ldr	r3, [r7, #28]
 802436a:	2b00      	cmp	r3, #0
 802436c:	d01a      	beq.n	80243a4 <lv_txt_get_size+0x13c>
 802436e:	69fb      	ldr	r3, [r7, #28]
 8024370:	3b01      	subs	r3, #1
 8024372:	68ba      	ldr	r2, [r7, #8]
 8024374:	4413      	add	r3, r2
 8024376:	781b      	ldrb	r3, [r3, #0]
 8024378:	2b0a      	cmp	r3, #10
 802437a:	d006      	beq.n	802438a <lv_txt_get_size+0x122>
 802437c:	69fb      	ldr	r3, [r7, #28]
 802437e:	3b01      	subs	r3, #1
 8024380:	68ba      	ldr	r2, [r7, #8]
 8024382:	4413      	add	r3, r2
 8024384:	781b      	ldrb	r3, [r3, #0]
 8024386:	2b0d      	cmp	r3, #13
 8024388:	d10c      	bne.n	80243a4 <lv_txt_get_size+0x13c>
        size_res->y += letter_height + line_space;
 802438a:	68fb      	ldr	r3, [r7, #12]
 802438c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024390:	b29a      	uxth	r2, r3
 8024392:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8024394:	8afb      	ldrh	r3, [r7, #22]
 8024396:	440b      	add	r3, r1
 8024398:	b29b      	uxth	r3, r3
 802439a:	4413      	add	r3, r2
 802439c:	b29b      	uxth	r3, r3
 802439e:	b21a      	sxth	r2, r3
 80243a0:	68fb      	ldr	r3, [r7, #12]
 80243a2:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 80243a4:	68fb      	ldr	r3, [r7, #12]
 80243a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	d104      	bne.n	80243b8 <lv_txt_get_size+0x150>
        size_res->y = letter_height;
 80243ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80243b2:	68fb      	ldr	r3, [r7, #12]
 80243b4:	805a      	strh	r2, [r3, #2]
 80243b6:	e00f      	b.n	80243d8 <lv_txt_get_size+0x170>
    else
        size_res->y -= line_space;
 80243b8:	68fb      	ldr	r3, [r7, #12]
 80243ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80243be:	b29a      	uxth	r2, r3
 80243c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80243c2:	1ad3      	subs	r3, r2, r3
 80243c4:	b29b      	uxth	r3, r3
 80243c6:	b21a      	sxth	r2, r3
 80243c8:	68fb      	ldr	r3, [r7, #12]
 80243ca:	805a      	strh	r2, [r3, #2]
 80243cc:	e004      	b.n	80243d8 <lv_txt_get_size+0x170>
    if(text == NULL) return;
 80243ce:	bf00      	nop
 80243d0:	e002      	b.n	80243d8 <lv_txt_get_size+0x170>
    if(font == NULL) return;
 80243d2:	bf00      	nop
 80243d4:	e000      	b.n	80243d8 <lv_txt_get_size+0x170>
            return;
 80243d6:	bf00      	nop
}
 80243d8:	3720      	adds	r7, #32
 80243da:	46bd      	mov	sp, r7
 80243dc:	bd80      	pop	{r7, pc}
	...

080243e0 <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_text_flag_t flag, uint32_t * word_w_ptr, lv_text_cmd_state_t * cmd_state, bool force)
{
 80243e0:	b580      	push	{r7, lr}
 80243e2:	b08e      	sub	sp, #56	; 0x38
 80243e4:	af00      	add	r7, sp, #0
 80243e6:	60f8      	str	r0, [r7, #12]
 80243e8:	60b9      	str	r1, [r7, #8]
 80243ea:	4611      	mov	r1, r2
 80243ec:	461a      	mov	r2, r3
 80243ee:	460b      	mov	r3, r1
 80243f0:	80fb      	strh	r3, [r7, #6]
 80243f2:	4613      	mov	r3, r2
 80243f4:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 80243f6:	68fb      	ldr	r3, [r7, #12]
 80243f8:	2b00      	cmp	r3, #0
 80243fa:	d003      	beq.n	8024404 <lv_txt_get_next_word+0x24>
 80243fc:	68fb      	ldr	r3, [r7, #12]
 80243fe:	781b      	ldrb	r3, [r3, #0]
 8024400:	2b00      	cmp	r3, #0
 8024402:	d101      	bne.n	8024408 <lv_txt_get_next_word+0x28>
 8024404:	2300      	movs	r3, #0
 8024406:	e0c4      	b.n	8024592 <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 8024408:	68bb      	ldr	r3, [r7, #8]
 802440a:	2b00      	cmp	r3, #0
 802440c:	d101      	bne.n	8024412 <lv_txt_get_next_word+0x32>
 802440e:	2300      	movs	r3, #0
 8024410:	e0bf      	b.n	8024592 <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8024412:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8024416:	f003 0302 	and.w	r3, r3, #2
 802441a:	2b00      	cmp	r3, #0
 802441c:	d002      	beq.n	8024424 <lv_txt_get_next_word+0x44>
 802441e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8024422:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8024424:	2300      	movs	r3, #0
 8024426:	637b      	str	r3, [r7, #52]	; 0x34
 8024428:	2300      	movs	r3, #0
 802442a:	617b      	str	r3, [r7, #20]
 802442c:	2300      	movs	r3, #0
 802442e:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /*Letter at i*/
 8024430:	2300      	movs	r3, #0
 8024432:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /*Letter at i_next*/
 8024434:	2300      	movs	r3, #0
 8024436:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8024438:	2300      	movs	r3, #0
 802443a:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 802443c:	2300      	movs	r3, #0
 802443e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8024440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024444:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /*Number of characters up to the long word break point*/
 8024446:	2300      	movs	r3, #0
 8024448:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 802444a:	4b54      	ldr	r3, [pc, #336]	; (802459c <lv_txt_get_next_word+0x1bc>)
 802444c:	681b      	ldr	r3, [r3, #0]
 802444e:	f107 0214 	add.w	r2, r7, #20
 8024452:	4611      	mov	r1, r2
 8024454:	68f8      	ldr	r0, [r7, #12]
 8024456:	4798      	blx	r3
 8024458:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 802445a:	697b      	ldr	r3, [r7, #20]
 802445c:	613b      	str	r3, [r7, #16]

    /*Obtain the full word, regardless if it fits or not in max_width*/
    while(txt[i] != '\0') {
 802445e:	e074      	b.n	802454a <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8024460:	4b4e      	ldr	r3, [pc, #312]	; (802459c <lv_txt_get_next_word+0x1bc>)
 8024462:	681b      	ldr	r3, [r3, #0]
 8024464:	f107 0210 	add.w	r2, r7, #16
 8024468:	4611      	mov	r1, r2
 802446a:	68f8      	ldr	r0, [r7, #12]
 802446c:	4798      	blx	r3
 802446e:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 8024470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024472:	3301      	adds	r3, #1
 8024474:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8024476:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 802447a:	f003 0301 	and.w	r3, r3, #1
 802447e:	2b00      	cmp	r3, #0
 8024480:	d00d      	beq.n	802449e <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8024482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024484:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8024486:	f000 f9cd 	bl	8024824 <_lv_txt_is_cmd>
 802448a:	4603      	mov	r3, r0
 802448c:	2b00      	cmp	r3, #0
 802448e:	d006      	beq.n	802449e <lv_txt_get_next_word+0xbe>
                i = i_next;
 8024490:	697b      	ldr	r3, [r7, #20]
 8024492:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 8024494:	693b      	ldr	r3, [r7, #16]
 8024496:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 8024498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802449a:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter if it is part of a command*/
 802449c:	e055      	b.n	802454a <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 802449e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80244a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80244a2:	68b8      	ldr	r0, [r7, #8]
 80244a4:	f7fa ffa4 	bl	801f3f0 <lv_font_get_glyph_width>
 80244a8:	4603      	mov	r3, r0
 80244aa:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 80244ac:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80244ae:	8b7b      	ldrh	r3, [r7, #26]
 80244b0:	4413      	add	r3, r2
 80244b2:	b29b      	uxth	r3, r3
 80244b4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 80244b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	dd04      	ble.n	80244c8 <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 80244be:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80244c0:	88fb      	ldrh	r3, [r7, #6]
 80244c2:	4413      	add	r3, r2
 80244c4:	b29b      	uxth	r3, r3
 80244c6:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /*Test if this character fits within max_width*/
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 80244c8:	6a3b      	ldr	r3, [r7, #32]
 80244ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80244ce:	d10d      	bne.n	80244ec <lv_txt_get_next_word+0x10c>
 80244d0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80244d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80244d8:	1ad2      	subs	r2, r2, r3
 80244da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80244de:	429a      	cmp	r2, r3
 80244e0:	dd04      	ble.n	80244ec <lv_txt_get_next_word+0x10c>
            break_index = i;
 80244e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80244e4:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 80244e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244e8:	3b01      	subs	r3, #1
 80244ea:	61fb      	str	r3, [r7, #28]
            /*break_index is now pointing at the character that doesn't fit*/
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 80244ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244ee:	2b0a      	cmp	r3, #10
 80244f0:	d008      	beq.n	8024504 <lv_txt_get_next_word+0x124>
 80244f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244f4:	2b0d      	cmp	r3, #13
 80244f6:	d005      	beq.n	8024504 <lv_txt_get_next_word+0x124>
 80244f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80244fa:	f7ff fe85 	bl	8024208 <_lv_txt_is_break_char>
 80244fe:	4603      	mov	r3, r0
 8024500:	2b00      	cmp	r3, #0
 8024502:	d011      	beq.n	8024528 <lv_txt_get_next_word+0x148>
            /*Update the output width on the first character if it fits.
             *Must do this here in case first letter is a break character.*/
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8024504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024506:	2b00      	cmp	r3, #0
 8024508:	d10a      	bne.n	8024520 <lv_txt_get_next_word+0x140>
 802450a:	6a3b      	ldr	r3, [r7, #32]
 802450c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8024510:	d106      	bne.n	8024520 <lv_txt_get_next_word+0x140>
 8024512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024514:	2b00      	cmp	r3, #0
 8024516:	d003      	beq.n	8024520 <lv_txt_get_next_word+0x140>
 8024518:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 802451c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802451e:	601a      	str	r2, [r3, #0]
            word_len--;
 8024520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024522:	3b01      	subs	r3, #1
 8024524:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8024526:	e016      	b.n	8024556 <lv_txt_get_next_word+0x176>
        }

        /*Update the output width*/
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8024528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802452a:	2b00      	cmp	r3, #0
 802452c:	d007      	beq.n	802453e <lv_txt_get_next_word+0x15e>
 802452e:	6a3b      	ldr	r3, [r7, #32]
 8024530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8024534:	d103      	bne.n	802453e <lv_txt_get_next_word+0x15e>
 8024536:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 802453a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802453c:	601a      	str	r2, [r3, #0]

        i = i_next;
 802453e:	697b      	ldr	r3, [r7, #20]
 8024540:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 8024542:	693b      	ldr	r3, [r7, #16]
 8024544:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 8024546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024548:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 802454a:	68fa      	ldr	r2, [r7, #12]
 802454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802454e:	4413      	add	r3, r2
 8024550:	781b      	ldrb	r3, [r3, #0]
 8024552:	2b00      	cmp	r3, #0
 8024554:	d184      	bne.n	8024460 <lv_txt_get_next_word+0x80>
    }

    /*Entire Word fits in the provided space*/
    if(break_index == NO_BREAK_FOUND) {
 8024556:	6a3b      	ldr	r3, [r7, #32]
 8024558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802455c:	d10c      	bne.n	8024578 <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 802455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024560:	2b00      	cmp	r3, #0
 8024562:	d005      	beq.n	8024570 <lv_txt_get_next_word+0x190>
 8024564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024566:	2b0d      	cmp	r3, #13
 8024568:	d104      	bne.n	8024574 <lv_txt_get_next_word+0x194>
 802456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802456c:	2b0a      	cmp	r3, #10
 802456e:	d101      	bne.n	8024574 <lv_txt_get_next_word+0x194>
 8024570:	697b      	ldr	r3, [r7, #20]
 8024572:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 8024574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024576:	e00c      	b.n	8024592 <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 8024578:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802457c:	2b00      	cmp	r3, #0
 802457e:	d001      	beq.n	8024584 <lv_txt_get_next_word+0x1a4>
 8024580:	6a3b      	ldr	r3, [r7, #32]
 8024582:	e006      	b.n	8024592 <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 8024584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024586:	2b00      	cmp	r3, #0
 8024588:	d002      	beq.n	8024590 <lv_txt_get_next_word+0x1b0>
 802458a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802458c:	2200      	movs	r2, #0
 802458e:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 8024590:	2300      	movs	r3, #0
#endif
}
 8024592:	4618      	mov	r0, r3
 8024594:	3738      	adds	r7, #56	; 0x38
 8024596:	46bd      	mov	sp, r7
 8024598:	bd80      	pop	{r7, pc}
 802459a:	bf00      	nop
 802459c:	2000001c 	.word	0x2000001c

080245a0 <_lv_txt_get_next_line>:

uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width,
                               lv_coord_t * used_width, lv_text_flag_t flag)
{
 80245a0:	b580      	push	{r7, lr}
 80245a2:	b090      	sub	sp, #64	; 0x40
 80245a4:	af04      	add	r7, sp, #16
 80245a6:	60f8      	str	r0, [r7, #12]
 80245a8:	60b9      	str	r1, [r7, #8]
 80245aa:	4611      	mov	r1, r2
 80245ac:	461a      	mov	r2, r3
 80245ae:	460b      	mov	r3, r1
 80245b0:	80fb      	strh	r3, [r7, #6]
 80245b2:	4613      	mov	r3, r2
 80245b4:	80bb      	strh	r3, [r7, #4]
    if(used_width) *used_width = 0;
 80245b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	d002      	beq.n	80245c2 <_lv_txt_get_next_line+0x22>
 80245bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80245be:	2200      	movs	r2, #0
 80245c0:	801a      	strh	r2, [r3, #0]

    if(txt == NULL) return 0;
 80245c2:	68fb      	ldr	r3, [r7, #12]
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	d101      	bne.n	80245cc <_lv_txt_get_next_line+0x2c>
 80245c8:	2300      	movs	r3, #0
 80245ca:	e0c1      	b.n	8024750 <_lv_txt_get_next_line+0x1b0>
    if(txt[0] == '\0') return 0;
 80245cc:	68fb      	ldr	r3, [r7, #12]
 80245ce:	781b      	ldrb	r3, [r3, #0]
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	d101      	bne.n	80245d8 <_lv_txt_get_next_line+0x38>
 80245d4:	2300      	movs	r3, #0
 80245d6:	e0bb      	b.n	8024750 <_lv_txt_get_next_line+0x1b0>
    if(font == NULL) return 0;
 80245d8:	68bb      	ldr	r3, [r7, #8]
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d101      	bne.n	80245e2 <_lv_txt_get_next_line+0x42>
 80245de:	2300      	movs	r3, #0
 80245e0:	e0b6      	b.n	8024750 <_lv_txt_get_next_line+0x1b0>

    lv_coord_t line_w = 0;
 80245e2:	2300      	movs	r3, #0
 80245e4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /*If max_width doesn't mater simply find the new line character
     *without thinking about word wrapping*/
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 80245e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80245ea:	f003 0302 	and.w	r3, r3, #2
 80245ee:	2b00      	cmp	r3, #0
 80245f0:	d105      	bne.n	80245fe <_lv_txt_get_next_line+0x5e>
 80245f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80245f6:	f003 0304 	and.w	r3, r3, #4
 80245fa:	2b00      	cmp	r3, #0
 80245fc:	d029      	beq.n	8024652 <_lv_txt_get_next_line+0xb2>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 80245fe:	2300      	movs	r3, #0
 8024600:	62bb      	str	r3, [r7, #40]	; 0x28
 8024602:	e002      	b.n	802460a <_lv_txt_get_next_line+0x6a>
 8024604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024606:	3301      	adds	r3, #1
 8024608:	62bb      	str	r3, [r7, #40]	; 0x28
 802460a:	68fa      	ldr	r2, [r7, #12]
 802460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802460e:	4413      	add	r3, r2
 8024610:	781b      	ldrb	r3, [r3, #0]
 8024612:	2b0a      	cmp	r3, #10
 8024614:	d00b      	beq.n	802462e <_lv_txt_get_next_line+0x8e>
 8024616:	68fa      	ldr	r2, [r7, #12]
 8024618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802461a:	4413      	add	r3, r2
 802461c:	781b      	ldrb	r3, [r3, #0]
 802461e:	2b0d      	cmp	r3, #13
 8024620:	d005      	beq.n	802462e <_lv_txt_get_next_line+0x8e>
 8024622:	68fa      	ldr	r2, [r7, #12]
 8024624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024626:	4413      	add	r3, r2
 8024628:	781b      	ldrb	r3, [r3, #0]
 802462a:	2b00      	cmp	r3, #0
 802462c:	d1ea      	bne.n	8024604 <_lv_txt_get_next_line+0x64>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 802462e:	68fa      	ldr	r2, [r7, #12]
 8024630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024632:	4413      	add	r3, r2
 8024634:	781b      	ldrb	r3, [r3, #0]
 8024636:	2b00      	cmp	r3, #0
 8024638:	d002      	beq.n	8024640 <_lv_txt_get_next_line+0xa0>
 802463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802463c:	3301      	adds	r3, #1
 802463e:	62bb      	str	r3, [r7, #40]	; 0x28
        if(used_width) *used_width = -1;
 8024640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024642:	2b00      	cmp	r3, #0
 8024644:	d003      	beq.n	802464e <_lv_txt_get_next_line+0xae>
 8024646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802464c:	801a      	strh	r2, [r3, #0]
        return i;
 802464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024650:	e07e      	b.n	8024750 <_lv_txt_get_next_line+0x1b0>
    }

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8024652:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8024656:	f003 0302 	and.w	r3, r3, #2
 802465a:	2b00      	cmp	r3, #0
 802465c:	d002      	beq.n	8024664 <_lv_txt_get_next_line+0xc4>
 802465e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8024662:	80bb      	strh	r3, [r7, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8024664:	2300      	movs	r3, #0
 8024666:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 8024668:	2300      	movs	r3, #0
 802466a:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 802466c:	e048      	b.n	8024700 <_lv_txt_get_next_line+0x160>
        uint32_t word_w = 0;
 802466e:	2300      	movs	r3, #0
 8024670:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 8024672:	69bb      	ldr	r3, [r7, #24]
 8024674:	68fa      	ldr	r2, [r7, #12]
 8024676:	18d0      	adds	r0, r2, r3
 8024678:	69bb      	ldr	r3, [r7, #24]
 802467a:	2b00      	cmp	r3, #0
 802467c:	bf0c      	ite	eq
 802467e:	2301      	moveq	r3, #1
 8024680:	2300      	movne	r3, #0
 8024682:	b2db      	uxtb	r3, r3
 8024684:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8024688:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 802468c:	9303      	str	r3, [sp, #12]
 802468e:	f107 031f 	add.w	r3, r7, #31
 8024692:	9302      	str	r3, [sp, #8]
 8024694:	f107 0314 	add.w	r3, r7, #20
 8024698:	9301      	str	r3, [sp, #4]
 802469a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802469e:	9300      	str	r3, [sp, #0]
 80246a0:	460b      	mov	r3, r1
 80246a2:	68b9      	ldr	r1, [r7, #8]
 80246a4:	f7ff fe9c 	bl	80243e0 <lv_txt_get_next_word>
 80246a8:	6278      	str	r0, [r7, #36]	; 0x24
        max_width -= word_w;
 80246aa:	88ba      	ldrh	r2, [r7, #4]
 80246ac:	697b      	ldr	r3, [r7, #20]
 80246ae:	b29b      	uxth	r3, r3
 80246b0:	1ad3      	subs	r3, r2, r3
 80246b2:	b29b      	uxth	r3, r3
 80246b4:	80bb      	strh	r3, [r7, #4]
        line_w += word_w;
 80246b6:	697b      	ldr	r3, [r7, #20]
 80246b8:	b29a      	uxth	r2, r3
 80246ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80246bc:	4413      	add	r3, r2
 80246be:	b29b      	uxth	r3, r3
 80246c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(advance == 0) {
 80246c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246c4:	2b00      	cmp	r3, #0
 80246c6:	d026      	beq.n	8024716 <_lv_txt_get_next_line+0x176>
            break;
        }

        i += advance;
 80246c8:	69ba      	ldr	r2, [r7, #24]
 80246ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246cc:	4413      	add	r3, r2
 80246ce:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 80246d0:	68fb      	ldr	r3, [r7, #12]
 80246d2:	781b      	ldrb	r3, [r3, #0]
 80246d4:	2b0a      	cmp	r3, #10
 80246d6:	d01e      	beq.n	8024716 <_lv_txt_get_next_line+0x176>
 80246d8:	68fb      	ldr	r3, [r7, #12]
 80246da:	781b      	ldrb	r3, [r3, #0]
 80246dc:	2b0d      	cmp	r3, #13
 80246de:	d01a      	beq.n	8024716 <_lv_txt_get_next_line+0x176>

        if(txt[i] == '\n' || txt[i] == '\r') {
 80246e0:	69bb      	ldr	r3, [r7, #24]
 80246e2:	68fa      	ldr	r2, [r7, #12]
 80246e4:	4413      	add	r3, r2
 80246e6:	781b      	ldrb	r3, [r3, #0]
 80246e8:	2b0a      	cmp	r3, #10
 80246ea:	d005      	beq.n	80246f8 <_lv_txt_get_next_line+0x158>
 80246ec:	69bb      	ldr	r3, [r7, #24]
 80246ee:	68fa      	ldr	r2, [r7, #12]
 80246f0:	4413      	add	r3, r2
 80246f2:	781b      	ldrb	r3, [r3, #0]
 80246f4:	2b0d      	cmp	r3, #13
 80246f6:	d103      	bne.n	8024700 <_lv_txt_get_next_line+0x160>
            i++;  /*Include the following newline in the current line*/
 80246f8:	69bb      	ldr	r3, [r7, #24]
 80246fa:	3301      	adds	r3, #1
 80246fc:	61bb      	str	r3, [r7, #24]
            break;
 80246fe:	e00b      	b.n	8024718 <_lv_txt_get_next_line+0x178>
    while(txt[i] != '\0' && max_width > 0) {
 8024700:	69bb      	ldr	r3, [r7, #24]
 8024702:	68fa      	ldr	r2, [r7, #12]
 8024704:	4413      	add	r3, r2
 8024706:	781b      	ldrb	r3, [r3, #0]
 8024708:	2b00      	cmp	r3, #0
 802470a:	d005      	beq.n	8024718 <_lv_txt_get_next_line+0x178>
 802470c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8024710:	2b00      	cmp	r3, #0
 8024712:	dcac      	bgt.n	802466e <_lv_txt_get_next_line+0xce>
 8024714:	e000      	b.n	8024718 <_lv_txt_get_next_line+0x178>
            break;
 8024716:	bf00      	nop
        }

    }

    /*Always step at least one to avoid infinite loops*/
    if(i == 0) {
 8024718:	69bb      	ldr	r3, [r7, #24]
 802471a:	2b00      	cmp	r3, #0
 802471c:	d111      	bne.n	8024742 <_lv_txt_get_next_line+0x1a2>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 802471e:	4b0e      	ldr	r3, [pc, #56]	; (8024758 <_lv_txt_get_next_line+0x1b8>)
 8024720:	681b      	ldr	r3, [r3, #0]
 8024722:	f107 0218 	add.w	r2, r7, #24
 8024726:	4611      	mov	r1, r2
 8024728:	68f8      	ldr	r0, [r7, #12]
 802472a:	4798      	blx	r3
 802472c:	6238      	str	r0, [r7, #32]
        if(used_width != NULL) {
 802472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024730:	2b00      	cmp	r3, #0
 8024732:	d006      	beq.n	8024742 <_lv_txt_get_next_line+0x1a2>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 8024734:	2200      	movs	r2, #0
 8024736:	6a39      	ldr	r1, [r7, #32]
 8024738:	68b8      	ldr	r0, [r7, #8]
 802473a:	f7fa fe59 	bl	801f3f0 <lv_font_get_glyph_width>
 802473e:	4603      	mov	r3, r0
 8024740:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(used_width != NULL) {
 8024742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024744:	2b00      	cmp	r3, #0
 8024746:	d002      	beq.n	802474e <_lv_txt_get_next_line+0x1ae>
        *used_width = line_w;
 8024748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802474a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802474c:	801a      	strh	r2, [r3, #0]
    }

    return i;
 802474e:	69bb      	ldr	r3, [r7, #24]
}
 8024750:	4618      	mov	r0, r3
 8024752:	3730      	adds	r7, #48	; 0x30
 8024754:	46bd      	mov	sp, r7
 8024756:	bd80      	pop	{r7, pc}
 8024758:	2000001c 	.word	0x2000001c

0802475c <lv_txt_get_width>:

lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_text_flag_t flag)
{
 802475c:	b580      	push	{r7, lr}
 802475e:	b08a      	sub	sp, #40	; 0x28
 8024760:	af00      	add	r7, sp, #0
 8024762:	60f8      	str	r0, [r7, #12]
 8024764:	60b9      	str	r1, [r7, #8]
 8024766:	607a      	str	r2, [r7, #4]
 8024768:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 802476a:	68fb      	ldr	r3, [r7, #12]
 802476c:	2b00      	cmp	r3, #0
 802476e:	d101      	bne.n	8024774 <lv_txt_get_width+0x18>
 8024770:	2300      	movs	r3, #0
 8024772:	e053      	b.n	802481c <lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 8024774:	687b      	ldr	r3, [r7, #4]
 8024776:	2b00      	cmp	r3, #0
 8024778:	d101      	bne.n	802477e <lv_txt_get_width+0x22>
 802477a:	2300      	movs	r3, #0
 802477c:	e04e      	b.n	802481c <lv_txt_get_width+0xc0>
    if(txt[0] == '\0') return 0;
 802477e:	68fb      	ldr	r3, [r7, #12]
 8024780:	781b      	ldrb	r3, [r3, #0]
 8024782:	2b00      	cmp	r3, #0
 8024784:	d101      	bne.n	802478a <lv_txt_get_width+0x2e>
 8024786:	2300      	movs	r3, #0
 8024788:	e048      	b.n	802481c <lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 802478a:	2300      	movs	r3, #0
 802478c:	623b      	str	r3, [r7, #32]
    lv_coord_t width             = 0;
 802478e:	2300      	movs	r3, #0
 8024790:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8024792:	2300      	movs	r3, #0
 8024794:	77fb      	strb	r3, [r7, #31]

    if(length != 0) {
 8024796:	68bb      	ldr	r3, [r7, #8]
 8024798:	2b00      	cmp	r3, #0
 802479a:	d03d      	beq.n	8024818 <lv_txt_get_width+0xbc>
        while(i < length) {
 802479c:	e02f      	b.n	80247fe <lv_txt_get_width+0xa2>
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 802479e:	f107 0320 	add.w	r3, r7, #32
 80247a2:	f107 0214 	add.w	r2, r7, #20
 80247a6:	f107 0118 	add.w	r1, r7, #24
 80247aa:	68f8      	ldr	r0, [r7, #12]
 80247ac:	f000 f874 	bl	8024898 <_lv_txt_encoded_letter_next_2>

            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80247b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80247b4:	f003 0301 	and.w	r3, r3, #1
 80247b8:	2b00      	cmp	r3, #0
 80247ba:	d00a      	beq.n	80247d2 <lv_txt_get_width+0x76>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 80247bc:	69ba      	ldr	r2, [r7, #24]
 80247be:	f107 031f 	add.w	r3, r7, #31
 80247c2:	4611      	mov	r1, r2
 80247c4:	4618      	mov	r0, r3
 80247c6:	f000 f82d 	bl	8024824 <_lv_txt_is_cmd>
 80247ca:	4603      	mov	r3, r0
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	d000      	beq.n	80247d2 <lv_txt_get_width+0x76>
 80247d0:	e015      	b.n	80247fe <lv_txt_get_width+0xa2>
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 80247d2:	69bb      	ldr	r3, [r7, #24]
 80247d4:	697a      	ldr	r2, [r7, #20]
 80247d6:	4619      	mov	r1, r3
 80247d8:	6878      	ldr	r0, [r7, #4]
 80247da:	f7fa fe09 	bl	801f3f0 <lv_font_get_glyph_width>
 80247de:	4603      	mov	r3, r0
 80247e0:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(char_width > 0) {
 80247e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80247e6:	2b00      	cmp	r3, #0
 80247e8:	dd09      	ble.n	80247fe <lv_txt_get_width+0xa2>
                width += char_width;
 80247ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80247ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80247ee:	4413      	add	r3, r2
 80247f0:	b29b      	uxth	r3, r3
 80247f2:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 80247f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80247f6:	887b      	ldrh	r3, [r7, #2]
 80247f8:	4413      	add	r3, r2
 80247fa:	b29b      	uxth	r3, r3
 80247fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 80247fe:	6a3b      	ldr	r3, [r7, #32]
 8024800:	68ba      	ldr	r2, [r7, #8]
 8024802:	429a      	cmp	r2, r3
 8024804:	d8cb      	bhi.n	802479e <lv_txt_get_width+0x42>
            }
        }

        if(width > 0) {
 8024806:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802480a:	2b00      	cmp	r3, #0
 802480c:	dd04      	ble.n	8024818 <lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 802480e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024810:	887b      	ldrh	r3, [r7, #2]
 8024812:	1ad3      	subs	r3, r2, r3
 8024814:	b29b      	uxth	r3, r3
 8024816:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned*/
        }
    }

    return width;
 8024818:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 802481c:	4618      	mov	r0, r3
 802481e:	3728      	adds	r7, #40	; 0x28
 8024820:	46bd      	mov	sp, r7
 8024822:	bd80      	pop	{r7, pc}

08024824 <_lv_txt_is_cmd>:

bool _lv_txt_is_cmd(lv_text_cmd_state_t * state, uint32_t c)
{
 8024824:	b480      	push	{r7}
 8024826:	b085      	sub	sp, #20
 8024828:	af00      	add	r7, sp, #0
 802482a:	6078      	str	r0, [r7, #4]
 802482c:	6039      	str	r1, [r7, #0]
    bool ret = false;
 802482e:	2300      	movs	r3, #0
 8024830:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8024832:	2323      	movs	r3, #35	; 0x23
 8024834:	461a      	mov	r2, r3
 8024836:	683b      	ldr	r3, [r7, #0]
 8024838:	4293      	cmp	r3, r2
 802483a:	d11a      	bne.n	8024872 <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	781b      	ldrb	r3, [r3, #0]
 8024840:	2b00      	cmp	r3, #0
 8024842:	d105      	bne.n	8024850 <_lv_txt_is_cmd+0x2c>
            *state = LV_TEXT_CMD_STATE_PAR;
 8024844:	687b      	ldr	r3, [r7, #4]
 8024846:	2201      	movs	r2, #1
 8024848:	701a      	strb	r2, [r3, #0]
            ret    = true;
 802484a:	2301      	movs	r3, #1
 802484c:	73fb      	strb	r3, [r7, #15]
 802484e:	e010      	b.n	8024872 <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char*/
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8024850:	687b      	ldr	r3, [r7, #4]
 8024852:	781b      	ldrb	r3, [r3, #0]
 8024854:	2b01      	cmp	r3, #1
 8024856:	d103      	bne.n	8024860 <_lv_txt_is_cmd+0x3c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	2200      	movs	r2, #0
 802485c:	701a      	strb	r2, [r3, #0]
 802485e:	e008      	b.n	8024872 <_lv_txt_is_cmd+0x4e>
        }
        /*Command end*/
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8024860:	687b      	ldr	r3, [r7, #4]
 8024862:	781b      	ldrb	r3, [r3, #0]
 8024864:	2b02      	cmp	r3, #2
 8024866:	d104      	bne.n	8024872 <_lv_txt_is_cmd+0x4e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	2200      	movs	r2, #0
 802486c:	701a      	strb	r2, [r3, #0]
            ret    = true;
 802486e:	2301      	movs	r3, #1
 8024870:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8024872:	687b      	ldr	r3, [r7, #4]
 8024874:	781b      	ldrb	r3, [r3, #0]
 8024876:	2b01      	cmp	r3, #1
 8024878:	d107      	bne.n	802488a <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 802487a:	683b      	ldr	r3, [r7, #0]
 802487c:	2b20      	cmp	r3, #32
 802487e:	d102      	bne.n	8024886 <_lv_txt_is_cmd+0x62>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8024880:	687b      	ldr	r3, [r7, #4]
 8024882:	2202      	movs	r2, #2
 8024884:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 8024886:	2301      	movs	r3, #1
 8024888:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 802488a:	7bfb      	ldrb	r3, [r7, #15]
}
 802488c:	4618      	mov	r0, r3
 802488e:	3714      	adds	r7, #20
 8024890:	46bd      	mov	sp, r7
 8024892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024896:	4770      	bx	lr

08024898 <_lv_txt_encoded_letter_next_2>:

    return text;
}

void _lv_txt_encoded_letter_next_2(const char * txt, uint32_t * letter, uint32_t * letter_next, uint32_t * ofs)
{
 8024898:	b580      	push	{r7, lr}
 802489a:	b084      	sub	sp, #16
 802489c:	af00      	add	r7, sp, #0
 802489e:	60f8      	str	r0, [r7, #12]
 80248a0:	60b9      	str	r1, [r7, #8]
 80248a2:	607a      	str	r2, [r7, #4]
 80248a4:	603b      	str	r3, [r7, #0]
    *letter = _lv_txt_encoded_next(txt, ofs);
 80248a6:	4b0f      	ldr	r3, [pc, #60]	; (80248e4 <_lv_txt_encoded_letter_next_2+0x4c>)
 80248a8:	681b      	ldr	r3, [r3, #0]
 80248aa:	6839      	ldr	r1, [r7, #0]
 80248ac:	68f8      	ldr	r0, [r7, #12]
 80248ae:	4798      	blx	r3
 80248b0:	4602      	mov	r2, r0
 80248b2:	68bb      	ldr	r3, [r7, #8]
 80248b4:	601a      	str	r2, [r3, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 80248b6:	68bb      	ldr	r3, [r7, #8]
 80248b8:	681b      	ldr	r3, [r3, #0]
 80248ba:	2b00      	cmp	r3, #0
 80248bc:	d00a      	beq.n	80248d4 <_lv_txt_encoded_letter_next_2+0x3c>
 80248be:	4b09      	ldr	r3, [pc, #36]	; (80248e4 <_lv_txt_encoded_letter_next_2+0x4c>)
 80248c0:	681b      	ldr	r3, [r3, #0]
 80248c2:	683a      	ldr	r2, [r7, #0]
 80248c4:	6812      	ldr	r2, [r2, #0]
 80248c6:	68f9      	ldr	r1, [r7, #12]
 80248c8:	440a      	add	r2, r1
 80248ca:	2100      	movs	r1, #0
 80248cc:	4610      	mov	r0, r2
 80248ce:	4798      	blx	r3
 80248d0:	4603      	mov	r3, r0
 80248d2:	e000      	b.n	80248d6 <_lv_txt_encoded_letter_next_2+0x3e>
 80248d4:	2300      	movs	r3, #0
 80248d6:	687a      	ldr	r2, [r7, #4]
 80248d8:	6013      	str	r3, [r2, #0]
}
 80248da:	bf00      	nop
 80248dc:	3710      	adds	r7, #16
 80248de:	46bd      	mov	sp, r7
 80248e0:	bd80      	pop	{r7, pc}
 80248e2:	bf00      	nop
 80248e4:	2000001c 	.word	0x2000001c

080248e8 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 80248e8:	b480      	push	{r7}
 80248ea:	b083      	sub	sp, #12
 80248ec:	af00      	add	r7, sp, #0
 80248ee:	6078      	str	r0, [r7, #4]
    if(LV_IS_ASCII(str[0]))
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	781b      	ldrb	r3, [r3, #0]
 80248f4:	b25b      	sxtb	r3, r3
 80248f6:	2b00      	cmp	r3, #0
 80248f8:	db01      	blt.n	80248fe <lv_txt_utf8_size+0x16>
        return 1;
 80248fa:	2301      	movs	r3, #1
 80248fc:	e018      	b.n	8024930 <lv_txt_utf8_size+0x48>
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	781b      	ldrb	r3, [r3, #0]
 8024902:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8024906:	2bc0      	cmp	r3, #192	; 0xc0
 8024908:	d101      	bne.n	802490e <lv_txt_utf8_size+0x26>
        return 2;
 802490a:	2302      	movs	r3, #2
 802490c:	e010      	b.n	8024930 <lv_txt_utf8_size+0x48>
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 802490e:	687b      	ldr	r3, [r7, #4]
 8024910:	781b      	ldrb	r3, [r3, #0]
 8024912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024916:	2be0      	cmp	r3, #224	; 0xe0
 8024918:	d101      	bne.n	802491e <lv_txt_utf8_size+0x36>
        return 3;
 802491a:	2303      	movs	r3, #3
 802491c:	e008      	b.n	8024930 <lv_txt_utf8_size+0x48>
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 802491e:	687b      	ldr	r3, [r7, #4]
 8024920:	781b      	ldrb	r3, [r3, #0]
 8024922:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024926:	2bf0      	cmp	r3, #240	; 0xf0
 8024928:	d101      	bne.n	802492e <lv_txt_utf8_size+0x46>
        return 4;
 802492a:	2304      	movs	r3, #4
 802492c:	e000      	b.n	8024930 <lv_txt_utf8_size+0x48>
    return 0;
 802492e:	2300      	movs	r3, #0
}
 8024930:	4618      	mov	r0, r3
 8024932:	370c      	adds	r7, #12
 8024934:	46bd      	mov	sp, r7
 8024936:	f85d 7b04 	ldr.w	r7, [sp], #4
 802493a:	4770      	bx	lr

0802493c <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 802493c:	b480      	push	{r7}
 802493e:	b085      	sub	sp, #20
 8024940:	af00      	add	r7, sp, #0
 8024942:	6078      	str	r0, [r7, #4]
 8024944:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     */

    uint32_t result = 0;
 8024946:	2300      	movs	r3, #0
 8024948:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 802494a:	2300      	movs	r3, #0
 802494c:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 802494e:	683b      	ldr	r3, [r7, #0]
 8024950:	2b00      	cmp	r3, #0
 8024952:	d102      	bne.n	802495a <lv_txt_utf8_next+0x1e>
 8024954:	f107 0308 	add.w	r3, r7, #8
 8024958:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 802495a:	683b      	ldr	r3, [r7, #0]
 802495c:	681b      	ldr	r3, [r3, #0]
 802495e:	687a      	ldr	r2, [r7, #4]
 8024960:	4413      	add	r3, r2
 8024962:	781b      	ldrb	r3, [r3, #0]
 8024964:	b25b      	sxtb	r3, r3
 8024966:	2b00      	cmp	r3, #0
 8024968:	db0b      	blt.n	8024982 <lv_txt_utf8_next+0x46>
        result = txt[*i];
 802496a:	683b      	ldr	r3, [r7, #0]
 802496c:	681b      	ldr	r3, [r3, #0]
 802496e:	687a      	ldr	r2, [r7, #4]
 8024970:	4413      	add	r3, r2
 8024972:	781b      	ldrb	r3, [r3, #0]
 8024974:	60fb      	str	r3, [r7, #12]
        (*i)++;
 8024976:	683b      	ldr	r3, [r7, #0]
 8024978:	681b      	ldr	r3, [r3, #0]
 802497a:	1c5a      	adds	r2, r3, #1
 802497c:	683b      	ldr	r3, [r7, #0]
 802497e:	601a      	str	r2, [r3, #0]
 8024980:	e0ea      	b.n	8024b58 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 8024982:	683b      	ldr	r3, [r7, #0]
 8024984:	681b      	ldr	r3, [r3, #0]
 8024986:	687a      	ldr	r2, [r7, #4]
 8024988:	4413      	add	r3, r2
 802498a:	781b      	ldrb	r3, [r3, #0]
 802498c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8024990:	2bc0      	cmp	r3, #192	; 0xc0
 8024992:	d128      	bne.n	80249e6 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8024994:	683b      	ldr	r3, [r7, #0]
 8024996:	681b      	ldr	r3, [r3, #0]
 8024998:	687a      	ldr	r2, [r7, #4]
 802499a:	4413      	add	r3, r2
 802499c:	781b      	ldrb	r3, [r3, #0]
 802499e:	019b      	lsls	r3, r3, #6
 80249a0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80249a4:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80249a6:	683b      	ldr	r3, [r7, #0]
 80249a8:	681b      	ldr	r3, [r3, #0]
 80249aa:	1c5a      	adds	r2, r3, #1
 80249ac:	683b      	ldr	r3, [r7, #0]
 80249ae:	601a      	str	r2, [r3, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80249b0:	683b      	ldr	r3, [r7, #0]
 80249b2:	681b      	ldr	r3, [r3, #0]
 80249b4:	687a      	ldr	r2, [r7, #4]
 80249b6:	4413      	add	r3, r2
 80249b8:	781b      	ldrb	r3, [r3, #0]
 80249ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80249be:	2b80      	cmp	r3, #128	; 0x80
 80249c0:	d001      	beq.n	80249c6 <lv_txt_utf8_next+0x8a>
 80249c2:	2300      	movs	r3, #0
 80249c4:	e0c9      	b.n	8024b5a <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 80249c6:	683b      	ldr	r3, [r7, #0]
 80249c8:	681b      	ldr	r3, [r3, #0]
 80249ca:	687a      	ldr	r2, [r7, #4]
 80249cc:	4413      	add	r3, r2
 80249ce:	781b      	ldrb	r3, [r3, #0]
 80249d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80249d4:	68fa      	ldr	r2, [r7, #12]
 80249d6:	4413      	add	r3, r2
 80249d8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80249da:	683b      	ldr	r3, [r7, #0]
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	1c5a      	adds	r2, r3, #1
 80249e0:	683b      	ldr	r3, [r7, #0]
 80249e2:	601a      	str	r2, [r3, #0]
 80249e4:	e0b8      	b.n	8024b58 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 80249e6:	683b      	ldr	r3, [r7, #0]
 80249e8:	681b      	ldr	r3, [r3, #0]
 80249ea:	687a      	ldr	r2, [r7, #4]
 80249ec:	4413      	add	r3, r2
 80249ee:	781b      	ldrb	r3, [r3, #0]
 80249f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80249f4:	2be0      	cmp	r3, #224	; 0xe0
 80249f6:	d142      	bne.n	8024a7e <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80249f8:	683b      	ldr	r3, [r7, #0]
 80249fa:	681b      	ldr	r3, [r3, #0]
 80249fc:	687a      	ldr	r2, [r7, #4]
 80249fe:	4413      	add	r3, r2
 8024a00:	781b      	ldrb	r3, [r3, #0]
 8024a02:	031b      	lsls	r3, r3, #12
 8024a04:	b29b      	uxth	r3, r3
 8024a06:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024a08:	683b      	ldr	r3, [r7, #0]
 8024a0a:	681b      	ldr	r3, [r3, #0]
 8024a0c:	1c5a      	adds	r2, r3, #1
 8024a0e:	683b      	ldr	r3, [r7, #0]
 8024a10:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024a12:	683b      	ldr	r3, [r7, #0]
 8024a14:	681b      	ldr	r3, [r3, #0]
 8024a16:	687a      	ldr	r2, [r7, #4]
 8024a18:	4413      	add	r3, r2
 8024a1a:	781b      	ldrb	r3, [r3, #0]
 8024a1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024a20:	2b80      	cmp	r3, #128	; 0x80
 8024a22:	d001      	beq.n	8024a28 <lv_txt_utf8_next+0xec>
 8024a24:	2300      	movs	r3, #0
 8024a26:	e098      	b.n	8024b5a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8024a28:	683b      	ldr	r3, [r7, #0]
 8024a2a:	681b      	ldr	r3, [r3, #0]
 8024a2c:	687a      	ldr	r2, [r7, #4]
 8024a2e:	4413      	add	r3, r2
 8024a30:	781b      	ldrb	r3, [r3, #0]
 8024a32:	019b      	lsls	r3, r3, #6
 8024a34:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8024a38:	68fa      	ldr	r2, [r7, #12]
 8024a3a:	4413      	add	r3, r2
 8024a3c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024a3e:	683b      	ldr	r3, [r7, #0]
 8024a40:	681b      	ldr	r3, [r3, #0]
 8024a42:	1c5a      	adds	r2, r3, #1
 8024a44:	683b      	ldr	r3, [r7, #0]
 8024a46:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024a48:	683b      	ldr	r3, [r7, #0]
 8024a4a:	681b      	ldr	r3, [r3, #0]
 8024a4c:	687a      	ldr	r2, [r7, #4]
 8024a4e:	4413      	add	r3, r2
 8024a50:	781b      	ldrb	r3, [r3, #0]
 8024a52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024a56:	2b80      	cmp	r3, #128	; 0x80
 8024a58:	d001      	beq.n	8024a5e <lv_txt_utf8_next+0x122>
 8024a5a:	2300      	movs	r3, #0
 8024a5c:	e07d      	b.n	8024b5a <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8024a5e:	683b      	ldr	r3, [r7, #0]
 8024a60:	681b      	ldr	r3, [r3, #0]
 8024a62:	687a      	ldr	r2, [r7, #4]
 8024a64:	4413      	add	r3, r2
 8024a66:	781b      	ldrb	r3, [r3, #0]
 8024a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024a6c:	68fa      	ldr	r2, [r7, #12]
 8024a6e:	4413      	add	r3, r2
 8024a70:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024a72:	683b      	ldr	r3, [r7, #0]
 8024a74:	681b      	ldr	r3, [r3, #0]
 8024a76:	1c5a      	adds	r2, r3, #1
 8024a78:	683b      	ldr	r3, [r7, #0]
 8024a7a:	601a      	str	r2, [r3, #0]
 8024a7c:	e06c      	b.n	8024b58 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 8024a7e:	683b      	ldr	r3, [r7, #0]
 8024a80:	681b      	ldr	r3, [r3, #0]
 8024a82:	687a      	ldr	r2, [r7, #4]
 8024a84:	4413      	add	r3, r2
 8024a86:	781b      	ldrb	r3, [r3, #0]
 8024a88:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024a8c:	2bf0      	cmp	r3, #240	; 0xf0
 8024a8e:	d15e      	bne.n	8024b4e <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8024a90:	683b      	ldr	r3, [r7, #0]
 8024a92:	681b      	ldr	r3, [r3, #0]
 8024a94:	687a      	ldr	r2, [r7, #4]
 8024a96:	4413      	add	r3, r2
 8024a98:	781b      	ldrb	r3, [r3, #0]
 8024a9a:	049b      	lsls	r3, r3, #18
 8024a9c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8024aa0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024aa2:	683b      	ldr	r3, [r7, #0]
 8024aa4:	681b      	ldr	r3, [r3, #0]
 8024aa6:	1c5a      	adds	r2, r3, #1
 8024aa8:	683b      	ldr	r3, [r7, #0]
 8024aaa:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024aac:	683b      	ldr	r3, [r7, #0]
 8024aae:	681b      	ldr	r3, [r3, #0]
 8024ab0:	687a      	ldr	r2, [r7, #4]
 8024ab2:	4413      	add	r3, r2
 8024ab4:	781b      	ldrb	r3, [r3, #0]
 8024ab6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024aba:	2b80      	cmp	r3, #128	; 0x80
 8024abc:	d001      	beq.n	8024ac2 <lv_txt_utf8_next+0x186>
 8024abe:	2300      	movs	r3, #0
 8024ac0:	e04b      	b.n	8024b5a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8024ac2:	683b      	ldr	r3, [r7, #0]
 8024ac4:	681b      	ldr	r3, [r3, #0]
 8024ac6:	687a      	ldr	r2, [r7, #4]
 8024ac8:	4413      	add	r3, r2
 8024aca:	781b      	ldrb	r3, [r3, #0]
 8024acc:	031b      	lsls	r3, r3, #12
 8024ace:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 8024ad2:	68fa      	ldr	r2, [r7, #12]
 8024ad4:	4413      	add	r3, r2
 8024ad6:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024ad8:	683b      	ldr	r3, [r7, #0]
 8024ada:	681b      	ldr	r3, [r3, #0]
 8024adc:	1c5a      	adds	r2, r3, #1
 8024ade:	683b      	ldr	r3, [r7, #0]
 8024ae0:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024ae2:	683b      	ldr	r3, [r7, #0]
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	687a      	ldr	r2, [r7, #4]
 8024ae8:	4413      	add	r3, r2
 8024aea:	781b      	ldrb	r3, [r3, #0]
 8024aec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024af0:	2b80      	cmp	r3, #128	; 0x80
 8024af2:	d001      	beq.n	8024af8 <lv_txt_utf8_next+0x1bc>
 8024af4:	2300      	movs	r3, #0
 8024af6:	e030      	b.n	8024b5a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8024af8:	683b      	ldr	r3, [r7, #0]
 8024afa:	681b      	ldr	r3, [r3, #0]
 8024afc:	687a      	ldr	r2, [r7, #4]
 8024afe:	4413      	add	r3, r2
 8024b00:	781b      	ldrb	r3, [r3, #0]
 8024b02:	019b      	lsls	r3, r3, #6
 8024b04:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8024b08:	68fa      	ldr	r2, [r7, #12]
 8024b0a:	4413      	add	r3, r2
 8024b0c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024b0e:	683b      	ldr	r3, [r7, #0]
 8024b10:	681b      	ldr	r3, [r3, #0]
 8024b12:	1c5a      	adds	r2, r3, #1
 8024b14:	683b      	ldr	r3, [r7, #0]
 8024b16:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024b18:	683b      	ldr	r3, [r7, #0]
 8024b1a:	681b      	ldr	r3, [r3, #0]
 8024b1c:	687a      	ldr	r2, [r7, #4]
 8024b1e:	4413      	add	r3, r2
 8024b20:	781b      	ldrb	r3, [r3, #0]
 8024b22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024b26:	2b80      	cmp	r3, #128	; 0x80
 8024b28:	d001      	beq.n	8024b2e <lv_txt_utf8_next+0x1f2>
 8024b2a:	2300      	movs	r3, #0
 8024b2c:	e015      	b.n	8024b5a <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 8024b2e:	683b      	ldr	r3, [r7, #0]
 8024b30:	681b      	ldr	r3, [r3, #0]
 8024b32:	687a      	ldr	r2, [r7, #4]
 8024b34:	4413      	add	r3, r2
 8024b36:	781b      	ldrb	r3, [r3, #0]
 8024b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024b3c:	68fa      	ldr	r2, [r7, #12]
 8024b3e:	4413      	add	r3, r2
 8024b40:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024b42:	683b      	ldr	r3, [r7, #0]
 8024b44:	681b      	ldr	r3, [r3, #0]
 8024b46:	1c5a      	adds	r2, r3, #1
 8024b48:	683b      	ldr	r3, [r7, #0]
 8024b4a:	601a      	str	r2, [r3, #0]
 8024b4c:	e004      	b.n	8024b58 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8024b4e:	683b      	ldr	r3, [r7, #0]
 8024b50:	681b      	ldr	r3, [r3, #0]
 8024b52:	1c5a      	adds	r2, r3, #1
 8024b54:	683b      	ldr	r3, [r7, #0]
 8024b56:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 8024b58:	68fb      	ldr	r3, [r7, #12]
}
 8024b5a:	4618      	mov	r0, r3
 8024b5c:	3714      	adds	r7, #20
 8024b5e:	46bd      	mov	sp, r7
 8024b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b64:	4770      	bx	lr
	...

08024b68 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8024b68:	b580      	push	{r7, lr}
 8024b6a:	b086      	sub	sp, #24
 8024b6c:	af00      	add	r7, sp, #0
 8024b6e:	6078      	str	r0, [r7, #4]
 8024b70:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 8024b72:	2300      	movs	r3, #0
 8024b74:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8024b76:	683b      	ldr	r3, [r7, #0]
 8024b78:	681b      	ldr	r3, [r3, #0]
 8024b7a:	1e5a      	subs	r2, r3, #1
 8024b7c:	683b      	ldr	r3, [r7, #0]
 8024b7e:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8024b80:	7dfb      	ldrb	r3, [r7, #23]
 8024b82:	2b03      	cmp	r3, #3
 8024b84:	d901      	bls.n	8024b8a <lv_txt_utf8_prev+0x22>
 8024b86:	2300      	movs	r3, #0
 8024b88:	e02a      	b.n	8024be0 <lv_txt_utf8_prev+0x78>

        c_size = _lv_txt_encoded_size(&txt[*i]);
 8024b8a:	4b17      	ldr	r3, [pc, #92]	; (8024be8 <lv_txt_utf8_prev+0x80>)
 8024b8c:	681b      	ldr	r3, [r3, #0]
 8024b8e:	683a      	ldr	r2, [r7, #0]
 8024b90:	6812      	ldr	r2, [r2, #0]
 8024b92:	6879      	ldr	r1, [r7, #4]
 8024b94:	440a      	add	r2, r1
 8024b96:	4610      	mov	r0, r2
 8024b98:	4798      	blx	r3
 8024b9a:	4603      	mov	r3, r0
 8024b9c:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 8024b9e:	7dbb      	ldrb	r3, [r7, #22]
 8024ba0:	2b00      	cmp	r3, #0
 8024ba2:	d10b      	bne.n	8024bbc <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 8024ba4:	683b      	ldr	r3, [r7, #0]
 8024ba6:	681b      	ldr	r3, [r3, #0]
 8024ba8:	2b00      	cmp	r3, #0
 8024baa:	d005      	beq.n	8024bb8 <lv_txt_utf8_prev+0x50>
                (*i)--;
 8024bac:	683b      	ldr	r3, [r7, #0]
 8024bae:	681b      	ldr	r3, [r3, #0]
 8024bb0:	1e5a      	subs	r2, r3, #1
 8024bb2:	683b      	ldr	r3, [r7, #0]
 8024bb4:	601a      	str	r2, [r3, #0]
 8024bb6:	e001      	b.n	8024bbc <lv_txt_utf8_prev+0x54>
            else
                return 0;
 8024bb8:	2300      	movs	r3, #0
 8024bba:	e011      	b.n	8024be0 <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 8024bbc:	7dfb      	ldrb	r3, [r7, #23]
 8024bbe:	3301      	adds	r3, #1
 8024bc0:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 8024bc2:	7dbb      	ldrb	r3, [r7, #22]
 8024bc4:	2b00      	cmp	r3, #0
 8024bc6:	d0db      	beq.n	8024b80 <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 8024bc8:	683b      	ldr	r3, [r7, #0]
 8024bca:	681b      	ldr	r3, [r3, #0]
 8024bcc:	60fb      	str	r3, [r7, #12]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8024bce:	4b07      	ldr	r3, [pc, #28]	; (8024bec <lv_txt_utf8_prev+0x84>)
 8024bd0:	681b      	ldr	r3, [r3, #0]
 8024bd2:	f107 020c 	add.w	r2, r7, #12
 8024bd6:	4611      	mov	r1, r2
 8024bd8:	6878      	ldr	r0, [r7, #4]
 8024bda:	4798      	blx	r3
 8024bdc:	6138      	str	r0, [r7, #16]

    return letter;
 8024bde:	693b      	ldr	r3, [r7, #16]
}
 8024be0:	4618      	mov	r0, r3
 8024be2:	3718      	adds	r7, #24
 8024be4:	46bd      	mov	sp, r7
 8024be6:	bd80      	pop	{r7, pc}
 8024be8:	20000018 	.word	0x20000018
 8024bec:	2000001c 	.word	0x2000001c

08024bf0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8024bf0:	b580      	push	{r7, lr}
 8024bf2:	b086      	sub	sp, #24
 8024bf4:	af00      	add	r7, sp, #0
 8024bf6:	6078      	str	r0, [r7, #4]
 8024bf8:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 8024bfa:	2300      	movs	r3, #0
 8024bfc:	613b      	str	r3, [r7, #16]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024bfe:	2300      	movs	r3, #0
 8024c00:	617b      	str	r3, [r7, #20]
 8024c02:	e014      	b.n	8024c2e <lv_txt_utf8_get_byte_id+0x3e>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8024c04:	4b11      	ldr	r3, [pc, #68]	; (8024c4c <lv_txt_utf8_get_byte_id+0x5c>)
 8024c06:	681b      	ldr	r3, [r3, #0]
 8024c08:	6879      	ldr	r1, [r7, #4]
 8024c0a:	693a      	ldr	r2, [r7, #16]
 8024c0c:	440a      	add	r2, r1
 8024c0e:	4610      	mov	r0, r2
 8024c10:	4798      	blx	r3
 8024c12:	4603      	mov	r3, r0
 8024c14:	73fb      	strb	r3, [r7, #15]
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 8024c16:	7bfb      	ldrb	r3, [r7, #15]
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	d001      	beq.n	8024c20 <lv_txt_utf8_get_byte_id+0x30>
 8024c1c:	7bfb      	ldrb	r3, [r7, #15]
 8024c1e:	e000      	b.n	8024c22 <lv_txt_utf8_get_byte_id+0x32>
 8024c20:	2301      	movs	r3, #1
 8024c22:	693a      	ldr	r2, [r7, #16]
 8024c24:	4413      	add	r3, r2
 8024c26:	613b      	str	r3, [r7, #16]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024c28:	697b      	ldr	r3, [r7, #20]
 8024c2a:	3301      	adds	r3, #1
 8024c2c:	617b      	str	r3, [r7, #20]
 8024c2e:	697a      	ldr	r2, [r7, #20]
 8024c30:	683b      	ldr	r3, [r7, #0]
 8024c32:	429a      	cmp	r2, r3
 8024c34:	d205      	bcs.n	8024c42 <lv_txt_utf8_get_byte_id+0x52>
 8024c36:	687a      	ldr	r2, [r7, #4]
 8024c38:	693b      	ldr	r3, [r7, #16]
 8024c3a:	4413      	add	r3, r2
 8024c3c:	781b      	ldrb	r3, [r3, #0]
 8024c3e:	2b00      	cmp	r3, #0
 8024c40:	d1e0      	bne.n	8024c04 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 8024c42:	693b      	ldr	r3, [r7, #16]
}
 8024c44:	4618      	mov	r0, r3
 8024c46:	3718      	adds	r7, #24
 8024c48:	46bd      	mov	sp, r7
 8024c4a:	bd80      	pop	{r7, pc}
 8024c4c:	20000018 	.word	0x20000018

08024c50 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8024c50:	b580      	push	{r7, lr}
 8024c52:	b084      	sub	sp, #16
 8024c54:	af00      	add	r7, sp, #0
 8024c56:	6078      	str	r0, [r7, #4]
 8024c58:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 8024c5a:	2300      	movs	r3, #0
 8024c5c:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 8024c5e:	2300      	movs	r3, #0
 8024c60:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 8024c62:	e009      	b.n	8024c78 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8024c64:	4b09      	ldr	r3, [pc, #36]	; (8024c8c <lv_txt_utf8_get_char_id+0x3c>)
 8024c66:	681b      	ldr	r3, [r3, #0]
 8024c68:	f107 0208 	add.w	r2, r7, #8
 8024c6c:	4611      	mov	r1, r2
 8024c6e:	6878      	ldr	r0, [r7, #4]
 8024c70:	4798      	blx	r3
        char_cnt++;
 8024c72:	68fb      	ldr	r3, [r7, #12]
 8024c74:	3301      	adds	r3, #1
 8024c76:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 8024c78:	68bb      	ldr	r3, [r7, #8]
 8024c7a:	683a      	ldr	r2, [r7, #0]
 8024c7c:	429a      	cmp	r2, r3
 8024c7e:	d8f1      	bhi.n	8024c64 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 8024c80:	68fb      	ldr	r3, [r7, #12]
}
 8024c82:	4618      	mov	r0, r3
 8024c84:	3710      	adds	r7, #16
 8024c86:	46bd      	mov	sp, r7
 8024c88:	bd80      	pop	{r7, pc}
 8024c8a:	bf00      	nop
 8024c8c:	2000001c 	.word	0x2000001c

08024c90 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8024c90:	b580      	push	{r7, lr}
 8024c92:	b084      	sub	sp, #16
 8024c94:	af00      	add	r7, sp, #0
 8024c96:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8024c98:	2300      	movs	r3, #0
 8024c9a:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 8024c9c:	2300      	movs	r3, #0
 8024c9e:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 8024ca0:	e009      	b.n	8024cb6 <lv_txt_utf8_get_length+0x26>
        _lv_txt_encoded_next(txt, &i);
 8024ca2:	4b0a      	ldr	r3, [pc, #40]	; (8024ccc <lv_txt_utf8_get_length+0x3c>)
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	f107 0208 	add.w	r2, r7, #8
 8024caa:	4611      	mov	r1, r2
 8024cac:	6878      	ldr	r0, [r7, #4]
 8024cae:	4798      	blx	r3
        len++;
 8024cb0:	68fb      	ldr	r3, [r7, #12]
 8024cb2:	3301      	adds	r3, #1
 8024cb4:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 8024cb6:	68bb      	ldr	r3, [r7, #8]
 8024cb8:	687a      	ldr	r2, [r7, #4]
 8024cba:	4413      	add	r3, r2
 8024cbc:	781b      	ldrb	r3, [r3, #0]
 8024cbe:	2b00      	cmp	r3, #0
 8024cc0:	d1ef      	bne.n	8024ca2 <lv_txt_utf8_get_length+0x12>
    }

    return len;
 8024cc2:	68fb      	ldr	r3, [r7, #12]
}
 8024cc4:	4618      	mov	r0, r3
 8024cc6:	3710      	adds	r7, #16
 8024cc8:	46bd      	mov	sp, r7
 8024cca:	bd80      	pop	{r7, pc}
 8024ccc:	2000001c 	.word	0x2000001c

08024cd0 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8024cd0:	b580      	push	{r7, lr}
 8024cd2:	b086      	sub	sp, #24
 8024cd4:	af00      	add	r7, sp, #0
 8024cd6:	60f8      	str	r0, [r7, #12]
 8024cd8:	60b9      	str	r1, [r7, #8]
 8024cda:	607a      	str	r2, [r7, #4]
 8024cdc:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8024cde:	68bb      	ldr	r3, [r7, #8]
 8024ce0:	617b      	str	r3, [r7, #20]
 8024ce2:	e02d      	b.n	8024d40 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	085b      	lsrs	r3, r3, #1
 8024ce8:	683a      	ldr	r2, [r7, #0]
 8024cea:	fb02 f303 	mul.w	r3, r2, r3
 8024cee:	697a      	ldr	r2, [r7, #20]
 8024cf0:	4413      	add	r3, r2
 8024cf2:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 8024cf4:	6a3b      	ldr	r3, [r7, #32]
 8024cf6:	6979      	ldr	r1, [r7, #20]
 8024cf8:	68f8      	ldr	r0, [r7, #12]
 8024cfa:	4798      	blx	r3
 8024cfc:	6138      	str	r0, [r7, #16]
 8024cfe:	693b      	ldr	r3, [r7, #16]
 8024d00:	2b00      	cmp	r3, #0
 8024d02:	dd12      	ble.n	8024d2a <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 8024d04:	687b      	ldr	r3, [r7, #4]
 8024d06:	085b      	lsrs	r3, r3, #1
 8024d08:	687a      	ldr	r2, [r7, #4]
 8024d0a:	f002 0201 	and.w	r2, r2, #1
 8024d0e:	2a00      	cmp	r2, #0
 8024d10:	bf0c      	ite	eq
 8024d12:	2201      	moveq	r2, #1
 8024d14:	2200      	movne	r2, #0
 8024d16:	b2d2      	uxtb	r2, r2
 8024d18:	1a9b      	subs	r3, r3, r2
 8024d1a:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 8024d1c:	697a      	ldr	r2, [r7, #20]
 8024d1e:	683b      	ldr	r3, [r7, #0]
 8024d20:	4413      	add	r3, r2
 8024d22:	617b      	str	r3, [r7, #20]
 8024d24:	697b      	ldr	r3, [r7, #20]
 8024d26:	60bb      	str	r3, [r7, #8]
 8024d28:	e00a      	b.n	8024d40 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 8024d2a:	693b      	ldr	r3, [r7, #16]
 8024d2c:	2b00      	cmp	r3, #0
 8024d2e:	da05      	bge.n	8024d3c <_lv_utils_bsearch+0x6c>
            n /= 2;
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	085b      	lsrs	r3, r3, #1
 8024d34:	607b      	str	r3, [r7, #4]
            middle = base;
 8024d36:	68bb      	ldr	r3, [r7, #8]
 8024d38:	617b      	str	r3, [r7, #20]
 8024d3a:	e001      	b.n	8024d40 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 8024d3c:	697b      	ldr	r3, [r7, #20]
 8024d3e:	e003      	b.n	8024d48 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	2b00      	cmp	r3, #0
 8024d44:	d1ce      	bne.n	8024ce4 <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8024d46:	2300      	movs	r3, #0
}
 8024d48:	4618      	mov	r0, r3
 8024d4a:	3718      	adds	r7, #24
 8024d4c:	46bd      	mov	sp, r7
 8024d4e:	bd80      	pop	{r7, pc}

08024d50 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8024d50:	b480      	push	{r7}
 8024d52:	b083      	sub	sp, #12
 8024d54:	af00      	add	r7, sp, #0
 8024d56:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8024d5e:	b29a      	uxth	r2, r3
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024d66:	b29b      	uxth	r3, r3
 8024d68:	1ad3      	subs	r3, r2, r3
 8024d6a:	b29b      	uxth	r3, r3
 8024d6c:	3301      	adds	r3, #1
 8024d6e:	b29b      	uxth	r3, r3
 8024d70:	b21b      	sxth	r3, r3
}
 8024d72:	4618      	mov	r0, r3
 8024d74:	370c      	adds	r7, #12
 8024d76:	46bd      	mov	sp, r7
 8024d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d7c:	4770      	bx	lr

08024d7e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8024d7e:	b480      	push	{r7}
 8024d80:	b083      	sub	sp, #12
 8024d82:	af00      	add	r7, sp, #0
 8024d84:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024d86:	687b      	ldr	r3, [r7, #4]
 8024d88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8024d8c:	b29a      	uxth	r2, r3
 8024d8e:	687b      	ldr	r3, [r7, #4]
 8024d90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024d94:	b29b      	uxth	r3, r3
 8024d96:	1ad3      	subs	r3, r2, r3
 8024d98:	b29b      	uxth	r3, r3
 8024d9a:	3301      	adds	r3, #1
 8024d9c:	b29b      	uxth	r3, r3
 8024d9e:	b21b      	sxth	r3, r3
}
 8024da0:	4618      	mov	r0, r3
 8024da2:	370c      	adds	r7, #12
 8024da4:	46bd      	mov	sp, r7
 8024da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024daa:	4770      	bx	lr

08024dac <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8024dac:	b480      	push	{r7}
 8024dae:	b083      	sub	sp, #12
 8024db0:	af00      	add	r7, sp, #0
 8024db2:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8024db4:	687b      	ldr	r3, [r7, #4]
 8024db6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8024dba:	4618      	mov	r0, r3
 8024dbc:	370c      	adds	r7, #12
 8024dbe:	46bd      	mov	sp, r7
 8024dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dc4:	4770      	bx	lr

08024dc6 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8024dc6:	b480      	push	{r7}
 8024dc8:	b083      	sub	sp, #12
 8024dca:	af00      	add	r7, sp, #0
 8024dcc:	6078      	str	r0, [r7, #4]
 8024dce:	6039      	str	r1, [r7, #0]
    a->var = var;
 8024dd0:	687b      	ldr	r3, [r7, #4]
 8024dd2:	683a      	ldr	r2, [r7, #0]
 8024dd4:	601a      	str	r2, [r3, #0]
}
 8024dd6:	bf00      	nop
 8024dd8:	370c      	adds	r7, #12
 8024dda:	46bd      	mov	sp, r7
 8024ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024de0:	4770      	bx	lr

08024de2 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8024de2:	b480      	push	{r7}
 8024de4:	b083      	sub	sp, #12
 8024de6:	af00      	add	r7, sp, #0
 8024de8:	6078      	str	r0, [r7, #4]
 8024dea:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8024dec:	687b      	ldr	r3, [r7, #4]
 8024dee:	683a      	ldr	r2, [r7, #0]
 8024df0:	605a      	str	r2, [r3, #4]
}
 8024df2:	bf00      	nop
 8024df4:	370c      	adds	r7, #12
 8024df6:	46bd      	mov	sp, r7
 8024df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dfc:	4770      	bx	lr

08024dfe <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8024dfe:	b480      	push	{r7}
 8024e00:	b083      	sub	sp, #12
 8024e02:	af00      	add	r7, sp, #0
 8024e04:	6078      	str	r0, [r7, #4]
 8024e06:	6039      	str	r1, [r7, #0]
    a->time = duration;
 8024e08:	683a      	ldr	r2, [r7, #0]
 8024e0a:	687b      	ldr	r3, [r7, #4]
 8024e0c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8024e0e:	bf00      	nop
 8024e10:	370c      	adds	r7, #12
 8024e12:	46bd      	mov	sp, r7
 8024e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e18:	4770      	bx	lr

08024e1a <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 8024e1a:	b480      	push	{r7}
 8024e1c:	b085      	sub	sp, #20
 8024e1e:	af00      	add	r7, sp, #0
 8024e20:	60f8      	str	r0, [r7, #12]
 8024e22:	60b9      	str	r1, [r7, #8]
 8024e24:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 8024e26:	68fb      	ldr	r3, [r7, #12]
 8024e28:	68ba      	ldr	r2, [r7, #8]
 8024e2a:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 8024e2c:	68fb      	ldr	r3, [r7, #12]
 8024e2e:	68ba      	ldr	r2, [r7, #8]
 8024e30:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 8024e32:	68fb      	ldr	r3, [r7, #12]
 8024e34:	687a      	ldr	r2, [r7, #4]
 8024e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8024e38:	bf00      	nop
 8024e3a:	3714      	adds	r7, #20
 8024e3c:	46bd      	mov	sp, r7
 8024e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e42:	4770      	bx	lr

08024e44 <lv_anim_set_playback_time>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param time      the duration of the playback animation in milliseconds. 0: disable playback
 */
static inline void lv_anim_set_playback_time(lv_anim_t * a, uint32_t time)
{
 8024e44:	b480      	push	{r7}
 8024e46:	b083      	sub	sp, #12
 8024e48:	af00      	add	r7, sp, #0
 8024e4a:	6078      	str	r0, [r7, #4]
 8024e4c:	6039      	str	r1, [r7, #0]
    a->playback_time = time;
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	683a      	ldr	r2, [r7, #0]
 8024e52:	639a      	str	r2, [r3, #56]	; 0x38
}
 8024e54:	bf00      	nop
 8024e56:	370c      	adds	r7, #12
 8024e58:	46bd      	mov	sp, r7
 8024e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e5e:	4770      	bx	lr

08024e60 <lv_anim_set_playback_delay>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before starting the playback animation.
 */
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint32_t delay)
{
 8024e60:	b480      	push	{r7}
 8024e62:	b083      	sub	sp, #12
 8024e64:	af00      	add	r7, sp, #0
 8024e66:	6078      	str	r0, [r7, #4]
 8024e68:	6039      	str	r1, [r7, #0]
    a->playback_delay = delay;
 8024e6a:	687b      	ldr	r3, [r7, #4]
 8024e6c:	683a      	ldr	r2, [r7, #0]
 8024e6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8024e70:	bf00      	nop
 8024e72:	370c      	adds	r7, #12
 8024e74:	46bd      	mov	sp, r7
 8024e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e7a:	4770      	bx	lr

08024e7c <lv_anim_set_repeat_count>:
 * Make the animation repeat itself.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
 8024e7c:	b480      	push	{r7}
 8024e7e:	b083      	sub	sp, #12
 8024e80:	af00      	add	r7, sp, #0
 8024e82:	6078      	str	r0, [r7, #4]
 8024e84:	460b      	mov	r3, r1
 8024e86:	807b      	strh	r3, [r7, #2]
    a->repeat_cnt = cnt;
 8024e88:	687b      	ldr	r3, [r7, #4]
 8024e8a:	887a      	ldrh	r2, [r7, #2]
 8024e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8024e90:	bf00      	nop
 8024e92:	370c      	adds	r7, #12
 8024e94:	46bd      	mov	sp, r7
 8024e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e9a:	4770      	bx	lr

08024e9c <lv_anim_set_repeat_delay>:
 * Set a delay before repeating the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
 8024e9c:	b480      	push	{r7}
 8024e9e:	b083      	sub	sp, #12
 8024ea0:	af00      	add	r7, sp, #0
 8024ea2:	6078      	str	r0, [r7, #4]
 8024ea4:	6039      	str	r1, [r7, #0]
    a->repeat_delay = delay;
 8024ea6:	687b      	ldr	r3, [r7, #4]
 8024ea8:	683a      	ldr	r2, [r7, #0]
 8024eaa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8024eac:	bf00      	nop
 8024eae:	370c      	adds	r7, #12
 8024eb0:	46bd      	mov	sp, r7
 8024eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024eb6:	4770      	bx	lr

08024eb8 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 8024eb8:	b480      	push	{r7}
 8024eba:	b085      	sub	sp, #20
 8024ebc:	af00      	add	r7, sp, #0
 8024ebe:	60f8      	str	r0, [r7, #12]
 8024ec0:	60b9      	str	r1, [r7, #8]
 8024ec2:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8024ec4:	68fb      	ldr	r3, [r7, #12]
 8024ec6:	781b      	ldrb	r3, [r3, #0]
 8024ec8:	2b00      	cmp	r3, #0
 8024eca:	d102      	bne.n	8024ed2 <lv_bidi_calculate_align+0x1a>
 8024ecc:	68fb      	ldr	r3, [r7, #12]
 8024ece:	2201      	movs	r2, #1
 8024ed0:	701a      	strb	r2, [r3, #0]
}
 8024ed2:	bf00      	nop
 8024ed4:	3714      	adds	r7, #20
 8024ed6:	46bd      	mov	sp, r7
 8024ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024edc:	4770      	bx	lr

08024ede <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8024ede:	b580      	push	{r7, lr}
 8024ee0:	b084      	sub	sp, #16
 8024ee2:	af00      	add	r7, sp, #0
 8024ee4:	6078      	str	r0, [r7, #4]
 8024ee6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8024ee8:	2201      	movs	r2, #1
 8024eea:	6839      	ldr	r1, [r7, #0]
 8024eec:	6878      	ldr	r0, [r7, #4]
 8024eee:	f7e7 fd31 	bl	800c954 <lv_obj_get_style_prop>
 8024ef2:	4603      	mov	r3, r0
 8024ef4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024ef6:	68fb      	ldr	r3, [r7, #12]
 8024ef8:	b21b      	sxth	r3, r3
}
 8024efa:	4618      	mov	r0, r3
 8024efc:	3710      	adds	r7, #16
 8024efe:	46bd      	mov	sp, r7
 8024f00:	bd80      	pop	{r7, pc}

08024f02 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f02:	b580      	push	{r7, lr}
 8024f04:	b084      	sub	sp, #16
 8024f06:	af00      	add	r7, sp, #0
 8024f08:	6078      	str	r0, [r7, #4]
 8024f0a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8024f0c:	2210      	movs	r2, #16
 8024f0e:	6839      	ldr	r1, [r7, #0]
 8024f10:	6878      	ldr	r0, [r7, #4]
 8024f12:	f7e7 fd1f 	bl	800c954 <lv_obj_get_style_prop>
 8024f16:	4603      	mov	r3, r0
 8024f18:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024f1a:	68fb      	ldr	r3, [r7, #12]
 8024f1c:	b21b      	sxth	r3, r3
}
 8024f1e:	4618      	mov	r0, r3
 8024f20:	3710      	adds	r7, #16
 8024f22:	46bd      	mov	sp, r7
 8024f24:	bd80      	pop	{r7, pc}

08024f26 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f26:	b580      	push	{r7, lr}
 8024f28:	b084      	sub	sp, #16
 8024f2a:	af00      	add	r7, sp, #0
 8024f2c:	6078      	str	r0, [r7, #4]
 8024f2e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8024f30:	2212      	movs	r2, #18
 8024f32:	6839      	ldr	r1, [r7, #0]
 8024f34:	6878      	ldr	r0, [r7, #4]
 8024f36:	f7e7 fd0d 	bl	800c954 <lv_obj_get_style_prop>
 8024f3a:	4603      	mov	r3, r0
 8024f3c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024f3e:	68fb      	ldr	r3, [r7, #12]
 8024f40:	b21b      	sxth	r3, r3
}
 8024f42:	4618      	mov	r0, r3
 8024f44:	3710      	adds	r7, #16
 8024f46:	46bd      	mov	sp, r7
 8024f48:	bd80      	pop	{r7, pc}

08024f4a <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f4a:	b580      	push	{r7, lr}
 8024f4c:	b084      	sub	sp, #16
 8024f4e:	af00      	add	r7, sp, #0
 8024f50:	6078      	str	r0, [r7, #4]
 8024f52:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8024f54:	2220      	movs	r2, #32
 8024f56:	6839      	ldr	r1, [r7, #0]
 8024f58:	6878      	ldr	r0, [r7, #4]
 8024f5a:	f7e7 fcfb 	bl	800c954 <lv_obj_get_style_prop>
 8024f5e:	4603      	mov	r3, r0
 8024f60:	60fb      	str	r3, [r7, #12]
    return v.color;
 8024f62:	7b3b      	ldrb	r3, [r7, #12]
}
 8024f64:	4618      	mov	r0, r3
 8024f66:	3710      	adds	r7, #16
 8024f68:	46bd      	mov	sp, r7
 8024f6a:	bd80      	pop	{r7, pc}

08024f6c <lv_obj_get_style_text_color_filtered>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
    return v.color;
}

static inline lv_color_t lv_obj_get_style_text_color_filtered(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f6c:	b580      	push	{r7, lr}
 8024f6e:	b084      	sub	sp, #16
 8024f70:	af00      	add	r7, sp, #0
 8024f72:	6078      	str	r0, [r7, #4]
 8024f74:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8024f76:	2255      	movs	r2, #85	; 0x55
 8024f78:	6839      	ldr	r1, [r7, #0]
 8024f7a:	6878      	ldr	r0, [r7, #4]
 8024f7c:	f7e7 fcea 	bl	800c954 <lv_obj_get_style_prop>
 8024f80:	4603      	mov	r3, r0
 8024f82:	461a      	mov	r2, r3
 8024f84:	6839      	ldr	r1, [r7, #0]
 8024f86:	6878      	ldr	r0, [r7, #4]
 8024f88:	f7e7 ff30 	bl	800cdec <_lv_obj_style_apply_color_filter>
 8024f8c:	4603      	mov	r3, r0
 8024f8e:	60fb      	str	r3, [r7, #12]
    return v.color;
 8024f90:	7b3b      	ldrb	r3, [r7, #12]
}
 8024f92:	4618      	mov	r0, r3
 8024f94:	3710      	adds	r7, #16
 8024f96:	46bd      	mov	sp, r7
 8024f98:	bd80      	pop	{r7, pc}

08024f9a <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f9a:	b580      	push	{r7, lr}
 8024f9c:	b084      	sub	sp, #16
 8024f9e:	af00      	add	r7, sp, #0
 8024fa0:	6078      	str	r0, [r7, #4]
 8024fa2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8024fa4:	2257      	movs	r2, #87	; 0x57
 8024fa6:	6839      	ldr	r1, [r7, #0]
 8024fa8:	6878      	ldr	r0, [r7, #4]
 8024faa:	f7e7 fcd3 	bl	800c954 <lv_obj_get_style_prop>
 8024fae:	4603      	mov	r3, r0
 8024fb0:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 8024fb2:	68fb      	ldr	r3, [r7, #12]
}
 8024fb4:	4618      	mov	r0, r3
 8024fb6:	3710      	adds	r7, #16
 8024fb8:	46bd      	mov	sp, r7
 8024fba:	bd80      	pop	{r7, pc}

08024fbc <lv_obj_get_style_text_letter_space>:

static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
{
 8024fbc:	b580      	push	{r7, lr}
 8024fbe:	b084      	sub	sp, #16
 8024fc0:	af00      	add	r7, sp, #0
 8024fc2:	6078      	str	r0, [r7, #4]
 8024fc4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8024fc6:	2258      	movs	r2, #88	; 0x58
 8024fc8:	6839      	ldr	r1, [r7, #0]
 8024fca:	6878      	ldr	r0, [r7, #4]
 8024fcc:	f7e7 fcc2 	bl	800c954 <lv_obj_get_style_prop>
 8024fd0:	4603      	mov	r3, r0
 8024fd2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024fd4:	68fb      	ldr	r3, [r7, #12]
 8024fd6:	b21b      	sxth	r3, r3
}
 8024fd8:	4618      	mov	r0, r3
 8024fda:	3710      	adds	r7, #16
 8024fdc:	46bd      	mov	sp, r7
 8024fde:	bd80      	pop	{r7, pc}

08024fe0 <lv_obj_get_style_text_line_space>:

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
 8024fe0:	b580      	push	{r7, lr}
 8024fe2:	b084      	sub	sp, #16
 8024fe4:	af00      	add	r7, sp, #0
 8024fe6:	6078      	str	r0, [r7, #4]
 8024fe8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8024fea:	2259      	movs	r2, #89	; 0x59
 8024fec:	6839      	ldr	r1, [r7, #0]
 8024fee:	6878      	ldr	r0, [r7, #4]
 8024ff0:	f7e7 fcb0 	bl	800c954 <lv_obj_get_style_prop>
 8024ff4:	4603      	mov	r3, r0
 8024ff6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024ff8:	68fb      	ldr	r3, [r7, #12]
 8024ffa:	b21b      	sxth	r3, r3
}
 8024ffc:	4618      	mov	r0, r3
 8024ffe:	3710      	adds	r7, #16
 8025000:	46bd      	mov	sp, r7
 8025002:	bd80      	pop	{r7, pc}

08025004 <lv_obj_get_style_anim>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
    return (lv_opa_t)v.num;
}

static inline const lv_anim_t * lv_obj_get_style_anim(const struct _lv_obj_t * obj, uint32_t part)
{
 8025004:	b580      	push	{r7, lr}
 8025006:	b084      	sub	sp, #16
 8025008:	af00      	add	r7, sp, #0
 802500a:	6078      	str	r0, [r7, #4]
 802500c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 802500e:	2263      	movs	r2, #99	; 0x63
 8025010:	6839      	ldr	r1, [r7, #0]
 8025012:	6878      	ldr	r0, [r7, #4]
 8025014:	f7e7 fc9e 	bl	800c954 <lv_obj_get_style_prop>
 8025018:	4603      	mov	r3, r0
 802501a:	60fb      	str	r3, [r7, #12]
    return (const lv_anim_t *)v.ptr;
 802501c:	68fb      	ldr	r3, [r7, #12]
}
 802501e:	4618      	mov	r0, r3
 8025020:	3710      	adds	r7, #16
 8025022:	46bd      	mov	sp, r7
 8025024:	bd80      	pop	{r7, pc}

08025026 <lv_obj_get_style_anim_speed>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
    return (uint32_t)v.num;
}

static inline uint32_t lv_obj_get_style_anim_speed(const struct _lv_obj_t * obj, uint32_t part)
{
 8025026:	b580      	push	{r7, lr}
 8025028:	b084      	sub	sp, #16
 802502a:	af00      	add	r7, sp, #0
 802502c:	6078      	str	r0, [r7, #4]
 802502e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8025030:	2265      	movs	r2, #101	; 0x65
 8025032:	6839      	ldr	r1, [r7, #0]
 8025034:	6878      	ldr	r0, [r7, #4]
 8025036:	f7e7 fc8d 	bl	800c954 <lv_obj_get_style_prop>
 802503a:	4603      	mov	r3, r0
 802503c:	60fb      	str	r3, [r7, #12]
    return (uint32_t)v.num;
 802503e:	68fb      	ldr	r3, [r7, #12]
}
 8025040:	4618      	mov	r0, r3
 8025042:	3710      	adds	r7, #16
 8025044:	46bd      	mov	sp, r7
 8025046:	bd80      	pop	{r7, pc}

08025048 <lv_label_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_label_create(lv_obj_t * parent)
{
 8025048:	b580      	push	{r7, lr}
 802504a:	b084      	sub	sp, #16
 802504c:	af00      	add	r7, sp, #0
 802504e:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8025050:	6879      	ldr	r1, [r7, #4]
 8025052:	4806      	ldr	r0, [pc, #24]	; (802506c <lv_label_create+0x24>)
 8025054:	f7e2 f874 	bl	8007140 <lv_obj_class_create_obj>
 8025058:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 802505a:	68f8      	ldr	r0, [r7, #12]
 802505c:	f7e2 f925 	bl	80072aa <lv_obj_class_init_obj>
    return obj;
 8025060:	68fb      	ldr	r3, [r7, #12]
}
 8025062:	4618      	mov	r0, r3
 8025064:	3710      	adds	r7, #16
 8025066:	46bd      	mov	sp, r7
 8025068:	bd80      	pop	{r7, pc}
 802506a:	bf00      	nop
 802506c:	0802dfbc 	.word	0x0802dfbc

08025070 <lv_label_set_text>:
/*=====================
 * Setter functions
 *====================*/

void lv_label_set_text(lv_obj_t * obj, const char * text)
{
 8025070:	b590      	push	{r4, r7, lr}
 8025072:	b085      	sub	sp, #20
 8025074:	af00      	add	r7, sp, #0
 8025076:	6078      	str	r0, [r7, #4]
 8025078:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_label_t * label = (lv_label_t *)obj;
 802507a:	687b      	ldr	r3, [r7, #4]
 802507c:	60fb      	str	r3, [r7, #12]

    lv_obj_invalidate(obj);
 802507e:	6878      	ldr	r0, [r7, #4]
 8025080:	f7e4 fb1f 	bl	80096c2 <lv_obj_invalidate>

    /*If text is NULL then just refresh with the current text*/
    if(text == NULL) text = label->text;
 8025084:	683b      	ldr	r3, [r7, #0]
 8025086:	2b00      	cmp	r3, #0
 8025088:	d102      	bne.n	8025090 <lv_label_set_text+0x20>
 802508a:	68fb      	ldr	r3, [r7, #12]
 802508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802508e:	603b      	str	r3, [r7, #0]

    if(label->text == text && label->static_txt == 0) {
 8025090:	68fb      	ldr	r3, [r7, #12]
 8025092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025094:	683a      	ldr	r2, [r7, #0]
 8025096:	429a      	cmp	r2, r3
 8025098:	d121      	bne.n	80250de <lv_label_set_text+0x6e>
 802509a:	68fb      	ldr	r3, [r7, #12]
 802509c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80250a0:	f003 0308 	and.w	r3, r3, #8
 80250a4:	b2db      	uxtb	r3, r3
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	d119      	bne.n	80250de <lv_label_set_text+0x6e>
        LV_ASSERT_MALLOC(label->text);
        if(label->text == NULL) return;

        _lv_txt_ap_proc(label->text, label->text);
#else
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 80250aa:	68fb      	ldr	r3, [r7, #12]
 80250ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80250ae:	68fb      	ldr	r3, [r7, #12]
 80250b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250b2:	4618      	mov	r0, r3
 80250b4:	f7db f8ca 	bl	800024c <strlen>
 80250b8:	4603      	mov	r3, r0
 80250ba:	3301      	adds	r3, #1
 80250bc:	4619      	mov	r1, r3
 80250be:	4620      	mov	r0, r4
 80250c0:	f7fc feae 	bl	8021e20 <lv_mem_realloc>
 80250c4:	4602      	mov	r2, r0
 80250c6:	68fb      	ldr	r3, [r7, #12]
 80250c8:	625a      	str	r2, [r3, #36]	; 0x24
#endif

        LV_ASSERT_MALLOC(label->text);
 80250ca:	68fb      	ldr	r3, [r7, #12]
 80250cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250ce:	2b00      	cmp	r3, #0
 80250d0:	d100      	bne.n	80250d4 <lv_label_set_text+0x64>
 80250d2:	e7fe      	b.n	80250d2 <lv_label_set_text+0x62>
        if(label->text == NULL) return;
 80250d4:	68fb      	ldr	r3, [r7, #12]
 80250d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250d8:	2b00      	cmp	r3, #0
 80250da:	d136      	bne.n	802514a <lv_label_set_text+0xda>
 80250dc:	e03a      	b.n	8025154 <lv_label_set_text+0xe4>
    }
    else {
        /*Free the old text*/
        if(label->text != NULL && label->static_txt == 0) {
 80250de:	68fb      	ldr	r3, [r7, #12]
 80250e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250e2:	2b00      	cmp	r3, #0
 80250e4:	d00f      	beq.n	8025106 <lv_label_set_text+0x96>
 80250e6:	68fb      	ldr	r3, [r7, #12]
 80250e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80250ec:	f003 0308 	and.w	r3, r3, #8
 80250f0:	b2db      	uxtb	r3, r3
 80250f2:	2b00      	cmp	r3, #0
 80250f4:	d107      	bne.n	8025106 <lv_label_set_text+0x96>
            lv_mem_free(label->text);
 80250f6:	68fb      	ldr	r3, [r7, #12]
 80250f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250fa:	4618      	mov	r0, r3
 80250fc:	f7fc fe62 	bl	8021dc4 <lv_mem_free>
            label->text = NULL;
 8025100:	68fb      	ldr	r3, [r7, #12]
 8025102:	2200      	movs	r2, #0
 8025104:	625a      	str	r2, [r3, #36]	; 0x24
        if(label->text == NULL) return;

        _lv_txt_ap_proc(text, label->text);
#else
        /*Get the size of the text*/
        size_t len = strlen(text) + 1;
 8025106:	6838      	ldr	r0, [r7, #0]
 8025108:	f7db f8a0 	bl	800024c <strlen>
 802510c:	4603      	mov	r3, r0
 802510e:	3301      	adds	r3, #1
 8025110:	60bb      	str	r3, [r7, #8]

        /*Allocate space for the new text*/
        label->text = lv_mem_alloc(len);
 8025112:	68b8      	ldr	r0, [r7, #8]
 8025114:	f7fc fe26 	bl	8021d64 <lv_mem_alloc>
 8025118:	4602      	mov	r2, r0
 802511a:	68fb      	ldr	r3, [r7, #12]
 802511c:	625a      	str	r2, [r3, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 802511e:	68fb      	ldr	r3, [r7, #12]
 8025120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025122:	2b00      	cmp	r3, #0
 8025124:	d100      	bne.n	8025128 <lv_label_set_text+0xb8>
 8025126:	e7fe      	b.n	8025126 <lv_label_set_text+0xb6>
        if(label->text == NULL) return;
 8025128:	68fb      	ldr	r3, [r7, #12]
 802512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802512c:	2b00      	cmp	r3, #0
 802512e:	d010      	beq.n	8025152 <lv_label_set_text+0xe2>
        strcpy(label->text, text);
 8025130:	68fb      	ldr	r3, [r7, #12]
 8025132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025134:	6839      	ldr	r1, [r7, #0]
 8025136:	4618      	mov	r0, r3
 8025138:	f001 fb02 	bl	8026740 <strcpy>
#endif

        /*Now the text is dynamically allocated*/
        label->static_txt = 0;
 802513c:	68fa      	ldr	r2, [r7, #12]
 802513e:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025142:	f36f 03c3 	bfc	r3, #3, #1
 8025146:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    }

    lv_label_refr_text(obj);
 802514a:	6878      	ldr	r0, [r7, #4]
 802514c:	f000 fd62 	bl	8025c14 <lv_label_refr_text>
 8025150:	e000      	b.n	8025154 <lv_label_set_text+0xe4>
        if(label->text == NULL) return;
 8025152:	bf00      	nop
}
 8025154:	3714      	adds	r7, #20
 8025156:	46bd      	mov	sp, r7
 8025158:	bd90      	pop	{r4, r7, pc}
	...

0802515c <lv_label_set_long_mode>:

    lv_label_refr_text(obj);
}

void lv_label_set_long_mode(lv_obj_t * obj, lv_label_long_mode_t long_mode)
{
 802515c:	b580      	push	{r7, lr}
 802515e:	b084      	sub	sp, #16
 8025160:	af00      	add	r7, sp, #0
 8025162:	6078      	str	r0, [r7, #4]
 8025164:	460b      	mov	r3, r1
 8025166:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_label_t * label = (lv_label_t *)obj;
 8025168:	687b      	ldr	r3, [r7, #4]
 802516a:	60fb      	str	r3, [r7, #12]

    /*Delete the old animation (if exists)*/
    lv_anim_del(obj, set_ofs_x_anim);
 802516c:	4924      	ldr	r1, [pc, #144]	; (8025200 <lv_label_set_long_mode+0xa4>)
 802516e:	6878      	ldr	r0, [r7, #4]
 8025170:	f7fa ff8c 	bl	802008c <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 8025174:	4923      	ldr	r1, [pc, #140]	; (8025204 <lv_label_set_long_mode+0xa8>)
 8025176:	6878      	ldr	r0, [r7, #4]
 8025178:	f7fa ff88 	bl	802008c <lv_anim_del>
    label->offset.x = 0;
 802517c:	68fb      	ldr	r3, [r7, #12]
 802517e:	2200      	movs	r2, #0
 8025180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    label->offset.y = 0;
 8025184:	68fb      	ldr	r3, [r7, #12]
 8025186:	2200      	movs	r2, #0
 8025188:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 802518c:	78fb      	ldrb	r3, [r7, #3]
 802518e:	2b02      	cmp	r3, #2
 8025190:	d005      	beq.n	802519e <lv_label_set_long_mode+0x42>
 8025192:	78fb      	ldrb	r3, [r7, #3]
 8025194:	2b03      	cmp	r3, #3
 8025196:	d002      	beq.n	802519e <lv_label_set_long_mode+0x42>
 8025198:	78fb      	ldrb	r3, [r7, #3]
 802519a:	2b04      	cmp	r3, #4
 802519c:	d107      	bne.n	80251ae <lv_label_set_long_mode+0x52>
        label->expand = 1;
 802519e:	68fa      	ldr	r2, [r7, #12]
 80251a0:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80251a4:	f043 0320 	orr.w	r3, r3, #32
 80251a8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 80251ac:	e006      	b.n	80251bc <lv_label_set_long_mode+0x60>
    else
        label->expand = 0;
 80251ae:	68fa      	ldr	r2, [r7, #12]
 80251b0:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80251b4:	f36f 1345 	bfc	r3, #5, #1
 80251b8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48

    /*Restore the character under the dots*/
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 80251bc:	68fb      	ldr	r3, [r7, #12]
 80251be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80251c2:	f003 0307 	and.w	r3, r3, #7
 80251c6:	b2db      	uxtb	r3, r3
 80251c8:	2b01      	cmp	r3, #1
 80251ca:	d107      	bne.n	80251dc <lv_label_set_long_mode+0x80>
 80251cc:	68fb      	ldr	r3, [r7, #12]
 80251ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80251d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80251d4:	d002      	beq.n	80251dc <lv_label_set_long_mode+0x80>
        lv_label_revert_dots(obj);
 80251d6:	6878      	ldr	r0, [r7, #4]
 80251d8:	f001 f978 	bl	80264cc <lv_label_revert_dots>
    }

    label->long_mode = long_mode;
 80251dc:	78fb      	ldrb	r3, [r7, #3]
 80251de:	f003 0307 	and.w	r3, r3, #7
 80251e2:	b2d9      	uxtb	r1, r3
 80251e4:	68fa      	ldr	r2, [r7, #12]
 80251e6:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80251ea:	f361 0302 	bfi	r3, r1, #0, #3
 80251ee:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    lv_label_refr_text(obj);
 80251f2:	6878      	ldr	r0, [r7, #4]
 80251f4:	f000 fd0e 	bl	8025c14 <lv_label_refr_text>
}
 80251f8:	bf00      	nop
 80251fa:	3710      	adds	r7, #16
 80251fc:	46bd      	mov	sp, r7
 80251fe:	bd80      	pop	{r7, pc}
 8025200:	08026681 	.word	0x08026681
 8025204:	080266a7 	.word	0x080266a7

08025208 <lv_label_get_text>:
/*=====================
 * Getter functions
 *====================*/

char * lv_label_get_text(const lv_obj_t * obj)
{
 8025208:	b480      	push	{r7}
 802520a:	b085      	sub	sp, #20
 802520c:	af00      	add	r7, sp, #0
 802520e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_label_t * label = (lv_label_t *)obj;
 8025210:	687b      	ldr	r3, [r7, #4]
 8025212:	60fb      	str	r3, [r7, #12]
    return label->text;
 8025214:	68fb      	ldr	r3, [r7, #12]
 8025216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8025218:	4618      	mov	r0, r3
 802521a:	3714      	adds	r7, #20
 802521c:	46bd      	mov	sp, r7
 802521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025222:	4770      	bx	lr

08025224 <lv_label_get_letter_on>:
    if(mutable_bidi_txt) lv_mem_buf_release(mutable_bidi_txt);
#endif
}

uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
{
 8025224:	b590      	push	{r4, r7, lr}
 8025226:	b09d      	sub	sp, #116	; 0x74
 8025228:	af02      	add	r7, sp, #8
 802522a:	6078      	str	r0, [r7, #4]
 802522c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    LV_ASSERT_NULL(pos_in);
 802522e:	683b      	ldr	r3, [r7, #0]
 8025230:	2b00      	cmp	r3, #0
 8025232:	d100      	bne.n	8025236 <lv_label_get_letter_on+0x12>
 8025234:	e7fe      	b.n	8025234 <lv_label_get_letter_on+0x10>
    lv_label_t * label = (lv_label_t *)obj;
 8025236:	687b      	ldr	r3, [r7, #4]
 8025238:	653b      	str	r3, [r7, #80]	; 0x50

    lv_point_t pos;
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802523a:	683b      	ldr	r3, [r7, #0]
 802523c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025240:	b29c      	uxth	r4, r3
 8025242:	2100      	movs	r1, #0
 8025244:	6878      	ldr	r0, [r7, #4]
 8025246:	f7ff fe6e 	bl	8024f26 <lv_obj_get_style_pad_left>
 802524a:	4603      	mov	r3, r0
 802524c:	b29b      	uxth	r3, r3
 802524e:	1ae3      	subs	r3, r4, r3
 8025250:	b29b      	uxth	r3, r3
 8025252:	b21b      	sxth	r3, r3
 8025254:	84bb      	strh	r3, [r7, #36]	; 0x24
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8025256:	683b      	ldr	r3, [r7, #0]
 8025258:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802525c:	b29c      	uxth	r4, r3
 802525e:	2100      	movs	r1, #0
 8025260:	6878      	ldr	r0, [r7, #4]
 8025262:	f7ff fe4e 	bl	8024f02 <lv_obj_get_style_pad_top>
 8025266:	4603      	mov	r3, r0
 8025268:	b29b      	uxth	r3, r3
 802526a:	1ae3      	subs	r3, r4, r3
 802526c:	b29b      	uxth	r3, r3
 802526e:	b21b      	sxth	r3, r3
 8025270:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8025272:	f107 031c 	add.w	r3, r7, #28
 8025276:	4619      	mov	r1, r3
 8025278:	6878      	ldr	r0, [r7, #4]
 802527a:	f7e3 fcca 	bl	8008c12 <lv_obj_get_content_coords>
    const char * txt         = lv_label_get_text(obj);
 802527e:	6878      	ldr	r0, [r7, #4]
 8025280:	f7ff ffc2 	bl	8025208 <lv_label_get_text>
 8025284:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint32_t line_start      = 0;
 8025286:	2300      	movs	r3, #0
 8025288:	667b      	str	r3, [r7, #100]	; 0x64
    uint32_t new_line_start  = 0;
 802528a:	2300      	movs	r3, #0
 802528c:	663b      	str	r3, [r7, #96]	; 0x60
    lv_coord_t max_w         = lv_area_get_width(&txt_coords);
 802528e:	f107 031c 	add.w	r3, r7, #28
 8025292:	4618      	mov	r0, r3
 8025294:	f7ff fd5c 	bl	8024d50 <lv_area_get_width>
 8025298:	4603      	mov	r3, r0
 802529a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802529e:	2100      	movs	r1, #0
 80252a0:	6878      	ldr	r0, [r7, #4]
 80252a2:	f7ff fe7a 	bl	8024f9a <lv_obj_get_style_text_font>
 80252a6:	6478      	str	r0, [r7, #68]	; 0x44
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80252a8:	2100      	movs	r1, #0
 80252aa:	6878      	ldr	r0, [r7, #4]
 80252ac:	f7ff fe98 	bl	8024fe0 <lv_obj_get_style_text_line_space>
 80252b0:	4603      	mov	r3, r0
 80252b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 80252b6:	2100      	movs	r1, #0
 80252b8:	6878      	ldr	r0, [r7, #4]
 80252ba:	f7ff fe7f 	bl	8024fbc <lv_obj_get_style_text_letter_space>
 80252be:	4603      	mov	r3, r0
 80252c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 80252c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80252c6:	f7ff fd71 	bl	8024dac <lv_font_get_line_height>
 80252ca:	4603      	mov	r3, r0
 80252cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t y             = 0;
 80252ce:	2300      	movs	r3, #0
 80252d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 80252d4:	2300      	movs	r3, #0
 80252d6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint32_t logical_pos;
    char * bidi_txt;

    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80252da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80252e0:	f003 0310 	and.w	r3, r3, #16
 80252e4:	b2db      	uxtb	r3, r3
 80252e6:	2b00      	cmp	r3, #0
 80252e8:	d005      	beq.n	80252f6 <lv_label_get_letter_on+0xd2>
 80252ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80252ee:	f043 0301 	orr.w	r3, r3, #1
 80252f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80252f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80252fc:	f003 0320 	and.w	r3, r3, #32
 8025300:	b2db      	uxtb	r3, r3
 8025302:	2b00      	cmp	r3, #0
 8025304:	d005      	beq.n	8025312 <lv_label_get_letter_on+0xee>
 8025306:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802530a:	f043 0302 	orr.w	r3, r3, #2
 802530e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8025312:	2100      	movs	r1, #0
 8025314:	6878      	ldr	r0, [r7, #4]
 8025316:	f7ff fde2 	bl	8024ede <lv_obj_get_style_width>
 802531a:	4603      	mov	r3, r0
 802531c:	461a      	mov	r2, r3
 802531e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8025322:	429a      	cmp	r2, r3
 8025324:	d10d      	bne.n	8025342 <lv_label_get_letter_on+0x11e>
 8025326:	687b      	ldr	r3, [r7, #4]
 8025328:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802532c:	f003 0304 	and.w	r3, r3, #4
 8025330:	b2db      	uxtb	r3, r3
 8025332:	2b00      	cmp	r3, #0
 8025334:	d105      	bne.n	8025342 <lv_label_get_letter_on+0x11e>
 8025336:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802533a:	f043 0304 	orr.w	r3, r3, #4
 802533e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8025342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025346:	461a      	mov	r2, r3
 8025348:	2100      	movs	r1, #0
 802534a:	6878      	ldr	r0, [r7, #4]
 802534c:	f7e7 ff89 	bl	800d262 <lv_obj_calculate_style_text_align>
 8025350:	4603      	mov	r3, r0
 8025352:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*Search the line of the index letter*/;
    while(txt[line_start] != '\0') {
 8025356:	e041      	b.n	80253dc <lv_label_get_letter_on+0x1b8>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8025358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802535a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802535c:	18d0      	adds	r0, r2, r3
 802535e:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8025362:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8025366:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802536a:	9301      	str	r3, [sp, #4]
 802536c:	2300      	movs	r3, #0
 802536e:	9300      	str	r3, [sp, #0]
 8025370:	460b      	mov	r3, r1
 8025372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8025374:	f7ff f914 	bl	80245a0 <_lv_txt_get_next_line>
 8025378:	4602      	mov	r2, r0
 802537a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802537c:	4413      	add	r3, r2
 802537e:	663b      	str	r3, [r7, #96]	; 0x60

        if(pos.y <= y + letter_height) {
 8025380:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8025384:	4619      	mov	r1, r3
 8025386:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 802538a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 802538e:	4413      	add	r3, r2
 8025390:	4299      	cmp	r1, r3
 8025392:	dc16      	bgt.n	80253c2 <lv_label_get_letter_on+0x19e>
            /*The line is found (stored in 'line_start')*/
            /*Include the NULL terminator in the last line*/
            uint32_t tmp = new_line_start;
 8025394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025396:	613b      	str	r3, [r7, #16]
            uint32_t letter;
            letter = _lv_txt_encoded_prev(txt, &tmp);
 8025398:	4b7c      	ldr	r3, [pc, #496]	; (802558c <lv_label_get_letter_on+0x368>)
 802539a:	681b      	ldr	r3, [r3, #0]
 802539c:	f107 0210 	add.w	r2, r7, #16
 80253a0:	4611      	mov	r1, r2
 80253a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80253a4:	4798      	blx	r3
 80253a6:	63b8      	str	r0, [r7, #56]	; 0x38
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 80253a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80253aa:	2b0a      	cmp	r3, #10
 80253ac:	d01d      	beq.n	80253ea <lv_label_get_letter_on+0x1c6>
 80253ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80253b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80253b2:	4413      	add	r3, r2
 80253b4:	781b      	ldrb	r3, [r3, #0]
 80253b6:	2b00      	cmp	r3, #0
 80253b8:	d117      	bne.n	80253ea <lv_label_get_letter_on+0x1c6>
 80253ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80253bc:	3301      	adds	r3, #1
 80253be:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 80253c0:	e013      	b.n	80253ea <lv_label_get_letter_on+0x1c6>
        }
        y += letter_height + line_space;
 80253c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80253c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80253c8:	4413      	add	r3, r2
 80253ca:	b29a      	uxth	r2, r3
 80253cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80253d0:	4413      	add	r3, r2
 80253d2:	b29b      	uxth	r3, r3
 80253d4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        line_start = new_line_start;
 80253d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80253da:	667b      	str	r3, [r7, #100]	; 0x64
    while(txt[line_start] != '\0') {
 80253dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80253de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80253e0:	4413      	add	r3, r2
 80253e2:	781b      	ldrb	r3, [r3, #0]
 80253e4:	2b00      	cmp	r3, #0
 80253e6:	d1b7      	bne.n	8025358 <lv_label_get_letter_on+0x134>
 80253e8:	e000      	b.n	80253ec <lv_label_get_letter_on+0x1c8>
            break;
 80253ea:	bf00      	nop
    bidi_txt = lv_mem_buf_get(new_line_start - line_start + 1);
    uint32_t txt_len = new_line_start - line_start;
    if(new_line_start > 0 && txt[new_line_start - 1] == '\0' && txt_len > 0) txt_len--;
    _lv_bidi_process_paragraph(txt + line_start, bidi_txt, txt_len, lv_obj_get_style_base_dir(obj, LV_PART_MAIN), NULL, 0);
#else
    bidi_txt = (char *)txt + line_start;
 80253ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80253ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80253f0:	4413      	add	r3, r2
 80253f2:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 80253f4:	2300      	movs	r3, #0
 80253f6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    if(align == LV_TEXT_ALIGN_CENTER) {
 80253fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80253fe:	2b02      	cmp	r3, #2
 8025400:	d12a      	bne.n	8025458 <lv_label_get_letter_on+0x234>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8025402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025406:	1ad1      	subs	r1, r2, r3
 8025408:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 802540c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8025410:	9300      	str	r3, [sp, #0]
 8025412:	4613      	mov	r3, r2
 8025414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025416:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025418:	f7ff f9a0 	bl	802475c <lv_txt_get_width>
 802541c:	4603      	mov	r3, r0
 802541e:	863b      	strh	r3, [r7, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8025420:	f107 031c 	add.w	r3, r7, #28
 8025424:	4618      	mov	r0, r3
 8025426:	f7ff fc93 	bl	8024d50 <lv_area_get_width>
 802542a:	4603      	mov	r3, r0
 802542c:	2b00      	cmp	r3, #0
 802542e:	da00      	bge.n	8025432 <lv_label_get_letter_on+0x20e>
 8025430:	3301      	adds	r3, #1
 8025432:	105b      	asrs	r3, r3, #1
 8025434:	b21b      	sxth	r3, r3
 8025436:	461a      	mov	r2, r3
 8025438:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 802543c:	2b00      	cmp	r3, #0
 802543e:	da00      	bge.n	8025442 <lv_label_get_letter_on+0x21e>
 8025440:	3301      	adds	r3, #1
 8025442:	105b      	asrs	r3, r3, #1
 8025444:	b21b      	sxth	r3, r3
 8025446:	1ad3      	subs	r3, r2, r3
 8025448:	b29a      	uxth	r2, r3
 802544a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 802544e:	4413      	add	r3, r2
 8025450:	b29b      	uxth	r3, r3
 8025452:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8025456:	e023      	b.n	80254a0 <lv_label_get_letter_on+0x27c>
    }
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8025458:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 802545c:	2b03      	cmp	r3, #3
 802545e:	d11f      	bne.n	80254a0 <lv_label_get_letter_on+0x27c>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8025460:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025464:	1ad1      	subs	r1, r2, r3
 8025466:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 802546a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802546e:	9300      	str	r3, [sp, #0]
 8025470:	4613      	mov	r3, r2
 8025472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025474:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025476:	f7ff f971 	bl	802475c <lv_txt_get_width>
 802547a:	4603      	mov	r3, r0
 802547c:	867b      	strh	r3, [r7, #50]	; 0x32
        x += lv_area_get_width(&txt_coords) - line_w;
 802547e:	f107 031c 	add.w	r3, r7, #28
 8025482:	4618      	mov	r0, r3
 8025484:	f7ff fc64 	bl	8024d50 <lv_area_get_width>
 8025488:	4603      	mov	r3, r0
 802548a:	461a      	mov	r2, r3
 802548c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8025490:	1ad3      	subs	r3, r2, r3
 8025492:	b29a      	uxth	r2, r3
 8025494:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8025498:	4413      	add	r3, r2
 802549a:	b29b      	uxth	r3, r3
 802549c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    }

    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80254a0:	2300      	movs	r3, #0
 80254a2:	76fb      	strb	r3, [r7, #27]

    uint32_t i = 0;
 80254a4:	2300      	movs	r3, #0
 80254a6:	617b      	str	r3, [r7, #20]
    uint32_t i_act = i;
 80254a8:	697b      	ldr	r3, [r7, #20]
 80254aa:	657b      	str	r3, [r7, #84]	; 0x54

    if(new_line_start > 0) {
 80254ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80254ae:	2b00      	cmp	r3, #0
 80254b0:	d058      	beq.n	8025564 <lv_label_get_letter_on+0x340>
        while(i + line_start < new_line_start) {
 80254b2:	e051      	b.n	8025558 <lv_label_get_letter_on+0x334>
            /*Get the current letter and the next letter for kerning*/
            /*Be careful 'i' already points to the next character*/
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 80254b4:	f107 0314 	add.w	r3, r7, #20
 80254b8:	f107 0208 	add.w	r2, r7, #8
 80254bc:	f107 010c 	add.w	r1, r7, #12
 80254c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80254c2:	f7ff f9e9 	bl	8024898 <_lv_txt_encoded_letter_next_2>

            /*Handle the recolor command*/
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80254c6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80254ca:	f003 0301 	and.w	r3, r3, #1
 80254ce:	2b00      	cmp	r3, #0
 80254d0:	d00e      	beq.n	80254f0 <lv_label_get_letter_on+0x2cc>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 80254d2:	697b      	ldr	r3, [r7, #20]
 80254d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80254d6:	4413      	add	r3, r2
 80254d8:	781b      	ldrb	r3, [r3, #0]
 80254da:	461a      	mov	r2, r3
 80254dc:	f107 031b 	add.w	r3, r7, #27
 80254e0:	4611      	mov	r1, r2
 80254e2:	4618      	mov	r0, r3
 80254e4:	f7ff f99e 	bl	8024824 <_lv_txt_is_cmd>
 80254e8:	4603      	mov	r3, r0
 80254ea:	2b00      	cmp	r3, #0
 80254ec:	d000      	beq.n	80254f0 <lv_label_get_letter_on+0x2cc>
 80254ee:	e033      	b.n	8025558 <lv_label_get_letter_on+0x334>
                    continue; /*Skip the letter if it is part of a command*/
                }
            }

            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 80254f0:	68fb      	ldr	r3, [r7, #12]
 80254f2:	68ba      	ldr	r2, [r7, #8]
 80254f4:	4619      	mov	r1, r3
 80254f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80254f8:	f7f9 ff7a 	bl	801f3f0 <lv_font_get_glyph_width>
 80254fc:	4603      	mov	r3, r0
 80254fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /*Finish if the x position or the last char of the next line is reached*/
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8025500:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8025504:	4619      	mov	r1, r3
 8025506:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 802550a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 802550e:	4413      	add	r3, r2
 8025510:	4299      	cmp	r1, r3
 8025512:	db0d      	blt.n	8025530 <lv_label_get_letter_on+0x30c>
 8025514:	697a      	ldr	r2, [r7, #20]
 8025516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025518:	4413      	add	r3, r2
 802551a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802551c:	429a      	cmp	r2, r3
 802551e:	d007      	beq.n	8025530 <lv_label_get_letter_on+0x30c>
 8025520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025524:	4413      	add	r3, r2
 8025526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025528:	4413      	add	r3, r2
 802552a:	781b      	ldrb	r3, [r3, #0]
 802552c:	2b00      	cmp	r3, #0
 802552e:	d102      	bne.n	8025536 <lv_label_get_letter_on+0x312>
                i = i_act;
 8025530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025532:	617b      	str	r3, [r7, #20]
 8025534:	e016      	b.n	8025564 <lv_label_get_letter_on+0x340>
                break;
            }
            x += gw;
 8025536:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 802553a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802553c:	4413      	add	r3, r2
 802553e:	b29b      	uxth	r3, r3
 8025540:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            x += letter_space;
 8025544:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8025548:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802554c:	4413      	add	r3, r2
 802554e:	b29b      	uxth	r3, r3
 8025550:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            i_act = i;
 8025554:	697b      	ldr	r3, [r7, #20]
 8025556:	657b      	str	r3, [r7, #84]	; 0x54
        while(i + line_start < new_line_start) {
 8025558:	697a      	ldr	r2, [r7, #20]
 802555a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802555c:	4413      	add	r3, r2
 802555e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025560:	429a      	cmp	r2, r3
 8025562:	d8a7      	bhi.n	80254b4 <lv_label_get_letter_on+0x290>
                                               txt_len, lv_obj_get_style_base_dir(obj, LV_PART_MAIN), cid, &is_rtl);
        if(is_rtl) logical_pos++;
    }
    lv_mem_buf_release(bidi_txt);
#else
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 8025564:	4b0a      	ldr	r3, [pc, #40]	; (8025590 <lv_label_get_letter_on+0x36c>)
 8025566:	681b      	ldr	r3, [r3, #0]
 8025568:	697a      	ldr	r2, [r7, #20]
 802556a:	4611      	mov	r1, r2
 802556c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802556e:	4798      	blx	r3
 8025570:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 8025572:	4b07      	ldr	r3, [pc, #28]	; (8025590 <lv_label_get_letter_on+0x36c>)
 8025574:	681b      	ldr	r3, [r3, #0]
 8025576:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8025578:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802557a:	4798      	blx	r3
 802557c:	4602      	mov	r2, r0
 802557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025580:	4413      	add	r3, r2
}
 8025582:	4618      	mov	r0, r3
 8025584:	376c      	adds	r7, #108	; 0x6c
 8025586:	46bd      	mov	sp, r7
 8025588:	bd90      	pop	{r4, r7, pc}
 802558a:	bf00      	nop
 802558c:	20000020 	.word	0x20000020
 8025590:	20000028 	.word	0x20000028

08025594 <lv_label_get_text_selection_start>:
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
}

uint32_t lv_label_get_text_selection_start(const lv_obj_t * obj)
{
 8025594:	b480      	push	{r7}
 8025596:	b085      	sub	sp, #20
 8025598:	af00      	add	r7, sp, #0
 802559a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

#if LV_LABEL_TEXT_SELECTION
    lv_label_t * label = (lv_label_t *)obj;
 802559c:	687b      	ldr	r3, [r7, #4]
 802559e:	60fb      	str	r3, [r7, #12]
    return label->sel_start;
 80255a0:	68fb      	ldr	r3, [r7, #12]
 80255a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

#else
    LV_UNUSED(obj); /*Unused*/
    return LV_LABEL_TEXT_SELECTION_OFF;
#endif
}
 80255a4:	4618      	mov	r0, r3
 80255a6:	3714      	adds	r7, #20
 80255a8:	46bd      	mov	sp, r7
 80255aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255ae:	4770      	bx	lr

080255b0 <lv_label_get_text_selection_end>:

uint32_t lv_label_get_text_selection_end(const lv_obj_t * obj)
{
 80255b0:	b480      	push	{r7}
 80255b2:	b085      	sub	sp, #20
 80255b4:	af00      	add	r7, sp, #0
 80255b6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

#if LV_LABEL_TEXT_SELECTION
    lv_label_t * label = (lv_label_t *)obj;
 80255b8:	687b      	ldr	r3, [r7, #4]
 80255ba:	60fb      	str	r3, [r7, #12]
    return label->sel_end;
 80255bc:	68fb      	ldr	r3, [r7, #12]
 80255be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#else
    LV_UNUSED(obj); /*Unused*/
    return LV_LABEL_TEXT_SELECTION_OFF;
#endif
}
 80255c0:	4618      	mov	r0, r3
 80255c2:	3714      	adds	r7, #20
 80255c4:	46bd      	mov	sp, r7
 80255c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255ca:	4770      	bx	lr

080255cc <lv_label_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_label_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80255cc:	b580      	push	{r7, lr}
 80255ce:	b084      	sub	sp, #16
 80255d0:	af00      	add	r7, sp, #0
 80255d2:	6078      	str	r0, [r7, #4]
 80255d4:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_label_t * label = (lv_label_t *)obj;
 80255d6:	683b      	ldr	r3, [r7, #0]
 80255d8:	60fb      	str	r3, [r7, #12]

    label->text       = NULL;
 80255da:	68fb      	ldr	r3, [r7, #12]
 80255dc:	2200      	movs	r2, #0
 80255de:	625a      	str	r2, [r3, #36]	; 0x24
    label->static_txt = 0;
 80255e0:	68fa      	ldr	r2, [r7, #12]
 80255e2:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80255e6:	f36f 03c3 	bfc	r3, #3, #1
 80255ea:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->recolor    = 0;
 80255ee:	68fa      	ldr	r2, [r7, #12]
 80255f0:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80255f4:	f36f 1304 	bfc	r3, #4, #1
 80255f8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
 80255fc:	68fb      	ldr	r3, [r7, #12]
 80255fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025602:	62da      	str	r2, [r3, #44]	; 0x2c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 8025604:	68fa      	ldr	r2, [r7, #12]
 8025606:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 802560a:	f36f 0302 	bfc	r3, #0, #3
 802560e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->offset.x = 0;
 8025612:	68fb      	ldr	r3, [r7, #12]
 8025614:	2200      	movs	r2, #0
 8025616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    label->offset.y = 0;
 802561a:	68fb      	ldr	r3, [r7, #12]
 802561c:	2200      	movs	r2, #0
 802561e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if LV_LABEL_LONG_TXT_HINT
    label->hint.line_start = -1;
 8025622:	68fb      	ldr	r3, [r7, #12]
 8025624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025628:	631a      	str	r2, [r3, #48]	; 0x30
    label->hint.coord_y    = 0;
 802562a:	68fb      	ldr	r3, [r7, #12]
 802562c:	2200      	movs	r2, #0
 802562e:	639a      	str	r2, [r3, #56]	; 0x38
    label->hint.y          = 0;
 8025630:	68fb      	ldr	r3, [r7, #12]
 8025632:	2200      	movs	r2, #0
 8025634:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if LV_LABEL_TEXT_SELECTION
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8025636:	68fb      	ldr	r3, [r7, #12]
 8025638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802563c:	63da      	str	r2, [r3, #60]	; 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 802563e:	68fb      	ldr	r3, [r7, #12]
 8025640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025644:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    label->dot.tmp_ptr   = NULL;
 8025646:	68fb      	ldr	r3, [r7, #12]
 8025648:	2200      	movs	r2, #0
 802564a:	629a      	str	r2, [r3, #40]	; 0x28
    label->dot_tmp_alloc = 0;
 802564c:	68fa      	ldr	r2, [r7, #12]
 802564e:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025652:	f36f 1386 	bfc	r3, #6, #1
 8025656:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 802565a:	2102      	movs	r1, #2
 802565c:	6838      	ldr	r0, [r7, #0]
 802565e:	f7e0 fbc3 	bl	8005de8 <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 8025662:	2100      	movs	r1, #0
 8025664:	6838      	ldr	r0, [r7, #0]
 8025666:	f7ff fd79 	bl	802515c <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 802566a:	4904      	ldr	r1, [pc, #16]	; (802567c <lv_label_constructor+0xb0>)
 802566c:	6838      	ldr	r0, [r7, #0]
 802566e:	f7ff fcff 	bl	8025070 <lv_label_set_text>


    LV_TRACE_OBJ_CREATE("finished");
}
 8025672:	bf00      	nop
 8025674:	3710      	adds	r7, #16
 8025676:	46bd      	mov	sp, r7
 8025678:	bd80      	pop	{r7, pc}
 802567a:	bf00      	nop
 802567c:	080267a4 	.word	0x080267a4

08025680 <lv_label_destructor>:

static void lv_label_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8025680:	b580      	push	{r7, lr}
 8025682:	b084      	sub	sp, #16
 8025684:	af00      	add	r7, sp, #0
 8025686:	6078      	str	r0, [r7, #4]
 8025688:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    lv_label_t * label = (lv_label_t *)obj;
 802568a:	683b      	ldr	r3, [r7, #0]
 802568c:	60fb      	str	r3, [r7, #12]

    lv_label_dot_tmp_free(obj);
 802568e:	6838      	ldr	r0, [r7, #0]
 8025690:	f000 ffd1 	bl	8026636 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8025694:	68fb      	ldr	r3, [r7, #12]
 8025696:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802569a:	f003 0308 	and.w	r3, r3, #8
 802569e:	b2db      	uxtb	r3, r3
 80256a0:	2b00      	cmp	r3, #0
 80256a2:	d104      	bne.n	80256ae <lv_label_destructor+0x2e>
 80256a4:	68fb      	ldr	r3, [r7, #12]
 80256a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80256a8:	4618      	mov	r0, r3
 80256aa:	f7fc fb8b 	bl	8021dc4 <lv_mem_free>
    label->text = NULL;
 80256ae:	68fb      	ldr	r3, [r7, #12]
 80256b0:	2200      	movs	r2, #0
 80256b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80256b4:	bf00      	nop
 80256b6:	3710      	adds	r7, #16
 80256b8:	46bd      	mov	sp, r7
 80256ba:	bd80      	pop	{r7, pc}

080256bc <lv_label_event>:

static void lv_label_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80256bc:	b580      	push	{r7, lr}
 80256be:	b090      	sub	sp, #64	; 0x40
 80256c0:	af04      	add	r7, sp, #16
 80256c2:	6078      	str	r0, [r7, #4]
 80256c4:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 80256c6:	6839      	ldr	r1, [r7, #0]
 80256c8:	486a      	ldr	r0, [pc, #424]	; (8025874 <lv_label_event+0x1b8>)
 80256ca:	f7df fa87 	bl	8004bdc <lv_obj_event_base>
 80256ce:	4603      	mov	r3, r0
 80256d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(res != LV_RES_OK) return;
 80256d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80256d8:	2b01      	cmp	r3, #1
 80256da:	f040 80c6 	bne.w	802586a <lv_label_event+0x1ae>

    lv_event_code_t code = lv_event_get_code(e);
 80256de:	6838      	ldr	r0, [r7, #0]
 80256e0:	f7df fad2 	bl	8004c88 <lv_event_get_code>
 80256e4:	4603      	mov	r3, r0
 80256e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 80256ea:	6838      	ldr	r0, [r7, #0]
 80256ec:	f7df fab4 	bl	8004c58 <lv_event_get_target>
 80256f0:	6278      	str	r0, [r7, #36]	; 0x24

    if(code == LV_EVENT_STYLE_CHANGED) {
 80256f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80256f6:	2b2a      	cmp	r3, #42	; 0x2a
 80256f8:	d106      	bne.n	8025708 <lv_label_event+0x4c>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(obj);
 80256fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80256fc:	f000 fee6 	bl	80264cc <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8025700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025702:	f000 fa87 	bl	8025c14 <lv_label_refr_text>
 8025706:	e0b1      	b.n	802586c <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8025708:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 802570c:	2b13      	cmp	r3, #19
 802570e:	d115      	bne.n	802573c <lv_label_event+0x80>
        /* Italic or other non-typical letters can be drawn of out of the object.
         * It happens if box_w + ofs_x > adw_w in the glyph.
         * To avoid this add some extra draw area.
         * font_h / 4 is an empirical value. */
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8025710:	2100      	movs	r1, #0
 8025712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025714:	f7ff fc41 	bl	8024f9a <lv_obj_get_style_text_font>
 8025718:	6138      	str	r0, [r7, #16]
        lv_coord_t font_h = lv_font_get_line_height(font);
 802571a:	6938      	ldr	r0, [r7, #16]
 802571c:	f7ff fb46 	bl	8024dac <lv_font_get_line_height>
 8025720:	4603      	mov	r3, r0
 8025722:	81fb      	strh	r3, [r7, #14]
        lv_event_set_ext_draw_size(e, font_h / 4);
 8025724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8025728:	2b00      	cmp	r3, #0
 802572a:	da00      	bge.n	802572e <lv_label_event+0x72>
 802572c:	3303      	adds	r3, #3
 802572e:	109b      	asrs	r3, r3, #2
 8025730:	b21b      	sxth	r3, r3
 8025732:	4619      	mov	r1, r3
 8025734:	6838      	ldr	r0, [r7, #0]
 8025736:	f7df fb5d 	bl	8004df4 <lv_event_set_ext_draw_size>
 802573a:	e097      	b.n	802586c <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 802573c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8025740:	2b29      	cmp	r3, #41	; 0x29
 8025742:	d106      	bne.n	8025752 <lv_label_event+0x96>
        lv_label_revert_dots(obj);
 8025744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025746:	f000 fec1 	bl	80264cc <lv_label_revert_dots>
        lv_label_refr_text(obj);
 802574a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802574c:	f000 fa62 	bl	8025c14 <lv_label_refr_text>
 8025750:	e08c      	b.n	802586c <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8025752:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8025756:	2b2c      	cmp	r3, #44	; 0x2c
 8025758:	d17f      	bne.n	802585a <lv_label_event+0x19e>
        lv_point_t size;
        lv_label_t * label = (lv_label_t *)obj;
 802575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802575c:	623b      	str	r3, [r7, #32]
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802575e:	2100      	movs	r1, #0
 8025760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025762:	f7ff fc1a 	bl	8024f9a <lv_obj_get_style_text_font>
 8025766:	61f8      	str	r0, [r7, #28]
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8025768:	2100      	movs	r1, #0
 802576a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802576c:	f7ff fc26 	bl	8024fbc <lv_obj_get_style_text_letter_space>
 8025770:	4603      	mov	r3, r0
 8025772:	837b      	strh	r3, [r7, #26]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8025774:	2100      	movs	r1, #0
 8025776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025778:	f7ff fc32 	bl	8024fe0 <lv_obj_get_style_text_line_space>
 802577c:	4603      	mov	r3, r0
 802577e:	833b      	strh	r3, [r7, #24]
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8025780:	2300      	movs	r3, #0
 8025782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8025786:	6a3b      	ldr	r3, [r7, #32]
 8025788:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802578c:	f003 0310 	and.w	r3, r3, #16
 8025790:	b2db      	uxtb	r3, r3
 8025792:	2b00      	cmp	r3, #0
 8025794:	d005      	beq.n	80257a2 <lv_label_event+0xe6>
 8025796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802579a:	f043 0301 	orr.w	r3, r3, #1
 802579e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80257a2:	6a3b      	ldr	r3, [r7, #32]
 80257a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80257a8:	f003 0320 	and.w	r3, r3, #32
 80257ac:	b2db      	uxtb	r3, r3
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	d005      	beq.n	80257be <lv_label_event+0x102>
 80257b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80257b6:	f043 0302 	orr.w	r3, r3, #2
 80257ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        lv_coord_t w = lv_obj_get_content_width(obj);
 80257be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80257c0:	f7e3 f9d1 	bl	8008b66 <lv_obj_get_content_width>
 80257c4:	4603      	mov	r3, r0
 80257c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 80257c8:	2100      	movs	r1, #0
 80257ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80257cc:	f7ff fb87 	bl	8024ede <lv_obj_get_style_width>
 80257d0:	4603      	mov	r3, r0
 80257d2:	461a      	mov	r2, r3
 80257d4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80257d8:	429a      	cmp	r2, r3
 80257da:	d10b      	bne.n	80257f4 <lv_label_event+0x138>
 80257dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80257de:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80257e2:	f003 0304 	and.w	r3, r3, #4
 80257e6:	b2db      	uxtb	r3, r3
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	d103      	bne.n	80257f4 <lv_label_event+0x138>
 80257ec:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80257f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80257f2:	e004      	b.n	80257fe <lv_label_event+0x142>
        else w = lv_obj_get_content_width(obj);
 80257f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80257f6:	f7e3 f9b6 	bl	8008b66 <lv_obj_get_content_width>
 80257fa:	4603      	mov	r3, r0
 80257fc:	85bb      	strh	r3, [r7, #44]	; 0x2c

        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 80257fe:	6a3b      	ldr	r3, [r7, #32]
 8025800:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025802:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8025806:	f107 0008 	add.w	r0, r7, #8
 802580a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802580e:	9302      	str	r3, [sp, #8]
 8025810:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8025814:	9301      	str	r3, [sp, #4]
 8025816:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 802581a:	9300      	str	r3, [sp, #0]
 802581c:	4613      	mov	r3, r2
 802581e:	69fa      	ldr	r2, [r7, #28]
 8025820:	f7fe fd22 	bl	8024268 <lv_txt_get_size>

        lv_point_t * self_size = lv_event_get_param(e);
 8025824:	6838      	ldr	r0, [r7, #0]
 8025826:	f7df fa3e 	bl	8004ca6 <lv_event_get_param>
 802582a:	6178      	str	r0, [r7, #20]
        self_size->x = LV_MAX(self_size->x, size.x);
 802582c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8025830:	697b      	ldr	r3, [r7, #20]
 8025832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025836:	4293      	cmp	r3, r2
 8025838:	bfb8      	it	lt
 802583a:	4613      	movlt	r3, r2
 802583c:	b21a      	sxth	r2, r3
 802583e:	697b      	ldr	r3, [r7, #20]
 8025840:	801a      	strh	r2, [r3, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8025842:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8025846:	697b      	ldr	r3, [r7, #20]
 8025848:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802584c:	4293      	cmp	r3, r2
 802584e:	bfb8      	it	lt
 8025850:	4613      	movlt	r3, r2
 8025852:	b21a      	sxth	r2, r3
 8025854:	697b      	ldr	r3, [r7, #20]
 8025856:	805a      	strh	r2, [r3, #2]
 8025858:	e008      	b.n	802586c <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 802585a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 802585e:	2b15      	cmp	r3, #21
 8025860:	d104      	bne.n	802586c <lv_label_event+0x1b0>
        draw_main(e);
 8025862:	6838      	ldr	r0, [r7, #0]
 8025864:	f000 f808 	bl	8025878 <draw_main>
 8025868:	e000      	b.n	802586c <lv_label_event+0x1b0>
    if(res != LV_RES_OK) return;
 802586a:	bf00      	nop
    }
}
 802586c:	3730      	adds	r7, #48	; 0x30
 802586e:	46bd      	mov	sp, r7
 8025870:	bd80      	pop	{r7, pc}
 8025872:	bf00      	nop
 8025874:	0802dfbc 	.word	0x0802dfbc

08025878 <draw_main>:


static void draw_main(lv_event_t * e)
{
 8025878:	b5b0      	push	{r4, r5, r7, lr}
 802587a:	b09c      	sub	sp, #112	; 0x70
 802587c:	af04      	add	r7, sp, #16
 802587e:	6078      	str	r0, [r7, #4]
    lv_obj_t * obj = lv_event_get_target(e);
 8025880:	6878      	ldr	r0, [r7, #4]
 8025882:	f7df f9e9 	bl	8004c58 <lv_event_get_target>
 8025886:	6578      	str	r0, [r7, #84]	; 0x54
    lv_label_t * label = (lv_label_t *)obj;
 8025888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802588a:	653b      	str	r3, [r7, #80]	; 0x50
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802588c:	6878      	ldr	r0, [r7, #4]
 802588e:	f7df fa8b 	bl	8004da8 <lv_event_get_draw_ctx>
 8025892:	64f8      	str	r0, [r7, #76]	; 0x4c

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8025894:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025898:	4619      	mov	r1, r3
 802589a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802589c:	f7e3 f9b9 	bl	8008c12 <lv_obj_get_content_coords>

    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 80258a0:	2300      	movs	r3, #0
 80258a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80258a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80258a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80258ac:	f003 0310 	and.w	r3, r3, #16
 80258b0:	b2db      	uxtb	r3, r3
 80258b2:	2b00      	cmp	r3, #0
 80258b4:	d005      	beq.n	80258c2 <draw_main+0x4a>
 80258b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80258ba:	f043 0301 	orr.w	r3, r3, #1
 80258be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80258c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80258c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80258c8:	f003 0320 	and.w	r3, r3, #32
 80258cc:	b2db      	uxtb	r3, r3
 80258ce:	2b00      	cmp	r3, #0
 80258d0:	d005      	beq.n	80258de <draw_main+0x66>
 80258d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80258d6:	f043 0302 	orr.w	r3, r3, #2
 80258da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80258de:	2100      	movs	r1, #0
 80258e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80258e2:	f7ff fafc 	bl	8024ede <lv_obj_get_style_width>
 80258e6:	4603      	mov	r3, r0
 80258e8:	461a      	mov	r2, r3
 80258ea:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80258ee:	429a      	cmp	r2, r3
 80258f0:	d10d      	bne.n	802590e <draw_main+0x96>
 80258f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80258f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80258f8:	f003 0304 	and.w	r3, r3, #4
 80258fc:	b2db      	uxtb	r3, r3
 80258fe:	2b00      	cmp	r3, #0
 8025900:	d105      	bne.n	802590e <draw_main+0x96>
 8025902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025906:	f043 0304 	orr.w	r3, r3, #4
 802590a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_label_dsc_t label_draw_dsc;
    lv_draw_label_dsc_init(&label_draw_dsc);
 802590e:	f107 0318 	add.w	r3, r7, #24
 8025912:	4618      	mov	r0, r3
 8025914:	f7ea ffcc 	bl	80108b0 <lv_draw_label_dsc_init>

    label_draw_dsc.ofs_x = label->offset.x;
 8025918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802591a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 802591e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    label_draw_dsc.ofs_y = label->offset.y;
 8025920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025922:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8025926:	85fb      	strh	r3, [r7, #46]	; 0x2e

    label_draw_dsc.flag = flag;
 8025928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802592c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8025930:	f107 0318 	add.w	r3, r7, #24
 8025934:	461a      	mov	r2, r3
 8025936:	2100      	movs	r1, #0
 8025938:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802593a:	f7e2 fa6a 	bl	8007e12 <lv_obj_init_draw_label_dsc>
    lv_bidi_calculate_align(&label_draw_dsc.align, &label_draw_dsc.bidi_dir, label->text);
 802593e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025942:	f107 0318 	add.w	r3, r7, #24
 8025946:	f103 0119 	add.w	r1, r3, #25
 802594a:	f107 0318 	add.w	r3, r7, #24
 802594e:	331a      	adds	r3, #26
 8025950:	4618      	mov	r0, r3
 8025952:	f7ff fab1 	bl	8024eb8 <lv_bidi_calculate_align>

    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8025956:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025958:	f7ff fe1c 	bl	8025594 <lv_label_get_text_selection_start>
 802595c:	4603      	mov	r3, r0
 802595e:	61fb      	str	r3, [r7, #28]
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8025960:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025962:	f7ff fe25 	bl	80255b0 <lv_label_get_text_selection_end>
 8025966:	4603      	mov	r3, r0
 8025968:	623b      	str	r3, [r7, #32]
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 802596a:	69fb      	ldr	r3, [r7, #28]
 802596c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025970:	4293      	cmp	r3, r2
 8025972:	d012      	beq.n	802599a <draw_main+0x122>
 8025974:	6a3b      	ldr	r3, [r7, #32]
 8025976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802597a:	4293      	cmp	r3, r2
 802597c:	d00d      	beq.n	802599a <draw_main+0x122>
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 802597e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8025982:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025984:	f7ff faf2 	bl	8024f6c <lv_obj_get_style_text_color_filtered>
 8025988:	f887 0025 	strb.w	r0, [r7, #37]	; 0x25
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 802598c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8025990:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025992:	f7ff fada 	bl	8024f4a <lv_obj_get_style_bg_color>
 8025996:	f887 0026 	strb.w	r0, [r7, #38]	; 0x26
    }

    /* In SCROLL and SCROLL_CIRCULAR mode the CENTER and RIGHT are pointless, so remove them.
     * (In addition, they will create misalignment in this situation)*/
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 802599a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802599c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80259a0:	f003 0307 	and.w	r3, r3, #7
 80259a4:	b2db      	uxtb	r3, r3
 80259a6:	2b02      	cmp	r3, #2
 80259a8:	d007      	beq.n	80259ba <draw_main+0x142>
 80259aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80259ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80259b0:	f003 0307 	and.w	r3, r3, #7
 80259b4:	b2db      	uxtb	r3, r3
 80259b6:	2b03      	cmp	r3, #3
 80259b8:	d128      	bne.n	8025a0c <draw_main+0x194>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 80259ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 80259be:	2b02      	cmp	r3, #2
 80259c0:	d003      	beq.n	80259ca <draw_main+0x152>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 80259c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80259c6:	2b03      	cmp	r3, #3
 80259c8:	d120      	bne.n	8025a0c <draw_main+0x194>
        lv_point_t size;
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 80259ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80259cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80259ce:	69bc      	ldr	r4, [r7, #24]
 80259d0:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 80259d4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80259d8:	f107 000c 	add.w	r0, r7, #12
 80259dc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80259e0:	9202      	str	r2, [sp, #8]
 80259e2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80259e6:	9201      	str	r2, [sp, #4]
 80259e8:	9300      	str	r3, [sp, #0]
 80259ea:	462b      	mov	r3, r5
 80259ec:	4622      	mov	r2, r4
 80259ee:	f7fe fc3b 	bl	8024268 <lv_txt_get_size>
                        LV_COORD_MAX, flag);
        if(size.x > lv_area_get_width(&txt_coords)) {
 80259f2:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
 80259f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80259fa:	4618      	mov	r0, r3
 80259fc:	f7ff f9a8 	bl	8024d50 <lv_area_get_width>
 8025a00:	4603      	mov	r3, r0
 8025a02:	429c      	cmp	r4, r3
 8025a04:	dd02      	ble.n	8025a0c <draw_main+0x194>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8025a06:	2301      	movs	r3, #1
 8025a08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }
    }
#if LV_LABEL_LONG_TXT_HINT
    lv_draw_label_hint_t * hint = &label->hint;
 8025a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a0e:	3330      	adds	r3, #48	; 0x30
 8025a10:	65bb      	str	r3, [r7, #88]	; 0x58
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8025a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025a18:	f003 0307 	and.w	r3, r3, #7
 8025a1c:	b2db      	uxtb	r3, r3
 8025a1e:	2b03      	cmp	r3, #3
 8025a20:	d008      	beq.n	8025a34 <draw_main+0x1bc>
 8025a22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025a26:	4618      	mov	r0, r3
 8025a28:	f7ff f9a9 	bl	8024d7e <lv_area_get_height>
 8025a2c:	4603      	mov	r3, r0
 8025a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025a32:	da01      	bge.n	8025a38 <draw_main+0x1c0>
        hint = NULL;
 8025a34:	2300      	movs	r3, #0
 8025a36:	65bb      	str	r3, [r7, #88]	; 0x58
    /*Just for compatibility*/
    lv_draw_label_hint_t * hint = NULL;
#endif

    lv_area_t txt_clip;
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8025a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025a3a:	689a      	ldr	r2, [r3, #8]
 8025a3c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8025a40:	f107 0310 	add.w	r3, r7, #16
 8025a44:	4618      	mov	r0, r3
 8025a46:	f7fa fe6d 	bl	8020724 <_lv_area_intersect>
 8025a4a:	4603      	mov	r3, r0
 8025a4c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if(!is_common) return;
 8025a50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8025a54:	f083 0301 	eor.w	r3, r3, #1
 8025a58:	b2db      	uxtb	r3, r3
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	f040 80d6 	bne.w	8025c0c <draw_main+0x394>

    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8025a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025a66:	f003 0307 	and.w	r3, r3, #7
 8025a6a:	b2db      	uxtb	r3, r3
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	d114      	bne.n	8025a9a <draw_main+0x222>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8025a70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025a72:	f7e4 fd57 	bl	800a524 <lv_obj_get_scroll_top>
 8025a76:	4603      	mov	r3, r0
 8025a78:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        lv_area_move(&txt_coords, 0, -s);
 8025a7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8025a80:	425b      	negs	r3, r3
 8025a82:	b29b      	uxth	r3, r3
 8025a84:	b21a      	sxth	r2, r3
 8025a86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025a8a:	2100      	movs	r1, #0
 8025a8c:	4618      	mov	r0, r3
 8025a8e:	f7fa fe13 	bl	80206b8 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8025a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025a94:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8025a98:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025aa0:	f003 0307 	and.w	r3, r3, #7
 8025aa4:	b2db      	uxtb	r3, r3
 8025aa6:	2b02      	cmp	r3, #2
 8025aa8:	d007      	beq.n	8025aba <draw_main+0x242>
 8025aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025aac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025ab0:	f003 0307 	and.w	r3, r3, #7
 8025ab4:	b2db      	uxtb	r3, r3
 8025ab6:	2b03      	cmp	r3, #3
 8025ab8:	d116      	bne.n	8025ae8 <draw_main+0x270>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8025aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025abc:	689b      	ldr	r3, [r3, #8]
 8025abe:	647b      	str	r3, [r7, #68]	; 0x44
        draw_ctx->clip_area = &txt_clip;
 8025ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025ac2:	f107 0210 	add.w	r2, r7, #16
 8025ac6:	609a      	str	r2, [r3, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025aca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025acc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025ad0:	f107 0118 	add.w	r1, r7, #24
 8025ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025ad6:	9300      	str	r3, [sp, #0]
 8025ad8:	4603      	mov	r3, r0
 8025ada:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025adc:	f7ea ff14 	bl	8010908 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8025ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025ae4:	609a      	str	r2, [r3, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025ae6:	e00b      	b.n	8025b00 <draw_main+0x288>
    }
    else {
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025aea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025aec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025af0:	f107 0118 	add.w	r1, r7, #24
 8025af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025af6:	9300      	str	r3, [sp, #0]
 8025af8:	4603      	mov	r3, r0
 8025afa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025afc:	f7ea ff04 	bl	8010908 <lv_draw_label>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8025b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025b02:	689b      	ldr	r3, [r3, #8]
 8025b04:	643b      	str	r3, [r7, #64]	; 0x40
    draw_ctx->clip_area = &txt_clip;
 8025b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025b08:	f107 0210 	add.w	r2, r7, #16
 8025b0c:	609a      	str	r2, [r3, #8]

    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025b14:	f003 0307 	and.w	r3, r3, #7
 8025b18:	b2db      	uxtb	r3, r3
 8025b1a:	2b03      	cmp	r3, #3
 8025b1c:	d172      	bne.n	8025c04 <draw_main+0x38c>
        lv_point_t size;
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8025b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025b22:	69bc      	ldr	r4, [r7, #24]
 8025b24:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 8025b28:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8025b2c:	f107 0008 	add.w	r0, r7, #8
 8025b30:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8025b34:	9202      	str	r2, [sp, #8]
 8025b36:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8025b3a:	9201      	str	r2, [sp, #4]
 8025b3c:	9300      	str	r3, [sp, #0]
 8025b3e:	462b      	mov	r3, r5
 8025b40:	4622      	mov	r2, r4
 8025b42:	f7fe fb91 	bl	8024268 <lv_txt_get_size>
                        LV_COORD_MAX, flag);

        /*Draw the text again on label to the original to make a circular effect */
        if(size.x > lv_area_get_width(&txt_coords)) {
 8025b46:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 8025b4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025b4e:	4618      	mov	r0, r3
 8025b50:	f7ff f8fe 	bl	8024d50 <lv_area_get_width>
 8025b54:	4603      	mov	r3, r0
 8025b56:	429c      	cmp	r4, r3
 8025b58:	dd27      	ble.n	8025baa <draw_main+0x332>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8025b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b5c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8025b60:	b29a      	uxth	r2, r3
 8025b62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8025b66:	b29b      	uxth	r3, r3
 8025b68:	4413      	add	r3, r2
 8025b6a:	b29c      	uxth	r4, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8025b6c:	69bb      	ldr	r3, [r7, #24]
 8025b6e:	2220      	movs	r2, #32
 8025b70:	2120      	movs	r1, #32
 8025b72:	4618      	mov	r0, r3
 8025b74:	f7f9 fc3c 	bl	801f3f0 <lv_font_get_glyph_width>
 8025b78:	4603      	mov	r3, r0
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8025b7a:	461a      	mov	r2, r3
 8025b7c:	0052      	lsls	r2, r2, #1
 8025b7e:	4413      	add	r3, r2
 8025b80:	b29b      	uxth	r3, r3
 8025b82:	4423      	add	r3, r4
 8025b84:	b29b      	uxth	r3, r3
 8025b86:	b21b      	sxth	r3, r3
 8025b88:	85bb      	strh	r3, [r7, #44]	; 0x2c
            label_draw_dsc.ofs_y = label->offset.y;
 8025b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b8c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8025b90:	85fb      	strh	r3, [r7, #46]	; 0x2e

            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025b96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025b9a:	f107 0118 	add.w	r1, r7, #24
 8025b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025ba0:	9300      	str	r3, [sp, #0]
 8025ba2:	4603      	mov	r3, r0
 8025ba4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025ba6:	f7ea feaf 	bl	8010908 <lv_draw_label>
        }

        /*Draw the text again below the original to make a circular effect */
        if(size.y > lv_area_get_height(&txt_coords)) {
 8025baa:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8025bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025bb2:	4618      	mov	r0, r3
 8025bb4:	f7ff f8e3 	bl	8024d7e <lv_area_get_height>
 8025bb8:	4603      	mov	r3, r0
 8025bba:	429c      	cmp	r4, r3
 8025bbc:	dd22      	ble.n	8025c04 <draw_main+0x38c>
            label_draw_dsc.ofs_x = label->offset.x;
 8025bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025bc0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8025bc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8025bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025bc8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8025bcc:	b29a      	uxth	r2, r3
 8025bce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8025bd2:	b29b      	uxth	r3, r3
 8025bd4:	4413      	add	r3, r2
 8025bd6:	b29c      	uxth	r4, r3
 8025bd8:	69bb      	ldr	r3, [r7, #24]
 8025bda:	4618      	mov	r0, r3
 8025bdc:	f7ff f8e6 	bl	8024dac <lv_font_get_line_height>
 8025be0:	4603      	mov	r3, r0
 8025be2:	b29b      	uxth	r3, r3
 8025be4:	4423      	add	r3, r4
 8025be6:	b29b      	uxth	r3, r3
 8025be8:	b21b      	sxth	r3, r3
 8025bea:	85fb      	strh	r3, [r7, #46]	; 0x2e

            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025bee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025bf0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025bf4:	f107 0118 	add.w	r1, r7, #24
 8025bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025bfa:	9300      	str	r3, [sp, #0]
 8025bfc:	4603      	mov	r3, r0
 8025bfe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025c00:	f7ea fe82 	bl	8010908 <lv_draw_label>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 8025c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025c06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8025c08:	609a      	str	r2, [r3, #8]
 8025c0a:	e000      	b.n	8025c0e <draw_main+0x396>
    if(!is_common) return;
 8025c0c:	bf00      	nop
}
 8025c0e:	3760      	adds	r7, #96	; 0x60
 8025c10:	46bd      	mov	sp, r7
 8025c12:	bdb0      	pop	{r4, r5, r7, pc}

08025c14 <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * obj)
{
 8025c14:	b590      	push	{r4, r7, lr}
 8025c16:	b0b7      	sub	sp, #220	; 0xdc
 8025c18:	af04      	add	r7, sp, #16
 8025c1a:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 8025c1c:	687b      	ldr	r3, [r7, #4]
 8025c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(label->text == NULL) return;
 8025c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	f000 8442 	beq.w	80264b2 <lv_label_refr_text+0x89e>
#if LV_LABEL_LONG_TXT_HINT
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8025c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025c36:	631a      	str	r2, [r3, #48]	; 0x30
#endif

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8025c38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025c3c:	4619      	mov	r1, r3
 8025c3e:	6878      	ldr	r0, [r7, #4]
 8025c40:	f7e2 ffe7 	bl	8008c12 <lv_obj_get_content_coords>
    lv_coord_t max_w         = lv_area_get_width(&txt_coords);
 8025c44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025c48:	4618      	mov	r0, r3
 8025c4a:	f7ff f881 	bl	8024d50 <lv_area_get_width>
 8025c4e:	4603      	mov	r3, r0
 8025c50:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8025c54:	2100      	movs	r1, #0
 8025c56:	6878      	ldr	r0, [r7, #4]
 8025c58:	f7ff f99f 	bl	8024f9a <lv_obj_get_style_text_font>
 8025c5c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8025c60:	2100      	movs	r1, #0
 8025c62:	6878      	ldr	r0, [r7, #4]
 8025c64:	f7ff f9bc 	bl	8024fe0 <lv_obj_get_style_text_line_space>
 8025c68:	4603      	mov	r3, r0
 8025c6a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8025c6e:	2100      	movs	r1, #0
 8025c70:	6878      	ldr	r0, [r7, #4]
 8025c72:	f7ff f9a3 	bl	8024fbc <lv_obj_get_style_text_letter_space>
 8025c76:	4603      	mov	r3, r0
 8025c78:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8025c7c:	2300      	movs	r3, #0
 8025c7e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8025c82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025c8a:	f003 0310 	and.w	r3, r3, #16
 8025c8e:	b2db      	uxtb	r3, r3
 8025c90:	2b00      	cmp	r3, #0
 8025c92:	d005      	beq.n	8025ca0 <lv_label_refr_text+0x8c>
 8025c94:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025c98:	f043 0301 	orr.w	r3, r3, #1
 8025c9c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8025ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025ca4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025ca8:	f003 0320 	and.w	r3, r3, #32
 8025cac:	b2db      	uxtb	r3, r3
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	d005      	beq.n	8025cbe <lv_label_refr_text+0xaa>
 8025cb2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025cb6:	f043 0302 	orr.w	r3, r3, #2
 8025cba:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8025cbe:	2100      	movs	r1, #0
 8025cc0:	6878      	ldr	r0, [r7, #4]
 8025cc2:	f7ff f90c 	bl	8024ede <lv_obj_get_style_width>
 8025cc6:	4603      	mov	r3, r0
 8025cc8:	461a      	mov	r2, r3
 8025cca:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8025cce:	429a      	cmp	r2, r3
 8025cd0:	d10d      	bne.n	8025cee <lv_label_refr_text+0xda>
 8025cd2:	687b      	ldr	r3, [r7, #4]
 8025cd4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8025cd8:	f003 0304 	and.w	r3, r3, #4
 8025cdc:	b2db      	uxtb	r3, r3
 8025cde:	2b00      	cmp	r3, #0
 8025ce0:	d105      	bne.n	8025cee <lv_label_refr_text+0xda>
 8025ce2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025ce6:	f043 0304 	orr.w	r3, r3, #4
 8025cea:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8025cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025cf2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025cf4:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8025cf8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8025cfc:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025d00:	9302      	str	r3, [sp, #8]
 8025d02:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8025d06:	9301      	str	r3, [sp, #4]
 8025d08:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8025d0c:	9300      	str	r3, [sp, #0]
 8025d0e:	4613      	mov	r3, r2
 8025d10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8025d14:	f7fe faa8 	bl	8024268 <lv_txt_get_size>

    lv_obj_refresh_self_size(obj);
 8025d18:	6878      	ldr	r0, [r7, #4]
 8025d1a:	f7e3 f805 	bl	8008d28 <lv_obj_refresh_self_size>

    /*In scroll mode start an offset animation*/
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8025d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025d22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025d26:	f003 0307 	and.w	r3, r3, #7
 8025d2a:	b2db      	uxtb	r3, r3
 8025d2c:	2b02      	cmp	r3, #2
 8025d2e:	f040 815d 	bne.w	8025fec <lv_label_refr_text+0x3d8>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8025d32:	2100      	movs	r1, #0
 8025d34:	6878      	ldr	r0, [r7, #4]
 8025d36:	f7ff f976 	bl	8025026 <lv_obj_get_style_anim_speed>
 8025d3a:	4603      	mov	r3, r0
 8025d3c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8025d40:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8025d44:	2b00      	cmp	r3, #0
 8025d46:	d10f      	bne.n	8025d68 <lv_label_refr_text+0x154>
 8025d48:	6878      	ldr	r0, [r7, #4]
 8025d4a:	f7e8 f8d5 	bl	800def8 <lv_obj_get_disp>
 8025d4e:	4603      	mov	r3, r0
 8025d50:	4618      	mov	r0, r3
 8025d52:	f7fa f83f 	bl	801fdd4 <lv_disp_get_dpi>
 8025d56:	4603      	mov	r3, r0
 8025d58:	4aa1      	ldr	r2, [pc, #644]	; (8025fe0 <lv_label_refr_text+0x3cc>)
 8025d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8025d5e:	17db      	asrs	r3, r3, #31
 8025d60:	1ad3      	subs	r3, r2, r3
 8025d62:	b21b      	sxth	r3, r3
 8025d64:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        lv_anim_t a;
        lv_anim_init(&a);
 8025d68:	f107 0308 	add.w	r3, r7, #8
 8025d6c:	4618      	mov	r0, r3
 8025d6e:	f7fa f8ef 	bl	801ff50 <lv_anim_init>
        lv_anim_set_var(&a, obj);
 8025d72:	f107 0308 	add.w	r3, r7, #8
 8025d76:	6879      	ldr	r1, [r7, #4]
 8025d78:	4618      	mov	r0, r3
 8025d7a:	f7ff f824 	bl	8024dc6 <lv_anim_set_var>
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 8025d7e:	f107 0308 	add.w	r3, r7, #8
 8025d82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8025d86:	4618      	mov	r0, r3
 8025d88:	f7ff f878 	bl	8024e7c <lv_anim_set_repeat_count>
        lv_anim_set_playback_delay(&a, LV_LABEL_SCROLL_DELAY);
 8025d8c:	f107 0308 	add.w	r3, r7, #8
 8025d90:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8025d94:	4618      	mov	r0, r3
 8025d96:	f7ff f863 	bl	8024e60 <lv_anim_set_playback_delay>
        lv_anim_set_repeat_delay(&a, a.playback_delay);
 8025d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025d9c:	f107 0308 	add.w	r3, r7, #8
 8025da0:	4611      	mov	r1, r2
 8025da2:	4618      	mov	r0, r3
 8025da4:	f7ff f87a 	bl	8024e9c <lv_anim_set_repeat_delay>

        bool hor_anim = false;
 8025da8:	2300      	movs	r3, #0
 8025daa:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if(size.x > lv_area_get_width(&txt_coords)) {
 8025dae:	f9b7 4054 	ldrsh.w	r4, [r7, #84]	; 0x54
 8025db2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025db6:	4618      	mov	r0, r3
 8025db8:	f7fe ffca 	bl	8024d50 <lv_area_get_width>
 8025dbc:	4603      	mov	r3, r0
 8025dbe:	429c      	cmp	r4, r3
 8025dc0:	dd76      	ble.n	8025eb0 <lv_label_refr_text+0x29c>
                end = lv_area_get_width(&txt_coords) - size.x;
            }

            lv_anim_set_values(&a, start, end);
#else
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8025dc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025dc6:	4618      	mov	r0, r3
 8025dc8:	f7fe ffc2 	bl	8024d50 <lv_area_get_width>
 8025dcc:	4603      	mov	r3, r0
 8025dce:	461a      	mov	r2, r3
 8025dd0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8025dd4:	1ad2      	subs	r2, r2, r3
 8025dd6:	f107 0308 	add.w	r3, r7, #8
 8025dda:	2100      	movs	r1, #0
 8025ddc:	4618      	mov	r0, r3
 8025dde:	f7ff f81c 	bl	8024e1a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8025de2:	f107 0308 	add.w	r3, r7, #8
 8025de6:	497f      	ldr	r1, [pc, #508]	; (8025fe4 <lv_label_refr_text+0x3d0>)
 8025de8:	4618      	mov	r0, r3
 8025dea:	f7fe fffa 	bl	8024de2 <lv_anim_set_exec_cb>
#endif
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8025dee:	f107 0308 	add.w	r3, r7, #8
 8025df2:	497c      	ldr	r1, [pc, #496]	; (8025fe4 <lv_label_refr_text+0x3d0>)
 8025df4:	4618      	mov	r0, r3
 8025df6:	f7fe fff4 	bl	8024de2 <lv_anim_set_exec_cb>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8025dfa:	497a      	ldr	r1, [pc, #488]	; (8025fe4 <lv_label_refr_text+0x3d0>)
 8025dfc:	6878      	ldr	r0, [r7, #4]
 8025dfe:	f7fa f985 	bl	802010c <lv_anim_get>
 8025e02:	66f8      	str	r0, [r7, #108]	; 0x6c
            int32_t act_time = 0;
 8025e04:	2300      	movs	r3, #0
 8025e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            bool playback_now = false;
 8025e0a:	2300      	movs	r3, #0
 8025e0c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
            if(anim_cur) {
 8025e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025e12:	2b00      	cmp	r3, #0
 8025e14:	d00f      	beq.n	8025e36 <lv_label_refr_text+0x222>
                act_time = anim_cur->act_time;
 8025e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                playback_now = anim_cur->playback_now;
 8025e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025e20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8025e24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8025e28:	b2db      	uxtb	r3, r3
 8025e2a:	2b00      	cmp	r3, #0
 8025e2c:	bf14      	ite	ne
 8025e2e:	2301      	movne	r3, #1
 8025e30:	2300      	moveq	r3, #0
 8025e32:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
            }
            if(act_time < a.time) {
 8025e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8025e3c:	429a      	cmp	r2, r3
 8025e3e:	da18      	bge.n	8025e72 <lv_label_refr_text+0x25e>
                a.act_time = act_time;      /*To keep the old position*/
 8025e40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8025e44:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 8025e46:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8025e4a:	f36f 0300 	bfc	r3, #0, #1
 8025e4e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(playback_now) {
 8025e52:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	d00b      	beq.n	8025e72 <lv_label_refr_text+0x25e>
                    a.playback_now = 1;
 8025e5a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8025e5e:	f043 0302 	orr.w	r3, r3, #2
 8025e62:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    /*Swap the start and end values*/
                    int32_t tmp;
                    tmp      = a.start_value;
 8025e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e68:	66bb      	str	r3, [r7, #104]	; 0x68
                    a.start_value = a.end_value;
 8025e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e6c:	62bb      	str	r3, [r7, #40]	; 0x28
                    a.end_value   = tmp;
 8025e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025e70:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8025e72:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8025e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025e7a:	4618      	mov	r0, r3
 8025e7c:	f7fa f96e 	bl	802015c <lv_anim_speed_to_time>
 8025e80:	4602      	mov	r2, r0
 8025e82:	f107 0308 	add.w	r3, r7, #8
 8025e86:	4611      	mov	r1, r2
 8025e88:	4618      	mov	r0, r3
 8025e8a:	f7fe ffb8 	bl	8024dfe <lv_anim_set_time>
            lv_anim_set_playback_time(&a, a.time);
 8025e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e90:	461a      	mov	r2, r3
 8025e92:	f107 0308 	add.w	r3, r7, #8
 8025e96:	4611      	mov	r1, r2
 8025e98:	4618      	mov	r0, r3
 8025e9a:	f7fe ffd3 	bl	8024e44 <lv_anim_set_playback_time>
            lv_anim_start(&a);
 8025e9e:	f107 0308 	add.w	r3, r7, #8
 8025ea2:	4618      	mov	r0, r3
 8025ea4:	f7fa f87a 	bl	801ff9c <lv_anim_start>
            hor_anim = true;
 8025ea8:	2301      	movs	r3, #1
 8025eaa:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8025eae:	e008      	b.n	8025ec2 <lv_label_refr_text+0x2ae>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_x_anim);
 8025eb0:	494c      	ldr	r1, [pc, #304]	; (8025fe4 <lv_label_refr_text+0x3d0>)
 8025eb2:	6878      	ldr	r0, [r7, #4]
 8025eb4:	f7fa f8ea 	bl	802008c <lv_anim_del>
            label->offset.x = 0;
 8025eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025ebc:	2200      	movs	r2, #0
 8025ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        }

        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8025ec2:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 8025ec6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025eca:	4618      	mov	r0, r3
 8025ecc:	f7fe ff57 	bl	8024d7e <lv_area_get_height>
 8025ed0:	4603      	mov	r3, r0
 8025ed2:	429c      	cmp	r4, r3
 8025ed4:	dd7a      	ble.n	8025fcc <lv_label_refr_text+0x3b8>
 8025ed6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8025eda:	f083 0301 	eor.w	r3, r3, #1
 8025ede:	b2db      	uxtb	r3, r3
 8025ee0:	2b00      	cmp	r3, #0
 8025ee2:	d073      	beq.n	8025fcc <lv_label_refr_text+0x3b8>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8025ee4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025ee8:	4618      	mov	r0, r3
 8025eea:	f7fe ff48 	bl	8024d7e <lv_area_get_height>
 8025eee:	4603      	mov	r3, r0
 8025ef0:	461a      	mov	r2, r3
 8025ef2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8025ef6:	1ad4      	subs	r4, r2, r3
 8025ef8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8025efc:	f7fe ff56 	bl	8024dac <lv_font_get_line_height>
 8025f00:	4603      	mov	r3, r0
 8025f02:	1ae2      	subs	r2, r4, r3
 8025f04:	f107 0308 	add.w	r3, r7, #8
 8025f08:	2100      	movs	r1, #0
 8025f0a:	4618      	mov	r0, r3
 8025f0c:	f7fe ff85 	bl	8024e1a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_y_anim);
 8025f10:	f107 0308 	add.w	r3, r7, #8
 8025f14:	4934      	ldr	r1, [pc, #208]	; (8025fe8 <lv_label_refr_text+0x3d4>)
 8025f16:	4618      	mov	r0, r3
 8025f18:	f7fe ff63 	bl	8024de2 <lv_anim_set_exec_cb>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8025f1c:	4932      	ldr	r1, [pc, #200]	; (8025fe8 <lv_label_refr_text+0x3d4>)
 8025f1e:	6878      	ldr	r0, [r7, #4]
 8025f20:	f7fa f8f4 	bl	802010c <lv_anim_get>
 8025f24:	6678      	str	r0, [r7, #100]	; 0x64
            int32_t act_time = 0;
 8025f26:	2300      	movs	r3, #0
 8025f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            bool playback_now = false;
 8025f2c:	2300      	movs	r3, #0
 8025f2e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
            if(anim_cur) {
 8025f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025f34:	2b00      	cmp	r3, #0
 8025f36:	d00f      	beq.n	8025f58 <lv_label_refr_text+0x344>
                act_time = anim_cur->act_time;
 8025f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                playback_now = anim_cur->playback_now;
 8025f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8025f46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8025f4a:	b2db      	uxtb	r3, r3
 8025f4c:	2b00      	cmp	r3, #0
 8025f4e:	bf14      	ite	ne
 8025f50:	2301      	movne	r3, #1
 8025f52:	2300      	moveq	r3, #0
 8025f54:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
            }
            if(act_time < a.time) {
 8025f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8025f5e:	429a      	cmp	r2, r3
 8025f60:	da18      	bge.n	8025f94 <lv_label_refr_text+0x380>
                a.act_time = act_time;      /*To keep the old position*/
 8025f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8025f66:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 8025f68:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8025f6c:	f36f 0300 	bfc	r3, #0, #1
 8025f70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(playback_now) {
 8025f74:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8025f78:	2b00      	cmp	r3, #0
 8025f7a:	d00b      	beq.n	8025f94 <lv_label_refr_text+0x380>
                    a.playback_now = 1;
 8025f7c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8025f80:	f043 0302 	orr.w	r3, r3, #2
 8025f84:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    /*Swap the start and end values*/
                    int32_t tmp;
                    tmp      = a.start_value;
 8025f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f8a:	663b      	str	r3, [r7, #96]	; 0x60
                    a.start_value = a.end_value;
 8025f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f8e:	62bb      	str	r3, [r7, #40]	; 0x28
                    a.end_value   = tmp;
 8025f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025f92:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8025f94:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8025f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025f9c:	4618      	mov	r0, r3
 8025f9e:	f7fa f8dd 	bl	802015c <lv_anim_speed_to_time>
 8025fa2:	4602      	mov	r2, r0
 8025fa4:	f107 0308 	add.w	r3, r7, #8
 8025fa8:	4611      	mov	r1, r2
 8025faa:	4618      	mov	r0, r3
 8025fac:	f7fe ff27 	bl	8024dfe <lv_anim_set_time>
            lv_anim_set_playback_time(&a, a.time);
 8025fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025fb2:	461a      	mov	r2, r3
 8025fb4:	f107 0308 	add.w	r3, r7, #8
 8025fb8:	4611      	mov	r1, r2
 8025fba:	4618      	mov	r0, r3
 8025fbc:	f7fe ff42 	bl	8024e44 <lv_anim_set_playback_time>
            lv_anim_start(&a);
 8025fc0:	f107 0308 	add.w	r3, r7, #8
 8025fc4:	4618      	mov	r0, r3
 8025fc6:	f7f9 ffe9 	bl	801ff9c <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8025fca:	e26e      	b.n	80264aa <lv_label_refr_text+0x896>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_y_anim);
 8025fcc:	4906      	ldr	r1, [pc, #24]	; (8025fe8 <lv_label_refr_text+0x3d4>)
 8025fce:	6878      	ldr	r0, [r7, #4]
 8025fd0:	f7fa f85c 	bl	802008c <lv_anim_del>
            label->offset.y = 0;
 8025fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025fd8:	2200      	movs	r2, #0
 8025fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8025fde:	e264      	b.n	80264aa <lv_label_refr_text+0x896>
 8025fe0:	55555556 	.word	0x55555556
 8025fe4:	08026681 	.word	0x08026681
 8025fe8:	080266a7 	.word	0x080266a7
        }
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025ff0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025ff4:	f003 0307 	and.w	r3, r3, #7
 8025ff8:	b2db      	uxtb	r3, r3
 8025ffa:	2b03      	cmp	r3, #3
 8025ffc:	f040 8109 	bne.w	8026212 <lv_label_refr_text+0x5fe>
        const lv_anim_t * anim_template = lv_obj_get_style_anim(obj, LV_PART_MAIN);
 8026000:	2100      	movs	r1, #0
 8026002:	6878      	ldr	r0, [r7, #4]
 8026004:	f7fe fffe 	bl	8025004 <lv_obj_get_style_anim>
 8026008:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 802600c:	2100      	movs	r1, #0
 802600e:	6878      	ldr	r0, [r7, #4]
 8026010:	f7ff f809 	bl	8025026 <lv_obj_get_style_anim_speed>
 8026014:	4603      	mov	r3, r0
 8026016:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 802601a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 802601e:	2b00      	cmp	r3, #0
 8026020:	d10f      	bne.n	8026042 <lv_label_refr_text+0x42e>
 8026022:	6878      	ldr	r0, [r7, #4]
 8026024:	f7e7 ff68 	bl	800def8 <lv_obj_get_disp>
 8026028:	4603      	mov	r3, r0
 802602a:	4618      	mov	r0, r3
 802602c:	f7f9 fed2 	bl	801fdd4 <lv_disp_get_dpi>
 8026030:	4603      	mov	r3, r0
 8026032:	4ac2      	ldr	r2, [pc, #776]	; (802633c <lv_label_refr_text+0x728>)
 8026034:	fb82 1203 	smull	r1, r2, r2, r3
 8026038:	17db      	asrs	r3, r3, #31
 802603a:	1ad3      	subs	r3, r2, r3
 802603c:	b21b      	sxth	r3, r3
 802603e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        lv_anim_t a;
        lv_anim_init(&a);
 8026042:	f107 0308 	add.w	r3, r7, #8
 8026046:	4618      	mov	r0, r3
 8026048:	f7f9 ff82 	bl	801ff50 <lv_anim_init>
        lv_anim_set_var(&a, obj);
 802604c:	f107 0308 	add.w	r3, r7, #8
 8026050:	6879      	ldr	r1, [r7, #4]
 8026052:	4618      	mov	r0, r3
 8026054:	f7fe feb7 	bl	8024dc6 <lv_anim_set_var>
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 8026058:	f107 0308 	add.w	r3, r7, #8
 802605c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026060:	4618      	mov	r0, r3
 8026062:	f7fe ff0b 	bl	8024e7c <lv_anim_set_repeat_count>

        bool hor_anim = false;
 8026066:	2300      	movs	r3, #0
 8026068:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        if(size.x > lv_area_get_width(&txt_coords)) {
 802606c:	f9b7 4054 	ldrsh.w	r4, [r7, #84]	; 0x54
 8026070:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8026074:	4618      	mov	r0, r3
 8026076:	f7fe fe6b 	bl	8024d50 <lv_area_get_width>
 802607a:	4603      	mov	r3, r0
 802607c:	429c      	cmp	r4, r3
 802607e:	dd55      	ble.n	802612c <lv_label_refr_text+0x518>
                end = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
            }

            lv_anim_set_values(&a, start, end);
#else
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8026080:	2220      	movs	r2, #32
 8026082:	2120      	movs	r1, #32
 8026084:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8026088:	f7f9 f9b2 	bl	801f3f0 <lv_font_get_glyph_width>
 802608c:	4603      	mov	r3, r0
 802608e:	461a      	mov	r2, r3
 8026090:	009b      	lsls	r3, r3, #2
 8026092:	1ad3      	subs	r3, r2, r3
 8026094:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8026098:	1a9a      	subs	r2, r3, r2
 802609a:	f107 0308 	add.w	r3, r7, #8
 802609e:	2100      	movs	r1, #0
 80260a0:	4618      	mov	r0, r3
 80260a2:	f7fe feba 	bl	8024e1a <lv_anim_set_values>
#endif
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 80260a6:	f107 0308 	add.w	r3, r7, #8
 80260aa:	49a5      	ldr	r1, [pc, #660]	; (8026340 <lv_label_refr_text+0x72c>)
 80260ac:	4618      	mov	r0, r3
 80260ae:	f7fe fe98 	bl	8024de2 <lv_anim_set_exec_cb>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 80260b2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80260b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80260b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80260ba:	4618      	mov	r0, r3
 80260bc:	f7fa f84e 	bl	802015c <lv_anim_speed_to_time>
 80260c0:	4602      	mov	r2, r0
 80260c2:	f107 0308 	add.w	r3, r7, #8
 80260c6:	4611      	mov	r1, r2
 80260c8:	4618      	mov	r0, r3
 80260ca:	f7fe fe98 	bl	8024dfe <lv_anim_set_time>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 80260ce:	499c      	ldr	r1, [pc, #624]	; (8026340 <lv_label_refr_text+0x72c>)
 80260d0:	6878      	ldr	r0, [r7, #4]
 80260d2:	f7fa f81b 	bl	802010c <lv_anim_get>
 80260d6:	67f8      	str	r0, [r7, #124]	; 0x7c
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 80260d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80260da:	2b00      	cmp	r3, #0
 80260dc:	d002      	beq.n	80260e4 <lv_label_refr_text+0x4d0>
 80260de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80260e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80260e2:	e000      	b.n	80260e6 <lv_label_refr_text+0x4d2>
 80260e4:	2300      	movs	r3, #0
 80260e6:	67bb      	str	r3, [r7, #120]	; 0x78

            /*If a template animation exists, consider it's start delay and repeat delay*/
            if(anim_template) {
 80260e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80260ec:	2b00      	cmp	r3, #0
 80260ee:	d008      	beq.n	8026102 <lv_label_refr_text+0x4ee>
                a.act_time = anim_template->act_time;
 80260f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80260f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80260f6:	63bb      	str	r3, [r7, #56]	; 0x38
                a.repeat_delay = anim_template->repeat_delay;
 80260f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80260fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80260fe:	647b      	str	r3, [r7, #68]	; 0x44
 8026100:	e00b      	b.n	802611a <lv_label_refr_text+0x506>
            }
            else if(act_time < a.time) {
 8026102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8026106:	429a      	cmp	r2, r3
 8026108:	da07      	bge.n	802611a <lv_label_refr_text+0x506>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 802610a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802610c:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 802610e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8026112:	f36f 0300 	bfc	r3, #0, #1
 8026116:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            lv_anim_start(&a);
 802611a:	f107 0308 	add.w	r3, r7, #8
 802611e:	4618      	mov	r0, r3
 8026120:	f7f9 ff3c 	bl	801ff9c <lv_anim_start>
            hor_anim = true;
 8026124:	2301      	movs	r3, #1
 8026126:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 802612a:	e008      	b.n	802613e <lv_label_refr_text+0x52a>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_x_anim);
 802612c:	4984      	ldr	r1, [pc, #528]	; (8026340 <lv_label_refr_text+0x72c>)
 802612e:	6878      	ldr	r0, [r7, #4]
 8026130:	f7f9 ffac 	bl	802008c <lv_anim_del>
            label->offset.x = 0;
 8026134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026138:	2200      	movs	r2, #0
 802613a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        }

        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 802613e:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 8026142:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8026146:	4618      	mov	r0, r3
 8026148:	f7fe fe19 	bl	8024d7e <lv_area_get_height>
 802614c:	4603      	mov	r3, r0
 802614e:	429c      	cmp	r4, r3
 8026150:	dd55      	ble.n	80261fe <lv_label_refr_text+0x5ea>
 8026152:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8026156:	f083 0301 	eor.w	r3, r3, #1
 802615a:	b2db      	uxtb	r3, r3
 802615c:	2b00      	cmp	r3, #0
 802615e:	d04e      	beq.n	80261fe <lv_label_refr_text+0x5ea>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8026160:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8026164:	425c      	negs	r4, r3
 8026166:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802616a:	f7fe fe1f 	bl	8024dac <lv_font_get_line_height>
 802616e:	4603      	mov	r3, r0
 8026170:	1ae2      	subs	r2, r4, r3
 8026172:	f107 0308 	add.w	r3, r7, #8
 8026176:	2100      	movs	r1, #0
 8026178:	4618      	mov	r0, r3
 802617a:	f7fe fe4e 	bl	8024e1a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_y_anim);
 802617e:	f107 0308 	add.w	r3, r7, #8
 8026182:	4970      	ldr	r1, [pc, #448]	; (8026344 <lv_label_refr_text+0x730>)
 8026184:	4618      	mov	r0, r3
 8026186:	f7fe fe2c 	bl	8024de2 <lv_anim_set_exec_cb>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 802618a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 802618e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8026190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026192:	4618      	mov	r0, r3
 8026194:	f7f9 ffe2 	bl	802015c <lv_anim_speed_to_time>
 8026198:	4602      	mov	r2, r0
 802619a:	f107 0308 	add.w	r3, r7, #8
 802619e:	4611      	mov	r1, r2
 80261a0:	4618      	mov	r0, r3
 80261a2:	f7fe fe2c 	bl	8024dfe <lv_anim_set_time>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 80261a6:	4967      	ldr	r1, [pc, #412]	; (8026344 <lv_label_refr_text+0x730>)
 80261a8:	6878      	ldr	r0, [r7, #4]
 80261aa:	f7f9 ffaf 	bl	802010c <lv_anim_get>
 80261ae:	6778      	str	r0, [r7, #116]	; 0x74
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 80261b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80261b2:	2b00      	cmp	r3, #0
 80261b4:	d002      	beq.n	80261bc <lv_label_refr_text+0x5a8>
 80261b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80261b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261ba:	e000      	b.n	80261be <lv_label_refr_text+0x5aa>
 80261bc:	2300      	movs	r3, #0
 80261be:	673b      	str	r3, [r7, #112]	; 0x70

            /*If a template animation exists, consider it's start delay and repeat delay*/
            if(anim_template) {
 80261c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80261c4:	2b00      	cmp	r3, #0
 80261c6:	d008      	beq.n	80261da <lv_label_refr_text+0x5c6>
                a.act_time = anim_template->act_time;
 80261c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80261cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261ce:	63bb      	str	r3, [r7, #56]	; 0x38
                a.repeat_delay = anim_template->repeat_delay;
 80261d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80261d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80261d6:	647b      	str	r3, [r7, #68]	; 0x44
 80261d8:	e00b      	b.n	80261f2 <lv_label_refr_text+0x5de>
            }
            else if(act_time < a.time) {
 80261da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80261dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80261de:	429a      	cmp	r2, r3
 80261e0:	da07      	bge.n	80261f2 <lv_label_refr_text+0x5de>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 80261e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80261e4:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 80261e6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80261ea:	f36f 0300 	bfc	r3, #0, #1
 80261ee:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            lv_anim_start(&a);
 80261f2:	f107 0308 	add.w	r3, r7, #8
 80261f6:	4618      	mov	r0, r3
 80261f8:	f7f9 fed0 	bl	801ff9c <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 80261fc:	e155      	b.n	80264aa <lv_label_refr_text+0x896>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_y_anim);
 80261fe:	4951      	ldr	r1, [pc, #324]	; (8026344 <lv_label_refr_text+0x730>)
 8026200:	6878      	ldr	r0, [r7, #4]
 8026202:	f7f9 ff43 	bl	802008c <lv_anim_del>
            label->offset.y = 0;
 8026206:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802620a:	2200      	movs	r2, #0
 802620c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8026210:	e14b      	b.n	80264aa <lv_label_refr_text+0x896>
        }
    }
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8026212:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026216:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802621a:	f003 0307 	and.w	r3, r3, #7
 802621e:	b2db      	uxtb	r3, r3
 8026220:	2b01      	cmp	r3, #1
 8026222:	f040 8142 	bne.w	80264aa <lv_label_refr_text+0x896>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8026226:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 802622a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802622e:	4618      	mov	r0, r3
 8026230:	f7fe fda5 	bl	8024d7e <lv_area_get_height>
 8026234:	4603      	mov	r3, r0
 8026236:	429c      	cmp	r4, r3
 8026238:	dc05      	bgt.n	8026246 <lv_label_refr_text+0x632>
            label->dot_end = LV_LABEL_DOT_END_INV;
 802623a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802623e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8026242:	62da      	str	r2, [r3, #44]	; 0x2c
 8026244:	e131      	b.n	80264aa <lv_label_refr_text+0x896>
        }
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 8026246:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 802624a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802624e:	f7fe fdad 	bl	8024dac <lv_font_get_line_height>
 8026252:	4603      	mov	r3, r0
 8026254:	429c      	cmp	r4, r3
 8026256:	dc05      	bgt.n	8026264 <lv_label_refr_text+0x650>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8026258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802625c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8026260:	62da      	str	r2, [r3, #44]	; 0x2c
 8026262:	e122      	b.n	80264aa <lv_label_refr_text+0x896>
        }
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 8026264:	4b38      	ldr	r3, [pc, #224]	; (8026348 <lv_label_refr_text+0x734>)
 8026266:	681b      	ldr	r3, [r3, #0]
 8026268:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802626c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802626e:	4610      	mov	r0, r2
 8026270:	4798      	blx	r3
 8026272:	4603      	mov	r3, r0
 8026274:	2b03      	cmp	r3, #3
 8026276:	d805      	bhi.n	8026284 <lv_label_refr_text+0x670>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8026278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802627c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8026280:	62da      	str	r2, [r3, #44]	; 0x2c
 8026282:	e112      	b.n	80264aa <lv_label_refr_text+0x896>
        }
        else {
            lv_point_t p;
            lv_coord_t y_overed;
            p.x = lv_area_get_width(&txt_coords) -
 8026284:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8026288:	4618      	mov	r0, r3
 802628a:	f7fe fd61 	bl	8024d50 <lv_area_get_width>
 802628e:	4603      	mov	r3, r0
 8026290:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8026292:	222e      	movs	r2, #46	; 0x2e
 8026294:	212e      	movs	r1, #46	; 0x2e
 8026296:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802629a:	f7f9 f8a9 	bl	801f3f0 <lv_font_get_glyph_width>
 802629e:	4603      	mov	r3, r0
 80262a0:	461a      	mov	r2, r3
 80262a2:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80262a6:	4413      	add	r3, r2
            p.x = lv_area_get_width(&txt_coords) -
 80262a8:	b29b      	uxth	r3, r3
 80262aa:	461a      	mov	r2, r3
 80262ac:	009b      	lsls	r3, r3, #2
 80262ae:	1ad3      	subs	r3, r2, r3
 80262b0:	b29b      	uxth	r3, r3
 80262b2:	4423      	add	r3, r4
 80262b4:	b29b      	uxth	r3, r3
 80262b6:	b21b      	sxth	r3, r3
 80262b8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                  LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_area_get_height(&txt_coords);
 80262bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80262c0:	4618      	mov	r0, r3
 80262c2:	f7fe fd5c 	bl	8024d7e <lv_area_get_height>
 80262c6:	4603      	mov	r3, r0
 80262c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            y_overed = p.y %
 80262cc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80262d0:	461c      	mov	r4, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 80262d2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80262d6:	f7fe fd69 	bl	8024dac <lv_font_get_line_height>
 80262da:	4603      	mov	r3, r0
 80262dc:	461a      	mov	r2, r3
 80262de:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80262e2:	4413      	add	r3, r2
            y_overed = p.y %
 80262e4:	fb94 f2f3 	sdiv	r2, r4, r3
 80262e8:	fb02 f303 	mul.w	r3, r2, r3
 80262ec:	1ae3      	subs	r3, r4, r3
 80262ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
            if(y_overed >= lv_font_get_line_height(font)) {
 80262f2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80262f6:	f7fe fd59 	bl	8024dac <lv_font_get_line_height>
 80262fa:	4603      	mov	r3, r0
 80262fc:	461a      	mov	r2, r3
 80262fe:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8026302:	4293      	cmp	r3, r2
 8026304:	db22      	blt.n	802634c <lv_label_refr_text+0x738>
                p.y -= y_overed;
 8026306:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 802630a:	b29a      	uxth	r2, r3
 802630c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8026310:	1ad3      	subs	r3, r2, r3
 8026312:	b29b      	uxth	r3, r3
 8026314:	b21b      	sxth	r3, r3
 8026316:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                p.y += lv_font_get_line_height(font);
 802631a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802631e:	f7fe fd45 	bl	8024dac <lv_font_get_line_height>
 8026322:	4603      	mov	r3, r0
 8026324:	4619      	mov	r1, r3
 8026326:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 802632a:	b29a      	uxth	r2, r3
 802632c:	b28b      	uxth	r3, r1
 802632e:	4413      	add	r3, r2
 8026330:	b29b      	uxth	r3, r3
 8026332:	b21b      	sxth	r3, r3
 8026334:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8026338:	e01c      	b.n	8026374 <lv_label_refr_text+0x760>
 802633a:	bf00      	nop
 802633c:	55555556 	.word	0x55555556
 8026340:	08026681 	.word	0x08026681
 8026344:	080266a7 	.word	0x080266a7
 8026348:	2000002c 	.word	0x2000002c
            }
            else {
                p.y -= y_overed;
 802634c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8026350:	b29a      	uxth	r2, r3
 8026352:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8026356:	1ad3      	subs	r3, r2, r3
 8026358:	b29b      	uxth	r3, r3
 802635a:	b21b      	sxth	r3, r3
 802635c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                p.y -= line_space;
 8026360:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8026364:	b29a      	uxth	r2, r3
 8026366:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 802636a:	1ad3      	subs	r3, r2, r3
 802636c:	b29b      	uxth	r3, r3
 802636e:	b21b      	sxth	r3, r3
 8026370:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
 8026374:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026378:	4619      	mov	r1, r3
 802637a:	6878      	ldr	r0, [r7, #4]
 802637c:	f7fe ff52 	bl	8025224 <lv_label_get_letter_on>
 8026380:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

            /*Be sure there is space for the dots*/
            size_t txt_len = strlen(label->text);
 8026384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802638a:	4618      	mov	r0, r3
 802638c:	f7d9 ff5e 	bl	800024c <strlen>
 8026390:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8026394:	4b49      	ldr	r3, [pc, #292]	; (80264bc <lv_label_refr_text+0x8a8>)
 8026396:	681b      	ldr	r3, [r3, #0]
 8026398:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802639c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802639e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80263a2:	4610      	mov	r0, r2
 80263a4:	4798      	blx	r3
 80263a6:	4603      	mov	r3, r0
 80263a8:	64fb      	str	r3, [r7, #76]	; 0x4c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 80263aa:	e00d      	b.n	80263c8 <lv_label_refr_text+0x7b4>
                _lv_txt_encoded_prev(label->text, &byte_id);
 80263ac:	4b44      	ldr	r3, [pc, #272]	; (80264c0 <lv_label_refr_text+0x8ac>)
 80263ae:	681b      	ldr	r3, [r3, #0]
 80263b0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80263b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80263b6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80263ba:	4610      	mov	r0, r2
 80263bc:	4798      	blx	r3
                letter_id--;
 80263be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80263c2:	3b01      	subs	r3, #1
 80263c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 80263c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80263ca:	3303      	adds	r3, #3
 80263cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80263d0:	429a      	cmp	r2, r3
 80263d2:	d3eb      	bcc.n	80263ac <lv_label_refr_text+0x798>
            }

            /*Save letters under the dots and replace them with dots*/
            uint32_t byte_id_ori = byte_id;
 80263d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80263d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            uint32_t i;
            uint8_t len = 0;
 80263da:	2300      	movs	r3, #0
 80263dc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 80263e0:	2300      	movs	r3, #0
 80263e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80263e6:	e026      	b.n	8026436 <lv_label_refr_text+0x822>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 80263e8:	4b36      	ldr	r3, [pc, #216]	; (80264c4 <lv_label_refr_text+0x8b0>)
 80263ea:	681b      	ldr	r3, [r3, #0]
 80263ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80263f0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80263f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80263f4:	440a      	add	r2, r1
 80263f6:	4610      	mov	r0, r2
 80263f8:	4798      	blx	r3
 80263fa:	4603      	mov	r3, r0
 80263fc:	461a      	mov	r2, r3
 80263fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8026402:	4413      	add	r3, r2
 8026404:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                _lv_txt_encoded_next(label->text, &byte_id);
 8026408:	4b2f      	ldr	r3, [pc, #188]	; (80264c8 <lv_label_refr_text+0x8b4>)
 802640a:	681b      	ldr	r3, [r3, #0]
 802640c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8026410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026412:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8026416:	4610      	mov	r0, r2
 8026418:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 802641a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 802641e:	2b03      	cmp	r3, #3
 8026420:	d80d      	bhi.n	802643e <lv_label_refr_text+0x82a>
 8026422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026424:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026428:	429a      	cmp	r2, r3
 802642a:	d308      	bcc.n	802643e <lv_label_refr_text+0x82a>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 802642c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026430:	3301      	adds	r3, #1
 8026432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8026436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802643a:	2b03      	cmp	r3, #3
 802643c:	d9d4      	bls.n	80263e8 <lv_label_refr_text+0x7d4>
                    break;
                }
            }

            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 802643e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026448:	4413      	add	r3, r2
 802644a:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 802644e:	4619      	mov	r1, r3
 8026450:	6878      	ldr	r0, [r7, #4]
 8026452:	f000 f893 	bl	802657c <lv_label_set_dot_tmp>
 8026456:	4603      	mov	r3, r0
 8026458:	2b00      	cmp	r3, #0
 802645a:	d026      	beq.n	80264aa <lv_label_refr_text+0x896>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 802645c:	2300      	movs	r3, #0
 802645e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8026462:	e00f      	b.n	8026484 <lv_label_refr_text+0x870>
                    label->text[byte_id_ori + i] = '.';
 8026464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802646a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 802646e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026472:	440b      	add	r3, r1
 8026474:	4413      	add	r3, r2
 8026476:	222e      	movs	r2, #46	; 0x2e
 8026478:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 802647a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802647e:	3301      	adds	r3, #1
 8026480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8026484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026488:	2b02      	cmp	r3, #2
 802648a:	d9eb      	bls.n	8026464 <lv_label_refr_text+0x850>
                }
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 802648c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026496:	3303      	adds	r3, #3
 8026498:	4413      	add	r3, r2
 802649a:	2200      	movs	r2, #0
 802649c:	701a      	strb	r2, [r3, #0]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 802649e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80264a2:	1cda      	adds	r2, r3, #3
 80264a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80264a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    else if(label->long_mode == LV_LABEL_LONG_CLIP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(obj);
 80264aa:	6878      	ldr	r0, [r7, #4]
 80264ac:	f7e3 f909 	bl	80096c2 <lv_obj_invalidate>
 80264b0:	e000      	b.n	80264b4 <lv_label_refr_text+0x8a0>
    if(label->text == NULL) return;
 80264b2:	bf00      	nop
}
 80264b4:	37cc      	adds	r7, #204	; 0xcc
 80264b6:	46bd      	mov	sp, r7
 80264b8:	bd90      	pop	{r4, r7, pc}
 80264ba:	bf00      	nop
 80264bc:	20000024 	.word	0x20000024
 80264c0:	20000020 	.word	0x20000020
 80264c4:	20000018 	.word	0x20000018
 80264c8:	2000001c 	.word	0x2000001c

080264cc <lv_label_revert_dots>:


static void lv_label_revert_dots(lv_obj_t * obj)
{
 80264cc:	b580      	push	{r7, lr}
 80264ce:	b088      	sub	sp, #32
 80264d0:	af00      	add	r7, sp, #0
 80264d2:	6078      	str	r0, [r7, #4]

    lv_label_t * label = (lv_label_t *)obj;
 80264d4:	687b      	ldr	r3, [r7, #4]
 80264d6:	61bb      	str	r3, [r7, #24]

    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 80264d8:	69bb      	ldr	r3, [r7, #24]
 80264da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80264de:	f003 0307 	and.w	r3, r3, #7
 80264e2:	b2db      	uxtb	r3, r3
 80264e4:	2b01      	cmp	r3, #1
 80264e6:	d141      	bne.n	802656c <lv_label_revert_dots+0xa0>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 80264e8:	69bb      	ldr	r3, [r7, #24]
 80264ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80264ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80264f0:	d03e      	beq.n	8026570 <lv_label_revert_dots+0xa4>
    uint32_t letter_i = label->dot_end - LV_LABEL_DOT_NUM;
 80264f2:	69bb      	ldr	r3, [r7, #24]
 80264f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80264f6:	3b03      	subs	r3, #3
 80264f8:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 80264fa:	4b1f      	ldr	r3, [pc, #124]	; (8026578 <lv_label_revert_dots+0xac>)
 80264fc:	681b      	ldr	r3, [r3, #0]
 80264fe:	69ba      	ldr	r2, [r7, #24]
 8026500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026502:	6979      	ldr	r1, [r7, #20]
 8026504:	4610      	mov	r0, r2
 8026506:	4798      	blx	r3
 8026508:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 802650a:	2300      	movs	r3, #0
 802650c:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(obj);
 802650e:	6878      	ldr	r0, [r7, #4]
 8026510:	f000 f878 	bl	8026604 <lv_label_get_dot_tmp>
 8026514:	60f8      	str	r0, [r7, #12]
    while(label->text[byte_i + i] != '\0') {
 8026516:	e00d      	b.n	8026534 <lv_label_revert_dots+0x68>
        label->text[byte_i + i] = dot_tmp[i];
 8026518:	7ffb      	ldrb	r3, [r7, #31]
 802651a:	68fa      	ldr	r2, [r7, #12]
 802651c:	441a      	add	r2, r3
 802651e:	69bb      	ldr	r3, [r7, #24]
 8026520:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026522:	7ff8      	ldrb	r0, [r7, #31]
 8026524:	693b      	ldr	r3, [r7, #16]
 8026526:	4403      	add	r3, r0
 8026528:	440b      	add	r3, r1
 802652a:	7812      	ldrb	r2, [r2, #0]
 802652c:	701a      	strb	r2, [r3, #0]
        i++;
 802652e:	7ffb      	ldrb	r3, [r7, #31]
 8026530:	3301      	adds	r3, #1
 8026532:	77fb      	strb	r3, [r7, #31]
    while(label->text[byte_i + i] != '\0') {
 8026534:	69bb      	ldr	r3, [r7, #24]
 8026536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026538:	7ff9      	ldrb	r1, [r7, #31]
 802653a:	693b      	ldr	r3, [r7, #16]
 802653c:	440b      	add	r3, r1
 802653e:	4413      	add	r3, r2
 8026540:	781b      	ldrb	r3, [r3, #0]
 8026542:	2b00      	cmp	r3, #0
 8026544:	d1e8      	bne.n	8026518 <lv_label_revert_dots+0x4c>
    }
    label->text[byte_i + i] = dot_tmp[i];
 8026546:	7ffb      	ldrb	r3, [r7, #31]
 8026548:	68fa      	ldr	r2, [r7, #12]
 802654a:	441a      	add	r2, r3
 802654c:	69bb      	ldr	r3, [r7, #24]
 802654e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026550:	7ff8      	ldrb	r0, [r7, #31]
 8026552:	693b      	ldr	r3, [r7, #16]
 8026554:	4403      	add	r3, r0
 8026556:	440b      	add	r3, r1
 8026558:	7812      	ldrb	r2, [r2, #0]
 802655a:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(obj);
 802655c:	6878      	ldr	r0, [r7, #4]
 802655e:	f000 f86a 	bl	8026636 <lv_label_dot_tmp_free>

    label->dot_end = LV_LABEL_DOT_END_INV;
 8026562:	69bb      	ldr	r3, [r7, #24]
 8026564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8026568:	62da      	str	r2, [r3, #44]	; 0x2c
 802656a:	e002      	b.n	8026572 <lv_label_revert_dots+0xa6>
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 802656c:	bf00      	nop
 802656e:	e000      	b.n	8026572 <lv_label_revert_dots+0xa6>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8026570:	bf00      	nop
}
 8026572:	3720      	adds	r7, #32
 8026574:	46bd      	mov	sp, r7
 8026576:	bd80      	pop	{r7, pc}
 8026578:	20000024 	.word	0x20000024

0802657c <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * obj, char * data, uint32_t len)
{
 802657c:	b580      	push	{r7, lr}
 802657e:	b086      	sub	sp, #24
 8026580:	af00      	add	r7, sp, #0
 8026582:	60f8      	str	r0, [r7, #12]
 8026584:	60b9      	str	r1, [r7, #8]
 8026586:	607a      	str	r2, [r7, #4]

    lv_label_t * label = (lv_label_t *)obj;
 8026588:	68fb      	ldr	r3, [r7, #12]
 802658a:	617b      	str	r3, [r7, #20]
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 802658c:	68f8      	ldr	r0, [r7, #12]
 802658e:	f000 f852 	bl	8026636 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8026592:	687b      	ldr	r3, [r7, #4]
 8026594:	2b04      	cmp	r3, #4
 8026596:	d922      	bls.n	80265de <lv_label_set_dot_tmp+0x62>
        /*Memory needs to be allocated. Allocates an additional byte
         *for a NULL-terminator so it can be copied.*/
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8026598:	687b      	ldr	r3, [r7, #4]
 802659a:	3301      	adds	r3, #1
 802659c:	4618      	mov	r0, r3
 802659e:	f7fb fbe1 	bl	8021d64 <lv_mem_alloc>
 80265a2:	4602      	mov	r2, r0
 80265a4:	697b      	ldr	r3, [r7, #20]
 80265a6:	629a      	str	r2, [r3, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 80265a8:	697b      	ldr	r3, [r7, #20]
 80265aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80265ac:	2b00      	cmp	r3, #0
 80265ae:	d101      	bne.n	80265b4 <lv_label_set_dot_tmp+0x38>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 80265b0:	2300      	movs	r3, #0
 80265b2:	e023      	b.n	80265fc <lv_label_set_dot_tmp+0x80>
        }
        lv_memcpy(label->dot.tmp_ptr, data, len);
 80265b4:	697b      	ldr	r3, [r7, #20]
 80265b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80265b8:	687a      	ldr	r2, [r7, #4]
 80265ba:	68b9      	ldr	r1, [r7, #8]
 80265bc:	4618      	mov	r0, r3
 80265be:	f7fb fd5f 	bl	8022080 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 80265c2:	697b      	ldr	r3, [r7, #20]
 80265c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80265c6:	687b      	ldr	r3, [r7, #4]
 80265c8:	4413      	add	r3, r2
 80265ca:	2200      	movs	r2, #0
 80265cc:	701a      	strb	r2, [r3, #0]
        label->dot_tmp_alloc    = true;
 80265ce:	697a      	ldr	r2, [r7, #20]
 80265d0:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80265d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80265d8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 80265dc:	e00d      	b.n	80265fa <lv_label_set_dot_tmp+0x7e>
    }
    else {
        /*Characters can be directly stored in object*/
        label->dot_tmp_alloc = false;
 80265de:	697a      	ldr	r2, [r7, #20]
 80265e0:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80265e4:	f36f 1386 	bfc	r3, #6, #1
 80265e8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 80265ec:	697b      	ldr	r3, [r7, #20]
 80265ee:	3328      	adds	r3, #40	; 0x28
 80265f0:	687a      	ldr	r2, [r7, #4]
 80265f2:	68b9      	ldr	r1, [r7, #8]
 80265f4:	4618      	mov	r0, r3
 80265f6:	f7fb fd43 	bl	8022080 <lv_memcpy>
    }
    return true;
 80265fa:	2301      	movs	r3, #1
}
 80265fc:	4618      	mov	r0, r3
 80265fe:	3718      	adds	r7, #24
 8026600:	46bd      	mov	sp, r7
 8026602:	bd80      	pop	{r7, pc}

08026604 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * obj)
{
 8026604:	b480      	push	{r7}
 8026606:	b085      	sub	sp, #20
 8026608:	af00      	add	r7, sp, #0
 802660a:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 802660c:	687b      	ldr	r3, [r7, #4]
 802660e:	60fb      	str	r3, [r7, #12]
    if(label->dot_tmp_alloc) {
 8026610:	68fb      	ldr	r3, [r7, #12]
 8026612:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8026616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802661a:	b2db      	uxtb	r3, r3
 802661c:	2b00      	cmp	r3, #0
 802661e:	d002      	beq.n	8026626 <lv_label_get_dot_tmp+0x22>
        return label->dot.tmp_ptr;
 8026620:	68fb      	ldr	r3, [r7, #12]
 8026622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026624:	e001      	b.n	802662a <lv_label_get_dot_tmp+0x26>
    }
    else {
        return label->dot.tmp;
 8026626:	68fb      	ldr	r3, [r7, #12]
 8026628:	3328      	adds	r3, #40	; 0x28
    }
}
 802662a:	4618      	mov	r0, r3
 802662c:	3714      	adds	r7, #20
 802662e:	46bd      	mov	sp, r7
 8026630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026634:	4770      	bx	lr

08026636 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 8026636:	b580      	push	{r7, lr}
 8026638:	b084      	sub	sp, #16
 802663a:	af00      	add	r7, sp, #0
 802663c:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 802663e:	687b      	ldr	r3, [r7, #4]
 8026640:	60fb      	str	r3, [r7, #12]
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8026642:	68fb      	ldr	r3, [r7, #12]
 8026644:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8026648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802664c:	b2db      	uxtb	r3, r3
 802664e:	2b00      	cmp	r3, #0
 8026650:	d008      	beq.n	8026664 <lv_label_dot_tmp_free+0x2e>
 8026652:	68fb      	ldr	r3, [r7, #12]
 8026654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026656:	2b00      	cmp	r3, #0
 8026658:	d004      	beq.n	8026664 <lv_label_dot_tmp_free+0x2e>
        lv_mem_free(label->dot.tmp_ptr);
 802665a:	68fb      	ldr	r3, [r7, #12]
 802665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802665e:	4618      	mov	r0, r3
 8026660:	f7fb fbb0 	bl	8021dc4 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 8026664:	68fa      	ldr	r2, [r7, #12]
 8026666:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 802666a:	f36f 1386 	bfc	r3, #6, #1
 802666e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 8026672:	68fb      	ldr	r3, [r7, #12]
 8026674:	2200      	movs	r2, #0
 8026676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8026678:	bf00      	nop
 802667a:	3710      	adds	r7, #16
 802667c:	46bd      	mov	sp, r7
 802667e:	bd80      	pop	{r7, pc}

08026680 <set_ofs_x_anim>:


static void set_ofs_x_anim(void * obj, int32_t v)
{
 8026680:	b580      	push	{r7, lr}
 8026682:	b084      	sub	sp, #16
 8026684:	af00      	add	r7, sp, #0
 8026686:	6078      	str	r0, [r7, #4]
 8026688:	6039      	str	r1, [r7, #0]
    lv_label_t * label = (lv_label_t *)obj;
 802668a:	687b      	ldr	r3, [r7, #4]
 802668c:	60fb      	str	r3, [r7, #12]
    label->offset.x    = v;
 802668e:	683b      	ldr	r3, [r7, #0]
 8026690:	b21a      	sxth	r2, r3
 8026692:	68fb      	ldr	r3, [r7, #12]
 8026694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    lv_obj_invalidate(obj);
 8026698:	6878      	ldr	r0, [r7, #4]
 802669a:	f7e3 f812 	bl	80096c2 <lv_obj_invalidate>
}
 802669e:	bf00      	nop
 80266a0:	3710      	adds	r7, #16
 80266a2:	46bd      	mov	sp, r7
 80266a4:	bd80      	pop	{r7, pc}

080266a6 <set_ofs_y_anim>:

static void set_ofs_y_anim(void * obj, int32_t v)
{
 80266a6:	b580      	push	{r7, lr}
 80266a8:	b084      	sub	sp, #16
 80266aa:	af00      	add	r7, sp, #0
 80266ac:	6078      	str	r0, [r7, #4]
 80266ae:	6039      	str	r1, [r7, #0]
    lv_label_t * label = (lv_label_t *)obj;
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	60fb      	str	r3, [r7, #12]
    label->offset.y    = v;
 80266b4:	683b      	ldr	r3, [r7, #0]
 80266b6:	b21a      	sxth	r2, r3
 80266b8:	68fb      	ldr	r3, [r7, #12]
 80266ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    lv_obj_invalidate(obj);
 80266be:	6878      	ldr	r0, [r7, #4]
 80266c0:	f7e2 ffff 	bl	80096c2 <lv_obj_invalidate>
}
 80266c4:	bf00      	nop
 80266c6:	3710      	adds	r7, #16
 80266c8:	46bd      	mov	sp, r7
 80266ca:	bd80      	pop	{r7, pc}

080266cc <__libc_init_array>:
 80266cc:	b570      	push	{r4, r5, r6, lr}
 80266ce:	4d0d      	ldr	r5, [pc, #52]	; (8026704 <__libc_init_array+0x38>)
 80266d0:	4c0d      	ldr	r4, [pc, #52]	; (8026708 <__libc_init_array+0x3c>)
 80266d2:	1b64      	subs	r4, r4, r5
 80266d4:	10a4      	asrs	r4, r4, #2
 80266d6:	2600      	movs	r6, #0
 80266d8:	42a6      	cmp	r6, r4
 80266da:	d109      	bne.n	80266f0 <__libc_init_array+0x24>
 80266dc:	4d0b      	ldr	r5, [pc, #44]	; (802670c <__libc_init_array+0x40>)
 80266de:	4c0c      	ldr	r4, [pc, #48]	; (8026710 <__libc_init_array+0x44>)
 80266e0:	f000 f836 	bl	8026750 <_init>
 80266e4:	1b64      	subs	r4, r4, r5
 80266e6:	10a4      	asrs	r4, r4, #2
 80266e8:	2600      	movs	r6, #0
 80266ea:	42a6      	cmp	r6, r4
 80266ec:	d105      	bne.n	80266fa <__libc_init_array+0x2e>
 80266ee:	bd70      	pop	{r4, r5, r6, pc}
 80266f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80266f4:	4798      	blx	r3
 80266f6:	3601      	adds	r6, #1
 80266f8:	e7ee      	b.n	80266d8 <__libc_init_array+0xc>
 80266fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80266fe:	4798      	blx	r3
 8026700:	3601      	adds	r6, #1
 8026702:	e7f2      	b.n	80266ea <__libc_init_array+0x1e>
 8026704:	0802dfe0 	.word	0x0802dfe0
 8026708:	0802dfe0 	.word	0x0802dfe0
 802670c:	0802dfe0 	.word	0x0802dfe0
 8026710:	0802dfe4 	.word	0x0802dfe4

08026714 <memcpy>:
 8026714:	440a      	add	r2, r1
 8026716:	4291      	cmp	r1, r2
 8026718:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802671c:	d100      	bne.n	8026720 <memcpy+0xc>
 802671e:	4770      	bx	lr
 8026720:	b510      	push	{r4, lr}
 8026722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026726:	f803 4f01 	strb.w	r4, [r3, #1]!
 802672a:	4291      	cmp	r1, r2
 802672c:	d1f9      	bne.n	8026722 <memcpy+0xe>
 802672e:	bd10      	pop	{r4, pc}

08026730 <memset>:
 8026730:	4402      	add	r2, r0
 8026732:	4603      	mov	r3, r0
 8026734:	4293      	cmp	r3, r2
 8026736:	d100      	bne.n	802673a <memset+0xa>
 8026738:	4770      	bx	lr
 802673a:	f803 1b01 	strb.w	r1, [r3], #1
 802673e:	e7f9      	b.n	8026734 <memset+0x4>

08026740 <strcpy>:
 8026740:	4603      	mov	r3, r0
 8026742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026746:	f803 2b01 	strb.w	r2, [r3], #1
 802674a:	2a00      	cmp	r2, #0
 802674c:	d1f9      	bne.n	8026742 <strcpy+0x2>
 802674e:	4770      	bx	lr

08026750 <_init>:
 8026750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026752:	bf00      	nop
 8026754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026756:	bc08      	pop	{r3}
 8026758:	469e      	mov	lr, r3
 802675a:	4770      	bx	lr

0802675c <_fini>:
 802675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802675e:	bf00      	nop
 8026760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026762:	bc08      	pop	{r3}
 8026764:	469e      	mov	lr, r3
 8026766:	4770      	bx	lr
