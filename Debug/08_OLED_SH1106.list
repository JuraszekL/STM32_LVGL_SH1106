
08_OLED_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000264ec  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000386c  080266e4  080266e4  000366e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029f50  08029f50  00040030  2**0
                  CONTENTS
  4 .ARM          00000008  08029f50  08029f50  00039f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029f58  08029f58  00040030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029f58  08029f58  00039f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029f5c  08029f5c  00039f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08029f60  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca4c  20000030  08029f90  00040030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ca7c  08029f90  0004ca7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00075f60  00000000  00000000  0004005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d4b4  00000000  00000000  000b5fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000039d0  00000000  00000000  000c3478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000038d0  00000000  00000000  000c6e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039607  00000000  00000000  000ca718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000621d4  00000000  00000000  00103d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010faf2  00000000  00000000  00165ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002759e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f04c  00000000  00000000  00275a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	080266cc 	.word	0x080266cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	080266cc 	.word	0x080266cc

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 b974 	b.w	800055c <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468e      	mov	lr, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14d      	bne.n	8000336 <__udivmoddi4+0xaa>
 800029a:	428a      	cmp	r2, r1
 800029c:	4694      	mov	ip, r2
 800029e:	d969      	bls.n	8000374 <__udivmoddi4+0xe8>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b152      	cbz	r2, 80002bc <__udivmoddi4+0x30>
 80002a6:	fa01 f302 	lsl.w	r3, r1, r2
 80002aa:	f1c2 0120 	rsb	r1, r2, #32
 80002ae:	fa20 f101 	lsr.w	r1, r0, r1
 80002b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b6:	ea41 0e03 	orr.w	lr, r1, r3
 80002ba:	4094      	lsls	r4, r2
 80002bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c0:	0c21      	lsrs	r1, r4, #16
 80002c2:	fbbe f6f8 	udiv	r6, lr, r8
 80002c6:	fa1f f78c 	uxth.w	r7, ip
 80002ca:	fb08 e316 	mls	r3, r8, r6, lr
 80002ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002d2:	fb06 f107 	mul.w	r1, r6, r7
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e2:	f080 811f 	bcs.w	8000524 <__udivmoddi4+0x298>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 811c 	bls.w	8000524 <__udivmoddi4+0x298>
 80002ec:	3e02      	subs	r6, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f8:	fb08 3310 	mls	r3, r8, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 f707 	mul.w	r7, r0, r7
 8000304:	42a7      	cmp	r7, r4
 8000306:	d90a      	bls.n	800031e <__udivmoddi4+0x92>
 8000308:	eb1c 0404 	adds.w	r4, ip, r4
 800030c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000310:	f080 810a 	bcs.w	8000528 <__udivmoddi4+0x29c>
 8000314:	42a7      	cmp	r7, r4
 8000316:	f240 8107 	bls.w	8000528 <__udivmoddi4+0x29c>
 800031a:	4464      	add	r4, ip
 800031c:	3802      	subs	r0, #2
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	1be4      	subs	r4, r4, r7
 8000324:	2600      	movs	r6, #0
 8000326:	b11d      	cbz	r5, 8000330 <__udivmoddi4+0xa4>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c5 4300 	strd	r4, r3, [r5]
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0xc2>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80ef 	beq.w	800051e <__udivmoddi4+0x292>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x160>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xd4>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80f9 	bhi.w	8000552 <__udivmoddi4+0x2c6>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0303 	sbc.w	r3, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	469e      	mov	lr, r3
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0e0      	beq.n	8000330 <__udivmoddi4+0xa4>
 800036e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000372:	e7dd      	b.n	8000330 <__udivmoddi4+0xa4>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xec>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	2a00      	cmp	r2, #0
 800037e:	f040 8092 	bne.w	80004a6 <__udivmoddi4+0x21a>
 8000382:	eba1 010c 	sub.w	r1, r1, ip
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2601      	movs	r6, #1
 8000390:	0c20      	lsrs	r0, r4, #16
 8000392:	fbb1 f3f7 	udiv	r3, r1, r7
 8000396:	fb07 1113 	mls	r1, r7, r3, r1
 800039a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039e:	fb0e f003 	mul.w	r0, lr, r3
 80003a2:	4288      	cmp	r0, r1
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x12c>
 80003a6:	eb1c 0101 	adds.w	r1, ip, r1
 80003aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x12a>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2c0>
 80003b6:	4643      	mov	r3, r8
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c0:	fb07 1110 	mls	r1, r7, r0, r1
 80003c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x156>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x154>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2ca>
 80003e0:	4608      	mov	r0, r1
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ea:	e79c      	b.n	8000326 <__udivmoddi4+0x9a>
 80003ec:	f1c6 0720 	rsb	r7, r6, #32
 80003f0:	40b3      	lsls	r3, r6
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa20 f407 	lsr.w	r4, r0, r7
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	431c      	orrs	r4, r3
 8000404:	40f9      	lsrs	r1, r7
 8000406:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040a:	fa00 f306 	lsl.w	r3, r0, r6
 800040e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000412:	0c20      	lsrs	r0, r4, #16
 8000414:	fa1f fe8c 	uxth.w	lr, ip
 8000418:	fb09 1118 	mls	r1, r9, r8, r1
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	fb08 f00e 	mul.w	r0, r8, lr
 8000424:	4288      	cmp	r0, r1
 8000426:	fa02 f206 	lsl.w	r2, r2, r6
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b8>
 800042c:	eb1c 0101 	adds.w	r1, ip, r1
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2bc>
 8000438:	4288      	cmp	r0, r1
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2bc>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4461      	add	r1, ip
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f9 	udiv	r0, r1, r9
 800044c:	fb09 1110 	mls	r1, r9, r0, r1
 8000450:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000454:	fb00 fe0e 	mul.w	lr, r0, lr
 8000458:	458e      	cmp	lr, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1e2>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2b4>
 8000466:	458e      	cmp	lr, r1
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2b4>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000472:	fba0 9402 	umull	r9, r4, r0, r2
 8000476:	eba1 010e 	sub.w	r1, r1, lr
 800047a:	42a1      	cmp	r1, r4
 800047c:	46c8      	mov	r8, r9
 800047e:	46a6      	mov	lr, r4
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x2a4>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x2a0>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x212>
 8000486:	ebb3 0208 	subs.w	r2, r3, r8
 800048a:	eb61 010e 	sbc.w	r1, r1, lr
 800048e:	fa01 f707 	lsl.w	r7, r1, r7
 8000492:	fa22 f306 	lsr.w	r3, r2, r6
 8000496:	40f1      	lsrs	r1, r6
 8000498:	431f      	orrs	r7, r3
 800049a:	e9c5 7100 	strd	r7, r1, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	40d8      	lsrs	r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa21 f303 	lsr.w	r3, r1, r3
 80004b4:	4091      	lsls	r1, r2
 80004b6:	4301      	orrs	r1, r0
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c4:	fb07 3610 	mls	r6, r7, r0, r3
 80004c8:	0c0b      	lsrs	r3, r1, #16
 80004ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ce:	fb00 f60e 	mul.w	r6, r0, lr
 80004d2:	429e      	cmp	r6, r3
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x260>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b8>
 80004e4:	429e      	cmp	r6, r3
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b8>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1b9b      	subs	r3, r3, r6
 80004ee:	b289      	uxth	r1, r1
 80004f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004f4:	fb07 3316 	mls	r3, r7, r6, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb06 f30e 	mul.w	r3, r6, lr
 8000500:	428b      	cmp	r3, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x28a>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2b0>
 800050e:	428b      	cmp	r3, r1
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2b0>
 8000512:	3e02      	subs	r6, #2
 8000514:	4461      	add	r1, ip
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0x104>
 800051e:	462e      	mov	r6, r5
 8000520:	4628      	mov	r0, r5
 8000522:	e705      	b.n	8000330 <__udivmoddi4+0xa4>
 8000524:	4606      	mov	r6, r0
 8000526:	e6e3      	b.n	80002f0 <__udivmoddi4+0x64>
 8000528:	4618      	mov	r0, r3
 800052a:	e6f8      	b.n	800031e <__udivmoddi4+0x92>
 800052c:	454b      	cmp	r3, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f8>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000538:	3801      	subs	r0, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f8>
 800053c:	4646      	mov	r6, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x28a>
 8000540:	4620      	mov	r0, r4
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1e2>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x260>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b8>
 800054c:	3b02      	subs	r3, #2
 800054e:	4461      	add	r1, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x12c>
 8000552:	4630      	mov	r0, r6
 8000554:	e709      	b.n	800036a <__udivmoddi4+0xde>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x156>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <MX_GPIO_Init+0xdc>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <MX_GPIO_Init+0xdc>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_GPIO_Init+0xdc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_GPIO_Init+0xdc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <MX_GPIO_Init+0xdc>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_GPIO_Init+0xdc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0xdc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <MX_GPIO_Init+0xdc>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_GPIO_Init+0xdc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xdc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <MX_GPIO_Init+0xe0>)
 80005f6:	f001 f841 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_GPIO_Init+0xe4>)
 8000612:	f000 fe87 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000616:	f244 0381 	movw	r3, #16513	; 0x4081
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0xe0>)
 8000630:	f000 fe78 	bl	8001324 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40020800 	.word	0x40020800

08000648 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_I2C1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_I2C1_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_I2C1_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_I2C1_Init+0x74>)
 8000684:	f001 f814 	bl	80016b0 <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 fa3b 	bl	8000b08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_I2C1_Init+0x74>)
 8000696:	f001 fbf5 	bl	8001e84 <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 fa32 	bl	8000b08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2C1_Init+0x74>)
 80006a8:	f001 fc37 	bl	8001f1a <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 fa29 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000004c 	.word	0x2000004c
 80006c0:	40005400 	.word	0x40005400
 80006c4:	2010091a 	.word	0x2010091a

080006c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0ae      	sub	sp, #184	; 0xb8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2290      	movs	r2, #144	; 0x90
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f025 ffdf 	bl	80266ac <memset>
  if(i2cHandle->Instance==I2C1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a22      	ldr	r2, [pc, #136]	; (800077c <HAL_I2C_MspInit+0xb4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d13c      	bne.n	8000772 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006fe:	2300      	movs	r3, #0
 8000700:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f988 	bl	8002a1c <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000712:	f000 f9f9 	bl	8000b08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000736:	2312      	movs	r3, #18
 8000738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000748:	2304      	movs	r3, #4
 800074a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <HAL_I2C_MspInit+0xbc>)
 8000756:	f000 fde5 	bl	8001324 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	37b8      	adds	r7, #184	; 0xb8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40005400 	.word	0x40005400
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <lv_port_disp_init>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_disp_t * lv_port_disp_init(I2C_HandleTypeDef *I2C){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    /*-------------------------
     * Initialize your display
     * -----------------------*/
    disp_init(I2C);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f831 	bl	80007f8 <disp_init>
     */

    /* Example for 1) */
    static lv_disp_draw_buf_t draw_buf_dsc_1;
    static lv_color_t buf_1[MY_DISP_HOR_RES * 10];                          /*A buffer for 10 rows*/
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/
 8000796:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800079a:	2200      	movs	r2, #0
 800079c:	4910      	ldr	r1, [pc, #64]	; (80007e0 <lv_port_disp_init+0x58>)
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <lv_port_disp_init+0x5c>)
 80007a0:	f01f f9a8 	bl	801faf4 <lv_disp_draw_buf_init>
    /*-----------------------------------
     * Register the display in LVGL
     *----------------------------------*/

    static lv_disp_drv_t disp_drv;                         /*Descriptor of a display driver*/
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <lv_port_disp_init+0x60>)
 80007a6:	f01f f961 	bl	801fa6c <lv_disp_drv_init>

    /*Set up the functions to access to your display*/

    /*Set the resolution of the display*/
    disp_drv.hor_res = MY_DISP_HOR_RES;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <lv_port_disp_init+0x60>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	801a      	strh	r2, [r3, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <lv_port_disp_init+0x60>)
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	805a      	strh	r2, [r3, #2]

    /*Used to copy the buffer's content to the display*/
    disp_drv.flush_cb = disp_flush;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <lv_port_disp_init+0x60>)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <lv_port_disp_init+0x64>)
 80007ba:	615a      	str	r2, [r3, #20]
    disp_drv.set_px_cb = set_px_cb;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <lv_port_disp_init+0x60>)
 80007be:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <lv_port_disp_init+0x68>)
 80007c0:	61da      	str	r2, [r3, #28]
    disp_drv.rounder_cb = rounder_cb;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <lv_port_disp_init+0x60>)
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <lv_port_disp_init+0x6c>)
 80007c6:	619a      	str	r2, [r3, #24]

    /*Set a display buffer*/
    disp_drv.draw_buf = &draw_buf_dsc_1;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <lv_port_disp_init+0x60>)
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <lv_port_disp_init+0x5c>)
 80007cc:	60da      	str	r2, [r3, #12]
     * Note that, in lv_conf.h you can enable GPUs that has built-in support in LVGL.
     * But if you have a different GPU you can use with this callback.*/
    //disp_drv.gpu_fill_cb = gpu_fill;

    /*Finally register the driver*/
    return lv_disp_drv_register(&disp_drv);
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <lv_port_disp_init+0x60>)
 80007d0:	f01f f9ac 	bl	801fb2c <lv_disp_drv_register>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000bc 	.word	0x200000bc
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	200005bc 	.word	0x200005bc
 80007ec:	08000811 	.word	0x08000811
 80007f0:	08000869 	.word	0x08000869
 80007f4:	080008fd 	.word	0x080008fd

080007f8 <disp_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

/*Initialize your display and the required peripherals.*/
static void disp_init(I2C_HandleTypeDef *i2c){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

	SH1106_HwInit(i2c);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 fa11 	bl	8000c28 <SH1106_HwInit>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af02      	add	r7, sp, #8
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
    if(disp_flush_enabled) {
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <disp_flush+0x54>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d016      	beq.n	8000854 <disp_flush+0x44>
        /*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/

    	uint8_t *buff = (uint8_t *)color_p;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	617b      	str	r3, [r7, #20]
    	SH1106_Send(area->x1, area->x2, area->y1, area->y2, buff);
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000830:	b2d8      	uxtb	r0, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000848:	b2dc      	uxtb	r4, r3
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	4623      	mov	r3, r4
 8000850:	f000 fa32 	bl	8000cb8 <SH1106_Send>
    }

    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
    lv_disp_flush_ready(disp_drv);
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f01f faa5 	bl	801fda4 <lv_disp_flush_ready>
}
 800085a:	bf00      	nop
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000

08000868 <set_px_cb>:



static void set_px_cb(struct _lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
        				lv_color_t color, lv_opa_t opa){
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	460b      	mov	r3, r1
 8000878:	80fb      	strh	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	80bb      	strh	r3, [r7, #4]

	uint16_t byte_index = x + ((y / 8) * buf_w);
 800087e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da00      	bge.n	8000888 <set_px_cb+0x20>
 8000886:	3307      	adds	r3, #7
 8000888:	10db      	asrs	r3, r3, #3
 800088a:	b21b      	sxth	r3, r3
 800088c:	b29a      	uxth	r2, r3
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	fb12 f303 	smulbb	r3, r2, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	82fb      	strh	r3, [r7, #22]
	uint8_t  bit_index  = y & 0x7;
 800089c:	8c3b      	ldrh	r3, [r7, #32]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	757b      	strb	r3, [r7, #21]

	// == 0 inverts, so we get blue on black
	if(color.full == 0){
 80008a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10f      	bne.n	80008ce <set_px_cb+0x66>

		BIT_SET( buf[byte_index], bit_index);
 80008ae:	8afb      	ldrh	r3, [r7, #22]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	4413      	add	r3, r2
 80008b4:	7819      	ldrb	r1, [r3, #0]
 80008b6:	7d7b      	ldrb	r3, [r7, #21]
 80008b8:	2201      	movs	r2, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	8afb      	ldrh	r3, [r7, #22]
 80008c2:	68b8      	ldr	r0, [r7, #8]
 80008c4:	4403      	add	r3, r0
 80008c6:	430a      	orrs	r2, r1
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	701a      	strb	r2, [r3, #0]
	}
	else{

		BIT_CLEAR( buf[byte_index], bit_index);
	}
}
 80008cc:	e010      	b.n	80008f0 <set_px_cb+0x88>
		BIT_CLEAR( buf[byte_index], bit_index);
 80008ce:	8afb      	ldrh	r3, [r7, #22]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	2201      	movs	r2, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	68b8      	ldr	r0, [r7, #8]
 80008e8:	4403      	add	r3, r0
 80008ea:	400a      	ands	r2, r1
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <rounder_cb>:


static void rounder_cb(struct _lv_disp_drv_t * disp_drv, lv_area_t * area){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]

	area->y1 = (area->y1 & (~0x7));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800090c:	f023 0307 	bic.w	r3, r3, #7
 8000910:	b21a      	sxth	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	805a      	strh	r2, [r3, #2]
	area->y2 = ((area->y2 & (~0x7)) + 7);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800091c:	b29b      	uxth	r3, r3
 800091e:	f023 0307 	bic.w	r3, r3, #7
 8000922:	b29b      	uxth	r3, r3
 8000924:	3307      	adds	r3, #7
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	80da      	strh	r2, [r3, #6]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <lv_timer_handler_run_in_period>:
 * with a given period in ms. You can use it with sleep or delay in OS environment.
 * This function is used to simplify the porting.
 * @param __ms the period for running lv_timer_handler()
 */
static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler_run_in_period(uint32_t ms)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    uint32_t curr_tick = lv_tick_get();
 8000944:	f01f fa7e 	bl	801fe44 <lv_tick_get>
 8000948:	60f8      	str	r0, [r7, #12]

    if((curr_tick - last_tick) >= (ms)) {
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <lv_timer_handler_run_in_period+0x34>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	d806      	bhi.n	8000966 <lv_timer_handler_run_in_period+0x2a>
        last_tick = curr_tick;
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <lv_timer_handler_run_in_period+0x34>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6013      	str	r3, [r2, #0]
        return lv_timer_handler();
 800095e:	f022 fbfd 	bl	802315c <lv_timer_handler>
 8000962:	4603      	mov	r3, r0
 8000964:	e000      	b.n	8000968 <lv_timer_handler_run_in_period+0x2c>
    }
    return 1;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000060c 	.word	0x2000060c

08000974 <lv_scr_load>:
{
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    lv_disp_load_scr(scr);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f003 fcdf 	bl	8004340 <lv_disp_load_scr>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fb58 	bl	8001046 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f833 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f7ff fde1 	bl	8000560 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800099e:	f000 fa99 	bl	8000ed4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80009a2:	f7ff fe51 	bl	8000648 <MX_I2C1_Init>
  MX_TIM6_Init();
 80009a6:	f000 fa39 	bl	8000e1c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  lv_init();
 80009aa:	f005 f985 	bl	8005cb8 <lv_init>
  lv_port_disp_init(&hi2c1);
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <main+0x68>)
 80009b0:	f7ff feea 	bl	8000788 <lv_port_disp_init>
  HAL_TIM_Base_Start_IT(&htim6);
 80009b4:	4810      	ldr	r0, [pc, #64]	; (80009f8 <main+0x6c>)
 80009b6:	f002 fcb1 	bl	800331c <HAL_TIM_Base_Start_IT>

  lv_obj_t *scr = lv_obj_create(NULL);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f005 f9ce 	bl	8005d5c <lv_obj_create>
 80009c0:	6178      	str	r0, [r7, #20]
  lv_style_t style_1;
  lv_style_init(&style_1);
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4618      	mov	r0, r3
 80009c6:	f021 ffcd 	bl	8022964 <lv_style_init>
  lv_obj_add_style(scr, &style_1, LV_PART_MAIN);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	6978      	ldr	r0, [r7, #20]
 80009d2:	f00b fd23 	bl	800c41c <lv_obj_add_style>

  lv_obj_t *label = lv_label_create(scr);
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f024 faf4 	bl	8024fc4 <lv_label_create>
 80009dc:	6138      	str	r0, [r7, #16]
  lv_label_set_text(label, "Hello");
 80009de:	4907      	ldr	r1, [pc, #28]	; (80009fc <main+0x70>)
 80009e0:	6938      	ldr	r0, [r7, #16]
 80009e2:	f024 fb03 	bl	8024fec <lv_label_set_text>
//  lv_obj_set_pos(label, 20, 20);
  lv_scr_load(scr);
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ffc4 	bl	8000974 <lv_scr_load>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  lv_timer_handler_run_in_period(5);
 80009ec:	2005      	movs	r0, #5
 80009ee:	f7ff ffa5 	bl	800093c <lv_timer_handler_run_in_period>
 80009f2:	e7fb      	b.n	80009ec <main+0x60>
 80009f4:	2000004c 	.word	0x2000004c
 80009f8:	20000614 	.word	0x20000614
 80009fc:	080266e4 	.word	0x080266e4

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2234      	movs	r2, #52	; 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f025 fe4c 	bl	80266ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a24:	f001 fac6 	bl	8001fb4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <SystemClock_Config+0xdc>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a2b      	ldr	r2, [pc, #172]	; (8000adc <SystemClock_Config+0xdc>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <SystemClock_Config+0xdc>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a40:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <SystemClock_Config+0xe0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a74:	2360      	movs	r3, #96	; 0x60
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 faf3 	bl	8002074 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a94:	f000 f838 	bl	8000b08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a98:	f001 fa9c 	bl	8001fd4 <HAL_PWREx_EnableOverDrive>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aa2:	f000 f831 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fd84 	bl	80025d0 <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ace:	f000 f81b 	bl	8000b08 <Error_Handler>
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	; 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d102      	bne.n	8000afc <HAL_TIM_PeriodElapsedCallback+0x18>

		lv_tick_inc(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f01f f98c 	bl	801fe14 <lv_tick_inc>
	}
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40001000 	.word	0x40001000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <sh1106_cmd>:
/*********************************************************************************/
							// Low level I2C functions //
/*********************************************************************************/


static void sh1106_cmd(uint8_t cmd){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af04      	add	r7, sp, #16
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

//	i2c_write_byte(SH1106_ADR, SH1106_CMD, cmd, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_CMD, 1, &cmd, 1, SH1106_TIMEOUT_MS);
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <sh1106_cmd+0x2c>)
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	9302      	str	r3, [sp, #8]
 8000b26:	2301      	movs	r3, #1
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	2178      	movs	r1, #120	; 0x78
 8000b34:	f000 fe4c 	bl	80017d0 <HAL_I2C_Mem_Write>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000610 	.word	0x20000610

08000b44 <sh1106_multi_cmd>:

static void sh1106_multi_cmd(uint8_t *cmd, uint8_t len){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af04      	add	r7, sp, #16
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_CMD, cmd, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_CMD, 1, cmd, len, SH1106_TIMEOUT_MS);
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <sh1106_multi_cmd+0x30>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	2264      	movs	r2, #100	; 0x64
 8000b5a:	9202      	str	r2, [sp, #8]
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2301      	movs	r3, #1
 8000b64:	2200      	movs	r2, #0
 8000b66:	2178      	movs	r1, #120	; 0x78
 8000b68:	f000 fe32 	bl	80017d0 <HAL_I2C_Mem_Write>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000610 	.word	0x20000610

08000b78 <sh1106_multi_data>:

static void sh1106_multi_data(uint8_t *data, uint8_t len){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af04      	add	r7, sp, #16
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_DATA, data, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_DATA, 1, data, len, SH1106_TIMEOUT_MS);
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <sh1106_multi_data+0x30>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	2264      	movs	r2, #100	; 0x64
 8000b8e:	9202      	str	r2, [sp, #8]
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2301      	movs	r3, #1
 8000b98:	2240      	movs	r2, #64	; 0x40
 8000b9a:	2178      	movs	r1, #120	; 0x78
 8000b9c:	f000 fe18 	bl	80017d0 <HAL_I2C_Mem_Write>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000610 	.word	0x20000610

08000bac <sh1106_set_col>:

/*********************************************************************************/
								// Basic functions //
/*********************************************************************************/

static void sh1106_set_col(uint8_t col){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]

	if(col > (HORIZONTAL_RES - 1)) return;
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db16      	blt.n	8000bec <sh1106_set_col+0x40>

	uint8_t buff[2];

	buff[0] = ((col + SH1106_OFFSET) & 0b00001111) | SET_L_COL_ADDR;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	733b      	strb	r3, [r7, #12]
	buff[1] = ((col + SH1106_OFFSET) >> 4) | SET_H_COL_ADDR;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	111b      	asrs	r3, r3, #4
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	737b      	strb	r3, [r7, #13]

	sh1106_multi_cmd(buff, 2);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2102      	movs	r1, #2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffad 	bl	8000b44 <sh1106_multi_cmd>
 8000bea:	e000      	b.n	8000bee <sh1106_set_col+0x42>
	if(col > (HORIZONTAL_RES - 1)) return;
 8000bec:	bf00      	nop
}
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <sh1106_set_page>:

static void sh1106_set_page(uint8_t page){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]

	if(page > (PAGES - 1)) return;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	d80d      	bhi.n	8000c20 <sh1106_set_page+0x2c>

	uint8_t a = (page & 0b00000111) | SET_PAGE_ADDR;
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	73fb      	strb	r3, [r7, #15]

	sh1106_cmd(a);
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff7b 	bl	8000b14 <sh1106_cmd>
 8000c1e:	e000      	b.n	8000c22 <sh1106_set_page+0x2e>
	if(page > (PAGES - 1)) return;
 8000c20:	bf00      	nop
}
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <SH1106_HwInit>:

							// oled initialization //

/*********************************************************************************/

void SH1106_HwInit(I2C_HandleTypeDef *i2c){
 8000c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c2c:	b087      	sub	sp, #28
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	466b      	mov	r3, sp
 8000c34:	461e      	mov	r6, r3

	sh1106_i2c = i2c;
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <SH1106_HwInit+0x88>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6013      	str	r3, [r2, #0]

	uint8_t a = sizeof(init_commands);
 8000c3c:	2317      	movs	r3, #23
 8000c3e:	75fb      	strb	r3, [r7, #23]
	uint8_t tab[a];
 8000c40:	7df9      	ldrb	r1, [r7, #23]
 8000c42:	460b      	mov	r3, r1
 8000c44:	3b01      	subs	r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	b2cb      	uxtb	r3, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	4691      	mov	r9, r2
 8000c50:	f04f 0200 	mov.w	r2, #0
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c64:	b2cb      	uxtb	r3, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	461c      	mov	r4, r3
 8000c6a:	4615      	mov	r5, r2
 8000c6c:	f04f 0200 	mov.w	r2, #0
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	00eb      	lsls	r3, r5, #3
 8000c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c7a:	00e2      	lsls	r2, r4, #3
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	3307      	adds	r3, #7
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	ebad 0d03 	sub.w	sp, sp, r3
 8000c88:	466b      	mov	r3, sp
 8000c8a:	3300      	adds	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]

	memcpy(tab, init_commands, a);
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <SH1106_HwInit+0x8c>)
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f025 fcfb 	bl	8026690 <memcpy>

	sh1106_multi_cmd(tab, a);
 8000c9a:	7dfb      	ldrb	r3, [r7, #23]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff ff50 	bl	8000b44 <sh1106_multi_cmd>
 8000ca4:	46b5      	mov	sp, r6
}
 8000ca6:	bf00      	nop
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cb0:	20000610 	.word	0x20000610
 8000cb4:	08026728 	.word	0x08026728

08000cb8 <SH1106_Send>:
				// Y1 and Y2 have to be (multiplication of 8) -1 //
				// f.e. 0, 7, 15 etc.

/*********************************************************************************/

void SH1106_Send(uint8_t X1, uint8_t X2, uint8_t Y1, uint8_t Y2, uint8_t *Buff){
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71bb      	strb	r3, [r7, #6]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	717b      	strb	r3, [r7, #5]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	713b      	strb	r3, [r7, #4]

	uint8_t xPixels = X2 - X1 + 1;
 8000cd6:	79ba      	ldrb	r2, [r7, #6]
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	73bb      	strb	r3, [r7, #14]

	uint8_t firstPage = (Y1 / 8);
 8000ce2:	797b      	ldrb	r3, [r7, #5]
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	737b      	strb	r3, [r7, #13]
	uint8_t lastPage = (Y2 / 8);
 8000ce8:	793b      	ldrb	r3, [r7, #4]
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	733b      	strb	r3, [r7, #12]
	uint8_t pages = lastPage - firstPage + 1;
 8000cee:	7b3a      	ldrb	r2, [r7, #12]
 8000cf0:	7b7b      	ldrb	r3, [r7, #13]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	72fb      	strb	r3, [r7, #11]

	for(uint8_t a = 0; a < pages; a++){
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e019      	b.n	8000d34 <SH1106_Send+0x7c>

		sh1106_set_page(a + firstPage);
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	7b7b      	ldrb	r3, [r7, #13]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff73 	bl	8000bf4 <sh1106_set_page>
		sh1106_set_col(X1);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff4b 	bl	8000bac <sh1106_set_col>
		sh1106_multi_data(&Buff[a * xPixels], xPixels);
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	7bba      	ldrb	r2, [r7, #14]
 8000d1a:	fb02 f303 	mul.w	r3, r2, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	4413      	add	r3, r2
 8000d24:	7bba      	ldrb	r2, [r7, #14]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff25 	bl	8000b78 <sh1106_multi_data>
	for(uint8_t a = 0; a < pages; a++){
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	3301      	adds	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d3e1      	bcc.n	8000d00 <SH1106_Send+0x48>
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x44>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f970 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <TIM6_DAC_IRQHandler+0x10>)
 8000dea:	f002 fb0f 	bl	800340c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000614 	.word	0x20000614

08000df8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_TIM6_Init+0x64>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MX_TIM6_Init+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_TIM6_Init+0x64>)
 8000e34:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000e38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_TIM6_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_TIM6_Init+0x64>)
 8000e42:	2263      	movs	r2, #99	; 0x63
 8000e44:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_TIM6_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_TIM6_Init+0x64>)
 8000e4e:	f002 fa0d 	bl	800326c <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e58:	f7ff fe56 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_TIM6_Init+0x64>)
 8000e6a:	f002 fcb7 	bl	80037dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f7ff fe48 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000614 	.word	0x20000614
 8000e84:	40001000 	.word	0x40001000

08000e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_TIM_Base_MspInit+0x44>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d113      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2036      	movs	r0, #54	; 0x36
 8000eb8:	f000 f9fd 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ebc:	2036      	movs	r0, #54	; 0x36
 8000ebe:	f000 fa16 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <MX_USART3_UART_Init+0x5c>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART3_UART_Init+0x58>)
 8000f18:	f002 fd0c 	bl	8003934 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f22:	f7ff fdf1 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000660 	.word	0x20000660
 8000f30:	40004800 	.word	0x40004800

08000f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0ae      	sub	sp, #184	; 0xb8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2290      	movs	r2, #144	; 0x90
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f025 fba9 	bl	80266ac <memset>
  if(uartHandle->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d13c      	bne.n	8000fde <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fd52 	bl	8002a1c <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f7e:	f7ff fdc3 	bl	8000b08 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0xbc>)
 8000fda:	f000 f9a3 	bl	8001324 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	37b8      	adds	r7, #184	; 0xb8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800102c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001010:	4c0b      	ldr	r4, [pc, #44]	; (8001040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101e:	f7ff feeb 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f025 fb11 	bl	8026648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fcb1 	bl	800098c <main>
  bx  lr    
 800102a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001038:	08029f60 	.word	0x08029f60
  ldr r2, =_sbss
 800103c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001040:	2000ca7c 	.word	0x2000ca7c

08001044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC_IRQHandler>

08001046 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104a:	2003      	movs	r0, #3
 800104c:	f000 f928 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f805 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001056:	f7ff fe77 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f943 	bl	800130a <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f000 f90b 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000004 	.word	0x20000004
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	20000008 	.word	0x20000008

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	200006e8 	.word	0x200006e8

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200006e8 	.word	0x200006e8

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	4313      	orrs	r3, r2
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	05fa0000 	.word	0x05fa0000

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff29 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff3e 	bl	8001148 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff31 	bl	8001164 <__NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa2 	bl	800125c <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e175      	b.n	8001630 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 8164 	bne.w	800162a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d005      	beq.n	800137a <HAL_GPIO_Init+0x56>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d130      	bne.n	80013dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f003 0201 	and.w	r2, r3, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d017      	beq.n	8001418 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80be 	beq.w	800162a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b66      	ldr	r3, [pc, #408]	; (8001648 <HAL_GPIO_Init+0x324>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_GPIO_Init+0x324>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b63      	ldr	r3, [pc, #396]	; (8001648 <HAL_GPIO_Init+0x324>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014c6:	4a61      	ldr	r2, [pc, #388]	; (800164c <HAL_GPIO_Init+0x328>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_GPIO_Init+0x32c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d037      	beq.n	8001562 <HAL_GPIO_Init+0x23e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a57      	ldr	r2, [pc, #348]	; (8001654 <HAL_GPIO_Init+0x330>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d031      	beq.n	800155e <HAL_GPIO_Init+0x23a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a56      	ldr	r2, [pc, #344]	; (8001658 <HAL_GPIO_Init+0x334>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d02b      	beq.n	800155a <HAL_GPIO_Init+0x236>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a55      	ldr	r2, [pc, #340]	; (800165c <HAL_GPIO_Init+0x338>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d025      	beq.n	8001556 <HAL_GPIO_Init+0x232>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a54      	ldr	r2, [pc, #336]	; (8001660 <HAL_GPIO_Init+0x33c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01f      	beq.n	8001552 <HAL_GPIO_Init+0x22e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a53      	ldr	r2, [pc, #332]	; (8001664 <HAL_GPIO_Init+0x340>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d019      	beq.n	800154e <HAL_GPIO_Init+0x22a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_GPIO_Init+0x344>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0x226>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a51      	ldr	r2, [pc, #324]	; (800166c <HAL_GPIO_Init+0x348>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d00d      	beq.n	8001546 <HAL_GPIO_Init+0x222>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a50      	ldr	r2, [pc, #320]	; (8001670 <HAL_GPIO_Init+0x34c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d007      	beq.n	8001542 <HAL_GPIO_Init+0x21e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4f      	ldr	r2, [pc, #316]	; (8001674 <HAL_GPIO_Init+0x350>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_GPIO_Init+0x21a>
 800153a:	2309      	movs	r3, #9
 800153c:	e012      	b.n	8001564 <HAL_GPIO_Init+0x240>
 800153e:	230a      	movs	r3, #10
 8001540:	e010      	b.n	8001564 <HAL_GPIO_Init+0x240>
 8001542:	2308      	movs	r3, #8
 8001544:	e00e      	b.n	8001564 <HAL_GPIO_Init+0x240>
 8001546:	2307      	movs	r3, #7
 8001548:	e00c      	b.n	8001564 <HAL_GPIO_Init+0x240>
 800154a:	2306      	movs	r3, #6
 800154c:	e00a      	b.n	8001564 <HAL_GPIO_Init+0x240>
 800154e:	2305      	movs	r3, #5
 8001550:	e008      	b.n	8001564 <HAL_GPIO_Init+0x240>
 8001552:	2304      	movs	r3, #4
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x240>
 8001556:	2303      	movs	r3, #3
 8001558:	e004      	b.n	8001564 <HAL_GPIO_Init+0x240>
 800155a:	2302      	movs	r3, #2
 800155c:	e002      	b.n	8001564 <HAL_GPIO_Init+0x240>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x240>
 8001562:	2300      	movs	r3, #0
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	f002 0203 	and.w	r2, r2, #3
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	4093      	lsls	r3, r2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001574:	4935      	ldr	r1, [pc, #212]	; (800164c <HAL_GPIO_Init+0x328>)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001582:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_GPIO_Init+0x354>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a6:	4a34      	ldr	r2, [pc, #208]	; (8001678 <HAL_GPIO_Init+0x354>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_GPIO_Init+0x354>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d0:	4a29      	ldr	r2, [pc, #164]	; (8001678 <HAL_GPIO_Init+0x354>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_GPIO_Init+0x354>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <HAL_GPIO_Init+0x354>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_GPIO_Init+0x354>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_GPIO_Init+0x354>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3301      	adds	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	f67f ae86 	bls.w	8001344 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40013800 	.word	0x40013800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40021400 	.word	0x40021400
 8001668:	40021800 	.word	0x40021800
 800166c:	40021c00 	.word	0x40021c00
 8001670:	40022000 	.word	0x40022000
 8001674:	40022400 	.word	0x40022400
 8001678:	40013c00 	.word	0x40013c00

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001698:	e003      	b.n	80016a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	041a      	lsls	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	619a      	str	r2, [r3, #24]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe fff6 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2224      	movs	r2, #36	; 0x24
 80016e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001700:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001710:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	e006      	b.n	8001738 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001736:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d104      	bne.n	800174a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001748:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_I2C_Init+0x11c>)
 8001756:	430b      	orrs	r3, r1
 8001758:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001768:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69d9      	ldr	r1, [r3, #28]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1a      	ldr	r2, [r3, #32]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	02008000 	.word	0x02008000

080017d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	4608      	mov	r0, r1
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	4603      	mov	r3, r0
 80017e0:	817b      	strh	r3, [r7, #10]
 80017e2:	460b      	mov	r3, r1
 80017e4:	813b      	strh	r3, [r7, #8]
 80017e6:	4613      	mov	r3, r2
 80017e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	f040 80f9 	bne.w	80019ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_I2C_Mem_Write+0x34>
 80017fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0ed      	b.n	80019ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_I2C_Mem_Write+0x4e>
 800181a:	2302      	movs	r3, #2
 800181c:	e0e6      	b.n	80019ec <HAL_I2C_Mem_Write+0x21c>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001826:	f7ff fc5f 	bl	80010e8 <HAL_GetTick>
 800182a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2319      	movs	r3, #25
 8001832:	2201      	movs	r2, #1
 8001834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 f955 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0d1      	b.n	80019ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2221      	movs	r2, #33	; 0x21
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a3a      	ldr	r2, [r7, #32]
 8001862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001868:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001870:	88f8      	ldrh	r0, [r7, #6]
 8001872:	893a      	ldrh	r2, [r7, #8]
 8001874:	8979      	ldrh	r1, [r7, #10]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	4603      	mov	r3, r0
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f8b9 	bl	80019f8 <I2C_RequestMemoryWrite>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0a9      	b.n	80019ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d90e      	bls.n	80018c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	22ff      	movs	r2, #255	; 0xff
 80018a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	8979      	ldrh	r1, [r7, #10]
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fab1 	bl	8001e20 <I2C_TransferConfig>
 80018be:	e00f      	b.n	80018e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	2300      	movs	r3, #0
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 faa0 	bl	8001e20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f93f 	bl	8001b68 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e07b      	b.n	80019ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d034      	beq.n	8001998 <HAL_I2C_Mem_Write+0x1c8>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d130      	bne.n	8001998 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193c:	2200      	movs	r2, #0
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f8d1 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e04d      	b.n	80019ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d90e      	bls.n	8001978 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	22ff      	movs	r2, #255	; 0xff
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	b2da      	uxtb	r2, r3
 8001966:	8979      	ldrh	r1, [r7, #10]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fa55 	bl	8001e20 <I2C_TransferConfig>
 8001976:	e00f      	b.n	8001998 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	b2da      	uxtb	r2, r3
 8001988:	8979      	ldrh	r1, [r7, #10]
 800198a:	2300      	movs	r3, #0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fa44 	bl	8001e20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d19e      	bne.n	80018e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f91e 	bl	8001be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e01a      	b.n	80019ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2220      	movs	r2, #32
 80019bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_I2C_Mem_Write+0x224>)
 80019ca:	400b      	ands	r3, r1
 80019cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	fe00e800 	.word	0xfe00e800

080019f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	817b      	strh	r3, [r7, #10]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	813b      	strh	r3, [r7, #8]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	8979      	ldrh	r1, [r7, #10]
 8001a18:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <I2C_RequestMemoryWrite+0xa4>)
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f9fd 	bl	8001e20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	69b9      	ldr	r1, [r7, #24]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f89c 	bl	8001b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e02c      	b.n	8001a94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a40:	893b      	ldrh	r3, [r7, #8]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
 8001a4a:	e015      	b.n	8001a78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a4c:	893b      	ldrh	r3, [r7, #8]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	69b9      	ldr	r1, [r7, #24]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f882 	bl	8001b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e012      	b.n	8001a94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a6e:	893b      	ldrh	r3, [r7, #8]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 f830 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	80002000 	.word	0x80002000

08001aa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d103      	bne.n	8001abe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d007      	beq.n	8001adc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	619a      	str	r2, [r3, #24]
  }
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af8:	e022      	b.n	8001b40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b00:	d01e      	beq.n	8001b40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b02:	f7ff faf1 	bl	80010e8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d302      	bcc.n	8001b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d113      	bne.n	8001b40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e00f      	b.n	8001b60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d0cd      	beq.n	8001afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b74:	e02c      	b.n	8001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f870 	bl	8001c60 <I2C_IsErrorOccurred>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e02a      	b.n	8001be0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b90:	d01e      	beq.n	8001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b92:	f7ff faa9 	bl	80010e8 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d302      	bcc.n	8001ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d113      	bne.n	8001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f043 0220 	orr.w	r2, r3, #32
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e007      	b.n	8001be0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d1cb      	bne.n	8001b76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf4:	e028      	b.n	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f830 	bl	8001c60 <I2C_IsErrorOccurred>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e026      	b.n	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0a:	f7ff fa6d 	bl	80010e8 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d302      	bcc.n	8001c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d113      	bne.n	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e007      	b.n	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	d1cf      	bne.n	8001bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d068      	beq.n	8001d5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2210      	movs	r2, #16
 8001c92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c94:	e049      	b.n	8001d2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c9c:	d045      	beq.n	8001d2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c9e:	f7ff fa23 	bl	80010e8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d302      	bcc.n	8001cb4 <I2C_IsErrorOccurred+0x54>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13a      	bne.n	8001d2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd6:	d121      	bne.n	8001d1c <I2C_IsErrorOccurred+0xbc>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cde:	d01d      	beq.n	8001d1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d01a      	beq.n	8001d1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cf6:	f7ff f9f7 	bl	80010e8 <HAL_GetTick>
 8001cfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cfc:	e00e      	b.n	8001d1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cfe:	f7ff f9f3 	bl	80010e8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b19      	cmp	r3, #25
 8001d0a:	d907      	bls.n	8001d1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001d1a:	e006      	b.n	8001d2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d1e9      	bne.n	8001cfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d003      	beq.n	8001d40 <I2C_IsErrorOccurred+0xe0>
 8001d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0aa      	beq.n	8001c96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d103      	bne.n	8001d50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00b      	beq.n	8001dcc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01c      	beq.n	8001e0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff fe63 	bl	8001aa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <I2C_IsErrorOccurred+0x1bc>)
 8001de6:	400b      	ands	r3, r1
 8001de8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	fe00e800 	.word	0xfe00e800

08001e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	817b      	strh	r3, [r7, #10]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e38:	7a7b      	ldrb	r3, [r7, #9]
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	0d5b      	lsrs	r3, r3, #21
 8001e5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <I2C_TransferConfig+0x60>)
 8001e60:	430b      	orrs	r3, r1
 8001e62:	43db      	mvns	r3, r3
 8001e64:	ea02 0103 	and.w	r1, r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	03ff63ff 	.word	0x03ff63ff

08001e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d138      	bne.n	8001f0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e032      	b.n	8001f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d139      	bne.n	8001fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e033      	b.n	8001fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2224      	movs	r2, #36	; 0x24
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40007000 	.word	0x40007000

08001fd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_PWREx_EnableOverDrive+0x98>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_PWREx_EnableOverDrive+0x98>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_PWREx_EnableOverDrive+0x98>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002002:	f7ff f871 	bl	80010e8 <HAL_GetTick>
 8002006:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002008:	e009      	b.n	800201e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800200a:	f7ff f86d 	bl	80010e8 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002018:	d901      	bls.n	800201e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e022      	b.n	8002064 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d1ee      	bne.n	800200a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_PWREx_EnableOverDrive+0x9c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002036:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002038:	f7ff f856 	bl	80010e8 <HAL_GetTick>
 800203c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800203e:	e009      	b.n	8002054 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002040:	f7ff f852 	bl	80010e8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800204e:	d901      	bls.n	8002054 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e007      	b.n	8002064 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002060:	d1ee      	bne.n	8002040 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000

08002074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e29b      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8087 	beq.w	80021a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002098:	4b96      	ldr	r3, [pc, #600]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d00c      	beq.n	80020be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a4:	4b93      	ldr	r3, [pc, #588]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d112      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62>
 80020b0:	4b90      	ldr	r3, [pc, #576]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020bc:	d10b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	4b8d      	ldr	r3, [pc, #564]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d06c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x130>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d168      	bne.n	80021a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e275      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x7a>
 80020e0:	4b84      	ldr	r3, [pc, #528]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a83      	ldr	r2, [pc, #524]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e02e      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x9c>
 80020f6:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7e      	ldr	r2, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7b      	ldr	r2, [pc, #492]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0xc0>
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b6c      	ldr	r3, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a6b      	ldr	r2, [pc, #428]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe ffc8 	bl	80010e8 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7fe ffc4 	bl	80010e8 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e229      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0xe8>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ffb4 	bl	80010e8 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe ffb0 	bl	80010e8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e215      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x110>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d069      	beq.n	8002286 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b2:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x190>
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x17a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1e9      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	493d      	ldr	r1, [pc, #244]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	e040      	b.n	8002286 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff66 	bl	80010e8 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7fe ff62 	bl	80010e8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1c7      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4929      	ldr	r1, [pc, #164]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
 8002252:	e018      	b.n	8002286 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe ff42 	bl	80010e8 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002268:	f7fe ff3e 	bl	80010e8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1a3      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d038      	beq.n	8002304 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d019      	beq.n	80022ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7fe ff1f 	bl	80010e8 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ae:	f7fe ff1b 	bl	80010e8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e180      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x23a>
 80022cc:	e01a      	b.n	8002304 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7fe ff05 	bl	80010e8 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e2:	f7fe ff01 	bl	80010e8 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d903      	bls.n	80022f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e166      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
 80022f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ee      	bne.n	80022e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a4 	beq.w	800245a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b8c      	ldr	r3, [pc, #560]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b89      	ldr	r3, [pc, #548]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a88      	ldr	r2, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b86      	ldr	r3, [pc, #536]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233a:	4b83      	ldr	r3, [pc, #524]	; (8002548 <HAL_RCC_OscConfig+0x4d4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002346:	4b80      	ldr	r3, [pc, #512]	; (8002548 <HAL_RCC_OscConfig+0x4d4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7f      	ldr	r2, [pc, #508]	; (8002548 <HAL_RCC_OscConfig+0x4d4>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fec9 	bl	80010e8 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe fec5 	bl	80010e8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e12a      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4b76      	ldr	r3, [pc, #472]	; (8002548 <HAL_RCC_OscConfig+0x4d4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x31a>
 8002380:	4b70      	ldr	r3, [pc, #448]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a6f      	ldr	r2, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x33c>
 8002396:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a6a      	ldr	r2, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a67      	ldr	r2, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x35e>
 80023b8:	4b62      	ldr	r3, [pc, #392]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a61      	ldr	r2, [pc, #388]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a5e      	ldr	r2, [pc, #376]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 80023d2:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a5b      	ldr	r2, [pc, #364]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe fe79 	bl	80010e8 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fe75 	bl	80010e8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0d8      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x386>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe fe63 	bl	80010e8 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fe5f 	bl	80010e8 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0c2      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a3c      	ldr	r2, [pc, #240]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80ae 	beq.w	80025c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d06d      	beq.n	800254c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d14b      	bne.n	8002510 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a31      	ldr	r2, [pc, #196]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fe30 	bl	80010e8 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fe2c 	bl	80010e8 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e091      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	019b      	lsls	r3, r3, #6
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	3b01      	subs	r3, #1
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	071b      	lsls	r3, r3, #28
 80024d6:	491b      	ldr	r1, [pc, #108]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a18      	ldr	r2, [pc, #96]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fdfe 	bl	80010e8 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fdfa 	bl	80010e8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e05f      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x47c>
 800250e:	e057      	b.n	80025c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800251a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fde4 	bl	80010e8 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe fde0 	bl	80010e8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e045      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x4b0>
 8002542:	e03d      	b.n	80025c0 <HAL_RCC_OscConfig+0x54c>
 8002544:	40023800 	.word	0x40023800
 8002548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_RCC_OscConfig+0x558>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d030      	beq.n	80025bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d129      	bne.n	80025bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d122      	bne.n	80025bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002582:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002584:	4293      	cmp	r3, r2
 8002586:	d119      	bne.n	80025bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	3b01      	subs	r3, #1
 8002596:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d10f      	bne.n	80025bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d0      	b.n	800278a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b67      	ldr	r3, [pc, #412]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 020f 	bic.w	r2, r3, #15
 80025fe:	4965      	ldr	r1, [pc, #404]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a58      	ldr	r2, [pc, #352]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800263a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a52      	ldr	r2, [pc, #328]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002652:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d040      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e073      	b.n	800278a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4936      	ldr	r1, [pc, #216]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c4:	f7fe fd10 	bl	80010e8 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe fd0c 	bl	80010e8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e053      	b.n	800278a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d210      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 020f 	bic.w	r2, r3, #15
 800270a:	4922      	ldr	r1, [pc, #136]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	; (800279c <HAL_RCC_ClockConfig+0x1cc>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1d0>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fc6c 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00
 8002798:	40023800 	.word	0x40023800
 800279c:	08026740 	.word	0x08026740
 80027a0:	20000004 	.word	0x20000004
 80027a4:	20000008 	.word	0x20000008

080027a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ac:	b094      	sub	sp, #80	; 0x50
 80027ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	647b      	str	r3, [r7, #68]	; 0x44
 80027b4:	2300      	movs	r3, #0
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b8:	2300      	movs	r3, #0
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027c0:	4b79      	ldr	r3, [pc, #484]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d00d      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x40>
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	f200 80e1 	bhi.w	8002994 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x34>
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027da:	e0db      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b73      	ldr	r3, [pc, #460]	; (80029ac <HAL_RCC_GetSysClockFreq+0x204>)
 80027de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e0:	e0db      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027e2:	4b73      	ldr	r3, [pc, #460]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80027e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e6:	e0d8      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e8:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027f2:	4b6d      	ldr	r3, [pc, #436]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d063      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fe:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	2200      	movs	r2, #0
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38
 8002808:	63fa      	str	r2, [r7, #60]	; 0x3c
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
 8002812:	2300      	movs	r3, #0
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
 8002816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800281a:	4622      	mov	r2, r4
 800281c:	462b      	mov	r3, r5
 800281e:	f04f 0000 	mov.w	r0, #0
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	0159      	lsls	r1, r3, #5
 8002828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282c:	0150      	lsls	r0, r2, #5
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4621      	mov	r1, r4
 8002834:	1a51      	subs	r1, r2, r1
 8002836:	6139      	str	r1, [r7, #16]
 8002838:	4629      	mov	r1, r5
 800283a:	eb63 0301 	sbc.w	r3, r3, r1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800284c:	4659      	mov	r1, fp
 800284e:	018b      	lsls	r3, r1, #6
 8002850:	4651      	mov	r1, sl
 8002852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002856:	4651      	mov	r1, sl
 8002858:	018a      	lsls	r2, r1, #6
 800285a:	4651      	mov	r1, sl
 800285c:	ebb2 0801 	subs.w	r8, r2, r1
 8002860:	4659      	mov	r1, fp
 8002862:	eb63 0901 	sbc.w	r9, r3, r1
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800287a:	4690      	mov	r8, r2
 800287c:	4699      	mov	r9, r3
 800287e:	4623      	mov	r3, r4
 8002880:	eb18 0303 	adds.w	r3, r8, r3
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	462b      	mov	r3, r5
 8002888:	eb49 0303 	adc.w	r3, r9, r3
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800289a:	4629      	mov	r1, r5
 800289c:	024b      	lsls	r3, r1, #9
 800289e:	4621      	mov	r1, r4
 80028a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028a4:	4621      	mov	r1, r4
 80028a6:	024a      	lsls	r2, r1, #9
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ae:	2200      	movs	r2, #0
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b8:	f7fd fcd0 	bl	800025c <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c4:	e058      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c6:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	099b      	lsrs	r3, r3, #6
 80028cc:	2200      	movs	r2, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	4611      	mov	r1, r2
 80028d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
 80028dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028e0:	4642      	mov	r2, r8
 80028e2:	464b      	mov	r3, r9
 80028e4:	f04f 0000 	mov.w	r0, #0
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	0159      	lsls	r1, r3, #5
 80028ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f2:	0150      	lsls	r0, r2, #5
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4641      	mov	r1, r8
 80028fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80028fe:	4649      	mov	r1, r9
 8002900:	eb63 0b01 	sbc.w	fp, r3, r1
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002918:	ebb2 040a 	subs.w	r4, r2, sl
 800291c:	eb63 050b 	sbc.w	r5, r3, fp
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	00eb      	lsls	r3, r5, #3
 800292a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800292e:	00e2      	lsls	r2, r4, #3
 8002930:	4614      	mov	r4, r2
 8002932:	461d      	mov	r5, r3
 8002934:	4643      	mov	r3, r8
 8002936:	18e3      	adds	r3, r4, r3
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	464b      	mov	r3, r9
 800293c:	eb45 0303 	adc.w	r3, r5, r3
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800294e:	4629      	mov	r1, r5
 8002950:	028b      	lsls	r3, r1, #10
 8002952:	4621      	mov	r1, r4
 8002954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002958:	4621      	mov	r1, r4
 800295a:	028a      	lsls	r2, r1, #10
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002962:	2200      	movs	r2, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	61fa      	str	r2, [r7, #28]
 8002968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800296c:	f7fd fc76 	bl	800025c <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4613      	mov	r3, r2
 8002976:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	3301      	adds	r3, #1
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800298a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002992:	e002      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800299c:	4618      	mov	r0, r3
 800299e:	3750      	adds	r7, #80	; 0x50
 80029a0:	46bd      	mov	sp, r7
 80029a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	00f42400 	.word	0x00f42400
 80029b0:	007a1200 	.word	0x007a1200

080029b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d0:	f7ff fff0 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0a9b      	lsrs	r3, r3, #10
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08026750 	.word	0x08026750

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f8:	f7ff ffdc 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0b5b      	lsrs	r3, r3, #13
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4903      	ldr	r1, [pc, #12]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08026750 	.word	0x08026750

08002a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d012      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a44:	4b69      	ldr	r3, [pc, #420]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a68      	ldr	r2, [pc, #416]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a4e:	6093      	str	r3, [r2, #8]
 8002a50:	4b66      	ldr	r3, [pc, #408]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	4964      	ldr	r1, [pc, #400]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d017      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a76:	4b5d      	ldr	r3, [pc, #372]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	4959      	ldr	r1, [pc, #356]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a94:	d101      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d017      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	494a      	ldr	r1, [pc, #296]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 808b 	beq.w	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	4a39      	ldr	r2, [pc, #228]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0c:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b24:	f7fe fae0 	bl	80010e8 <HAL_GetTick>
 8002b28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2c:	f7fe fadc 	bl	80010e8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e38f      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d035      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d02e      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d114      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe faa4 	bl	80010e8 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fe faa0 	bl	80010e8 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e351      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0ee      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bd2:	d111      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002be2:	400b      	ands	r3, r1
 8002be4:	4901      	ldr	r1, [pc, #4]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	0ffffcff 	.word	0x0ffffcff
 8002bf8:	4bac      	ldr	r3, [pc, #688]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4aab      	ldr	r2, [pc, #684]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c02:	6093      	str	r3, [r2, #8]
 8002c04:	4ba9      	ldr	r3, [pc, #676]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	49a6      	ldr	r1, [pc, #664]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c22:	4ba2      	ldr	r3, [pc, #648]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c28:	4aa0      	ldr	r2, [pc, #640]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c32:	4b9e      	ldr	r3, [pc, #632]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	499b      	ldr	r1, [pc, #620]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c50:	4b96      	ldr	r3, [pc, #600]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c5e:	4993      	ldr	r1, [pc, #588]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c72:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c80:	498a      	ldr	r1, [pc, #552]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c94:	4b85      	ldr	r3, [pc, #532]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca2:	4982      	ldr	r1, [pc, #520]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cb6:	4b7d      	ldr	r3, [pc, #500]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4979      	ldr	r1, [pc, #484]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd8:	4b74      	ldr	r3, [pc, #464]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f023 0203 	bic.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4971      	ldr	r1, [pc, #452]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cfa:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f023 020c 	bic.w	r2, r3, #12
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	4968      	ldr	r1, [pc, #416]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d1c:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	4960      	ldr	r1, [pc, #384]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d3e:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4c:	4957      	ldr	r1, [pc, #348]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d60:	4b52      	ldr	r3, [pc, #328]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	494f      	ldr	r1, [pc, #316]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	4946      	ldr	r1, [pc, #280]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002da4:	4b41      	ldr	r3, [pc, #260]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	493e      	ldr	r1, [pc, #248]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002dc6:	4b39      	ldr	r3, [pc, #228]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	4935      	ldr	r1, [pc, #212]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002de8:	4b30      	ldr	r3, [pc, #192]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df6:	492d      	ldr	r1, [pc, #180]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d011      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e0a:	4b28      	ldr	r3, [pc, #160]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e18:	4924      	ldr	r1, [pc, #144]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	4914      	ldr	r1, [pc, #80]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7c:	490b      	ldr	r1, [pc, #44]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00f      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea0:	4902      	ldr	r1, [pc, #8]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ebc:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	4986      	ldr	r1, [pc, #536]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ee0:	4b81      	ldr	r3, [pc, #516]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef0:	497d      	ldr	r1, [pc, #500]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d006      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80d6 	beq.w	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f0c:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a75      	ldr	r2, [pc, #468]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe f8e6 	bl	80010e8 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f20:	f7fe f8e2 	bl	80010e8 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e195      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f32:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d021      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11d      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f60:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	019a      	lsls	r2, r3, #6
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	4958      	ldr	r1, [pc, #352]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d02e      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb8:	d129      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fba:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fc8:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fce:	0f1b      	lsrs	r3, r3, #28
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	019a      	lsls	r2, r3, #6
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	041b      	lsls	r3, r3, #16
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	061b      	lsls	r3, r3, #24
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	071b      	lsls	r3, r3, #28
 8002fee:	493e      	ldr	r1, [pc, #248]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ff6:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffc:	f023 021f 	bic.w	r2, r3, #31
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	3b01      	subs	r3, #1
 8003006:	4938      	ldr	r1, [pc, #224]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01d      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800301a:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003020:	0e1b      	lsrs	r3, r3, #24
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003028:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302e:	0f1b      	lsrs	r3, r3, #28
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	019a      	lsls	r2, r3, #6
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	061b      	lsls	r3, r3, #24
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	4926      	ldr	r1, [pc, #152]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	019a      	lsls	r2, r3, #6
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	071b      	lsls	r3, r3, #28
 800307e:	491a      	ldr	r1, [pc, #104]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003092:	f7fe f829 	bl	80010e8 <HAL_GetTick>
 8003096:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800309a:	f7fe f825 	bl	80010e8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b64      	cmp	r3, #100	; 0x64
 80030a6:	d901      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0d8      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	f040 80ce 	bne.w	800325c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7fe f80c 	bl	80010e8 <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030d2:	e00b      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030d4:	f7fe f808 	bl	80010e8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d904      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0bb      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030ec:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f8:	d0ec      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003116:	2b00      	cmp	r3, #0
 8003118:	d02e      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d12a      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003122:	4b51      	ldr	r3, [pc, #324]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003130:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	0f1b      	lsrs	r3, r3, #28
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	019a      	lsls	r2, r3, #6
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	061b      	lsls	r3, r3, #24
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	071b      	lsls	r3, r3, #28
 8003156:	4944      	ldr	r1, [pc, #272]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800315e:	4b42      	ldr	r3, [pc, #264]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003164:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	493d      	ldr	r1, [pc, #244]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d022      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318c:	d11d      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800318e:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	0e1b      	lsrs	r3, r3, #24
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800319c:	4b32      	ldr	r3, [pc, #200]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	0f1b      	lsrs	r3, r3, #28
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	019a      	lsls	r2, r3, #6
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	061b      	lsls	r3, r3, #24
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	071b      	lsls	r3, r3, #28
 80031c2:	4929      	ldr	r1, [pc, #164]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d028      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031d6:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	0e1b      	lsrs	r3, r3, #24
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	019a      	lsls	r2, r3, #6
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	041b      	lsls	r3, r3, #16
 80031fc:	431a      	orrs	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	071b      	lsls	r3, r3, #28
 800320a:	4917      	ldr	r1, [pc, #92]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4911      	ldr	r1, [pc, #68]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003234:	f7fd ff58 	bl	80010e8 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800323c:	f7fd ff54 	bl	80010e8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e007      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325a:	d1ef      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800

0800326c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e049      	b.n	8003312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd fdf8 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f000 f9f6 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e054      	b.n	80033de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a26      	ldr	r2, [pc, #152]	; (80033ec <HAL_TIM_Base_Start_IT+0xd0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d022      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335e:	d01d      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d018      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <HAL_TIM_Base_Start_IT+0xe0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_TIM_Base_Start_IT+0xe4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_TIM_Base_Start_IT+0xe8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d115      	bne.n	80033c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_TIM_Base_Start_IT+0xec>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d015      	beq.n	80033da <HAL_TIM_Base_Start_IT+0xbe>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d011      	beq.n	80033da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	e008      	b.n	80033da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e000      	b.n	80033dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40010400 	.word	0x40010400
 8003400:	40014000 	.word	0x40014000
 8003404:	40001800 	.word	0x40001800
 8003408:	00010007 	.word	0x00010007

0800340c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0202 	mvn.w	r2, #2
 8003438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f905 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8f7 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f908 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0204 	mvn.w	r2, #4
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8db 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8cd 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f8de 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0208 	mvn.w	r2, #8
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2204      	movs	r2, #4
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8b1 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8a3 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8b4 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b10      	cmp	r3, #16
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0210 	mvn.w	r2, #16
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2208      	movs	r2, #8
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f887 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f879 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f88a 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0201 	mvn.w	r2, #1
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd faaa 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9a8 	bl	800390c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ca:	d10e      	bne.n	80035ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b80      	cmp	r3, #128	; 0x80
 80035d8:	d107      	bne.n	80035ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f99b 	bl	8003920 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d10e      	bne.n	8003616 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d107      	bne.n	8003616 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800360e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f838 	bl	8003686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d10e      	bne.n	8003642 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b20      	cmp	r3, #32
 8003630:	d107      	bne.n	8003642 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f06f 0220 	mvn.w	r2, #32
 800363a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f95b 	bl	80038f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <TIM_Base_SetConfig+0x114>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d00f      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3d      	ldr	r2, [pc, #244]	; (80037b4 <TIM_Base_SetConfig+0x118>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00b      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <TIM_Base_SetConfig+0x11c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <TIM_Base_SetConfig+0x120>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a3a      	ldr	r2, [pc, #232]	; (80037c0 <TIM_Base_SetConfig+0x124>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d108      	bne.n	80036ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2f      	ldr	r2, [pc, #188]	; (80037b0 <TIM_Base_SetConfig+0x114>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d027      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <TIM_Base_SetConfig+0x118>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d023      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <TIM_Base_SetConfig+0x11c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01f      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <TIM_Base_SetConfig+0x120>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <TIM_Base_SetConfig+0x124>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d017      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <TIM_Base_SetConfig+0x128>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <TIM_Base_SetConfig+0x12c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00f      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a26      	ldr	r2, [pc, #152]	; (80037cc <TIM_Base_SetConfig+0x130>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <TIM_Base_SetConfig+0x134>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <TIM_Base_SetConfig+0x138>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <TIM_Base_SetConfig+0x13c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d108      	bne.n	8003760 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <TIM_Base_SetConfig+0x114>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0xf8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <TIM_Base_SetConfig+0x124>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800
 80037d0:	40001800 	.word	0x40001800
 80037d4:	40001c00 	.word	0x40001c00
 80037d8:	40002000 	.word	0x40002000

080037dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e06d      	b.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a30      	ldr	r2, [pc, #192]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d108      	bne.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800382e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a20      	ldr	r2, [pc, #128]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003866:	d01d      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d10c      	bne.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40001800 	.word	0x40001800

080038f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e040      	b.n	80039c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd faec 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f82c 	bl	80039d0 <UART_SetConfig>
 8003978:	4603      	mov	r3, r0
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e022      	b.n	80039c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa84 	bl	8003e98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800399e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fb0b 	bl	8003fdc <UART_CheckIdleState>
 80039c6:	4603      	mov	r3, r0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4ba6      	ldr	r3, [pc, #664]	; (8003c94 <UART_SetConfig+0x2c4>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	6979      	ldr	r1, [r7, #20]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a94      	ldr	r2, [pc, #592]	; (8003c98 <UART_SetConfig+0x2c8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d120      	bne.n	8003a8e <UART_SetConfig+0xbe>
 8003a4c:	4b93      	ldr	r3, [pc, #588]	; (8003c9c <UART_SetConfig+0x2cc>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d816      	bhi.n	8003a88 <UART_SetConfig+0xb8>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <UART_SetConfig+0x90>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a7d 	.word	0x08003a7d
 8003a68:	08003a77 	.word	0x08003a77
 8003a6c:	08003a83 	.word	0x08003a83
 8003a70:	2301      	movs	r3, #1
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e150      	b.n	8003d18 <UART_SetConfig+0x348>
 8003a76:	2302      	movs	r3, #2
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e14d      	b.n	8003d18 <UART_SetConfig+0x348>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e14a      	b.n	8003d18 <UART_SetConfig+0x348>
 8003a82:	2308      	movs	r3, #8
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e147      	b.n	8003d18 <UART_SetConfig+0x348>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e144      	b.n	8003d18 <UART_SetConfig+0x348>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a83      	ldr	r2, [pc, #524]	; (8003ca0 <UART_SetConfig+0x2d0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d132      	bne.n	8003afe <UART_SetConfig+0x12e>
 8003a98:	4b80      	ldr	r3, [pc, #512]	; (8003c9c <UART_SetConfig+0x2cc>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b0c      	cmp	r3, #12
 8003aa4:	d828      	bhi.n	8003af8 <UART_SetConfig+0x128>
 8003aa6:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <UART_SetConfig+0xdc>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003af9 	.word	0x08003af9
 8003ab4:	08003af9 	.word	0x08003af9
 8003ab8:	08003af9 	.word	0x08003af9
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003af9 	.word	0x08003af9
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003af9 	.word	0x08003af9
 8003acc:	08003ae7 	.word	0x08003ae7
 8003ad0:	08003af9 	.word	0x08003af9
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003af9 	.word	0x08003af9
 8003adc:	08003af3 	.word	0x08003af3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e118      	b.n	8003d18 <UART_SetConfig+0x348>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	77fb      	strb	r3, [r7, #31]
 8003aea:	e115      	b.n	8003d18 <UART_SetConfig+0x348>
 8003aec:	2304      	movs	r3, #4
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e112      	b.n	8003d18 <UART_SetConfig+0x348>
 8003af2:	2308      	movs	r3, #8
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e10f      	b.n	8003d18 <UART_SetConfig+0x348>
 8003af8:	2310      	movs	r3, #16
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e10c      	b.n	8003d18 <UART_SetConfig+0x348>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a68      	ldr	r2, [pc, #416]	; (8003ca4 <UART_SetConfig+0x2d4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d120      	bne.n	8003b4a <UART_SetConfig+0x17a>
 8003b08:	4b64      	ldr	r3, [pc, #400]	; (8003c9c <UART_SetConfig+0x2cc>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b12:	2b30      	cmp	r3, #48	; 0x30
 8003b14:	d013      	beq.n	8003b3e <UART_SetConfig+0x16e>
 8003b16:	2b30      	cmp	r3, #48	; 0x30
 8003b18:	d814      	bhi.n	8003b44 <UART_SetConfig+0x174>
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d009      	beq.n	8003b32 <UART_SetConfig+0x162>
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d810      	bhi.n	8003b44 <UART_SetConfig+0x174>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <UART_SetConfig+0x15c>
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d006      	beq.n	8003b38 <UART_SetConfig+0x168>
 8003b2a:	e00b      	b.n	8003b44 <UART_SetConfig+0x174>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e0f2      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b32:	2302      	movs	r3, #2
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e0ef      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e0ec      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e0e9      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b44:	2310      	movs	r3, #16
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e0e6      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <UART_SetConfig+0x2d8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d120      	bne.n	8003b96 <UART_SetConfig+0x1c6>
 8003b54:	4b51      	ldr	r3, [pc, #324]	; (8003c9c <UART_SetConfig+0x2cc>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b60:	d013      	beq.n	8003b8a <UART_SetConfig+0x1ba>
 8003b62:	2bc0      	cmp	r3, #192	; 0xc0
 8003b64:	d814      	bhi.n	8003b90 <UART_SetConfig+0x1c0>
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	d009      	beq.n	8003b7e <UART_SetConfig+0x1ae>
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d810      	bhi.n	8003b90 <UART_SetConfig+0x1c0>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <UART_SetConfig+0x1a8>
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d006      	beq.n	8003b84 <UART_SetConfig+0x1b4>
 8003b76:	e00b      	b.n	8003b90 <UART_SetConfig+0x1c0>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e0cc      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e0c9      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b84:	2304      	movs	r3, #4
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e0c6      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e0c3      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b90:	2310      	movs	r3, #16
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e0c0      	b.n	8003d18 <UART_SetConfig+0x348>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a44      	ldr	r2, [pc, #272]	; (8003cac <UART_SetConfig+0x2dc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d125      	bne.n	8003bec <UART_SetConfig+0x21c>
 8003ba0:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <UART_SetConfig+0x2cc>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bae:	d017      	beq.n	8003be0 <UART_SetConfig+0x210>
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb4:	d817      	bhi.n	8003be6 <UART_SetConfig+0x216>
 8003bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bba:	d00b      	beq.n	8003bd4 <UART_SetConfig+0x204>
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc0:	d811      	bhi.n	8003be6 <UART_SetConfig+0x216>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <UART_SetConfig+0x1fe>
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bca:	d006      	beq.n	8003bda <UART_SetConfig+0x20a>
 8003bcc:	e00b      	b.n	8003be6 <UART_SetConfig+0x216>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e0a1      	b.n	8003d18 <UART_SetConfig+0x348>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e09e      	b.n	8003d18 <UART_SetConfig+0x348>
 8003bda:	2304      	movs	r3, #4
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e09b      	b.n	8003d18 <UART_SetConfig+0x348>
 8003be0:	2308      	movs	r3, #8
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e098      	b.n	8003d18 <UART_SetConfig+0x348>
 8003be6:	2310      	movs	r3, #16
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e095      	b.n	8003d18 <UART_SetConfig+0x348>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2f      	ldr	r2, [pc, #188]	; (8003cb0 <UART_SetConfig+0x2e0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d125      	bne.n	8003c42 <UART_SetConfig+0x272>
 8003bf6:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <UART_SetConfig+0x2cc>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c04:	d017      	beq.n	8003c36 <UART_SetConfig+0x266>
 8003c06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c0a:	d817      	bhi.n	8003c3c <UART_SetConfig+0x26c>
 8003c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c10:	d00b      	beq.n	8003c2a <UART_SetConfig+0x25a>
 8003c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c16:	d811      	bhi.n	8003c3c <UART_SetConfig+0x26c>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <UART_SetConfig+0x254>
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c20:	d006      	beq.n	8003c30 <UART_SetConfig+0x260>
 8003c22:	e00b      	b.n	8003c3c <UART_SetConfig+0x26c>
 8003c24:	2301      	movs	r3, #1
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e076      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e073      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c30:	2304      	movs	r3, #4
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e070      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c36:	2308      	movs	r3, #8
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e06d      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e06a      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <UART_SetConfig+0x2e4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d138      	bne.n	8003cbe <UART_SetConfig+0x2ee>
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <UART_SetConfig+0x2cc>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c5a:	d017      	beq.n	8003c8c <UART_SetConfig+0x2bc>
 8003c5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c60:	d82a      	bhi.n	8003cb8 <UART_SetConfig+0x2e8>
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c66:	d00b      	beq.n	8003c80 <UART_SetConfig+0x2b0>
 8003c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6c:	d824      	bhi.n	8003cb8 <UART_SetConfig+0x2e8>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <UART_SetConfig+0x2aa>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	d006      	beq.n	8003c86 <UART_SetConfig+0x2b6>
 8003c78:	e01e      	b.n	8003cb8 <UART_SetConfig+0x2e8>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e04b      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c80:	2302      	movs	r3, #2
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e048      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c86:	2304      	movs	r3, #4
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e045      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e042      	b.n	8003d18 <UART_SetConfig+0x348>
 8003c92:	bf00      	nop
 8003c94:	efff69f3 	.word	0xefff69f3
 8003c98:	40011000 	.word	0x40011000
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40004400 	.word	0x40004400
 8003ca4:	40004800 	.word	0x40004800
 8003ca8:	40004c00 	.word	0x40004c00
 8003cac:	40005000 	.word	0x40005000
 8003cb0:	40011400 	.word	0x40011400
 8003cb4:	40007800 	.word	0x40007800
 8003cb8:	2310      	movs	r3, #16
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e02c      	b.n	8003d18 <UART_SetConfig+0x348>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a72      	ldr	r2, [pc, #456]	; (8003e8c <UART_SetConfig+0x4bc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d125      	bne.n	8003d14 <UART_SetConfig+0x344>
 8003cc8:	4b71      	ldr	r3, [pc, #452]	; (8003e90 <UART_SetConfig+0x4c0>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cd6:	d017      	beq.n	8003d08 <UART_SetConfig+0x338>
 8003cd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cdc:	d817      	bhi.n	8003d0e <UART_SetConfig+0x33e>
 8003cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce2:	d00b      	beq.n	8003cfc <UART_SetConfig+0x32c>
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce8:	d811      	bhi.n	8003d0e <UART_SetConfig+0x33e>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <UART_SetConfig+0x326>
 8003cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf2:	d006      	beq.n	8003d02 <UART_SetConfig+0x332>
 8003cf4:	e00b      	b.n	8003d0e <UART_SetConfig+0x33e>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e00d      	b.n	8003d18 <UART_SetConfig+0x348>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e00a      	b.n	8003d18 <UART_SetConfig+0x348>
 8003d02:	2304      	movs	r3, #4
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e007      	b.n	8003d18 <UART_SetConfig+0x348>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e004      	b.n	8003d18 <UART_SetConfig+0x348>
 8003d0e:	2310      	movs	r3, #16
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e001      	b.n	8003d18 <UART_SetConfig+0x348>
 8003d14:	2310      	movs	r3, #16
 8003d16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d20:	d15b      	bne.n	8003dda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d22:	7ffb      	ldrb	r3, [r7, #31]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d828      	bhi.n	8003d7a <UART_SetConfig+0x3aa>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0x360>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	08003d65 	.word	0x08003d65
 8003d3c:	08003d7b 	.word	0x08003d7b
 8003d40:	08003d6b 	.word	0x08003d6b
 8003d44:	08003d7b 	.word	0x08003d7b
 8003d48:	08003d7b 	.word	0x08003d7b
 8003d4c:	08003d7b 	.word	0x08003d7b
 8003d50:	08003d73 	.word	0x08003d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d54:	f7fe fe3a 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8003d58:	61b8      	str	r0, [r7, #24]
        break;
 8003d5a:	e013      	b.n	8003d84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d5c:	f7fe fe4a 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8003d60:	61b8      	str	r0, [r7, #24]
        break;
 8003d62:	e00f      	b.n	8003d84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d64:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <UART_SetConfig+0x4c4>)
 8003d66:	61bb      	str	r3, [r7, #24]
        break;
 8003d68:	e00c      	b.n	8003d84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6a:	f7fe fd1d 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8003d6e:	61b8      	str	r0, [r7, #24]
        break;
 8003d70:	e008      	b.n	8003d84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d76:	61bb      	str	r3, [r7, #24]
        break;
 8003d78:	e004      	b.n	8003d84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	77bb      	strb	r3, [r7, #30]
        break;
 8003d82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d074      	beq.n	8003e74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	005a      	lsls	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	441a      	add	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	d916      	bls.n	8003dd4 <UART_SetConfig+0x404>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d212      	bcs.n	8003dd4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f023 030f 	bic.w	r3, r3, #15
 8003db6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	89fb      	ldrh	r3, [r7, #14]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	89fa      	ldrh	r2, [r7, #14]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	e04f      	b.n	8003e74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	77bb      	strb	r3, [r7, #30]
 8003dd8:	e04c      	b.n	8003e74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dda:	7ffb      	ldrb	r3, [r7, #31]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d828      	bhi.n	8003e32 <UART_SetConfig+0x462>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0x418>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e15 	.word	0x08003e15
 8003df0:	08003e1d 	.word	0x08003e1d
 8003df4:	08003e33 	.word	0x08003e33
 8003df8:	08003e23 	.word	0x08003e23
 8003dfc:	08003e33 	.word	0x08003e33
 8003e00:	08003e33 	.word	0x08003e33
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7fe fdde 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8003e10:	61b8      	str	r0, [r7, #24]
        break;
 8003e12:	e013      	b.n	8003e3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e14:	f7fe fdee 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8003e18:	61b8      	str	r0, [r7, #24]
        break;
 8003e1a:	e00f      	b.n	8003e3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <UART_SetConfig+0x4c4>)
 8003e1e:	61bb      	str	r3, [r7, #24]
        break;
 8003e20:	e00c      	b.n	8003e3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe fcc1 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8003e26:	61b8      	str	r0, [r7, #24]
        break;
 8003e28:	e008      	b.n	8003e3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	61bb      	str	r3, [r7, #24]
        break;
 8003e30:	e004      	b.n	8003e3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	77bb      	strb	r3, [r7, #30]
        break;
 8003e3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d018      	beq.n	8003e74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	085a      	lsrs	r2, r3, #1
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	441a      	add	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b0f      	cmp	r3, #15
 8003e5a:	d909      	bls.n	8003e70 <UART_SetConfig+0x4a0>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d205      	bcs.n	8003e70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	e001      	b.n	8003e74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40007c00 	.word	0x40007c00
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400

08003e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01a      	beq.n	8003fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f96:	d10a      	bne.n	8003fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fec:	f7fd f87c 	bl	80010e8 <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d10e      	bne.n	800401e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f831 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e027      	b.n	800406e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b04      	cmp	r3, #4
 800402a:	d10e      	bne.n	800404a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f81b 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e011      	b.n	800406e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b09c      	sub	sp, #112	; 0x70
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004086:	e0a7      	b.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408e:	f000 80a3 	beq.w	80041d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fd f829 	bl	80010e8 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80040a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d13f      	bne.n	8004128 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040bc:	667b      	str	r3, [r7, #100]	; 0x64
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e6      	bne.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	663b      	str	r3, [r7, #96]	; 0x60
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3308      	adds	r3, #8
 80040f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80040fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e068      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d050      	beq.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004144:	d148      	bne.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800414e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004164:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
 8004170:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e6      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	613b      	str	r3, [r7, #16]
   return(result);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	66bb      	str	r3, [r7, #104]	; 0x68
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041a2:	623a      	str	r2, [r7, #32]
 80041a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	69f9      	ldr	r1, [r7, #28]
 80041a8:	6a3a      	ldr	r2, [r7, #32]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e010      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	f43f af48 	beq.w	8004088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3770      	adds	r7, #112	; 0x70
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
    a->var = var;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	601a      	str	r2, [r3, #0]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	605a      	str	r2, [r3, #4]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
    a->time = duration;
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <lv_anim_set_delay>:
 * Set a delay before starting the animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay before the animation in milliseconds
 */
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	425a      	negs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <lv_anim_set_start_cb>:
 * Set a function call when the animation really starts (considering `delay`)
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start_cb  a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_start_cb_t start_cb)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	609a      	str	r2, [r3, #8]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	60da      	str	r2, [r3, #12]
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <lv_scr_act>:
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 80042da:	f01b fcf1 	bl	801fcc0 <lv_disp_get_default>
 80042de:	4603      	mov	r3, r0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f803 	bl	80042ec <lv_disp_get_scr_act>
 80042e6:	4603      	mov	r3, r0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}

080042ec <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <lv_disp_get_scr_act+0x14>
 80042fa:	f01b fce1 	bl	801fcc0 <lv_disp_get_default>
 80042fe:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 8004306:	2300      	movs	r3, #0
 8004308:	e001      	b.n	800430e <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <lv_disp_get_scr_prev+0x14>
 8004324:	f01b fccc 	bl	801fcc0 <lv_disp_get_default>
 8004328:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	e001      	b.n	8004338 <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af02      	add	r7, sp, #8
 8004346:	6078      	str	r0, [r7, #4]
    lv_scr_load_anim(scr, LV_SCR_LOAD_ANIM_NONE, 0, 0, false);
 8004348:	2300      	movs	r3, #0
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2300      	movs	r3, #0
 800434e:	2200      	movs	r2, #0
 8004350:	2100      	movs	r1, #0
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f83e 	bl	80043d4 <lv_scr_load_anim>
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <lv_disp_get_layer_top+0x14>
 800436e:	f01b fca7 	bl	801fcc0 <lv_disp_get_default>
 8004372:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	e001      	b.n	8004382 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <lv_disp_get_layer_sys+0x14>
 8004398:	f01b fc92 	bl	801fcc0 <lv_disp_get_default>
 800439c:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e001      	b.n	80043ac <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <lv_disp_get_theme+0x14>
 80043c2:	f01b fc7d 	bl	801fcc0 <lv_disp_get_default>
 80043c6:	6078      	str	r0, [r7, #4]
    return disp->theme;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <lv_scr_load_anim>:
 * @param time time of the animation
 * @param delay delay before the transition
 * @param auto_del true: automatically delete the old screen
 */
void lv_scr_load_anim(lv_obj_t * new_scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, bool auto_del)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b0a8      	sub	sp, #160	; 0xa0
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	460b      	mov	r3, r1
 80043e2:	72fb      	strb	r3, [r7, #11]

    lv_disp_t * d = lv_obj_get_disp(new_scr);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f009 fd55 	bl	800de94 <lv_obj_get_disp>
 80043ea:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    lv_obj_t * act_scr = lv_scr_act();
 80043ee:	f7ff ff72 	bl	80042d6 <lv_scr_act>
 80043f2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /*If an other screen load animation is in progress
     *make target screen loaded immediately. */
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 80043f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d035      	beq.n	800446c <lv_scr_load_anim+0x98>
 8004400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800440a:	429a      	cmp	r2, r3
 800440c:	d02e      	beq.n	800446c <lv_scr_load_anim+0x98>
        scr_load_internal(d->scr_to_load);
 800440e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fa7e 	bl	8004916 <scr_load_internal>
        lv_anim_del(d->scr_to_load, NULL);
 800441a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f01b fe00 	bl	8020028 <lv_anim_del>
        lv_obj_set_pos(d->scr_to_load, 0, 0);
 8004428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f004 f81f 	bl	8008476 <lv_obj_set_pos>
        lv_obj_remove_local_style_prop(d->scr_to_load, LV_STYLE_OPA, 0);
 8004438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2200      	movs	r2, #0
 8004440:	2160      	movs	r1, #96	; 0x60
 8004442:	4618      	mov	r0, r3
 8004444:	f008 fb2b 	bl	800ca9e <lv_obj_remove_local_style_prop>

        if(d->del_prev) {
 8004448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800444c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <lv_scr_load_anim+0x8e>
            lv_obj_del(act_scr);
 800445a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800445e:	f009 fcba 	bl	800ddd6 <lv_obj_del>
        }
        act_scr = d->scr_to_load;
 8004462:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    }

    d->scr_to_load = new_scr;
 800446c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	619a      	str	r2, [r3, #24]

    if(d->prev_scr && d->del_prev) {
 8004474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d012      	beq.n	80044a4 <lv_scr_load_anim+0xd0>
 800447e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <lv_scr_load_anim+0xd0>
        lv_obj_del(d->prev_scr);
 8004490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4618      	mov	r0, r3
 8004498:	f009 fc9d 	bl	800ddd6 <lv_obj_del>
        d->prev_scr = NULL;
 800449c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a0:	2200      	movs	r2, #0
 80044a2:	615a      	str	r2, [r3, #20]
    }

    d->draw_prev_over_act = is_out_anim(anim_type);
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fb04 	bl	8004ab4 <is_out_anim>
 80044ac:	4603      	mov	r3, r0
 80044ae:	4619      	mov	r1, r3
 80044b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80044b4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80044b8:	f361 0300 	bfi	r3, r1, #0, #1
 80044bc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    d->del_prev = auto_del;
 80044c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80044c4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80044c8:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 80044cc:	f361 0341 	bfi	r3, r1, #1, #1
 80044d0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    /*Be sure there is no other animation on the screens*/
    lv_anim_del(new_scr, NULL);
 80044d4:	2100      	movs	r1, #0
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f01b fda6 	bl	8020028 <lv_anim_del>
    lv_anim_del(lv_scr_act(), NULL);
 80044dc:	f7ff fefb 	bl	80042d6 <lv_scr_act>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f01b fd9f 	bl	8020028 <lv_anim_del>

    /*Be sure both screens are in a normal position*/
    lv_obj_set_pos(new_scr, 0, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2100      	movs	r1, #0
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f003 ffc1 	bl	8008476 <lv_obj_set_pos>
    lv_obj_set_pos(lv_scr_act(), 0, 0);
 80044f4:	f7ff feef 	bl	80042d6 <lv_scr_act>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2200      	movs	r2, #0
 80044fc:	2100      	movs	r1, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f003 ffb9 	bl	8008476 <lv_obj_set_pos>
    lv_obj_remove_local_style_prop(new_scr, LV_STYLE_OPA, 0);
 8004504:	2200      	movs	r2, #0
 8004506:	2160      	movs	r1, #96	; 0x60
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f008 fac8 	bl	800ca9e <lv_obj_remove_local_style_prop>
    lv_obj_remove_local_style_prop(lv_scr_act(), LV_STYLE_OPA, 0);
 800450e:	f7ff fee2 	bl	80042d6 <lv_scr_act>
 8004512:	4603      	mov	r3, r0
 8004514:	2200      	movs	r2, #0
 8004516:	2160      	movs	r1, #96	; 0x60
 8004518:	4618      	mov	r0, r3
 800451a:	f008 fac0 	bl	800ca9e <lv_obj_remove_local_style_prop>


    /*Shortcut for immediate load*/
    if(time == 0 && delay == 0) {
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <lv_scr_load_anim+0x15e>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <lv_scr_load_anim+0x15e>
        scr_load_internal(new_scr);
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f9f3 	bl	8004916 <scr_load_internal>
 8004530:	e1c8      	b.n	80048c4 <lv_scr_load_anim+0x4f0>
        return;
    }

    lv_anim_t a_new;
    lv_anim_init(&a_new);
 8004532:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004536:	4618      	mov	r0, r3
 8004538:	f01b fcd8 	bl	801feec <lv_anim_init>
    lv_anim_set_var(&a_new, new_scr);
 800453c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fe5d 	bl	8004202 <lv_anim_set_var>
    lv_anim_set_start_cb(&a_new, scr_load_anim_start);
 8004548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800454c:	49df      	ldr	r1, [pc, #892]	; (80048cc <lv_scr_load_anim+0x4f8>)
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fea5 	bl	800429e <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a_new, scr_anim_ready);
 8004554:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004558:	49dd      	ldr	r1, [pc, #884]	; (80048d0 <lv_scr_load_anim+0x4fc>)
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fead 	bl	80042ba <lv_anim_set_ready_cb>
    lv_anim_set_time(&a_new, time);
 8004560:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fe67 	bl	800423a <lv_anim_set_time>
    lv_anim_set_delay(&a_new, delay);
 800456c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fe6f 	bl	8004256 <lv_anim_set_delay>

    lv_anim_t a_old;
    lv_anim_init(&a_old);
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	4618      	mov	r0, r3
 800457e:	f01b fcb5 	bl	801feec <lv_anim_init>
    lv_anim_set_var(&a_old, d->act_scr);
 8004582:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	f107 0310 	add.w	r3, r7, #16
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fe37 	bl	8004202 <lv_anim_set_var>
    lv_anim_set_time(&a_old, time);
 8004594:	f107 0310 	add.w	r3, r7, #16
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fe4d 	bl	800423a <lv_anim_set_time>
    lv_anim_set_delay(&a_old, delay);
 80045a0:	f107 0310 	add.w	r3, r7, #16
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fe55 	bl	8004256 <lv_anim_set_delay>

    switch(anim_type) {
 80045ac:	7afb      	ldrb	r3, [r7, #11]
 80045ae:	2b0e      	cmp	r3, #14
 80045b0:	f200 8178 	bhi.w	80048a4 <lv_scr_load_anim+0x4d0>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <lv_scr_load_anim+0x1e8>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045f9 	.word	0x080045f9
 80045c0:	08004615 	.word	0x08004615
 80045c4:	0800463b 	.word	0x0800463b
 80045c8:	08004661 	.word	0x08004661
 80045cc:	08004687 	.word	0x08004687
 80045d0:	080046ad 	.word	0x080046ad
 80045d4:	080046f7 	.word	0x080046f7
 80045d8:	08004741 	.word	0x08004741
 80045dc:	0800478b 	.word	0x0800478b
 80045e0:	080047d5 	.word	0x080047d5
 80045e4:	080047f1 	.word	0x080047f1
 80045e8:	0800480d 	.word	0x0800480d
 80045ec:	08004833 	.word	0x08004833
 80045f0:	08004859 	.word	0x08004859
 80045f4:	0800487f 	.word	0x0800487f
        case LV_SCR_LOAD_ANIM_NONE:
            /*Create a dummy animation to apply the delay*/
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 80045f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045fc:	49b5      	ldr	r1, [pc, #724]	; (80048d4 <lv_scr_load_anim+0x500>)
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fe0d 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, 0, 0);
 8004604:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004608:	2200      	movs	r2, #0
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fe31 	bl	8004274 <lv_anim_set_values>
            break;
 8004612:	e147      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_LEFT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 8004614:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004618:	49ae      	ldr	r1, [pc, #696]	; (80048d4 <lv_scr_load_anim+0x500>)
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fdff 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 8004620:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004624:	f01b fb58 	bl	801fcd8 <lv_disp_get_hor_res>
 8004628:	4603      	mov	r3, r0
 800462a:	4619      	mov	r1, r3
 800462c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004630:	2200      	movs	r2, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fe1e 	bl	8004274 <lv_anim_set_values>
            break;
 8004638:	e134      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_RIGHT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 800463a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800463e:	49a5      	ldr	r1, [pc, #660]	; (80048d4 <lv_scr_load_anim+0x500>)
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fdec 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 8004646:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800464a:	f01b fb45 	bl	801fcd8 <lv_disp_get_hor_res>
 800464e:	4603      	mov	r3, r0
 8004650:	4259      	negs	r1, r3
 8004652:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004656:	2200      	movs	r2, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fe0b 	bl	8004274 <lv_anim_set_values>
            break;
 800465e:	e121      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_TOP:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 8004660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004664:	499c      	ldr	r1, [pc, #624]	; (80048d8 <lv_scr_load_anim+0x504>)
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fdd9 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 800466c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004670:	f01b fb58 	bl	801fd24 <lv_disp_get_ver_res>
 8004674:	4603      	mov	r3, r0
 8004676:	4619      	mov	r1, r3
 8004678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800467c:	2200      	movs	r2, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fdf8 	bl	8004274 <lv_anim_set_values>
            break;
 8004684:	e10e      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_BOTTOM:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 8004686:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800468a:	4993      	ldr	r1, [pc, #588]	; (80048d8 <lv_scr_load_anim+0x504>)
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fdc6 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 8004692:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004696:	f01b fb45 	bl	801fd24 <lv_disp_get_ver_res>
 800469a:	4603      	mov	r3, r0
 800469c:	4259      	negs	r1, r3
 800469e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046a2:	2200      	movs	r2, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fde5 	bl	8004274 <lv_anim_set_values>
            break;
 80046aa:	e0fb      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_LEFT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 80046ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046b0:	4988      	ldr	r1, [pc, #544]	; (80048d4 <lv_scr_load_anim+0x500>)
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fdb3 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 80046b8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80046bc:	f01b fb0c 	bl	801fcd8 <lv_disp_get_hor_res>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4619      	mov	r1, r3
 80046c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046c8:	2200      	movs	r2, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fdd2 	bl	8004274 <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_x_anim);
 80046d0:	f107 0310 	add.w	r3, r7, #16
 80046d4:	497f      	ldr	r1, [pc, #508]	; (80048d4 <lv_scr_load_anim+0x500>)
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fda1 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 80046dc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80046e0:	f01b fafa 	bl	801fcd8 <lv_disp_get_hor_res>
 80046e4:	4603      	mov	r3, r0
 80046e6:	425a      	negs	r2, r3
 80046e8:	f107 0310 	add.w	r3, r7, #16
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fdc0 	bl	8004274 <lv_anim_set_values>
            break;
 80046f4:	e0d6      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_RIGHT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 80046f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046fa:	4976      	ldr	r1, [pc, #472]	; (80048d4 <lv_scr_load_anim+0x500>)
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fd8e 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 8004702:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004706:	f01b fae7 	bl	801fcd8 <lv_disp_get_hor_res>
 800470a:	4603      	mov	r3, r0
 800470c:	4259      	negs	r1, r3
 800470e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004712:	2200      	movs	r2, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fdad 	bl	8004274 <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_x_anim);
 800471a:	f107 0310 	add.w	r3, r7, #16
 800471e:	496d      	ldr	r1, [pc, #436]	; (80048d4 <lv_scr_load_anim+0x500>)
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fd7c 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 8004726:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800472a:	f01b fad5 	bl	801fcd8 <lv_disp_get_hor_res>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	f107 0310 	add.w	r3, r7, #16
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fd9b 	bl	8004274 <lv_anim_set_values>
            break;
 800473e:	e0b1      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_TOP:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 8004740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004744:	4964      	ldr	r1, [pc, #400]	; (80048d8 <lv_scr_load_anim+0x504>)
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fd69 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 800474c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004750:	f01b fae8 	bl	801fd24 <lv_disp_get_ver_res>
 8004754:	4603      	mov	r3, r0
 8004756:	4619      	mov	r1, r3
 8004758:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800475c:	2200      	movs	r2, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fd88 	bl	8004274 <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_y_anim);
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	495b      	ldr	r1, [pc, #364]	; (80048d8 <lv_scr_load_anim+0x504>)
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fd57 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8004770:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004774:	f01b fad6 	bl	801fd24 <lv_disp_get_ver_res>
 8004778:	4603      	mov	r3, r0
 800477a:	425a      	negs	r2, r3
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fd76 	bl	8004274 <lv_anim_set_values>
            break;
 8004788:	e08c      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_BOTTOM:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 800478a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800478e:	4952      	ldr	r1, [pc, #328]	; (80048d8 <lv_scr_load_anim+0x504>)
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fd44 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 8004796:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800479a:	f01b fac3 	bl	801fd24 <lv_disp_get_ver_res>
 800479e:	4603      	mov	r3, r0
 80047a0:	4259      	negs	r1, r3
 80047a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047a6:	2200      	movs	r2, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fd63 	bl	8004274 <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_y_anim);
 80047ae:	f107 0310 	add.w	r3, r7, #16
 80047b2:	4949      	ldr	r1, [pc, #292]	; (80048d8 <lv_scr_load_anim+0x504>)
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fd32 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 80047ba:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80047be:	f01b fab1 	bl	801fd24 <lv_disp_get_ver_res>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	f107 0310 	add.w	r3, r7, #16
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fd51 	bl	8004274 <lv_anim_set_values>
            break;
 80047d2:	e067      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_FADE_IN:
            lv_anim_set_exec_cb(&a_new, opa_scale_anim);
 80047d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047d8:	4940      	ldr	r1, [pc, #256]	; (80048dc <lv_scr_load_anim+0x508>)
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fd1f 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, LV_OPA_TRANSP, LV_OPA_COVER);
 80047e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047e4:	22ff      	movs	r2, #255	; 0xff
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fd43 	bl	8004274 <lv_anim_set_values>
            break;
 80047ee:	e059      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_FADE_OUT:
            lv_anim_set_exec_cb(&a_old, opa_scale_anim);
 80047f0:	f107 0310 	add.w	r3, r7, #16
 80047f4:	4939      	ldr	r1, [pc, #228]	; (80048dc <lv_scr_load_anim+0x508>)
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fd11 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, LV_OPA_COVER, LV_OPA_TRANSP);
 80047fc:	f107 0310 	add.w	r3, r7, #16
 8004800:	2200      	movs	r2, #0
 8004802:	21ff      	movs	r1, #255	; 0xff
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fd35 	bl	8004274 <lv_anim_set_values>
            break;
 800480a:	e04b      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_LEFT:
            lv_anim_set_exec_cb(&a_old, set_x_anim);
 800480c:	f107 0310 	add.w	r3, r7, #16
 8004810:	4930      	ldr	r1, [pc, #192]	; (80048d4 <lv_scr_load_anim+0x500>)
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fd03 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 8004818:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800481c:	f01b fa5c 	bl	801fcd8 <lv_disp_get_hor_res>
 8004820:	4603      	mov	r3, r0
 8004822:	425a      	negs	r2, r3
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fd22 	bl	8004274 <lv_anim_set_values>
            break;
 8004830:	e038      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_RIGHT:
            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	4927      	ldr	r1, [pc, #156]	; (80048d4 <lv_scr_load_anim+0x500>)
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fcf0 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 800483e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004842:	f01b fa49 	bl	801fcd8 <lv_disp_get_hor_res>
 8004846:	4603      	mov	r3, r0
 8004848:	461a      	mov	r2, r3
 800484a:	f107 0310 	add.w	r3, r7, #16
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fd0f 	bl	8004274 <lv_anim_set_values>
            break;
 8004856:	e025      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_TOP:
            lv_anim_set_exec_cb(&a_old, set_y_anim);
 8004858:	f107 0310 	add.w	r3, r7, #16
 800485c:	491e      	ldr	r1, [pc, #120]	; (80048d8 <lv_scr_load_anim+0x504>)
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fcdd 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8004864:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004868:	f01b fa5c 	bl	801fd24 <lv_disp_get_ver_res>
 800486c:	4603      	mov	r3, r0
 800486e:	425a      	negs	r2, r3
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fcfc 	bl	8004274 <lv_anim_set_values>
            break;
 800487c:	e012      	b.n	80048a4 <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_BOTTOM:
            lv_anim_set_exec_cb(&a_old, set_y_anim);
 800487e:	f107 0310 	add.w	r3, r7, #16
 8004882:	4915      	ldr	r1, [pc, #84]	; (80048d8 <lv_scr_load_anim+0x504>)
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fcca 	bl	800421e <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 800488a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800488e:	f01b fa49 	bl	801fd24 <lv_disp_get_ver_res>
 8004892:	4603      	mov	r3, r0
 8004894:	461a      	mov	r2, r3
 8004896:	f107 0310 	add.w	r3, r7, #16
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fce9 	bl	8004274 <lv_anim_set_values>
            break;
 80048a2:	bf00      	nop
    }

    lv_event_send(act_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 80048a4:	2200      	movs	r2, #0
 80048a6:	2125      	movs	r1, #37	; 0x25
 80048a8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80048ac:	f000 f922 	bl	8004af4 <lv_event_send>

    lv_anim_start(&a_new);
 80048b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048b4:	4618      	mov	r0, r3
 80048b6:	f01b fb3f 	bl	801ff38 <lv_anim_start>
    lv_anim_start(&a_old);
 80048ba:	f107 0310 	add.w	r3, r7, #16
 80048be:	4618      	mov	r0, r3
 80048c0:	f01b fb3a 	bl	801ff38 <lv_anim_start>
}
 80048c4:	37a0      	adds	r7, #160	; 0xa0
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	08004991 	.word	0x08004991
 80048d0:	08004a29 	.word	0x08004a29
 80048d4:	080049ed 	.word	0x080049ed
 80048d8:	08004a0b 	.word	0x08004a0b
 80048dc:	080049cd 	.word	0x080049cd

080048e0 <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <lv_disp_is_invalidation_enabled+0x14>
 80048ee:	f01b f9e7 	bl	801fcc0 <lv_disp_get_default>
 80048f2:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <lv_disp_is_invalidation_enabled+0x1e>
        LV_LOG_WARN("no display registered");
        return false;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e007      	b.n	800490e <lv_disp_is_invalidation_enabled+0x2e>
    }

    return (disp->inv_en_cnt > 0);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004904:	2b00      	cmp	r3, #0
 8004906:	bfcc      	ite	gt
 8004908:	2301      	movgt	r3, #1
 800490a:	2300      	movle	r3, #0
 800490c:	b2db      	uxtb	r3, r3
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <scr_load_internal>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void scr_load_internal(lv_obj_t * scr)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(scr);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f009 fab8 	bl	800de94 <lv_obj_get_disp>
 8004924:	60f8      	str	r0, [r7, #12]
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02d      	beq.n	8004988 <scr_load_internal+0x72>

    lv_obj_t * old_scr = d->act_scr;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	60bb      	str	r3, [r7, #8]

    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <scr_load_internal+0x2e>
 800493a:	2200      	movs	r2, #0
 800493c:	2125      	movs	r1, #37	; 0x25
 800493e:	68b8      	ldr	r0, [r7, #8]
 8004940:	f000 f8d8 	bl	8004af4 <lv_event_send>
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <scr_load_internal+0x40>
 800494c:	2200      	movs	r2, #0
 800494e:	2126      	movs	r1, #38	; 0x26
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f8cf 	bl	8004af4 <lv_event_send>

    d->act_scr = scr;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	611a      	str	r2, [r3, #16]

    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOADED, NULL);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <scr_load_internal+0x58>
 8004964:	2200      	movs	r2, #0
 8004966:	2127      	movs	r1, #39	; 0x27
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8c3 	bl	8004af4 <lv_event_send>
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <scr_load_internal+0x6a>
 8004976:	2200      	movs	r2, #0
 8004978:	2128      	movs	r1, #40	; 0x28
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	f000 f8ba 	bl	8004af4 <lv_event_send>

    lv_obj_invalidate(scr);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f004 fe6c 	bl	800965e <lv_obj_invalidate>
 8004986:	e000      	b.n	800498a <scr_load_internal+0x74>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8004988:	bf00      	nop
}
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <scr_load_anim_start>:

static void scr_load_anim_start(lv_anim_t * a)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f009 fa79 	bl	800de94 <lv_obj_get_disp>
 80049a2:	60f8      	str	r0, [r7, #12]

    d->prev_scr = lv_scr_act();
 80049a4:	f7ff fc97 	bl	80042d6 <lv_scr_act>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	615a      	str	r2, [r3, #20]
    d->act_scr = a->var;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	611a      	str	r2, [r3, #16]

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2200      	movs	r2, #0
 80049bc:	2126      	movs	r1, #38	; 0x26
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f898 	bl	8004af4 <lv_event_send>
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <opa_scale_anim>:

static void opa_scale_anim(void * obj, int32_t v)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
    lv_obj_set_style_opa(obj, v, 0);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2200      	movs	r2, #0
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f009 f9e6 	bl	800ddb0 <lv_obj_set_style_opa>
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <set_x_anim>:

static void set_x_anim(void * obj, int32_t v)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
    lv_obj_set_x(obj, v);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	b21b      	sxth	r3, r3
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f003 fd52 	bl	80084a6 <lv_obj_set_x>
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <set_y_anim>:

static void set_y_anim(void * obj, int32_t v)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
    lv_obj_set_y(obj, v);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	b21b      	sxth	r3, r3
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f003 fd68 	bl	80084f0 <lv_obj_set_y>
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <scr_anim_ready>:

static void scr_anim_ready(lv_anim_t * a)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f009 fa2d 	bl	800de94 <lv_obj_get_disp>
 8004a3a:	60f8      	str	r0, [r7, #12]

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOADED, NULL);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2127      	movs	r1, #39	; 0x27
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f855 	bl	8004af4 <lv_event_send>
    lv_event_send(d->prev_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2128      	movs	r1, #40	; 0x28
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f84e 	bl	8004af4 <lv_event_send>

    if(d->prev_scr && d->del_prev) lv_obj_del(d->prev_scr);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00c      	beq.n	8004a7a <scr_anim_ready+0x52>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <scr_anim_ready+0x52>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f009 f9ae 	bl	800ddd6 <lv_obj_del>
    d->prev_scr = NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	615a      	str	r2, [r3, #20]
    d->draw_prev_over_act = false;
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004a86:	f36f 0300 	bfc	r3, #0, #1
 8004a8a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    d->scr_to_load = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	619a      	str	r2, [r3, #24]
    lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2160      	movs	r1, #96	; 0x60
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f007 fffe 	bl	800ca9e <lv_obj_remove_local_style_prop>
    lv_obj_invalidate(d->act_scr);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f004 fdd9 	bl	800965e <lv_obj_invalidate>
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <is_out_anim>:

static bool is_out_anim(lv_scr_load_anim_t anim_type)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	71fb      	strb	r3, [r7, #7]
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	2b0a      	cmp	r3, #10
 8004ac2:	d00b      	beq.n	8004adc <is_out_anim+0x28>
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	2b0b      	cmp	r3, #11
 8004ac8:	d008      	beq.n	8004adc <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d005      	beq.n	8004adc <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	2b0d      	cmp	r3, #13
 8004ad4:	d002      	beq.n	8004adc <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	2b0e      	cmp	r3, #14
 8004ada:	d101      	bne.n	8004ae0 <is_out_anim+0x2c>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <is_out_anim+0x2e>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
           anim_type == LV_SCR_LOAD_ANIM_OUT_BOTTOM;
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <lv_event_send>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_res_t lv_event_send(lv_obj_t * obj, lv_event_code_t event_code, void * param)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	; 0x30
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	460b      	mov	r3, r1
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <lv_event_send+0x18>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e02f      	b.n	8004b6c <lv_event_send+0x78>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_event_t e;
    e.target = obj;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	613b      	str	r3, [r7, #16]
    e.current_target = obj;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	617b      	str	r3, [r7, #20]
    e.code = event_code;
 8004b14:	7afb      	ldrb	r3, [r7, #11]
 8004b16:	763b      	strb	r3, [r7, #24]
    e.user_data = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]
    e.param = param;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	623b      	str	r3, [r7, #32]
    e.deleted = 0;
 8004b20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b24:	f36f 0300 	bfc	r3, #0, #1
 8004b28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_bubbling = 0;
 8004b2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b30:	f36f 0382 	bfc	r3, #2, #1
 8004b34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_processing = 0;
 8004b38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b3c:	f36f 0341 	bfc	r3, #1, #1
 8004b40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*Build a simple linked list from the objects used in the events
     *It's important to know if this object was deleted by a nested event
     *called from this `event_cb`.*/
    e.prev = event_head;
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <lv_event_send+0x80>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
    event_head = &e;
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <lv_event_send+0x80>)
 8004b4c:	f107 0310 	add.w	r3, r7, #16
 8004b50:	6013      	str	r3, [r2, #0]

    /*Send the event*/
    lv_res_t res = event_send_core(&e);
 8004b52:	f107 0310 	add.w	r3, r7, #16
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f95d 	bl	8004e16 <event_send_core>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /*Remove this element from the list*/
    event_head = e.prev;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <lv_event_send+0x80>)
 8004b66:	6013      	str	r3, [r2, #0]

    return res;
 8004b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3730      	adds	r7, #48	; 0x30
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	200006ec 	.word	0x200006ec

08004b78 <lv_obj_event_base>:


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <lv_obj_event_base+0x1a>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e006      	b.n	8004ba0 <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

    /*Find a base in which call the ancestor's event handler_cb if set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8004b98:	e002      	b.n	8004ba0 <lv_obj_event_base+0x28>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <lv_obj_event_base+0x36>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f5      	beq.n	8004b9a <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <lv_obj_event_base+0x40>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e019      	b.n	8004bec <lv_obj_event_base+0x74>
    if(base->event_cb == NULL) return LV_RES_OK;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <lv_obj_event_base+0x4c>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e013      	b.n	8004bec <lv_obj_event_base+0x74>

    /*Call the actual event callback*/
    e->user_data = NULL;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	60da      	str	r2, [r3, #12]
    base->event_cb(base, e);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	6839      	ldr	r1, [r7, #0]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	72fb      	strb	r3, [r7, #11]
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	7e1b      	ldrb	r3, [r3, #24]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <lv_obj_event_base+0x72>
 8004be6:	2300      	movs	r3, #0
 8004be8:	72fb      	strb	r3, [r7, #11]

    return res;
 8004bea:	7afb      	ldrb	r3, [r7, #11]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <lv_event_get_target>:


lv_obj_t * lv_event_get_target(lv_event_t * e)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
    return e->target;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <lv_event_get_current_target>:

lv_obj_t * lv_event_get_current_target(lv_event_t * e)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
    return e->current_target;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <lv_event_get_code>:

lv_event_code_t lv_event_get_code(lv_event_t * e)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
    return e->code & ~LV_EVENT_PREPROCESS;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	7a1b      	ldrb	r3, [r3, #8]
 8004c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c34:	b2db      	uxtb	r3, r3
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <lv_event_get_param>:

void * lv_event_get_param(lv_event_t * e)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
    return e->param;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <_lv_event_mark_deleted>:
    last_id ++;
    return last_id;
}

void _lv_event_mark_deleted(lv_obj_t * obj)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
    lv_event_t * e = event_head;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <_lv_event_mark_deleted+0x48>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60fb      	str	r3, [r7, #12]

    while(e) {
 8004c6a:	e011      	b.n	8004c90 <_lv_event_mark_deleted+0x34>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d004      	beq.n	8004c80 <_lv_event_mark_deleted+0x24>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d104      	bne.n	8004c8a <_lv_event_mark_deleted+0x2e>
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	7e13      	ldrb	r3, [r2, #24]
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	7613      	strb	r3, [r2, #24]
        e = e->prev;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	60fb      	str	r3, [r7, #12]
    while(e) {
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ea      	bne.n	8004c6c <_lv_event_mark_deleted+0x10>
    }
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	200006ec 	.word	0x200006ec

08004ca8 <lv_event_get_indev>:
    }
    return NULL;
}

lv_indev_t * lv_event_get_indev(lv_event_t * e)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

    if(e->code == LV_EVENT_PRESSED ||
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7a1b      	ldrb	r3, [r3, #8]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d03b      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESSING ||
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d037      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESS_LOST ||
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESSING ||
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d033      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SHORT_CLICKED ||
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESS_LOST ||
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d02f      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED ||
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SHORT_CLICKED ||
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d02b      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED ||
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d027      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_CLICKED ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8004ce4:	2b07      	cmp	r3, #7
 8004ce6:	d023      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_RELEASED ||
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_CLICKED ||
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d01f      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_RELEASED ||
 8004cf4:	2b09      	cmp	r3, #9
 8004cf6:	d01b      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_END ||
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8004cfc:	2b0a      	cmp	r3, #10
 8004cfe:	d017      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL ||
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_END ||
 8004d04:	2b0b      	cmp	r3, #11
 8004d06:	d013      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_GESTURE ||
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL ||
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	d00f      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_KEY ||
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_GESTURE ||
 8004d14:	2b0d      	cmp	r3, #13
 8004d16:	d00b      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_FOCUSED ||
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_KEY ||
 8004d1c:	2b0e      	cmp	r3, #14
 8004d1e:	d007      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_DEFOCUSED ||
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_FOCUSED ||
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d003      	beq.n	8004d30 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LEAVE) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DEFOCUSED ||
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d104      	bne.n	8004d3a <lv_event_get_indev+0x92>
        return lv_event_get_param(e);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff86 	bl	8004c42 <lv_event_get_param>
 8004d36:	4603      	mov	r3, r0
 8004d38:	e000      	b.n	8004d3c <lv_event_get_indev+0x94>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8004d3a:	2300      	movs	r3, #0
    }
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <lv_event_get_draw_ctx>:
        return NULL;
    }
}

lv_draw_ctx_t * lv_event_get_draw_ctx(lv_event_t * e)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	7a1b      	ldrb	r3, [r3, #8]
 8004d50:	2b15      	cmp	r3, #21
 8004d52:	d013      	beq.n	8004d7c <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004d58:	2b14      	cmp	r3, #20
 8004d5a:	d00f      	beq.n	8004d7c <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8004d60:	2b16      	cmp	r3, #22
 8004d62:	d00b      	beq.n	8004d7c <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST ||
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8004d68:	2b18      	cmp	r3, #24
 8004d6a:	d007      	beq.n	8004d7c <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST ||
 8004d70:	2b17      	cmp	r3, #23
 8004d72:	d003      	beq.n	8004d7c <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_END) {
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8004d78:	2b19      	cmp	r3, #25
 8004d7a:	d104      	bne.n	8004d86 <lv_event_get_draw_ctx+0x42>
        return lv_event_get_param(e);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff60 	bl	8004c42 <lv_event_get_param>
 8004d82:	4603      	mov	r3, r0
 8004d84:	e000      	b.n	8004d88 <lv_event_get_draw_ctx+0x44>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8004d86:	2300      	movs	r3, #0
    }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <lv_event_set_ext_draw_size>:
        return 0;
    }
}

void lv_event_set_ext_draw_size(lv_event_t * e, lv_coord_t size)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7a1b      	ldrb	r3, [r3, #8]
 8004da0:	2b13      	cmp	r3, #19
 8004da2:	d10e      	bne.n	8004dc2 <lv_event_set_ext_draw_size+0x32>
        lv_coord_t * cur_size = lv_event_get_param(e);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff4c 	bl	8004c42 <lv_event_get_param>
 8004daa:	60f8      	str	r0, [r7, #12]
        *cur_size = LV_MAX(*cur_size, size);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bfb8      	it	lt
 8004dba:	4613      	movlt	r3, r2
 8004dbc:	b21a      	sxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	801a      	strh	r2, [r3, #0]
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
    }
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <lv_obj_get_event_dsc>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <lv_obj_get_event_dsc+0x16>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e014      	b.n	8004e0a <lv_obj_get_event_dsc+0x40>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	7e9b      	ldrb	r3, [r3, #26]
 8004de6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d301      	bcc.n	8004df8 <lv_obj_get_event_dsc+0x2e>
 8004df4:	2300      	movs	r3, #0
 8004df6:	e008      	b.n	8004e0a <lv_obj_get_event_dsc+0x40>

    return &obj->spec_attr->event_dsc[id];
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	68d9      	ldr	r1, [r3, #12]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b086      	sub	sp, #24
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8004e1e:	f000 fbe9 	bl	80055f4 <lv_indev_get_act>
 8004e22:	60b8      	str	r0, [r7, #8]
    if(indev_act) {
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01f      	beq.n	8004e6a <event_send_core+0x54>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <event_send_core+0x30>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	6810      	ldr	r0, [r2, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	7a12      	ldrb	r2, [r2, #8]
 8004e42:	4611      	mov	r1, r2
 8004e44:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7e1b      	ldrb	r3, [r3, #24]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <event_send_core+0x42>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0c4      	b.n	8004fe2 <event_send_core+0x1cc>
        if(e->deleted) return LV_RES_INV;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7e1b      	ldrb	r3, [r3, #24]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <event_send_core+0x54>
 8004e66:	2300      	movs	r3, #0
 8004e68:	e0bb      	b.n	8004fe2 <event_send_core+0x1cc>
    }

    lv_res_t res = LV_RES_OK;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2100      	movs	r1, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff ffa8 	bl	8004dca <lv_obj_get_event_dsc>
 8004e7a:	6138      	str	r0, [r7, #16]

    uint32_t i = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8004e80:	e038      	b.n	8004ef4 <event_send_core+0xde>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d02a      	beq.n	8004ee0 <event_send_core+0xca>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	7a1b      	ldrb	r3, [r3, #8]
 8004e8e:	b25b      	sxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	da25      	bge.n	8004ee0 <event_send_core+0xca>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	7a1b      	ldrb	r3, [r3, #8]
 8004e98:	2b80      	cmp	r3, #128	; 0x80
 8004e9a:	d007      	beq.n	8004eac <event_send_core+0x96>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	7a1b      	ldrb	r3, [r3, #8]
 8004ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	7a12      	ldrb	r2, [r2, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d119      	bne.n	8004ee0 <event_send_core+0xca>
            e->user_data = event_dsc->user_data;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	7e1b      	ldrb	r3, [r3, #24]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <event_send_core+0xb8>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e089      	b.n	8004fe2 <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	7e1b      	ldrb	r3, [r3, #24]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <event_send_core+0xca>
 8004edc:	2300      	movs	r3, #0
 8004ede:	e080      	b.n	8004fe2 <event_send_core+0x1cc>
        }

        i++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff ff6c 	bl	8004dca <lv_obj_get_event_dsc>
 8004ef2:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <event_send_core+0xea>
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d0c0      	beq.n	8004e82 <event_send_core+0x6c>
    }

    res = lv_obj_event_base(NULL, e);
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	2000      	movs	r0, #0
 8004f04:	f7ff fe38 	bl	8004b78 <lv_obj_event_base>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	75fb      	strb	r3, [r7, #23]

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <event_send_core+0x10c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff56 	bl	8004dca <lv_obj_get_event_dsc>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	e000      	b.n	8004f24 <event_send_core+0x10e>
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]

    i = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8004f2a:	e036      	b.n	8004f9a <event_send_core+0x184>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d028      	beq.n	8004f86 <event_send_core+0x170>
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	7a1b      	ldrb	r3, [r3, #8]
 8004f38:	b25b      	sxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db23      	blt.n	8004f86 <event_send_core+0x170>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	7a1b      	ldrb	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <event_send_core+0x13c>
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	7a1a      	ldrb	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7a1b      	ldrb	r3, [r3, #8]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d119      	bne.n	8004f86 <event_send_core+0x170>
            e->user_data = event_dsc->user_data;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7e1b      	ldrb	r3, [r3, #24]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <event_send_core+0x15e>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e036      	b.n	8004fe2 <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	7e1b      	ldrb	r3, [r3, #24]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <event_send_core+0x170>
 8004f82:	2300      	movs	r3, #0
 8004f84:	e02d      	b.n	8004fe2 <event_send_core+0x1cc>
        }

        i++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68f9      	ldr	r1, [r7, #12]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff ff19 	bl	8004dca <lv_obj_get_event_dsc>
 8004f98:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <event_send_core+0x190>
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d0c2      	beq.n	8004f2c <event_send_core+0x116>
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d119      	bne.n	8004fe0 <event_send_core+0x1ca>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d014      	beq.n	8004fe0 <event_send_core+0x1ca>
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f818 	bl	8004fec <event_is_bubbled>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00e      	beq.n	8004fe0 <event_send_core+0x1ca>
        e->current_target = e->current_target->parent;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]
        res = event_send_core(e);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff22 	bl	8004e16 <event_send_core>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) return LV_RES_INV;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <event_send_core+0x1ca>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <event_send_core+0x1cc>
    }

    return res;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <event_is_bubbled>:

static bool event_is_bubbled(lv_event_t * e)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    if(e->stop_bubbling) return false;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	7e1b      	ldrb	r3, [r3, #24]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <event_is_bubbled+0x1a>
 8005002:	2300      	movs	r3, #0
 8005004:	e059      	b.n	80050ba <event_is_bubbled+0xce>

    /*Event codes that always bubble*/
    switch(e->code) {
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	7a1b      	ldrb	r3, [r3, #8]
 800500a:	3b23      	subs	r3, #35	; 0x23
 800500c:	2b01      	cmp	r3, #1
 800500e:	d801      	bhi.n	8005014 <event_is_bubbled+0x28>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 8005010:	2301      	movs	r3, #1
 8005012:	e052      	b.n	80050ba <event_is_bubbled+0xce>
        default:
            break;
 8005014:	bf00      	nop
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800501e:	4618      	mov	r0, r3
 8005020:	f000 ff41 	bl	8005ea6 <lv_obj_has_flag>
 8005024:	4603      	mov	r3, r0
 8005026:	f083 0301 	eor.w	r3, r3, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <event_is_bubbled+0x48>
 8005030:	2300      	movs	r3, #0
 8005032:	e042      	b.n	80050ba <event_is_bubbled+0xce>

    switch(e->code) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	7a1b      	ldrb	r3, [r3, #8]
 8005038:	3b11      	subs	r3, #17
 800503a:	2b1b      	cmp	r3, #27
 800503c:	d83c      	bhi.n	80050b8 <event_is_bubbled+0xcc>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <event_is_bubbled+0x58>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	080050b5 	.word	0x080050b5
 8005048:	080050b5 	.word	0x080050b5
 800504c:	080050b5 	.word	0x080050b5
 8005050:	080050b5 	.word	0x080050b5
 8005054:	080050b5 	.word	0x080050b5
 8005058:	080050b5 	.word	0x080050b5
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050b5 	.word	0x080050b5
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080050b5 	.word	0x080050b5
 800506c:	080050b5 	.word	0x080050b5
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050b9 	.word	0x080050b9
 8005078:	080050b5 	.word	0x080050b5
 800507c:	080050b9 	.word	0x080050b9
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050b5 	.word	0x080050b5
 8005088:	080050b5 	.word	0x080050b5
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050b9 	.word	0x080050b9
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	080050b9 	.word	0x080050b9
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050b5 	.word	0x080050b5
 80050ac:	080050b9 	.word	0x080050b9
 80050b0:	080050b5 	.word	0x080050b5
        case LV_EVENT_CHILD_DELETED:
        case LV_EVENT_CHILD_CHANGED:
        case LV_EVENT_SIZE_CHANGED:
        case LV_EVENT_STYLE_CHANGED:
        case LV_EVENT_GET_SELF_SIZE:
            return false;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e000      	b.n	80050ba <event_is_bubbled+0xce>
        default:
            return true;
 80050b8:	2301      	movs	r3, #1
    }
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop

080050c4 <_lv_group_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80050c8:	2120      	movs	r1, #32
 80050ca:	4802      	ldr	r0, [pc, #8]	; (80050d4 <_lv_group_init+0x10>)
 80050cc:	f01c fb7b 	bl	80217c6 <_lv_ll_init>
}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000888 	.word	0x20000888

080050d8 <lv_group_get_default>:
{
    default_group = group;
}

lv_group_t * lv_group_get_default(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
    return default_group;
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <lv_group_get_default+0x14>)
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	200006f0 	.word	0x200006f0

080050f0 <lv_group_add_obj>:

void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d053      	beq.n	80051a8 <lv_group_add_obj+0xb8>

    LV_LOG_TRACE("begin");

    /*Be sure the object is removed from its current group*/
    lv_group_remove_obj(obj);
 8005100:	6838      	ldr	r0, [r7, #0]
 8005102:	f000 f859 	bl	80051b8 <lv_group_remove_obj>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	f01c fc3a 	bl	8021982 <_lv_ll_get_head>
 800510e:	6178      	str	r0, [r7, #20]
 8005110:	e00a      	b.n	8005128 <lv_group_add_obj+0x38>
        if((*obj_i) == obj) {
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d047      	beq.n	80051ac <lv_group_add_obj+0xbc>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	4618      	mov	r0, r3
 8005122:	f01c fc50 	bl	80219c6 <_lv_ll_get_next>
 8005126:	6178      	str	r0, [r7, #20]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f1      	bne.n	8005112 <lv_group_add_obj+0x22>
            return;
        }
    }

    /*If the object is already in a group and focused then refocus it*/
    lv_group_t * group_cur = lv_obj_get_group(obj);
 800512e:	6838      	ldr	r0, [r7, #0]
 8005130:	f000 feee 	bl	8005f10 <lv_obj_get_group>
 8005134:	6138      	str	r0, [r7, #16]
    if(group_cur) {
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00f      	beq.n	800515c <lv_group_add_obj+0x6c>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <lv_group_add_obj+0x6c>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d102      	bne.n	800515c <lv_group_add_obj+0x6c>
            lv_group_refocus(group_cur);
 8005156:	6938      	ldr	r0, [r7, #16]
 8005158:	f000 f908 	bl	800536c <lv_group_refocus>

            LV_LOG_INFO("changing object's group");
        }
    }

    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <lv_group_add_obj+0x7a>
 8005164:	6838      	ldr	r0, [r7, #0]
 8005166:	f000 fee7 	bl	8005f38 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	609a      	str	r2, [r3, #8]

    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	f01c fb73 	bl	8021860 <_lv_ll_ins_tail>
 800517a:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(next);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d100      	bne.n	8005184 <lv_group_add_obj+0x94>
 8005182:	e7fe      	b.n	8005182 <lv_group_add_obj+0x92>
    if(next == NULL) return;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d012      	beq.n	80051b0 <lv_group_add_obj+0xc0>
    *next = obj;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	601a      	str	r2, [r3, #0]

    /*If the head and the tail is equal then there is only one object in the linked list.
     *In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4618      	mov	r0, r3
 8005194:	f01c fbf5 	bl	8021982 <_lv_ll_get_head>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4293      	cmp	r3, r2
 800519e:	d108      	bne.n	80051b2 <lv_group_add_obj+0xc2>
        lv_group_refocus(group);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8e3 	bl	800536c <lv_group_refocus>
 80051a6:	e004      	b.n	80051b2 <lv_group_add_obj+0xc2>
    if(group == NULL) return;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <lv_group_add_obj+0xc2>
            return;
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <lv_group_add_obj+0xc2>
    if(next == NULL) return;
 80051b0:	bf00      	nop
    }

    LV_LOG_TRACE("finished");
}
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <lv_group_remove_obj>:
    else if(*g1->obj_focus == obj2) lv_group_focus_obj(obj1);

}

void lv_group_remove_obj(lv_obj_t * obj)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
    lv_group_t * g = lv_obj_get_group(obj);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fea5 	bl	8005f10 <lv_obj_get_group>
 80051c6:	60b8      	str	r0, [r7, #8]
    if(g == NULL) return;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d06a      	beq.n	80052a4 <lv_group_remove_obj+0xec>

    LV_LOG_TRACE("begin");

    /*Focus on the next object*/
    if(g->obj_focus && *g->obj_focus == obj) {
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d033      	beq.n	800523e <lv_group_remove_obj+0x86>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d12d      	bne.n	800523e <lv_group_remove_obj+0x86>
        if(g->frozen) g->frozen = 0;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	7f1b      	ldrb	r3, [r3, #28]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <lv_group_remove_obj+0x42>
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	7f13      	ldrb	r3, [r2, #28]
 80051f4:	f36f 0300 	bfc	r3, #0, #1
 80051f8:	7713      	strb	r3, [r2, #28]

        /*If this is the only object in the group then focus to nothing.*/
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f01c fbc0 	bl	8021982 <_lv_ll_get_head>
 8005202:	4602      	mov	r2, r0
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d115      	bne.n	8005238 <lv_group_remove_obj+0x80>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f01c fbc8 	bl	80219a4 <_lv_ll_get_tail>
 8005214:	4602      	mov	r2, r0
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	429a      	cmp	r2, r3
 800521c:	d10c      	bne.n	8005238 <lv_group_remove_obj+0x80>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	681c      	ldr	r4, [r3, #0]
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	f000 f9a8 	bl	800557a <get_indev>
 800522a:	4603      	mov	r3, r0
 800522c:	461a      	mov	r2, r3
 800522e:	210f      	movs	r1, #15
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff fc5f 	bl	8004af4 <lv_event_send>
 8005236:	e002      	b.n	800523e <lv_group_remove_obj+0x86>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 8005238:	68b8      	ldr	r0, [r7, #8]
 800523a:	f000 f897 	bl	800536c <lv_group_refocus>
    }

    /*If the focuses object is still the same then it was the only object in the group but it will
     *be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     *zero objects*/
    if(g->obj_focus && *g->obj_focus == obj) {
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d008      	beq.n	8005258 <lv_group_remove_obj+0xa0>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	d102      	bne.n	8005258 <lv_group_remove_obj+0xa0>
        g->obj_focus = NULL;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group*/
    lv_obj_t ** i;
    _LV_LL_READ(&g->obj_ll, i) {
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4618      	mov	r0, r3
 800525c:	f01c fb91 	bl	8021982 <_lv_ll_get_head>
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	e01b      	b.n	800529c <lv_group_remove_obj+0xe4>
        if(*i == obj) {
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	429a      	cmp	r2, r3
 800526c:	d110      	bne.n	8005290 <lv_group_remove_obj+0xd8>
            _lv_ll_remove(&g->obj_ll, i);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	68f9      	ldr	r1, [r7, #12]
 8005272:	4618      	mov	r0, r3
 8005274:	f01c fb28 	bl	80218c8 <_lv_ll_remove>
            lv_mem_free(i);
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f01c fd71 	bl	8021d60 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d010      	beq.n	80052a8 <lv_group_remove_obj+0xf0>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2200      	movs	r2, #0
 800528c:	609a      	str	r2, [r3, #8]
            break;
 800528e:	e00b      	b.n	80052a8 <lv_group_remove_obj+0xf0>
    _LV_LL_READ(&g->obj_ll, i) {
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	4618      	mov	r0, r3
 8005296:	f01c fb96 	bl	80219c6 <_lv_ll_get_next>
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e0      	bne.n	8005264 <lv_group_remove_obj+0xac>
 80052a2:	e002      	b.n	80052aa <lv_group_remove_obj+0xf2>
    if(g == NULL) return;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <lv_group_remove_obj+0xf2>
            break;
 80052a8:	bf00      	nop
        }
    }
    LV_LOG_TRACE("finished");
}
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd90      	pop	{r4, r7, pc}

080052b0 <lv_group_focus_next>:
        }
    }
}

void lv_group_focus_next(lv_group_t * group)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 80052b8:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <lv_group_focus_next+0x3c>)
 80052ba:	490d      	ldr	r1, [pc, #52]	; (80052f0 <lv_group_focus_next+0x40>)
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f886 	bl	80053ce <focus_next_core>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <lv_group_focus_next+0x34>
        if(!focus_changed)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	f083 0301 	eor.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <lv_group_focus_next+0x34>
            group->edge_cb(group, true);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	2101      	movs	r1, #1
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
    }
}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	080219c7 	.word	0x080219c7
 80052f0:	08021983 	.word	0x08021983

080052f4 <lv_group_focus_prev>:

void lv_group_focus_prev(lv_group_t * group)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 80052fc:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <lv_group_focus_prev+0x3c>)
 80052fe:	490d      	ldr	r1, [pc, #52]	; (8005334 <lv_group_focus_prev+0x40>)
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f864 	bl	80053ce <focus_next_core>
 8005306:	4603      	mov	r3, r0
 8005308:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <lv_group_focus_prev+0x34>
        if(!focus_changed)
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	f083 0301 	eor.w	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <lv_group_focus_prev+0x34>
            group->edge_cb(group, false);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
    }
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	080219f1 	.word	0x080219f1
 8005334:	080219a5 	.word	0x080219a5

08005338 <lv_group_get_editing>:
    if(!group) return NULL;
    return group->edge_cb;
}

bool lv_group_get_editing(const lv_group_t * group)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <lv_group_get_editing+0x12>
 8005346:	2300      	movs	r3, #0
 8005348:	e00a      	b.n	8005360 <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7f1b      	ldrb	r3, [r3, #28]
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf14      	ite	ne
 800535a:	2301      	movne	r3, #1
 800535c:	2300      	moveq	r3, #0
 800535e:	b2db      	uxtb	r3, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	7f1b      	ldrb	r3, [r3, #28]
 8005378:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	7f13      	ldrb	r3, [r2, #28]
 8005384:	f043 0308 	orr.w	r3, r3, #8
 8005388:	7713      	strb	r3, [r2, #28]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	7f1b      	ldrb	r3, [r3, #28]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d103      	bne.n	80053a0 <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff ff89 	bl	80052b0 <lv_group_focus_next>
 800539e:	e009      	b.n	80053b4 <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	7f1b      	ldrb	r3, [r3, #28]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff ffa0 	bl	80052f4 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	b2d9      	uxtb	r1, r3
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	7f13      	ldrb	r3, [r2, #28]
 80053c0:	f361 03c3 	bfi	r3, r1, #3, #1
 80053c4:	7713      	strb	r3, [r2, #28]
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <focus_next_core>:

static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 80053ce:	b590      	push	{r4, r7, lr}
 80053d0:	b08b      	sub	sp, #44	; 0x2c
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
    bool focus_changed = false;
 80053da:	2300      	movs	r3, #0
 80053dc:	75fb      	strb	r3, [r7, #23]
    if(group->frozen) return focus_changed;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	7f1b      	ldrb	r3, [r3, #28]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <focus_next_core+0x22>
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
 80053ee:	e0c0      	b.n	8005572 <focus_next_core+0x1a4>

    lv_obj_t ** obj_next     = group->obj_focus;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
    lv_obj_t ** obj_sentinel = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	623b      	str	r3, [r7, #32]
    bool can_move            = true;
 80053fa:	2301      	movs	r3, #1
 80053fc:	77fb      	strb	r3, [r7, #31]
    bool can_begin           = true;
 80053fe:	2301      	movs	r3, #1
 8005400:	77bb      	strb	r3, [r7, #30]

    for(;;) {
        if(obj_next == NULL) {
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d11d      	bne.n	8005444 <focus_next_core+0x76>
            if(group->wrap || obj_sentinel == NULL) {
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	7f1b      	ldrb	r3, [r3, #28]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <focus_next_core+0x4e>
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <focus_next_core+0x72>
                if(!can_begin) return focus_changed;
 800541c:	7fbb      	ldrb	r3, [r7, #30]
 800541e:	f083 0301 	eor.w	r3, r3, #1
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <focus_next_core+0x5e>
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	e0a2      	b.n	8005572 <focus_next_core+0x1a4>
                obj_next  = begin(&group->obj_ll);
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
 8005434:	6278      	str	r0, [r7, #36]	; 0x24
                can_move  = false;
 8005436:	2300      	movs	r3, #0
 8005438:	77fb      	strb	r3, [r7, #31]
                can_begin = false;
 800543a:	2300      	movs	r3, #0
 800543c:	77bb      	strb	r3, [r7, #30]
 800543e:	e001      	b.n	8005444 <focus_next_core+0x76>
            }
            else {
                /*Currently focused object is the last/first in the group, keep it that way*/
                return focus_changed;
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	e096      	b.n	8005572 <focus_next_core+0x1a4>
            }
        }

        if(obj_sentinel == NULL) {
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <focus_next_core+0x8a>
            obj_sentinel = obj_next;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	623b      	str	r3, [r7, #32]
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <focus_next_core+0x8a>
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	e08c      	b.n	8005572 <focus_next_core+0x1a4>
        }

        if(can_move) {
 8005458:	7ffb      	ldrb	r3, [r7, #31]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <focus_next_core+0xa8>
            obj_next = move(&group->obj_ll, obj_next);
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005464:	4610      	mov	r0, r2
 8005466:	4798      	blx	r3
 8005468:	6278      	str	r0, [r7, #36]	; 0x24

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return focus_changed;
 800546a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	429a      	cmp	r2, r3
 8005470:	d101      	bne.n	8005476 <focus_next_core+0xa8>
 8005472:	7dfb      	ldrb	r3, [r7, #23]
 8005474:	e07d      	b.n	8005572 <focus_next_core+0x1a4>
        }

        can_move = true;
 8005476:	2301      	movs	r3, #1
 8005478:	77fb      	strb	r3, [r7, #31]

        if(obj_next == NULL) continue;
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d028      	beq.n	80054d2 <focus_next_core+0x104>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fd37 	bl	8005ef8 <lv_obj_get_state>
 800548a:	4603      	mov	r3, r0
 800548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d120      	bne.n	80054d6 <focus_next_core+0x108>

        /*Hidden objects don't receive focus.
         *If any parent is hidden, the object is also hidden)*/
        lv_obj_t * parent = *obj_next;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	61bb      	str	r3, [r7, #24]
        while(parent) {
 800549a:	e00a      	b.n	80054b2 <focus_next_core+0xe4>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 800549c:	2101      	movs	r1, #1
 800549e:	69b8      	ldr	r0, [r7, #24]
 80054a0:	f000 fd01 	bl	8005ea6 <lv_obj_has_flag>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <focus_next_core+0xec>
            parent = lv_obj_get_parent(parent);
 80054aa:	69b8      	ldr	r0, [r7, #24]
 80054ac:	f008 fd2c 	bl	800df08 <lv_obj_get_parent>
 80054b0:	61b8      	str	r0, [r7, #24]
        while(parent) {
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f1      	bne.n	800549c <focus_next_core+0xce>
 80054b8:	e000      	b.n	80054bc <focus_next_core+0xee>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 80054ba:	bf00      	nop
        }

        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <focus_next_core+0x10c>
 80054c2:	2101      	movs	r1, #1
 80054c4:	69b8      	ldr	r0, [r7, #24]
 80054c6:	f000 fcee 	bl	8005ea6 <lv_obj_has_flag>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <focus_next_core+0x10c>
 80054d0:	e002      	b.n	80054d8 <focus_next_core+0x10a>
        if(obj_next == NULL) continue;
 80054d2:	bf00      	nop
 80054d4:	e795      	b.n	8005402 <focus_next_core+0x34>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 80054d6:	bf00      	nop
    for(;;) {
 80054d8:	e793      	b.n	8005402 <focus_next_core+0x34>

        /*If we got her a good candidate is found*/
        break;
 80054da:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d101      	bne.n	80054ea <focus_next_core+0x11c>
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	e043      	b.n	8005572 <focus_next_core+0x1a4>

    if(group->obj_focus) {
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d018      	beq.n	8005524 <focus_next_core+0x156>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	681c      	ldr	r4, [r3, #0]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f83e 	bl	800557a <get_indev>
 80054fe:	4603      	mov	r3, r0
 8005500:	461a      	mov	r2, r3
 8005502:	210f      	movs	r1, #15
 8005504:	4620      	mov	r0, r4
 8005506:	f7ff faf5 	bl	8004af4 <lv_event_send>
 800550a:	4603      	mov	r3, r0
 800550c:	75bb      	strb	r3, [r7, #22]
        if(res != LV_RES_OK) return focus_changed;
 800550e:	7dbb      	ldrb	r3, [r7, #22]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <focus_next_core+0x14a>
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	e02c      	b.n	8005572 <focus_next_core+0x1a4>
        lv_obj_invalidate(*group->obj_focus);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f004 f89d 	bl	800965e <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	60da      	str	r2, [r3, #12]

    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	681c      	ldr	r4, [r3, #0]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f822 	bl	800557a <get_indev>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	210e      	movs	r1, #14
 800553c:	4620      	mov	r0, r4
 800553e:	f7ff fad9 	bl	8004af4 <lv_event_send>
 8005542:	4603      	mov	r3, r0
 8005544:	757b      	strb	r3, [r7, #21]
    if(res != LV_RES_OK) return focus_changed;
 8005546:	7d7b      	ldrb	r3, [r7, #21]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d001      	beq.n	8005550 <focus_next_core+0x182>
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	e010      	b.n	8005572 <focus_next_core+0x1a4>

    lv_obj_invalidate(*group->obj_focus);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f004 f881 	bl	800965e <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <focus_next_core+0x19e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	4798      	blx	r3
    focus_changed = true;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
    return focus_changed;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
}
 8005572:	4618      	mov	r0, r3
 8005574:	372c      	adds	r7, #44	; 0x2c
 8005576:	46bd      	mov	sp, r7
 8005578:	bd90      	pop	{r4, r7, pc}

0800557a <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
    lv_indev_t * indev_encoder = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
    lv_indev_t * indev_group = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800558a:	2000      	movs	r0, #0
 800558c:	f01a fc2a 	bl	801fde4 <lv_indev_get_next>
 8005590:	60f8      	str	r0, [r7, #12]
    while(indev) {
 8005592:	e019      	b.n	80055c8 <get_indev+0x4e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f839 	bl	800560c <lv_indev_get_type>
 800559a:	4603      	mov	r3, r0
 800559c:	72fb      	strb	r3, [r7, #11]
        if(indev->group == g) {
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d10b      	bne.n	80055c0 <get_indev+0x46>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 80055a8:	7afb      	ldrb	r3, [r7, #11]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d101      	bne.n	80055b2 <get_indev+0x38>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	e01b      	b.n	80055ea <get_indev+0x70>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 80055b2:	7afb      	ldrb	r3, [r7, #11]
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d101      	bne.n	80055bc <get_indev+0x42>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	617b      	str	r3, [r7, #20]
            indev_group = indev;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	613b      	str	r3, [r7, #16]
        }
        indev = lv_indev_get_next(indev);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f01a fc0f 	bl	801fde4 <lv_indev_get_next>
 80055c6:	60f8      	str	r0, [r7, #12]
    while(indev) {
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e2      	bne.n	8005594 <get_indev+0x1a>
    }

    if(indev_encoder) return indev_encoder;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <get_indev+0x5e>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	e008      	b.n	80055ea <get_indev+0x70>
    if(indev_group) return indev_group;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <get_indev+0x68>
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	e003      	b.n	80055ea <get_indev+0x70>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 80055e2:	2000      	movs	r0, #0
 80055e4:	f01a fbfe 	bl	801fde4 <lv_indev_get_next>
 80055e8:	4603      	mov	r3, r0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <lv_indev_get_act>:
        }
    }
}

lv_indev_t * lv_indev_get_act(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
    return indev_act;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <lv_indev_get_act+0x14>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	200006f4 	.word	0x200006f4

0800560c <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <lv_indev_get_type+0x12>
 800561a:	2300      	movs	r3, #0
 800561c:	e002      	b.n	8005624 <lv_indev_get_type+0x18>

    return indev->driver->type;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <lv_indev_reset>:

void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
    if(indev) {
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d038      	beq.n	80056b2 <lv_indev_reset+0x82>
        indev->proc.reset_query = 1;
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	7953      	ldrb	r3, [r2, #5]
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	7153      	strb	r3, [r2, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 800564a:	4b3b      	ldr	r3, [pc, #236]	; (8005738 <lv_indev_reset+0x108>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d102      	bne.n	800565a <lv_indev_reset+0x2a>
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <lv_indev_reset+0x10c>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d004      	beq.n	800566e <lv_indev_reset+0x3e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d160      	bne.n	8005730 <lv_indev_reset+0x100>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <lv_indev_reset+0x4e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d102      	bne.n	8005684 <lv_indev_reset+0x54>
                indev->proc.types.pointer.last_pressed = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	635a      	str	r2, [r3, #52]	; 0x34
            }
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <lv_indev_reset+0x64>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d102      	bne.n	800569a <lv_indev_reset+0x6a>
                indev->proc.types.pointer.act_obj = NULL;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	629a      	str	r2, [r3, #40]	; 0x28
            }
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <lv_indev_reset+0x7a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d142      	bne.n	8005730 <lv_indev_reset+0x100>
                indev->proc.types.pointer.last_obj = NULL;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c
            }
            i = lv_indev_get_next(i);
        }
        indev_obj_act = NULL;
    }
}
 80056b0:	e03e      	b.n	8005730 <lv_indev_reset+0x100>
        lv_indev_t * i = lv_indev_get_next(NULL);
 80056b2:	2000      	movs	r0, #0
 80056b4:	f01a fb96 	bl	801fde4 <lv_indev_get_next>
 80056b8:	60f8      	str	r0, [r7, #12]
        while(i) {
 80056ba:	e033      	b.n	8005724 <lv_indev_reset+0xf4>
            i->proc.reset_query = 1;
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	7953      	ldrb	r3, [r2, #5]
 80056c0:	f043 0302 	orr.w	r3, r3, #2
 80056c4:	7153      	strb	r3, [r2, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d004      	beq.n	80056da <lv_indev_reset+0xaa>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d120      	bne.n	800571c <lv_indev_reset+0xec>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <lv_indev_reset+0xba>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d102      	bne.n	80056f0 <lv_indev_reset+0xc0>
                    i->proc.types.pointer.last_pressed = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	635a      	str	r2, [r3, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <lv_indev_reset+0xd0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d102      	bne.n	8005706 <lv_indev_reset+0xd6>
                    i->proc.types.pointer.act_obj = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	629a      	str	r2, [r3, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <lv_indev_reset+0xe6>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d102      	bne.n	800571c <lv_indev_reset+0xec>
                    i->proc.types.pointer.last_obj = NULL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c
            i = lv_indev_get_next(i);
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f01a fb61 	bl	801fde4 <lv_indev_get_next>
 8005722:	60f8      	str	r0, [r7, #12]
        while(i) {
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1c8      	bne.n	80056bc <lv_indev_reset+0x8c>
        indev_obj_act = NULL;
 800572a:	4b04      	ldr	r3, [pc, #16]	; (800573c <lv_indev_reset+0x10c>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	200006f4 	.word	0x200006f4
 800573c:	200006f8 	.word	0x200006f8

08005740 <lv_indev_get_scroll_dir>:
    else
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <lv_indev_get_scroll_dir+0x12>
 800574e:	2300      	movs	r3, #0
 8005750:	e011      	b.n	8005776 <lv_indev_get_scroll_dir+0x36>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d006      	beq.n	800576a <lv_indev_get_scroll_dir+0x2a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b03      	cmp	r3, #3
 8005764:	d001      	beq.n	800576a <lv_indev_get_scroll_dir+0x2a>
 8005766:	2300      	movs	r3, #0
 8005768:	e005      	b.n	8005776 <lv_indev_get_scroll_dir+0x36>
    return indev->proc.types.pointer.scroll_dir;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005770:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005774:	b2db      	uxtb	r3, r3
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return NULL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <lv_indev_get_scroll_obj+0x12>
 8005790:	2300      	movs	r3, #0
 8005792:	e00d      	b.n	80057b0 <lv_indev_get_scroll_obj+0x2e>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d006      	beq.n	80057ac <lv_indev_get_scroll_obj+0x2a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d001      	beq.n	80057ac <lv_indev_get_scroll_obj+0x2a>
 80057a8:	2300      	movs	r3, #0
 80057aa:	e001      	b.n	80057b0 <lv_indev_get_scroll_obj+0x2e>
    return indev->proc.types.pointer.scroll_obj;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <lv_indev_get_obj_act>:
    if(indev == NULL)return;
    indev->proc.wait_until_release = 1;
}

lv_obj_t * lv_indev_get_obj_act(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
    return indev_obj_act;
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <lv_indev_get_obj_act+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	200006f8 	.word	0x200006f8

080057d4 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	80da      	strh	r2, [r3, #6]
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b08c      	sub	sp, #48	; 0x30
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	460b      	mov	r3, r1
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	891b      	ldrh	r3, [r3, #8]
 8005824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005828:	4293      	cmp	r3, r2
 800582a:	d137      	bne.n	800589c <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 800582c:	2300      	movs	r3, #0
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005830:	e02c      	b.n	800588c <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005846:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8005848:	8a7a      	ldrh	r2, [r7, #18]
 800584a:	897b      	ldrh	r3, [r7, #10]
 800584c:	429a      	cmp	r2, r3
 800584e:	d11a      	bne.n	8005886 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b21b      	sxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	da01      	bge.n	800585e <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 800585a:	2302      	movs	r3, #2
 800585c:	e098      	b.n	8005990 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <lv_style_get_prop_inlined+0x68>
 800586a:	8a7b      	ldrh	r3, [r7, #18]
 800586c:	4618      	mov	r0, r3
 800586e:	f01d f9b3 	bl	8022bd8 <lv_style_prop_get_default>
 8005872:	4602      	mov	r2, r0
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e003      	b.n	8005882 <lv_style_get_prop_inlined+0x70>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	6852      	ldr	r2, [r2, #4]
 8005880:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 8005882:	2301      	movs	r3, #1
 8005884:	e084      	b.n	8005990 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	3301      	adds	r3, #1
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	7adb      	ldrb	r3, [r3, #11]
 8005890:	461a      	mov	r2, r3
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	4293      	cmp	r3, r2
 8005896:	d3cc      	bcc.n	8005832 <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 8005898:	2300      	movs	r3, #0
 800589a:	e079      	b.n	8005990 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	7adb      	ldrb	r3, [r3, #11]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <lv_style_get_prop_inlined+0x96>
 80058a4:	2300      	movs	r3, #0
 80058a6:	e073      	b.n	8005990 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	7adb      	ldrb	r3, [r3, #11]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d948      	bls.n	8005942 <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	7adb      	ldrb	r3, [r3, #11]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80058c2:	2300      	movs	r3, #0
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c6:	e035      	b.n	8005934 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	6a3a      	ldr	r2, [r7, #32]
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80058d6:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 80058d8:	8bfa      	ldrh	r2, [r7, #30]
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d126      	bne.n	800592e <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b21b      	sxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da01      	bge.n	80058f4 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 80058f0:	2302      	movs	r3, #2
 80058f2:	e04d      	b.n	8005990 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	6a3a      	ldr	r2, [r7, #32]
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8005906:	8bfb      	ldrh	r3, [r7, #30]
 8005908:	4618      	mov	r0, r3
 800590a:	f01d f965 	bl	8022bd8 <lv_style_prop_get_default>
 800590e:	4602      	mov	r2, r0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e009      	b.n	800592a <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	441a      	add	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 800592a:	2301      	movs	r3, #1
 800592c:	e030      	b.n	8005990 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	3301      	adds	r3, #1
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	7adb      	ldrb	r3, [r3, #11]
 8005938:	461a      	mov	r2, r3
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	4293      	cmp	r3, r2
 800593e:	d3c3      	bcc.n	80058c8 <lv_style_get_prop_inlined+0xb6>
 8005940:	e025      	b.n	800598e <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	891b      	ldrh	r3, [r3, #8]
 8005946:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800594a:	897b      	ldrh	r3, [r7, #10]
 800594c:	429a      	cmp	r2, r3
 800594e:	d11e      	bne.n	800598e <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	891b      	ldrh	r3, [r3, #8]
 8005954:	b21b      	sxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	da01      	bge.n	800595e <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 800595a:	2302      	movs	r3, #2
 800595c:	e018      	b.n	8005990 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	891b      	ldrh	r3, [r3, #8]
 8005962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <lv_style_get_prop_inlined+0x170>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	891b      	ldrh	r3, [r3, #8]
 800596e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005972:	b29b      	uxth	r3, r3
 8005974:	4618      	mov	r0, r3
 8005976:	f01d f92f 	bl	8022bd8 <lv_style_prop_get_default>
 800597a:	4602      	mov	r2, r0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e003      	b.n	800598a <lv_style_get_prop_inlined+0x178>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	6852      	ldr	r2, [r2, #4]
 8005988:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3730      	adds	r7, #48	; 0x30
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80059a0:	4a04      	ldr	r2, [pc, #16]	; (80059b4 <lv_obj_remove_style_all+0x1c>)
 80059a2:	2100      	movs	r1, #0
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f006 fdd3 	bl	800c550 <lv_obj_remove_style>
}
 80059aa:	bf00      	nop
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	000fffff 	.word	0x000fffff

080059b8 <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80059c2:	2201      	movs	r2, #1
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f006 ff92 	bl	800c8f0 <lv_obj_get_style_prop>
 80059cc:	4603      	mov	r3, r0
 80059ce:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	b21b      	sxth	r3, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <lv_obj_get_style_height>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80059e6:	2204      	movs	r2, #4
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f006 ff80 	bl	800c8f0 <lv_obj_get_style_prop>
 80059f0:	4603      	mov	r3, r0
 80059f2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	b21b      	sxth	r3, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <lv_obj_get_style_align>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
    return (lv_coord_t)v.num;
}

static inline lv_align_t lv_obj_get_style_align(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005a0a:	2209      	movs	r2, #9
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f006 ff6e 	bl	800c8f0 <lv_obj_get_style_prop>
 8005a14:	4603      	mov	r3, r0
 8005a16:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	b2db      	uxtb	r3, r3
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <lv_obj_get_style_transform_width>:

static inline lv_coord_t lv_obj_get_style_transform_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8005a2e:	2268      	movs	r2, #104	; 0x68
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f006 ff5c 	bl	800c8f0 <lv_obj_get_style_prop>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	b21b      	sxth	r3, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <lv_obj_get_style_transform_height>:

static inline lv_coord_t lv_obj_get_style_transform_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8005a52:	2269      	movs	r2, #105	; 0x69
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f006 ff4a 	bl	800c8f0 <lv_obj_get_style_prop>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	b21b      	sxth	r3, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005a76:	2210      	movs	r2, #16
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f006 ff38 	bl	800c8f0 <lv_obj_get_style_prop>
 8005a80:	4603      	mov	r3, r0
 8005a82:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	b21b      	sxth	r3, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005a9a:	2212      	movs	r2, #18
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f006 ff26 	bl	800c8f0 <lv_obj_get_style_prop>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	b21b      	sxth	r3, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8005abe:	2220      	movs	r2, #32
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f006 ff14 	bl	800c8f0 <lv_obj_get_style_prop>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005acc:	7b3b      	ldrb	r3, [r7, #12]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <lv_obj_get_style_bg_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8005ae0:	2221      	movs	r2, #33	; 0x21
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f006 ff03 	bl	800c8f0 <lv_obj_get_style_prop>
 8005aea:	4603      	mov	r3, r0
 8005aec:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	b2db      	uxtb	r3, r3
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <lv_obj_get_style_border_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
    return (bool)v.num;
}

static inline lv_color_t lv_obj_get_style_border_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8005b04:	2230      	movs	r2, #48	; 0x30
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f006 fef1 	bl	800c8f0 <lv_obj_get_style_prop>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005b12:	7b3b      	ldrb	r3, [r7, #12]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <lv_obj_get_style_border_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8005b26:	2231      	movs	r2, #49	; 0x31
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f006 fee0 	bl	800c8f0 <lv_obj_get_style_prop>
 8005b30:	4603      	mov	r3, r0
 8005b32:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	b2db      	uxtb	r3, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <lv_obj_get_style_border_width>:

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005b4a:	2232      	movs	r2, #50	; 0x32
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f006 fece 	bl	800c8f0 <lv_obj_get_style_prop>
 8005b54:	4603      	mov	r3, r0
 8005b56:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	b21b      	sxth	r3, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <lv_obj_get_style_border_post>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8005b6e:	2234      	movs	r2, #52	; 0x34
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f006 febc 	bl	800c8f0 <lv_obj_get_style_prop>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bf14      	ite	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	2300      	moveq	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <lv_obj_get_style_shadow_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f006 fea6 	bl	800c8f0 <lv_obj_get_style_prop>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	b21b      	sxth	r3, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <lv_obj_get_style_shadow_spread>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_spread(const struct _lv_obj_t * obj, uint32_t part)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8005bbe:	2243      	movs	r2, #67	; 0x43
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f006 fe94 	bl	800c8f0 <lv_obj_get_style_prop>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	b21b      	sxth	r3, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <lv_obj_get_style_shadow_color>:

static inline lv_color_t lv_obj_get_style_shadow_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8005be2:	2244      	movs	r2, #68	; 0x44
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f006 fe82 	bl	800c8f0 <lv_obj_get_style_prop>
 8005bec:	4603      	mov	r3, r0
 8005bee:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005bf0:	7b3b      	ldrb	r3, [r7, #12]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <lv_obj_get_style_shadow_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8005c04:	2245      	movs	r2, #69	; 0x45
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f006 fe71 	bl	800c8f0 <lv_obj_get_style_prop>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	b2db      	uxtb	r3, r3
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <lv_obj_get_style_radius>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
    return (lv_text_align_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_radius(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8005c28:	220b      	movs	r2, #11
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f006 fe5f 	bl	800c8f0 <lv_obj_get_style_prop>
 8005c32:	4603      	mov	r3, r0
 8005c34:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	b21b      	sxth	r3, r3
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <lv_obj_get_style_clip_corner>:

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8005c4c:	2217      	movs	r2, #23
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f006 fe4d 	bl	800c8f0 <lv_obj_get_style_prop>
 8005c56:	4603      	mov	r3, r0
 8005c58:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf14      	ite	ne
 8005c60:	2301      	movne	r3, #1
 8005c62:	2300      	moveq	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <lv_obj_get_style_opa>:

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8005c78:	2260      	movs	r2, #96	; 0x60
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f006 fe37 	bl	800c8f0 <lv_obj_get_style_prop>
 8005c82:	4603      	mov	r3, r0
 8005c84:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	b2db      	uxtb	r3, r3
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <lv_obj_get_style_layout>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005c9c:	220a      	movs	r2, #10
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f006 fe25 	bl	800c8f0 <lv_obj_get_style_prop>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	b29b      	uxth	r3, r3
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <lv_init>:
{
    return lv_initialized;
}

void lv_init(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
    /*Do nothing if already initialized*/
    if(lv_initialized) {
 8005cbe:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <lv_init+0x90>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d13b      	bne.n	8005d3e <lv_init+0x86>
    }

    LV_LOG_INFO("begin");

    /*Initialize the misc modules*/
    lv_mem_init();
 8005cc6:	f01c f80b 	bl	8021ce0 <lv_mem_init>

    _lv_timer_core_init();
 8005cca:	f01d fa39 	bl	8023140 <_lv_timer_core_init>

    _lv_fs_init();
 8005cce:	f01b fa5b 	bl	8021188 <_lv_fs_init>

    _lv_anim_core_init();
 8005cd2:	f01a f8ed 	bl	801feb0 <_lv_anim_core_init>

    _lv_group_init();
 8005cd6:	f7ff f9f5 	bl	80050c4 <_lv_group_init>

    lv_draw_init();
 8005cda:	f00a f990 	bl	800fffe <lv_draw_init>

#if LV_USE_GPU_NXP_PXP && LV_USE_GPU_NXP_PXP_AUTO_INIT
    PXP_COND_STOP(!lv_gpu_nxp_pxp_init(), "PXP init failed.");
#endif

    _lv_obj_style_init();
 8005cde:	f006 fb93 	bl	800c408 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8005ce2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8005ce6:	4819      	ldr	r0, [pc, #100]	; (8005d4c <lv_init+0x94>)
 8005ce8:	f01b fd6d 	bl	80217c6 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8005cec:	215c      	movs	r1, #92	; 0x5c
 8005cee:	4818      	ldr	r0, [pc, #96]	; (8005d50 <lv_init+0x98>)
 8005cf0:	f01b fd69 	bl	80217c6 <_lv_ll_init>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8005cf4:	f008 fb2a 	bl	800e34c <_lv_refr_init>

    _lv_img_decoder_init();
 8005cf8:	f00e fb42 	bl	8014380 <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 8005cfc:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <lv_init+0x9c>)
 8005cfe:	617b      	str	r3, [r7, #20]

    uint8_t * txt_u8 = (uint8_t *)txt;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	613b      	str	r3, [r7, #16]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2bc3      	cmp	r3, #195	; 0xc3
 8005d0a:	d103      	bne.n	8005d14 <lv_init+0x5c>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings have no UTF-8 encoding. Non-ASCII characters won't be displayed.");
    }

    uint32_t endianess_test = 0x11223344;
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <lv_init+0xa0>)
 8005d16:	607b      	str	r3, [r7, #4]
    uint8_t * endianess_test_p = (uint8_t *) &endianess_test;
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	60fb      	str	r3, [r7, #12]
    bool big_endian = endianess_test_p[0] == 0x11 ? true : false;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b11      	cmp	r3, #17
 8005d22:	bf0c      	ite	eq
 8005d24:	2301      	moveq	r3, #1
 8005d26:	2300      	movne	r3, #0
 8005d28:	72fb      	strb	r3, [r7, #11]

    if(big_endian) {
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d000      	beq.n	8005d32 <lv_init+0x7a>
        LV_ASSERT_MSG(LV_BIG_ENDIAN_SYSTEM == 1,
 8005d30:	e7fe      	b.n	8005d30 <lv_init+0x78>

#if LV_LOG_LEVEL == LV_LOG_LEVEL_TRACE
    LV_LOG_WARN("Log level is set to 'Trace' which makes LVGL much slower");
#endif

    lv_extra_init();
 8005d32:	f019 fa84 	bl	801f23e <lv_extra_init>

    lv_initialized = true;
 8005d36:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <lv_init+0x90>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e000      	b.n	8005d40 <lv_init+0x88>
        return;
 8005d3e:	bf00      	nop

    LV_LOG_TRACE("finished");
}
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	200006fc 	.word	0x200006fc
 8005d4c:	20000858 	.word	0x20000858
 8005d50:	20000864 	.word	0x20000864
 8005d54:	080266ec 	.word	0x080266ec
 8005d58:	11223344 	.word	0x11223344

08005d5c <lv_obj_create>:
#endif
}
#endif

lv_obj_t * lv_obj_create(lv_obj_t * parent)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4806      	ldr	r0, [pc, #24]	; (8005d80 <lv_obj_create+0x24>)
 8005d68:	f001 f9b8 	bl	80070dc <lv_obj_class_create_obj>
 8005d6c:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f001 fa69 	bl	8007246 <lv_obj_class_init_obj>
    return obj;
 8005d74:	68fb      	ldr	r3, [r7, #12]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	08026758 	.word	0x08026758

08005d84 <lv_obj_clear_flag>:
        lv_obj_invalidate_area(obj, &ver_area);
    }
}

void lv_obj_clear_flag(lv_obj_t * obj, lv_obj_flag_t f)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f002 fe10 	bl	80089b4 <lv_obj_is_layout_positioned>
 8005d94:	4603      	mov	r3, r0
 8005d96:	77fb      	strb	r3, [r7, #31]
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d013      	beq.n	8005dca <lv_obj_clear_flag+0x46>
        lv_area_t hor_area, ver_area;
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005da2:	f107 020c 	add.w	r2, r7, #12
 8005da6:	f107 0314 	add.w	r3, r7, #20
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f005 f82f 	bl	800ae10 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8005db2:	f107 0314 	add.w	r3, r7, #20
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f003 fc1b 	bl	80095f4 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8005dbe:	f107 030c 	add.w	r3, r7, #12
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f003 fc15 	bl	80095f4 <lv_obj_invalidate_area>
    }

    obj->flags &= (~f);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69da      	ldr	r2, [r3, #28]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	61da      	str	r2, [r3, #28]

    if(f & LV_OBJ_FLAG_HIDDEN) {
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d012      	beq.n	8005e08 <lv_obj_clear_flag+0x84>
        lv_obj_invalidate(obj);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f003 fc3b 	bl	800965e <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f002 fde3 	bl	80089b4 <lv_obj_is_layout_positioned>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <lv_obj_clear_flag+0x84>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f008 f887 	bl	800df08 <lv_obj_get_parent>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f002 fe01 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f002 fdfe 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
        }
    }

    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f002 fdd3 	bl	80089b4 <lv_obj_is_layout_positioned>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	461a      	mov	r2, r3
 8005e12:	7ffb      	ldrb	r3, [r7, #31]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d104      	bne.n	8005e22 <lv_obj_clear_flag+0x9e>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f003 73c0 	and.w	r3, r3, #25165824	; 0x1800000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <lv_obj_clear_flag+0xac>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f008 f870 	bl	800df08 <lv_obj_get_parent>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f002 fdea 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
    }

}
 8005e30:	bf00      	nop
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <lv_obj_add_state>:

void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state | state;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8c1a      	ldrh	r2, [r3, #32]
 8005e48:	887b      	ldrh	r3, [r7, #2]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8c1b      	ldrh	r3, [r3, #32]
 8005e52:	89fa      	ldrh	r2, [r7, #14]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d004      	beq.n	8005e62 <lv_obj_add_state+0x2a>
        lv_obj_set_state(obj, new_state);
 8005e58:	89fb      	ldrh	r3, [r7, #14]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 ffd1 	bl	8006e04 <lv_obj_set_state>
    }
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <lv_obj_clear_state>:

void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state & (~state);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	8c1b      	ldrh	r3, [r3, #32]
 8005e7a:	b21a      	sxth	r2, r3
 8005e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	b21b      	sxth	r3, r3
 8005e84:	4013      	ands	r3, r2
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8c1b      	ldrh	r3, [r3, #32]
 8005e8e:	89fa      	ldrh	r2, [r7, #14]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d004      	beq.n	8005e9e <lv_obj_clear_state+0x34>
        lv_obj_set_state(obj, new_state);
 8005e94:	89fb      	ldrh	r3, [r7, #14]
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 ffb3 	bl	8006e04 <lv_obj_set_state>
    }
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <lv_obj_has_flag>:
/*=======================
 * Getter functions
 *======================*/

bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f)  == f ? true : false;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <lv_obj_has_flag_any>:

bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f) ? true : false;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69da      	ldr	r2, [r3, #28]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bf14      	ite	ne
 8005ee6:	2301      	movne	r3, #1
 8005ee8:	2300      	moveq	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->state;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	8c1b      	ldrh	r3, [r3, #32]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <lv_obj_get_group>:

    return obj->state & state ? true : false;
}

void * lv_obj_get_group(const lv_obj_t * obj)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr) return obj->spec_attr->group_p;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <lv_obj_get_group+0x18>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	e000      	b.n	8005f2a <lv_obj_get_group+0x1a>
    else return NULL;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <lv_obj_allocate_spec_attr>:
/*-------------------
 * OTHER FUNCTIONS
 *------------------*/

void lv_obj_allocate_spec_attr(lv_obj_t * obj)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d127      	bne.n	8005f98 <lv_obj_allocate_spec_attr+0x60>
        static uint32_t x = 0;
        x++;
 8005f48:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <lv_obj_allocate_spec_attr+0x68>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <lv_obj_allocate_spec_attr+0x68>)
 8005f50:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8005f52:	201c      	movs	r0, #28
 8005f54:	f01b fed4 	bl	8021d00 <lv_mem_alloc>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d100      	bne.n	8005f68 <lv_obj_allocate_spec_attr+0x30>
 8005f66:	e7fe      	b.n	8005f66 <lv_obj_allocate_spec_attr+0x2e>
        if(obj->spec_attr == NULL) return;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d012      	beq.n	8005f96 <lv_obj_allocate_spec_attr+0x5e>

        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	211c      	movs	r1, #28
 8005f76:	4618      	mov	r0, r3
 8005f78:	f01c faf6 	bl	8022568 <lv_memset_00>

        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	7e53      	ldrb	r3, [r2, #25]
 8005f82:	f043 030f 	orr.w	r3, r3, #15
 8005f86:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	7e13      	ldrb	r3, [r2, #24]
 8005f8e:	f043 0303 	orr.w	r3, r3, #3
 8005f92:	7613      	strb	r3, [r2, #24]
 8005f94:	e000      	b.n	8005f98 <lv_obj_allocate_spec_attr+0x60>
        if(obj->spec_attr == NULL) return;
 8005f96:	bf00      	nop
    }
}
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000700 	.word	0x20000700

08005fa4 <lv_obj_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_t * parent = obj->parent;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]
    if(parent) {
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d03f      	beq.n	800603a <lv_obj_constructor+0x96>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f004 fb1e 	bl	800a5fc <lv_obj_get_scroll_left>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	817b      	strh	r3, [r7, #10]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f004 fa7b 	bl	800a4c0 <lv_obj_get_scroll_top>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	813b      	strh	r3, [r7, #8]

        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005fd4:	b29c      	uxth	r4, r3
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff fd47 	bl	8005a6c <lv_obj_get_style_pad_top>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	4423      	add	r3, r4
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	893b      	ldrh	r3, [r7, #8]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	b21a      	sxth	r2, r3
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	82da      	strh	r2, [r3, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	b21a      	sxth	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	835a      	strh	r2, [r3, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800600a:	b29c      	uxth	r4, r3
 800600c:	2100      	movs	r1, #0
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fd3e 	bl	8005a90 <lv_obj_get_style_pad_left>
 8006014:	4603      	mov	r3, r0
 8006016:	b29b      	uxth	r3, r3
 8006018:	4423      	add	r3, r4
 800601a:	b29a      	uxth	r2, r3
 800601c:	897b      	ldrh	r3, [r7, #10]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	b29b      	uxth	r3, r3
 8006022:	b21a      	sxth	r2, r3
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	829a      	strh	r2, [r3, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29b      	uxth	r3, r3
 8006034:	b21a      	sxth	r2, r3
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	831a      	strh	r2, [r3, #24]
    }

    /*Set attributes*/
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2202      	movs	r2, #2
 800603e:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <lv_obj_constructor+0xba>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <lv_obj_constructor+0xcc>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f043 0204 	orr.w	r2, r3, #4
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f043 0210 	orr.w	r2, r3, #16
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <lv_obj_constructor+0x11a>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	61da      	str	r2, [r3, #28]

    LV_TRACE_OBJ_CREATE("finished");
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd90      	pop	{r4, r7, pc}

080060c6 <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    _lv_event_mark_deleted(obj);
 80060d0:	6838      	ldr	r0, [r7, #0]
 80060d2:	f7fe fdc3 	bl	8004c5c <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 80060d6:	2000      	movs	r0, #0
 80060d8:	f006 fbfa 	bl	800c8d0 <lv_obj_enable_style_refresh>
    lv_obj_remove_style_all(obj);
 80060dc:	6838      	ldr	r0, [r7, #0]
 80060de:	f7ff fc5b 	bl	8005998 <lv_obj_remove_style_all>
    lv_obj_enable_style_refresh(true);
 80060e2:	2001      	movs	r0, #1
 80060e4:	f006 fbf4 	bl	800c8d0 <lv_obj_enable_style_refresh>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 80060e8:	2100      	movs	r1, #0
 80060ea:	6838      	ldr	r0, [r7, #0]
 80060ec:	f019 ff9c 	bl	8020028 <lv_anim_del>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 80060f0:	6838      	ldr	r0, [r7, #0]
 80060f2:	f7ff ff0d 	bl	8005f10 <lv_obj_get_group>
 80060f6:	60f8      	str	r0, [r7, #12]
    if(group) lv_group_remove_obj(obj);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <lv_obj_destructor+0x3e>
 80060fe:	6838      	ldr	r0, [r7, #0]
 8006100:	f7ff f85a 	bl	80051b8 <lv_group_remove_obj>

    if(obj->spec_attr) {
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d025      	beq.n	8006158 <lv_obj_destructor+0x92>
        if(obj->spec_attr->children) {
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <lv_obj_destructor+0x64>
            lv_mem_free(obj->spec_attr->children);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f01b fe1f 	bl	8021d60 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <lv_obj_destructor+0x82>
            lv_mem_free(obj->spec_attr->event_dsc);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	4618      	mov	r0, r3
 800613c:	f01b fe10 	bl	8021d60 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2200      	movs	r2, #0
 8006146:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f01b fe07 	bl	8021d60 <lv_mem_free>
        obj->spec_attr = NULL;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2200      	movs	r2, #0
 8006156:	609a      	str	r2, [r3, #8]
    }
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <lv_obj_draw>:

static void lv_obj_draw(lv_event_t * e)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b0b4      	sub	sp, #208	; 0xd0
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
    lv_event_code_t code = lv_event_get_code(e);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fe fd5b 	bl	8004c24 <lv_event_get_code>
 800616e:	4603      	mov	r3, r0
 8006170:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    lv_obj_t * obj = lv_event_get_target(e);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fe fd3d 	bl	8004bf4 <lv_event_get_target>
 800617a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if(code == LV_EVENT_COVER_CHECK) {
 800617e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8006182:	2b12      	cmp	r3, #18
 8006184:	f040 8089 	bne.w	800629a <lv_obj_draw+0x13a>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7fe fd5a 	bl	8004c42 <lv_event_get_param>
 800618e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if(info->res == LV_COVER_RES_MASKED) return;
 8006192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b02      	cmp	r3, #2
 800619a:	f000 8227 	beq.w	80065ec <lv_obj_draw+0x48c>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 800619e:	2100      	movs	r1, #0
 80061a0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80061a4:	f7ff fd4d 	bl	8005c42 <lv_obj_get_style_clip_corner>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <lv_obj_draw+0x58>
            info->res = LV_COVER_RES_MASKED;
 80061ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061b2:	2202      	movs	r2, #2
 80061b4:	701a      	strb	r2, [r3, #0]
            return;
 80061b6:	e21a      	b.n	80065ee <lv_obj_draw+0x48e>
        }

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_PART_MAIN);
 80061b8:	2100      	movs	r1, #0
 80061ba:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80061be:	f7ff fd2e 	bl	8005c1e <lv_obj_get_style_radius>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 80061c8:	2100      	movs	r1, #0
 80061ca:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80061ce:	f7ff fc29 	bl	8005a24 <lv_obj_get_style_transform_width>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 80061d8:	2100      	movs	r1, #0
 80061da:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80061de:	f7ff fc33 	bl	8005a48 <lv_obj_get_style_transform_height>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 80061e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ec:	f103 0214 	add.w	r2, r3, #20
 80061f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff faec 	bl	80057d4 <lv_area_copy>
        coords.x1 -= w;
 80061fc:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8006200:	b29a      	uxth	r2, r3
 8006202:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	b29b      	uxth	r3, r3
 800620a:	b21b      	sxth	r3, r3
 800620c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.x2 += w;
 8006210:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800621a:	4413      	add	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	b21b      	sxth	r3, r3
 8006220:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        coords.y1 -= h;
 8006224:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	b29b      	uxth	r3, r3
 8006232:	b21b      	sxth	r3, r3
 8006234:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        coords.y2 += h;
 8006238:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006242:	4413      	add	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	b21b      	sxth	r3, r3
 8006248:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

        if(_lv_area_is_in(info->area, &coords, r) == false) {
 800624c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 8006256:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800625a:	4618      	mov	r0, r3
 800625c:	f01a fc14 	bl	8020a88 <_lv_area_is_in>
 8006260:	4603      	mov	r3, r0
 8006262:	f083 0301 	eor.w	r3, r3, #1
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <lv_obj_draw+0x116>
            info->res = LV_COVER_RES_NOT_COVER;
 800626c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006270:	2201      	movs	r2, #1
 8006272:	701a      	strb	r2, [r3, #0]
            return;
 8006274:	e1bb      	b.n	80065ee <lv_obj_draw+0x48e>
        }

        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8006276:	2100      	movs	r1, #0
 8006278:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800627c:	f7ff fc2b 	bl	8005ad6 <lv_obj_get_style_bg_opa>
 8006280:	4603      	mov	r3, r0
 8006282:	2bfc      	cmp	r3, #252	; 0xfc
 8006284:	d804      	bhi.n	8006290 <lv_obj_draw+0x130>
            info->res = LV_COVER_RES_NOT_COVER;
 8006286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800628a:	2201      	movs	r2, #1
 800628c:	701a      	strb	r2, [r3, #0]
            return;
 800628e:	e1ae      	b.n	80065ee <lv_obj_draw+0x48e>
        }

        info->res = LV_COVER_RES_COVER;
 8006290:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	e1a9      	b.n	80065ee <lv_obj_draw+0x48e>

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 800629a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800629e:	2b15      	cmp	r3, #21
 80062a0:	f040 80e7 	bne.w	8006472 <lv_obj_draw+0x312>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fe fd4d 	bl	8004d44 <lv_event_get_draw_ctx>
 80062aa:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 80062ae:	f107 030c 	add.w	r3, r7, #12
 80062b2:	4618      	mov	r0, r3
 80062b4:	f00d fe88 	bl	8013fc8 <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80062b8:	2100      	movs	r1, #0
 80062ba:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80062be:	f7ff fc51 	bl	8005b64 <lv_obj_get_style_border_post>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <lv_obj_draw+0x174>
            draw_dsc.border_post = 1;
 80062c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }

        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80062d4:	f107 030c 	add.w	r3, r7, #12
 80062d8:	461a      	mov	r2, r3
 80062da:	2100      	movs	r1, #0
 80062dc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80062e0:	f001 fb9c 	bl	8007a1c <lv_obj_init_draw_rect_dsc>
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 80062e4:	2100      	movs	r1, #0
 80062e6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80062ea:	f7ff fb9b 	bl	8005a24 <lv_obj_get_style_transform_width>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 80062f4:	2100      	movs	r1, #0
 80062f6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80062fa:	f7ff fba5 	bl	8005a48 <lv_obj_get_style_transform_height>
 80062fe:	4603      	mov	r3, r0
 8006300:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8006304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006308:	f103 0214 	add.w	r2, r3, #20
 800630c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fa5e 	bl	80057d4 <lv_area_copy>
        coords.x1 -= w;
 8006318:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 800631c:	b29a      	uxth	r2, r3
 800631e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	b29b      	uxth	r3, r3
 8006326:	b21b      	sxth	r3, r3
 8006328:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.x2 += w;
 800632c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8006330:	b29a      	uxth	r2, r3
 8006332:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006336:	4413      	add	r3, r2
 8006338:	b29b      	uxth	r3, r3
 800633a:	b21b      	sxth	r3, r3
 800633c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.y1 -= h;
 8006340:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8006344:	b29a      	uxth	r2, r3
 8006346:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	b29b      	uxth	r3, r3
 800634e:	b21b      	sxth	r3, r3
 8006350:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
        coords.y2 += h;
 8006354:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8006358:	b29a      	uxth	r2, r3
 800635a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800635e:	4413      	add	r3, r2
 8006360:	b29b      	uxth	r3, r3
 8006362:	b21b      	sxth	r3, r3
 8006364:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

        lv_obj_draw_part_dsc_t part_dsc;
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8006368:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800636c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006370:	4618      	mov	r0, r3
 8006372:	f001 fe2f 	bl	8007fd4 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 8006376:	4b9f      	ldr	r3, [pc, #636]	; (80065f4 <lv_obj_draw+0x494>)
 8006378:	643b      	str	r3, [r7, #64]	; 0x40
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 800637a:	2300      	movs	r3, #0
 800637c:	647b      	str	r3, [r7, #68]	; 0x44
        part_dsc.rect_dsc = &draw_dsc;
 800637e:	f107 030c 	add.w	r3, r7, #12
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
        part_dsc.draw_area = &coords;
 8006384:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006388:	64bb      	str	r3, [r7, #72]	; 0x48
        part_dsc.part = LV_PART_MAIN;
 800638a:	2300      	movs	r3, #0
 800638c:	673b      	str	r3, [r7, #112]	; 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800638e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006392:	461a      	mov	r2, r3
 8006394:	211a      	movs	r1, #26
 8006396:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800639a:	f7fe fbab 	bl	8004af4 <lv_event_send>

#if LV_DRAW_COMPLEX
        /*With clip corner enabled draw the bg img separately to make it clipped*/
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 800639e:	2100      	movs	r1, #0
 80063a0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80063a4:	f7ff fc4d 	bl	8005c42 <lv_obj_get_style_clip_corner>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <lv_obj_draw+0x25a>
 80063ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <lv_obj_draw+0x25a>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <lv_obj_draw+0x25c>
 80063ba:	2300      	movs	r3, #0
 80063bc:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80063c0:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
        const void * bg_img_src = draw_dsc.bg_img_src;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if(clip_corner) {
 80063d2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <lv_obj_draw+0x27e>
            draw_dsc.bg_img_src = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	61bb      	str	r3, [r7, #24]
        }
#endif

        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80063de:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	4619      	mov	r1, r3
 80063e8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80063ec:	f00d fe30 	bl	8014050 <lv_draw_rect>


#if LV_DRAW_COMPLEX
        if(clip_corner) {
 80063f0:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d033      	beq.n	8006460 <lv_obj_draw+0x300>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 80063f8:	2018      	movs	r0, #24
 80063fa:	f01b fd0b 	bl	8021e14 <lv_mem_buf_get>
 80063fe:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8006402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006406:	f103 0114 	add.w	r1, r3, #20
 800640a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800640e:	2300      	movs	r3, #0
 8006410:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006414:	f00b fddc 	bl	8011fd0 <lv_draw_mask_radius_init>
            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 8006418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800641c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006420:	4619      	mov	r1, r3
 8006422:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006426:	f00b fa07 	bl	8011838 <lv_draw_mask_add>

            if(bg_img_src) {
 800642a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800642e:	2b00      	cmp	r3, #0
 8006430:	d016      	beq.n	8006460 <lv_obj_draw+0x300>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8006436:	2300      	movs	r3, #0
 8006438:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8006442:	2300      	movs	r3, #0
 8006444:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                draw_dsc.bg_img_src = bg_img_src;
 8006448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800644c:	61bb      	str	r3, [r7, #24]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 800644e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	4619      	mov	r1, r3
 8006458:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800645c:	f00d fdf8 	bl	8014050 <lv_draw_rect>
            }

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006460:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006464:	461a      	mov	r2, r3
 8006466:	211b      	movs	r1, #27
 8006468:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800646c:	f7fe fb42 	bl	8004af4 <lv_event_send>
 8006470:	e0bd      	b.n	80065ee <lv_obj_draw+0x48e>
    }
    else if(code == LV_EVENT_DRAW_POST) {
 8006472:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8006476:	2b18      	cmp	r3, #24
 8006478:	f040 80b9 	bne.w	80065ee <lv_obj_draw+0x48e>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7fe fc61 	bl	8004d44 <lv_event_get_draw_ctx>
 8006482:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        draw_scrollbar(obj, draw_ctx);
 8006486:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800648a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800648e:	f000 f8b3 	bl	80065f8 <draw_scrollbar>

#if LV_DRAW_COMPLEX
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8006492:	2100      	movs	r1, #0
 8006494:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006498:	f7ff fbd3 	bl	8005c42 <lv_obj_get_style_clip_corner>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d014      	beq.n	80064cc <lv_obj_draw+0x36c>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 80064a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064a6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80064aa:	4618      	mov	r0, r3
 80064ac:	f00b fa62 	bl	8011974 <lv_draw_mask_remove_custom>
 80064b0:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
            if(param) {
 80064b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <lv_obj_draw+0x36c>
                lv_draw_mask_free_param(param);
 80064bc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80064c0:	f00b fa80 	bl	80119c4 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 80064c4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80064c8:	f01b fd50 	bl	8021f6c <lv_mem_buf_release>
            }
        }
#endif

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80064cc:	2100      	movs	r1, #0
 80064ce:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80064d2:	f7ff fb47 	bl	8005b64 <lv_obj_get_style_border_post>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8088 	beq.w	80065ee <lv_obj_draw+0x48e>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 80064de:	f107 030c 	add.w	r3, r7, #12
 80064e2:	4618      	mov	r0, r3
 80064e4:	f00d fd70 	bl	8013fc8 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80064fe:	f107 030c 	add.w	r3, r7, #12
 8006502:	461a      	mov	r2, r3
 8006504:	2100      	movs	r1, #0
 8006506:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800650a:	f001 fa87 	bl	8007a1c <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 800650e:	2100      	movs	r1, #0
 8006510:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006514:	f7ff fa86 	bl	8005a24 <lv_obj_get_style_transform_width>
 8006518:	4603      	mov	r3, r0
 800651a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 800651e:	2100      	movs	r1, #0
 8006520:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006524:	f7ff fa90 	bl	8005a48 <lv_obj_get_style_transform_height>
 8006528:	4603      	mov	r3, r0
 800652a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 800652e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006532:	f103 0214 	add.w	r2, r3, #20
 8006536:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800653a:	4611      	mov	r1, r2
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff f949 	bl	80057d4 <lv_area_copy>
            coords.x1 -= w;
 8006542:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	b29b      	uxth	r3, r3
 8006550:	b21b      	sxth	r3, r3
 8006552:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
            coords.x2 += w;
 8006556:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 800655a:	b29a      	uxth	r2, r3
 800655c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006560:	4413      	add	r3, r2
 8006562:	b29b      	uxth	r3, r3
 8006564:	b21b      	sxth	r3, r3
 8006566:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
            coords.y1 -= h;
 800656a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800656e:	b29a      	uxth	r2, r3
 8006570:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	b29b      	uxth	r3, r3
 8006578:	b21b      	sxth	r3, r3
 800657a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            coords.y2 += h;
 800657e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006582:	b29a      	uxth	r2, r3
 8006584:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006588:	4413      	add	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	b21b      	sxth	r3, r3
 800658e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            lv_obj_draw_part_dsc_t part_dsc;
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8006592:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006596:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800659a:	4618      	mov	r0, r3
 800659c:	f001 fd1a 	bl	8007fd4 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 80065a0:	4b14      	ldr	r3, [pc, #80]	; (80065f4 <lv_obj_draw+0x494>)
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 80065a4:	2301      	movs	r3, #1
 80065a6:	647b      	str	r3, [r7, #68]	; 0x44
            part_dsc.rect_dsc = &draw_dsc;
 80065a8:	f107 030c 	add.w	r3, r7, #12
 80065ac:	64fb      	str	r3, [r7, #76]	; 0x4c
            part_dsc.draw_area = &coords;
 80065ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80065b2:	64bb      	str	r3, [r7, #72]	; 0x48
            part_dsc.part = LV_PART_MAIN;
 80065b4:	2300      	movs	r3, #0
 80065b6:	673b      	str	r3, [r7, #112]	; 0x70
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80065b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065bc:	461a      	mov	r2, r3
 80065be:	211a      	movs	r1, #26
 80065c0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80065c4:	f7fe fa96 	bl	8004af4 <lv_event_send>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80065c8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	4619      	mov	r1, r3
 80065d2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80065d6:	f00d fd3b 	bl	8014050 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80065da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065de:	461a      	mov	r2, r3
 80065e0:	211b      	movs	r1, #27
 80065e2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80065e6:	f7fe fa85 	bl	8004af4 <lv_event_send>
 80065ea:	e000      	b.n	80065ee <lv_obj_draw+0x48e>
        if(info->res == LV_COVER_RES_MASKED) return;
 80065ec:	bf00      	nop
        }
    }
}
 80065ee:	37d0      	adds	r7, #208	; 0xd0
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	08026758 	.word	0x08026758

080065f8 <draw_scrollbar>:

static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b0a6      	sub	sp, #152	; 0x98
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006602:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006606:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f004 fbff 	bl	800ae10 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8006612:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006616:	4618      	mov	r0, r3
 8006618:	f019 ffc5 	bl	80205a6 <lv_area_get_size>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d107      	bne.n	8006632 <draw_scrollbar+0x3a>
 8006622:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006626:	4618      	mov	r0, r3
 8006628:	f019 ffbd 	bl	80205a6 <lv_area_get_size>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d062      	beq.n	80066f8 <draw_scrollbar+0x100>

    lv_draw_rect_dsc_t draw_dsc;
    lv_res_t sb_res = scrollbar_init_draw_dsc(obj, &draw_dsc);
 8006632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f865 	bl	8006708 <scrollbar_init_draw_dsc>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(sb_res != LV_RES_OK) return;
 8006644:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006648:	2b01      	cmp	r3, #1
 800664a:	d157      	bne.n	80066fc <draw_scrollbar+0x104>

    lv_obj_draw_part_dsc_t part_dsc;
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 800664c:	f107 030c 	add.w	r3, r7, #12
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fcbe 	bl	8007fd4 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8006658:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <draw_scrollbar+0x10c>)
 800665a:	613b      	str	r3, [r7, #16]
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 800665c:	2302      	movs	r3, #2
 800665e:	617b      	str	r3, [r7, #20]
    part_dsc.rect_dsc = &draw_dsc;
 8006660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006664:	61fb      	str	r3, [r7, #28]
    part_dsc.part = LV_PART_SCROLLBAR;
 8006666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800666a:	643b      	str	r3, [r7, #64]	; 0x40

    if(lv_area_get_size(&hor_area) > 0) {
 800666c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006670:	4618      	mov	r0, r3
 8006672:	f019 ff98 	bl	80205a6 <lv_area_get_size>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d018      	beq.n	80066ae <draw_scrollbar+0xb6>
        part_dsc.draw_area = &hor_area;
 800667c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006680:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8006682:	f107 030c 	add.w	r3, r7, #12
 8006686:	461a      	mov	r2, r3
 8006688:	211a      	movs	r1, #26
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fe fa32 	bl	8004af4 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8006690:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006694:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006698:	4619      	mov	r1, r3
 800669a:	6838      	ldr	r0, [r7, #0]
 800669c:	f00d fcd8 	bl	8014050 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80066a0:	f107 030c 	add.w	r3, r7, #12
 80066a4:	461a      	mov	r2, r3
 80066a6:	211b      	movs	r1, #27
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fe fa23 	bl	8004af4 <lv_event_send>
    }
    if(lv_area_get_size(&ver_area) > 0) {
 80066ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80066b2:	4618      	mov	r0, r3
 80066b4:	f019 ff77 	bl	80205a6 <lv_area_get_size>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01f      	beq.n	80066fe <draw_scrollbar+0x106>
        part_dsc.draw_area = &ver_area;
 80066be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80066c2:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80066c4:	f107 030c 	add.w	r3, r7, #12
 80066c8:	461a      	mov	r2, r3
 80066ca:	211a      	movs	r1, #26
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fe fa11 	bl	8004af4 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 80066d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80066d6:	61bb      	str	r3, [r7, #24]
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80066d8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80066dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80066e0:	4619      	mov	r1, r3
 80066e2:	6838      	ldr	r0, [r7, #0]
 80066e4:	f00d fcb4 	bl	8014050 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80066e8:	f107 030c 	add.w	r3, r7, #12
 80066ec:	461a      	mov	r2, r3
 80066ee:	211b      	movs	r1, #27
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fe f9ff 	bl	8004af4 <lv_event_send>
 80066f6:	e002      	b.n	80066fe <draw_scrollbar+0x106>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 80066f8:	bf00      	nop
 80066fa:	e000      	b.n	80066fe <draw_scrollbar+0x106>
    if(sb_res != LV_RES_OK) return;
 80066fc:	bf00      	nop
    }
}
 80066fe:	3798      	adds	r7, #152	; 0x98
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	08026758 	.word	0x08026758

08006708 <scrollbar_init_draw_dsc>:
 * @param obj pointer to an object
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
    lv_draw_rect_dsc_init(dsc);
 8006712:	6838      	ldr	r0, [r7, #0]
 8006714:	f00d fc58 	bl	8013fc8 <lv_draw_rect_dsc_init>
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8006718:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff f9da 	bl	8005ad6 <lv_obj_get_style_bg_opa>
 8006722:	4603      	mov	r3, r0
 8006724:	461a      	mov	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	70da      	strb	r2, [r3, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	78db      	ldrb	r3, [r3, #3]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d906      	bls.n	8006740 <scrollbar_init_draw_dsc+0x38>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8006732:	683c      	ldr	r4, [r7, #0]
 8006734:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff f9bb 	bl	8005ab4 <lv_obj_get_style_bg_color>
 800673e:	7120      	strb	r0, [r4, #4]
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8006740:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff f9e9 	bl	8005b1c <lv_obj_get_style_border_opa>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	771a      	strb	r2, [r3, #28]
    if(dsc->border_opa > LV_OPA_MIN) {
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	7f1b      	ldrb	r3, [r3, #28]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d918      	bls.n	800678c <scrollbar_init_draw_dsc+0x84>
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 800675a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff f9ee 	bl	8005b40 <lv_obj_get_style_border_width>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	835a      	strh	r2, [r3, #26]
        if(dsc->border_width > 0) {
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8006772:	2b00      	cmp	r3, #0
 8006774:	dd07      	ble.n	8006786 <scrollbar_init_draw_dsc+0x7e>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8006776:	683c      	ldr	r4, [r7, #0]
 8006778:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff f9bc 	bl	8005afa <lv_obj_get_style_border_color>
 8006782:	7620      	strb	r0, [r4, #24]
 8006784:	e002      	b.n	800678c <scrollbar_init_draw_dsc+0x84>
        }
        else {
            dsc->border_opa = LV_OPA_TRANSP;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2200      	movs	r2, #0
 800678a:	771a      	strb	r2, [r3, #28]
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 800678c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff fa32 	bl	8005bfa <lv_obj_get_style_shadow_opa>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d923      	bls.n	80067f2 <scrollbar_init_draw_dsc+0xea>
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 80067aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff f9ee 	bl	8005b90 <lv_obj_get_style_shadow_width>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	84da      	strh	r2, [r3, #38]	; 0x26
        if(dsc->shadow_width > 0) {
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dd11      	ble.n	80067ea <scrollbar_init_draw_dsc+0xe2>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 80067c6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff f9f2 	bl	8005bb4 <lv_obj_get_style_shadow_spread>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	859a      	strh	r2, [r3, #44]	; 0x2c
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 80067d8:	683c      	ldr	r4, [r7, #0]
 80067da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff f9fa 	bl	8005bd8 <lv_obj_get_style_shadow_color>
 80067e4:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 80067e8:	e003      	b.n	80067f2 <scrollbar_init_draw_dsc+0xea>
        }
        else {
            dsc->shadow_opa = LV_OPA_TRANSP;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
 80067f2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fa39 	bl	8005c6e <lv_obj_get_style_opa>
 80067fc:	4603      	mov	r3, r0
 80067fe:	73fb      	strb	r3, [r7, #15]
    if(opa < LV_OPA_MAX) {
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	2bfc      	cmp	r3, #252	; 0xfc
 8006804:	d81e      	bhi.n	8006844 <scrollbar_init_draw_dsc+0x13c>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	78db      	ldrb	r3, [r3, #3]
 800680a:	461a      	mov	r2, r3
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	121b      	asrs	r3, r3, #8
 8006814:	b2da      	uxtb	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	70da      	strb	r2, [r3, #3]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	78db      	ldrb	r3, [r3, #3]
 800681e:	461a      	mov	r2, r3
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	121b      	asrs	r3, r3, #8
 8006828:	b2da      	uxtb	r2, r3
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	771a      	strb	r2, [r3, #28]
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	78db      	ldrb	r3, [r3, #3]
 8006832:	461a      	mov	r2, r3
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	121b      	asrs	r3, r3, #8
 800683c:	b2da      	uxtb	r2, r3
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	78db      	ldrb	r3, [r3, #3]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d108      	bne.n	800685e <scrollbar_init_draw_dsc+0x156>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	7f1b      	ldrb	r3, [r3, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <scrollbar_init_draw_dsc+0x156>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <scrollbar_init_draw_dsc+0x16c>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 800685e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff f9db 	bl	8005c1e <lv_obj_get_style_radius>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	801a      	strh	r2, [r3, #0]
        return LV_RES_OK;
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <scrollbar_init_draw_dsc+0x16e>
    }
    else {
        return LV_RES_INV;
 8006874:	2300      	movs	r3, #0
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
    else return LV_RES_INV;
#endif
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	bd90      	pop	{r4, r7, pc}

0800687e <lv_obj_event>:

static void lv_obj_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 800687e:	b590      	push	{r4, r7, lr}
 8006880:	b09b      	sub	sp, #108	; 0x6c
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 8006888:	6838      	ldr	r0, [r7, #0]
 800688a:	f7fe f9cb 	bl	8004c24 <lv_event_get_code>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_obj_t * obj = lv_event_get_current_target(e);
 8006894:	6838      	ldr	r0, [r7, #0]
 8006896:	f7fe f9b9 	bl	8004c0c <lv_event_get_current_target>
 800689a:	6538      	str	r0, [r7, #80]	; 0x50
    if(code == LV_EVENT_PRESSED) {
 800689c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d104      	bne.n	80068ae <lv_obj_event+0x30>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 80068a4:	2120      	movs	r1, #32
 80068a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80068a8:	f7ff fac6 	bl	8005e38 <lv_obj_add_state>
 80068ac:	e2a7      	b.n	8006dfe <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_RELEASED) {
 80068ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d131      	bne.n	800691a <lv_obj_event+0x9c>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 80068b6:	2120      	movs	r1, #32
 80068b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80068ba:	f7ff fad6 	bl	8005e6a <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 80068be:	6838      	ldr	r0, [r7, #0]
 80068c0:	f7fe f9bf 	bl	8004c42 <lv_event_get_param>
 80068c4:	6238      	str	r0, [r7, #32]
        /*Go the checked state if enabled*/
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 80068c6:	6a38      	ldr	r0, [r7, #32]
 80068c8:	f7fe ff5b 	bl	8005782 <lv_indev_get_scroll_obj>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f040 8295 	bne.w	8006dfe <lv_obj_event+0x580>
 80068d4:	2108      	movs	r1, #8
 80068d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80068d8:	f7ff fae5 	bl	8005ea6 <lv_obj_has_flag>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 828d 	beq.w	8006dfe <lv_obj_event+0x580>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 80068e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80068e6:	f7ff fb07 	bl	8005ef8 <lv_obj_get_state>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <lv_obj_event+0x80>
 80068f4:	2101      	movs	r1, #1
 80068f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80068f8:	f7ff fa9e 	bl	8005e38 <lv_obj_add_state>
 80068fc:	e003      	b.n	8006906 <lv_obj_event+0x88>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80068fe:	2101      	movs	r1, #1
 8006900:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006902:	f7ff fab2 	bl	8005e6a <lv_obj_clear_state>

            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8006906:	2200      	movs	r2, #0
 8006908:	211c      	movs	r1, #28
 800690a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800690c:	f7fe f8f2 	bl	8004af4 <lv_event_send>
 8006910:	4603      	mov	r3, r0
 8006912:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) return;
 8006914:	7ffb      	ldrb	r3, [r7, #31]
 8006916:	2b01      	cmp	r3, #1
 8006918:	e271      	b.n	8006dfe <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_PRESS_LOST) {
 800691a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800691e:	2b03      	cmp	r3, #3
 8006920:	d104      	bne.n	800692c <lv_obj_event+0xae>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8006922:	2120      	movs	r1, #32
 8006924:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006926:	f7ff faa0 	bl	8005e6a <lv_obj_clear_state>
 800692a:	e268      	b.n	8006dfe <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_STYLE_CHANGED) {
 800692c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006930:	2b2a      	cmp	r3, #42	; 0x2a
 8006932:	d119      	bne.n	8006968 <lv_obj_event+0xea>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006934:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006936:	f007 fb2b 	bl	800df90 <lv_obj_get_child_cnt>
 800693a:	62b8      	str	r0, [r7, #40]	; 0x28
        for(uint32_t i = 0; i < child_cnt; i++) {
 800693c:	2300      	movs	r3, #0
 800693e:	667b      	str	r3, [r7, #100]	; 0x64
 8006940:	e00d      	b.n	800695e <lv_obj_event+0xe0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8006942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
            lv_obj_mark_layout_as_dirty(child);
 8006952:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006954:	f002 f856 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8006958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695a:	3301      	adds	r3, #1
 800695c:	667b      	str	r3, [r7, #100]	; 0x64
 800695e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	429a      	cmp	r2, r3
 8006964:	d3ed      	bcc.n	8006942 <lv_obj_event+0xc4>
 8006966:	e24a      	b.n	8006dfe <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_KEY) {
 8006968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800696c:	2b0d      	cmp	r3, #13
 800696e:	f040 8126 	bne.w	8006bbe <lv_obj_event+0x340>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8006972:	2108      	movs	r1, #8
 8006974:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006976:	f7ff fa96 	bl	8005ea6 <lv_obj_has_flag>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d030      	beq.n	80069e2 <lv_obj_event+0x164>
            char c = *((char *)lv_event_get_param(e));
 8006980:	6838      	ldr	r0, [r7, #0]
 8006982:	f7fe f95e 	bl	8004c42 <lv_event_get_param>
 8006986:	4603      	mov	r3, r0
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 800698e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006992:	2b13      	cmp	r3, #19
 8006994:	d003      	beq.n	800699e <lv_obj_event+0x120>
 8006996:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800699a:	2b11      	cmp	r3, #17
 800699c:	d104      	bne.n	80069a8 <lv_obj_event+0x12a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 800699e:	2101      	movs	r1, #1
 80069a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80069a2:	f7ff fa49 	bl	8005e38 <lv_obj_add_state>
 80069a6:	e00b      	b.n	80069c0 <lv_obj_event+0x142>
            }
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80069a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069ac:	2b14      	cmp	r3, #20
 80069ae:	d003      	beq.n	80069b8 <lv_obj_event+0x13a>
 80069b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069b4:	2b12      	cmp	r3, #18
 80069b6:	d103      	bne.n	80069c0 <lv_obj_event+0x142>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80069b8:	2101      	movs	r1, #1
 80069ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80069bc:	f7ff fa55 	bl	8005e6a <lv_obj_clear_state>
            }

            /*With Enter LV_EVENT_RELEASED will send VALUE_CHANGE event*/
            if(c != LV_KEY_ENTER) {
 80069c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069c4:	2b0a      	cmp	r3, #10
 80069c6:	f000 821a 	beq.w	8006dfe <lv_obj_event+0x580>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80069ca:	2200      	movs	r2, #0
 80069cc:	211c      	movs	r1, #28
 80069ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80069d0:	f7fe f890 	bl	8004af4 <lv_event_send>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if(res != LV_RES_OK) return;
 80069da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069de:	2b01      	cmp	r3, #1
 80069e0:	e20d      	b.n	8006dfe <lv_obj_event+0x580>
            }
        }
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 80069e2:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80069e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80069e8:	f7ff fa5d 	bl	8005ea6 <lv_obj_has_flag>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 8205 	beq.w	8006dfe <lv_obj_event+0x580>
 80069f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80069f6:	f000 fc8d 	bl	8007314 <lv_obj_is_editable>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f083 0301 	eor.w	r3, r3, #1
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 81fb 	beq.w	8006dfe <lv_obj_event+0x580>
            /*scroll by keypad or encoder*/
            lv_anim_enable_t anim_enable = LV_ANIM_OFF;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8006a0e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a10:	f003 fdf4 	bl	800a5fc <lv_obj_get_scroll_left>
 8006a14:	4603      	mov	r3, r0
 8006a16:	867b      	strh	r3, [r7, #50]	; 0x32
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8006a18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a1a:	f003 fe93 	bl	800a744 <lv_obj_get_scroll_right>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	863b      	strh	r3, [r7, #48]	; 0x30
            char c = *((char *)lv_event_get_param(e));
 8006a22:	6838      	ldr	r0, [r7, #0]
 8006a24:	f7fe f90d 	bl	8004c42 <lv_event_get_param>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(c == LV_KEY_DOWN) {
 8006a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a34:	2b12      	cmp	r3, #18
 8006a36:	d118      	bne.n	8006a6a <lv_obj_event+0x1ec>
                /*use scroll_to_x/y functions to enforce scroll limits*/
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006a38:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a3a:	f003 fd29 	bl	800a490 <lv_obj_get_scroll_y>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	b29c      	uxth	r4, r3
 8006a42:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a44:	f002 f84f 	bl	8008ae6 <lv_obj_get_height>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da00      	bge.n	8006a50 <lv_obj_event+0x1d2>
 8006a4e:	3303      	adds	r3, #3
 8006a50:	109b      	asrs	r3, r3, #2
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	4423      	add	r3, r4
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	b21b      	sxth	r3, r3
 8006a5c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006a60:	4619      	mov	r1, r3
 8006a62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a64:	f004 f93c 	bl	800ace0 <lv_obj_scroll_to_y>
 8006a68:	e1c9      	b.n	8006dfe <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_UP) {
 8006a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a6e:	2b11      	cmp	r3, #17
 8006a70:	d118      	bne.n	8006aa4 <lv_obj_event+0x226>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006a72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a74:	f003 fd0c 	bl	800a490 <lv_obj_get_scroll_y>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	b29c      	uxth	r4, r3
 8006a7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a7e:	f002 f832 	bl	8008ae6 <lv_obj_get_height>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	da00      	bge.n	8006a8a <lv_obj_event+0x20c>
 8006a88:	3303      	adds	r3, #3
 8006a8a:	109b      	asrs	r3, r3, #2
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	1ae3      	subs	r3, r4, r3
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	b21b      	sxth	r3, r3
 8006a96:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a9e:	f004 f91f 	bl	800ace0 <lv_obj_scroll_to_y>
 8006aa2:	e1ac      	b.n	8006dfe <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_RIGHT) {
 8006aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aa8:	2b13      	cmp	r3, #19
 8006aaa:	d141      	bne.n	8006b30 <lv_obj_event+0x2b2>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006aac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006aae:	f003 fc95 	bl	800a3dc <lv_obj_get_scroll_dir>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <lv_obj_event+0x24e>
 8006abc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	dc1c      	bgt.n	8006afe <lv_obj_event+0x280>
 8006ac4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dc18      	bgt.n	8006afe <lv_obj_event+0x280>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006acc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ace:	f003 fcdf 	bl	800a490 <lv_obj_get_scroll_y>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	b29c      	uxth	r4, r3
 8006ad6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ad8:	f002 f805 	bl	8008ae6 <lv_obj_get_height>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	da00      	bge.n	8006ae4 <lv_obj_event+0x266>
 8006ae2:	3303      	adds	r3, #3
 8006ae4:	109b      	asrs	r3, r3, #2
 8006ae6:	b21b      	sxth	r3, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4423      	add	r3, r4
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	b21b      	sxth	r3, r3
 8006af0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006af4:	4619      	mov	r1, r3
 8006af6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006af8:	f004 f8f2 	bl	800ace0 <lv_obj_scroll_to_y>
 8006afc:	e17f      	b.n	8006dfe <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8006afe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b00:	f003 fcae 	bl	800a460 <lv_obj_get_scroll_x>
 8006b04:	4603      	mov	r3, r0
 8006b06:	b29c      	uxth	r4, r3
 8006b08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b0a:	f001 ffde 	bl	8008aca <lv_obj_get_width>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	da00      	bge.n	8006b16 <lv_obj_event+0x298>
 8006b14:	3303      	adds	r3, #3
 8006b16:	109b      	asrs	r3, r3, #2
 8006b18:	b21b      	sxth	r3, r3
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	4423      	add	r3, r4
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	b21b      	sxth	r3, r3
 8006b22:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006b26:	4619      	mov	r1, r3
 8006b28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b2a:	f004 f8b5 	bl	800ac98 <lv_obj_scroll_to_x>
 8006b2e:	e166      	b.n	8006dfe <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_LEFT) {
 8006b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b34:	2b14      	cmp	r3, #20
 8006b36:	f040 8162 	bne.w	8006dfe <lv_obj_event+0x580>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006b3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b3c:	f003 fc4e 	bl	800a3dc <lv_obj_get_scroll_dir>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <lv_obj_event+0x2dc>
 8006b4a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	dc1c      	bgt.n	8006b8c <lv_obj_event+0x30e>
 8006b52:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dc18      	bgt.n	8006b8c <lv_obj_event+0x30e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006b5a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b5c:	f003 fc98 	bl	800a490 <lv_obj_get_scroll_y>
 8006b60:	4603      	mov	r3, r0
 8006b62:	b29c      	uxth	r4, r3
 8006b64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b66:	f001 ffbe 	bl	8008ae6 <lv_obj_get_height>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	da00      	bge.n	8006b72 <lv_obj_event+0x2f4>
 8006b70:	3303      	adds	r3, #3
 8006b72:	109b      	asrs	r3, r3, #2
 8006b74:	b21b      	sxth	r3, r3
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	1ae3      	subs	r3, r4, r3
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	b21b      	sxth	r3, r3
 8006b7e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006b82:	4619      	mov	r1, r3
 8006b84:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b86:	f004 f8ab 	bl	800ace0 <lv_obj_scroll_to_y>
 8006b8a:	e138      	b.n	8006dfe <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8006b8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b8e:	f003 fc67 	bl	800a460 <lv_obj_get_scroll_x>
 8006b92:	4603      	mov	r3, r0
 8006b94:	b29c      	uxth	r4, r3
 8006b96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b98:	f001 ff97 	bl	8008aca <lv_obj_get_width>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	da00      	bge.n	8006ba4 <lv_obj_event+0x326>
 8006ba2:	3303      	adds	r3, #3
 8006ba4:	109b      	asrs	r3, r3, #2
 8006ba6:	b21b      	sxth	r3, r3
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	1ae3      	subs	r3, r4, r3
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	b21b      	sxth	r3, r3
 8006bb0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bb8:	f004 f86e 	bl	800ac98 <lv_obj_scroll_to_x>
 8006bbc:	e11f      	b.n	8006dfe <lv_obj_event+0x580>
            }
        }
    }
    else if(code == LV_EVENT_FOCUSED) {
 8006bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc2:	2b0e      	cmp	r3, #14
 8006bc4:	d155      	bne.n	8006c72 <lv_obj_event+0x3f4>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8006bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bcc:	f7ff f96b 	bl	8005ea6 <lv_obj_has_flag>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <lv_obj_event+0x360>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bda:	f004 f8a5 	bl	800ad28 <lv_obj_scroll_to_view_recursive>
        }

        bool editing = false;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8006be4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006be6:	f7ff f993 	bl	8005f10 <lv_obj_get_group>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fe fba3 	bl	8005338 <lv_group_get_editing>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_state_t state = LV_STATE_FOCUSED;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        /* Use the indev for then indev handler.
         * But if the obj was focused manually it returns NULL so try to
         * use the indev from the event*/
        lv_indev_t * indev = lv_indev_get_act();
 8006bfe:	f7fe fcf9 	bl	80055f4 <lv_indev_get_act>
 8006c02:	65f8      	str	r0, [r7, #92]	; 0x5c
        if(indev == NULL) indev = lv_event_get_indev(e);
 8006c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d103      	bne.n	8006c12 <lv_obj_event+0x394>
 8006c0a:	6838      	ldr	r0, [r7, #0]
 8006c0c:	f7fe f84c 	bl	8004ca8 <lv_event_get_indev>
 8006c10:	65f8      	str	r0, [r7, #92]	; 0x5c

        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8006c12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006c14:	f7fe fcfa 	bl	800560c <lv_indev_get_type>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8006c1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d003      	beq.n	8006c2e <lv_obj_event+0x3b0>
 8006c26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d105      	bne.n	8006c3a <lv_obj_event+0x3bc>
 8006c2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c32:	f043 0304 	orr.w	r3, r3, #4
 8006c36:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        if(editing) {
 8006c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00c      	beq.n	8006c5c <lv_obj_event+0x3de>
            state |= LV_STATE_EDITED;
 8006c42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c46:	f043 0308 	orr.w	r3, r3, #8
 8006c4a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_obj_add_state(obj, state);
 8006c4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c52:	4619      	mov	r1, r3
 8006c54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c56:	f7ff f8ef 	bl	8005e38 <lv_obj_add_state>
 8006c5a:	e0d0      	b.n	8006dfe <lv_obj_event+0x580>
        }
        else {
            lv_obj_add_state(obj, state);
 8006c5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c60:	4619      	mov	r1, r3
 8006c62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c64:	f7ff f8e8 	bl	8005e38 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8006c68:	2108      	movs	r1, #8
 8006c6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c6c:	f7ff f8fd 	bl	8005e6a <lv_obj_clear_state>
 8006c70:	e0c5      	b.n	8006dfe <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8006c72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c76:	2b09      	cmp	r3, #9
 8006c78:	d104      	bne.n	8006c84 <lv_obj_event+0x406>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8006c7a:	2140      	movs	r1, #64	; 0x40
 8006c7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c7e:	f7ff f8db 	bl	8005e38 <lv_obj_add_state>
 8006c82:	e0bc      	b.n	8006dfe <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SCROLL_END) {
 8006c84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c88:	2b0a      	cmp	r3, #10
 8006c8a:	d11f      	bne.n	8006ccc <lv_obj_event+0x44e>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8006c8c:	2140      	movs	r1, #64	; 0x40
 8006c8e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c90:	f7ff f8eb 	bl	8005e6a <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8006c94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c96:	f003 fb8b 	bl	800a3b0 <lv_obj_get_scrollbar_mode>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	f040 80ae 	bne.w	8006dfe <lv_obj_event+0x580>
            lv_area_t hor_area, ver_area;
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006ca2:	f107 020c 	add.w	r2, r7, #12
 8006ca6:	f107 0314 	add.w	r3, r7, #20
 8006caa:	4619      	mov	r1, r3
 8006cac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cae:	f004 f8af 	bl	800ae10 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8006cb2:	f107 0314 	add.w	r3, r7, #20
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cba:	f002 fc9b 	bl	80095f4 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8006cbe:	f107 030c 	add.w	r3, r7, #12
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cc6:	f002 fc95 	bl	80095f4 <lv_obj_invalidate_area>
 8006cca:	e098      	b.n	8006dfe <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_DEFOCUSED) {
 8006ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cd0:	2b0f      	cmp	r3, #15
 8006cd2:	d104      	bne.n	8006cde <lv_obj_event+0x460>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8006cd4:	210e      	movs	r1, #14
 8006cd6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cd8:	f7ff f8c7 	bl	8005e6a <lv_obj_clear_state>
 8006cdc:	e08f      	b.n	8006dfe <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8006cde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ce2:	2b29      	cmp	r3, #41	; 0x29
 8006ce4:	d132      	bne.n	8006d4c <lv_obj_event+0x4ce>
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cea:	f7fe fe89 	bl	8005a00 <lv_obj_get_style_align>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cf8:	f7fe ffcb 	bl	8005c92 <lv_obj_get_style_layout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        if(layout || align) {
 8006d02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <lv_obj_event+0x494>
 8006d0a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <lv_obj_event+0x49a>
            lv_obj_mark_layout_as_dirty(obj);
 8006d12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d14:	f001 fe76 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
        }

        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006d18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d1a:	f007 f939 	bl	800df90 <lv_obj_get_child_cnt>
 8006d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        for(i = 0; i < child_cnt; i++) {
 8006d20:	2300      	movs	r3, #0
 8006d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d24:	e00d      	b.n	8006d42 <lv_obj_event+0x4c4>
            lv_obj_t * child = obj->spec_attr->children[i];
 8006d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	63bb      	str	r3, [r7, #56]	; 0x38
            lv_obj_mark_layout_as_dirty(child);
 8006d36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d38:	f001 fe64 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8006d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d3e:	3301      	adds	r3, #1
 8006d40:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d3ed      	bcc.n	8006d26 <lv_obj_event+0x4a8>
 8006d4a:	e058      	b.n	8006dfe <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8006d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d50:	2b22      	cmp	r3, #34	; 0x22
 8006d52:	d133      	bne.n	8006dbc <lv_obj_event+0x53e>
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8006d54:	2100      	movs	r1, #0
 8006d56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d58:	f7fe fe2e 	bl	80059b8 <lv_obj_get_style_width>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8006d62:	2100      	movs	r1, #0
 8006d64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d66:	f7fe fe39 	bl	80059dc <lv_obj_get_style_height>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8006d70:	2100      	movs	r1, #0
 8006d72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d74:	f7fe fe44 	bl	8005a00 <lv_obj_get_style_align>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8006d7e:	2100      	movs	r1, #0
 8006d80:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d82:	f7fe ff86 	bl	8005c92 <lv_obj_get_style_layout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8006d8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10f      	bne.n	8006db4 <lv_obj_event+0x536>
 8006d94:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <lv_obj_event+0x536>
 8006d9c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006da0:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d005      	beq.n	8006db4 <lv_obj_event+0x536>
 8006da8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006dac:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d124      	bne.n	8006dfe <lv_obj_event+0x580>
            lv_obj_mark_layout_as_dirty(obj);
 8006db4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006db6:	f001 fe25 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
 8006dba:	e020      	b.n	8006dfe <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8006dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dc0:	2b13      	cmp	r3, #19
 8006dc2:	d10d      	bne.n	8006de0 <lv_obj_event+0x562>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006dc8:	f001 f866 	bl	8007e98 <lv_obj_calculate_ext_draw_size>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_event_set_ext_draw_size(e, d);
 8006dd2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6838      	ldr	r0, [r7, #0]
 8006dda:	f7fd ffd9 	bl	8004d90 <lv_event_set_ext_draw_size>
 8006dde:	e00e      	b.n	8006dfe <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8006de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006de4:	2b15      	cmp	r3, #21
 8006de6:	d007      	beq.n	8006df8 <lv_obj_event+0x57a>
 8006de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dec:	2b18      	cmp	r3, #24
 8006dee:	d003      	beq.n	8006df8 <lv_obj_event+0x57a>
 8006df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006df4:	2b12      	cmp	r3, #18
 8006df6:	d102      	bne.n	8006dfe <lv_obj_event+0x580>
        lv_obj_draw(e);
 8006df8:	6838      	ldr	r0, [r7, #0]
 8006dfa:	f7ff f9b1 	bl	8006160 <lv_obj_draw>
    }
}
 8006dfe:	376c      	adds	r7, #108	; 0x6c
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd90      	pop	{r4, r7, pc}

08006e04 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b094      	sub	sp, #80	; 0x50
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	807b      	strh	r3, [r7, #2]
    if(obj->state == new_state) return;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8c1b      	ldrh	r3, [r3, #32]
 8006e14:	887a      	ldrh	r2, [r7, #2]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	f000 815a 	beq.w	80070d0 <lv_obj_set_state+0x2cc>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8c1b      	ldrh	r3, [r3, #32]
 8006e20:	86fb      	strh	r3, [r7, #54]	; 0x36
    obj->state = new_state;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	887a      	ldrh	r2, [r7, #2]
 8006e26:	841a      	strh	r2, [r3, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8006e28:	887a      	ldrh	r2, [r7, #2]
 8006e2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f005 ffd6 	bl	800cde0 <_lv_obj_style_state_compare>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8006e3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 8148 	beq.w	80070d4 <lv_obj_set_state+0x2d0>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8006e44:	f44f 7020 	mov.w	r0, #640	; 0x280
 8006e48:	f01a ffe4 	bl	8021e14 <lv_mem_buf_get>
 8006e4c:	6338      	str	r0, [r7, #48]	; 0x30
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8006e4e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e54:	f01b fb88 	bl	8022568 <lv_memset_00>
    uint32_t tsi = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e60:	e0e0      	b.n	8007024 <lv_obj_set_state+0x220>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	4413      	add	r3, r2
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f006 f9a4 	bl	800d1cc <lv_obj_style_get_selector_state>
 8006e84:	4603      	mov	r3, r0
 8006e86:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4413      	add	r3, r2
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f006 f9a3 	bl	800d1e4 <lv_obj_style_get_selector_part>
 8006e9e:	6278      	str	r0, [r7, #36]	; 0x24
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8006ea0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006ea2:	887b      	ldrh	r3, [r7, #2]
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f040 80b3 	bne.w	8007014 <lv_obj_set_state+0x210>
        if(obj_style->is_trans) continue;
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	79db      	ldrb	r3, [r3, #7]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f040 80ad 	bne.w	8007018 <lv_obj_set_state+0x214>

        lv_style_value_t v;
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f107 020c 	add.w	r2, r7, #12
 8006ec6:	2166      	movs	r1, #102	; 0x66
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe fca2 	bl	8005812 <lv_style_get_prop_inlined>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	f040 80a3 	bne.w	800701c <lv_obj_set_state+0x218>
        const lv_style_transition_dsc_t * tr = v.ptr;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	623b      	str	r3, [r7, #32]

        /*Add the props to the set if not added yet or added but with smaller weight*/
        uint32_t j;
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8006eda:	2300      	movs	r3, #0
 8006edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ede:	e08c      	b.n	8006ffa <lv_obj_set_state+0x1f6>
            uint32_t t;
            for(t = 0; t < tsi; t++) {
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ee4:	e02e      	b.n	8006f44 <lv_obj_set_state+0x140>
                lv_style_selector_t selector = ts[t].selector;
 8006ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	4413      	add	r3, r2
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	61fb      	str	r3, [r7, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8006efa:	69f8      	ldr	r0, [r7, #28]
 8006efc:	f006 f966 	bl	800d1cc <lv_obj_style_get_selector_state>
 8006f00:	4603      	mov	r3, r0
 8006f02:	837b      	strh	r3, [r7, #26]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8006f04:	69f8      	ldr	r0, [r7, #28]
 8006f06:	f006 f96d 	bl	800d1e4 <lv_obj_style_get_selector_part>
 8006f0a:	6178      	str	r0, [r7, #20]
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8006f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	461a      	mov	r2, r3
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	4413      	add	r3, r2
 8006f1c:	891a      	ldrh	r2, [r3, #8]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	6819      	ldr	r1, [r3, #0]
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	440b      	add	r3, r1
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d107      	bne.n	8006f3e <lv_obj_set_state+0x13a>
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d103      	bne.n	8006f3e <lv_obj_set_state+0x13a>
 8006f36:	8b7a      	ldrh	r2, [r7, #26]
 8006f38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d207      	bcs.n	8006f4e <lv_obj_set_state+0x14a>
            for(t = 0; t < tsi; t++) {
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	3301      	adds	r3, #1
 8006f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d3cc      	bcc.n	8006ee6 <lv_obj_set_state+0xe2>
 8006f4c:	e000      	b.n	8006f50 <lv_obj_set_state+0x14c>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8006f4e:	bf00      	nop
            }

            /*If not found  add it*/
            if(t == tsi) {
 8006f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d14d      	bne.n	8006ff4 <lv_obj_set_state+0x1f0>
                ts[tsi].time = tr->time;
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	68d9      	ldr	r1, [r3, #12]
 8006f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	461a      	mov	r2, r3
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	4413      	add	r3, r2
 8006f6c:	b28a      	uxth	r2, r1
 8006f6e:	801a      	strh	r2, [r3, #0]
                ts[tsi].delay = tr->delay;
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	6919      	ldr	r1, [r3, #16]
 8006f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	4413      	add	r3, r2
 8006f84:	b28a      	uxth	r2, r1
 8006f86:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8006f88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	461a      	mov	r2, r3
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	4413      	add	r3, r2
 8006f98:	6a3a      	ldr	r2, [r7, #32]
 8006f9a:	6892      	ldr	r2, [r2, #8]
 8006f9c:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	18d1      	adds	r1, r2, r3
 8006fa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	4413      	add	r3, r2
 8006fb8:	880a      	ldrh	r2, [r1, #0]
 8006fba:	811a      	strh	r2, [r3, #8]
#if LV_USE_USER_DATA
                ts[tsi].user_data = tr->user_data;
 8006fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	4413      	add	r3, r2
 8006fcc:	6a3a      	ldr	r2, [r7, #32]
 8006fce:	6852      	ldr	r2, [r2, #4]
 8006fd0:	611a      	str	r2, [r3, #16]
#endif
                ts[tsi].selector = obj_style->selector;
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8006fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	4413      	add	r3, r2
 8006fea:	460a      	mov	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
                tsi++;
 8006fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	647b      	str	r3, [r7, #68]	; 0x44
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8006ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <lv_obj_set_state+0x21a>
 800700a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700c:	2b1f      	cmp	r3, #31
 800700e:	f67f af67 	bls.w	8006ee0 <lv_obj_set_state+0xdc>
 8007012:	e004      	b.n	800701e <lv_obj_set_state+0x21a>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8007014:	bf00      	nop
 8007016:	e002      	b.n	800701e <lv_obj_set_state+0x21a>
        if(obj_style->is_trans) continue;
 8007018:	bf00      	nop
 800701a:	e000      	b.n	800701e <lv_obj_set_state+0x21a>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 800701c:	bf00      	nop
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800701e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007020:	3301      	adds	r3, #1
 8007022:	643b      	str	r3, [r7, #64]	; 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007028:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800702c:	b2db      	uxtb	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007032:	4293      	cmp	r3, r2
 8007034:	d203      	bcs.n	800703e <lv_obj_set_state+0x23a>
 8007036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007038:	2b1f      	cmp	r3, #31
 800703a:	f67f af12 	bls.w	8006e62 <lv_obj_set_state+0x5e>
            }
        }
    }

    for(i = 0; i < tsi; i++) {
 800703e:	2300      	movs	r3, #0
 8007040:	643b      	str	r3, [r7, #64]	; 0x40
 8007042:	e01f      	b.n	8007084 <lv_obj_set_state+0x280>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8007044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	461a      	mov	r2, r3
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	4413      	add	r3, r2
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4618      	mov	r0, r3
 8007058:	f006 f8c4 	bl	800d1e4 <lv_obj_style_get_selector_part>
 800705c:	6138      	str	r0, [r7, #16]
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 800705e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	461a      	mov	r2, r3
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	4413      	add	r3, r2
 800706e:	8879      	ldrh	r1, [r7, #2]
 8007070:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	460b      	mov	r3, r1
 8007076:	6939      	ldr	r1, [r7, #16]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f005 fd6b 	bl	800cb54 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	3301      	adds	r3, #1
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
 8007084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007088:	429a      	cmp	r2, r3
 800708a:	d3db      	bcc.n	8007044 <lv_obj_set_state+0x240>
    }

    lv_mem_buf_release(ts);
 800708c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800708e:	f01a ff6d 	bl	8021f6c <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8007092:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007096:	2b01      	cmp	r3, #1
 8007098:	d103      	bne.n	80070a2 <lv_obj_set_state+0x29e>
        lv_obj_invalidate(obj);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f002 fadf 	bl	800965e <lv_obj_invalidate>
 80070a0:	e019      	b.n	80070d6 <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 80070a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d107      	bne.n	80070ba <lv_obj_set_state+0x2b6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80070aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070ae:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f005 fb42 	bl	800c73c <lv_obj_refresh_style>
 80070b8:	e00d      	b.n	80070d6 <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 80070ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d109      	bne.n	80070d6 <lv_obj_set_state+0x2d2>
        lv_obj_invalidate(obj);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f002 facb 	bl	800965e <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 ff93 	bl	8007ff4 <lv_obj_refresh_ext_draw_size>
 80070ce:	e002      	b.n	80070d6 <lv_obj_set_state+0x2d2>
    if(obj->state == new_state) return;
 80070d0:	bf00      	nop
 80070d2:	e000      	b.n	80070d6 <lv_obj_set_state+0x2d2>
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 80070d4:	bf00      	nop
    }
}
 80070d6:	3748      	adds	r7, #72	; 0x48
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <lv_obj_class_create_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
{
 80070dc:	b590      	push	{r4, r7, lr}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
    LV_TRACE_OBJ_CREATE("Creating object with %p class on %p parent", (void *)class_p, (void *)parent);
    uint32_t s = get_instance_size(class_p);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f990 	bl	800740c <get_instance_size>
 80070ec:	6178      	str	r0, [r7, #20]
    lv_obj_t * obj = lv_mem_alloc(s);
 80070ee:	6978      	ldr	r0, [r7, #20]
 80070f0:	f01a fe06 	bl	8021d00 <lv_mem_alloc>
 80070f4:	6138      	str	r0, [r7, #16]
    if(obj == NULL) return NULL;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <lv_obj_class_create_obj+0x24>
 80070fc:	2300      	movs	r3, #0
 80070fe:	e09e      	b.n	800723e <lv_obj_class_create_obj+0x162>
    lv_memset_00(obj, s);
 8007100:	6979      	ldr	r1, [r7, #20]
 8007102:	6938      	ldr	r0, [r7, #16]
 8007104:	f01b fa30 	bl	8022568 <lv_memset_00>
    obj->class_p = class_p;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	601a      	str	r2, [r3, #0]
    obj->parent = parent;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	605a      	str	r2, [r3, #4]

    /*Create a screen*/
    if(parent == NULL) {
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d153      	bne.n	80071c2 <lv_obj_class_create_obj+0xe6>
        LV_TRACE_OBJ_CREATE("creating a screen");
        lv_disp_t * disp = lv_disp_get_default();
 800711a:	f018 fdd1 	bl	801fcc0 <lv_disp_get_default>
 800711e:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <lv_obj_class_create_obj+0x54>
            LV_LOG_WARN("No display created yet. No place to assign the new screen");
            lv_mem_free(obj);
 8007126:	6938      	ldr	r0, [r7, #16]
 8007128:	f01a fe1a 	bl	8021d60 <lv_mem_free>
            return NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	e086      	b.n	800723e <lv_obj_class_create_obj+0x162>
        }

        if(disp->screens == NULL) {
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <lv_obj_class_create_obj+0x78>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8007138:	2004      	movs	r0, #4
 800713a:	f01a fde1 	bl	8021d00 <lv_mem_alloc>
 800713e:	4602      	mov	r2, r0
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	60da      	str	r2, [r3, #12]
            disp->screens[0] = obj;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	601a      	str	r2, [r3, #0]
            disp->screen_cnt = 1;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	625a      	str	r2, [r3, #36]	; 0x24
 8007152:	e01b      	b.n	800718c <lv_obj_class_create_obj+0xb0>
        }
        else {
            disp->screen_cnt++;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	625a      	str	r2, [r3, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f01a fe26 	bl	8021dbc <lv_mem_realloc>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	60da      	str	r2, [r3, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800717e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007182:	440b      	add	r3, r1
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	601a      	str	r2, [r3, #0]
        }

        /*Set coordinates to full screen size*/
        obj->coords.x1 = 0;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2200      	movs	r2, #0
 8007190:	829a      	strh	r2, [r3, #20]
        obj->coords.y1 = 0;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2200      	movs	r2, #0
 8007196:	82da      	strh	r2, [r3, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8007198:	2000      	movs	r0, #0
 800719a:	f018 fd9d 	bl	801fcd8 <lv_disp_get_hor_res>
 800719e:	4603      	mov	r3, r0
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	b21a      	sxth	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	831a      	strh	r2, [r3, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 80071ac:	2000      	movs	r0, #0
 80071ae:	f018 fdb9 	bl	801fd24 <lv_disp_get_ver_res>
 80071b2:	4603      	mov	r3, r0
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	b21a      	sxth	r2, r3
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	835a      	strh	r2, [r3, #26]
 80071c0:	e03c      	b.n	800723c <lv_obj_class_create_obj+0x160>
    }
    /*Create a normal object*/
    else {
        LV_TRACE_OBJ_CREATE("creating normal object");
        LV_ASSERT_OBJ(parent, MY_CLASS);
        if(parent->spec_attr == NULL) {
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <lv_obj_class_create_obj+0xf4>
            lv_obj_allocate_spec_attr(parent);
 80071ca:	6838      	ldr	r0, [r7, #0]
 80071cc:	f7fe feb4 	bl	8005f38 <lv_obj_allocate_spec_attr>
        }

        if(parent->spec_attr->children == NULL) {
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d110      	bne.n	80071fc <lv_obj_class_create_obj+0x120>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689c      	ldr	r4, [r3, #8]
 80071de:	2004      	movs	r0, #4
 80071e0:	f01a fd8e 	bl	8021d00 <lv_mem_alloc>
 80071e4:	4603      	mov	r3, r0
 80071e6:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[0] = obj;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	601a      	str	r2, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2201      	movs	r2, #1
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	e01f      	b.n	800723c <lv_obj_class_create_obj+0x160>
        }
        else {
            parent->spec_attr->child_cnt++;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	3201      	adds	r2, #1
 8007204:	605a      	str	r2, [r3, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	681a      	ldr	r2, [r3, #0]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	0099      	lsls	r1, r3, #2
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689c      	ldr	r4, [r3, #8]
 8007218:	4610      	mov	r0, r2
 800721a:	f01a fdcf 	bl	8021dbc <lv_mem_realloc>
 800721e:	4603      	mov	r3, r0
 8007220:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	6859      	ldr	r1, [r3, #4]
 800722e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007232:	440b      	add	r3, r1
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	601a      	str	r2, [r3, #0]
        }
    }

    return obj;
 800723c:	693b      	ldr	r3, [r7, #16]
}
 800723e:	4618      	mov	r0, r3
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}

08007246 <lv_obj_class_init_obj>:

void lv_obj_class_init_obj(lv_obj_t * obj)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
    lv_obj_mark_layout_as_dirty(obj);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 fbd8 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8007254:	2000      	movs	r0, #0
 8007256:	f005 fb3b 	bl	800c8d0 <lv_obj_enable_style_refresh>

    lv_theme_apply(obj);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f008 fe9c 	bl	800ff98 <lv_theme_apply>
    lv_obj_construct(obj);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8ab 	bl	80073bc <lv_obj_construct>

    lv_obj_enable_style_refresh(true);
 8007266:	2001      	movs	r0, #1
 8007268:	f005 fb32 	bl	800c8d0 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800726c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007270:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f005 fa61 	bl	800c73c <lv_obj_refresh_style>

    lv_obj_refresh_self_size(obj);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fd22 	bl	8008cc4 <lv_obj_refresh_self_size>

    lv_group_t * def_group = lv_group_get_default();
 8007280:	f7fd ff2a 	bl	80050d8 <lv_group_get_default>
 8007284:	60f8      	str	r0, [r7, #12]
    if(def_group && lv_obj_is_group_def(obj)) {
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d009      	beq.n	80072a0 <lv_obj_class_init_obj+0x5a>
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f86b 	bl	8007368 <lv_obj_is_group_def>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <lv_obj_class_init_obj+0x5a>
        lv_group_add_obj(def_group, obj);
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7fd ff28 	bl	80050f0 <lv_group_add_obj>
    }

    lv_obj_t * parent = lv_obj_get_parent(obj);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f006 fe31 	bl	800df08 <lv_obj_get_parent>
 80072a6:	60b8      	str	r0, [r7, #8]
    if(parent) {
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00c      	beq.n	80072c8 <lv_obj_class_init_obj+0x82>
        /*Call the ancestor's event handler to the parent to notify it about the new child.
         *Also triggers layout update*/
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	2122      	movs	r1, #34	; 0x22
 80072b2:	68b8      	ldr	r0, [r7, #8]
 80072b4:	f7fd fc1e 	bl	8004af4 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	2123      	movs	r1, #35	; 0x23
 80072bc:	68b8      	ldr	r0, [r7, #8]
 80072be:	f7fd fc19 	bl	8004af4 <lv_event_send>

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(obj);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f002 f9cb 	bl	800965e <lv_obj_invalidate>
    }
}
 80072c8:	bf00      	nop
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <_lv_obj_destruct>:

void _lv_obj_destruct(lv_obj_t * obj)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <_lv_obj_destruct+0x22>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4610      	mov	r0, r2
 80072f0:	4798      	blx	r3

    if(obj->class_p->base_class) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d007      	beq.n	800730c <_lv_obj_destruct+0x3c>
        /*Don't let the descendant methods run during destructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	601a      	str	r2, [r3, #0]

        /*Call the base class's destructor too*/
        _lv_obj_destruct(obj);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff ffe2 	bl	80072d0 <_lv_obj_destruct>
    }
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <lv_obj_is_editable>:

bool lv_obj_is_editable(lv_obj_t * obj)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60fb      	str	r3, [r7, #12]

    /*Find a base in which editable is set*/
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8007322:	e002      	b.n	800732a <lv_obj_is_editable+0x16>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <lv_obj_is_editable+0x2a>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	7e1b      	ldrb	r3, [r3, #24]
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f2      	beq.n	8007324 <lv_obj_is_editable+0x10>

    if(class_p == NULL) return false;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <lv_obj_is_editable+0x34>
 8007344:	2300      	movs	r3, #0
 8007346:	e009      	b.n	800735c <lv_obj_is_editable+0x48>

    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	7e1b      	ldrb	r3, [r3, #24]
 800734c:	f003 0303 	and.w	r3, r3, #3
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b01      	cmp	r3, #1
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2db      	uxtb	r3, r3
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <lv_obj_is_group_def>:

bool lv_obj_is_group_def(lv_obj_t * obj)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60fb      	str	r3, [r7, #12]

    /*Find a base in which group_def is set*/
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 8007376:	e002      	b.n	800737e <lv_obj_is_group_def+0x16>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d006      	beq.n	8007392 <lv_obj_is_group_def+0x2a>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	7e1b      	ldrb	r3, [r3, #24]
 8007388:	f003 030c 	and.w	r3, r3, #12
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0f2      	beq.n	8007378 <lv_obj_is_group_def+0x10>

    if(class_p == NULL) return false;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <lv_obj_is_group_def+0x34>
 8007398:	2300      	movs	r3, #0
 800739a:	e009      	b.n	80073b0 <lv_obj_is_group_def+0x48>

    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7e1b      	ldrb	r3, [r3, #24]
 80073a0:	f003 030c 	and.w	r3, r3, #12
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	bf0c      	ite	eq
 80073aa:	2301      	moveq	r3, #1
 80073ac:	2300      	movne	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * original_class_p = obj->class_p;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]

    if(obj->class_p->base_class) {
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d007      	beq.n	80073e4 <lv_obj_construct+0x28>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff ffec 	bl	80073bc <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	601a      	str	r2, [r3, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <lv_obj_construct+0x48>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6812      	ldr	r2, [r2, #0]
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4610      	mov	r0, r2
 8007402:	4798      	blx	r3
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <get_instance_size>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60fb      	str	r3, [r7, #12]
    while(base && base->instance_size == 0) base = base->base_class;
 8007418:	e002      	b.n	8007420 <get_instance_size+0x14>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <get_instance_size+0x26>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <get_instance_size+0x48>)
 800742c:	4013      	ands	r3, r2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f3      	beq.n	800741a <get_instance_size+0xe>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <get_instance_size+0x30>
 8007438:	2300      	movs	r3, #0
 800743a:	e004      	b.n	8007446 <get_instance_size+0x3a>

    return base->instance_size;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f3c3 130f 	ubfx	r3, r3, #4, #16
 8007444:	b29b      	uxth	r3, r3
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	000ffff0 	.word	0x000ffff0

08007458 <lv_obj_get_style_transform_width>:
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8007462:	2268      	movs	r2, #104	; 0x68
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f005 fa42 	bl	800c8f0 <lv_obj_get_style_prop>
 800746c:	4603      	mov	r3, r0
 800746e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	b21b      	sxth	r3, r3
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <lv_obj_get_style_transform_height>:
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8007486:	2269      	movs	r2, #105	; 0x69
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f005 fa30 	bl	800c8f0 <lv_obj_get_style_prop>
 8007490:	4603      	mov	r3, r0
 8007492:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	b21b      	sxth	r3, r3
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <lv_obj_get_style_bg_color_filtered>:
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 80074aa:	2220      	movs	r2, #32
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f005 fa1e 	bl	800c8f0 <lv_obj_get_style_prop>
 80074b4:	4603      	mov	r3, r0
 80074b6:	461a      	mov	r2, r3
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f005 fc64 	bl	800cd88 <_lv_obj_style_apply_color_filter>
 80074c0:	4603      	mov	r3, r0
 80074c2:	60fb      	str	r3, [r7, #12]
    return v.color;
 80074c4:	7b3b      	ldrb	r3, [r7, #12]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <lv_obj_get_style_bg_opa>:
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80074d8:	2221      	movs	r2, #33	; 0x21
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f005 fa07 	bl	800c8f0 <lv_obj_get_style_prop>
 80074e2:	4603      	mov	r3, r0
 80074e4:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	b2db      	uxtb	r3, r3
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <lv_obj_get_style_bg_grad_color_filtered>:
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 80074fc:	2222      	movs	r2, #34	; 0x22
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f005 f9f5 	bl	800c8f0 <lv_obj_get_style_prop>
 8007506:	4603      	mov	r3, r0
 8007508:	461a      	mov	r2, r3
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f005 fc3b 	bl	800cd88 <_lv_obj_style_apply_color_filter>
 8007512:	4603      	mov	r3, r0
 8007514:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007516:	7b3b      	ldrb	r3, [r7, #12]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <lv_obj_get_style_bg_grad_dir>:
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 800752a:	2223      	movs	r2, #35	; 0x23
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f005 f9de 	bl	800c8f0 <lv_obj_get_style_prop>
 8007534:	4603      	mov	r3, r0
 8007536:	60fb      	str	r3, [r7, #12]
    return (lv_grad_dir_t)v.num;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	b2db      	uxtb	r3, r3
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <lv_obj_get_style_bg_main_stop>:
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 800754e:	2224      	movs	r2, #36	; 0x24
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f005 f9cc 	bl	800c8f0 <lv_obj_get_style_prop>
 8007558:	4603      	mov	r3, r0
 800755a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	b21b      	sxth	r3, r3
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <lv_obj_get_style_bg_grad_stop>:
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 8007572:	2225      	movs	r2, #37	; 0x25
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f005 f9ba 	bl	800c8f0 <lv_obj_get_style_prop>
 800757c:	4603      	mov	r3, r0
 800757e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	b21b      	sxth	r3, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <lv_obj_get_style_bg_grad>:
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 8007596:	2226      	movs	r2, #38	; 0x26
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f005 f9a8 	bl	800c8f0 <lv_obj_get_style_prop>
 80075a0:	4603      	mov	r3, r0
 80075a2:	60fb      	str	r3, [r7, #12]
    return (const lv_grad_dsc_t *)v.ptr;
 80075a4:	68fb      	ldr	r3, [r7, #12]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <lv_obj_get_style_bg_dither_mode>:
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 80075b8:	2227      	movs	r2, #39	; 0x27
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f005 f997 	bl	800c8f0 <lv_obj_get_style_prop>
 80075c2:	4603      	mov	r3, r0
 80075c4:	60fb      	str	r3, [r7, #12]
    return (lv_dither_mode_t)v.num;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	b2db      	uxtb	r3, r3
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <lv_obj_get_style_bg_img_src>:
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 80075dc:	2228      	movs	r2, #40	; 0x28
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f005 f985 	bl	800c8f0 <lv_obj_get_style_prop>
 80075e6:	4603      	mov	r3, r0
 80075e8:	60fb      	str	r3, [r7, #12]
    return (const void *)v.ptr;
 80075ea:	68fb      	ldr	r3, [r7, #12]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <lv_obj_get_style_bg_img_opa>:
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 80075fe:	2229      	movs	r2, #41	; 0x29
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f005 f974 	bl	800c8f0 <lv_obj_get_style_prop>
 8007608:	4603      	mov	r3, r0
 800760a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	b2db      	uxtb	r3, r3
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <lv_obj_get_style_bg_img_recolor_filtered>:
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 8007622:	222a      	movs	r2, #42	; 0x2a
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f005 f962 	bl	800c8f0 <lv_obj_get_style_prop>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f005 fba8 	bl	800cd88 <_lv_obj_style_apply_color_filter>
 8007638:	4603      	mov	r3, r0
 800763a:	60fb      	str	r3, [r7, #12]
    return v.color;
 800763c:	7b3b      	ldrb	r3, [r7, #12]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <lv_obj_get_style_bg_img_recolor_opa>:
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8007650:	222b      	movs	r2, #43	; 0x2b
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f005 f94b 	bl	800c8f0 <lv_obj_get_style_prop>
 800765a:	4603      	mov	r3, r0
 800765c:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	b2db      	uxtb	r3, r3
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <lv_obj_get_style_bg_img_tiled>:
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 8007674:	222c      	movs	r2, #44	; 0x2c
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f005 f939 	bl	800c8f0 <lv_obj_get_style_prop>
 800767e:	4603      	mov	r3, r0
 8007680:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	bf14      	ite	ne
 8007688:	2301      	movne	r3, #1
 800768a:	2300      	moveq	r3, #0
 800768c:	b2db      	uxtb	r3, r3
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <lv_obj_get_style_border_color_filtered>:
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80076a0:	2230      	movs	r2, #48	; 0x30
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f005 f923 	bl	800c8f0 <lv_obj_get_style_prop>
 80076aa:	4603      	mov	r3, r0
 80076ac:	461a      	mov	r2, r3
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f005 fb69 	bl	800cd88 <_lv_obj_style_apply_color_filter>
 80076b6:	4603      	mov	r3, r0
 80076b8:	60fb      	str	r3, [r7, #12]
    return v.color;
 80076ba:	7b3b      	ldrb	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <lv_obj_get_style_border_opa>:
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80076ce:	2231      	movs	r2, #49	; 0x31
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f005 f90c 	bl	800c8f0 <lv_obj_get_style_prop>
 80076d8:	4603      	mov	r3, r0
 80076da:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	b2db      	uxtb	r3, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <lv_obj_get_style_border_width>:
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80076f2:	2232      	movs	r2, #50	; 0x32
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f005 f8fa 	bl	800c8f0 <lv_obj_get_style_prop>
 80076fc:	4603      	mov	r3, r0
 80076fe:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	b21b      	sxth	r3, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <lv_obj_get_style_border_side>:
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8007716:	2233      	movs	r2, #51	; 0x33
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f005 f8e8 	bl	800c8f0 <lv_obj_get_style_prop>
 8007720:	4603      	mov	r3, r0
 8007722:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	b2db      	uxtb	r3, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <lv_obj_get_style_outline_width>:
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800773a:	2235      	movs	r2, #53	; 0x35
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f005 f8d6 	bl	800c8f0 <lv_obj_get_style_prop>
 8007744:	4603      	mov	r3, r0
 8007746:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	b21b      	sxth	r3, r3
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <lv_obj_get_style_outline_color_filtered>:
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 800775e:	2236      	movs	r2, #54	; 0x36
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f005 f8c4 	bl	800c8f0 <lv_obj_get_style_prop>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f005 fb0a 	bl	800cd88 <_lv_obj_style_apply_color_filter>
 8007774:	4603      	mov	r3, r0
 8007776:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007778:	7b3b      	ldrb	r3, [r7, #12]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <lv_obj_get_style_outline_opa>:
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 800778c:	2237      	movs	r2, #55	; 0x37
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f005 f8ad 	bl	800c8f0 <lv_obj_get_style_prop>
 8007796:	4603      	mov	r3, r0
 8007798:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	b2db      	uxtb	r3, r3
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <lv_obj_get_style_outline_pad>:
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80077b0:	2238      	movs	r2, #56	; 0x38
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f005 f89b 	bl	800c8f0 <lv_obj_get_style_prop>
 80077ba:	4603      	mov	r3, r0
 80077bc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	b21b      	sxth	r3, r3
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <lv_obj_get_style_shadow_width>:
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80077d4:	2240      	movs	r2, #64	; 0x40
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f005 f889 	bl	800c8f0 <lv_obj_get_style_prop>
 80077de:	4603      	mov	r3, r0
 80077e0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	b21b      	sxth	r3, r3
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <lv_obj_get_style_shadow_ofs_x>:
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80077f8:	2241      	movs	r2, #65	; 0x41
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f005 f877 	bl	800c8f0 <lv_obj_get_style_prop>
 8007802:	4603      	mov	r3, r0
 8007804:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	b21b      	sxth	r3, r3
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <lv_obj_get_style_shadow_ofs_y>:
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 800781c:	2242      	movs	r2, #66	; 0x42
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f005 f865 	bl	800c8f0 <lv_obj_get_style_prop>
 8007826:	4603      	mov	r3, r0
 8007828:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	b21b      	sxth	r3, r3
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <lv_obj_get_style_shadow_spread>:
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8007840:	2243      	movs	r2, #67	; 0x43
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f005 f853 	bl	800c8f0 <lv_obj_get_style_prop>
 800784a:	4603      	mov	r3, r0
 800784c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	b21b      	sxth	r3, r3
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <lv_obj_get_style_shadow_color_filtered>:
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 8007864:	2244      	movs	r2, #68	; 0x44
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f005 f841 	bl	800c8f0 <lv_obj_get_style_prop>
 800786e:	4603      	mov	r3, r0
 8007870:	461a      	mov	r2, r3
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f005 fa87 	bl	800cd88 <_lv_obj_style_apply_color_filter>
 800787a:	4603      	mov	r3, r0
 800787c:	60fb      	str	r3, [r7, #12]
    return v.color;
 800787e:	7b3b      	ldrb	r3, [r7, #12]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <lv_obj_get_style_shadow_opa>:
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8007892:	2245      	movs	r2, #69	; 0x45
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f005 f82a 	bl	800c8f0 <lv_obj_get_style_prop>
 800789c:	4603      	mov	r3, r0
 800789e:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	b2db      	uxtb	r3, r3
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <lv_obj_get_style_text_color_filtered>:
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 80078b6:	2255      	movs	r2, #85	; 0x55
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f005 f818 	bl	800c8f0 <lv_obj_get_style_prop>
 80078c0:	4603      	mov	r3, r0
 80078c2:	461a      	mov	r2, r3
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f005 fa5e 	bl	800cd88 <_lv_obj_style_apply_color_filter>
 80078cc:	4603      	mov	r3, r0
 80078ce:	60fb      	str	r3, [r7, #12]
    return v.color;
 80078d0:	7b3b      	ldrb	r3, [r7, #12]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <lv_obj_get_style_text_opa>:
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 80078e4:	2256      	movs	r2, #86	; 0x56
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f005 f801 	bl	800c8f0 <lv_obj_get_style_prop>
 80078ee:	4603      	mov	r3, r0
 80078f0:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	b2db      	uxtb	r3, r3
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <lv_obj_get_style_text_font>:
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8007908:	2257      	movs	r2, #87	; 0x57
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f004 ffef 	bl	800c8f0 <lv_obj_get_style_prop>
 8007912:	4603      	mov	r3, r0
 8007914:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 8007916:	68fb      	ldr	r3, [r7, #12]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <lv_obj_get_style_text_letter_space>:
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800792a:	2258      	movs	r2, #88	; 0x58
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f004 ffde 	bl	800c8f0 <lv_obj_get_style_prop>
 8007934:	4603      	mov	r3, r0
 8007936:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	b21b      	sxth	r3, r3
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <lv_obj_get_style_text_line_space>:
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800794e:	2259      	movs	r2, #89	; 0x59
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f004 ffcc 	bl	800c8f0 <lv_obj_get_style_prop>
 8007958:	4603      	mov	r3, r0
 800795a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	b21b      	sxth	r3, r3
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <lv_obj_get_style_text_decor>:
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8007972:	225a      	movs	r2, #90	; 0x5a
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f004 ffba 	bl	800c8f0 <lv_obj_get_style_prop>
 800797c:	4603      	mov	r3, r0
 800797e:	60fb      	str	r3, [r7, #12]
    return (lv_text_decor_t)v.num;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	b2db      	uxtb	r3, r3
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <lv_obj_get_style_text_align>:
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8007996:	225b      	movs	r2, #91	; 0x5b
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f004 ffa8 	bl	800c8f0 <lv_obj_get_style_prop>
 80079a0:	4603      	mov	r3, r0
 80079a2:	60fb      	str	r3, [r7, #12]
    return (lv_text_align_t)v.num;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	b2db      	uxtb	r3, r3
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <lv_obj_get_style_radius>:
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80079ba:	220b      	movs	r2, #11
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f004 ff96 	bl	800c8f0 <lv_obj_get_style_prop>
 80079c4:	4603      	mov	r3, r0
 80079c6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	b21b      	sxth	r3, r3
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <lv_obj_get_style_opa>:
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80079de:	2260      	movs	r2, #96	; 0x60
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f004 ff84 	bl	800c8f0 <lv_obj_get_style_prop>
 80079e8:	4603      	mov	r3, r0
 80079ea:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	b2db      	uxtb	r3, r3
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <lv_obj_get_style_blend_mode>:
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007a02:	2267      	movs	r2, #103	; 0x67
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f004 ff72 	bl	800c8f0 <lv_obj_get_style_prop>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	b2db      	uxtb	r3, r3
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8007a1c:	b590      	push	{r4, r7, lr}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
    lv_opa_t opa = LV_OPA_COVER;
 8007a28:	23ff      	movs	r3, #255	; 0xff
 8007a2a:	75fb      	strb	r3, [r7, #23]
    if(part != LV_PART_MAIN) {
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01a      	beq.n	8007a68 <lv_obj_init_draw_rect_dsc+0x4c>
        opa = lv_obj_get_style_opa(obj, part);
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7ff ffcd 	bl	80079d4 <lv_obj_get_style_opa>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d811      	bhi.n	8007a68 <lv_obj_init_draw_rect_dsc+0x4c>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            return;
 8007a66:	e19f      	b.n	8007da8 <lv_obj_init_draw_rect_dsc+0x38c>
        }
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <lv_obj_init_draw_rect_dsc+0x62>
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff ffc1 	bl	80079f8 <lv_obj_get_style_blend_mode>
 8007a76:	4603      	mov	r3, r0
 8007a78:	461a      	mov	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	709a      	strb	r2, [r3, #2]

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7ff ff95 	bl	80079b0 <lv_obj_get_style_radius>
 8007a86:	4603      	mov	r3, r0
 8007a88:	461a      	mov	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	801a      	strh	r2, [r3, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	78db      	ldrb	r3, [r3, #3]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d065      	beq.n	8007b62 <lv_obj_init_draw_rect_dsc+0x146>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f7ff fd18 	bl	80074ce <lv_obj_get_style_bg_opa>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	70da      	strb	r2, [r3, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	78db      	ldrb	r3, [r3, #3]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d959      	bls.n	8007b62 <lv_obj_init_draw_rect_dsc+0x146>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8007aae:	687c      	ldr	r4, [r7, #4]
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7ff fcf4 	bl	80074a0 <lv_obj_get_style_bg_color_filtered>
 8007ab8:	7120      	strb	r0, [r4, #4]
            const lv_grad_dsc_t * grad = lv_obj_get_style_bg_grad(obj, part);
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff fd65 	bl	800758c <lv_obj_get_style_bg_grad>
 8007ac2:	6138      	str	r0, [r7, #16]
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00e      	beq.n	8007ae8 <lv_obj_init_draw_rect_dsc+0xcc>
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	795b      	ldrb	r3, [r3, #5]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <lv_obj_init_draw_rect_dsc+0xcc>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3305      	adds	r3, #5
 8007adc:	2206      	movs	r2, #6
 8007ade:	6939      	ldr	r1, [r7, #16]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f01a fa9b 	bl	802201c <lv_memcpy>
 8007ae6:	e03c      	b.n	8007b62 <lv_obj_init_draw_rect_dsc+0x146>
            }
            else {
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff fd18 	bl	8007520 <lv_obj_get_style_bg_grad_dir>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	b2d9      	uxtb	r1, r3
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	7a93      	ldrb	r3, [r2, #10]
 8007afc:	f361 0302 	bfi	r3, r1, #0, #3
 8007b00:	7293      	strb	r3, [r2, #10]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7a9b      	ldrb	r3, [r3, #10]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01b      	beq.n	8007b48 <lv_obj_init_draw_rect_dsc+0x12c>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 8007b10:	687c      	ldr	r4, [r7, #4]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff fcc3 	bl	80074a0 <lv_obj_get_style_bg_color_filtered>
 8007b1a:	7160      	strb	r0, [r4, #5]
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8007b1c:	687c      	ldr	r4, [r7, #4]
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff fce6 	bl	80074f2 <lv_obj_get_style_bg_grad_color_filtered>
 8007b26:	71e0      	strb	r0, [r4, #7]
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff fd0a 	bl	8007544 <lv_obj_get_style_bg_main_stop>
 8007b30:	4603      	mov	r3, r0
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	719a      	strb	r2, [r3, #6]
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff fd14 	bl	8007568 <lv_obj_get_style_bg_grad_stop>
 8007b40:	4603      	mov	r3, r0
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	721a      	strb	r2, [r3, #8]
                }
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7ff fd2f 	bl	80075ae <lv_obj_get_style_bg_dither_mode>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	b2d9      	uxtb	r1, r3
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	7a93      	ldrb	r3, [r2, #10]
 8007b5c:	f361 03c5 	bfi	r3, r1, #3, #3
 8007b60:	7293      	strb	r3, [r2, #10]
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8007b62:	68b9      	ldr	r1, [r7, #8]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff fdbf 	bl	80076e8 <lv_obj_get_style_border_width>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	835a      	strh	r2, [r3, #26]
    if(draw_dsc->border_width) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d022      	beq.n	8007bc2 <lv_obj_init_draw_rect_dsc+0x1a6>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	7f1b      	ldrb	r3, [r3, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01e      	beq.n	8007bc2 <lv_obj_init_draw_rect_dsc+0x1a6>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff fd9c 	bl	80076c4 <lv_obj_get_style_border_opa>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7f1b      	ldrb	r3, [r3, #28]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d912      	bls.n	8007bc2 <lv_obj_init_draw_rect_dsc+0x1a6>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fdb4 	bl	800770c <lv_obj_get_style_border_side>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	f003 031f 	and.w	r3, r3, #31
 8007baa:	b2d9      	uxtb	r1, r3
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7f53      	ldrb	r3, [r2, #29]
 8007bb0:	f361 0345 	bfi	r3, r1, #1, #5
 8007bb4:	7753      	strb	r3, [r2, #29]
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8007bb6:	687c      	ldr	r4, [r7, #4]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fd6b 	bl	8007696 <lv_obj_get_style_border_color_filtered>
 8007bc0:	7620      	strb	r0, [r4, #24]
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f7ff fdb3 	bl	8007730 <lv_obj_get_style_outline_width>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	841a      	strh	r2, [r3, #32]
    if(draw_dsc->outline_width) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d020      	beq.n	8007c1e <lv_obj_init_draw_rect_dsc+0x202>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01b      	beq.n	8007c1e <lv_obj_init_draw_rect_dsc+0x202>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f7ff fdca 	bl	8007782 <lv_obj_get_style_outline_opa>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d90d      	bls.n	8007c1e <lv_obj_init_draw_rect_dsc+0x202>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f7ff fdce 	bl	80077a6 <lv_obj_get_style_outline_pad>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	845a      	strh	r2, [r3, #34]	; 0x22
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8007c12:	687c      	ldr	r4, [r7, #4]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fd9c 	bl	8007754 <lv_obj_get_style_outline_color_filtered>
 8007c1c:	77a0      	strb	r0, [r4, #30]
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7d5b      	ldrb	r3, [r3, #21]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d042      	beq.n	8007cac <lv_obj_init_draw_rect_dsc+0x290>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff fcd2 	bl	80075d2 <lv_obj_get_style_bg_img_src>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60da      	str	r2, [r3, #12]
        if(draw_dsc->bg_img_src) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d037      	beq.n	8007cac <lv_obj_init_draw_rect_dsc+0x290>
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff fcd8 	bl	80075f4 <lv_obj_get_style_bg_img_opa>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	755a      	strb	r2, [r3, #21]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7d5b      	ldrb	r3, [r3, #21]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d92b      	bls.n	8007cac <lv_obj_init_draw_rect_dsc+0x290>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f008 fb48 	bl	80102ee <lv_img_src_get_type>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d10d      	bne.n	8007c80 <lv_obj_init_draw_rect_dsc+0x264>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fe49 	bl	80078fe <lv_obj_get_style_text_font>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	611a      	str	r2, [r3, #16]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8007c72:	687c      	ldr	r4, [r7, #4]
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fe18 	bl	80078ac <lv_obj_get_style_text_color_filtered>
 8007c7c:	7520      	strb	r0, [r4, #20]
 8007c7e:	e015      	b.n	8007cac <lv_obj_init_draw_rect_dsc+0x290>
                }
                else {
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8007c80:	687c      	ldr	r4, [r7, #4]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f7ff fcc7 	bl	8007618 <lv_obj_get_style_bg_img_recolor_filtered>
 8007c8a:	7520      	strb	r0, [r4, #20]
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff fcd9 	bl	8007646 <lv_obj_get_style_bg_img_recolor_opa>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	759a      	strb	r2, [r3, #22]
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff fce3 	bl	800766a <lv_obj_get_style_bg_img_tiled>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	75da      	strb	r2, [r3, #23]
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d03e      	beq.n	8007d34 <lv_obj_init_draw_rect_dsc+0x318>
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7ff fd86 	bl	80077ca <lv_obj_get_style_shadow_width>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	84da      	strh	r2, [r3, #38]	; 0x26
        if(draw_dsc->shadow_width) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d031      	beq.n	8007d34 <lv_obj_init_draw_rect_dsc+0x318>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d92c      	bls.n	8007d34 <lv_obj_init_draw_rect_dsc+0x318>
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff fdd3 	bl	8007888 <lv_obj_get_style_shadow_opa>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d91e      	bls.n	8007d34 <lv_obj_init_draw_rect_dsc+0x318>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff fd78 	bl	80077ee <lv_obj_get_style_shadow_ofs_x>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	461a      	mov	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	851a      	strh	r2, [r3, #40]	; 0x28
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff fd82 	bl	8007812 <lv_obj_get_style_shadow_ofs_y>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	855a      	strh	r2, [r3, #42]	; 0x2a
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fd8c 	bl	8007836 <lv_obj_get_style_shadow_spread>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	461a      	mov	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	859a      	strh	r2, [r3, #44]	; 0x2c
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8007d26:	687c      	ldr	r4, [r7, #4]
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff fd95 	bl	800785a <lv_obj_get_style_shadow_color_filtered>
 8007d30:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d036      	beq.n	8007da8 <lv_obj_init_draw_rect_dsc+0x38c>
        if(opa < LV_OPA_MAX) {
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	2bfc      	cmp	r3, #252	; 0xfc
 8007d3e:	d833      	bhi.n	8007da8 <lv_obj_init_draw_rect_dsc+0x38c>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007d48:	fb02 f303 	mul.w	r3, r2, r3
 8007d4c:	121b      	asrs	r3, r3, #8
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007d5c:	fb02 f303 	mul.w	r3, r2, r3
 8007d60:	121b      	asrs	r3, r3, #8
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007d70:	fb02 f303 	mul.w	r3, r2, r3
 8007d74:	121b      	asrs	r3, r3, #8
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007d84:	fb02 f303 	mul.w	r3, r2, r3
 8007d88:	121b      	asrs	r3, r3, #8
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007d9a:	fb02 f303 	mul.w	r3, r2, r3
 8007d9e:	121b      	asrs	r3, r3, #8
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }
}
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd90      	pop	{r4, r7, pc}

08007dae <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8007dae:	b590      	push	{r4, r7, lr}
 8007db0:	b087      	sub	sp, #28
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff fd8c 	bl	80078da <lv_obj_get_style_text_opa>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	761a      	strb	r2, [r3, #24]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7e1b      	ldrb	r3, [r3, #24]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d95e      	bls.n	8007e90 <lv_obj_init_draw_label_dsc+0xe2>

    if(part != LV_PART_MAIN) {
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d018      	beq.n	8007e0a <lv_obj_init_draw_label_dsc+0x5c>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff fdfa 	bl	80079d4 <lv_obj_get_style_opa>
 8007de0:	4603      	mov	r3, r0
 8007de2:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d803      	bhi.n	8007df2 <lv_obj_init_draw_label_dsc+0x44>
            draw_dsc->opa = LV_OPA_TRANSP;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	761a      	strb	r2, [r3, #24]
            return;
 8007df0:	e04f      	b.n	8007e92 <lv_obj_init_draw_label_dsc+0xe4>
        }
        if(opa < LV_OPA_MAX) {
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2bfc      	cmp	r3, #252	; 0xfc
 8007df6:	d808      	bhi.n	8007e0a <lv_obj_init_draw_label_dsc+0x5c>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	7e12      	ldrb	r2, [r2, #24]
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	121b      	asrs	r3, r3, #8
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	761a      	strb	r2, [r3, #24]
        }
    }

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8007e0a:	687c      	ldr	r4, [r7, #4]
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fd4c 	bl	80078ac <lv_obj_get_style_text_color_filtered>
 8007e14:	7320      	strb	r0, [r4, #12]
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff fd81 	bl	8007920 <lv_obj_get_style_text_letter_space>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	461a      	mov	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	825a      	strh	r2, [r3, #18]
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff fd8b 	bl	8007944 <lv_obj_get_style_text_line_space>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	461a      	mov	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	821a      	strh	r2, [r3, #16]
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8007e36:	68b9      	ldr	r1, [r7, #8]
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7ff fd95 	bl	8007968 <lv_obj_get_style_text_decor>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	b2d9      	uxtb	r1, r3
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	7f13      	ldrb	r3, [r2, #28]
 8007e4a:	f361 0302 	bfi	r3, r1, #0, #3
 8007e4e:	7713      	strb	r3, [r2, #28]
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00c      	beq.n	8007e70 <lv_obj_init_draw_label_dsc+0xc2>
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7ff fdcd 	bl	80079f8 <lv_obj_get_style_blend_mode>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f003 0307 	and.w	r3, r3, #7
 8007e64:	b2d9      	uxtb	r1, r3
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	7f13      	ldrb	r3, [r2, #28]
 8007e6a:	f361 03c5 	bfi	r3, r1, #3, #3
 8007e6e:	7713      	strb	r3, [r2, #28]
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff fd43 	bl	80078fe <lv_obj_get_style_text_font>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7ff fd83 	bl	800798c <lv_obj_get_style_text_align>
 8007e86:	4603      	mov	r3, r0
 8007e88:	461a      	mov	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	769a      	strb	r2, [r3, #26]
 8007e8e:	e000      	b.n	8007e92 <lv_obj_init_draw_label_dsc+0xe4>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007e90:	bf00      	nop
}
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd90      	pop	{r4, r7, pc}

08007e98 <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
    lv_coord_t s = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	83fb      	strh	r3, [r7, #30]

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff fc8e 	bl	80077ca <lv_obj_get_style_shadow_width>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	83bb      	strh	r3, [r7, #28]
    if(sh_width) {
 8007eb2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d045      	beq.n	8007f46 <lv_obj_calculate_ext_draw_size+0xae>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fce3 	bl	8007888 <lv_obj_get_style_shadow_opa>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	76fb      	strb	r3, [r7, #27]
        if(sh_opa > LV_OPA_MIN) {
 8007ec6:	7efb      	ldrb	r3, [r7, #27]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d93c      	bls.n	8007f46 <lv_obj_calculate_ext_draw_size+0xae>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8007ecc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	da00      	bge.n	8007ed6 <lv_obj_calculate_ext_draw_size+0x3e>
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	105b      	asrs	r3, r3, #1
 8007ed8:	b21b      	sxth	r3, r3
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3301      	adds	r3, #1
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	83bb      	strh	r3, [r7, #28]
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff fca6 	bl	8007836 <lv_obj_get_style_shadow_spread>
 8007eea:	4603      	mov	r3, r0
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	8bbb      	ldrh	r3, [r7, #28]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	83bb      	strh	r3, [r7, #28]
            lv_coord_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fc78 	bl	80077ee <lv_obj_get_style_shadow_ofs_x>
 8007efe:	4603      	mov	r3, r0
 8007f00:	833b      	strh	r3, [r7, #24]
            lv_coord_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fc84 	bl	8007812 <lv_obj_get_style_shadow_ofs_y>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	82fb      	strh	r3, [r7, #22]
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8007f0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bfb8      	it	lt
 8007f16:	425b      	neglt	r3, r3
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bfb8      	it	lt
 8007f22:	425b      	neglt	r3, r3
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	4293      	cmp	r3, r2
 8007f28:	bf38      	it	cc
 8007f2a:	4613      	movcc	r3, r2
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	8bbb      	ldrh	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	83bb      	strh	r3, [r7, #28]
            s = LV_MAX(s, sh_width);
 8007f36:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007f3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	bfb8      	it	lt
 8007f42:	4613      	movlt	r3, r2
 8007f44:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff fbf1 	bl	8007730 <lv_obj_get_style_outline_width>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	82bb      	strh	r3, [r7, #20]
    if(outline_width) {
 8007f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d019      	beq.n	8007f8e <lv_obj_calculate_ext_draw_size+0xf6>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff fc10 	bl	8007782 <lv_obj_get_style_outline_opa>
 8007f62:	4603      	mov	r3, r0
 8007f64:	74fb      	strb	r3, [r7, #19]
        if(outline_opa > LV_OPA_MIN) {
 8007f66:	7cfb      	ldrb	r3, [r7, #19]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d910      	bls.n	8007f8e <lv_obj_calculate_ext_draw_size+0xf6>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff fc19 	bl	80077a6 <lv_obj_get_style_outline_pad>
 8007f74:	4603      	mov	r3, r0
 8007f76:	823b      	strh	r3, [r7, #16]
            s = LV_MAX(s, outline_pad + outline_width);
 8007f78:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007f7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f80:	441a      	add	r2, r3
 8007f82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	bfb8      	it	lt
 8007f8a:	4613      	movlt	r3, r2
 8007f8c:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fa61 	bl	8007458 <lv_obj_get_style_transform_width>
 8007f96:	4603      	mov	r3, r0
 8007f98:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fa6d 	bl	800747c <lv_obj_get_style_transform_height>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	81bb      	strh	r3, [r7, #12]
    lv_coord_t wh = LV_MAX(w, h);
 8007fa6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	bfb8      	it	lt
 8007fb2:	4613      	movlt	r3, r2
 8007fb4:	817b      	strh	r3, [r7, #10]
    if(wh > 0) s += wh;
 8007fb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dd04      	ble.n	8007fc8 <lv_obj_calculate_ext_draw_size+0x130>
 8007fbe:	8bfa      	ldrh	r2, [r7, #30]
 8007fc0:	897b      	ldrh	r3, [r7, #10]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	83fb      	strh	r3, [r7, #30]

    return s;
 8007fc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8007fde:	2148      	movs	r1, #72	; 0x48
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f01a fac1 	bl	8022568 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	601a      	str	r2, [r3, #0]
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <lv_obj_refresh_ext_draw_size>:
    if(dsc->class_p == class_p && dsc->type == type) return true;
    else return false;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f837 	bl	8008070 <_lv_obj_get_ext_draw_size>
 8008002:	4603      	mov	r3, r0
 8008004:	81fb      	strh	r3, [r7, #14]
    lv_coord_t s_new = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	81bb      	strh	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 800800a:	f107 030c 	add.w	r3, r7, #12
 800800e:	461a      	mov	r2, r3
 8008010:	2113      	movs	r1, #19
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fc fd6e 	bl	8004af4 <lv_event_send>

    if(s_new != s_old) lv_obj_invalidate(obj);
 8008018:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800801c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008020:	429a      	cmp	r2, r3
 8008022:	d002      	beq.n	800802a <lv_obj_refresh_ext_draw_size+0x36>
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 fb1a 	bl	800965e <lv_obj_invalidate>

    /*Store the result if the special attrs already allocated*/
    if(obj->spec_attr) {
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <lv_obj_refresh_ext_draw_size+0x4a>
        obj->spec_attr->ext_draw_size = s_new;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800803a:	82da      	strh	r2, [r3, #22]
 800803c:	e00b      	b.n	8008056 <lv_obj_refresh_ext_draw_size+0x62>
    }
    /*Allocate spec. attrs. only if the result is not zero.
     *Zero is the default value if the spec. attr. are not defined.*/
    else if(s_new != 0) {
 800803e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <lv_obj_refresh_ext_draw_size+0x62>
        lv_obj_allocate_spec_attr(obj);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fd ff76 	bl	8005f38 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008054:	82da      	strh	r2, [r3, #22]
    }

    if(s_new != s_old) lv_obj_invalidate(obj);
 8008056:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800805a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800805e:	429a      	cmp	r2, r3
 8008060:	d002      	beq.n	8008068 <lv_obj_refresh_ext_draw_size+0x74>
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fafb 	bl	800965e <lv_obj_invalidate>
}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <_lv_obj_get_ext_draw_size>:

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <_lv_obj_get_ext_draw_size+0x1a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008088:	e000      	b.n	800808c <_lv_obj_get_ext_draw_size+0x1c>
    else return 0;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d006      	beq.n	80080b6 <_lv_obj_get_layer_type+0x1e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	7e9b      	ldrb	r3, [r3, #26]
 80080ae:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	e000      	b.n	80080b8 <_lv_obj_get_layer_type+0x20>
    else return LV_LAYER_TYPE_NONE;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <lv_area_copy>:
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	80da      	strh	r2, [r3, #6]
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008110:	b29a      	uxth	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008118:	b29b      	uxth	r3, r3
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	b29b      	uxth	r3, r3
 800811e:	3301      	adds	r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	b21b      	sxth	r3, r3
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008146:	b29b      	uxth	r3, r3
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	b29b      	uxth	r3, r3
 800814c:	3301      	adds	r3, #1
 800814e:	b29b      	uxth	r3, r3
 8008150:	b21b      	sxth	r3, r3
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <lv_obj_get_style_width>:
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008168:	2201      	movs	r2, #1
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f004 fbbf 	bl	800c8f0 <lv_obj_get_style_prop>
 8008172:	4603      	mov	r3, r0
 8008174:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	b21b      	sxth	r3, r3
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <lv_obj_get_style_min_width>:
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800818c:	2202      	movs	r2, #2
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f004 fbad 	bl	800c8f0 <lv_obj_get_style_prop>
 8008196:	4603      	mov	r3, r0
 8008198:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	b21b      	sxth	r3, r3
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <lv_obj_get_style_max_width>:
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 80081b0:	2203      	movs	r2, #3
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f004 fb9b 	bl	800c8f0 <lv_obj_get_style_prop>
 80081ba:	4603      	mov	r3, r0
 80081bc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	b21b      	sxth	r3, r3
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <lv_obj_get_style_height>:
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80081d4:	2204      	movs	r2, #4
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f004 fb89 	bl	800c8f0 <lv_obj_get_style_prop>
 80081de:	4603      	mov	r3, r0
 80081e0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	b21b      	sxth	r3, r3
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <lv_obj_get_style_min_height>:
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80081f8:	2205      	movs	r2, #5
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f004 fb77 	bl	800c8f0 <lv_obj_get_style_prop>
 8008202:	4603      	mov	r3, r0
 8008204:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	b21b      	sxth	r3, r3
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <lv_obj_get_style_max_height>:
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800821c:	2206      	movs	r2, #6
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f004 fb65 	bl	800c8f0 <lv_obj_get_style_prop>
 8008226:	4603      	mov	r3, r0
 8008228:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	b21b      	sxth	r3, r3
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <lv_obj_get_style_x>:
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8008240:	2207      	movs	r2, #7
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f004 fb53 	bl	800c8f0 <lv_obj_get_style_prop>
 800824a:	4603      	mov	r3, r0
 800824c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	b21b      	sxth	r3, r3
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <lv_obj_get_style_y>:
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8008264:	2208      	movs	r2, #8
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f004 fb41 	bl	800c8f0 <lv_obj_get_style_prop>
 800826e:	4603      	mov	r3, r0
 8008270:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	b21b      	sxth	r3, r3
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <lv_obj_get_style_align>:
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8008288:	2209      	movs	r2, #9
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f004 fb2f 	bl	800c8f0 <lv_obj_get_style_prop>
 8008292:	4603      	mov	r3, r0
 8008294:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	b2db      	uxtb	r3, r3
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <lv_obj_get_style_translate_x>:
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80082ac:	226a      	movs	r2, #106	; 0x6a
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f004 fb1d 	bl	800c8f0 <lv_obj_get_style_prop>
 80082b6:	4603      	mov	r3, r0
 80082b8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	b21b      	sxth	r3, r3
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <lv_obj_get_style_translate_y>:
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80082d0:	226b      	movs	r2, #107	; 0x6b
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f004 fb0b 	bl	800c8f0 <lv_obj_get_style_prop>
 80082da:	4603      	mov	r3, r0
 80082dc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	b21b      	sxth	r3, r3
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <lv_obj_get_style_transform_zoom>:
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80082f4:	226c      	movs	r2, #108	; 0x6c
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f004 faf9 	bl	800c8f0 <lv_obj_get_style_prop>
 80082fe:	4603      	mov	r3, r0
 8008300:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	b21b      	sxth	r3, r3
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <lv_obj_get_style_transform_angle>:
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8008318:	226d      	movs	r2, #109	; 0x6d
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f004 fae7 	bl	800c8f0 <lv_obj_get_style_prop>
 8008322:	4603      	mov	r3, r0
 8008324:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	b21b      	sxth	r3, r3
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <lv_obj_get_style_transform_pivot_x>:
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800833c:	226e      	movs	r2, #110	; 0x6e
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f004 fad5 	bl	800c8f0 <lv_obj_get_style_prop>
 8008346:	4603      	mov	r3, r0
 8008348:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	b21b      	sxth	r3, r3
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <lv_obj_get_style_transform_pivot_y>:
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8008360:	226f      	movs	r2, #111	; 0x6f
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f004 fac3 	bl	800c8f0 <lv_obj_get_style_prop>
 800836a:	4603      	mov	r3, r0
 800836c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	b21b      	sxth	r3, r3
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <lv_obj_get_style_pad_top>:
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008384:	2210      	movs	r2, #16
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f004 fab1 	bl	800c8f0 <lv_obj_get_style_prop>
 800838e:	4603      	mov	r3, r0
 8008390:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	b21b      	sxth	r3, r3
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <lv_obj_get_style_pad_bottom>:
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80083a8:	2211      	movs	r2, #17
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f004 fa9f 	bl	800c8f0 <lv_obj_get_style_prop>
 80083b2:	4603      	mov	r3, r0
 80083b4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	b21b      	sxth	r3, r3
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <lv_obj_get_style_pad_left>:
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80083cc:	2212      	movs	r2, #18
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f004 fa8d 	bl	800c8f0 <lv_obj_get_style_prop>
 80083d6:	4603      	mov	r3, r0
 80083d8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	b21b      	sxth	r3, r3
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <lv_obj_get_style_pad_right>:
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80083f0:	2213      	movs	r2, #19
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f004 fa7b 	bl	800c8f0 <lv_obj_get_style_prop>
 80083fa:	4603      	mov	r3, r0
 80083fc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	b21b      	sxth	r3, r3
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <lv_obj_get_style_border_width>:
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008414:	2232      	movs	r2, #50	; 0x32
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f004 fa69 	bl	800c8f0 <lv_obj_get_style_prop>
 800841e:	4603      	mov	r3, r0
 8008420:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	b21b      	sxth	r3, r3
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <lv_obj_get_style_layout>:
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8008438:	220a      	movs	r2, #10
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f004 fa57 	bl	800c8f0 <lv_obj_get_style_prop>
 8008442:	4603      	mov	r3, r0
 8008444:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	b29b      	uxth	r3, r3
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <lv_obj_get_style_base_dir>:

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800845c:	2216      	movs	r2, #22
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f004 fa45 	bl	800c8f0 <lv_obj_get_style_prop>
 8008466:	4603      	mov	r3, r0
 8008468:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	b2db      	uxtb	r3, r3
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <lv_obj_set_pos>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	807b      	strh	r3, [r7, #2]
 8008482:	4613      	mov	r3, r2
 8008484:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_set_x(obj, x);
 8008486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f80a 	bl	80084a6 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 8008492:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f829 	bl	80084f0 <lv_obj_set_y>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <lv_obj_set_x>:

void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_x;
    lv_style_value_t v_x;

    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 80084b2:	f107 0208 	add.w	r2, r7, #8
 80084b6:	2300      	movs	r3, #0
 80084b8:	2107      	movs	r1, #7
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f004 faaf 	bl	800ca1e <lv_obj_get_local_style_prop>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]

    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d104      	bne.n	80084d4 <lv_obj_set_x+0x2e>
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d102      	bne.n	80084da <lv_obj_set_x+0x34>
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <lv_obj_set_x+0x42>
        lv_obj_set_style_x(obj, x, 0);
 80084da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80084de:	2200      	movs	r2, #0
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f005 fc3c 	bl	800dd60 <lv_obj_set_style_x>
    }
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <lv_obj_set_y>:

void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_y;
    lv_style_value_t v_y;

    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 80084fc:	f107 0208 	add.w	r2, r7, #8
 8008500:	2300      	movs	r3, #0
 8008502:	2108      	movs	r1, #8
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f004 fa8a 	bl	800ca1e <lv_obj_get_local_style_prop>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]

    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d104      	bne.n	800851e <lv_obj_set_y+0x2e>
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800851a:	429a      	cmp	r2, r3
 800851c:	d102      	bne.n	8008524 <lv_obj_set_y+0x34>
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d106      	bne.n	8008532 <lv_obj_set_y+0x42>
        lv_obj_set_style_y(obj, y, 0);
 8008524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008528:	2200      	movs	r2, #0
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f005 fc2b 	bl	800dd88 <lv_obj_set_style_y>
    }
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <lv_obj_refr_size>:

bool lv_obj_refr_size(lv_obj_t * obj)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b090      	sub	sp, #64	; 0x40
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*If the width or height is set by a layout do not modify them*/
    if(obj->w_layout && obj->h_layout) return false;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800854a:	f003 0304 	and.w	r3, r3, #4
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d009      	beq.n	8008568 <lv_obj_refr_size+0x2c>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <lv_obj_refr_size+0x2c>
 8008564:	2300      	movs	r3, #0
 8008566:	e221      	b.n	80089ac <lv_obj_refr_size+0x470>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f005 fccd 	bl	800df08 <lv_obj_get_parent>
 800856e:	6378      	str	r0, [r7, #52]	; 0x34
    if(parent == NULL) return false;
 8008570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <lv_obj_refr_size+0x3e>
 8008576:	2300      	movs	r3, #0
 8008578:	e218      	b.n	80089ac <lv_obj_refr_size+0x470>

    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f002 f83e 	bl	800a5fc <lv_obj_get_scroll_left>
 8008580:	4603      	mov	r3, r0
 8008582:	867b      	strh	r3, [r7, #50]	; 0x32
    bool w_is_content = false;
 8008584:	2300      	movs	r3, #0
 8008586:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool w_is_pct = false;
 800858a:	2300      	movs	r3, #0
 800858c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    lv_coord_t w;
    if(obj->w_layout) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <lv_obj_refr_size+0x70>
        w = lv_obj_get_width(obj);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa92 	bl	8008aca <lv_obj_get_width>
 80085a6:	4603      	mov	r3, r0
 80085a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80085aa:	e0a0      	b.n	80086ee <lv_obj_refr_size+0x1b2>
    }
    else {
        w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff fdd5 	bl	800815e <lv_obj_get_style_width>
 80085b4:	4603      	mov	r3, r0
 80085b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 80085b8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80085bc:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80085c0:	4293      	cmp	r3, r2
 80085c2:	bf0c      	ite	eq
 80085c4:	2301      	moveq	r3, #1
 80085c6:	2300      	movne	r3, #0
 80085c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 80085cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80085ce:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80085d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d6:	d108      	bne.n	80085ea <lv_obj_refr_size+0xae>
 80085d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80085da:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80085de:	b21b      	sxth	r3, r3
 80085e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80085e4:	dc01      	bgt.n	80085ea <lv_obj_refr_size+0xae>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e000      	b.n	80085ec <lv_obj_refr_size+0xb0>
 80085ea:	2300      	movs	r3, #0
 80085ec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80085f0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 80085fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085fe:	f000 fa80 	bl	8008b02 <lv_obj_get_content_width>
 8008602:	4603      	mov	r3, r0
 8008604:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(w_is_content) {
 8008606:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <lv_obj_refr_size+0xde>
            w = calc_content_width(obj);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 fa16 	bl	8009a40 <calc_content_width>
 8008614:	4603      	mov	r3, r0
 8008616:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008618:	e051      	b.n	80086be <lv_obj_refr_size+0x182>
        }
        else if(w_is_pct) {
 800861a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800861e:	2b00      	cmp	r3, #0
 8008620:	d04d      	beq.n	80086be <lv_obj_refr_size+0x182>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d128      	bne.n	8008684 <lv_obj_refr_size+0x148>
 8008632:	2100      	movs	r1, #0
 8008634:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008636:	f7ff fd92 	bl	800815e <lv_obj_get_style_width>
 800863a:	4603      	mov	r3, r0
 800863c:	461a      	mov	r2, r3
 800863e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008642:	429a      	cmp	r2, r3
 8008644:	d11e      	bne.n	8008684 <lv_obj_refr_size+0x148>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 8008646:	2100      	movs	r1, #0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff fede 	bl	800840a <lv_obj_get_style_border_width>
 800864e:	4603      	mov	r3, r0
 8008650:	85bb      	strh	r3, [r7, #44]	; 0x2c
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8008652:	2100      	movs	r1, #0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff feb4 	bl	80083c2 <lv_obj_get_style_pad_left>
 800865a:	4603      	mov	r3, r0
 800865c:	b29a      	uxth	r2, r3
 800865e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008660:	4413      	add	r3, r2
 8008662:	b29b      	uxth	r3, r3
 8008664:	87bb      	strh	r3, [r7, #60]	; 0x3c
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8008666:	2100      	movs	r1, #0
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff febc 	bl	80083e6 <lv_obj_get_style_pad_right>
 800866e:	4603      	mov	r3, r0
 8008670:	461a      	mov	r2, r3
 8008672:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008676:	4413      	add	r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800867c:	4413      	add	r3, r2
 800867e:	b29b      	uxth	r3, r3
 8008680:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8008682:	e01c      	b.n	80086be <lv_obj_refr_size+0x182>
            }
            else {
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8008684:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008686:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800868a:	b21b      	sxth	r3, r3
 800868c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008690:	dd06      	ble.n	80086a0 <lv_obj_refr_size+0x164>
 8008692:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008694:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008698:	b21b      	sxth	r3, r3
 800869a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800869e:	e003      	b.n	80086a8 <lv_obj_refr_size+0x16c>
 80086a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80086a2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80086a6:	b21b      	sxth	r3, r3
 80086a8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80086ac:	fb02 f303 	mul.w	r3, r2, r3
 80086b0:	4a9f      	ldr	r2, [pc, #636]	; (8008930 <lv_obj_refr_size+0x3f4>)
 80086b2:	fb82 1203 	smull	r1, r2, r2, r3
 80086b6:	1152      	asrs	r2, r2, #5
 80086b8:	17db      	asrs	r3, r3, #31
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }

        lv_coord_t minw = lv_obj_get_style_min_width(obj, LV_PART_MAIN);
 80086be:	2100      	movs	r1, #0
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff fd5e 	bl	8008182 <lv_obj_get_style_min_width>
 80086c6:	4603      	mov	r3, r0
 80086c8:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_coord_t maxw = lv_obj_get_style_max_width(obj, LV_PART_MAIN);
 80086ca:	2100      	movs	r1, #0
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff fd6a 	bl	80081a6 <lv_obj_get_style_max_width>
 80086d2:	4603      	mov	r3, r0
 80086d4:	853b      	strh	r3, [r7, #40]	; 0x28
        w = lv_clamp_width(w, minw, maxw, parent_w);
 80086d6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80086da:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80086de:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80086e2:	f9b7 003c 	ldrsh.w	r0, [r7, #60]	; 0x3c
 80086e6:	f001 f8bb 	bl	8009860 <lv_clamp_width>
 80086ea:	4603      	mov	r3, r0
 80086ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }

    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 fee6 	bl	800a4c0 <lv_obj_get_scroll_top>
 80086f4:	4603      	mov	r3, r0
 80086f6:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h;
    bool h_is_content = false;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    bool h_is_pct = false;
 80086fe:	2300      	movs	r3, #0
 8008700:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(obj->h_layout) {
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <lv_obj_refr_size+0x1e4>
        h = lv_obj_get_height(obj);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f9e6 	bl	8008ae6 <lv_obj_get_height>
 800871a:	4603      	mov	r3, r0
 800871c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800871e:	e0a0      	b.n	8008862 <lv_obj_refr_size+0x326>
    }
    else {
        h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8008720:	2100      	movs	r1, #0
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff fd51 	bl	80081ca <lv_obj_get_style_height>
 8008728:	4603      	mov	r3, r0
 800872a:	877b      	strh	r3, [r7, #58]	; 0x3a
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 800872c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8008730:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008734:	4293      	cmp	r3, r2
 8008736:	bf0c      	ite	eq
 8008738:	2301      	moveq	r3, #1
 800873a:	2300      	movne	r3, #0
 800873c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8008740:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008742:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800874a:	d108      	bne.n	800875e <lv_obj_refr_size+0x222>
 800874c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800874e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008752:	b21b      	sxth	r3, r3
 8008754:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008758:	dc01      	bgt.n	800875e <lv_obj_refr_size+0x222>
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <lv_obj_refr_size+0x224>
 800875e:	2300      	movs	r3, #0
 8008760:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008764:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8008770:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008772:	f000 f9f1 	bl	8008b58 <lv_obj_get_content_height>
 8008776:	4603      	mov	r3, r0
 8008778:	847b      	strh	r3, [r7, #34]	; 0x22

        if(h_is_content) {
 800877a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <lv_obj_refr_size+0x252>
            h = calc_content_height(obj);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fad2 	bl	8009d2c <calc_content_height>
 8008788:	4603      	mov	r3, r0
 800878a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800878c:	e051      	b.n	8008832 <lv_obj_refr_size+0x2f6>
        }
        else if(h_is_pct) {
 800878e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008792:	2b00      	cmp	r3, #0
 8008794:	d04d      	beq.n	8008832 <lv_obj_refr_size+0x2f6>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d128      	bne.n	80087f8 <lv_obj_refr_size+0x2bc>
 80087a6:	2100      	movs	r1, #0
 80087a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80087aa:	f7ff fd0e 	bl	80081ca <lv_obj_get_style_height>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d11e      	bne.n	80087f8 <lv_obj_refr_size+0x2bc>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 80087ba:	2100      	movs	r1, #0
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff fe24 	bl	800840a <lv_obj_get_style_border_width>
 80087c2:	4603      	mov	r3, r0
 80087c4:	843b      	strh	r3, [r7, #32]
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80087c6:	2100      	movs	r1, #0
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff fdd6 	bl	800837a <lv_obj_get_style_pad_top>
 80087ce:	4603      	mov	r3, r0
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	8c3b      	ldrh	r3, [r7, #32]
 80087d4:	4413      	add	r3, r2
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	877b      	strh	r3, [r7, #58]	; 0x3a
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 80087da:	2100      	movs	r1, #0
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff fdde 	bl	800839e <lv_obj_get_style_pad_bottom>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80087ea:	4413      	add	r3, r2
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80087f0:	4413      	add	r3, r2
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	877b      	strh	r3, [r7, #58]	; 0x3a
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80087f6:	e01c      	b.n	8008832 <lv_obj_refr_size+0x2f6>
            }
            else {
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 80087f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80087fa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80087fe:	b21b      	sxth	r3, r3
 8008800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008804:	dd06      	ble.n	8008814 <lv_obj_refr_size+0x2d8>
 8008806:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008808:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800880c:	b21b      	sxth	r3, r3
 800880e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008812:	e003      	b.n	800881c <lv_obj_refr_size+0x2e0>
 8008814:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008816:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800881a:	b21b      	sxth	r3, r3
 800881c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008820:	fb02 f303 	mul.w	r3, r2, r3
 8008824:	4a42      	ldr	r2, [pc, #264]	; (8008930 <lv_obj_refr_size+0x3f4>)
 8008826:	fb82 1203 	smull	r1, r2, r2, r3
 800882a:	1152      	asrs	r2, r2, #5
 800882c:	17db      	asrs	r3, r3, #31
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
        }

        lv_coord_t minh = lv_obj_get_style_min_height(obj, LV_PART_MAIN);
 8008832:	2100      	movs	r1, #0
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff fcda 	bl	80081ee <lv_obj_get_style_min_height>
 800883a:	4603      	mov	r3, r0
 800883c:	83fb      	strh	r3, [r7, #30]
        lv_coord_t maxh = lv_obj_get_style_max_height(obj, LV_PART_MAIN);
 800883e:	2100      	movs	r1, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fce6 	bl	8008212 <lv_obj_get_style_max_height>
 8008846:	4603      	mov	r3, r0
 8008848:	83bb      	strh	r3, [r7, #28]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 800884a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800884e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008852:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8008856:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	; 0x3a
 800885a:	f001 f879 	bl	8009950 <lv_clamp_height>
 800885e:	4603      	mov	r3, r0
 8008860:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    /*calc_auto_size set the scroll x/y to 0 so revert the original value*/
    if(w_is_content || h_is_content) {
 8008862:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008866:	2b00      	cmp	r3, #0
 8008868:	d103      	bne.n	8008872 <lv_obj_refr_size+0x336>
 800886a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800886e:	2b00      	cmp	r3, #0
 8008870:	d007      	beq.n	8008882 <lv_obj_refr_size+0x346>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8008872:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8008876:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800887a:	2300      	movs	r3, #0
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f002 f9eb 	bl	800ac58 <lv_obj_scroll_to>
    }

    /*Do nothing if the size is not changed*/
    /*It is very important else recursive resizing can occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f921 	bl	8008aca <lv_obj_get_width>
 8008888:	4603      	mov	r3, r0
 800888a:	461a      	mov	r2, r3
 800888c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008890:	4293      	cmp	r3, r2
 8008892:	d10a      	bne.n	80088aa <lv_obj_refr_size+0x36e>
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f926 	bl	8008ae6 <lv_obj_get_height>
 800889a:	4603      	mov	r3, r0
 800889c:	461a      	mov	r2, r3
 800889e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d101      	bne.n	80088aa <lv_obj_refr_size+0x36e>
 80088a6:	2300      	movs	r3, #0
 80088a8:	e080      	b.n	80089ac <lv_obj_refr_size+0x470>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fed7 	bl	800965e <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 80088b0:	f107 0310 	add.w	r3, r7, #16
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f8f8 	bl	8008aac <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    lv_obj_get_content_coords(parent, &parent_fit_area);
 80088bc:	f107 0308 	add.w	r3, r7, #8
 80088c0:	4619      	mov	r1, r3
 80088c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80088c4:	f000 f973 	bl	8008bae <lv_obj_get_content_coords>

    /*If the object is already out of the parent and its position is changes
     *surely the scrollbars also changes so invalidate them*/
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 80088c8:	f107 0108 	add.w	r1, r7, #8
 80088cc:	f107 0310 	add.w	r3, r7, #16
 80088d0:	2200      	movs	r2, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f018 f8d8 	bl	8020a88 <_lv_area_is_in>
 80088d8:	4603      	mov	r3, r0
 80088da:	76fb      	strb	r3, [r7, #27]
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 80088dc:	7efb      	ldrb	r3, [r7, #27]
 80088de:	f083 0301 	eor.w	r3, r3, #1
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <lv_obj_refr_size+0x3b2>
 80088e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80088ea:	f003 f855 	bl	800b998 <lv_obj_scrollbar_invalidate>

    /*Set the length and height
     *Be sure the content is not scrolled in an invalid position on the new size*/
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80088f8:	4413      	add	r3, r2
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	3b01      	subs	r3, #1
 80088fe:	b29b      	uxth	r3, r3
 8008900:	b21a      	sxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	835a      	strh	r2, [r3, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008906:	2100      	movs	r1, #0
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7ff fda2 	bl	8008452 <lv_obj_get_style_base_dir>
 800890e:	4603      	mov	r3, r0
 8008910:	2b01      	cmp	r3, #1
 8008912:	d10f      	bne.n	8008934 <lv_obj_refr_size+0x3f8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800891a:	b29a      	uxth	r2, r3
 800891c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	b29b      	uxth	r3, r3
 8008922:	3301      	adds	r3, #1
 8008924:	b29b      	uxth	r3, r3
 8008926:	b21a      	sxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	829a      	strh	r2, [r3, #20]
 800892c:	e00e      	b.n	800894c <lv_obj_refr_size+0x410>
 800892e:	bf00      	nop
 8008930:	51eb851f 	.word	0x51eb851f
    }
    else {
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800893a:	b29a      	uxth	r2, r3
 800893c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800893e:	4413      	add	r3, r2
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29b      	uxth	r3, r3
 8008946:	b21a      	sxth	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	831a      	strh	r2, [r3, #24]
    }

    /*Call the ancestor's event handler to the object with its new coordinates*/
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 800894c:	f107 0310 	add.w	r3, r7, #16
 8008950:	461a      	mov	r2, r3
 8008952:	2129      	movs	r1, #41	; 0x29
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7fc f8cd 	bl	8004af4 <lv_event_send>

    /*Call the ancestor's event handler to the parent too*/
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	2122      	movs	r1, #34	; 0x22
 800895e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008960:	f7fc f8c8 	bl	8004af4 <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fe7a 	bl	800965e <lv_obj_invalidate>

    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 800896a:	2100      	movs	r1, #0
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f003 f850 	bl	800ba12 <lv_obj_readjust_scroll>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the scrollbars*/
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3314      	adds	r3, #20
 8008976:	f107 0108 	add.w	r1, r7, #8
 800897a:	2200      	movs	r2, #0
 800897c:	4618      	mov	r0, r3
 800897e:	f018 f883 	bl	8020a88 <_lv_area_is_in>
 8008982:	4603      	mov	r3, r0
 8008984:	76bb      	strb	r3, [r7, #26]
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8008986:	7efb      	ldrb	r3, [r7, #27]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <lv_obj_refr_size+0x462>
 800898c:	7efb      	ldrb	r3, [r7, #27]
 800898e:	f083 0301 	eor.w	r3, r3, #1
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <lv_obj_refr_size+0x468>
 8008998:	7ebb      	ldrb	r3, [r7, #26]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <lv_obj_refr_size+0x468>
 800899e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80089a0:	f002 fffa 	bl	800b998 <lv_obj_scrollbar_invalidate>

    lv_obj_refresh_ext_draw_size(obj);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fb25 	bl	8007ff4 <lv_obj_refresh_ext_draw_size>

    return true;
 80089aa:	2301      	movs	r3, #1
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3740      	adds	r7, #64	; 0x40
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 80089bc:	4910      	ldr	r1, [pc, #64]	; (8008a00 <lv_obj_is_layout_positioned+0x4c>)
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fd fa86 	bl	8005ed0 <lv_obj_has_flag_any>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <lv_obj_is_layout_positioned+0x1a>
 80089ca:	2300      	movs	r3, #0
 80089cc:	e014      	b.n	80089f8 <lv_obj_is_layout_positioned+0x44>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f005 fa9a 	bl	800df08 <lv_obj_get_parent>
 80089d4:	60f8      	str	r0, [r7, #12]
    if(parent == NULL) return false;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <lv_obj_is_layout_positioned+0x2c>
 80089dc:	2300      	movs	r3, #0
 80089de:	e00b      	b.n	80089f8 <lv_obj_is_layout_positioned+0x44>

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
 80089e0:	2100      	movs	r1, #0
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff fd23 	bl	800842e <lv_obj_get_style_layout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	60bb      	str	r3, [r7, #8]
    if(layout) return true;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <lv_obj_is_layout_positioned+0x42>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e000      	b.n	80089f8 <lv_obj_is_layout_positioned+0x44>
    else return false;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	00060001 	.word	0x00060001

08008a04 <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
    obj->layout_inv = 1;
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f005 fa26 	bl	800de6c <lv_obj_get_screen>
 8008a20:	60f8      	str	r0, [r7, #12]
    scr->scr_layout_inv = 1;
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008a28:	f043 0302 	orr.w	r3, r3, #2
 8008a2c:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f005 fa2f 	bl	800de94 <lv_obj_get_disp>
 8008a36:	60b8      	str	r0, [r7, #8]
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <lv_obj_mark_layout_as_dirty+0x46>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f01a fcb0 	bl	80233aa <lv_timer_resume>
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <lv_obj_update_layout>:

void lv_obj_update_layout(const lv_obj_t * obj)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
    static bool mutex = false;
    if(mutex) {
 8008a5c:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <lv_obj_update_layout+0x54>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11d      	bne.n	8008aa0 <lv_obj_update_layout+0x4c>
        LV_LOG_TRACE("Already running, returning");
        return;
    }
    mutex = true;
 8008a64:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <lv_obj_update_layout+0x54>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	701a      	strb	r2, [r3, #0]

    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f005 f9fe 	bl	800de6c <lv_obj_get_screen>
 8008a70:	60f8      	str	r0, [r7, #12]

    /*Repeat until there where layout invalidations*/
    while(scr->scr_layout_inv) {
 8008a72:	e009      	b.n	8008a88 <lv_obj_update_layout+0x34>
        LV_LOG_INFO("Layout update begin");
        scr->scr_layout_inv = 0;
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008a7a:	f36f 0341 	bfc	r3, #1, #1
 8008a7e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
        layout_update_core(scr);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f001 fa18 	bl	8009eb8 <layout_update_core>
    while(scr->scr_layout_inv) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1ed      	bne.n	8008a74 <lv_obj_update_layout+0x20>
        LV_LOG_TRACE("Layout update end");
    }

    mutex = false;
 8008a98:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <lv_obj_update_layout+0x54>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	e000      	b.n	8008aa2 <lv_obj_update_layout+0x4e>
        return;
 8008aa0:	bf00      	nop
}
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20000708 	.word	0x20000708

08008aac <lv_obj_get_coords>:
    lv_obj_set_pos(obj, x, y);

}

void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	3314      	adds	r3, #20
 8008aba:	4619      	mov	r1, r3
 8008abc:	6838      	ldr	r0, [r7, #0]
 8008abe:	f7ff fb01 	bl	80080c4 <lv_area_copy>
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <lv_obj_get_width>:
    return lv_obj_get_style_y(obj, LV_PART_MAIN);
}


lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fb13 	bl	8008102 <lv_area_get_width>
 8008adc:	4603      	mov	r3, r0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <lv_obj_get_height>:

lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3314      	adds	r3, #20
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff fb1c 	bl	8008130 <lv_area_get_height>
 8008af8:	4603      	mov	r3, r0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff fc58 	bl	80083c2 <lv_obj_get_style_pad_left>
 8008b12:	4603      	mov	r3, r0
 8008b14:	81fb      	strh	r3, [r7, #14]
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8008b16:	2100      	movs	r1, #0
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff fc64 	bl	80083e6 <lv_obj_get_style_pad_right>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008b22:	2100      	movs	r1, #0
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fc70 	bl	800840a <lv_obj_get_style_border_width>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff ffcb 	bl	8008aca <lv_obj_get_width>
 8008b34:	4603      	mov	r3, r0
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	89fb      	ldrh	r3, [r7, #14]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	89bb      	ldrh	r3, [r7, #12]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	897b      	ldrh	r3, [r7, #10]
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	b21b      	sxth	r3, r3
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008b60:	2100      	movs	r1, #0
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff fc09 	bl	800837a <lv_obj_get_style_pad_top>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	81fb      	strh	r3, [r7, #14]
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff fc15 	bl	800839e <lv_obj_get_style_pad_bottom>
 8008b74:	4603      	mov	r3, r0
 8008b76:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008b78:	2100      	movs	r1, #0
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff fc45 	bl	800840a <lv_obj_get_style_border_width>
 8008b80:	4603      	mov	r3, r0
 8008b82:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7ff ffae 	bl	8008ae6 <lv_obj_get_height>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	89fb      	ldrh	r3, [r7, #14]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	89bb      	ldrh	r3, [r7, #12]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	897b      	ldrh	r3, [r7, #10]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	b21b      	sxth	r3, r3
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008bb8:	2100      	movs	r1, #0
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff fc25 	bl	800840a <lv_obj_get_style_border_width>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	81fb      	strh	r3, [r7, #14]

    lv_obj_get_coords(obj, area);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff ff70 	bl	8008aac <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8008bcc:	89fb      	ldrh	r3, [r7, #14]
 8008bce:	425b      	negs	r3, r3
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	b21b      	sxth	r3, r3
 8008bd4:	89fa      	ldrh	r2, [r7, #14]
 8008bd6:	4252      	negs	r2, r2
 8008bd8:	b292      	uxth	r2, r2
 8008bda:	b212      	sxth	r2, r2
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6838      	ldr	r0, [r7, #0]
 8008be0:	f017 fd02 	bl	80205e8 <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8008be4:	2100      	movs	r1, #0
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fbeb 	bl	80083c2 <lv_obj_get_style_pad_left>
 8008bec:	4603      	mov	r3, r0
 8008bee:	4619      	mov	r1, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	b28b      	uxth	r3, r1
 8008bfa:	4413      	add	r3, r2
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	b21a      	sxth	r2, r3
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	801a      	strh	r2, [r3, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8008c04:	2100      	movs	r1, #0
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fbed 	bl	80083e6 <lv_obj_get_style_pad_right>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	4619      	mov	r1, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	b28b      	uxth	r3, r1
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	b21a      	sxth	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	809a      	strh	r2, [r3, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008c24:	2100      	movs	r1, #0
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fba7 	bl	800837a <lv_obj_get_style_pad_top>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	4619      	mov	r1, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	b28b      	uxth	r3, r1
 8008c3a:	4413      	add	r3, r2
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	b21a      	sxth	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	805a      	strh	r2, [r3, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008c44:	2100      	movs	r1, #0
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff fba9 	bl	800839e <lv_obj_get_style_pad_bottom>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	4619      	mov	r1, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	b28b      	uxth	r3, r1
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	b21a      	sxth	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	80da      	strh	r2, [r3, #6]

}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
    lv_point_t p = {0, LV_COORD_MIN};
 8008c74:	2300      	movs	r3, #0
 8008c76:	81bb      	strh	r3, [r7, #12]
 8008c78:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008c7c:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008c7e:	f107 030c 	add.w	r3, r7, #12
 8008c82:	461a      	mov	r2, r3
 8008c84:	212c      	movs	r1, #44	; 0x2c
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7fb ff34 	bl	8004af4 <lv_event_send>
    return p.x;
 8008c8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
    lv_point_t p = {LV_COORD_MIN, 0};
 8008ca0:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008ca4:	81bb      	strh	r3, [r7, #12]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	461a      	mov	r2, r3
 8008cb0:	212c      	movs	r1, #44	; 0x2c
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fb ff1e 	bl	8004af4 <lv_event_send>
    return p.y;
 8008cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8008ccc:	2100      	movs	r1, #0
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff fa45 	bl	800815e <lv_obj_get_style_width>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8008cd8:	2100      	movs	r1, #0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff fa75 	bl	80081ca <lv_obj_get_style_height>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	81bb      	strh	r3, [r7, #12]
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8008ce4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ce8:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d007      	beq.n	8008d00 <lv_obj_refresh_self_size+0x3c>
 8008cf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008cf4:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d001      	beq.n	8008d00 <lv_obj_refresh_self_size+0x3c>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e003      	b.n	8008d08 <lv_obj_refresh_self_size+0x44>

    lv_obj_mark_layout_as_dirty(obj);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fe7f 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
    return true;
 8008d06:	2301      	movs	r3, #1
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <lv_obj_refr_pos>:

void lv_obj_refr_pos(lv_obj_t * obj)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
    if(lv_obj_is_layout_positioned(obj)) return;
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff fe4b 	bl	80089b4 <lv_obj_is_layout_positioned>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f040 81ef 	bne.w	8009104 <lv_obj_refr_pos+0x3f4>


    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f005 f8ee 	bl	800df08 <lv_obj_get_parent>
 8008d2c:	6138      	str	r0, [r7, #16]
    lv_coord_t x = lv_obj_get_style_x(obj, LV_PART_MAIN);
 8008d2e:	2100      	movs	r1, #0
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff fa80 	bl	8008236 <lv_obj_get_style_x>
 8008d36:	4603      	mov	r3, r0
 8008d38:	83fb      	strh	r3, [r7, #30]
    lv_coord_t y = lv_obj_get_style_y(obj, LV_PART_MAIN);
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff fa8c 	bl	800825a <lv_obj_get_style_y>
 8008d42:	4603      	mov	r3, r0
 8008d44:	83bb      	strh	r3, [r7, #28]

    if(parent == NULL) {
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d108      	bne.n	8008d5e <lv_obj_refr_pos+0x4e>
        lv_obj_move_to(obj, x, y);
 8008d4c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008d50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f9d8 	bl	800910c <lv_obj_move_to>
        return;
 8008d5c:	e1d3      	b.n	8009106 <lv_obj_refr_pos+0x3f6>
    }

    /*Handle percentage value*/
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8008d5e:	6938      	ldr	r0, [r7, #16]
 8008d60:	f7ff fecf 	bl	8008b02 <lv_obj_get_content_width>
 8008d64:	4603      	mov	r3, r0
 8008d66:	81fb      	strh	r3, [r7, #14]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8008d68:	6938      	ldr	r0, [r7, #16]
 8008d6a:	f7ff fef5 	bl	8008b58 <lv_obj_get_content_height>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	81bb      	strh	r3, [r7, #12]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8008d72:	8bfb      	ldrh	r3, [r7, #30]
 8008d74:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d7c:	d123      	bne.n	8008dc6 <lv_obj_refr_pos+0xb6>
 8008d7e:	8bfb      	ldrh	r3, [r7, #30]
 8008d80:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008d84:	b21b      	sxth	r3, r3
 8008d86:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d8a:	dc1c      	bgt.n	8008dc6 <lv_obj_refr_pos+0xb6>
 8008d8c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008d90:	8bfb      	ldrh	r3, [r7, #30]
 8008d92:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008d96:	b21b      	sxth	r3, r3
 8008d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d9c:	dd06      	ble.n	8008dac <lv_obj_refr_pos+0x9c>
 8008d9e:	8bfb      	ldrh	r3, [r7, #30]
 8008da0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008da4:	b21b      	sxth	r3, r3
 8008da6:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008daa:	e003      	b.n	8008db4 <lv_obj_refr_pos+0xa4>
 8008dac:	8bfb      	ldrh	r3, [r7, #30]
 8008dae:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008db2:	b21b      	sxth	r3, r3
 8008db4:	fb02 f303 	mul.w	r3, r2, r3
 8008db8:	4aa6      	ldr	r2, [pc, #664]	; (8009054 <lv_obj_refr_pos+0x344>)
 8008dba:	fb82 1203 	smull	r1, r2, r2, r3
 8008dbe:	1152      	asrs	r2, r2, #5
 8008dc0:	17db      	asrs	r3, r3, #31
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	83fb      	strh	r3, [r7, #30]
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8008dc6:	8bbb      	ldrh	r3, [r7, #28]
 8008dc8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd0:	d123      	bne.n	8008e1a <lv_obj_refr_pos+0x10a>
 8008dd2:	8bbb      	ldrh	r3, [r7, #28]
 8008dd4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008dd8:	b21b      	sxth	r3, r3
 8008dda:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008dde:	dc1c      	bgt.n	8008e1a <lv_obj_refr_pos+0x10a>
 8008de0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008de4:	8bbb      	ldrh	r3, [r7, #28]
 8008de6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008dea:	b21b      	sxth	r3, r3
 8008dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008df0:	dd06      	ble.n	8008e00 <lv_obj_refr_pos+0xf0>
 8008df2:	8bbb      	ldrh	r3, [r7, #28]
 8008df4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008df8:	b21b      	sxth	r3, r3
 8008dfa:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008dfe:	e003      	b.n	8008e08 <lv_obj_refr_pos+0xf8>
 8008e00:	8bbb      	ldrh	r3, [r7, #28]
 8008e02:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e06:	b21b      	sxth	r3, r3
 8008e08:	fb02 f303 	mul.w	r3, r2, r3
 8008e0c:	4a91      	ldr	r2, [pc, #580]	; (8009054 <lv_obj_refr_pos+0x344>)
 8008e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8008e12:	1152      	asrs	r2, r2, #5
 8008e14:	17db      	asrs	r3, r3, #31
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	83bb      	strh	r3, [r7, #28]

    /*Handle percentage value of translate*/
    lv_coord_t tr_x = lv_obj_get_style_translate_x(obj, LV_PART_MAIN);
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fa40 	bl	80082a2 <lv_obj_get_style_translate_x>
 8008e22:	4603      	mov	r3, r0
 8008e24:	837b      	strh	r3, [r7, #26]
    lv_coord_t tr_y = lv_obj_get_style_translate_y(obj, LV_PART_MAIN);
 8008e26:	2100      	movs	r1, #0
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff fa4c 	bl	80082c6 <lv_obj_get_style_translate_y>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	833b      	strh	r3, [r7, #24]
    lv_coord_t w = lv_obj_get_width(obj);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff fe49 	bl	8008aca <lv_obj_get_width>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	817b      	strh	r3, [r7, #10]
    lv_coord_t h = lv_obj_get_height(obj);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff fe52 	bl	8008ae6 <lv_obj_get_height>
 8008e42:	4603      	mov	r3, r0
 8008e44:	813b      	strh	r3, [r7, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8008e46:	8b7b      	ldrh	r3, [r7, #26]
 8008e48:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e50:	d123      	bne.n	8008e9a <lv_obj_refr_pos+0x18a>
 8008e52:	8b7b      	ldrh	r3, [r7, #26]
 8008e54:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e58:	b21b      	sxth	r3, r3
 8008e5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e5e:	dc1c      	bgt.n	8008e9a <lv_obj_refr_pos+0x18a>
 8008e60:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008e64:	8b7b      	ldrh	r3, [r7, #26]
 8008e66:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e6a:	b21b      	sxth	r3, r3
 8008e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e70:	dd06      	ble.n	8008e80 <lv_obj_refr_pos+0x170>
 8008e72:	8b7b      	ldrh	r3, [r7, #26]
 8008e74:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e78:	b21b      	sxth	r3, r3
 8008e7a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008e7e:	e003      	b.n	8008e88 <lv_obj_refr_pos+0x178>
 8008e80:	8b7b      	ldrh	r3, [r7, #26]
 8008e82:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008e86:	b21b      	sxth	r3, r3
 8008e88:	fb02 f303 	mul.w	r3, r2, r3
 8008e8c:	4a71      	ldr	r2, [pc, #452]	; (8009054 <lv_obj_refr_pos+0x344>)
 8008e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8008e92:	1152      	asrs	r2, r2, #5
 8008e94:	17db      	asrs	r3, r3, #31
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	837b      	strh	r3, [r7, #26]
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8008e9a:	8b3b      	ldrh	r3, [r7, #24]
 8008e9c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea4:	d123      	bne.n	8008eee <lv_obj_refr_pos+0x1de>
 8008ea6:	8b3b      	ldrh	r3, [r7, #24]
 8008ea8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008eac:	b21b      	sxth	r3, r3
 8008eae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008eb2:	dc1c      	bgt.n	8008eee <lv_obj_refr_pos+0x1de>
 8008eb4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008eb8:	8b3b      	ldrh	r3, [r7, #24]
 8008eba:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008ebe:	b21b      	sxth	r3, r3
 8008ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ec4:	dd06      	ble.n	8008ed4 <lv_obj_refr_pos+0x1c4>
 8008ec6:	8b3b      	ldrh	r3, [r7, #24]
 8008ec8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008ecc:	b21b      	sxth	r3, r3
 8008ece:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008ed2:	e003      	b.n	8008edc <lv_obj_refr_pos+0x1cc>
 8008ed4:	8b3b      	ldrh	r3, [r7, #24]
 8008ed6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008eda:	b21b      	sxth	r3, r3
 8008edc:	fb02 f303 	mul.w	r3, r2, r3
 8008ee0:	4a5c      	ldr	r2, [pc, #368]	; (8009054 <lv_obj_refr_pos+0x344>)
 8008ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8008ee6:	1152      	asrs	r2, r2, #5
 8008ee8:	17db      	asrs	r3, r3, #31
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	833b      	strh	r3, [r7, #24]

    /*Use the translation*/
    x += tr_x;
 8008eee:	8bfa      	ldrh	r2, [r7, #30]
 8008ef0:	8b7b      	ldrh	r3, [r7, #26]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	83fb      	strh	r3, [r7, #30]
    y += tr_y;
 8008ef8:	8bba      	ldrh	r2, [r7, #28]
 8008efa:	8b3b      	ldrh	r3, [r7, #24]
 8008efc:	4413      	add	r3, r2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	83bb      	strh	r3, [r7, #28]

    lv_align_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8008f02:	2100      	movs	r1, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff f9ba 	bl	800827e <lv_obj_get_style_align>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	75fb      	strb	r3, [r7, #23]

    if(align == LV_ALIGN_DEFAULT) {
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10b      	bne.n	8008f2c <lv_obj_refr_pos+0x21c>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8008f14:	2100      	movs	r1, #0
 8008f16:	6938      	ldr	r0, [r7, #16]
 8008f18:	f7ff fa9b 	bl	8008452 <lv_obj_get_style_base_dir>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d102      	bne.n	8008f28 <lv_obj_refr_pos+0x218>
 8008f22:	2303      	movs	r3, #3
 8008f24:	75fb      	strb	r3, [r7, #23]
 8008f26:	e001      	b.n	8008f2c <lv_obj_refr_pos+0x21c>
        else align = LV_ALIGN_TOP_LEFT;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
    }

    if(align == LV_ALIGN_TOP_LEFT) {
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d108      	bne.n	8008f44 <lv_obj_refr_pos+0x234>
        lv_obj_move_to(obj, x, y);
 8008f32:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008f36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f8e5 	bl	800910c <lv_obj_move_to>
 8008f42:	e0e0      	b.n	8009106 <lv_obj_refr_pos+0x3f6>
    }
    else {

        switch(align) {
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	3b02      	subs	r3, #2
 8008f48:	2b07      	cmp	r3, #7
 8008f4a:	f200 80d1 	bhi.w	80090f0 <lv_obj_refr_pos+0x3e0>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <lv_obj_refr_pos+0x244>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f75 	.word	0x08008f75
 8008f58:	08008fa3 	.word	0x08008fa3
 8008f5c:	08008fe3 	.word	0x08008fe3
 8008f60:	08008ff5 	.word	0x08008ff5
 8008f64:	08009033 	.word	0x08009033
 8008f68:	08008fb5 	.word	0x08008fb5
 8008f6c:	08009059 	.word	0x08009059
 8008f70:	08009097 	.word	0x08009097
            case LV_ALIGN_TOP_MID:
                x += pw / 2 - w / 2;
 8008f74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	da00      	bge.n	8008f7e <lv_obj_refr_pos+0x26e>
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	105b      	asrs	r3, r3, #1
 8008f80:	b21b      	sxth	r3, r3
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	da00      	bge.n	8008f8e <lv_obj_refr_pos+0x27e>
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	105b      	asrs	r3, r3, #1
 8008f90:	b21b      	sxth	r3, r3
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	8bfb      	ldrh	r3, [r7, #30]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	83fb      	strh	r3, [r7, #30]
                break;
 8008fa0:	e0a7      	b.n	80090f2 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_TOP_RIGHT:
                x += pw - w;
 8008fa2:	89fa      	ldrh	r2, [r7, #14]
 8008fa4:	897b      	ldrh	r3, [r7, #10]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	8bfb      	ldrh	r3, [r7, #30]
 8008fac:	4413      	add	r3, r2
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	83fb      	strh	r3, [r7, #30]
                break;
 8008fb2:	e09e      	b.n	80090f2 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_LEFT_MID:
                y += ph / 2 - h / 2;
 8008fb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da00      	bge.n	8008fbe <lv_obj_refr_pos+0x2ae>
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	105b      	asrs	r3, r3, #1
 8008fc0:	b21b      	sxth	r3, r3
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	da00      	bge.n	8008fce <lv_obj_refr_pos+0x2be>
 8008fcc:	3301      	adds	r3, #1
 8008fce:	105b      	asrs	r3, r3, #1
 8008fd0:	b21b      	sxth	r3, r3
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	8bbb      	ldrh	r3, [r7, #28]
 8008fda:	4413      	add	r3, r2
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	83bb      	strh	r3, [r7, #28]
                break;
 8008fe0:	e087      	b.n	80090f2 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_LEFT:
                y += ph - h;
 8008fe2:	89ba      	ldrh	r2, [r7, #12]
 8008fe4:	893b      	ldrh	r3, [r7, #8]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	8bbb      	ldrh	r3, [r7, #28]
 8008fec:	4413      	add	r3, r2
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	83bb      	strh	r3, [r7, #28]
                break;
 8008ff2:	e07e      	b.n	80090f2 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_MID:
                x += pw / 2 - w / 2;
 8008ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	da00      	bge.n	8008ffe <lv_obj_refr_pos+0x2ee>
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	105b      	asrs	r3, r3, #1
 8009000:	b21b      	sxth	r3, r3
 8009002:	b29a      	uxth	r2, r3
 8009004:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009008:	2b00      	cmp	r3, #0
 800900a:	da00      	bge.n	800900e <lv_obj_refr_pos+0x2fe>
 800900c:	3301      	adds	r3, #1
 800900e:	105b      	asrs	r3, r3, #1
 8009010:	b21b      	sxth	r3, r3
 8009012:	b29b      	uxth	r3, r3
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	b29a      	uxth	r2, r3
 8009018:	8bfb      	ldrh	r3, [r7, #30]
 800901a:	4413      	add	r3, r2
 800901c:	b29b      	uxth	r3, r3
 800901e:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 8009020:	89ba      	ldrh	r2, [r7, #12]
 8009022:	893b      	ldrh	r3, [r7, #8]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	b29a      	uxth	r2, r3
 8009028:	8bbb      	ldrh	r3, [r7, #28]
 800902a:	4413      	add	r3, r2
 800902c:	b29b      	uxth	r3, r3
 800902e:	83bb      	strh	r3, [r7, #28]
                break;
 8009030:	e05f      	b.n	80090f2 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_RIGHT:
                x += pw - w;
 8009032:	89fa      	ldrh	r2, [r7, #14]
 8009034:	897b      	ldrh	r3, [r7, #10]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	b29a      	uxth	r2, r3
 800903a:	8bfb      	ldrh	r3, [r7, #30]
 800903c:	4413      	add	r3, r2
 800903e:	b29b      	uxth	r3, r3
 8009040:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 8009042:	89ba      	ldrh	r2, [r7, #12]
 8009044:	893b      	ldrh	r3, [r7, #8]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	b29a      	uxth	r2, r3
 800904a:	8bbb      	ldrh	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	b29b      	uxth	r3, r3
 8009050:	83bb      	strh	r3, [r7, #28]
                break;
 8009052:	e04e      	b.n	80090f2 <lv_obj_refr_pos+0x3e2>
 8009054:	51eb851f 	.word	0x51eb851f
            case LV_ALIGN_RIGHT_MID:
                x += pw - w;
 8009058:	89fa      	ldrh	r2, [r7, #14]
 800905a:	897b      	ldrh	r3, [r7, #10]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	b29a      	uxth	r2, r3
 8009060:	8bfb      	ldrh	r3, [r7, #30]
 8009062:	4413      	add	r3, r2
 8009064:	b29b      	uxth	r3, r3
 8009066:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 8009068:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da00      	bge.n	8009072 <lv_obj_refr_pos+0x362>
 8009070:	3301      	adds	r3, #1
 8009072:	105b      	asrs	r3, r3, #1
 8009074:	b21b      	sxth	r3, r3
 8009076:	b29a      	uxth	r2, r3
 8009078:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	da00      	bge.n	8009082 <lv_obj_refr_pos+0x372>
 8009080:	3301      	adds	r3, #1
 8009082:	105b      	asrs	r3, r3, #1
 8009084:	b21b      	sxth	r3, r3
 8009086:	b29b      	uxth	r3, r3
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	b29a      	uxth	r2, r3
 800908c:	8bbb      	ldrh	r3, [r7, #28]
 800908e:	4413      	add	r3, r2
 8009090:	b29b      	uxth	r3, r3
 8009092:	83bb      	strh	r3, [r7, #28]
                break;
 8009094:	e02d      	b.n	80090f2 <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_CENTER:
                x += pw / 2 - w / 2;
 8009096:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800909a:	2b00      	cmp	r3, #0
 800909c:	da00      	bge.n	80090a0 <lv_obj_refr_pos+0x390>
 800909e:	3301      	adds	r3, #1
 80090a0:	105b      	asrs	r3, r3, #1
 80090a2:	b21b      	sxth	r3, r3
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	da00      	bge.n	80090b0 <lv_obj_refr_pos+0x3a0>
 80090ae:	3301      	adds	r3, #1
 80090b0:	105b      	asrs	r3, r3, #1
 80090b2:	b21b      	sxth	r3, r3
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	8bfb      	ldrh	r3, [r7, #30]
 80090bc:	4413      	add	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 80090c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	da00      	bge.n	80090cc <lv_obj_refr_pos+0x3bc>
 80090ca:	3301      	adds	r3, #1
 80090cc:	105b      	asrs	r3, r3, #1
 80090ce:	b21b      	sxth	r3, r3
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	da00      	bge.n	80090dc <lv_obj_refr_pos+0x3cc>
 80090da:	3301      	adds	r3, #1
 80090dc:	105b      	asrs	r3, r3, #1
 80090de:	b21b      	sxth	r3, r3
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	8bbb      	ldrh	r3, [r7, #28]
 80090e8:	4413      	add	r3, r2
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	83bb      	strh	r3, [r7, #28]
                break;
 80090ee:	e000      	b.n	80090f2 <lv_obj_refr_pos+0x3e2>
            default:
                break;
 80090f0:	bf00      	nop
        }
        lv_obj_move_to(obj, x, y);
 80090f2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80090f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f805 	bl	800910c <lv_obj_move_to>
 8009102:	e000      	b.n	8009106 <lv_obj_refr_pos+0x3f6>
    if(lv_obj_is_layout_positioned(obj)) return;
 8009104:	bf00      	nop
    }
}
 8009106:	3720      	adds	r7, #32
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <lv_obj_move_to>:

void lv_obj_move_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b08d      	sub	sp, #52	; 0x34
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	807b      	strh	r3, [r7, #2]
 8009118:	4613      	mov	r3, r2
 800911a:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * parent = obj->parent;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	62bb      	str	r3, [r7, #40]	; 0x28

    if(parent) {
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	2b00      	cmp	r3, #0
 8009126:	d05a      	beq.n	80091de <lv_obj_move_to+0xd2>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8009128:	2100      	movs	r1, #0
 800912a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800912c:	f7ff f949 	bl	80083c2 <lv_obj_get_style_pad_left>
 8009130:	4603      	mov	r3, r0
 8009132:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8009134:	2100      	movs	r1, #0
 8009136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009138:	f7ff f91f 	bl	800837a <lv_obj_get_style_pad_top>
 800913c:	4603      	mov	r3, r0
 800913e:	84bb      	strh	r3, [r7, #36]	; 0x24

        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 8009140:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fc feae 	bl	8005ea6 <lv_obj_has_flag>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d016      	beq.n	800917e <lv_obj_move_to+0x72>
            x += pad_left + parent->coords.x1;
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009156:	b29a      	uxth	r2, r3
 8009158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800915a:	4413      	add	r3, r2
 800915c:	b29a      	uxth	r2, r3
 800915e:	887b      	ldrh	r3, [r7, #2]
 8009160:	4413      	add	r3, r2
 8009162:	b29b      	uxth	r3, r3
 8009164:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1;
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800916c:	b29a      	uxth	r2, r3
 800916e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009170:	4413      	add	r3, r2
 8009172:	b29a      	uxth	r2, r3
 8009174:	883b      	ldrh	r3, [r7, #0]
 8009176:	4413      	add	r3, r2
 8009178:	b29b      	uxth	r3, r3
 800917a:	803b      	strh	r3, [r7, #0]
 800917c:	e01f      	b.n	80091be <lv_obj_move_to+0xb2>
        }
        else {
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 800917e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009184:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8009188:	189c      	adds	r4, r3, r2
 800918a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800918c:	f001 f968 	bl	800a460 <lv_obj_get_scroll_x>
 8009190:	4603      	mov	r3, r0
 8009192:	1ae3      	subs	r3, r4, r3
 8009194:	b29a      	uxth	r2, r3
 8009196:	887b      	ldrh	r3, [r7, #2]
 8009198:	4413      	add	r3, r2
 800919a:	b29b      	uxth	r3, r3
 800919c:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800919e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80091a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091a4:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80091a8:	189c      	adds	r4, r3, r2
 80091aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ac:	f001 f970 	bl	800a490 <lv_obj_get_scroll_y>
 80091b0:	4603      	mov	r3, r0
 80091b2:	1ae3      	subs	r3, r4, r3
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	883b      	ldrh	r3, [r7, #0]
 80091b8:	4413      	add	r3, r2
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	803b      	strh	r3, [r7, #0]
        }

        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 80091be:	2100      	movs	r1, #0
 80091c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c2:	f7ff f922 	bl	800840a <lv_obj_get_style_border_width>
 80091c6:	4603      	mov	r3, r0
 80091c8:	847b      	strh	r3, [r7, #34]	; 0x22
        x += border_width;
 80091ca:	887a      	ldrh	r2, [r7, #2]
 80091cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091ce:	4413      	add	r3, r2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	807b      	strh	r3, [r7, #2]
        y += border_width;
 80091d4:	883a      	ldrh	r2, [r7, #0]
 80091d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091d8:	4413      	add	r3, r2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 80091de:	887a      	ldrh	r2, [r7, #2]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	83bb      	strh	r3, [r7, #28]
    diff.y = y - obj->coords.y1;
 80091f0:	883a      	ldrh	r2, [r7, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	b21b      	sxth	r3, r3
 8009200:	83fb      	strh	r3, [r7, #30]

    /*Do nothing if the position is not changed*/
    /*It is very important else recursive positioning can
     *occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 8009202:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d104      	bne.n	8009214 <lv_obj_move_to+0x108>
 800920a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 808e 	beq.w	8009330 <lv_obj_move_to+0x224>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fa22 	bl	800965e <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 800921a:	f107 0314 	add.w	r3, r7, #20
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff fc43 	bl	8008aac <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    bool on1 = false;
 8009226:	2300      	movs	r3, #0
 8009228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(parent) {
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d01a      	beq.n	8009268 <lv_obj_move_to+0x15c>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8009232:	f107 030c 	add.w	r3, r7, #12
 8009236:	4619      	mov	r1, r3
 8009238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800923a:	f7ff fcb8 	bl	8008bae <lv_obj_get_content_coords>

        /*If the object is already out of the parent and its position is changes
         *surely the scrollbars also changes so invalidate them*/
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800923e:	f107 010c 	add.w	r1, r7, #12
 8009242:	f107 0314 	add.w	r3, r7, #20
 8009246:	2200      	movs	r2, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f017 fc1d 	bl	8020a88 <_lv_area_is_in>
 800924e:	4603      	mov	r3, r0
 8009250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8009254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009258:	f083 0301 	eor.w	r3, r3, #1
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <lv_obj_move_to+0x15c>
 8009262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009264:	f002 fb98 	bl	800b998 <lv_obj_scrollbar_invalidate>
    }

    obj->coords.x1 += diff.x;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800926e:	b29a      	uxth	r2, r3
 8009270:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009274:	b29b      	uxth	r3, r3
 8009276:	4413      	add	r3, r2
 8009278:	b29b      	uxth	r3, r3
 800927a:	b21a      	sxth	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	829a      	strh	r2, [r3, #20]
    obj->coords.y1 += diff.y;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009286:	b29a      	uxth	r2, r3
 8009288:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800928c:	b29b      	uxth	r3, r3
 800928e:	4413      	add	r3, r2
 8009290:	b29b      	uxth	r3, r3
 8009292:	b21a      	sxth	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	82da      	strh	r2, [r3, #22]
    obj->coords.x2 += diff.x;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800929e:	b29a      	uxth	r2, r3
 80092a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	4413      	add	r3, r2
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	b21a      	sxth	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	831a      	strh	r2, [r3, #24]
    obj->coords.y2 += diff.y;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4413      	add	r3, r2
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	b21a      	sxth	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	835a      	strh	r2, [r3, #26]

    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 80092c8:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80092cc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80092d0:	2300      	movs	r3, #0
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f830 	bl	8009338 <lv_obj_move_children_by>

    /*Call the ancestor's event handler to the parent too*/
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <lv_obj_move_to+0x1dc>
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	2122      	movs	r1, #34	; 0x22
 80092e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e4:	f7fb fc06 	bl	8004af4 <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f9b8 	bl	800965e <lv_obj_invalidate>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the srollbars*/
    if(parent) {
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01e      	beq.n	8009332 <lv_obj_move_to+0x226>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	3314      	adds	r3, #20
 80092f8:	f107 010c 	add.w	r1, r7, #12
 80092fc:	2200      	movs	r2, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f017 fbc2 	bl	8020a88 <_lv_area_is_in>
 8009304:	4603      	mov	r3, r0
 8009306:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800930a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10a      	bne.n	8009328 <lv_obj_move_to+0x21c>
 8009312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009316:	f083 0301 	eor.w	r3, r3, #1
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <lv_obj_move_to+0x226>
 8009320:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009324:	2b00      	cmp	r3, #0
 8009326:	d004      	beq.n	8009332 <lv_obj_move_to+0x226>
 8009328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932a:	f002 fb35 	bl	800b998 <lv_obj_scrollbar_invalidate>
 800932e:	e000      	b.n	8009332 <lv_obj_move_to+0x226>
    if(diff.x == 0 && diff.y == 0) return;
 8009330:	bf00      	nop
    }
}
 8009332:	3734      	adds	r7, #52	; 0x34
 8009334:	46bd      	mov	sp, r7
 8009336:	bd90      	pop	{r4, r7, pc}

08009338 <lv_obj_move_children_by>:

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4603      	mov	r3, r0
 8009348:	817b      	strh	r3, [r7, #10]
 800934a:	460b      	mov	r3, r1
 800934c:	813b      	strh	r3, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	71fb      	strb	r3, [r7, #7]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f004 fe1c 	bl	800df90 <lv_obj_get_child_cnt>
 8009358:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	e047      	b.n	80093f0 <lv_obj_move_children_by+0xb8>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	617b      	str	r3, [r7, #20]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d007      	beq.n	8009386 <lv_obj_move_children_by+0x4e>
 8009376:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800937a:	6978      	ldr	r0, [r7, #20]
 800937c:	f7fc fd93 	bl	8005ea6 <lv_obj_has_flag>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d130      	bne.n	80093e8 <lv_obj_move_children_by+0xb0>
        child->coords.x1 += x_diff;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800938c:	b29a      	uxth	r2, r3
 800938e:	897b      	ldrh	r3, [r7, #10]
 8009390:	4413      	add	r3, r2
 8009392:	b29b      	uxth	r3, r3
 8009394:	b21a      	sxth	r2, r3
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	829a      	strh	r2, [r3, #20]
        child->coords.y1 += y_diff;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	893b      	ldrh	r3, [r7, #8]
 80093a4:	4413      	add	r3, r2
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	b21a      	sxth	r2, r3
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	82da      	strh	r2, [r3, #22]
        child->coords.x2 += x_diff;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	897b      	ldrh	r3, [r7, #10]
 80093b8:	4413      	add	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	b21a      	sxth	r2, r3
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	831a      	strh	r2, [r3, #24]
        child->coords.y2 += y_diff;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	893b      	ldrh	r3, [r7, #8]
 80093cc:	4413      	add	r3, r2
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	b21a      	sxth	r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	835a      	strh	r2, [r3, #26]

        lv_obj_move_children_by(child, x_diff, y_diff, false);
 80093d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80093da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80093de:	2300      	movs	r3, #0
 80093e0:	6978      	ldr	r0, [r7, #20]
 80093e2:	f7ff ffa9 	bl	8009338 <lv_obj_move_children_by>
 80093e6:	e000      	b.n	80093ea <lv_obj_move_children_by+0xb2>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 80093e8:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	3301      	adds	r3, #1
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	69fa      	ldr	r2, [r7, #28]
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d3b3      	bcc.n	8009360 <lv_obj_move_children_by+0x28>
    }
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <lv_obj_transform_point>:

void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, bool recursive, bool inv)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b086      	sub	sp, #24
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	4611      	mov	r1, r2
 800940e:	461a      	mov	r2, r3
 8009410:	460b      	mov	r3, r1
 8009412:	71fb      	strb	r3, [r7, #7]
 8009414:	4613      	mov	r3, r2
 8009416:	71bb      	strb	r3, [r7, #6]
    if(obj) {
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d036      	beq.n	800948c <lv_obj_transform_point+0x8a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7fe fe3a 	bl	8008098 <_lv_obj_get_layer_type>
 8009424:	4603      	mov	r3, r0
 8009426:	75fb      	strb	r3, [r7, #23]
        bool do_tranf = layer_type == LV_LAYER_TYPE_TRANSFORM;
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	2b02      	cmp	r3, #2
 800942c:	bf0c      	ite	eq
 800942e:	2301      	moveq	r3, #1
 8009430:	2300      	movne	r3, #0
 8009432:	75bb      	strb	r3, [r7, #22]
        if(inv) {
 8009434:	79bb      	ldrb	r3, [r7, #6]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d014      	beq.n	8009464 <lv_obj_transform_point+0x62>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <lv_obj_transform_point+0x4e>
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f004 fd61 	bl	800df08 <lv_obj_get_parent>
 8009446:	79bb      	ldrb	r3, [r7, #6]
 8009448:	79fa      	ldrb	r2, [r7, #7]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	f7ff ffd9 	bl	8009402 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 8009450:	7dbb      	ldrb	r3, [r7, #22]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01a      	beq.n	800948c <lv_obj_transform_point+0x8a>
 8009456:	79bb      	ldrb	r3, [r7, #6]
 8009458:	461a      	mov	r2, r3
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 fd8d 	bl	8009f7c <transform_point>
        else {
            if(do_tranf) transform_point(obj, p, inv);
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
        }
    }
}
 8009462:	e013      	b.n	800948c <lv_obj_transform_point+0x8a>
            if(do_tranf) transform_point(obj, p, inv);
 8009464:	7dbb      	ldrb	r3, [r7, #22]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <lv_obj_transform_point+0x74>
 800946a:	79bb      	ldrb	r3, [r7, #6]
 800946c:	461a      	mov	r2, r3
 800946e:	68b9      	ldr	r1, [r7, #8]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fd83 	bl	8009f7c <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d007      	beq.n	800948c <lv_obj_transform_point+0x8a>
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f004 fd43 	bl	800df08 <lv_obj_get_parent>
 8009482:	79bb      	ldrb	r3, [r7, #6]
 8009484:	79fa      	ldrb	r2, [r7, #7]
 8009486:	68b9      	ldr	r1, [r7, #8]
 8009488:	f7ff ffbb 	bl	8009402 <lv_obj_transform_point>
}
 800948c:	bf00      	nop
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <lv_obj_get_transformed_area>:

void lv_obj_get_transformed_area(const lv_obj_t * obj, lv_area_t * area, bool recursive,
                                 bool inv)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	4611      	mov	r1, r2
 80094a0:	461a      	mov	r2, r3
 80094a2:	460b      	mov	r3, r1
 80094a4:	71fb      	strb	r3, [r7, #7]
 80094a6:	4613      	mov	r3, r2
 80094a8:	71bb      	strb	r3, [r7, #6]
    lv_point_t p[4] = {
        {area->x1, area->y1},
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 80094b0:	823b      	strh	r3, [r7, #16]
        {area->x1, area->y1},
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 80094b8:	827b      	strh	r3, [r7, #18]
        {area->x1, area->y2},
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 80094c0:	82bb      	strh	r3, [r7, #20]
        {area->x1, area->y2},
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 80094c8:	82fb      	strh	r3, [r7, #22]
        {area->x2, area->y1},
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 80094d0:	833b      	strh	r3, [r7, #24]
        {area->x2, area->y1},
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 80094d8:	837b      	strh	r3, [r7, #26]
        {area->x2, area->y2},
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 80094e0:	83bb      	strh	r3, [r7, #28]
        {area->x2, area->y2},
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 80094e8:	83fb      	strh	r3, [r7, #30]
    };

    lv_obj_transform_point(obj, &p[0], recursive, inv);
 80094ea:	79bb      	ldrb	r3, [r7, #6]
 80094ec:	79fa      	ldrb	r2, [r7, #7]
 80094ee:	f107 0110 	add.w	r1, r7, #16
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7ff ff85 	bl	8009402 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 80094f8:	79b8      	ldrb	r0, [r7, #6]
 80094fa:	79fa      	ldrb	r2, [r7, #7]
 80094fc:	f107 0310 	add.w	r3, r7, #16
 8009500:	1d19      	adds	r1, r3, #4
 8009502:	4603      	mov	r3, r0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff ff7c 	bl	8009402 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 800950a:	79b8      	ldrb	r0, [r7, #6]
 800950c:	79fa      	ldrb	r2, [r7, #7]
 800950e:	f107 0310 	add.w	r3, r7, #16
 8009512:	f103 0108 	add.w	r1, r3, #8
 8009516:	4603      	mov	r3, r0
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7ff ff72 	bl	8009402 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 800951e:	79b8      	ldrb	r0, [r7, #6]
 8009520:	79fa      	ldrb	r2, [r7, #7]
 8009522:	f107 0310 	add.w	r3, r7, #16
 8009526:	f103 010c 	add.w	r1, r3, #12
 800952a:	4603      	mov	r3, r0
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f7ff ff68 	bl	8009402 <lv_obj_transform_point>

    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 8009532:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009536:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800953a:	4293      	cmp	r3, r2
 800953c:	bfa8      	it	ge
 800953e:	4613      	movge	r3, r2
 8009540:	b21a      	sxth	r2, r3
 8009542:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8009546:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800954a:	428b      	cmp	r3, r1
 800954c:	bfa8      	it	ge
 800954e:	460b      	movge	r3, r1
 8009550:	b21b      	sxth	r3, r3
 8009552:	4293      	cmp	r3, r2
 8009554:	bfa8      	it	ge
 8009556:	4613      	movge	r3, r2
 8009558:	b21a      	sxth	r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	801a      	strh	r2, [r3, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 800955e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009562:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009566:	4293      	cmp	r3, r2
 8009568:	bfb8      	it	lt
 800956a:	4613      	movlt	r3, r2
 800956c:	b21a      	sxth	r2, r3
 800956e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8009572:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009576:	428b      	cmp	r3, r1
 8009578:	bfb8      	it	lt
 800957a:	460b      	movlt	r3, r1
 800957c:	b21b      	sxth	r3, r3
 800957e:	4293      	cmp	r3, r2
 8009580:	bfb8      	it	lt
 8009582:	4613      	movlt	r3, r2
 8009584:	b21a      	sxth	r2, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	809a      	strh	r2, [r3, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 800958a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800958e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009592:	4293      	cmp	r3, r2
 8009594:	bfa8      	it	ge
 8009596:	4613      	movge	r3, r2
 8009598:	b21a      	sxth	r2, r3
 800959a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800959e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80095a2:	428b      	cmp	r3, r1
 80095a4:	bfa8      	it	ge
 80095a6:	460b      	movge	r3, r1
 80095a8:	b21b      	sxth	r3, r3
 80095aa:	4293      	cmp	r3, r2
 80095ac:	bfa8      	it	ge
 80095ae:	4613      	movge	r3, r2
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	805a      	strh	r2, [r3, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 80095b6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80095ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80095be:	4293      	cmp	r3, r2
 80095c0:	bfb8      	it	lt
 80095c2:	4613      	movlt	r3, r2
 80095c4:	b21a      	sxth	r2, r3
 80095c6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80095ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80095ce:	428b      	cmp	r3, r1
 80095d0:	bfb8      	it	lt
 80095d2:	460b      	movlt	r3, r1
 80095d4:	b21b      	sxth	r3, r3
 80095d6:	4293      	cmp	r3, r2
 80095d8:	bfb8      	it	lt
 80095da:	4613      	movlt	r3, r2
 80095dc:	b21a      	sxth	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	80da      	strh	r2, [r3, #6]
    lv_area_increase(area, 5, 5);
 80095e2:	2205      	movs	r2, #5
 80095e4:	2105      	movs	r1, #5
 80095e6:	68b8      	ldr	r0, [r7, #8]
 80095e8:	f016 fffe 	bl	80205e8 <lv_area_increase>
}
 80095ec:	bf00      	nop
 80095ee:	3720      	adds	r7, #32
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <lv_obj_invalidate_area>:


void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_disp_t * disp   = lv_obj_get_disp(obj);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f004 fc48 	bl	800de94 <lv_obj_get_disp>
 8009604:	6178      	str	r0, [r7, #20]
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8009606:	6978      	ldr	r0, [r7, #20]
 8009608:	f7fb f96a 	bl	80048e0 <lv_disp_is_invalidation_enabled>
 800960c:	4603      	mov	r3, r0
 800960e:	f083 0301 	eor.w	r3, r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d11c      	bne.n	8009652 <lv_obj_invalidate_area+0x5e>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 8009618:	f107 030c 	add.w	r3, r7, #12
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fd50 	bl	80080c4 <lv_area_copy>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8009624:	f107 030c 	add.w	r3, r7, #12
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f853 	bl	80096d6 <lv_obj_area_is_visible>
 8009630:	4603      	mov	r3, r0
 8009632:	f083 0301 	eor.w	r3, r3, #1
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10c      	bne.n	8009656 <lv_obj_invalidate_area+0x62>

    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f004 fc29 	bl	800de94 <lv_obj_get_disp>
 8009642:	4602      	mov	r2, r0
 8009644:	f107 030c 	add.w	r3, r7, #12
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f004 ff3e 	bl	800e4cc <_lv_inv_area>
 8009650:	e002      	b.n	8009658 <lv_obj_invalidate_area+0x64>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8009652:	bf00      	nop
 8009654:	e000      	b.n	8009658 <lv_obj_invalidate_area+0x64>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8009656:	bf00      	nop
}
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <lv_obj_invalidate>:

void lv_obj_invalidate(const lv_obj_t * obj)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b086      	sub	sp, #24
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7fe fd02 	bl	8008070 <_lv_obj_get_ext_draw_size>
 800966c:	4603      	mov	r3, r0
 800966e:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f103 0214 	add.w	r2, r3, #20
 8009676:	f107 030c 	add.w	r3, r7, #12
 800967a:	4611      	mov	r1, r2
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fd21 	bl	80080c4 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 8009682:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009686:	b29a      	uxth	r2, r3
 8009688:	8afb      	ldrh	r3, [r7, #22]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	b29b      	uxth	r3, r3
 800968e:	b21b      	sxth	r3, r3
 8009690:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 8009692:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009696:	b29a      	uxth	r2, r3
 8009698:	8afb      	ldrh	r3, [r7, #22]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	b29b      	uxth	r3, r3
 800969e:	b21b      	sxth	r3, r3
 80096a0:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 80096a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	8afb      	ldrh	r3, [r7, #22]
 80096aa:	4413      	add	r3, r2
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	b21b      	sxth	r3, r3
 80096b0:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 80096b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	8afb      	ldrh	r3, [r7, #22]
 80096ba:	4413      	add	r3, r2
 80096bc:	b29b      	uxth	r3, r3
 80096be:	b21b      	sxth	r3, r3
 80096c0:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 80096c2:	f107 030c 	add.w	r3, r7, #12
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff ff93 	bl	80095f4 <lv_obj_invalidate_area>

}
 80096ce:	bf00      	nop
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <lv_obj_area_is_visible>:

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b08a      	sub	sp, #40	; 0x28
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 80096e0:	2101      	movs	r1, #1
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fc fbdf 	bl	8005ea6 <lv_obj_has_flag>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <lv_obj_area_is_visible+0x1c>
 80096ee:	2300      	movs	r3, #0
 80096f0:	e0b2      	b.n	8009858 <lv_obj_area_is_visible+0x182>

    /*Invalidate the object only if it belongs to the current or previous or one of the layers'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f004 fbba 	bl	800de6c <lv_obj_get_screen>
 80096f8:	6238      	str	r0, [r7, #32]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80096fa:	6a38      	ldr	r0, [r7, #32]
 80096fc:	f004 fbca 	bl	800de94 <lv_obj_get_disp>
 8009700:	61f8      	str	r0, [r7, #28]
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8009702:	69f8      	ldr	r0, [r7, #28]
 8009704:	f7fa fdf2 	bl	80042ec <lv_disp_get_scr_act>
 8009708:	4602      	mov	r2, r0
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	4293      	cmp	r3, r2
 800970e:	d016      	beq.n	800973e <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8009710:	69f8      	ldr	r0, [r7, #28]
 8009712:	f7fa fe00 	bl	8004316 <lv_disp_get_scr_prev>
 8009716:	4602      	mov	r2, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	4293      	cmp	r3, r2
 800971c:	d00f      	beq.n	800973e <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800971e:	69f8      	ldr	r0, [r7, #28]
 8009720:	f7fa fe1e 	bl	8004360 <lv_disp_get_layer_top>
 8009724:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	4293      	cmp	r3, r2
 800972a:	d008      	beq.n	800973e <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 800972c:	69f8      	ldr	r0, [r7, #28]
 800972e:	f7fa fe2c 	bl	800438a <lv_disp_get_layer_sys>
 8009732:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_layer_top(disp) &&
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	4293      	cmp	r3, r2
 8009738:	d001      	beq.n	800973e <lv_obj_area_is_visible+0x68>
        return false;
 800973a:	2300      	movs	r3, #0
 800973c:	e08c      	b.n	8009858 <lv_obj_area_is_visible+0x182>
    }

    /*Truncate the area to the object*/
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800973e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7fc fbc4 	bl	8005ed0 <lv_obj_has_flag_any>
 8009748:	4603      	mov	r3, r0
 800974a:	f083 0301 	eor.w	r3, r3, #1
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d03c      	beq.n	80097ce <lv_obj_area_is_visible+0xf8>
        lv_area_t obj_coords;
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7fe fc8b 	bl	8008070 <_lv_obj_get_ext_draw_size>
 800975a:	4603      	mov	r3, r0
 800975c:	837b      	strh	r3, [r7, #26]
        lv_area_copy(&obj_coords, &obj->coords);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f103 0214 	add.w	r2, r3, #20
 8009764:	f107 0310 	add.w	r3, r7, #16
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fcaa 	bl	80080c4 <lv_area_copy>
        obj_coords.x1 -= ext_size;
 8009770:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009774:	b29a      	uxth	r2, r3
 8009776:	8b7b      	ldrh	r3, [r7, #26]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	b29b      	uxth	r3, r3
 800977c:	b21b      	sxth	r3, r3
 800977e:	823b      	strh	r3, [r7, #16]
        obj_coords.y1 -= ext_size;
 8009780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009784:	b29a      	uxth	r2, r3
 8009786:	8b7b      	ldrh	r3, [r7, #26]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	b29b      	uxth	r3, r3
 800978c:	b21b      	sxth	r3, r3
 800978e:	827b      	strh	r3, [r7, #18]
        obj_coords.x2 += ext_size;
 8009790:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009794:	b29a      	uxth	r2, r3
 8009796:	8b7b      	ldrh	r3, [r7, #26]
 8009798:	4413      	add	r3, r2
 800979a:	b29b      	uxth	r3, r3
 800979c:	b21b      	sxth	r3, r3
 800979e:	82bb      	strh	r3, [r7, #20]
        obj_coords.y2 += ext_size;
 80097a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	8b7b      	ldrh	r3, [r7, #26]
 80097a8:	4413      	add	r3, r2
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	b21b      	sxth	r3, r3
 80097ae:	82fb      	strh	r3, [r7, #22]

        /*The area is not on the object*/
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 80097b0:	f107 0310 	add.w	r3, r7, #16
 80097b4:	461a      	mov	r2, r3
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6838      	ldr	r0, [r7, #0]
 80097ba:	f016 ff81 	bl	80206c0 <_lv_area_intersect>
 80097be:	4603      	mov	r3, r0
 80097c0:	f083 0301 	eor.w	r3, r3, #1
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <lv_obj_area_is_visible+0xf8>
 80097ca:	2300      	movs	r3, #0
 80097cc:	e044      	b.n	8009858 <lv_obj_area_is_visible+0x182>
    }

    lv_obj_get_transformed_area(obj, area, true, false);
 80097ce:	2300      	movs	r3, #0
 80097d0:	2201      	movs	r2, #1
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff fe5d 	bl	8009494 <lv_obj_get_transformed_area>


    /*Truncate recursively to the parents*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f004 fb94 	bl	800df08 <lv_obj_get_parent>
 80097e0:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 80097e2:	e035      	b.n	8009850 <lv_obj_area_is_visible+0x17a>
        /*If the parent is hidden then the child is hidden and won't be drawn*/
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 80097e4:	2101      	movs	r1, #1
 80097e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097e8:	f7fc fb5d 	bl	8005ea6 <lv_obj_has_flag>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <lv_obj_area_is_visible+0x120>
 80097f2:	2300      	movs	r3, #0
 80097f4:	e030      	b.n	8009858 <lv_obj_area_is_visible+0x182>

        /*Truncate to the parent and if no common parts break*/
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80097f6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80097fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097fc:	f7fc fb68 	bl	8005ed0 <lv_obj_has_flag_any>
 8009800:	4603      	mov	r3, r0
 8009802:	f083 0301 	eor.w	r3, r3, #1
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01d      	beq.n	8009848 <lv_obj_area_is_visible+0x172>
            lv_area_t par_area = par->coords;
 800980c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800980e:	f107 0308 	add.w	r3, r7, #8
 8009812:	3214      	adds	r2, #20
 8009814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009818:	e883 0003 	stmia.w	r3, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 800981c:	f107 0108 	add.w	r1, r7, #8
 8009820:	2300      	movs	r3, #0
 8009822:	2201      	movs	r2, #1
 8009824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009826:	f7ff fe35 	bl	8009494 <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 800982a:	f107 0308 	add.w	r3, r7, #8
 800982e:	461a      	mov	r2, r3
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6838      	ldr	r0, [r7, #0]
 8009834:	f016 ff44 	bl	80206c0 <_lv_area_intersect>
 8009838:	4603      	mov	r3, r0
 800983a:	f083 0301 	eor.w	r3, r3, #1
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <lv_obj_area_is_visible+0x172>
 8009844:	2300      	movs	r3, #0
 8009846:	e007      	b.n	8009858 <lv_obj_area_is_visible+0x182>
        }

        par = lv_obj_get_parent(par);
 8009848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800984a:	f004 fb5d 	bl	800df08 <lv_obj_get_parent>
 800984e:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1c6      	bne.n	80097e4 <lv_obj_area_is_visible+0x10e>
    }

    return true;
 8009856:	2301      	movs	r3, #1
}
 8009858:	4618      	mov	r0, r3
 800985a:	3728      	adds	r7, #40	; 0x28
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <lv_clamp_width>:

    return res;
}

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 8009860:	b490      	push	{r4, r7}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	4611      	mov	r1, r2
 800986c:	461a      	mov	r2, r3
 800986e:	4623      	mov	r3, r4
 8009870:	80fb      	strh	r3, [r7, #6]
 8009872:	4603      	mov	r3, r0
 8009874:	80bb      	strh	r3, [r7, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	807b      	strh	r3, [r7, #2]
 800987a:	4613      	mov	r3, r2
 800987c:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 800987e:	88bb      	ldrh	r3, [r7, #4]
 8009880:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009888:	d123      	bne.n	80098d2 <lv_clamp_width+0x72>
 800988a:	88bb      	ldrh	r3, [r7, #4]
 800988c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009890:	b21b      	sxth	r3, r3
 8009892:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009896:	dc1c      	bgt.n	80098d2 <lv_clamp_width+0x72>
 8009898:	f9b7 2000 	ldrsh.w	r2, [r7]
 800989c:	88bb      	ldrh	r3, [r7, #4]
 800989e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098a8:	dd06      	ble.n	80098b8 <lv_clamp_width+0x58>
 80098aa:	88bb      	ldrh	r3, [r7, #4]
 80098ac:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80098b0:	b21b      	sxth	r3, r3
 80098b2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80098b6:	e003      	b.n	80098c0 <lv_clamp_width+0x60>
 80098b8:	88bb      	ldrh	r3, [r7, #4]
 80098ba:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80098be:	b21b      	sxth	r3, r3
 80098c0:	fb02 f303 	mul.w	r3, r2, r3
 80098c4:	4a21      	ldr	r2, [pc, #132]	; (800994c <lv_clamp_width+0xec>)
 80098c6:	fb82 1203 	smull	r1, r2, r2, r3
 80098ca:	1152      	asrs	r2, r2, #5
 80098cc:	17db      	asrs	r3, r3, #31
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80098d2:	887b      	ldrh	r3, [r7, #2]
 80098d4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80098d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098dc:	d123      	bne.n	8009926 <lv_clamp_width+0xc6>
 80098de:	887b      	ldrh	r3, [r7, #2]
 80098e0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80098e4:	b21b      	sxth	r3, r3
 80098e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80098ea:	dc1c      	bgt.n	8009926 <lv_clamp_width+0xc6>
 80098ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80098f0:	887b      	ldrh	r3, [r7, #2]
 80098f2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80098f6:	b21b      	sxth	r3, r3
 80098f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098fc:	dd06      	ble.n	800990c <lv_clamp_width+0xac>
 80098fe:	887b      	ldrh	r3, [r7, #2]
 8009900:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009904:	b21b      	sxth	r3, r3
 8009906:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800990a:	e003      	b.n	8009914 <lv_clamp_width+0xb4>
 800990c:	887b      	ldrh	r3, [r7, #2]
 800990e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009912:	b21b      	sxth	r3, r3
 8009914:	fb02 f303 	mul.w	r3, r2, r3
 8009918:	4a0c      	ldr	r2, [pc, #48]	; (800994c <lv_clamp_width+0xec>)
 800991a:	fb82 1203 	smull	r1, r2, r2, r3
 800991e:	1152      	asrs	r2, r2, #5
 8009920:	17db      	asrs	r3, r3, #31
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_width, width, max_width);
 8009926:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800992a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800992e:	4293      	cmp	r3, r2
 8009930:	bfa8      	it	ge
 8009932:	4613      	movge	r3, r2
 8009934:	b21b      	sxth	r3, r3
 8009936:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800993a:	4293      	cmp	r3, r2
 800993c:	bfb8      	it	lt
 800993e:	4613      	movlt	r3, r2
 8009940:	b21b      	sxth	r3, r3
}
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bc90      	pop	{r4, r7}
 800994a:	4770      	bx	lr
 800994c:	51eb851f 	.word	0x51eb851f

08009950 <lv_clamp_height>:

lv_coord_t lv_clamp_height(lv_coord_t height, lv_coord_t min_height, lv_coord_t max_height, lv_coord_t ref_height)
{
 8009950:	b490      	push	{r4, r7}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	4611      	mov	r1, r2
 800995c:	461a      	mov	r2, r3
 800995e:	4623      	mov	r3, r4
 8009960:	80fb      	strh	r3, [r7, #6]
 8009962:	4603      	mov	r3, r0
 8009964:	80bb      	strh	r3, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	807b      	strh	r3, [r7, #2]
 800996a:	4613      	mov	r3, r2
 800996c:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 800996e:	88bb      	ldrh	r3, [r7, #4]
 8009970:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009978:	d123      	bne.n	80099c2 <lv_clamp_height+0x72>
 800997a:	88bb      	ldrh	r3, [r7, #4]
 800997c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009980:	b21b      	sxth	r3, r3
 8009982:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009986:	dc1c      	bgt.n	80099c2 <lv_clamp_height+0x72>
 8009988:	f9b7 2000 	ldrsh.w	r2, [r7]
 800998c:	88bb      	ldrh	r3, [r7, #4]
 800998e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009992:	b21b      	sxth	r3, r3
 8009994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009998:	dd06      	ble.n	80099a8 <lv_clamp_height+0x58>
 800999a:	88bb      	ldrh	r3, [r7, #4]
 800999c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80099a0:	b21b      	sxth	r3, r3
 80099a2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80099a6:	e003      	b.n	80099b0 <lv_clamp_height+0x60>
 80099a8:	88bb      	ldrh	r3, [r7, #4]
 80099aa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80099ae:	b21b      	sxth	r3, r3
 80099b0:	fb02 f303 	mul.w	r3, r2, r3
 80099b4:	4a21      	ldr	r2, [pc, #132]	; (8009a3c <lv_clamp_height+0xec>)
 80099b6:	fb82 1203 	smull	r1, r2, r2, r3
 80099ba:	1152      	asrs	r2, r2, #5
 80099bc:	17db      	asrs	r3, r3, #31
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 80099c2:	887b      	ldrh	r3, [r7, #2]
 80099c4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80099c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099cc:	d123      	bne.n	8009a16 <lv_clamp_height+0xc6>
 80099ce:	887b      	ldrh	r3, [r7, #2]
 80099d0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80099d4:	b21b      	sxth	r3, r3
 80099d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80099da:	dc1c      	bgt.n	8009a16 <lv_clamp_height+0xc6>
 80099dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80099e0:	887b      	ldrh	r3, [r7, #2]
 80099e2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80099e6:	b21b      	sxth	r3, r3
 80099e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099ec:	dd06      	ble.n	80099fc <lv_clamp_height+0xac>
 80099ee:	887b      	ldrh	r3, [r7, #2]
 80099f0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80099f4:	b21b      	sxth	r3, r3
 80099f6:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80099fa:	e003      	b.n	8009a04 <lv_clamp_height+0xb4>
 80099fc:	887b      	ldrh	r3, [r7, #2]
 80099fe:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009a02:	b21b      	sxth	r3, r3
 8009a04:	fb02 f303 	mul.w	r3, r2, r3
 8009a08:	4a0c      	ldr	r2, [pc, #48]	; (8009a3c <lv_clamp_height+0xec>)
 8009a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8009a0e:	1152      	asrs	r2, r2, #5
 8009a10:	17db      	asrs	r3, r3, #31
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_height, height, max_height);
 8009a16:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	bfa8      	it	ge
 8009a22:	4613      	movge	r3, r2
 8009a24:	b21b      	sxth	r3, r3
 8009a26:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	bfb8      	it	lt
 8009a2e:	4613      	movlt	r3, r2
 8009a30:	b21b      	sxth	r3, r3
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc90      	pop	{r4, r7}
 8009a3a:	4770      	bx	lr
 8009a3c:	51eb851f 	.word	0x51eb851f

08009a40 <calc_content_width>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
 8009a40:	b590      	push	{r4, r7, lr}
 8009a42:	b08d      	sub	sp, #52	; 0x34
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8009a48:	2200      	movs	r2, #0
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 f923 	bl	800ac98 <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009a52:	2100      	movs	r1, #0
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7fe fcd8 	bl	800840a <lv_obj_get_style_border_width>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8009a5e:	2100      	movs	r1, #0
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7fe fcc0 	bl	80083e6 <lv_obj_get_style_pad_right>
 8009a66:	4603      	mov	r3, r0
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a6c:	4413      	add	r3, r2
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8009a72:	2100      	movs	r1, #0
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fe fca4 	bl	80083c2 <lv_obj_get_style_pad_left>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a80:	4413      	add	r3, r2
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff f8f0 	bl	8008c6c <lv_obj_get_self_width>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a92:	4413      	add	r3, r2
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a98:	4413      	add	r3, r2
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	843b      	strh	r3, [r7, #32]

    lv_coord_t child_res = LV_COORD_MIN;
 8009a9e:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009aa2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f004 fa73 	bl	800df90 <lv_obj_get_child_cnt>
 8009aaa:	61f8      	str	r0, [r7, #28]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8009aac:	2100      	movs	r1, #0
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fe fccf 	bl	8008452 <lv_obj_get_style_base_dir>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	f040 8094 	bne.w	8009be4 <calc_content_width+0x1a4>
        for(i = 0; i < child_cnt; i++) {
 8009abc:	2300      	movs	r3, #0
 8009abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ac0:	e07f      	b.n	8009bc2 <calc_content_width+0x182>
            lv_obj_t * child = obj->spec_attr->children[i];
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	613b      	str	r3, [r7, #16]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009ad2:	4994      	ldr	r1, [pc, #592]	; (8009d24 <calc_content_width+0x2e4>)
 8009ad4:	6938      	ldr	r0, [r7, #16]
 8009ad6:	f7fc f9fb 	bl	8005ed0 <lv_obj_has_flag_any>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d16c      	bne.n	8009bba <calc_content_width+0x17a>

            if(!lv_obj_is_layout_positioned(child)) {
 8009ae0:	6938      	ldr	r0, [r7, #16]
 8009ae2:	f7fe ff67 	bl	80089b4 <lv_obj_is_layout_positioned>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f083 0301 	eor.w	r3, r3, #1
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d053      	beq.n	8009b9a <calc_content_width+0x15a>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 8009af2:	2100      	movs	r1, #0
 8009af4:	6938      	ldr	r0, [r7, #16]
 8009af6:	f7fe fbc2 	bl	800827e <lv_obj_get_style_align>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]
                switch(align) {
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	2b08      	cmp	r3, #8
 8009b02:	d825      	bhi.n	8009b50 <calc_content_width+0x110>
 8009b04:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <calc_content_width+0xcc>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b31 	.word	0x08009b31
 8009b10:	08009b51 	.word	0x08009b51
 8009b14:	08009b51 	.word	0x08009b51
 8009b18:	08009b31 	.word	0x08009b31
 8009b1c:	08009b51 	.word	0x08009b51
 8009b20:	08009b51 	.word	0x08009b51
 8009b24:	08009b31 	.word	0x08009b31
 8009b28:	08009b51 	.word	0x08009b51
 8009b2c:	08009b31 	.word	0x08009b31
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_RIGHT:
                    case LV_ALIGN_BOTTOM_RIGHT:
                    case LV_ALIGN_RIGHT_MID:
                        /*Normal right aligns. Other are ignored due to possible circular dependencies*/
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009b36:	461a      	mov	r2, r3
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009b46:	4293      	cmp	r3, r2
 8009b48:	bfb8      	it	lt
 8009b4a:	4613      	movlt	r3, r2
 8009b4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8009b4e:	e035      	b.n	8009bbc <calc_content_width+0x17c>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8009b50:	2100      	movs	r1, #0
 8009b52:	6938      	ldr	r0, [r7, #16]
 8009b54:	f7fe fb6f 	bl	8008236 <lv_obj_get_style_x>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d12e      	bne.n	8009bbc <calc_content_width+0x17c>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8009b5e:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	3314      	adds	r3, #20
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe facb 	bl	8008102 <lv_area_get_width>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	461a      	mov	r2, r3
 8009b70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009b74:	4413      	add	r3, r2
 8009b76:	429c      	cmp	r4, r3
 8009b78:	dc0b      	bgt.n	8009b92 <calc_content_width+0x152>
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	3314      	adds	r3, #20
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fabf 	bl	8008102 <lv_area_get_width>
 8009b84:	4603      	mov	r3, r0
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b8a:	4413      	add	r3, r2
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	b21b      	sxth	r3, r3
 8009b90:	e001      	b.n	8009b96 <calc_content_width+0x156>
 8009b92:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009b96:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009b98:	e010      	b.n	8009bbc <calc_content_width+0x17c>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	bfb8      	it	lt
 8009bb4:	4613      	movlt	r3, r2
 8009bb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009bb8:	e000      	b.n	8009bbc <calc_content_width+0x17c>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009bba:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	f4ff af7b 	bcc.w	8009ac2 <calc_content_width+0x82>
            }
        }
        if(child_res != LV_COORD_MIN) {
 8009bcc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009bd0:	4a55      	ldr	r2, [pc, #340]	; (8009d28 <calc_content_width+0x2e8>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	f000 8092 	beq.w	8009cfc <calc_content_width+0x2bc>
            child_res += pad_left;
 8009bd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bdc:	4413      	add	r3, r2
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009be2:	e08b      	b.n	8009cfc <calc_content_width+0x2bc>
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 8009be4:	2300      	movs	r3, #0
 8009be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009be8:	e07a      	b.n	8009ce0 <calc_content_width+0x2a0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	61bb      	str	r3, [r7, #24]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009bfa:	494a      	ldr	r1, [pc, #296]	; (8009d24 <calc_content_width+0x2e4>)
 8009bfc:	69b8      	ldr	r0, [r7, #24]
 8009bfe:	f7fc f967 	bl	8005ed0 <lv_obj_has_flag_any>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d167      	bne.n	8009cd8 <calc_content_width+0x298>

            if(!lv_obj_is_layout_positioned(child)) {
 8009c08:	69b8      	ldr	r0, [r7, #24]
 8009c0a:	f7fe fed3 	bl	80089b4 <lv_obj_is_layout_positioned>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	f083 0301 	eor.w	r3, r3, #1
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d04e      	beq.n	8009cb8 <calc_content_width+0x278>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	69b8      	ldr	r0, [r7, #24]
 8009c1e:	f7fe fb2e 	bl	800827e <lv_obj_get_style_align>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]
                switch(align) {
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	2b07      	cmp	r3, #7
 8009c2a:	bf8c      	ite	hi
 8009c2c:	2201      	movhi	r2, #1
 8009c2e:	2200      	movls	r2, #0
 8009c30:	b2d2      	uxtb	r2, r2
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	d11b      	bne.n	8009c6e <calc_content_width+0x22e>
 8009c36:	2201      	movs	r2, #1
 8009c38:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3c:	f003 0393 	and.w	r3, r3, #147	; 0x93
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	bf14      	ite	ne
 8009c44:	2301      	movne	r3, #1
 8009c46:	2300      	moveq	r3, #0
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00f      	beq.n	8009c6e <calc_content_width+0x22e>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009c54:	461a      	mov	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009c64:	4293      	cmp	r3, r2
 8009c66:	bfb8      	it	lt
 8009c68:	4613      	movlt	r3, r2
 8009c6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8009c6c:	e035      	b.n	8009cda <calc_content_width+0x29a>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8009c6e:	2100      	movs	r1, #0
 8009c70:	69b8      	ldr	r0, [r7, #24]
 8009c72:	f7fe faf2 	bl	800825a <lv_obj_get_style_y>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d12e      	bne.n	8009cda <calc_content_width+0x29a>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8009c7c:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	3314      	adds	r3, #20
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe fa3c 	bl	8008102 <lv_area_get_width>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009c92:	4413      	add	r3, r2
 8009c94:	429c      	cmp	r4, r3
 8009c96:	dc0b      	bgt.n	8009cb0 <calc_content_width+0x270>
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	3314      	adds	r3, #20
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe fa30 	bl	8008102 <lv_area_get_width>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ca8:	4413      	add	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	b21b      	sxth	r3, r3
 8009cae:	e001      	b.n	8009cb4 <calc_content_width+0x274>
 8009cb0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009cb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009cb6:	e010      	b.n	8009cda <calc_content_width+0x29a>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bfb8      	it	lt
 8009cd2:	4613      	movlt	r3, r2
 8009cd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009cd6:	e000      	b.n	8009cda <calc_content_width+0x29a>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009cd8:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	3301      	adds	r3, #1
 8009cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d380      	bcc.n	8009bea <calc_content_width+0x1aa>
            }
        }

        if(child_res != LV_COORD_MIN) {
 8009ce8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009cec:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <calc_content_width+0x2e8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <calc_content_width+0x2bc>
            child_res += pad_right;
 8009cf2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cf6:	4413      	add	r3, r2
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 8009cfc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009d00:	4a09      	ldr	r2, [pc, #36]	; (8009d28 <calc_content_width+0x2e8>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d102      	bne.n	8009d0c <calc_content_width+0x2cc>
 8009d06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009d0a:	e007      	b.n	8009d1c <calc_content_width+0x2dc>
    else return LV_MAX(child_res, self_w);
 8009d0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009d10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009d14:	4293      	cmp	r3, r2
 8009d16:	bfb8      	it	lt
 8009d18:	4613      	movlt	r3, r2
 8009d1a:	b21b      	sxth	r3, r3
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3734      	adds	r7, #52	; 0x34
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd90      	pop	{r4, r7, pc}
 8009d24:	00040001 	.word	0x00040001
 8009d28:	ffffe001 	.word	0xffffe001

08009d2c <calc_content_height>:

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
 8009d2c:	b590      	push	{r4, r7, lr}
 8009d2e:	b08b      	sub	sp, #44	; 0x2c
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8009d34:	2200      	movs	r2, #0
 8009d36:	2100      	movs	r1, #0
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 ffd1 	bl	800ace0 <lv_obj_scroll_to_y>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009d3e:	2100      	movs	r1, #0
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7fe fb62 	bl	800840a <lv_obj_get_style_border_width>
 8009d46:	4603      	mov	r3, r0
 8009d48:	83fb      	strh	r3, [r7, #30]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7fe fb14 	bl	800837a <lv_obj_get_style_pad_top>
 8009d52:	4603      	mov	r3, r0
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	8bfb      	ldrh	r3, [r7, #30]
 8009d58:	4413      	add	r3, r2
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8009d5e:	2100      	movs	r1, #0
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7fe fb1c 	bl	800839e <lv_obj_get_style_pad_bottom>
 8009d66:	4603      	mov	r3, r0
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	8bfb      	ldrh	r3, [r7, #30]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	837b      	strh	r3, [r7, #26]

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7fe ff90 	bl	8008c98 <lv_obj_get_self_height>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	8bbb      	ldrh	r3, [r7, #28]
 8009d7e:	4413      	add	r3, r2
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	8b7b      	ldrh	r3, [r7, #26]
 8009d84:	4413      	add	r3, r2
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = LV_COORD_MIN;
 8009d8a:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009d8e:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f004 f8fd 	bl	800df90 <lv_obj_get_child_cnt>
 8009d96:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 8009d98:	2300      	movs	r3, #0
 8009d9a:	623b      	str	r3, [r7, #32]
 8009d9c:	e06b      	b.n	8009e76 <calc_content_height+0x14a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	613b      	str	r3, [r7, #16]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009dae:	4940      	ldr	r1, [pc, #256]	; (8009eb0 <calc_content_height+0x184>)
 8009db0:	6938      	ldr	r0, [r7, #16]
 8009db2:	f7fc f88d 	bl	8005ed0 <lv_obj_has_flag_any>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d156      	bne.n	8009e6a <calc_content_height+0x13e>


        if(!lv_obj_is_layout_positioned(child)) {
 8009dbc:	6938      	ldr	r0, [r7, #16]
 8009dbe:	f7fe fdf9 	bl	80089b4 <lv_obj_is_layout_positioned>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f083 0301 	eor.w	r3, r3, #1
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d03d      	beq.n	8009e4a <calc_content_height+0x11e>
            lv_align_t align = lv_obj_get_style_align(child, 0);
 8009dce:	2100      	movs	r1, #0
 8009dd0:	6938      	ldr	r0, [r7, #16]
 8009dd2:	f7fe fa54 	bl	800827e <lv_obj_get_style_align>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
            switch(align) {
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d80f      	bhi.n	8009e00 <calc_content_height+0xd4>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009de6:	461a      	mov	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009df6:	4293      	cmp	r3, r2
 8009df8:	bfb8      	it	lt
 8009dfa:	4613      	movlt	r3, r2
 8009dfc:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 8009dfe:	e037      	b.n	8009e70 <calc_content_height+0x144>
                default:
                    /* Consider other cases only if y=0 and use the height of the object.
                     * With y!=0 circular dependency could occur. */
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8009e00:	2100      	movs	r1, #0
 8009e02:	6938      	ldr	r0, [r7, #16]
 8009e04:	f7fe fa29 	bl	800825a <lv_obj_get_style_y>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d12f      	bne.n	8009e6e <calc_content_height+0x142>
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 8009e0e:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	3314      	adds	r3, #20
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe f98a 	bl	8008130 <lv_area_get_height>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009e24:	4413      	add	r3, r2
 8009e26:	429c      	cmp	r4, r3
 8009e28:	dc0b      	bgt.n	8009e42 <calc_content_height+0x116>
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	3314      	adds	r3, #20
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe f97e 	bl	8008130 <lv_area_get_height>
 8009e34:	4603      	mov	r3, r0
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	8bbb      	ldrh	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	b21b      	sxth	r3, r3
 8009e40:	e001      	b.n	8009e46 <calc_content_height+0x11a>
 8009e42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009e46:	84fb      	strh	r3, [r7, #38]	; 0x26
                    }
                    break;
 8009e48:	e011      	b.n	8009e6e <calc_content_height+0x142>
            }
        }
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009e50:	461a      	mov	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009e60:	4293      	cmp	r3, r2
 8009e62:	bfb8      	it	lt
 8009e64:	4613      	movlt	r3, r2
 8009e66:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009e68:	e002      	b.n	8009e70 <calc_content_height+0x144>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009e6a:	bf00      	nop
 8009e6c:	e000      	b.n	8009e70 <calc_content_height+0x144>
                    break;
 8009e6e:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	3301      	adds	r3, #1
 8009e74:	623b      	str	r3, [r7, #32]
 8009e76:	6a3a      	ldr	r2, [r7, #32]
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d38f      	bcc.n	8009d9e <calc_content_height+0x72>
        }
    }

    if(child_res != LV_COORD_MIN) {
 8009e7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009e82:	4a0c      	ldr	r2, [pc, #48]	; (8009eb4 <calc_content_height+0x188>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00d      	beq.n	8009ea4 <calc_content_height+0x178>
        child_res += pad_bottom;
 8009e88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e8a:	8b7b      	ldrh	r3, [r7, #26]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	84fb      	strh	r3, [r7, #38]	; 0x26
        return LV_MAX(child_res, self_h);
 8009e92:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009e96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	bfb8      	it	lt
 8009e9e:	4613      	movlt	r3, r2
 8009ea0:	b21b      	sxth	r3, r3
 8009ea2:	e001      	b.n	8009ea8 <calc_content_height+0x17c>
    }
    else {
        return self_h;
 8009ea4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    }

}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	372c      	adds	r7, #44	; 0x2c
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd90      	pop	{r4, r7, pc}
 8009eb0:	00040001 	.word	0x00040001
 8009eb4:	ffffe001 	.word	0xffffe001

08009eb8 <layout_update_core>:

static void layout_update_core(lv_obj_t * obj)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f004 f865 	bl	800df90 <lv_obj_get_child_cnt>
 8009ec6:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 8009ec8:	2300      	movs	r3, #0
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	e00d      	b.n	8009eea <layout_update_core+0x32>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60fb      	str	r3, [r7, #12]
        layout_update_core(child);
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff ffea 	bl	8009eb8 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	61fb      	str	r3, [r7, #28]
 8009eea:	69fa      	ldr	r2, [r7, #28]
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d3ed      	bcc.n	8009ece <layout_update_core+0x16>
    }

    if(obj->layout_inv == 0) return;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009ef8:	f003 0301 	and.w	r3, r3, #1
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d034      	beq.n	8009f6c <layout_update_core+0xb4>

    obj->layout_inv = 0;
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8009f08:	f36f 0300 	bfc	r3, #0, #1
 8009f0c:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    lv_obj_refr_size(obj);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7fe fb13 	bl	800853c <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7fe fefa 	bl	8008d10 <lv_obj_refr_pos>

    if(child_cnt > 0) {
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d025      	beq.n	8009f6e <layout_update_core+0xb6>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8009f22:	2100      	movs	r1, #0
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7fe fa82 	bl	800842e <lv_obj_get_style_layout>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	617b      	str	r3, [r7, #20]
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01c      	beq.n	8009f6e <layout_update_core+0xb6>
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <layout_update_core+0xbc>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d817      	bhi.n	8009f6e <layout_update_core+0xb6>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8009f3e:	4b0e      	ldr	r3, [pc, #56]	; (8009f78 <layout_update_core+0xc0>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	6979      	ldr	r1, [r7, #20]
 8009f44:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009f48:	440b      	add	r3, r1
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	4413      	add	r3, r2
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	613b      	str	r3, [r7, #16]
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <layout_update_core+0xc0>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	6979      	ldr	r1, [r7, #20]
 8009f58:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009f5c:	440b      	add	r3, r1
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	4413      	add	r3, r2
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6939      	ldr	r1, [r7, #16]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	4798      	blx	r3
 8009f6a:	e000      	b.n	8009f6e <layout_update_core+0xb6>
    if(obj->layout_inv == 0) return;
 8009f6c:	bf00      	nop
        }
    }
}
 8009f6e:	3720      	adds	r7, #32
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20000704 	.word	0x20000704
 8009f78:	200008ac 	.word	0x200008ac

08009f7c <transform_point>:

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 8009f7c:	b590      	push	{r4, r7, lr}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	4613      	mov	r3, r2
 8009f88:	71fb      	strb	r3, [r7, #7]
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7fe f9be 	bl	800830e <lv_obj_get_style_transform_angle>
 8009f92:	4603      	mov	r3, r0
 8009f94:	82fb      	strh	r3, [r7, #22]
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);
 8009f96:	2100      	movs	r1, #0
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7fe f9a6 	bl	80082ea <lv_obj_get_style_transform_zoom>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	82bb      	strh	r3, [r7, #20]

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 8009fa2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <transform_point+0x3a>
 8009faa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb2:	f000 80a6 	beq.w	800a102 <transform_point+0x186>

    lv_point_t pivot = {
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7fe f9ba 	bl	8008332 <lv_obj_get_style_transform_pivot_x>
 8009fbe:	4603      	mov	r3, r0
    lv_point_t pivot = {
 8009fc0:	823b      	strh	r3, [r7, #16]
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7fe f9c6 	bl	8008356 <lv_obj_get_style_transform_pivot_y>
 8009fca:	4603      	mov	r3, r0
    lv_point_t pivot = {
 8009fcc:	827b      	strh	r3, [r7, #18]
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 8009fce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fdc:	d12d      	bne.n	800a03a <transform_point+0xbe>
 8009fde:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009fe2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009fe6:	b21b      	sxth	r3, r3
 8009fe8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009fec:	dc25      	bgt.n	800a03a <transform_point+0xbe>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8009fee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009ff2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009ff6:	b21b      	sxth	r3, r3
 8009ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ffc:	dd07      	ble.n	800a00e <transform_point+0x92>
 8009ffe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a002:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a006:	b21b      	sxth	r3, r3
 800a008:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800a00c:	e005      	b.n	800a01a <transform_point+0x9e>
 800a00e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a012:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a016:	b21b      	sxth	r3, r3
 800a018:	461c      	mov	r4, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3314      	adds	r3, #20
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe f86f 	bl	8008102 <lv_area_get_width>
 800a024:	4603      	mov	r3, r0
 800a026:	fb04 f303 	mul.w	r3, r4, r3
 800a02a:	4a38      	ldr	r2, [pc, #224]	; (800a10c <transform_point+0x190>)
 800a02c:	fb82 1203 	smull	r1, r2, r2, r3
 800a030:	1152      	asrs	r2, r2, #5
 800a032:	17db      	asrs	r3, r3, #31
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	b21b      	sxth	r3, r3
 800a038:	823b      	strh	r3, [r7, #16]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 800a03a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a03e:	b29b      	uxth	r3, r3
 800a040:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a048:	d12d      	bne.n	800a0a6 <transform_point+0x12a>
 800a04a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a04e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a052:	b21b      	sxth	r3, r3
 800a054:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a058:	dc25      	bgt.n	800a0a6 <transform_point+0x12a>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800a05a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a05e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a062:	b21b      	sxth	r3, r3
 800a064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a068:	dd07      	ble.n	800a07a <transform_point+0xfe>
 800a06a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a06e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a072:	b21b      	sxth	r3, r3
 800a074:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800a078:	e005      	b.n	800a086 <transform_point+0x10a>
 800a07a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a07e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a082:	b21b      	sxth	r3, r3
 800a084:	461c      	mov	r4, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3314      	adds	r3, #20
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe f850 	bl	8008130 <lv_area_get_height>
 800a090:	4603      	mov	r3, r0
 800a092:	fb04 f303 	mul.w	r3, r4, r3
 800a096:	4a1d      	ldr	r2, [pc, #116]	; (800a10c <transform_point+0x190>)
 800a098:	fb82 1203 	smull	r1, r2, r2, r3
 800a09c:	1152      	asrs	r2, r2, #5
 800a09e:	17db      	asrs	r3, r3, #31
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	b21b      	sxth	r3, r3
 800a0a4:	827b      	strh	r3, [r7, #18]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	4413      	add	r3, r2
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	b21b      	sxth	r3, r3
 800a0ba:	823b      	strh	r3, [r7, #16]
    pivot.y = obj->coords.y1 + pivot.y;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	4413      	add	r3, r2
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	b21b      	sxth	r3, r3
 800a0d0:	827b      	strh	r3, [r7, #18]

    if(inv) {
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00a      	beq.n	800a0ee <transform_point+0x172>
        angle = -angle;
 800a0d8:	8afb      	ldrh	r3, [r7, #22]
 800a0da:	425b      	negs	r3, r3
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	82fb      	strh	r3, [r7, #22]
        zoom = (256 * 256) / zoom;
 800a0e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a0e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a0e8:	fb92 f3f3 	sdiv	r3, r2, r3
 800a0ec:	82bb      	strh	r3, [r7, #20]
    }

    lv_point_transform(p, angle, zoom, &pivot);
 800a0ee:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800a0f2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a0f6:	f107 0310 	add.w	r3, r7, #16
 800a0fa:	68b8      	ldr	r0, [r7, #8]
 800a0fc:	f016 fdea 	bl	8020cd4 <lv_point_transform>
 800a100:	e000      	b.n	800a104 <transform_point+0x188>
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800a102:	bf00      	nop
}
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	bd90      	pop	{r4, r7, pc}
 800a10a:	bf00      	nop
 800a10c:	51eb851f 	.word	0x51eb851f

0800a110 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a11e:	b29a      	uxth	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a126:	b29b      	uxth	r3, r3
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3301      	adds	r3, #1
 800a12e:	b29b      	uxth	r3, r3
 800a130:	b21b      	sxth	r3, r3
}
 800a132:	4618      	mov	r0, r3
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a154:	b29b      	uxth	r3, r3
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	b29b      	uxth	r3, r3
 800a15a:	3301      	adds	r3, #1
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	b21b      	sxth	r3, r3
}
 800a160:	4618      	mov	r0, r3
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
    a->var = var;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	601a      	str	r2, [r3, #0]
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	605a      	str	r2, [r3, #4]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a1de:	bf00      	nop
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <lv_anim_set_path_cb>:
 * Set the path (curve) of the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function to set the current value of the animation.
 */
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	61da      	str	r2, [r3, #28]
}
 800a1fa:	bf00      	nop
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	60da      	str	r2, [r3, #12]
}
 800a216:	bf00      	nop
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <lv_obj_get_style_width>:
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800a22c:	2201      	movs	r2, #1
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f002 fb5d 	bl	800c8f0 <lv_obj_get_style_prop>
 800a236:	4603      	mov	r3, r0
 800a238:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	b21b      	sxth	r3, r3
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <lv_obj_get_style_pad_top>:
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a250:	2210      	movs	r2, #16
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f002 fb4b 	bl	800c8f0 <lv_obj_get_style_prop>
 800a25a:	4603      	mov	r3, r0
 800a25c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	b21b      	sxth	r3, r3
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <lv_obj_get_style_pad_bottom>:
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b084      	sub	sp, #16
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a274:	2211      	movs	r2, #17
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f002 fb39 	bl	800c8f0 <lv_obj_get_style_prop>
 800a27e:	4603      	mov	r3, r0
 800a280:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	b21b      	sxth	r3, r3
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <lv_obj_get_style_pad_left>:
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a298:	2212      	movs	r2, #18
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f002 fb27 	bl	800c8f0 <lv_obj_get_style_prop>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	b21b      	sxth	r3, r3
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <lv_obj_get_style_pad_right>:
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a2bc:	2213      	movs	r2, #19
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f002 fb15 	bl	800c8f0 <lv_obj_get_style_prop>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	b21b      	sxth	r3, r3
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <lv_obj_get_style_bg_opa>:
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b084      	sub	sp, #16
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800a2e0:	2221      	movs	r2, #33	; 0x21
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f002 fb03 	bl	800c8f0 <lv_obj_get_style_prop>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	b2db      	uxtb	r3, r3
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <lv_obj_get_style_border_opa>:
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800a304:	2231      	movs	r2, #49	; 0x31
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f002 faf1 	bl	800c8f0 <lv_obj_get_style_prop>
 800a30e:	4603      	mov	r3, r0
 800a310:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	b2db      	uxtb	r3, r3
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <lv_obj_get_style_border_width>:
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b084      	sub	sp, #16
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a328:	2232      	movs	r2, #50	; 0x32
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f002 fadf 	bl	800c8f0 <lv_obj_get_style_prop>
 800a332:	4603      	mov	r3, r0
 800a334:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	b21b      	sxth	r3, r3
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <lv_obj_get_style_base_dir>:
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a34c:	2216      	movs	r2, #22
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f002 facd 	bl	800c8f0 <lv_obj_get_style_prop>
 800a356:	4603      	mov	r3, r0
 800a358:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	b2db      	uxtb	r3, r3
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <lv_obj_set_scrollbar_mode>:
/*=====================
 * Setter functions
 *====================*/

void lv_obj_set_scrollbar_mode(lv_obj_t * obj, lv_scrollbar_mode_t mode)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	460b      	mov	r3, r1
 800a370:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7fb fde0 	bl	8005f38 <lv_obj_allocate_spec_attr>

    if(obj->spec_attr->scrollbar_mode == mode) return;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	7e1b      	ldrb	r3, [r3, #24]
 800a37e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a382:	b2db      	uxtb	r3, r3
 800a384:	461a      	mov	r2, r3
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d00d      	beq.n	800a3a8 <lv_obj_set_scrollbar_mode+0x42>
    obj->spec_attr->scrollbar_mode = mode;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	f003 0303 	and.w	r3, r3, #3
 800a396:	b2d9      	uxtb	r1, r3
 800a398:	7e13      	ldrb	r3, [r2, #24]
 800a39a:	f361 0301 	bfi	r3, r1, #0, #2
 800a39e:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff f95c 	bl	800965e <lv_obj_invalidate>
 800a3a6:	e000      	b.n	800a3aa <lv_obj_set_scrollbar_mode+0x44>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 800a3a8:	bf00      	nop
}
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <lv_obj_get_scrollbar_mode>:
/*=====================
 * Getter functions
 *====================*/

lv_scrollbar_mode_t lv_obj_get_scrollbar_mode(const lv_obj_t * obj)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d006      	beq.n	800a3ce <lv_obj_get_scrollbar_mode+0x1e>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	7e1b      	ldrb	r3, [r3, #24]
 800a3c6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	e000      	b.n	800a3d0 <lv_obj_get_scrollbar_mode+0x20>
    else return LV_SCROLLBAR_MODE_AUTO;
 800a3ce:	2303      	movs	r3, #3
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <lv_obj_get_scroll_dir>:

lv_dir_t lv_obj_get_scroll_dir(const lv_obj_t * obj)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d006      	beq.n	800a3fa <lv_obj_get_scroll_dir+0x1e>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	7e5b      	ldrb	r3, [r3, #25]
 800a3f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	e000      	b.n	800a3fc <lv_obj_get_scroll_dir+0x20>
    else return LV_DIR_ALL;
 800a3fa:	230f      	movs	r3, #15
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <lv_obj_get_scroll_snap_x>:

lv_scroll_snap_t lv_obj_get_scroll_snap_x(const lv_obj_t * obj)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d006      	beq.n	800a426 <lv_obj_get_scroll_snap_x+0x1e>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	7e1b      	ldrb	r3, [r3, #24]
 800a41e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a422:	b2db      	uxtb	r3, r3
 800a424:	e000      	b.n	800a428 <lv_obj_get_scroll_snap_x+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <lv_obj_get_scroll_snap_y>:

lv_scroll_snap_t lv_obj_get_scroll_snap_y(const lv_obj_t * obj)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d006      	beq.n	800a452 <lv_obj_get_scroll_snap_y+0x1e>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	7e1b      	ldrb	r3, [r3, #24]
 800a44a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	e000      	b.n	800a454 <lv_obj_get_scroll_snap_y+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <lv_obj_get_scroll_x>:

lv_coord_t lv_obj_get_scroll_x(const lv_obj_t * obj)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <lv_obj_get_scroll_x+0x14>
 800a470:	2300      	movs	r3, #0
 800a472:	e007      	b.n	800a484 <lv_obj_get_scroll_x+0x24>
    return -obj->spec_attr->scroll.x;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	425b      	negs	r3, r3
 800a480:	b29b      	uxth	r3, r3
 800a482:	b21b      	sxth	r3, r3
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <lv_obj_get_scroll_y>:

lv_coord_t lv_obj_get_scroll_y(const lv_obj_t * obj)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <lv_obj_get_scroll_y+0x14>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e007      	b.n	800a4b4 <lv_obj_get_scroll_y+0x24>
    return -obj->spec_attr->scroll.y;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	425b      	negs	r3, r3
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	b21b      	sxth	r3, r3
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <lv_obj_get_scroll_top>:

lv_coord_t lv_obj_get_scroll_top(lv_obj_t * obj)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <lv_obj_get_scroll_top+0x14>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e007      	b.n	800a4e4 <lv_obj_get_scroll_top+0x24>
    return -obj->spec_attr->scroll.y;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	425b      	negs	r3, r3
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	b21b      	sxth	r3, r3
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <lv_obj_get_scroll_bottom>:

lv_coord_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 800a4f0:	b5b0      	push	{r4, r5, r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t child_res = LV_COORD_MIN;
 800a4f8:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a4fc:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f003 fd46 	bl	800df90 <lv_obj_get_child_cnt>
 800a504:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a506:	2300      	movs	r3, #0
 800a508:	61bb      	str	r3, [r7, #24]
 800a50a:	e01c      	b.n	800a546 <lv_obj_get_scroll_bottom+0x56>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a51c:	4935      	ldr	r1, [pc, #212]	; (800a5f4 <lv_obj_get_scroll_bottom+0x104>)
 800a51e:	68b8      	ldr	r0, [r7, #8]
 800a520:	f7fb fcd6 	bl	8005ed0 <lv_obj_has_flag_any>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d109      	bne.n	800a53e <lv_obj_get_scroll_bottom+0x4e>
        child_res = LV_MAX(child_res, child->coords.y2);
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a530:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a534:	4293      	cmp	r3, r2
 800a536:	bfb8      	it	lt
 800a538:	4613      	movlt	r3, r2
 800a53a:	83fb      	strh	r3, [r7, #30]
 800a53c:	e000      	b.n	800a540 <lv_obj_get_scroll_bottom+0x50>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a53e:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	3301      	adds	r3, #1
 800a544:	61bb      	str	r3, [r7, #24]
 800a546:	69ba      	ldr	r2, [r7, #24]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d3de      	bcc.n	800a50c <lv_obj_get_scroll_bottom+0x1c>
    }

    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800a54e:	2100      	movs	r1, #0
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff fe78 	bl	800a246 <lv_obj_get_style_pad_top>
 800a556:	4603      	mov	r3, r0
 800a558:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 800a55a:	2100      	movs	r1, #0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7ff fe84 	bl	800a26a <lv_obj_get_style_pad_bottom>
 800a562:	4603      	mov	r3, r0
 800a564:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800a566:	2100      	movs	r1, #0
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff fed8 	bl	800a31e <lv_obj_get_style_border_width>
 800a56e:	4603      	mov	r3, r0
 800a570:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800a572:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a576:	4a20      	ldr	r2, [pc, #128]	; (800a5f8 <lv_obj_get_scroll_bottom+0x108>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00d      	beq.n	800a598 <lv_obj_get_scroll_bottom+0xa8>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 800a57c:	8a3a      	ldrh	r2, [r7, #16]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a584:	b29b      	uxth	r3, r3
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	b29a      	uxth	r2, r3
 800a58a:	89fb      	ldrh	r3, [r7, #14]
 800a58c:	4413      	add	r3, r2
 800a58e:	b29a      	uxth	r2, r3
 800a590:	8bfb      	ldrh	r3, [r7, #30]
 800a592:	4413      	add	r3, r2
 800a594:	b29b      	uxth	r3, r3
 800a596:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_h = lv_obj_get_self_height(obj);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7fe fb7d 	bl	8008c98 <lv_obj_get_self_height>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	81bb      	strh	r3, [r7, #12]
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800a5a2:	89fb      	ldrh	r3, [r7, #14]
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	b29c      	uxth	r4, r3
 800a5a8:	8a7d      	ldrh	r5, [r7, #18]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7fe fa9b 	bl	8008ae6 <lv_obj_get_height>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	1aeb      	subs	r3, r5, r3
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	8a3b      	ldrh	r3, [r7, #16]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	4423      	add	r3, r4
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	89bb      	ldrh	r3, [r7, #12]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	81bb      	strh	r3, [r7, #12]
    self_h -= lv_obj_get_scroll_y(obj);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7ff ff60 	bl	800a490 <lv_obj_get_scroll_y>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	89ba      	ldrh	r2, [r7, #12]
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_h);
 800a5dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a5e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	bfb8      	it	lt
 800a5e8:	4613      	movlt	r3, r2
 800a5ea:	b21b      	sxth	r3, r3
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3720      	adds	r7, #32
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f4:	00040001 	.word	0x00040001
 800a5f8:	ffffe001 	.word	0xffffe001

0800a5fc <lv_obj_get_scroll_left>:

lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 800a5fc:	b5b0      	push	{r4, r5, r7, lr}
 800a5fe:	b08a      	sub	sp, #40	; 0x28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800a604:	2100      	movs	r1, #0
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7ff fe9b 	bl	800a342 <lv_obj_get_style_base_dir>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d00e      	beq.n	800a630 <lv_obj_get_scroll_left+0x34>
        if(obj->spec_attr == NULL) return 0;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <lv_obj_get_scroll_left+0x22>
 800a61a:	2300      	movs	r3, #0
 800a61c:	e08b      	b.n	800a736 <lv_obj_get_scroll_left+0x13a>
        return -obj->spec_attr->scroll.x;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a626:	b29b      	uxth	r3, r3
 800a628:	425b      	negs	r3, r3
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	b21b      	sxth	r3, r3
 800a62e:	e082      	b.n	800a736 <lv_obj_get_scroll_left+0x13a>
    }

    /*With RTL base direction scrolling the left is normal so find the left most coordinate*/
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800a630:	2100      	movs	r1, #0
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff fe3d 	bl	800a2b2 <lv_obj_get_style_pad_right>
 800a638:	4603      	mov	r3, r0
 800a63a:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800a63c:	2100      	movs	r1, #0
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff fe25 	bl	800a28e <lv_obj_get_style_pad_left>
 800a644:	4603      	mov	r3, r0
 800a646:	837b      	strh	r3, [r7, #26]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800a648:	2100      	movs	r1, #0
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff fe67 	bl	800a31e <lv_obj_get_style_border_width>
 800a650:	4603      	mov	r3, r0
 800a652:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint32_t i;
    lv_coord_t x1 = LV_COORD_MAX;
 800a658:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800a65c:	83fb      	strh	r3, [r7, #30]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f003 fc96 	bl	800df90 <lv_obj_get_child_cnt>
 800a664:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a666:	2300      	movs	r3, #0
 800a668:	623b      	str	r3, [r7, #32]
 800a66a:	e01c      	b.n	800a6a6 <lv_obj_get_scroll_left+0xaa>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a67c:	4930      	ldr	r1, [pc, #192]	; (800a740 <lv_obj_get_scroll_left+0x144>)
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7fb fc26 	bl	8005ed0 <lv_obj_has_flag_any>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <lv_obj_get_scroll_left+0xa2>
        x1 = LV_MIN(x1, child->coords.x1);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a690:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a694:	4293      	cmp	r3, r2
 800a696:	bfa8      	it	ge
 800a698:	4613      	movge	r3, r2
 800a69a:	83fb      	strh	r3, [r7, #30]
 800a69c:	e000      	b.n	800a6a0 <lv_obj_get_scroll_left+0xa4>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a69e:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	623b      	str	r3, [r7, #32]
 800a6a6:	6a3a      	ldr	r2, [r7, #32]
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d3de      	bcc.n	800a66c <lv_obj_get_scroll_left+0x70>

    }

    if(x1 != LV_COORD_MAX) {
 800a6ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a6b2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d010      	beq.n	800a6dc <lv_obj_get_scroll_left+0xe0>
        child_res = x1;
 800a6ba:	8bfb      	ldrh	r3, [r7, #30]
 800a6bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	8b7b      	ldrh	r3, [r7, #26]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	8b3b      	ldrh	r3, [r7, #24]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a6da:	e002      	b.n	800a6e2 <lv_obj_get_scroll_left+0xe6>
    }
    else {
        child_res = LV_COORD_MIN;
 800a6dc:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a6e0:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7fe fac2 	bl	8008c6c <lv_obj_get_self_width>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	827b      	strh	r3, [r7, #18]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a6ec:	8b3b      	ldrh	r3, [r7, #24]
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	b29c      	uxth	r4, r3
 800a6f2:	8bbd      	ldrh	r5, [r7, #28]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7fe f9e8 	bl	8008aca <lv_obj_get_width>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	1aeb      	subs	r3, r5, r3
 800a700:	b29a      	uxth	r2, r3
 800a702:	8b7b      	ldrh	r3, [r7, #26]
 800a704:	4413      	add	r3, r2
 800a706:	b29b      	uxth	r3, r3
 800a708:	4423      	add	r3, r4
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	8a7b      	ldrh	r3, [r7, #18]
 800a70e:	4413      	add	r3, r2
 800a710:	b29b      	uxth	r3, r3
 800a712:	827b      	strh	r3, [r7, #18]
    self_w += lv_obj_get_scroll_x(obj);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff fea3 	bl	800a460 <lv_obj_get_scroll_x>
 800a71a:	4603      	mov	r3, r0
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	8a7b      	ldrh	r3, [r7, #18]
 800a720:	4413      	add	r3, r2
 800a722:	b29b      	uxth	r3, r3
 800a724:	827b      	strh	r3, [r7, #18]

    return LV_MAX(child_res, self_w);
 800a726:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a72a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a72e:	4293      	cmp	r3, r2
 800a730:	bfb8      	it	lt
 800a732:	4613      	movlt	r3, r2
 800a734:	b21b      	sxth	r3, r3
}
 800a736:	4618      	mov	r0, r3
 800a738:	3728      	adds	r7, #40	; 0x28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bdb0      	pop	{r4, r5, r7, pc}
 800a73e:	bf00      	nop
 800a740:	00040001 	.word	0x00040001

0800a744 <lv_obj_get_scroll_right>:

lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 800a744:	b5b0      	push	{r4, r5, r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800a74c:	2100      	movs	r1, #0
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff fdf7 	bl	800a342 <lv_obj_get_style_base_dir>
 800a754:	4603      	mov	r3, r0
 800a756:	2b01      	cmp	r3, #1
 800a758:	d10a      	bne.n	800a770 <lv_obj_get_scroll_right+0x2c>
        if(obj->spec_attr == NULL) return 0;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <lv_obj_get_scroll_right+0x22>
 800a762:	2300      	movs	r3, #0
 800a764:	e07e      	b.n	800a864 <lv_obj_get_scroll_right+0x120>
        return obj->spec_attr->scroll.x;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a76e:	e079      	b.n	800a864 <lv_obj_get_scroll_right+0x120>
    }

    /*With other base direction (LTR) scrolling to the right is normal so find the right most coordinate*/
    lv_coord_t child_res = LV_COORD_MIN;
 800a770:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a774:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f003 fc0a 	bl	800df90 <lv_obj_get_child_cnt>
 800a77c:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a77e:	2300      	movs	r3, #0
 800a780:	61bb      	str	r3, [r7, #24]
 800a782:	e01c      	b.n	800a7be <lv_obj_get_scroll_right+0x7a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a794:	4935      	ldr	r1, [pc, #212]	; (800a86c <lv_obj_get_scroll_right+0x128>)
 800a796:	68b8      	ldr	r0, [r7, #8]
 800a798:	f7fb fb9a 	bl	8005ed0 <lv_obj_has_flag_any>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d109      	bne.n	800a7b6 <lv_obj_get_scroll_right+0x72>
        child_res = LV_MAX(child_res, child->coords.x2);
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a7a8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	bfb8      	it	lt
 800a7b0:	4613      	movlt	r3, r2
 800a7b2:	83fb      	strh	r3, [r7, #30]
 800a7b4:	e000      	b.n	800a7b8 <lv_obj_get_scroll_right+0x74>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a7b6:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	61bb      	str	r3, [r7, #24]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d3de      	bcc.n	800a784 <lv_obj_get_scroll_right+0x40>
    }

    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff fd72 	bl	800a2b2 <lv_obj_get_style_pad_right>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff fd5a 	bl	800a28e <lv_obj_get_style_pad_left>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800a7de:	2100      	movs	r1, #0
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7ff fd9c 	bl	800a31e <lv_obj_get_style_border_width>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800a7ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a7ee:	4a20      	ldr	r2, [pc, #128]	; (800a870 <lv_obj_get_scroll_right+0x12c>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00d      	beq.n	800a810 <lv_obj_get_scroll_right+0xcc>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 800a7f4:	8a7a      	ldrh	r2, [r7, #18]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	b29a      	uxth	r2, r3
 800a802:	89fb      	ldrh	r3, [r7, #14]
 800a804:	4413      	add	r3, r2
 800a806:	b29a      	uxth	r2, r3
 800a808:	8bfb      	ldrh	r3, [r7, #30]
 800a80a:	4413      	add	r3, r2
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7fe fa2b 	bl	8008c6c <lv_obj_get_self_width>
 800a816:	4603      	mov	r3, r0
 800a818:	81bb      	strh	r3, [r7, #12]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a81a:	89fb      	ldrh	r3, [r7, #14]
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	b29c      	uxth	r4, r3
 800a820:	8a7d      	ldrh	r5, [r7, #18]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7fe f951 	bl	8008aca <lv_obj_get_width>
 800a828:	4603      	mov	r3, r0
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	1aeb      	subs	r3, r5, r3
 800a82e:	b29a      	uxth	r2, r3
 800a830:	8a3b      	ldrh	r3, [r7, #16]
 800a832:	4413      	add	r3, r2
 800a834:	b29b      	uxth	r3, r3
 800a836:	4423      	add	r3, r4
 800a838:	b29a      	uxth	r2, r3
 800a83a:	89bb      	ldrh	r3, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	b29b      	uxth	r3, r3
 800a840:	81bb      	strh	r3, [r7, #12]
    self_w -= lv_obj_get_scroll_x(obj);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff fe0c 	bl	800a460 <lv_obj_get_scroll_x>
 800a848:	4603      	mov	r3, r0
 800a84a:	89ba      	ldrh	r2, [r7, #12]
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	b29b      	uxth	r3, r3
 800a852:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_w);
 800a854:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a858:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	bfb8      	it	lt
 800a860:	4613      	movlt	r3, r2
 800a862:	b21b      	sxth	r3, r3
}
 800a864:	4618      	mov	r0, r3
 800a866:	3720      	adds	r7, #32
 800a868:	46bd      	mov	sp, r7
 800a86a:	bdb0      	pop	{r4, r5, r7, pc}
 800a86c:	00040001 	.word	0x00040001
 800a870:	ffffe001 	.word	0xffffe001

0800a874 <lv_obj_scroll_by_bounded>:
/*=====================
 * Other functions
 *====================*/

void lv_obj_scroll_by_bounded(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800a874:	b590      	push	{r4, r7, lr}
 800a876:	b089      	sub	sp, #36	; 0x24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	4608      	mov	r0, r1
 800a87e:	4611      	mov	r1, r2
 800a880:	461a      	mov	r2, r3
 800a882:	4603      	mov	r3, r0
 800a884:	817b      	strh	r3, [r7, #10]
 800a886:	460b      	mov	r3, r1
 800a888:	813b      	strh	r3, [r7, #8]
 800a88a:	4613      	mov	r3, r2
 800a88c:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 800a88e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d104      	bne.n	800a8a0 <lv_obj_scroll_by_bounded+0x2c>
 800a896:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 80b5 	beq.w	800aa0a <lv_obj_scroll_by_bounded+0x196>

    /*We need to know the final sizes for bound check*/
    lv_obj_update_layout(obj);
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7fe f8d7 	bl	8008a54 <lv_obj_update_layout>

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7ff fdda 	bl	800a460 <lv_obj_get_scroll_x>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	425b      	negs	r3, r3
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	82bb      	strh	r3, [r7, #20]
    lv_coord_t x_bounded = x_current + dx;
 800a8b6:	8aba      	ldrh	r2, [r7, #20]
 800a8b8:	897b      	ldrh	r3, [r7, #10]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	83fb      	strh	r3, [r7, #30]

    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7ff fd3d 	bl	800a342 <lv_obj_get_style_base_dir>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d028      	beq.n	800a920 <lv_obj_scroll_by_bounded+0xac>
        if(x_bounded > 0) x_bounded = 0;
 800a8ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	dd01      	ble.n	800a8da <lv_obj_scroll_by_bounded+0x66>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	83fb      	strh	r3, [r7, #30]
        if(x_bounded < 0) {
 800a8da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da43      	bge.n	800a96a <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff fe8a 	bl	800a5fc <lv_obj_get_scroll_left>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	b29c      	uxth	r4, r3
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff ff29 	bl	800a744 <lv_obj_get_scroll_right>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4423      	add	r3, r4
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	83bb      	strh	r3, [r7, #28]
            if(scroll_max < 0) scroll_max = 0;
 800a8fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a900:	2b00      	cmp	r3, #0
 800a902:	da01      	bge.n	800a908 <lv_obj_scroll_by_bounded+0x94>
 800a904:	2300      	movs	r3, #0
 800a906:	83bb      	strh	r3, [r7, #28]

            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800a908:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a90c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a910:	425b      	negs	r3, r3
 800a912:	429a      	cmp	r2, r3
 800a914:	da29      	bge.n	800a96a <lv_obj_scroll_by_bounded+0xf6>
 800a916:	8bbb      	ldrh	r3, [r7, #28]
 800a918:	425b      	negs	r3, r3
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	83fb      	strh	r3, [r7, #30]
 800a91e:	e024      	b.n	800a96a <lv_obj_scroll_by_bounded+0xf6>
        }
    }
    else {
        if(x_bounded < 0) x_bounded = 0;
 800a920:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a924:	2b00      	cmp	r3, #0
 800a926:	da01      	bge.n	800a92c <lv_obj_scroll_by_bounded+0xb8>
 800a928:	2300      	movs	r3, #0
 800a92a:	83fb      	strh	r3, [r7, #30]
        if(x_bounded > 0) {
 800a92c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a930:	2b00      	cmp	r3, #0
 800a932:	dd1a      	ble.n	800a96a <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f7ff fe61 	bl	800a5fc <lv_obj_get_scroll_left>
 800a93a:	4603      	mov	r3, r0
 800a93c:	b29c      	uxth	r4, r3
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f7ff ff00 	bl	800a744 <lv_obj_get_scroll_right>
 800a944:	4603      	mov	r3, r0
 800a946:	b29b      	uxth	r3, r3
 800a948:	4423      	add	r3, r4
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	837b      	strh	r3, [r7, #26]
            if(scroll_max < 0) scroll_max = 0;
 800a94e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a952:	2b00      	cmp	r3, #0
 800a954:	da01      	bge.n	800a95a <lv_obj_scroll_by_bounded+0xe6>
 800a956:	2300      	movs	r3, #0
 800a958:	837b      	strh	r3, [r7, #26]

            if(x_bounded > scroll_max) x_bounded = scroll_max;
 800a95a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a95e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a962:	429a      	cmp	r2, r3
 800a964:	dd01      	ble.n	800a96a <lv_obj_scroll_by_bounded+0xf6>
 800a966:	8b7b      	ldrh	r3, [r7, #26]
 800a968:	83fb      	strh	r3, [r7, #30]
        }
    }

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7ff fd90 	bl	800a490 <lv_obj_get_scroll_y>
 800a970:	4603      	mov	r3, r0
 800a972:	b29b      	uxth	r3, r3
 800a974:	425b      	negs	r3, r3
 800a976:	b29b      	uxth	r3, r3
 800a978:	827b      	strh	r3, [r7, #18]
    lv_coord_t y_bounded = y_current + dy;
 800a97a:	8a7a      	ldrh	r2, [r7, #18]
 800a97c:	893b      	ldrh	r3, [r7, #8]
 800a97e:	4413      	add	r3, r2
 800a980:	b29b      	uxth	r3, r3
 800a982:	833b      	strh	r3, [r7, #24]

    if(y_bounded > 0) y_bounded = 0;
 800a984:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	dd01      	ble.n	800a990 <lv_obj_scroll_by_bounded+0x11c>
 800a98c:	2300      	movs	r3, #0
 800a98e:	833b      	strh	r3, [r7, #24]
    if(y_bounded < 0) {
 800a990:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	da1d      	bge.n	800a9d4 <lv_obj_scroll_by_bounded+0x160>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fd91 	bl	800a4c0 <lv_obj_get_scroll_top>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	b29c      	uxth	r4, r3
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff fda4 	bl	800a4f0 <lv_obj_get_scroll_bottom>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	4423      	add	r3, r4
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	82fb      	strh	r3, [r7, #22]
        if(scroll_max < 0) scroll_max = 0;
 800a9b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	da01      	bge.n	800a9be <lv_obj_scroll_by_bounded+0x14a>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	82fb      	strh	r3, [r7, #22]
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 800a9be:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a9c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a9c6:	425b      	negs	r3, r3
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	da03      	bge.n	800a9d4 <lv_obj_scroll_by_bounded+0x160>
 800a9cc:	8afb      	ldrh	r3, [r7, #22]
 800a9ce:	425b      	negs	r3, r3
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	833b      	strh	r3, [r7, #24]
    }

    dx = x_bounded - x_current;
 800a9d4:	8bfa      	ldrh	r2, [r7, #30]
 800a9d6:	8abb      	ldrh	r3, [r7, #20]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	817b      	strh	r3, [r7, #10]
    dy = y_bounded - y_current;
 800a9de:	8b3a      	ldrh	r2, [r7, #24]
 800a9e0:	8a7b      	ldrh	r3, [r7, #18]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	813b      	strh	r3, [r7, #8]
    if(dx || dy) {
 800a9e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <lv_obj_scroll_by_bounded+0x184>
 800a9f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <lv_obj_scroll_by_bounded+0x198>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 800a9f8:	79fb      	ldrb	r3, [r7, #7]
 800a9fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a9fe:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 f806 	bl	800aa14 <lv_obj_scroll_by>
 800aa08:	e000      	b.n	800aa0c <lv_obj_scroll_by_bounded+0x198>
    if(dx == 0 && dy == 0) return;
 800aa0a:	bf00      	nop
    }
}
 800aa0c:	3724      	adds	r7, #36	; 0x24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd90      	pop	{r4, r7, pc}
	...

0800aa14 <lv_obj_scroll_by>:


void lv_obj_scroll_by(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b09c      	sub	sp, #112	; 0x70
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	4608      	mov	r0, r1
 800aa1e:	4611      	mov	r1, r2
 800aa20:	461a      	mov	r2, r3
 800aa22:	4603      	mov	r3, r0
 800aa24:	817b      	strh	r3, [r7, #10]
 800aa26:	460b      	mov	r3, r1
 800aa28:	813b      	strh	r3, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 800aa2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d104      	bne.n	800aa40 <lv_obj_scroll_by+0x2c>
 800aa36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 80f7 	beq.w	800ac2e <lv_obj_scroll_by+0x21a>
    if(anim_en == LV_ANIM_ON) {
 800aa40:	79fb      	ldrb	r3, [r7, #7]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	f040 80c4 	bne.w	800abd0 <lv_obj_scroll_by+0x1bc>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f003 fa23 	bl	800de94 <lv_obj_get_disp>
 800aa4e:	6638      	str	r0, [r7, #96]	; 0x60
        lv_anim_t a;
        lv_anim_init(&a);
 800aa50:	f107 0314 	add.w	r3, r7, #20
 800aa54:	4618      	mov	r0, r3
 800aa56:	f015 fa49 	bl	801feec <lv_anim_init>
        lv_anim_set_var(&a, obj);
 800aa5a:	f107 0314 	add.w	r3, r7, #20
 800aa5e:	68f9      	ldr	r1, [r7, #12]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7ff fb83 	bl	800a16c <lv_anim_set_var>
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);
 800aa66:	f107 0314 	add.w	r3, r7, #20
 800aa6a:	4977      	ldr	r1, [pc, #476]	; (800ac48 <lv_obj_scroll_by+0x234>)
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fbca 	bl	800a206 <lv_anim_set_ready_cb>

        if(dx) {
 800aa72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d052      	beq.n	800ab20 <lv_obj_scroll_by+0x10c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 800aa7a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800aa7c:	f015 f92c 	bl	801fcd8 <lv_disp_get_hor_res>
 800aa80:	4603      	mov	r3, r0
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	109b      	asrs	r3, r3, #2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	2100      	movs	r1, #0
 800aa90:	f015 fb32 	bl	80200f8 <lv_anim_speed_to_time>
 800aa94:	66f8      	str	r0, [r7, #108]	; 0x6c
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800aa96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa98:	2bc7      	cmp	r3, #199	; 0xc7
 800aa9a:	d801      	bhi.n	800aaa0 <lv_obj_scroll_by+0x8c>
 800aa9c:	23c8      	movs	r3, #200	; 0xc8
 800aa9e:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 800aaa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaa2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800aaa6:	d902      	bls.n	800aaae <lv_obj_scroll_by+0x9a>
 800aaa8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800aaac:	66fb      	str	r3, [r7, #108]	; 0x6c
            lv_anim_set_time(&a, t);
 800aaae:	f107 0314 	add.w	r3, r7, #20
 800aab2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff fb75 	bl	800a1a4 <lv_anim_set_time>
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f7ff fcd0 	bl	800a460 <lv_obj_get_scroll_x>
 800aac0:	4603      	mov	r3, r0
 800aac2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_anim_set_values(&a, -sx, -sx + dx);
 800aac6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800aaca:	4259      	negs	r1, r3
 800aacc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800aad0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800aad4:	1ad2      	subs	r2, r2, r3
 800aad6:	f107 0314 	add.w	r3, r7, #20
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fb70 	bl	800a1c0 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, scroll_x_anim);
 800aae0:	f107 0314 	add.w	r3, r7, #20
 800aae4:	4959      	ldr	r1, [pc, #356]	; (800ac4c <lv_obj_scroll_by+0x238>)
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7ff fb4e 	bl	800a188 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 800aaec:	f107 0314 	add.w	r3, r7, #20
 800aaf0:	4957      	ldr	r1, [pc, #348]	; (800ac50 <lv_obj_scroll_by+0x23c>)
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff fb79 	bl	800a1ea <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800aaf8:	f107 0314 	add.w	r3, r7, #20
 800aafc:	461a      	mov	r2, r3
 800aafe:	2109      	movs	r1, #9
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7f9 fff7 	bl	8004af4 <lv_event_send>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            if(res != LV_RES_OK) return;
 800ab0c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	f040 808e 	bne.w	800ac32 <lv_obj_scroll_by+0x21e>
            lv_anim_start(&a);
 800ab16:	f107 0314 	add.w	r3, r7, #20
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f015 fa0c 	bl	801ff38 <lv_anim_start>
        }

        if(dy) {
 800ab20:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 808b 	beq.w	800ac40 <lv_obj_scroll_by+0x22c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 800ab2a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ab2c:	f015 f8fa 	bl	801fd24 <lv_disp_get_ver_res>
 800ab30:	4603      	mov	r3, r0
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	109b      	asrs	r3, r3, #2
 800ab36:	4618      	mov	r0, r3
 800ab38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	2100      	movs	r1, #0
 800ab40:	f015 fada 	bl	80200f8 <lv_anim_speed_to_time>
 800ab44:	66b8      	str	r0, [r7, #104]	; 0x68
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800ab46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab48:	2bc7      	cmp	r3, #199	; 0xc7
 800ab4a:	d801      	bhi.n	800ab50 <lv_obj_scroll_by+0x13c>
 800ab4c:	23c8      	movs	r3, #200	; 0xc8
 800ab4e:	66bb      	str	r3, [r7, #104]	; 0x68
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 800ab50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab52:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ab56:	d902      	bls.n	800ab5e <lv_obj_scroll_by+0x14a>
 800ab58:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ab5c:	66bb      	str	r3, [r7, #104]	; 0x68
            lv_anim_set_time(&a, t);
 800ab5e:	f107 0314 	add.w	r3, r7, #20
 800ab62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7ff fb1d 	bl	800a1a4 <lv_anim_set_time>
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff fc90 	bl	800a490 <lv_obj_get_scroll_y>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_anim_set_values(&a, -sy, -sy + dy);
 800ab76:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800ab7a:	4259      	negs	r1, r3
 800ab7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ab80:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800ab84:	1ad2      	subs	r2, r2, r3
 800ab86:	f107 0314 	add.w	r3, r7, #20
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff fb18 	bl	800a1c0 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a,  scroll_y_anim);
 800ab90:	f107 0314 	add.w	r3, r7, #20
 800ab94:	492f      	ldr	r1, [pc, #188]	; (800ac54 <lv_obj_scroll_by+0x240>)
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff faf6 	bl	800a188 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 800ab9c:	f107 0314 	add.w	r3, r7, #20
 800aba0:	492b      	ldr	r1, [pc, #172]	; (800ac50 <lv_obj_scroll_by+0x23c>)
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff fb21 	bl	800a1ea <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800aba8:	f107 0314 	add.w	r3, r7, #20
 800abac:	461a      	mov	r2, r3
 800abae:	2109      	movs	r1, #9
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f7f9 ff9f 	bl	8004af4 <lv_event_send>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(res != LV_RES_OK) return;
 800abbc:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d138      	bne.n	800ac36 <lv_obj_scroll_by+0x222>
            lv_anim_start(&a);
 800abc4:	f107 0314 	add.w	r3, r7, #20
 800abc8:	4618      	mov	r0, r3
 800abca:	f015 f9b5 	bl	801ff38 <lv_anim_start>
 800abce:	e037      	b.n	800ac40 <lv_obj_scroll_by+0x22c>
        }
    }
    else {
        /*Remove pending animations*/
        lv_anim_del(obj, scroll_y_anim);
 800abd0:	4920      	ldr	r1, [pc, #128]	; (800ac54 <lv_obj_scroll_by+0x240>)
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f015 fa28 	bl	8020028 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 800abd8:	491c      	ldr	r1, [pc, #112]	; (800ac4c <lv_obj_scroll_by+0x238>)
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f015 fa24 	bl	8020028 <lv_anim_del>

        lv_res_t res;
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 800abe0:	2200      	movs	r2, #0
 800abe2:	2109      	movs	r1, #9
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f7f9 ff85 	bl	8004af4 <lv_event_send>
 800abea:	4603      	mov	r3, r0
 800abec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800abf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d120      	bne.n	800ac3a <lv_obj_scroll_by+0x226>

        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 800abf8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800abfc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ac00:	4619      	mov	r1, r3
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f8bb 	bl	800ad7e <_lv_obj_scroll_by_raw>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800ac0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d113      	bne.n	800ac3e <lv_obj_scroll_by+0x22a>

        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 800ac16:	2200      	movs	r2, #0
 800ac18:	210a      	movs	r1, #10
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f7f9 ff6a 	bl	8004af4 <lv_event_send>
 800ac20:	4603      	mov	r3, r0
 800ac22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800ac26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	e008      	b.n	800ac40 <lv_obj_scroll_by+0x22c>
    if(dx == 0 && dy == 0) return;
 800ac2e:	bf00      	nop
 800ac30:	e006      	b.n	800ac40 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800ac32:	bf00      	nop
 800ac34:	e004      	b.n	800ac40 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800ac36:	bf00      	nop
 800ac38:	e002      	b.n	800ac40 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800ac3a:	bf00      	nop
 800ac3c:	e000      	b.n	800ac40 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800ac3e:	bf00      	nop
    }
}
 800ac40:	3770      	adds	r7, #112	; 0x70
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	0800bb67 	.word	0x0800bb67
 800ac4c:	0800bb07 	.word	0x0800bb07
 800ac50:	0802018b 	.word	0x0802018b
 800ac54:	0800bb37 	.word	0x0800bb37

0800ac58 <lv_obj_scroll_to>:

void lv_obj_scroll_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	4608      	mov	r0, r1
 800ac62:	4611      	mov	r1, r2
 800ac64:	461a      	mov	r2, r3
 800ac66:	4603      	mov	r3, r0
 800ac68:	817b      	strh	r3, [r7, #10]
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	813b      	strh	r3, [r7, #8]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	71fb      	strb	r3, [r7, #7]
    lv_obj_scroll_to_x(obj, x, anim_en);
 800ac72:	79fa      	ldrb	r2, [r7, #7]
 800ac74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f000 f80c 	bl	800ac98 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 800ac80:	79fa      	ldrb	r2, [r7, #7]
 800ac82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ac86:	4619      	mov	r1, r3
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f829 	bl	800ace0 <lv_obj_scroll_to_y>
}
 800ac8e:	bf00      	nop
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
	...

0800ac98 <lv_obj_scroll_to_x>:

void lv_obj_scroll_to_x(lv_obj_t * obj, lv_coord_t x, lv_anim_enable_t anim_en)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	807b      	strh	r3, [r7, #2]
 800aca4:	4613      	mov	r3, r2
 800aca6:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_x_anim);
 800aca8:	490c      	ldr	r1, [pc, #48]	; (800acdc <lv_obj_scroll_to_x+0x44>)
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f015 f9bc 	bl	8020028 <lv_anim_del>

    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff fbd5 	bl	800a460 <lv_obj_get_scroll_x>
 800acb6:	4603      	mov	r3, r0
 800acb8:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -x + scroll_x;
 800acba:	89fa      	ldrh	r2, [r7, #14]
 800acbc:	887b      	ldrh	r3, [r7, #2]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 800acc4:	787b      	ldrb	r3, [r7, #1]
 800acc6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff fdd1 	bl	800a874 <lv_obj_scroll_by_bounded>
}
 800acd2:	bf00      	nop
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	0800bb07 	.word	0x0800bb07

0800ace0 <lv_obj_scroll_to_y>:

void lv_obj_scroll_to_y(lv_obj_t * obj, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	460b      	mov	r3, r1
 800acea:	807b      	strh	r3, [r7, #2]
 800acec:	4613      	mov	r3, r2
 800acee:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_y_anim);
 800acf0:	490c      	ldr	r1, [pc, #48]	; (800ad24 <lv_obj_scroll_to_y+0x44>)
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f015 f998 	bl	8020028 <lv_anim_del>

    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7ff fbc9 	bl	800a490 <lv_obj_get_scroll_y>
 800acfe:	4603      	mov	r3, r0
 800ad00:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -y + scroll_y;
 800ad02:	89fa      	ldrh	r2, [r7, #14]
 800ad04:	887b      	ldrh	r3, [r7, #2]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 800ad0c:	787b      	ldrb	r3, [r7, #1]
 800ad0e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ad12:	2100      	movs	r1, #0
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff fdad 	bl	800a874 <lv_obj_scroll_by_bounded>
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	0800bb37 	.word	0x0800bb37

0800ad28 <lv_obj_scroll_to_view_recursive>:
    lv_point_t p = {0, 0};
    scroll_area_into_view(&obj->coords, obj, &p, anim_en);
}

void lv_obj_scroll_to_view_recursive(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
    /*Be sure the screens layout is correct*/
    lv_obj_update_layout(obj);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7fd fe8d 	bl	8008a54 <lv_obj_update_layout>

    lv_point_t p = {0, 0};
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	81bb      	strh	r3, [r7, #12]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	81fb      	strh	r3, [r7, #14]
    lv_obj_t * child = obj;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	617b      	str	r3, [r7, #20]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800ad46:	6978      	ldr	r0, [r7, #20]
 800ad48:	f003 f8de 	bl	800df08 <lv_obj_get_parent>
 800ad4c:	6138      	str	r0, [r7, #16]
    while(parent) {
 800ad4e:	e00e      	b.n	800ad6e <lv_obj_scroll_to_view_recursive+0x46>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f103 0014 	add.w	r0, r3, #20
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	f107 020c 	add.w	r2, r7, #12
 800ad5c:	6979      	ldr	r1, [r7, #20]
 800ad5e:	f000 ff11 	bl	800bb84 <scroll_area_into_view>
        child = parent;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	617b      	str	r3, [r7, #20]
        parent = lv_obj_get_parent(parent);
 800ad66:	6938      	ldr	r0, [r7, #16]
 800ad68:	f003 f8ce 	bl	800df08 <lv_obj_get_parent>
 800ad6c:	6138      	str	r0, [r7, #16]
    while(parent) {
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1ed      	bne.n	800ad50 <lv_obj_scroll_to_view_recursive+0x28>
    }
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <_lv_obj_scroll_by_raw>:

lv_res_t _lv_obj_scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	807b      	strh	r3, [r7, #2]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	803b      	strh	r3, [r7, #0]
    if(x == 0 && y == 0) return LV_RES_OK;
 800ad8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d105      	bne.n	800ada2 <_lv_obj_scroll_by_raw+0x24>
 800ad96:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <_lv_obj_scroll_by_raw+0x24>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e032      	b.n	800ae08 <_lv_obj_scroll_by_raw+0x8a>

    lv_obj_allocate_spec_attr(obj);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7fb f8c8 	bl	8005f38 <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	887b      	ldrh	r3, [r7, #2]
 800adb4:	4413      	add	r3, r2
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	b212      	sxth	r2, r2
 800adbe:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800adc8:	b29a      	uxth	r2, r3
 800adca:	883b      	ldrh	r3, [r7, #0]
 800adcc:	4413      	add	r3, r2
 800adce:	b29a      	uxth	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	b212      	sxth	r2, r2
 800add6:	825a      	strh	r2, [r3, #18]

    lv_obj_move_children_by(obj, x, y, true);
 800add8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800addc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800ade0:	2301      	movs	r3, #1
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7fe faa8 	bl	8009338 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800ade8:	2200      	movs	r2, #0
 800adea:	210b      	movs	r1, #11
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7f9 fe81 	bl	8004af4 <lv_event_send>
 800adf2:	4603      	mov	r3, r0
 800adf4:	73fb      	strb	r3, [r7, #15]
    if(res != LV_RES_OK) return res;
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d001      	beq.n	800ae00 <_lv_obj_scroll_by_raw+0x82>
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	e003      	b.n	800ae08 <_lv_obj_scroll_by_raw+0x8a>
    lv_obj_invalidate(obj);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7fe fc2c 	bl	800965e <lv_obj_invalidate>
    return LV_RES_OK;
 800ae06:	2301      	movs	r3, #1
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <lv_obj_get_scrollbar_area>:
    lv_indev_scroll_get_snap_dist(obj, &p);
    lv_obj_scroll_by(obj, p.x, p.y, anim_en);
}

void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
{
 800ae10:	b590      	push	{r4, r7, lr}
 800ae12:	b095      	sub	sp, #84	; 0x54
 800ae14:	af02      	add	r7, sp, #8
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
    lv_area_set(hor_area, 0, 0, -1, -1);
 800ae1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae26:	2200      	movs	r2, #0
 800ae28:	2100      	movs	r1, #0
 800ae2a:	68b8      	ldr	r0, [r7, #8]
 800ae2c:	f015 fb84 	bl	8020538 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800ae30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f015 fb7a 	bl	8020538 <lv_area_set>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800ae44:	2110      	movs	r1, #16
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7fb f82d 	bl	8005ea6 <lv_obj_has_flag>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f083 0301 	eor.w	r3, r3, #1
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f040 8591 	bne.w	800b97c <lv_obj_get_scrollbar_area+0xb6c>

    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f7ff faa8 	bl	800a3b0 <lv_obj_get_scrollbar_mode>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800ae66:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 8588 	beq.w	800b980 <lv_obj_get_scrollbar_area+0xb70>

    /*If there is no indev scrolling this object but `mode==active` return*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800ae70:	2000      	movs	r0, #0
 800ae72:	f014 ffb7 	bl	801fde4 <lv_indev_get_next>
 800ae76:	6478      	str	r0, [r7, #68]	; 0x44
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800ae78:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d114      	bne.n	800aeaa <lv_obj_get_scrollbar_area+0x9a>
        while(indev) {
 800ae80:	e00a      	b.n	800ae98 <lv_obj_get_scrollbar_area+0x88>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800ae82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae84:	f7fa fc7d 	bl	8005782 <lv_indev_get_scroll_obj>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d007      	beq.n	800aea0 <lv_obj_get_scrollbar_area+0x90>
            indev = lv_indev_get_next(indev);
 800ae90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ae92:	f014 ffa7 	bl	801fde4 <lv_indev_get_next>
 800ae96:	6478      	str	r0, [r7, #68]	; 0x44
        while(indev) {
 800ae98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1f1      	bne.n	800ae82 <lv_obj_get_scrollbar_area+0x72>
 800ae9e:	e000      	b.n	800aea2 <lv_obj_get_scrollbar_area+0x92>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800aea0:	bf00      	nop
        }
        if(indev == NULL)  return;
 800aea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 856d 	beq.w	800b984 <lv_obj_get_scrollbar_area+0xb74>
    }

    lv_coord_t st = lv_obj_get_scroll_top(obj);
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff fb08 	bl	800a4c0 <lv_obj_get_scroll_top>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f7ff fb1b 	bl	800a4f0 <lv_obj_get_scroll_bottom>
 800aeba:	4603      	mov	r3, r0
 800aebc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff fb9c 	bl	800a5fc <lv_obj_get_scroll_left>
 800aec4:	4603      	mov	r3, r0
 800aec6:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7ff fc3b 	bl	800a744 <lv_obj_get_scroll_right>
 800aece:	4603      	mov	r3, r0
 800aed0:	873b      	strh	r3, [r7, #56]	; 0x38

    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7ff fa82 	bl	800a3dc <lv_obj_get_scroll_dir>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool ver_draw = false;
 800aede:	2300      	movs	r3, #0
 800aee0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    if((dir & LV_DIR_VER) &&
 800aee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aee8:	f003 030c 	and.w	r3, r3, #12
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01c      	beq.n	800af2a <lv_obj_get_scrollbar_area+0x11a>
 800aef0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d015      	beq.n	800af24 <lv_obj_get_scrollbar_area+0x114>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800aef8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d107      	bne.n	800af10 <lv_obj_get_scrollbar_area+0x100>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800af00:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800af04:	2b00      	cmp	r3, #0
 800af06:	dc0d      	bgt.n	800af24 <lv_obj_get_scrollbar_area+0x114>
 800af08:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	dc09      	bgt.n	800af24 <lv_obj_get_scrollbar_area+0x114>
 800af10:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800af14:	2b02      	cmp	r3, #2
 800af16:	d108      	bne.n	800af2a <lv_obj_get_scrollbar_area+0x11a>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800af18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af1a:	f7fa fc11 	bl	8005740 <lv_indev_get_scroll_dir>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b0c      	cmp	r3, #12
 800af22:	d102      	bne.n	800af2a <lv_obj_get_scrollbar_area+0x11a>
        ver_draw = true;
 800af24:	2301      	movs	r3, #1
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }


    bool hor_draw = false;
 800af2a:	2300      	movs	r3, #0
 800af2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    if((dir & LV_DIR_HOR) &&
 800af30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af34:	f003 0303 	and.w	r3, r3, #3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d01c      	beq.n	800af76 <lv_obj_get_scrollbar_area+0x166>
 800af3c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800af40:	2b01      	cmp	r3, #1
 800af42:	d015      	beq.n	800af70 <lv_obj_get_scrollbar_area+0x160>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800af44:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d107      	bne.n	800af5c <lv_obj_get_scrollbar_area+0x14c>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800af4c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800af50:	2b00      	cmp	r3, #0
 800af52:	dc0d      	bgt.n	800af70 <lv_obj_get_scrollbar_area+0x160>
 800af54:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dc09      	bgt.n	800af70 <lv_obj_get_scrollbar_area+0x160>
 800af5c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800af60:	2b02      	cmp	r3, #2
 800af62:	d108      	bne.n	800af76 <lv_obj_get_scrollbar_area+0x166>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800af64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af66:	f7fa fbeb 	bl	8005740 <lv_indev_get_scroll_dir>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d102      	bne.n	800af76 <lv_obj_get_scrollbar_area+0x166>
        hor_draw = true;
 800af70:	2301      	movs	r3, #1
 800af72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }

    if(!hor_draw && !ver_draw) return;
 800af76:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800af7a:	f083 0301 	eor.w	r3, r3, #1
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	d007      	beq.n	800af94 <lv_obj_get_scrollbar_area+0x184>
 800af84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af88:	f083 0301 	eor.w	r3, r3, #1
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f040 84fa 	bne.w	800b988 <lv_obj_get_scrollbar_area+0xb78>

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 800af94:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff f9d2 	bl	800a342 <lv_obj_get_style_base_dir>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	bf0c      	ite	eq
 800afa4:	2301      	moveq	r3, #1
 800afa6:	2300      	movne	r3, #0
 800afa8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    lv_coord_t top_space = lv_obj_get_style_pad_top(obj, LV_PART_SCROLLBAR);
 800afac:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff f948 	bl	800a246 <lv_obj_get_style_pad_top>
 800afb6:	4603      	mov	r3, r0
 800afb8:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_coord_t bottom_space = lv_obj_get_style_pad_bottom(obj, LV_PART_SCROLLBAR);
 800afba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff f953 	bl	800a26a <lv_obj_get_style_pad_bottom>
 800afc4:	4603      	mov	r3, r0
 800afc6:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t left_space = lv_obj_get_style_pad_left(obj, LV_PART_SCROLLBAR);
 800afc8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f7ff f95e 	bl	800a28e <lv_obj_get_style_pad_left>
 800afd2:	4603      	mov	r3, r0
 800afd4:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t right_space = lv_obj_get_style_pad_right(obj, LV_PART_SCROLLBAR);
 800afd6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff f969 	bl	800a2b2 <lv_obj_get_style_pad_right>
 800afe0:	4603      	mov	r3, r0
 800afe2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t tickness = lv_obj_get_style_width(obj, LV_PART_SCROLLBAR);
 800afe4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff f91a 	bl	800a222 <lv_obj_get_style_width>
 800afee:	4603      	mov	r3, r0
 800aff0:	85bb      	strh	r3, [r7, #44]	; 0x2c

    lv_coord_t obj_h = lv_obj_get_height(obj);
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7fd fd77 	bl	8008ae6 <lv_obj_get_height>
 800aff8:	4603      	mov	r3, r0
 800affa:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t obj_w = lv_obj_get_width(obj);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7fd fd64 	bl	8008aca <lv_obj_get_width>
 800b002:	4603      	mov	r3, r0
 800b004:	853b      	strh	r3, [r7, #40]	; 0x28

    /*Space required for the vertical and horizontal scrollbars*/
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800b006:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <lv_obj_get_scrollbar_area+0x204>
 800b00e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b012:	e000      	b.n	800b016 <lv_obj_get_scrollbar_area+0x206>
 800b014:	2300      	movs	r3, #0
 800b016:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 800b018:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <lv_obj_get_scrollbar_area+0x216>
 800b020:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b024:	e000      	b.n	800b028 <lv_obj_get_scrollbar_area+0x218>
 800b026:	2300      	movs	r3, #0
 800b028:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t rem;

    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800b02a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7ff f951 	bl	800a2d6 <lv_obj_get_style_bg_opa>
 800b034:	4603      	mov	r3, r0
 800b036:	2b01      	cmp	r3, #1
 800b038:	d808      	bhi.n	800b04c <lv_obj_get_scrollbar_area+0x23c>
       lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN) {
 800b03a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff f95b 	bl	800a2fa <lv_obj_get_style_border_opa>
 800b044:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800b046:	2b01      	cmp	r3, #1
 800b048:	f240 84a0 	bls.w	800b98c <lv_obj_get_scrollbar_area+0xb7c>
        return;
    }

    /*Draw vertical scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_h = obj_h + st + sb;
 800b04c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b04e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b050:	4413      	add	r3, r2
 800b052:	b29a      	uxth	r2, r3
 800b054:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b056:	4413      	add	r3, r2
 800b058:	b29b      	uxth	r3, r3
 800b05a:	847b      	strh	r3, [r7, #34]	; 0x22
    if(ver_draw && content_h) {
 800b05c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 81c3 	beq.w	800b3ec <lv_obj_get_scrollbar_area+0x5dc>
 800b066:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 81be 	beq.w	800b3ec <lv_obj_get_scrollbar_area+0x5dc>
        ver_area->y1 = obj->coords.y1;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	805a      	strh	r2, [r3, #2]
        ver_area->y2 = obj->coords.y2;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	80da      	strh	r2, [r3, #6]
        if(rtl) {
 800b084:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d016      	beq.n	800b0ba <lv_obj_get_scrollbar_area+0x2aa>
            ver_area->x1 = obj->coords.x1 + left_space;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b092:	b29a      	uxth	r2, r3
 800b094:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b096:	4413      	add	r3, r2
 800b098:	b29b      	uxth	r3, r3
 800b09a:	b21a      	sxth	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	801a      	strh	r2, [r3, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0aa:	4413      	add	r3, r2
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	b21a      	sxth	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	809a      	strh	r2, [r3, #4]
 800b0b8:	e015      	b.n	800b0e6 <lv_obj_get_scrollbar_area+0x2d6>
        }
        else {
            ver_area->x2 = obj->coords.x2 - right_space;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	b21a      	sxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	809a      	strh	r2, [r3, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	3301      	adds	r3, #1
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	b21a      	sxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	801a      	strh	r2, [r3, #0]
        }

        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800b0e6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b0ea:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b0f4:	1ad2      	subs	r2, r2, r3
 800b0f6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b100:	fb03 f202 	mul.w	r2, r3, r2
 800b104:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b108:	fb92 f3f3 	sdiv	r3, r2, r3
 800b10c:	843b      	strh	r3, [r7, #32]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800b10e:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800b112:	2000      	movs	r0, #0
 800b114:	f014 fe2c 	bl	801fd70 <lv_disp_get_dpi>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	2bef      	cmp	r3, #239	; 0xef
 800b126:	dd10      	ble.n	800b14a <lv_obj_get_scrollbar_area+0x33a>
 800b128:	2000      	movs	r0, #0
 800b12a:	f014 fe21 	bl	801fd70 <lv_disp_get_dpi>
 800b12e:	4603      	mov	r3, r0
 800b130:	461a      	mov	r2, r3
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	3350      	adds	r3, #80	; 0x50
 800b13c:	4aa7      	ldr	r2, [pc, #668]	; (800b3dc <lv_obj_get_scrollbar_area+0x5cc>)
 800b13e:	fb82 1203 	smull	r1, r2, r2, r3
 800b142:	1192      	asrs	r2, r2, #6
 800b144:	17db      	asrs	r3, r3, #31
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	e000      	b.n	800b14c <lv_obj_get_scrollbar_area+0x33c>
 800b14a:	2301      	movs	r3, #1
 800b14c:	42a3      	cmp	r3, r4
 800b14e:	db1e      	blt.n	800b18e <lv_obj_get_scrollbar_area+0x37e>
 800b150:	2000      	movs	r0, #0
 800b152:	f014 fe0d 	bl	801fd70 <lv_disp_get_dpi>
 800b156:	4603      	mov	r3, r0
 800b158:	461a      	mov	r2, r3
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	005b      	lsls	r3, r3, #1
 800b162:	2bef      	cmp	r3, #239	; 0xef
 800b164:	dd11      	ble.n	800b18a <lv_obj_get_scrollbar_area+0x37a>
 800b166:	2000      	movs	r0, #0
 800b168:	f014 fe02 	bl	801fd70 <lv_disp_get_dpi>
 800b16c:	4603      	mov	r3, r0
 800b16e:	461a      	mov	r2, r3
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	3350      	adds	r3, #80	; 0x50
 800b17a:	4a98      	ldr	r2, [pc, #608]	; (800b3dc <lv_obj_get_scrollbar_area+0x5cc>)
 800b17c:	fb82 1203 	smull	r1, r2, r2, r3
 800b180:	1192      	asrs	r2, r2, #6
 800b182:	17db      	asrs	r3, r3, #31
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	b21b      	sxth	r3, r3
 800b188:	e003      	b.n	800b192 <lv_obj_get_scrollbar_area+0x382>
 800b18a:	2301      	movs	r3, #1
 800b18c:	e001      	b.n	800b192 <lv_obj_get_scrollbar_area+0x382>
 800b18e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b192:	843b      	strh	r3, [r7, #32]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800b194:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b196:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	8c3b      	ldrh	r3, [r7, #32]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	83fb      	strh	r3, [r7, #30]
              sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 800b1b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b1b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	83bb      	strh	r3, [r7, #28]
        if(scroll_h <= 0) {
 800b1ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dc19      	bgt.n	800b1f6 <lv_obj_get_scrollbar_area+0x3e6>
            ver_area->y1 = obj->coords.y1 + top_space;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b1cc:	4413      	add	r3, r2
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	b21a      	sxth	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	b21a      	sxth	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	80da      	strh	r2, [r3, #6]
 800b1f4:	e0fa      	b.n	800b3ec <lv_obj_get_scrollbar_area+0x5dc>
        }
        else {
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800b1f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b1fa:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800b1fe:	fb03 f202 	mul.w	r2, r3, r2
 800b202:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b206:	fb92 f3f3 	sdiv	r3, r2, r3
 800b20a:	837b      	strh	r3, [r7, #26]
            sb_y = rem - sb_y;
 800b20c:	8bfa      	ldrh	r2, [r7, #30]
 800b20e:	8b7b      	ldrh	r3, [r7, #26]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	b29b      	uxth	r3, r3
 800b214:	837b      	strh	r3, [r7, #26]

            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	8b7b      	ldrh	r3, [r7, #26]
 800b220:	4413      	add	r3, r2
 800b222:	b29a      	uxth	r2, r3
 800b224:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b226:	4413      	add	r3, r2
 800b228:	b29b      	uxth	r3, r3
 800b22a:	b21a      	sxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b236:	b29a      	uxth	r2, r3
 800b238:	8c3b      	ldrh	r3, [r7, #32]
 800b23a:	4413      	add	r3, r2
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	3b01      	subs	r3, #1
 800b240:	b29b      	uxth	r3, r3
 800b242:	b21a      	sxth	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	80da      	strh	r2, [r3, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b24e:	461a      	mov	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b256:	4619      	mov	r1, r3
 800b258:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b25c:	440b      	add	r3, r1
 800b25e:	429a      	cmp	r2, r3
 800b260:	da57      	bge.n	800b312 <lv_obj_get_scrollbar_area+0x502>
                ver_area->y1 = obj->coords.y1 + top_space;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b268:	b29a      	uxth	r2, r3
 800b26a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b26c:	4413      	add	r3, r2
 800b26e:	b29b      	uxth	r3, r3
 800b270:	b21a      	sxth	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	805a      	strh	r2, [r3, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b27c:	461c      	mov	r4, r3
 800b27e:	2000      	movs	r0, #0
 800b280:	f014 fd76 	bl	801fd70 <lv_disp_get_dpi>
 800b284:	4603      	mov	r3, r0
 800b286:	461a      	mov	r2, r3
 800b288:	4613      	mov	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	2bef      	cmp	r3, #239	; 0xef
 800b292:	dd10      	ble.n	800b2b6 <lv_obj_get_scrollbar_area+0x4a6>
 800b294:	2000      	movs	r0, #0
 800b296:	f014 fd6b 	bl	801fd70 <lv_disp_get_dpi>
 800b29a:	4603      	mov	r3, r0
 800b29c:	461a      	mov	r2, r3
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	3350      	adds	r3, #80	; 0x50
 800b2a8:	4a4c      	ldr	r2, [pc, #304]	; (800b3dc <lv_obj_get_scrollbar_area+0x5cc>)
 800b2aa:	fb82 1203 	smull	r1, r2, r2, r3
 800b2ae:	1192      	asrs	r2, r2, #6
 800b2b0:	17db      	asrs	r3, r3, #31
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	e000      	b.n	800b2b8 <lv_obj_get_scrollbar_area+0x4a8>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	4423      	add	r3, r4
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	dd26      	ble.n	800b312 <lv_obj_get_scrollbar_area+0x502>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2ca:	b29c      	uxth	r4, r3
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	f014 fd4f 	bl	801fd70 <lv_disp_get_dpi>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	2bef      	cmp	r3, #239	; 0xef
 800b2e0:	dd11      	ble.n	800b306 <lv_obj_get_scrollbar_area+0x4f6>
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	f014 fd44 	bl	801fd70 <lv_disp_get_dpi>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	3350      	adds	r3, #80	; 0x50
 800b2f6:	4a39      	ldr	r2, [pc, #228]	; (800b3dc <lv_obj_get_scrollbar_area+0x5cc>)
 800b2f8:	fb82 1203 	smull	r1, r2, r2, r3
 800b2fc:	1192      	asrs	r2, r2, #6
 800b2fe:	17db      	asrs	r3, r3, #31
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	b29b      	uxth	r3, r3
 800b304:	e000      	b.n	800b308 <lv_obj_get_scrollbar_area+0x4f8>
 800b306:	2301      	movs	r3, #1
 800b308:	4423      	add	r3, r4
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	b21a      	sxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	80da      	strh	r2, [r3, #6]
                }
            }
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b318:	4619      	mov	r1, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b320:	461a      	mov	r2, r3
 800b322:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b326:	1ad2      	subs	r2, r2, r3
 800b328:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	4299      	cmp	r1, r3
 800b330:	dd5c      	ble.n	800b3ec <lv_obj_get_scrollbar_area+0x5dc>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b338:	b29a      	uxth	r2, r3
 800b33a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	b29a      	uxth	r2, r3
 800b340:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	b29b      	uxth	r3, r3
 800b346:	b21a      	sxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	80da      	strh	r2, [r3, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b352:	461c      	mov	r4, r3
 800b354:	2000      	movs	r0, #0
 800b356:	f014 fd0b 	bl	801fd70 <lv_disp_get_dpi>
 800b35a:	4603      	mov	r3, r0
 800b35c:	461a      	mov	r2, r3
 800b35e:	4613      	mov	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	005b      	lsls	r3, r3, #1
 800b366:	2bef      	cmp	r3, #239	; 0xef
 800b368:	dd10      	ble.n	800b38c <lv_obj_get_scrollbar_area+0x57c>
 800b36a:	2000      	movs	r0, #0
 800b36c:	f014 fd00 	bl	801fd70 <lv_disp_get_dpi>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	3350      	adds	r3, #80	; 0x50
 800b37e:	4a17      	ldr	r2, [pc, #92]	; (800b3dc <lv_obj_get_scrollbar_area+0x5cc>)
 800b380:	fb82 1203 	smull	r1, r2, r2, r3
 800b384:	1192      	asrs	r2, r2, #6
 800b386:	17db      	asrs	r3, r3, #31
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	e000      	b.n	800b38e <lv_obj_get_scrollbar_area+0x57e>
 800b38c:	2301      	movs	r3, #1
 800b38e:	1ae3      	subs	r3, r4, r3
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800b396:	4293      	cmp	r3, r2
 800b398:	da28      	bge.n	800b3ec <lv_obj_get_scrollbar_area+0x5dc>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b3a0:	b29c      	uxth	r4, r3
 800b3a2:	2000      	movs	r0, #0
 800b3a4:	f014 fce4 	bl	801fd70 <lv_disp_get_dpi>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	2bef      	cmp	r3, #239	; 0xef
 800b3b6:	dd13      	ble.n	800b3e0 <lv_obj_get_scrollbar_area+0x5d0>
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	f014 fcd9 	bl	801fd70 <lv_disp_get_dpi>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	3350      	adds	r3, #80	; 0x50
 800b3cc:	4a03      	ldr	r2, [pc, #12]	; (800b3dc <lv_obj_get_scrollbar_area+0x5cc>)
 800b3ce:	fb82 1203 	smull	r1, r2, r2, r3
 800b3d2:	1192      	asrs	r2, r2, #6
 800b3d4:	17db      	asrs	r3, r3, #31
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	e002      	b.n	800b3e2 <lv_obj_get_scrollbar_area+0x5d2>
 800b3dc:	66666667 	.word	0x66666667
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	1ae3      	subs	r3, r4, r3
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	b21a      	sxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    /*Draw horizontal scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_w = obj_w + sl + sr;
 800b3ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b3ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b3f0:	4413      	add	r3, r2
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b3f6:	4413      	add	r3, r2
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	833b      	strh	r3, [r7, #24]
    if(hor_draw && content_w) {
 800b3fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 82c4 	beq.w	800b98e <lv_obj_get_scrollbar_area+0xb7e>
 800b406:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f000 82bf 	beq.w	800b98e <lv_obj_get_scrollbar_area+0xb7e>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b416:	b29a      	uxth	r2, r3
 800b418:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	b21a      	sxth	r2, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	80da      	strh	r2, [r3, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	b29b      	uxth	r3, r3
 800b432:	3301      	adds	r3, #1
 800b434:	b29b      	uxth	r3, r3
 800b436:	b21a      	sxth	r2, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	805a      	strh	r2, [r3, #2]
        hor_area->x1 = obj->coords.x1;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	801a      	strh	r2, [r3, #0]
        hor_area->x2 = obj->coords.x2;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	809a      	strh	r2, [r3, #4]

        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800b450:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b454:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b458:	1ad2      	subs	r2, r2, r3
 800b45a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b45e:	1ad2      	subs	r2, r2, r3
 800b460:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b46a:	fb03 f202 	mul.w	r2, r3, r2
 800b46e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b472:	fb92 f3f3 	sdiv	r3, r2, r3
 800b476:	82fb      	strh	r3, [r7, #22]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800b478:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800b47c:	2000      	movs	r0, #0
 800b47e:	f014 fc77 	bl	801fd70 <lv_disp_get_dpi>
 800b482:	4603      	mov	r3, r0
 800b484:	461a      	mov	r2, r3
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	2bef      	cmp	r3, #239	; 0xef
 800b490:	dd10      	ble.n	800b4b4 <lv_obj_get_scrollbar_area+0x6a4>
 800b492:	2000      	movs	r0, #0
 800b494:	f014 fc6c 	bl	801fd70 <lv_disp_get_dpi>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	4613      	mov	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	3350      	adds	r3, #80	; 0x50
 800b4a6:	4aa7      	ldr	r2, [pc, #668]	; (800b744 <lv_obj_get_scrollbar_area+0x934>)
 800b4a8:	fb82 1203 	smull	r1, r2, r2, r3
 800b4ac:	1192      	asrs	r2, r2, #6
 800b4ae:	17db      	asrs	r3, r3, #31
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	e000      	b.n	800b4b6 <lv_obj_get_scrollbar_area+0x6a6>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	42a3      	cmp	r3, r4
 800b4b8:	db1e      	blt.n	800b4f8 <lv_obj_get_scrollbar_area+0x6e8>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	f014 fc58 	bl	801fd70 <lv_disp_get_dpi>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	2bef      	cmp	r3, #239	; 0xef
 800b4ce:	dd11      	ble.n	800b4f4 <lv_obj_get_scrollbar_area+0x6e4>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	f014 fc4d 	bl	801fd70 <lv_disp_get_dpi>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	461a      	mov	r2, r3
 800b4da:	4613      	mov	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	3350      	adds	r3, #80	; 0x50
 800b4e4:	4a97      	ldr	r2, [pc, #604]	; (800b744 <lv_obj_get_scrollbar_area+0x934>)
 800b4e6:	fb82 1203 	smull	r1, r2, r2, r3
 800b4ea:	1192      	asrs	r2, r2, #6
 800b4ec:	17db      	asrs	r3, r3, #31
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	b21b      	sxth	r3, r3
 800b4f2:	e003      	b.n	800b4fc <lv_obj_get_scrollbar_area+0x6ec>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e001      	b.n	800b4fc <lv_obj_get_scrollbar_area+0x6ec>
 800b4f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b4fc:	82fb      	strh	r3, [r7, #22]
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800b4fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b500:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	b29a      	uxth	r2, r3
 800b506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	b29a      	uxth	r2, r3
 800b512:	8afb      	ldrh	r3, [r7, #22]
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	b29b      	uxth	r3, r3
 800b518:	83fb      	strh	r3, [r7, #30]
              sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800b51a:	8b3a      	ldrh	r2, [r7, #24]
 800b51c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	b29b      	uxth	r3, r3
 800b522:	82bb      	strh	r3, [r7, #20]
        if(scroll_w <= 0) {
 800b524:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	dc37      	bgt.n	800b59c <lv_obj_get_scrollbar_area+0x78c>
            if(rtl) {
 800b52c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b530:	2b00      	cmp	r3, #0
 800b532:	d019      	beq.n	800b568 <lv_obj_get_scrollbar_area+0x758>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b53e:	4413      	add	r3, r2
 800b540:	b29a      	uxth	r2, r3
 800b542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b544:	4413      	add	r3, r2
 800b546:	b29b      	uxth	r3, r3
 800b548:	3b01      	subs	r3, #1
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	b21a      	sxth	r2, r3
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b558:	b29a      	uxth	r2, r3
 800b55a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	b29b      	uxth	r3, r3
 800b560:	b21a      	sxth	r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	809a      	strh	r2, [r3, #4]
 800b566:	e212      	b.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
            }
            else {
                hor_area->x1 = obj->coords.x1 + left_space;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b56e:	b29a      	uxth	r2, r3
 800b570:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b572:	4413      	add	r3, r2
 800b574:	b29b      	uxth	r3, r3
 800b576:	b21a      	sxth	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b582:	b29a      	uxth	r2, r3
 800b584:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b586:	1ad3      	subs	r3, r2, r3
 800b588:	b29a      	uxth	r2, r3
 800b58a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	b29b      	uxth	r3, r3
 800b590:	3b01      	subs	r3, #1
 800b592:	b29b      	uxth	r3, r3
 800b594:	b21a      	sxth	r2, r3
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	809a      	strh	r2, [r3, #4]
 800b59a:	e1f8      	b.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
            }
        }
        else {
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800b59c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b5a0:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800b5a4:	fb03 f202 	mul.w	r2, r3, r2
 800b5a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b5ac:	fb92 f3f3 	sdiv	r3, r2, r3
 800b5b0:	827b      	strh	r3, [r7, #18]
            sb_x = rem - sb_x;
 800b5b2:	8bfa      	ldrh	r2, [r7, #30]
 800b5b4:	8a7b      	ldrh	r3, [r7, #18]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	827b      	strh	r3, [r7, #18]

            if(rtl) {
 800b5bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80f1 	beq.w	800b7a8 <lv_obj_get_scrollbar_area+0x998>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	8a7b      	ldrh	r3, [r7, #18]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b5d6:	4413      	add	r3, r2
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5dc:	4413      	add	r3, r2
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	b21a      	sxth	r2, r3
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	8afb      	ldrh	r3, [r7, #22]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	b21a      	sxth	r2, r3
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b604:	4619      	mov	r1, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b60c:	461a      	mov	r2, r3
 800b60e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b612:	441a      	add	r2, r3
 800b614:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b618:	4413      	add	r3, r2
 800b61a:	4299      	cmp	r1, r3
 800b61c:	da5a      	bge.n	800b6d4 <lv_obj_get_scrollbar_area+0x8c4>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b624:	b29a      	uxth	r2, r3
 800b626:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b628:	4413      	add	r3, r2
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b62e:	4413      	add	r3, r2
 800b630:	b29b      	uxth	r3, r3
 800b632:	b21a      	sxth	r2, r3
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b63e:	461c      	mov	r4, r3
 800b640:	2000      	movs	r0, #0
 800b642:	f014 fb95 	bl	801fd70 <lv_disp_get_dpi>
 800b646:	4603      	mov	r3, r0
 800b648:	461a      	mov	r2, r3
 800b64a:	4613      	mov	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	2bef      	cmp	r3, #239	; 0xef
 800b654:	dd10      	ble.n	800b678 <lv_obj_get_scrollbar_area+0x868>
 800b656:	2000      	movs	r0, #0
 800b658:	f014 fb8a 	bl	801fd70 <lv_disp_get_dpi>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	4613      	mov	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	005b      	lsls	r3, r3, #1
 800b668:	3350      	adds	r3, #80	; 0x50
 800b66a:	4a36      	ldr	r2, [pc, #216]	; (800b744 <lv_obj_get_scrollbar_area+0x934>)
 800b66c:	fb82 1203 	smull	r1, r2, r2, r3
 800b670:	1192      	asrs	r2, r2, #6
 800b672:	17db      	asrs	r3, r3, #31
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	e000      	b.n	800b67a <lv_obj_get_scrollbar_area+0x86a>
 800b678:	2301      	movs	r3, #1
 800b67a:	4423      	add	r3, r4
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b682:	4293      	cmp	r3, r2
 800b684:	dd26      	ble.n	800b6d4 <lv_obj_get_scrollbar_area+0x8c4>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b68c:	b29c      	uxth	r4, r3
 800b68e:	2000      	movs	r0, #0
 800b690:	f014 fb6e 	bl	801fd70 <lv_disp_get_dpi>
 800b694:	4603      	mov	r3, r0
 800b696:	461a      	mov	r2, r3
 800b698:	4613      	mov	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4413      	add	r3, r2
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	2bef      	cmp	r3, #239	; 0xef
 800b6a2:	dd11      	ble.n	800b6c8 <lv_obj_get_scrollbar_area+0x8b8>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	f014 fb63 	bl	801fd70 <lv_disp_get_dpi>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	005b      	lsls	r3, r3, #1
 800b6b6:	3350      	adds	r3, #80	; 0x50
 800b6b8:	4a22      	ldr	r2, [pc, #136]	; (800b744 <lv_obj_get_scrollbar_area+0x934>)
 800b6ba:	fb82 1203 	smull	r1, r2, r2, r3
 800b6be:	1192      	asrs	r2, r2, #6
 800b6c0:	17db      	asrs	r3, r3, #31
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	e000      	b.n	800b6ca <lv_obj_get_scrollbar_area+0x8ba>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	4423      	add	r3, r4
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	b21a      	sxth	r2, r3
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b6e8:	1acb      	subs	r3, r1, r3
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	f340 814f 	ble.w	800b98e <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	b21a      	sxth	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b70a:	461c      	mov	r4, r3
 800b70c:	2000      	movs	r0, #0
 800b70e:	f014 fb2f 	bl	801fd70 <lv_disp_get_dpi>
 800b712:	4603      	mov	r3, r0
 800b714:	461a      	mov	r2, r3
 800b716:	4613      	mov	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	2bef      	cmp	r3, #239	; 0xef
 800b720:	dd12      	ble.n	800b748 <lv_obj_get_scrollbar_area+0x938>
 800b722:	2000      	movs	r0, #0
 800b724:	f014 fb24 	bl	801fd70 <lv_disp_get_dpi>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	3350      	adds	r3, #80	; 0x50
 800b736:	4a03      	ldr	r2, [pc, #12]	; (800b744 <lv_obj_get_scrollbar_area+0x934>)
 800b738:	fb82 1203 	smull	r1, r2, r2, r3
 800b73c:	1192      	asrs	r2, r2, #6
 800b73e:	17db      	asrs	r3, r3, #31
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	e002      	b.n	800b74a <lv_obj_get_scrollbar_area+0x93a>
 800b744:	66666667 	.word	0x66666667
 800b748:	2301      	movs	r3, #1
 800b74a:	1ae3      	subs	r3, r4, r3
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b752:	4293      	cmp	r3, r2
 800b754:	f280 811b 	bge.w	800b98e <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b75e:	b29c      	uxth	r4, r3
 800b760:	2000      	movs	r0, #0
 800b762:	f014 fb05 	bl	801fd70 <lv_disp_get_dpi>
 800b766:	4603      	mov	r3, r0
 800b768:	461a      	mov	r2, r3
 800b76a:	4613      	mov	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	2bef      	cmp	r3, #239	; 0xef
 800b774:	dd11      	ble.n	800b79a <lv_obj_get_scrollbar_area+0x98a>
 800b776:	2000      	movs	r0, #0
 800b778:	f014 fafa 	bl	801fd70 <lv_disp_get_dpi>
 800b77c:	4603      	mov	r3, r0
 800b77e:	461a      	mov	r2, r3
 800b780:	4613      	mov	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4413      	add	r3, r2
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	3350      	adds	r3, #80	; 0x50
 800b78a:	4a82      	ldr	r2, [pc, #520]	; (800b994 <lv_obj_get_scrollbar_area+0xb84>)
 800b78c:	fb82 1203 	smull	r1, r2, r2, r3
 800b790:	1192      	asrs	r2, r2, #6
 800b792:	17db      	asrs	r3, r3, #31
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	b29b      	uxth	r3, r3
 800b798:	e000      	b.n	800b79c <lv_obj_get_scrollbar_area+0x98c>
 800b79a:	2301      	movs	r3, #1
 800b79c:	1ae3      	subs	r3, r4, r3
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	b21a      	sxth	r2, r3
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	801a      	strh	r2, [r3, #0]
 800b7a6:	e0f2      	b.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
                    }
                }
            }
            else {
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	8a7b      	ldrh	r3, [r7, #18]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b7b8:	4413      	add	r3, r2
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	b21a      	sxth	r2, r3
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	8afb      	ldrh	r3, [r7, #22]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	b21a      	sxth	r2, r3
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b7ee:	440b      	add	r3, r1
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	da57      	bge.n	800b8a4 <lv_obj_get_scrollbar_area+0xa94>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b7fe:	4413      	add	r3, r2
 800b800:	b29b      	uxth	r3, r3
 800b802:	b21a      	sxth	r2, r3
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b80e:	461c      	mov	r4, r3
 800b810:	2000      	movs	r0, #0
 800b812:	f014 faad 	bl	801fd70 <lv_disp_get_dpi>
 800b816:	4603      	mov	r3, r0
 800b818:	461a      	mov	r2, r3
 800b81a:	4613      	mov	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	2bef      	cmp	r3, #239	; 0xef
 800b824:	dd10      	ble.n	800b848 <lv_obj_get_scrollbar_area+0xa38>
 800b826:	2000      	movs	r0, #0
 800b828:	f014 faa2 	bl	801fd70 <lv_disp_get_dpi>
 800b82c:	4603      	mov	r3, r0
 800b82e:	461a      	mov	r2, r3
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	3350      	adds	r3, #80	; 0x50
 800b83a:	4a56      	ldr	r2, [pc, #344]	; (800b994 <lv_obj_get_scrollbar_area+0xb84>)
 800b83c:	fb82 1203 	smull	r1, r2, r2, r3
 800b840:	1192      	asrs	r2, r2, #6
 800b842:	17db      	asrs	r3, r3, #31
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	e000      	b.n	800b84a <lv_obj_get_scrollbar_area+0xa3a>
 800b848:	2301      	movs	r3, #1
 800b84a:	4423      	add	r3, r4
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b852:	4293      	cmp	r3, r2
 800b854:	dd26      	ble.n	800b8a4 <lv_obj_get_scrollbar_area+0xa94>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b85c:	b29c      	uxth	r4, r3
 800b85e:	2000      	movs	r0, #0
 800b860:	f014 fa86 	bl	801fd70 <lv_disp_get_dpi>
 800b864:	4603      	mov	r3, r0
 800b866:	461a      	mov	r2, r3
 800b868:	4613      	mov	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4413      	add	r3, r2
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	2bef      	cmp	r3, #239	; 0xef
 800b872:	dd11      	ble.n	800b898 <lv_obj_get_scrollbar_area+0xa88>
 800b874:	2000      	movs	r0, #0
 800b876:	f014 fa7b 	bl	801fd70 <lv_disp_get_dpi>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	3350      	adds	r3, #80	; 0x50
 800b888:	4a42      	ldr	r2, [pc, #264]	; (800b994 <lv_obj_get_scrollbar_area+0xb84>)
 800b88a:	fb82 1203 	smull	r1, r2, r2, r3
 800b88e:	1192      	asrs	r2, r2, #6
 800b890:	17db      	asrs	r3, r3, #31
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	b29b      	uxth	r3, r3
 800b896:	e000      	b.n	800b89a <lv_obj_get_scrollbar_area+0xa8a>
 800b898:	2301      	movs	r3, #1
 800b89a:	4423      	add	r3, r4
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	b21a      	sxth	r2, r3
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b8b8:	1ad2      	subs	r2, r2, r3
 800b8ba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	4299      	cmp	r1, r3
 800b8c2:	dd64      	ble.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	b21a      	sxth	r2, r3
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8e4:	461c      	mov	r4, r3
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	f014 fa42 	bl	801fd70 <lv_disp_get_dpi>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	2bef      	cmp	r3, #239	; 0xef
 800b8fa:	dd10      	ble.n	800b91e <lv_obj_get_scrollbar_area+0xb0e>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	f014 fa37 	bl	801fd70 <lv_disp_get_dpi>
 800b902:	4603      	mov	r3, r0
 800b904:	461a      	mov	r2, r3
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	3350      	adds	r3, #80	; 0x50
 800b910:	4a20      	ldr	r2, [pc, #128]	; (800b994 <lv_obj_get_scrollbar_area+0xb84>)
 800b912:	fb82 1203 	smull	r1, r2, r2, r3
 800b916:	1192      	asrs	r2, r2, #6
 800b918:	17db      	asrs	r3, r3, #31
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	e000      	b.n	800b920 <lv_obj_get_scrollbar_area+0xb10>
 800b91e:	2301      	movs	r3, #1
 800b920:	1ae3      	subs	r3, r4, r3
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b928:	4293      	cmp	r3, r2
 800b92a:	da30      	bge.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b932:	b29c      	uxth	r4, r3
 800b934:	2000      	movs	r0, #0
 800b936:	f014 fa1b 	bl	801fd70 <lv_disp_get_dpi>
 800b93a:	4603      	mov	r3, r0
 800b93c:	461a      	mov	r2, r3
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	2bef      	cmp	r3, #239	; 0xef
 800b948:	dd11      	ble.n	800b96e <lv_obj_get_scrollbar_area+0xb5e>
 800b94a:	2000      	movs	r0, #0
 800b94c:	f014 fa10 	bl	801fd70 <lv_disp_get_dpi>
 800b950:	4603      	mov	r3, r0
 800b952:	461a      	mov	r2, r3
 800b954:	4613      	mov	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	3350      	adds	r3, #80	; 0x50
 800b95e:	4a0d      	ldr	r2, [pc, #52]	; (800b994 <lv_obj_get_scrollbar_area+0xb84>)
 800b960:	fb82 1203 	smull	r1, r2, r2, r3
 800b964:	1192      	asrs	r2, r2, #6
 800b966:	17db      	asrs	r3, r3, #31
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	e000      	b.n	800b970 <lv_obj_get_scrollbar_area+0xb60>
 800b96e:	2301      	movs	r3, #1
 800b970:	1ae3      	subs	r3, r4, r3
 800b972:	b29b      	uxth	r3, r3
 800b974:	b21a      	sxth	r2, r3
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	801a      	strh	r2, [r3, #0]
 800b97a:	e008      	b.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800b97c:	bf00      	nop
 800b97e:	e006      	b.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800b980:	bf00      	nop
 800b982:	e004      	b.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
        if(indev == NULL)  return;
 800b984:	bf00      	nop
 800b986:	e002      	b.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
    if(!hor_draw && !ver_draw) return;
 800b988:	bf00      	nop
 800b98a:	e000      	b.n	800b98e <lv_obj_get_scrollbar_area+0xb7e>
        return;
 800b98c:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800b98e:	374c      	adds	r7, #76	; 0x4c
 800b990:	46bd      	mov	sp, r7
 800b992:	bd90      	pop	{r4, r7, pc}
 800b994:	66666667 	.word	0x66666667

0800b998 <lv_obj_scrollbar_invalidate>:

void lv_obj_scrollbar_invalidate(lv_obj_t * obj)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800b9a0:	f107 0208 	add.w	r2, r7, #8
 800b9a4:	f107 0310 	add.w	r3, r7, #16
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff fa30 	bl	800ae10 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800b9b0:	f107 0310 	add.w	r3, r7, #16
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f014 fdf6 	bl	80205a6 <lv_area_get_size>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d107      	bne.n	800b9d0 <lv_obj_scrollbar_invalidate+0x38>
 800b9c0:	f107 0308 	add.w	r3, r7, #8
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f014 fdee 	bl	80205a6 <lv_area_get_size>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d01c      	beq.n	800ba0a <lv_obj_scrollbar_invalidate+0x72>

    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800b9d0:	f107 0310 	add.w	r3, r7, #16
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f014 fde6 	bl	80205a6 <lv_area_get_size>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d005      	beq.n	800b9ec <lv_obj_scrollbar_invalidate+0x54>
 800b9e0:	f107 0310 	add.w	r3, r7, #16
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7fd fe04 	bl	80095f4 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800b9ec:	f107 0308 	add.w	r3, r7, #8
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f014 fdd8 	bl	80205a6 <lv_area_get_size>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d007      	beq.n	800ba0c <lv_obj_scrollbar_invalidate+0x74>
 800b9fc:	f107 0308 	add.w	r3, r7, #8
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7fd fdf6 	bl	80095f4 <lv_obj_invalidate_area>
 800ba08:	e000      	b.n	800ba0c <lv_obj_scrollbar_invalidate+0x74>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800ba0a:	bf00      	nop
}
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <lv_obj_readjust_scroll>:

void lv_obj_readjust_scroll(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	70fb      	strb	r3, [r7, #3]
    /*Be sure the bottom side is not remains scrolled in*/
    /*With snapping the content can't be scrolled in*/
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7fe fd08 	bl	800a434 <lv_obj_get_scroll_snap_y>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d121      	bne.n	800ba6e <lv_obj_readjust_scroll+0x5c>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7fe fd48 	bl	800a4c0 <lv_obj_get_scroll_top>
 800ba30:	4603      	mov	r3, r0
 800ba32:	81fb      	strh	r3, [r7, #14]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7fe fd5b 	bl	800a4f0 <lv_obj_get_scroll_bottom>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	81bb      	strh	r3, [r7, #12]
        if(sb < 0 && st > 0) {
 800ba3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	da13      	bge.n	800ba6e <lv_obj_readjust_scroll+0x5c>
 800ba46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	dd0f      	ble.n	800ba6e <lv_obj_readjust_scroll+0x5c>
            sb = LV_MIN(st, -sb);
 800ba4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ba52:	425a      	negs	r2, r3
 800ba54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	bfa8      	it	ge
 800ba5c:	4613      	movge	r3, r2
 800ba5e:	81bb      	strh	r3, [r7, #12]
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ba66:	2100      	movs	r1, #0
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7fe ffd3 	bl	800aa14 <lv_obj_scroll_by>
        }
    }

    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7fe fcca 	bl	800a408 <lv_obj_get_scroll_snap_x>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d141      	bne.n	800bafe <lv_obj_readjust_scroll+0xec>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7fe fdbe 	bl	800a5fc <lv_obj_get_scroll_left>
 800ba80:	4603      	mov	r3, r0
 800ba82:	817b      	strh	r3, [r7, #10]
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7fe fe5d 	bl	800a744 <lv_obj_get_scroll_right>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	813b      	strh	r3, [r7, #8]
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800ba8e:	2100      	movs	r1, #0
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7fe fc56 	bl	800a342 <lv_obj_get_style_base_dir>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d018      	beq.n	800bace <lv_obj_readjust_scroll+0xbc>
            /*Be sure the left side is not remains scrolled in*/
            if(sr < 0 && sl > 0) {
 800ba9c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	da2c      	bge.n	800bafe <lv_obj_readjust_scroll+0xec>
 800baa4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dd28      	ble.n	800bafe <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sl, -sr);
 800baac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bab0:	425a      	negs	r2, r3
 800bab2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bab6:	4293      	cmp	r3, r2
 800bab8:	bfa8      	it	ge
 800baba:	4613      	movge	r3, r2
 800babc:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800babe:	78fb      	ldrb	r3, [r7, #3]
 800bac0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800bac4:	2200      	movs	r2, #0
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7fe ffa4 	bl	800aa14 <lv_obj_scroll_by>
                sr = LV_MIN(sr, -sl);
                lv_obj_scroll_by(obj, sl, 0, anim_en);
            }
        }
    }
}
 800bacc:	e017      	b.n	800bafe <lv_obj_readjust_scroll+0xec>
            if(sl < 0 && sr > 0) {
 800bace:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	da13      	bge.n	800bafe <lv_obj_readjust_scroll+0xec>
 800bad6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	dd0f      	ble.n	800bafe <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sr, -sl);
 800bade:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bae2:	425a      	negs	r2, r3
 800bae4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bae8:	4293      	cmp	r3, r2
 800baea:	bfa8      	it	ge
 800baec:	4613      	movge	r3, r2
 800baee:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800baf6:	2200      	movs	r2, #0
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7fe ff8b 	bl	800aa14 <lv_obj_scroll_by>
}
 800bafe:	bf00      	nop
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <scroll_x_anim>:
 *   STATIC FUNCTIONS
 **********************/


static void scroll_x_anim(void * obj, int32_t v)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b082      	sub	sp, #8
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7fe fca5 	bl	800a460 <lv_obj_get_scroll_x>
 800bb16:	4603      	mov	r3, r0
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	4413      	add	r3, r2
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	b21b      	sxth	r3, r3
 800bb24:	2200      	movs	r2, #0
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff f928 	bl	800ad7e <_lv_obj_scroll_by_raw>
}
 800bb2e:	bf00      	nop
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <scroll_y_anim>:

static void scroll_y_anim(void * obj, int32_t v)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7fe fca5 	bl	800a490 <lv_obj_get_scroll_y>
 800bb46:	4603      	mov	r3, r0
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	4413      	add	r3, r2
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	b21b      	sxth	r3, r3
 800bb54:	461a      	mov	r2, r3
 800bb56:	2100      	movs	r1, #0
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff f910 	bl	800ad7e <_lv_obj_scroll_by_raw>
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <scroll_anim_ready_cb>:

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2200      	movs	r2, #0
 800bb74:	210a      	movs	r1, #10
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f8 ffbc 	bl	8004af4 <lv_event_send>
}
 800bb7c:	bf00      	nop
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b092      	sub	sp, #72	; 0x48
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
 800bb90:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800bb92:	68b8      	ldr	r0, [r7, #8]
 800bb94:	f002 f9b8 	bl	800df08 <lv_obj_get_parent>
 800bb98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800bb9a:	2110      	movs	r1, #16
 800bb9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb9e:	f7fa f982 	bl	8005ea6 <lv_obj_has_flag>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f083 0301 	eor.w	r3, r3, #1
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f040 829f 	bne.w	800c0ee <scroll_area_into_view+0x56a>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800bbb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbb2:	f7fe fc13 	bl	800a3dc <lv_obj_get_scroll_dir>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    lv_coord_t snap_goal = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t act = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 800bbca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbcc:	f7fe fc32 	bl	800a434 <lv_obj_get_scroll_snap_y>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800bbd6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <scroll_area_into_view+0x62>
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	3314      	adds	r3, #20
 800bbe2:	647b      	str	r3, [r7, #68]	; 0x44
 800bbe4:	e001      	b.n	800bbea <scroll_area_into_view+0x66>
    else area_tmp = area;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800bbea:	2100      	movs	r1, #0
 800bbec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbee:	f7fe fb96 	bl	800a31e <lv_obj_get_style_border_width>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbfa:	f7fe fb24 	bl	800a246 <lv_obj_get_style_pad_top>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc04:	4413      	add	r3, r2
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc0e:	f7fe fb2c 	bl	800a26a <lv_obj_get_style_pad_bottom>
 800bc12:	4603      	mov	r3, r0
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc18:	4413      	add	r3, r2
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800bc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc20:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bc28:	4413      	add	r3, r2
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bc54:	b299      	uxth	r1, r3
 800bc56:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800bc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	1ac3      	subs	r3, r0, r3
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	440b      	add	r3, r1
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	4413      	add	r3, r2
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800bc6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc70:	f7fc ff39 	bl	8008ae6 <lv_obj_get_height>
 800bc74:	4603      	mov	r3, r0
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	853b      	strh	r3, [r7, #40]	; 0x28
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800bc86:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	db07      	blt.n	800bc9e <scroll_area_into_view+0x11a>
 800bc8e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	db03      	blt.n	800bc9e <scroll_area_into_view+0x11a>
 800bc96:	2300      	movs	r3, #0
 800bc98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bc9c:	e02e      	b.n	800bcfc <scroll_area_into_view+0x178>
    else if(top_diff > 0) {
 800bc9e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	dd12      	ble.n	800bccc <scroll_area_into_view+0x148>
        y_scroll = top_diff;
 800bca6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bca8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800bcac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bcae:	f7fe fc07 	bl	800a4c0 <lv_obj_get_scroll_top>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(st - y_scroll < 0) y_scroll = 0;
 800bcb6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800bcba:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	da1b      	bge.n	800bcfc <scroll_area_into_view+0x178>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bcca:	e017      	b.n	800bcfc <scroll_area_into_view+0x178>
    }
    else if(bottom_diff > 0) {
 800bccc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dd13      	ble.n	800bcfc <scroll_area_into_view+0x178>
        y_scroll = -bottom_diff;
 800bcd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bcd6:	425b      	negs	r3, r3
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800bcde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bce0:	f7fe fc06 	bl	800a4f0 <lv_obj_get_scroll_bottom>
 800bce4:	4603      	mov	r3, r0
 800bce6:	84fb      	strh	r3, [r7, #38]	; 0x26
        if(sb + y_scroll < 0) y_scroll = 0;
 800bce8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bcec:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800bcf0:	4413      	add	r3, r2
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	da02      	bge.n	800bcfc <scroll_area_into_view+0x178>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    switch(snap_y) {
 800bcfc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bd00:	2b03      	cmp	r3, #3
 800bd02:	d03e      	beq.n	800bd82 <scroll_area_into_view+0x1fe>
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	dc6e      	bgt.n	800bde6 <scroll_area_into_view+0x262>
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d002      	beq.n	800bd12 <scroll_area_into_view+0x18e>
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d01c      	beq.n	800bd4a <scroll_area_into_view+0x1c6>
 800bd10:	e069      	b.n	800bde6 <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
 800bd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd14:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bd1c:	4413      	add	r3, r2
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y1 + y_scroll;
 800bd22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd2e:	4413      	add	r3, r2
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800bd34:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bd36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd40:	4413      	add	r3, r2
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800bd48:	e04d      	b.n	800bde6 <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
 800bd4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd4c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y2 + y_scroll;
 800bd5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd66:	4413      	add	r3, r2
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800bd6c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bd6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd78:	4413      	add	r3, r2
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800bd80:	e031      	b.n	800bde6 <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800bd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd84:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bd8c:	4413      	add	r3, r2
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	da00      	bge.n	800bd9a <scroll_area_into_view+0x216>
 800bd98:	3301      	adds	r3, #1
 800bd9a:	105b      	asrs	r3, r3, #1
 800bd9c:	b21b      	sxth	r3, r3
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	4413      	add	r3, r2
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800bda6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bda8:	f7fe f9c9 	bl	800a13e <lv_area_get_height>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	da00      	bge.n	800bdb4 <scroll_area_into_view+0x230>
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	105b      	asrs	r3, r3, #1
 800bdb6:	b21b      	sxth	r3, r3
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdca:	4413      	add	r3, r2
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800bdd0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bdd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bddc:	4413      	add	r3, r2
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800bde4:	bf00      	nop
    }

    lv_coord_t x_scroll = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800bdec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdee:	f7fe fb0b 	bl	800a408 <lv_obj_get_scroll_snap_x>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800bdf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <scroll_area_into_view+0x284>
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	3314      	adds	r3, #20
 800be04:	647b      	str	r3, [r7, #68]	; 0x44
 800be06:	e001      	b.n	800be0c <scroll_area_into_view+0x288>
    else area_tmp = area;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800be0c:	2100      	movs	r1, #0
 800be0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be10:	f7fe fa3d 	bl	800a28e <lv_obj_get_style_pad_left>
 800be14:	4603      	mov	r3, r0
 800be16:	b29a      	uxth	r2, r3
 800be18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be1a:	4413      	add	r3, r2
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	843b      	strh	r3, [r7, #32]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800be20:	2100      	movs	r1, #0
 800be22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be24:	f7fe fa45 	bl	800a2b2 <lv_obj_get_style_pad_right>
 800be28:	4603      	mov	r3, r0
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be2e:	4413      	add	r3, r2
 800be30:	b29b      	uxth	r3, r3
 800be32:	83fb      	strh	r3, [r7, #30]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800be34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	8c3b      	ldrh	r3, [r7, #32]
 800be3e:	4413      	add	r3, r2
 800be40:	b29a      	uxth	r2, r3
 800be42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be48:	b29b      	uxth	r3, r3
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be54:	b29b      	uxth	r3, r3
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	b29b      	uxth	r3, r3
 800be5a:	83bb      	strh	r3, [r7, #28]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be62:	b29a      	uxth	r2, r3
 800be64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be6a:	b299      	uxth	r1, r3
 800be6c:	8bf8      	ldrh	r0, [r7, #30]
 800be6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be70:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800be74:	b29b      	uxth	r3, r3
 800be76:	1ac3      	subs	r3, r0, r3
 800be78:	b29b      	uxth	r3, r3
 800be7a:	440b      	add	r3, r1
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	4413      	add	r3, r2
 800be80:	b29b      	uxth	r3, r3
 800be82:	837b      	strh	r3, [r7, #26]
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800be84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	db07      	blt.n	800be9c <scroll_area_into_view+0x318>
 800be8c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be90:	2b00      	cmp	r3, #0
 800be92:	db03      	blt.n	800be9c <scroll_area_into_view+0x318>
 800be94:	2300      	movs	r3, #0
 800be96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800be9a:	e02e      	b.n	800befa <scroll_area_into_view+0x376>
    else if(left_diff > 0) {
 800be9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	dd12      	ble.n	800beca <scroll_area_into_view+0x346>
        x_scroll = left_diff;
 800bea4:	8bbb      	ldrh	r3, [r7, #28]
 800bea6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800beaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800beac:	f7fe fba6 	bl	800a5fc <lv_obj_get_scroll_left>
 800beb0:	4603      	mov	r3, r0
 800beb2:	82fb      	strh	r3, [r7, #22]
        if(sl - x_scroll < 0) x_scroll = 0;
 800beb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800beb8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	da1b      	bge.n	800befa <scroll_area_into_view+0x376>
 800bec2:	2300      	movs	r3, #0
 800bec4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bec8:	e017      	b.n	800befa <scroll_area_into_view+0x376>
    }
    else if(right_diff > 0) {
 800beca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	dd13      	ble.n	800befa <scroll_area_into_view+0x376>
        x_scroll = -right_diff;
 800bed2:	8b7b      	ldrh	r3, [r7, #26]
 800bed4:	425b      	negs	r3, r3
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800bedc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bede:	f7fe fc31 	bl	800a744 <lv_obj_get_scroll_right>
 800bee2:	4603      	mov	r3, r0
 800bee4:	833b      	strh	r3, [r7, #24]
        if(sr + x_scroll < 0) x_scroll = 0;
 800bee6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800beea:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800beee:	4413      	add	r3, r2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	da02      	bge.n	800befa <scroll_area_into_view+0x376>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800befa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800befc:	f7fc fde5 	bl	8008aca <lv_obj_get_width>
 800bf00:	4603      	mov	r3, r0
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	8c3b      	ldrh	r3, [r7, #32]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	8bfb      	ldrh	r3, [r7, #30]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	82bb      	strh	r3, [r7, #20]
    switch(snap_x) {
 800bf12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf16:	2b03      	cmp	r3, #3
 800bf18:	d03e      	beq.n	800bf98 <scroll_area_into_view+0x414>
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	dc6e      	bgt.n	800bffc <scroll_area_into_view+0x478>
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d002      	beq.n	800bf28 <scroll_area_into_view+0x3a4>
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d01c      	beq.n	800bf60 <scroll_area_into_view+0x3dc>
 800bf26:	e069      	b.n	800bffc <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
 800bf28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf2a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	8c3b      	ldrh	r3, [r7, #32]
 800bf32:	4413      	add	r3, r2
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x1 + x_scroll;
 800bf38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf44:	4413      	add	r3, r2
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800bf4a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bf4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf56:	4413      	add	r3, r2
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800bf5e:	e04d      	b.n	800bffc <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
 800bf60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf62:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	8bfb      	ldrh	r3, [r7, #30]
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x2 + x_scroll;
 800bf70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf7c:	4413      	add	r3, r2
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800bf82:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bf84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf8e:	4413      	add	r3, r2
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800bf96:	e031      	b.n	800bffc <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800bf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	8c3b      	ldrh	r3, [r7, #32]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	da00      	bge.n	800bfb0 <scroll_area_into_view+0x42c>
 800bfae:	3301      	adds	r3, #1
 800bfb0:	105b      	asrs	r3, r3, #1
 800bfb2:	b21b      	sxth	r3, r3
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	4413      	add	r3, r2
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800bfbc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bfbe:	f7fe f8a7 	bl	800a110 <lv_area_get_width>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	da00      	bge.n	800bfca <scroll_area_into_view+0x446>
 800bfc8:	3301      	adds	r3, #1
 800bfca:	105b      	asrs	r3, r3, #1
 800bfcc:	b21b      	sxth	r3, r3
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	4413      	add	r3, r2
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bfe0:	4413      	add	r3, r2
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800bfe6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bfe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bff2:	4413      	add	r3, r2
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800bffa:	bf00      	nop
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800bffc:	493f      	ldr	r1, [pc, #252]	; (800c0fc <scroll_area_into_view+0x578>)
 800bffe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c000:	f014 f812 	bl	8020028 <lv_anim_del>
 800c004:	4603      	mov	r3, r0
 800c006:	74fb      	strb	r3, [r7, #19]
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800c008:	493d      	ldr	r1, [pc, #244]	; (800c100 <scroll_area_into_view+0x57c>)
 800c00a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c00c:	f014 f80c 	bl	8020028 <lv_anim_del>
 800c010:	4603      	mov	r3, r0
 800c012:	74bb      	strb	r3, [r7, #18]
    if(y_del || x_del) {
 800c014:	7cfb      	ldrb	r3, [r7, #19]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d102      	bne.n	800c020 <scroll_area_into_view+0x49c>
 800c01a:	7cbb      	ldrb	r3, [r7, #18]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d009      	beq.n	800c034 <scroll_area_into_view+0x4b0>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800c020:	2200      	movs	r2, #0
 800c022:	210a      	movs	r1, #10
 800c024:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c026:	f7f8 fd65 	bl	8004af4 <lv_event_send>
 800c02a:	4603      	mov	r3, r0
 800c02c:	747b      	strb	r3, [r7, #17]
        if(res != LV_RES_OK) return;
 800c02e:	7c7b      	ldrb	r3, [r7, #17]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d15e      	bne.n	800c0f2 <scroll_area_into_view+0x56e>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800c034:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d106      	bne.n	800c04e <scroll_area_into_view+0x4ca>
 800c040:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	da02      	bge.n	800c04e <scroll_area_into_view+0x4ca>
 800c048:	2300      	movs	r3, #0
 800c04a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800c04e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b00      	cmp	r3, #0
 800c058:	d106      	bne.n	800c068 <scroll_area_into_view+0x4e4>
 800c05a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dd02      	ble.n	800c068 <scroll_area_into_view+0x4e4>
 800c062:	2300      	movs	r3, #0
 800c064:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800c068:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <scroll_area_into_view+0x4fe>
 800c074:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800c078:	2b00      	cmp	r3, #0
 800c07a:	da02      	bge.n	800c082 <scroll_area_into_view+0x4fe>
 800c07c:	2300      	movs	r3, #0
 800c07e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800c082:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c086:	f003 0308 	and.w	r3, r3, #8
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d106      	bne.n	800c09c <scroll_area_into_view+0x518>
 800c08e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800c092:	2b00      	cmp	r3, #0
 800c094:	dd02      	ble.n	800c09c <scroll_area_into_view+0x518>
 800c096:	2300      	movs	r3, #0
 800c098:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	78fb      	ldrb	r3, [r7, #3]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d002      	beq.n	800c0b0 <scroll_area_into_view+0x52c>
 800c0aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c0ae:	e000      	b.n	800c0b2 <scroll_area_into_view+0x52e>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	4413      	add	r3, r2
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	b21a      	sxth	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	801a      	strh	r2, [r3, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	78fb      	ldrb	r3, [r7, #3]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <scroll_area_into_view+0x54c>
 800c0ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0ce:	e000      	b.n	800c0d2 <scroll_area_into_view+0x54e>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4413      	add	r3, r2
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	b21a      	sxth	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	805a      	strh	r2, [r3, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800c0dc:	78fb      	ldrb	r3, [r7, #3]
 800c0de:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800c0e2:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 800c0e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c0e8:	f7fe fc94 	bl	800aa14 <lv_obj_scroll_by>
 800c0ec:	e002      	b.n	800c0f4 <scroll_area_into_view+0x570>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800c0ee:	bf00      	nop
 800c0f0:	e000      	b.n	800c0f4 <scroll_area_into_view+0x570>
        if(res != LV_RES_OK) return;
 800c0f2:	bf00      	nop
}
 800c0f4:	3748      	adds	r7, #72	; 0x48
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	0800bb37 	.word	0x0800bb37
 800c100:	0800bb07 	.word	0x0800bb07

0800c104 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	7138      	strb	r0, [r7, #4]
 800c10c:	7039      	strb	r1, [r7, #0]
 800c10e:	4613      	mov	r3, r2
 800c110:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800c112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c116:	2b00      	cmp	r3, #0
 800c118:	da01      	bge.n	800c11e <lv_color_mix+0x1a>
 800c11a:	793b      	ldrb	r3, [r7, #4]
 800c11c:	e000      	b.n	800c120 <lv_color_mix+0x1c>
 800c11e:	783b      	ldrb	r3, [r7, #0]
 800c120:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 800c122:	7b3b      	ldrb	r3, [r7, #12]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <lv_anim_set_var>:
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
    a->var = var;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	601a      	str	r2, [r3, #0]
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <lv_anim_set_exec_cb>:
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	605a      	str	r2, [r3, #4]
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <lv_anim_set_time>:
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <lv_anim_set_delay>:
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	425a      	negs	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c196:	bf00      	nop
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <lv_anim_set_values>:
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c1c0:	bf00      	nop
 800c1c2:	3714      	adds	r7, #20
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <lv_anim_set_path_cb>:
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	61da      	str	r2, [r3, #28]
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <lv_anim_set_start_cb>:
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	609a      	str	r2, [r3, #8]
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <lv_anim_set_ready_cb>:
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	60da      	str	r2, [r3, #12]
}
 800c214:	bf00      	nop
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <lv_anim_set_early_apply>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	70fb      	strb	r3, [r7, #3]
    a->early_apply = en;
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c232:	78f9      	ldrb	r1, [r7, #3]
 800c234:	f361 0300 	bfi	r3, r1, #0, #1
 800c238:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <lv_bidi_calculate_align+0x1a>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2201      	movs	r2, #1
 800c260:	701a      	strb	r2, [r3, #0]
}
 800c262:	bf00      	nop
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <lv_style_prop_has_flag>:
 * @param prop Property ID
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b082      	sub	sp, #8
 800c272:	af00      	add	r7, sp, #0
 800c274:	4603      	mov	r3, r0
 800c276:	460a      	mov	r2, r1
 800c278:	80fb      	strh	r3, [r7, #6]
 800c27a:	4613      	mov	r3, r2
 800c27c:	717b      	strb	r3, [r7, #5]
    return _lv_style_prop_lookup_flags(prop) & flag;
 800c27e:	88fb      	ldrh	r3, [r7, #6]
 800c280:	4618      	mov	r0, r3
 800c282:	f016 fde9 	bl	8022e58 <_lv_style_prop_lookup_flags>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	797b      	ldrb	r3, [r7, #5]
 800c28c:	4013      	ands	r3, r2
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b00      	cmp	r3, #0
 800c292:	bf14      	ite	ne
 800c294:	2301      	movne	r3, #1
 800c296:	2300      	moveq	r3, #0
 800c298:	b2db      	uxtb	r3, r3
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <lv_obj_get_style_width>:
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b084      	sub	sp, #16
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fb1d 	bl	800c8f0 <lv_obj_get_style_prop>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	b21b      	sxth	r3, r3
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <lv_obj_get_style_height>:
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b084      	sub	sp, #16
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800c2d0:	2204      	movs	r2, #4
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fb0b 	bl	800c8f0 <lv_obj_get_style_prop>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	b21b      	sxth	r3, r3
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <lv_obj_get_style_transform_zoom>:
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800c2f4:	226c      	movs	r2, #108	; 0x6c
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 faf9 	bl	800c8f0 <lv_obj_get_style_prop>
 800c2fe:	4603      	mov	r3, r0
 800c300:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	b21b      	sxth	r3, r3
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <lv_obj_get_style_transform_angle>:
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800c318:	226d      	movs	r2, #109	; 0x6d
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fae7 	bl	800c8f0 <lv_obj_get_style_prop>
 800c322:	4603      	mov	r3, r0
 800c324:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	b21b      	sxth	r3, r3
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <lv_obj_get_style_text_align>:
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800c33c:	225b      	movs	r2, #91	; 0x5b
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fad5 	bl	800c8f0 <lv_obj_get_style_prop>
 800c346:	4603      	mov	r3, r0
 800c348:	60fb      	str	r3, [r7, #12]
    return (lv_text_align_t)v.num;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	b2db      	uxtb	r3, r3
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <lv_obj_get_style_opa>:
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800c360:	2260      	movs	r2, #96	; 0x60
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fac3 	bl	800c8f0 <lv_obj_get_style_prop>
 800c36a:	4603      	mov	r3, r0
 800c36c:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	b2db      	uxtb	r3, r3
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <lv_obj_get_style_color_filter_dsc>:
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b084      	sub	sp, #16
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800c384:	2261      	movs	r2, #97	; 0x61
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fab1 	bl	800c8f0 <lv_obj_get_style_prop>
 800c38e:	4603      	mov	r3, r0
 800c390:	60fb      	str	r3, [r7, #12]
    return (const lv_color_filter_dsc_t *)v.ptr;
 800c392:	68fb      	ldr	r3, [r7, #12]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <lv_obj_get_style_color_filter_opa>:
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800c3a6:	2262      	movs	r2, #98	; 0x62
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 faa0 	bl	800c8f0 <lv_obj_get_style_prop>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	b2db      	uxtb	r3, r3
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <lv_obj_get_style_blend_mode>:
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800c3ca:	2267      	movs	r2, #103	; 0x67
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fa8e 	bl	800c8f0 <lv_obj_get_style_prop>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	b2db      	uxtb	r3, r3
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <lv_obj_get_style_base_dir>:
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800c3ee:	2216      	movs	r2, #22
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fa7c 	bl	800c8f0 <lv_obj_get_style_prop>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	b2db      	uxtb	r3, r3
}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <_lv_obj_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_obj_style_init(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800c40c:	2114      	movs	r1, #20
 800c40e:	4802      	ldr	r0, [pc, #8]	; (800c418 <_lv_obj_style_init+0x10>)
 800c410:	f015 f9d9 	bl	80217c6 <_lv_ll_init>
}
 800c414:	bf00      	nop
 800c416:	bd80      	pop	{r7, pc}
 800c418:	200008a0 	.word	0x200008a0

0800c41c <lv_obj_add_style>:

void lv_obj_add_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800c428:	2300      	movs	r3, #0
 800c42a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c42e:	6879      	ldr	r1, [r7, #4]
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f001 f9a1 	bl	800d778 <trans_del>

    uint32_t i;
    /*Go after the transition and local styles*/
    for(i = 0; i < obj->style_cnt; i++) {
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
 800c43a:	e01a      	b.n	800c472 <lv_obj_add_style+0x56>
        if(obj->styles[i].is_trans) continue;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	68da      	ldr	r2, [r3, #12]
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	4413      	add	r3, r2
 800c446:	79db      	ldrb	r3, [r3, #7]
 800c448:	f003 0302 	and.w	r3, r3, #2
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10b      	bne.n	800c46a <lv_obj_add_style+0x4e>
        if(obj->styles[i].is_local) continue;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	68da      	ldr	r2, [r3, #12]
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	4413      	add	r3, r2
 800c45c:	79db      	ldrb	r3, [r3, #7]
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00e      	beq.n	800c486 <lv_obj_add_style+0x6a>
 800c468:	e000      	b.n	800c46c <lv_obj_add_style+0x50>
        if(obj->styles[i].is_trans) continue;
 800c46a:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	3301      	adds	r3, #1
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c476:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	461a      	mov	r2, r3
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	4293      	cmp	r3, r2
 800c482:	d3db      	bcc.n	800c43c <lv_obj_add_style+0x20>
 800c484:	e000      	b.n	800c488 <lv_obj_add_style+0x6c>
        break;
 800c486:	bf00      	nop
    }

    /*Now `i` is at the first normal style. Insert the new style before this*/

    /*Allocate space for the new style and shift the rest of the style to the end*/
    obj->style_cnt++;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c48c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c490:	b2db      	uxtb	r3, r3
 800c492:	3301      	adds	r3, #1
 800c494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c498:	b2d9      	uxtb	r1, r3
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c49e:	f361 03c8 	bfi	r3, r1, #3, #6
 800c4a2:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c4ac:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	f015 fc80 	bl	8021dbc <lv_mem_realloc>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	60da      	str	r2, [r3, #12]

    uint32_t j;
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c4c6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	613b      	str	r3, [r7, #16]
 800c4d0:	e014      	b.n	800c4fc <lv_obj_add_style+0xe0>
        obj->styles[j] = obj->styles[j - 1];
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	6939      	ldr	r1, [r7, #16]
 800c4d8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c4dc:	440b      	add	r3, r1
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	18d1      	adds	r1, r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	68da      	ldr	r2, [r3, #12]
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	4413      	add	r3, r2
 800c4ec:	460a      	mov	r2, r1
 800c4ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c4f2:	e883 0003 	stmia.w	r3, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	613b      	str	r3, [r7, #16]
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	429a      	cmp	r2, r3
 800c502:	d8e6      	bhi.n	800c4d2 <lv_obj_add_style+0xb6>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68da      	ldr	r2, [r3, #12]
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	4413      	add	r3, r2
 800c50e:	2108      	movs	r1, #8
 800c510:	4618      	mov	r0, r3
 800c512:	f016 f829 	bl	8022568 <lv_memset_00>
    obj->styles[i].style = style;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	68da      	ldr	r2, [r3, #12]
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	4413      	add	r3, r2
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	601a      	str	r2, [r3, #0]
    obj->styles[i].selector = selector;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	68da      	ldr	r2, [r3, #12]
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	441a      	add	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800c534:	6853      	ldr	r3, [r2, #4]
 800c536:	f361 0317 	bfi	r3, r1, #0, #24
 800c53a:	6053      	str	r3, [r2, #4]

    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 800c53c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c540:	6879      	ldr	r1, [r7, #4]
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f000 f8fa 	bl	800c73c <lv_obj_refresh_style>
}
 800c548:	bf00      	nop
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <lv_obj_remove_style>:

void lv_obj_remove_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b08c      	sub	sp, #48	; 0x30
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
    lv_state_t state = lv_obj_style_get_selector_state(selector);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fe35 	bl	800d1cc <lv_obj_style_get_selector_state>
 800c562:	4603      	mov	r3, r0
 800c564:	83fb      	strh	r3, [r7, #30]
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fe3c 	bl	800d1e4 <lv_obj_style_get_selector_part>
 800c56c:	61b8      	str	r0, [r7, #24]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800c56e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c572:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d005      	beq.n	800c586 <lv_obj_remove_style+0x36>
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	7adb      	ldrb	r3, [r3, #11]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <lv_obj_remove_style+0x36>
 800c582:	2300      	movs	r3, #0
 800c584:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint32_t i = 0;
 800c586:	2300      	movs	r3, #0
 800c588:	62bb      	str	r3, [r7, #40]	; 0x28
    bool deleted = false;
 800c58a:	2300      	movs	r3, #0
 800c58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800c590:	e0b9      	b.n	800c706 <lv_obj_remove_style+0x1b6>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	68da      	ldr	r2, [r3, #12]
 800c596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	4413      	add	r3, r2
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fe12 	bl	800d1cc <lv_obj_style_get_selector_state>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	82fb      	strh	r3, [r7, #22]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	68da      	ldr	r2, [r3, #12]
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	00db      	lsls	r3, r3, #3
 800c5b4:	4413      	add	r3, r2
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f000 fe11 	bl	800d1e4 <lv_obj_style_get_selector_part>
 800c5c2:	6138      	str	r0, [r7, #16]
        if((state != LV_STATE_ANY && state_act != state) ||
 800c5c4:	8bfb      	ldrh	r3, [r7, #30]
 800c5c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d003      	beq.n	800c5d6 <lv_obj_remove_style+0x86>
 800c5ce:	8afa      	ldrh	r2, [r7, #22]
 800c5d0:	8bfb      	ldrh	r3, [r7, #30]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d113      	bne.n	800c5fe <lv_obj_remove_style+0xae>
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c5dc:	d003      	beq.n	800c5e6 <lv_obj_remove_style+0x96>
           (part != LV_PART_ANY && part_act != part) ||
 800c5de:	693a      	ldr	r2, [r7, #16]
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d10b      	bne.n	800c5fe <lv_obj_remove_style+0xae>
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00c      	beq.n	800c606 <lv_obj_remove_style+0xb6>
           (style != NULL && style != obj->styles[i].style)) {
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	68da      	ldr	r2, [r3, #12]
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	00db      	lsls	r3, r3, #3
 800c5f4:	4413      	add	r3, r2
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68ba      	ldr	r2, [r7, #8]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d003      	beq.n	800c606 <lv_obj_remove_style+0xb6>
            i++;
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	3301      	adds	r3, #1
 800c602:	62bb      	str	r3, [r7, #40]	; 0x28
            continue;
 800c604:	e07f      	b.n	800c706 <lv_obj_remove_style+0x1b6>
        }

        if(obj->styles[i].is_trans) {
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	68da      	ldr	r2, [r3, #12]
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	4413      	add	r3, r2
 800c610:	79db      	ldrb	r3, [r3, #7]
 800c612:	f003 0302 	and.w	r3, r3, #2
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d006      	beq.n	800c62a <lv_obj_remove_style+0xda>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800c61c:	2300      	movs	r3, #0
 800c61e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c622:	69b9      	ldr	r1, [r7, #24]
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f001 f8a7 	bl	800d778 <trans_del>
        }

        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	68da      	ldr	r2, [r3, #12]
 800c62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	4413      	add	r3, r2
 800c634:	79db      	ldrb	r3, [r3, #7]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d10a      	bne.n	800c656 <lv_obj_remove_style+0x106>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	68da      	ldr	r2, [r3, #12]
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	4413      	add	r3, r2
 800c64a:	79db      	ldrb	r3, [r3, #7]
 800c64c:	f003 0302 	and.w	r3, r3, #2
 800c650:	b2db      	uxtb	r3, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	d018      	beq.n	800c688 <lv_obj_remove_style+0x138>
            lv_style_reset(obj->styles[i].style);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	4413      	add	r3, r2
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4618      	mov	r0, r3
 800c664:	f016 f994 	bl	8022990 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	68da      	ldr	r2, [r3, #12]
 800c66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	4413      	add	r3, r2
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4618      	mov	r0, r3
 800c676:	f015 fb73 	bl	8021d60 <lv_mem_free>
            obj->styles[i].style = NULL;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	68da      	ldr	r2, [r3, #12]
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	00db      	lsls	r3, r3, #3
 800c682:	4413      	add	r3, r2
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]
        }

        /*Shift the styles after `i` by one*/
        uint32_t j;
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	623b      	str	r3, [r7, #32]
 800c68c:	e012      	b.n	800c6b4 <lv_obj_remove_style+0x164>
            obj->styles[j] = obj->styles[j + 1];
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	68da      	ldr	r2, [r3, #12]
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	3301      	adds	r3, #1
 800c696:	00db      	lsls	r3, r3, #3
 800c698:	18d1      	adds	r1, r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	68da      	ldr	r2, [r3, #12]
 800c69e:	6a3b      	ldr	r3, [r7, #32]
 800c6a0:	00db      	lsls	r3, r3, #3
 800c6a2:	4413      	add	r3, r2
 800c6a4:	460a      	mov	r2, r1
 800c6a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6aa:	e883 0003 	stmia.w	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800c6ae:	6a3b      	ldr	r3, [r7, #32]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	623b      	str	r3, [r7, #32]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c6b8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	6a3a      	ldr	r2, [r7, #32]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d3e3      	bcc.n	800c68e <lv_obj_remove_style+0x13e>
        }

        obj->style_cnt--;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c6ca:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	333f      	adds	r3, #63	; 0x3f
 800c6d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6d6:	b2d9      	uxtb	r1, r3
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c6dc:	f361 03c8 	bfi	r3, r1, #3, #6
 800c6e0:	8453      	strh	r3, [r2, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c6ea:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	f015 fb61 	bl	8021dbc <lv_mem_realloc>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	60da      	str	r2, [r3, #12]

        deleted = true;
 800c700:	2301      	movs	r3, #1
 800c702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c70a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	461a      	mov	r2, r3
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	4293      	cmp	r3, r2
 800c716:	f4ff af3c 	bcc.w	800c592 <lv_obj_remove_style+0x42>
        /*The style from the current `i` index is removed, so `i` points to the next style.
         *Therefore it doesn't needs to be incremented*/
    }
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800c71a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d008      	beq.n	800c734 <lv_obj_remove_style+0x1e4>
 800c722:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c724:	2b00      	cmp	r3, #0
 800c726:	d005      	beq.n	800c734 <lv_obj_remove_style+0x1e4>
        lv_obj_refresh_style(obj, part, prop);
 800c728:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c72a:	461a      	mov	r2, r3
 800c72c:	69b9      	ldr	r1, [r7, #24]
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f000 f804 	bl	800c73c <lv_obj_refresh_style>
    }
}
 800c734:	bf00      	nop
 800c736:	3730      	adds	r7, #48	; 0x30
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <lv_obj_refresh_style>:
        d = lv_disp_get_next(d);
    }
}

void lv_obj_refresh_style(lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	4613      	mov	r3, r2
 800c748:	80fb      	strh	r3, [r7, #6]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!style_refr) return;
 800c74a:	4b60      	ldr	r3, [pc, #384]	; (800c8cc <lv_obj_refresh_style+0x190>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	f083 0301 	eor.w	r3, r3, #1
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	f040 80b4 	bne.w	800c8c2 <lv_obj_refresh_style+0x186>

    lv_obj_invalidate(obj);
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f7fc ff7f 	bl	800965e <lv_obj_invalidate>

    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800c760:	68b8      	ldr	r0, [r7, #8]
 800c762:	f000 fd3f 	bl	800d1e4 <lv_obj_style_get_selector_part>
 800c766:	61f8      	str	r0, [r7, #28]

    bool is_layout_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYOUT_REFR);
 800c768:	88fb      	ldrh	r3, [r7, #6]
 800c76a:	2104      	movs	r1, #4
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff fd7e 	bl	800c26e <lv_style_prop_has_flag>
 800c772:	4603      	mov	r3, r0
 800c774:	76fb      	strb	r3, [r7, #27]
    bool is_ext_draw = lv_style_prop_has_flag(prop, LV_STYLE_PROP_EXT_DRAW);
 800c776:	88fb      	ldrh	r3, [r7, #6]
 800c778:	2102      	movs	r1, #2
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7ff fd77 	bl	800c26e <lv_style_prop_has_flag>
 800c780:	4603      	mov	r3, r0
 800c782:	76bb      	strb	r3, [r7, #26]
    bool is_inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800c784:	88fb      	ldrh	r3, [r7, #6]
 800c786:	2101      	movs	r1, #1
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff fd70 	bl	800c26e <lv_style_prop_has_flag>
 800c78e:	4603      	mov	r3, r0
 800c790:	767b      	strb	r3, [r7, #25]
    bool is_layer_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYER_REFR);
 800c792:	88fb      	ldrh	r3, [r7, #6]
 800c794:	2110      	movs	r1, #16
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff fd69 	bl	800c26e <lv_style_prop_has_flag>
 800c79c:	4603      	mov	r3, r0
 800c79e:	763b      	strb	r3, [r7, #24]

    if(is_layout_refr) {
 800c7a0:	7efb      	ldrb	r3, [r7, #27]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d022      	beq.n	800c7ec <lv_obj_refresh_style+0xb0>
        if(part == LV_PART_ANY ||
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c7ac:	d016      	beq.n	800c7dc <lv_obj_refresh_style+0xa0>
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d013      	beq.n	800c7dc <lv_obj_refresh_style+0xa0>
           part == LV_PART_MAIN ||
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f7ff fd85 	bl	800c2c6 <lv_obj_get_style_height>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	461a      	mov	r2, r3
           part == LV_PART_MAIN ||
 800c7c0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d009      	beq.n	800c7dc <lv_obj_refresh_style+0xa0>
           lv_obj_get_style_width(obj, 0) == LV_SIZE_CONTENT) {
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7ff fd69 	bl	800c2a2 <lv_obj_get_style_width>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	461a      	mov	r2, r3
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800c7d4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d107      	bne.n	800c7ec <lv_obj_refresh_style+0xb0>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800c7dc:	2200      	movs	r2, #0
 800c7de:	212a      	movs	r1, #42	; 0x2a
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7f8 f987 	bl	8004af4 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f7fc f90c 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
        }
    }
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c7f2:	d002      	beq.n	800c7fa <lv_obj_refresh_style+0xbe>
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d111      	bne.n	800c81e <lv_obj_refresh_style+0xe2>
 800c7fa:	88fb      	ldrh	r3, [r7, #6]
 800c7fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c800:	4293      	cmp	r3, r2
 800c802:	d002      	beq.n	800c80a <lv_obj_refresh_style+0xce>
 800c804:	7efb      	ldrb	r3, [r7, #27]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d009      	beq.n	800c81e <lv_obj_refresh_style+0xe2>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f001 fb7c 	bl	800df08 <lv_obj_get_parent>
 800c810:	6178      	str	r0, [r7, #20]
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <lv_obj_refresh_style+0xe2>
 800c818:	6978      	ldr	r0, [r7, #20]
 800c81a:	f7fc f8f3 	bl	8008a04 <lv_obj_mark_layout_as_dirty>
    }

    /*Cache the layer type*/
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c824:	d002      	beq.n	800c82c <lv_obj_refresh_style+0xf0>
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d126      	bne.n	800c87a <lv_obj_refresh_style+0x13e>
 800c82c:	7e3b      	ldrb	r3, [r7, #24]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d023      	beq.n	800c87a <lv_obj_refresh_style+0x13e>
        lv_layer_type_t layer_type = calculate_layer_type(obj);
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f001 fa66 	bl	800dd04 <calculate_layer_type>
 800c838:	4603      	mov	r3, r0
 800c83a:	74fb      	strb	r3, [r7, #19]
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00a      	beq.n	800c85a <lv_obj_refresh_style+0x11e>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	689a      	ldr	r2, [r3, #8]
 800c848:	7cfb      	ldrb	r3, [r7, #19]
 800c84a:	f003 0303 	and.w	r3, r3, #3
 800c84e:	b2d9      	uxtb	r1, r3
 800c850:	7e93      	ldrb	r3, [r2, #26]
 800c852:	f361 1387 	bfi	r3, r1, #6, #2
 800c856:	7693      	strb	r3, [r2, #26]
 800c858:	e00f      	b.n	800c87a <lv_obj_refresh_style+0x13e>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800c85a:	7cfb      	ldrb	r3, [r7, #19]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00c      	beq.n	800c87a <lv_obj_refresh_style+0x13e>
            lv_obj_allocate_spec_attr(obj);
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f7f9 fb69 	bl	8005f38 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	689a      	ldr	r2, [r3, #8]
 800c86a:	7cfb      	ldrb	r3, [r7, #19]
 800c86c:	f003 0303 	and.w	r3, r3, #3
 800c870:	b2d9      	uxtb	r1, r3
 800c872:	7e93      	ldrb	r3, [r2, #26]
 800c874:	f361 1387 	bfi	r3, r1, #6, #2
 800c878:	7693      	strb	r3, [r2, #26]
        }
    }

    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800c87a:	88fb      	ldrh	r3, [r7, #6]
 800c87c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c880:	4293      	cmp	r3, r2
 800c882:	d002      	beq.n	800c88a <lv_obj_refresh_style+0x14e>
 800c884:	7ebb      	ldrb	r3, [r7, #26]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d002      	beq.n	800c890 <lv_obj_refresh_style+0x154>
        lv_obj_refresh_ext_draw_size(obj);
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f7fb fbb2 	bl	8007ff4 <lv_obj_refresh_ext_draw_size>
    }
    lv_obj_invalidate(obj);
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f7fc fee4 	bl	800965e <lv_obj_invalidate>

    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800c896:	88fb      	ldrh	r3, [r7, #6]
 800c898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d008      	beq.n	800c8b2 <lv_obj_refresh_style+0x176>
 800c8a0:	7e7b      	ldrb	r3, [r7, #25]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00e      	beq.n	800c8c4 <lv_obj_refresh_style+0x188>
 800c8a6:	7ebb      	ldrb	r3, [r7, #26]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <lv_obj_refresh_style+0x176>
 800c8ac:	7efb      	ldrb	r3, [r7, #27]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d008      	beq.n	800c8c4 <lv_obj_refresh_style+0x188>
        if(part != LV_PART_SCROLLBAR) {
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8b8:	d004      	beq.n	800c8c4 <lv_obj_refresh_style+0x188>
            refresh_children_style(obj);
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f000 ff2e 	bl	800d71c <refresh_children_style>
 800c8c0:	e000      	b.n	800c8c4 <lv_obj_refresh_style+0x188>
    if(!style_refr) return;
 800c8c2:	bf00      	nop
        }
    }
}
 800c8c4:	3720      	adds	r7, #32
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	2000000d 	.word	0x2000000d

0800c8d0 <lv_obj_enable_style_refresh>:

void lv_obj_enable_style_refresh(bool en)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	71fb      	strb	r3, [r7, #7]
    style_refr = en;
 800c8da:	4a04      	ldr	r2, [pc, #16]	; (800c8ec <lv_obj_enable_style_refresh+0x1c>)
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	7013      	strb	r3, [r2, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	2000000d 	.word	0x2000000d

0800c8f0 <lv_obj_get_style_prop>:

lv_style_value_t lv_obj_get_style_prop(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b088      	sub	sp, #32
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value_act;
    bool inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800c8fe:	88fb      	ldrh	r3, [r7, #6]
 800c900:	2101      	movs	r1, #1
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fcb3 	bl	800c26e <lv_style_prop_has_flag>
 800c908:	4603      	mov	r3, r0
 800c90a:	75fb      	strb	r3, [r7, #23]
    lv_style_res_t found = LV_STYLE_RES_NOT_FOUND;
 800c90c:	2300      	movs	r3, #0
 800c90e:	77fb      	strb	r3, [r7, #31]
    while(obj) {
 800c910:	e01e      	b.n	800c950 <lv_obj_get_style_prop+0x60>
        found = get_prop_core(obj, part, prop, &value_act);
 800c912:	f107 0310 	add.w	r3, r7, #16
 800c916:	88fa      	ldrh	r2, [r7, #6]
 800c918:	68b9      	ldr	r1, [r7, #8]
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f000 fdfa 	bl	800d514 <get_prop_core>
 800c920:	4603      	mov	r3, r0
 800c922:	77fb      	strb	r3, [r7, #31]
        if(found == LV_STYLE_RES_FOUND) break;
 800c924:	7ffb      	ldrb	r3, [r7, #31]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d016      	beq.n	800c958 <lv_obj_get_style_prop+0x68>
        if(!inheritable) break;
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	f083 0301 	eor.w	r3, r3, #1
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d112      	bne.n	800c95c <lv_obj_get_style_prop+0x6c>

        /*If not found, check the `MAIN` style first*/
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800c936:	7ffb      	ldrb	r3, [r7, #31]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d005      	beq.n	800c948 <lv_obj_get_style_prop+0x58>
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d002      	beq.n	800c948 <lv_obj_get_style_prop+0x58>
            part = LV_PART_MAIN;
 800c942:	2300      	movs	r3, #0
 800c944:	60bb      	str	r3, [r7, #8]
            continue;
 800c946:	e003      	b.n	800c950 <lv_obj_get_style_prop+0x60>
        }

        /*Check the parent too.*/
        obj = lv_obj_get_parent(obj);
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f001 fadd 	bl	800df08 <lv_obj_get_parent>
 800c94e:	60f8      	str	r0, [r7, #12]
    while(obj) {
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1dd      	bne.n	800c912 <lv_obj_get_style_prop+0x22>
 800c956:	e002      	b.n	800c95e <lv_obj_get_style_prop+0x6e>
        if(found == LV_STYLE_RES_FOUND) break;
 800c958:	bf00      	nop
 800c95a:	e000      	b.n	800c95e <lv_obj_get_style_prop+0x6e>
        if(!inheritable) break;
 800c95c:	bf00      	nop
    }

    if(found != LV_STYLE_RES_FOUND) {
 800c95e:	7ffb      	ldrb	r3, [r7, #31]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d03a      	beq.n	800c9da <lv_obj_get_style_prop+0xea>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d131      	bne.n	800c9ce <lv_obj_get_style_prop+0xde>
 800c96a:	88fb      	ldrh	r3, [r7, #6]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d002      	beq.n	800c976 <lv_obj_get_style_prop+0x86>
 800c970:	88fb      	ldrh	r3, [r7, #6]
 800c972:	2b04      	cmp	r3, #4
 800c974:	d12b      	bne.n	800c9ce <lv_obj_get_style_prop+0xde>
            const lv_obj_class_t * cls = obj->class_p;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800c97c:	e010      	b.n	800c9a0 <lv_obj_get_style_prop+0xb0>
                if(prop == LV_STYLE_WIDTH) {
 800c97e:	88fb      	ldrh	r3, [r7, #6]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d105      	bne.n	800c990 <lv_obj_get_style_prop+0xa0>
                    if(cls->width_def != 0) break;
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d005      	beq.n	800c99a <lv_obj_get_style_prop+0xaa>
 800c98e:	e00c      	b.n	800c9aa <lv_obj_get_style_prop+0xba>
                }
                else {
                    if(cls->height_def != 0) break;
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d106      	bne.n	800c9a8 <lv_obj_get_style_prop+0xb8>
                }
                cls = cls->base_class;
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1eb      	bne.n	800c97e <lv_obj_get_style_prop+0x8e>
 800c9a6:	e000      	b.n	800c9aa <lv_obj_get_style_prop+0xba>
                    if(cls->height_def != 0) break;
 800c9a8:	bf00      	nop
            }

            if(cls) {
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00b      	beq.n	800c9c8 <lv_obj_get_style_prop+0xd8>
                value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800c9b0:	88fb      	ldrh	r3, [r7, #6]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d103      	bne.n	800c9be <lv_obj_get_style_prop+0xce>
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c9bc:	e002      	b.n	800c9c4 <lv_obj_get_style_prop+0xd4>
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c9c4:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800c9c6:	e008      	b.n	800c9da <lv_obj_get_style_prop+0xea>
            }
            else {
                value_act.num = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800c9cc:	e005      	b.n	800c9da <lv_obj_get_style_prop+0xea>
            }
        }
        else {
            value_act = lv_style_prop_get_default(prop);
 800c9ce:	88fb      	ldrh	r3, [r7, #6]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f016 f901 	bl	8022bd8 <lv_style_prop_get_default>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	613b      	str	r3, [r7, #16]
        }
    }
    return value_act;
 800c9da:	693b      	ldr	r3, [r7, #16]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3720      	adds	r7, #32
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <lv_obj_set_local_style_prop>:

void lv_obj_set_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t value,
                                 lv_style_selector_t selector)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	607a      	str	r2, [r7, #4]
 800c9ee:	603b      	str	r3, [r7, #0]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	817b      	strh	r3, [r7, #10]
    lv_style_t * style = get_local_style(obj, selector);
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f000 fc20 	bl	800d23c <get_local_style>
 800c9fc:	6178      	str	r0, [r7, #20]
    lv_style_set_prop(style, prop, value);
 800c9fe:	897b      	ldrh	r3, [r7, #10]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	4619      	mov	r1, r3
 800ca04:	6978      	ldr	r0, [r7, #20]
 800ca06:	f016 f8c1 	bl	8022b8c <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 800ca0a:	897b      	ldrh	r3, [r7, #10]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7ff fe93 	bl	800c73c <lv_obj_refresh_style>
}
 800ca16:	bf00      	nop
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <lv_obj_get_local_style_prop>:
}


lv_style_res_t lv_obj_get_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t * value,
                                           lv_style_selector_t selector)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b086      	sub	sp, #24
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	60f8      	str	r0, [r7, #12]
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	603b      	str	r3, [r7, #0]
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	817b      	strh	r3, [r7, #10]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800ca2e:	2300      	movs	r3, #0
 800ca30:	617b      	str	r3, [r7, #20]
 800ca32:	e026      	b.n	800ca82 <lv_obj_get_local_style_prop+0x64>
        if(obj->styles[i].is_local &&
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	68da      	ldr	r2, [r3, #12]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	4413      	add	r3, r2
 800ca3e:	79db      	ldrb	r3, [r3, #7]
 800ca40:	f003 0301 	and.w	r3, r3, #1
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d018      	beq.n	800ca7c <lv_obj_get_local_style_prop+0x5e>
           obj->styles[i].selector == selector) {
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	68da      	ldr	r2, [r3, #12]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	00db      	lsls	r3, r3, #3
 800ca52:	4413      	add	r3, r2
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ca5a:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d10c      	bne.n	800ca7c <lv_obj_get_local_style_prop+0x5e>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	68da      	ldr	r2, [r3, #12]
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	00db      	lsls	r3, r3, #3
 800ca6a:	4413      	add	r3, r2
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	8979      	ldrh	r1, [r7, #10]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f016 f89e 	bl	8022bb4 <lv_style_get_prop>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	e00c      	b.n	800ca96 <lv_obj_get_local_style_prop+0x78>
    for(i = 0; i < obj->style_cnt; i++) {
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	617b      	str	r3, [r7, #20]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ca86:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d3cf      	bcc.n	800ca34 <lv_obj_get_local_style_prop+0x16>
        }
    }

    return LV_STYLE_RES_NOT_FOUND;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <lv_obj_remove_local_style_prop>:

bool lv_obj_remove_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_selector_t selector)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b086      	sub	sp, #24
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	60f8      	str	r0, [r7, #12]
 800caa6:	460b      	mov	r3, r1
 800caa8:	607a      	str	r2, [r7, #4]
 800caaa:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    uint32_t i;
    /*Find the style*/
    for(i = 0; i < obj->style_cnt; i++) {
 800caac:	2300      	movs	r3, #0
 800caae:	617b      	str	r3, [r7, #20]
 800cab0:	e019      	b.n	800cae6 <lv_obj_remove_local_style_prop+0x48>
        if(obj->styles[i].is_local &&
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	68da      	ldr	r2, [r3, #12]
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	4413      	add	r3, r2
 800cabc:	79db      	ldrb	r3, [r3, #7]
 800cabe:	f003 0301 	and.w	r3, r3, #1
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00b      	beq.n	800cae0 <lv_obj_remove_local_style_prop+0x42>
           obj->styles[i].selector == selector) {
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	68da      	ldr	r2, [r3, #12]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	4413      	add	r3, r2
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800cad8:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4293      	cmp	r3, r2
 800cade:	d00c      	beq.n	800cafa <lv_obj_remove_local_style_prop+0x5c>
    for(i = 0; i < obj->style_cnt; i++) {
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	3301      	adds	r3, #1
 800cae4:	617b      	str	r3, [r7, #20]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800caea:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	461a      	mov	r2, r3
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d3dc      	bcc.n	800cab2 <lv_obj_remove_local_style_prop+0x14>
 800caf8:	e000      	b.n	800cafc <lv_obj_remove_local_style_prop+0x5e>
            break;
 800cafa:	bf00      	nop
        }
    }

    /*The style is not found*/
    if(i == obj->style_cnt) return false;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cb00:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	461a      	mov	r2, r3
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d101      	bne.n	800cb12 <lv_obj_remove_local_style_prop+0x74>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e01b      	b.n	800cb4a <lv_obj_remove_local_style_prop+0xac>

    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	68da      	ldr	r2, [r3, #12]
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	4413      	add	r3, r2
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	897a      	ldrh	r2, [r7, #10]
 800cb20:	4611      	mov	r1, r2
 800cb22:	4618      	mov	r0, r3
 800cb24:	f015 ff60 	bl	80229e8 <lv_style_remove_prop>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	74fb      	strb	r3, [r7, #19]
    if(res == LV_RES_OK) {
 800cb2c:	7cfb      	ldrb	r3, [r7, #19]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d105      	bne.n	800cb3e <lv_obj_remove_local_style_prop+0xa0>
        lv_obj_refresh_style(obj, selector, prop);
 800cb32:	897b      	ldrh	r3, [r7, #10]
 800cb34:	461a      	mov	r2, r3
 800cb36:	6879      	ldr	r1, [r7, #4]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f7ff fdff 	bl	800c73c <lv_obj_refresh_style>
    }

    return res;
 800cb3e:	7cfb      	ldrb	r3, [r7, #19]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	bf14      	ite	ne
 800cb44:	2301      	movne	r3, #1
 800cb46:	2300      	moveq	r3, #0
 800cb48:	b2db      	uxtb	r3, r3
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
	...

0800cb54 <_lv_obj_style_create_transition>:

void _lv_obj_style_create_transition(lv_obj_t * obj, lv_part_t part, lv_state_t prev_state, lv_state_t new_state,
                                     const _lv_obj_style_transition_dsc_t * tr_dsc)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b09a      	sub	sp, #104	; 0x68
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	4611      	mov	r1, r2
 800cb60:	461a      	mov	r2, r3
 800cb62:	460b      	mov	r3, r1
 800cb64:	80fb      	strh	r3, [r7, #6]
 800cb66:	4613      	mov	r3, r2
 800cb68:	80bb      	strh	r3, [r7, #4]
    trans_t * tr;

    /*Get the previous and current values*/
    obj->skip_trans = 1;
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800cb70:	f043 0304 	orr.w	r3, r3, #4
 800cb74:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    obj->state = prev_state;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	88fa      	ldrh	r2, [r7, #6]
 800cb7c:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800cb7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb80:	891b      	ldrh	r3, [r3, #8]
 800cb82:	461a      	mov	r2, r3
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f7ff feb2 	bl	800c8f0 <lv_obj_get_style_prop>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	88ba      	ldrh	r2, [r7, #4]
 800cb94:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800cb96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb98:	891b      	ldrh	r3, [r3, #8]
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	68b9      	ldr	r1, [r7, #8]
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f7ff fea6 	bl	800c8f0 <lv_obj_get_style_prop>
 800cba4:	4603      	mov	r3, r0
 800cba6:	657b      	str	r3, [r7, #84]	; 0x54
    obj->skip_trans = 0;
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800cbae:	f36f 0382 	bfc	r3, #2, #1
 800cbb2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800cbb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d10a      	bne.n	800cbd4 <_lv_obj_style_create_transition+0x80>
 800cbbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d106      	bne.n	800cbd4 <_lv_obj_style_create_transition+0x80>
 800cbc6:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800cbca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	f000 80cc 	beq.w	800cd6c <_lv_obj_style_create_transition+0x218>
    obj->state = prev_state;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	88fa      	ldrh	r2, [r7, #6]
 800cbd8:	841a      	strh	r2, [r3, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800cbda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbdc:	891b      	ldrh	r3, [r3, #8]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	68b9      	ldr	r1, [r7, #8]
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7ff fe84 	bl	800c8f0 <lv_obj_get_style_prop>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	88ba      	ldrh	r2, [r7, #4]
 800cbf0:	841a      	strh	r2, [r3, #32]

    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800cbf2:	68b9      	ldr	r1, [r7, #8]
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f000 fbec 	bl	800d3d2 <get_trans_style>
 800cbfa:	6678      	str	r0, [r7, #100]	; 0x64
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800cbfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbfe:	6818      	ldr	r0, [r3, #0]
 800cc00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc02:	891b      	ldrh	r3, [r3, #8]
 800cc04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc06:	4619      	mov	r1, r3
 800cc08:	f015 ffc0 	bl	8022b8c <lv_style_set_prop>

    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800cc0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc0e:	891b      	ldrh	r3, [r3, #8]
 800cc10:	2b0b      	cmp	r3, #11
 800cc12:	d143      	bne.n	800cc9c <_lv_obj_style_create_transition+0x148>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800cc14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc16:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d004      	beq.n	800cc28 <_lv_obj_style_create_transition+0xd4>
 800cc1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc20:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d139      	bne.n	800cc9c <_lv_obj_style_create_transition+0x148>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f7fb ff4e 	bl	8008aca <lv_obj_get_width>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	da00      	bge.n	800cc36 <_lv_obj_style_create_transition+0xe2>
 800cc34:	3301      	adds	r3, #1
 800cc36:	105b      	asrs	r3, r3, #1
 800cc38:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f7fb ff52 	bl	8008ae6 <lv_obj_get_height>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	da00      	bge.n	800cc4a <_lv_obj_style_create_transition+0xf6>
 800cc48:	3301      	adds	r3, #1
 800cc4a:	105b      	asrs	r3, r3, #1
 800cc4c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800cc50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d10d      	bne.n	800cc76 <_lv_obj_style_create_transition+0x122>
 800cc5a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800cc5e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800cc62:	429a      	cmp	r2, r3
 800cc64:	da03      	bge.n	800cc6e <_lv_obj_style_create_transition+0x11a>
 800cc66:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	e002      	b.n	800cc74 <_lv_obj_style_create_transition+0x120>
 800cc6e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800cc72:	3301      	adds	r3, #1
 800cc74:	65bb      	str	r3, [r7, #88]	; 0x58
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800cc76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc78:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d10d      	bne.n	800cc9c <_lv_obj_style_create_transition+0x148>
 800cc80:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800cc84:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	da03      	bge.n	800cc94 <_lv_obj_style_create_transition+0x140>
 800cc8c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800cc90:	3301      	adds	r3, #1
 800cc92:	e002      	b.n	800cc9a <_lv_obj_style_create_transition+0x146>
 800cc94:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800cc98:	3301      	adds	r3, #1
 800cc9a:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800cc9c:	4836      	ldr	r0, [pc, #216]	; (800cd78 <_lv_obj_style_create_transition+0x224>)
 800cc9e:	f014 fdab 	bl	80217f8 <_lv_ll_ins_head>
 800cca2:	65f8      	str	r0, [r7, #92]	; 0x5c
    LV_ASSERT_MALLOC(tr);
 800cca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d100      	bne.n	800ccac <_lv_obj_style_create_transition+0x158>
 800ccaa:	e7fe      	b.n	800ccaa <_lv_obj_style_create_transition+0x156>
    if(tr == NULL) return;
 800ccac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d05e      	beq.n	800cd70 <_lv_obj_style_create_transition+0x21c>
    tr->start_value = v1;
 800ccb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccb6:	60da      	str	r2, [r3, #12]
    tr->end_value = v2;
 800ccb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccbc:	611a      	str	r2, [r3, #16]
    tr->obj = obj;
 800ccbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	601a      	str	r2, [r3, #0]
    tr->prop = tr_dsc->prop;
 800ccc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ccc6:	891a      	ldrh	r2, [r3, #8]
 800ccc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccca:	809a      	strh	r2, [r3, #4]
    tr->selector = part;
 800cccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	609a      	str	r2, [r3, #8]

    lv_anim_t a;
    lv_anim_init(&a);
 800ccd2:	f107 0310 	add.w	r3, r7, #16
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f013 f908 	bl	801feec <lv_anim_init>
    lv_anim_set_var(&a, tr);
 800ccdc:	f107 0310 	add.w	r3, r7, #16
 800cce0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7ff fa24 	bl	800c130 <lv_anim_set_var>
    lv_anim_set_exec_cb(&a, trans_anim_cb);
 800cce8:	f107 0310 	add.w	r3, r7, #16
 800ccec:	4923      	ldr	r1, [pc, #140]	; (800cd7c <_lv_obj_style_create_transition+0x228>)
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7ff fa2c 	bl	800c14c <lv_anim_set_exec_cb>
    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 800ccf4:	f107 0310 	add.w	r3, r7, #16
 800ccf8:	4921      	ldr	r1, [pc, #132]	; (800cd80 <_lv_obj_style_create_transition+0x22c>)
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7ff fa74 	bl	800c1e8 <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 800cd00:	f107 0310 	add.w	r3, r7, #16
 800cd04:	491f      	ldr	r1, [pc, #124]	; (800cd84 <_lv_obj_style_create_transition+0x230>)
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff fa7c 	bl	800c204 <lv_anim_set_ready_cb>
    lv_anim_set_values(&a, 0x00, 0xFF);
 800cd0c:	f107 0310 	add.w	r3, r7, #16
 800cd10:	22ff      	movs	r2, #255	; 0xff
 800cd12:	2100      	movs	r1, #0
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fa44 	bl	800c1a2 <lv_anim_set_values>
    lv_anim_set_time(&a, tr_dsc->time);
 800cd1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f107 0310 	add.w	r3, r7, #16
 800cd24:	4611      	mov	r1, r2
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff fa1e 	bl	800c168 <lv_anim_set_time>
    lv_anim_set_delay(&a, tr_dsc->delay);
 800cd2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd2e:	885b      	ldrh	r3, [r3, #2]
 800cd30:	461a      	mov	r2, r3
 800cd32:	f107 0310 	add.w	r3, r7, #16
 800cd36:	4611      	mov	r1, r2
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7ff fa23 	bl	800c184 <lv_anim_set_delay>
    lv_anim_set_path_cb(&a, tr_dsc->path_cb);
 800cd3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd40:	68da      	ldr	r2, [r3, #12]
 800cd42:	f107 0310 	add.w	r3, r7, #16
 800cd46:	4611      	mov	r1, r2
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7ff fa3f 	bl	800c1cc <lv_anim_set_path_cb>
    lv_anim_set_early_apply(&a, false);
 800cd4e:	f107 0310 	add.w	r3, r7, #16
 800cd52:	2100      	movs	r1, #0
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7ff fa63 	bl	800c220 <lv_anim_set_early_apply>
#if LV_USE_USER_DATA
    a.user_data = tr_dsc->user_data;
 800cd5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    lv_anim_start(&a);
 800cd60:	f107 0310 	add.w	r3, r7, #16
 800cd64:	4618      	mov	r0, r3
 800cd66:	f013 f8e7 	bl	801ff38 <lv_anim_start>
 800cd6a:	e002      	b.n	800cd72 <_lv_obj_style_create_transition+0x21e>
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800cd6c:	bf00      	nop
 800cd6e:	e000      	b.n	800cd72 <_lv_obj_style_create_transition+0x21e>
    if(tr == NULL) return;
 800cd70:	bf00      	nop
}
 800cd72:	3768      	adds	r7, #104	; 0x68
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	200008a0 	.word	0x200008a0
 800cd7c:	0800d87d 	.word	0x0800d87d
 800cd80:	0800db5d 	.word	0x0800db5d
 800cd84:	0800dbd5 	.word	0x0800dbd5

0800cd88 <_lv_obj_style_apply_color_filter>:


lv_style_value_t _lv_obj_style_apply_color_filter(const lv_obj_t * obj, uint32_t part, lv_style_value_t v)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
    if(obj == NULL) return v;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d101      	bne.n	800cd9e <_lv_obj_style_apply_color_filter+0x16>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	e01c      	b.n	800cdd8 <_lv_obj_style_apply_color_filter+0x50>
    const lv_color_filter_dsc_t * f = lv_obj_get_style_color_filter_dsc(obj, part);
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff faea 	bl	800c37a <lv_obj_get_style_color_filter_dsc>
 800cda6:	6178      	str	r0, [r7, #20]
    if(f && f->filter_cb) {
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d013      	beq.n	800cdd6 <_lv_obj_style_apply_color_filter+0x4e>
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00f      	beq.n	800cdd6 <_lv_obj_style_apply_color_filter+0x4e>
        lv_opa_t f_opa = lv_obj_get_style_color_filter_opa(obj, part);
 800cdb6:	68b9      	ldr	r1, [r7, #8]
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f7ff faef 	bl	800c39c <lv_obj_get_style_color_filter_opa>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	74fb      	strb	r3, [r7, #19]
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800cdc2:	7cfb      	ldrb	r3, [r7, #19]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d006      	beq.n	800cdd6 <_lv_obj_style_apply_color_filter+0x4e>
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	7cfa      	ldrb	r2, [r7, #19]
 800cdce:	7939      	ldrb	r1, [r7, #4]
 800cdd0:	6978      	ldr	r0, [r7, #20]
 800cdd2:	4798      	blx	r3
 800cdd4:	7138      	strb	r0, [r7, #4]
    }
    return v;
 800cdd6:	687b      	ldr	r3, [r7, #4]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <_lv_obj_style_state_compare>:

_lv_style_state_cmp_t _lv_obj_style_state_compare(lv_obj_t * obj, lv_state_t state1, lv_state_t state2)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	807b      	strh	r3, [r7, #2]
 800cdec:	4613      	mov	r3, r2
 800cdee:	803b      	strh	r3, [r7, #0]
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	77fb      	strb	r3, [r7, #31]

    /*Are there any new styles for the new state?*/
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	61bb      	str	r3, [r7, #24]
 800cdf8:	e1d9      	b.n	800d1ae <_lv_obj_style_state_compare+0x3ce>
        if(obj->styles[i].is_trans) continue;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	68da      	ldr	r2, [r3, #12]
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	00db      	lsls	r3, r3, #3
 800ce02:	4413      	add	r3, r2
 800ce04:	79db      	ldrb	r3, [r3, #7]
 800ce06:	f003 0302 	and.w	r3, r3, #2
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f040 81ca 	bne.w	800d1a6 <_lv_obj_style_state_compare+0x3c6>

        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68da      	ldr	r2, [r3, #12]
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	00db      	lsls	r3, r3, #3
 800ce1a:	4413      	add	r3, r2
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 f9d2 	bl	800d1cc <lv_obj_style_get_selector_state>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	82bb      	strh	r3, [r7, #20]
        /*The style is valid for a state but not the other*/
        bool valid1 = state_act & (~state1) ? false : true;
 800ce2c:	8aba      	ldrh	r2, [r7, #20]
 800ce2e:	887b      	ldrh	r3, [r7, #2]
 800ce30:	43db      	mvns	r3, r3
 800ce32:	4013      	ands	r3, r2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	bf0c      	ite	eq
 800ce38:	2301      	moveq	r3, #1
 800ce3a:	2300      	movne	r3, #0
 800ce3c:	74fb      	strb	r3, [r7, #19]
        bool valid2 = state_act & (~state2) ? false : true;
 800ce3e:	8aba      	ldrh	r2, [r7, #20]
 800ce40:	883b      	ldrh	r3, [r7, #0]
 800ce42:	43db      	mvns	r3, r3
 800ce44:	4013      	ands	r3, r2
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bf0c      	ite	eq
 800ce4a:	2301      	moveq	r3, #1
 800ce4c:	2300      	movne	r3, #0
 800ce4e:	74bb      	strb	r3, [r7, #18]
        if(valid1 != valid2) {
 800ce50:	7cfa      	ldrb	r2, [r7, #19]
 800ce52:	7cbb      	ldrb	r3, [r7, #18]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	f000 81a7 	beq.w	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            lv_style_t * style = obj->styles[i].style;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68da      	ldr	r2, [r3, #12]
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	4413      	add	r3, r2
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	60fb      	str	r3, [r7, #12]
            lv_style_value_t v;
            /*If there is layout difference on the main part, return immediately. There is no more serious difference*/
            bool layout_diff = false;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	75fb      	strb	r3, [r7, #23]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800ce6c:	f107 0308 	add.w	r3, r7, #8
 800ce70:	461a      	mov	r2, r3
 800ce72:	2110      	movs	r1, #16
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f015 fe9d 	bl	8022bb4 <lv_style_get_prop>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <_lv_obj_style_state_compare+0xa6>
 800ce80:	2301      	movs	r3, #1
 800ce82:	75fb      	strb	r3, [r7, #23]
 800ce84:	e0db      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800ce86:	f107 0308 	add.w	r3, r7, #8
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	2111      	movs	r1, #17
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f015 fe90 	bl	8022bb4 <lv_style_get_prop>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d002      	beq.n	800cea0 <_lv_obj_style_state_compare+0xc0>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	75fb      	strb	r3, [r7, #23]
 800ce9e:	e0ce      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800cea0:	f107 0308 	add.w	r3, r7, #8
 800cea4:	461a      	mov	r2, r3
 800cea6:	2112      	movs	r1, #18
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f015 fe83 	bl	8022bb4 <lv_style_get_prop>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <_lv_obj_style_state_compare+0xda>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	75fb      	strb	r3, [r7, #23]
 800ceb8:	e0c1      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800ceba:	f107 0308 	add.w	r3, r7, #8
 800cebe:	461a      	mov	r2, r3
 800cec0:	2113      	movs	r1, #19
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f015 fe76 	bl	8022bb4 <lv_style_get_prop>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d002      	beq.n	800ced4 <_lv_obj_style_state_compare+0xf4>
 800cece:	2301      	movs	r3, #1
 800ced0:	75fb      	strb	r3, [r7, #23]
 800ced2:	e0b4      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800ced4:	f107 0308 	add.w	r3, r7, #8
 800ced8:	461a      	mov	r2, r3
 800ceda:	2115      	movs	r1, #21
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f015 fe69 	bl	8022bb4 <lv_style_get_prop>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <_lv_obj_style_state_compare+0x10e>
 800cee8:	2301      	movs	r3, #1
 800ceea:	75fb      	strb	r3, [r7, #23]
 800ceec:	e0a7      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800ceee:	f107 0308 	add.w	r3, r7, #8
 800cef2:	461a      	mov	r2, r3
 800cef4:	2114      	movs	r1, #20
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f015 fe5c 	bl	8022bb4 <lv_style_get_prop>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <_lv_obj_style_state_compare+0x128>
 800cf02:	2301      	movs	r3, #1
 800cf04:	75fb      	strb	r3, [r7, #23]
 800cf06:	e09a      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800cf08:	f107 0308 	add.w	r3, r7, #8
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	210a      	movs	r1, #10
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f015 fe4f 	bl	8022bb4 <lv_style_get_prop>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <_lv_obj_style_state_compare+0x142>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	75fb      	strb	r3, [r7, #23]
 800cf20:	e08d      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800cf22:	f107 0308 	add.w	r3, r7, #8
 800cf26:	461a      	mov	r2, r3
 800cf28:	216a      	movs	r1, #106	; 0x6a
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f015 fe42 	bl	8022bb4 <lv_style_get_prop>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d002      	beq.n	800cf3c <_lv_obj_style_state_compare+0x15c>
 800cf36:	2301      	movs	r3, #1
 800cf38:	75fb      	strb	r3, [r7, #23]
 800cf3a:	e080      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800cf3c:	f107 0308 	add.w	r3, r7, #8
 800cf40:	461a      	mov	r2, r3
 800cf42:	216b      	movs	r1, #107	; 0x6b
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f015 fe35 	bl	8022bb4 <lv_style_get_prop>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <_lv_obj_style_state_compare+0x176>
 800cf50:	2301      	movs	r3, #1
 800cf52:	75fb      	strb	r3, [r7, #23]
 800cf54:	e073      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800cf56:	f107 0308 	add.w	r3, r7, #8
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	2101      	movs	r1, #1
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f015 fe28 	bl	8022bb4 <lv_style_get_prop>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <_lv_obj_style_state_compare+0x190>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	75fb      	strb	r3, [r7, #23]
 800cf6e:	e066      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800cf70:	f107 0308 	add.w	r3, r7, #8
 800cf74:	461a      	mov	r2, r3
 800cf76:	2104      	movs	r1, #4
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f015 fe1b 	bl	8022bb4 <lv_style_get_prop>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <_lv_obj_style_state_compare+0x1aa>
 800cf84:	2301      	movs	r3, #1
 800cf86:	75fb      	strb	r3, [r7, #23]
 800cf88:	e059      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800cf8a:	f107 0308 	add.w	r3, r7, #8
 800cf8e:	461a      	mov	r2, r3
 800cf90:	2102      	movs	r1, #2
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f015 fe0e 	bl	8022bb4 <lv_style_get_prop>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <_lv_obj_style_state_compare+0x1c4>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	75fb      	strb	r3, [r7, #23]
 800cfa2:	e04c      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800cfa4:	f107 0308 	add.w	r3, r7, #8
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	2103      	movs	r1, #3
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f015 fe01 	bl	8022bb4 <lv_style_get_prop>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <_lv_obj_style_state_compare+0x1de>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	75fb      	strb	r3, [r7, #23]
 800cfbc:	e03f      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800cfbe:	f107 0308 	add.w	r3, r7, #8
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	2105      	movs	r1, #5
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f015 fdf4 	bl	8022bb4 <lv_style_get_prop>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <_lv_obj_style_state_compare+0x1f8>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	75fb      	strb	r3, [r7, #23]
 800cfd6:	e032      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800cfd8:	f107 0308 	add.w	r3, r7, #8
 800cfdc:	461a      	mov	r2, r3
 800cfde:	2106      	movs	r1, #6
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f015 fde7 	bl	8022bb4 <lv_style_get_prop>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <_lv_obj_style_state_compare+0x212>
 800cfec:	2301      	movs	r3, #1
 800cfee:	75fb      	strb	r3, [r7, #23]
 800cff0:	e025      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800cff2:	f107 0308 	add.w	r3, r7, #8
 800cff6:	461a      	mov	r2, r3
 800cff8:	2132      	movs	r1, #50	; 0x32
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f015 fdda 	bl	8022bb4 <lv_style_get_prop>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d002      	beq.n	800d00c <_lv_obj_style_state_compare+0x22c>
 800d006:	2301      	movs	r3, #1
 800d008:	75fb      	strb	r3, [r7, #23]
 800d00a:	e018      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800d00c:	f107 0308 	add.w	r3, r7, #8
 800d010:	461a      	mov	r2, r3
 800d012:	216d      	movs	r1, #109	; 0x6d
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f015 fdcd 	bl	8022bb4 <lv_style_get_prop>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <_lv_obj_style_state_compare+0x246>
 800d020:	2301      	movs	r3, #1
 800d022:	75fb      	strb	r3, [r7, #23]
 800d024:	e00b      	b.n	800d03e <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800d026:	f107 0308 	add.w	r3, r7, #8
 800d02a:	461a      	mov	r2, r3
 800d02c:	216c      	movs	r1, #108	; 0x6c
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f015 fdc0 	bl	8022bb4 <lv_style_get_prop>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <_lv_obj_style_state_compare+0x25e>
 800d03a:	2301      	movs	r3, #1
 800d03c:	75fb      	strb	r3, [r7, #23]

            if(layout_diff) {
 800d03e:	7dfb      	ldrb	r3, [r7, #23]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <_lv_obj_style_state_compare+0x268>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800d044:	2303      	movs	r3, #3
 800d046:	e0bd      	b.n	800d1c4 <_lv_obj_style_state_compare+0x3e4>
            }

            /*Check for draw pad changes*/
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d048:	f107 0308 	add.w	r3, r7, #8
 800d04c:	461a      	mov	r2, r3
 800d04e:	2168      	movs	r1, #104	; 0x68
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f015 fdaf 	bl	8022bb4 <lv_style_get_prop>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <_lv_obj_style_state_compare+0x282>
 800d05c:	2302      	movs	r3, #2
 800d05e:	77fb      	strb	r3, [r7, #31]
 800d060:	e0a2      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d062:	f107 0308 	add.w	r3, r7, #8
 800d066:	461a      	mov	r2, r3
 800d068:	2169      	movs	r1, #105	; 0x69
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f015 fda2 	bl	8022bb4 <lv_style_get_prop>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d002      	beq.n	800d07c <_lv_obj_style_state_compare+0x29c>
 800d076:	2302      	movs	r3, #2
 800d078:	77fb      	strb	r3, [r7, #31]
 800d07a:	e095      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d07c:	f107 0308 	add.w	r3, r7, #8
 800d080:	461a      	mov	r2, r3
 800d082:	216d      	movs	r1, #109	; 0x6d
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f015 fd95 	bl	8022bb4 <lv_style_get_prop>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <_lv_obj_style_state_compare+0x2b6>
 800d090:	2302      	movs	r3, #2
 800d092:	77fb      	strb	r3, [r7, #31]
 800d094:	e088      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d096:	f107 0308 	add.w	r3, r7, #8
 800d09a:	461a      	mov	r2, r3
 800d09c:	216c      	movs	r1, #108	; 0x6c
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f015 fd88 	bl	8022bb4 <lv_style_get_prop>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <_lv_obj_style_state_compare+0x2d0>
 800d0aa:	2302      	movs	r3, #2
 800d0ac:	77fb      	strb	r3, [r7, #31]
 800d0ae:	e07b      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d0b0:	f107 0308 	add.w	r3, r7, #8
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	2137      	movs	r1, #55	; 0x37
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f015 fd7b 	bl	8022bb4 <lv_style_get_prop>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d002      	beq.n	800d0ca <_lv_obj_style_state_compare+0x2ea>
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	77fb      	strb	r3, [r7, #31]
 800d0c8:	e06e      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d0ca:	f107 0308 	add.w	r3, r7, #8
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	2138      	movs	r1, #56	; 0x38
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f015 fd6e 	bl	8022bb4 <lv_style_get_prop>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d002      	beq.n	800d0e4 <_lv_obj_style_state_compare+0x304>
 800d0de:	2302      	movs	r3, #2
 800d0e0:	77fb      	strb	r3, [r7, #31]
 800d0e2:	e061      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d0e4:	f107 0308 	add.w	r3, r7, #8
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	2135      	movs	r1, #53	; 0x35
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f015 fd61 	bl	8022bb4 <lv_style_get_prop>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <_lv_obj_style_state_compare+0x31e>
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	77fb      	strb	r3, [r7, #31]
 800d0fc:	e054      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d0fe:	f107 0308 	add.w	r3, r7, #8
 800d102:	461a      	mov	r2, r3
 800d104:	2140      	movs	r1, #64	; 0x40
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f015 fd54 	bl	8022bb4 <lv_style_get_prop>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d002      	beq.n	800d118 <_lv_obj_style_state_compare+0x338>
 800d112:	2302      	movs	r3, #2
 800d114:	77fb      	strb	r3, [r7, #31]
 800d116:	e047      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d118:	f107 0308 	add.w	r3, r7, #8
 800d11c:	461a      	mov	r2, r3
 800d11e:	2145      	movs	r1, #69	; 0x45
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f015 fd47 	bl	8022bb4 <lv_style_get_prop>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <_lv_obj_style_state_compare+0x352>
 800d12c:	2302      	movs	r3, #2
 800d12e:	77fb      	strb	r3, [r7, #31]
 800d130:	e03a      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d132:	f107 0308 	add.w	r3, r7, #8
 800d136:	461a      	mov	r2, r3
 800d138:	2141      	movs	r1, #65	; 0x41
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f015 fd3a 	bl	8022bb4 <lv_style_get_prop>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d002      	beq.n	800d14c <_lv_obj_style_state_compare+0x36c>
 800d146:	2302      	movs	r3, #2
 800d148:	77fb      	strb	r3, [r7, #31]
 800d14a:	e02d      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d14c:	f107 0308 	add.w	r3, r7, #8
 800d150:	461a      	mov	r2, r3
 800d152:	2142      	movs	r1, #66	; 0x42
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f015 fd2d 	bl	8022bb4 <lv_style_get_prop>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <_lv_obj_style_state_compare+0x386>
 800d160:	2302      	movs	r3, #2
 800d162:	77fb      	strb	r3, [r7, #31]
 800d164:	e020      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d166:	f107 0308 	add.w	r3, r7, #8
 800d16a:	461a      	mov	r2, r3
 800d16c:	2143      	movs	r1, #67	; 0x43
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f015 fd20 	bl	8022bb4 <lv_style_get_prop>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <_lv_obj_style_state_compare+0x3a0>
 800d17a:	2302      	movs	r3, #2
 800d17c:	77fb      	strb	r3, [r7, #31]
 800d17e:	e013      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d180:	f107 0308 	add.w	r3, r7, #8
 800d184:	461a      	mov	r2, r3
 800d186:	2149      	movs	r1, #73	; 0x49
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f015 fd13 	bl	8022bb4 <lv_style_get_prop>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <_lv_obj_style_state_compare+0x3ba>
 800d194:	2302      	movs	r3, #2
 800d196:	77fb      	strb	r3, [r7, #31]
 800d198:	e006      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800d19a:	7ffb      	ldrb	r3, [r7, #31]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d103      	bne.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	77fb      	strb	r3, [r7, #31]
 800d1a4:	e000      	b.n	800d1a8 <_lv_obj_style_state_compare+0x3c8>
        if(obj->styles[i].is_trans) continue;
 800d1a6:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d1b2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	f4ff ae1c 	bcc.w	800cdfa <_lv_obj_style_state_compare+0x1a>
        }
    }

    return res;
 800d1c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3720      	adds	r7, #32
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <lv_obj_style_get_selector_state>:
    lv_anim_set_delay(&a, delay);
    lv_anim_start(&a);
}

lv_state_t lv_obj_style_get_selector_state(lv_style_selector_t selector)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
    return selector & 0xFFFF;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	b29b      	uxth	r3, r3
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <lv_obj_style_get_selector_part>:

lv_part_t lv_obj_style_get_selector_part(lv_style_selector_t selector)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
    return selector & 0xFF0000;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <lv_obj_calculate_style_text_align>:


lv_text_align_t lv_obj_calculate_style_text_align(const struct _lv_obj_t * obj, lv_part_t part, const char * txt)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b086      	sub	sp, #24
 800d202:	af00      	add	r7, sp, #0
 800d204:	60f8      	str	r0, [r7, #12]
 800d206:	60b9      	str	r1, [r7, #8]
 800d208:	607a      	str	r2, [r7, #4]
    lv_text_align_t align = lv_obj_get_style_text_align(obj, part);
 800d20a:	68b9      	ldr	r1, [r7, #8]
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f7ff f890 	bl	800c332 <lv_obj_get_style_text_align>
 800d212:	4603      	mov	r3, r0
 800d214:	75fb      	strb	r3, [r7, #23]
    lv_base_dir_t base_dir = lv_obj_get_style_base_dir(obj, part);
 800d216:	68b9      	ldr	r1, [r7, #8]
 800d218:	68f8      	ldr	r0, [r7, #12]
 800d21a:	f7ff f8e3 	bl	800c3e4 <lv_obj_get_style_base_dir>
 800d21e:	4603      	mov	r3, r0
 800d220:	75bb      	strb	r3, [r7, #22]
    lv_bidi_calculate_align(&align, &base_dir, txt);
 800d222:	f107 0116 	add.w	r1, r7, #22
 800d226:	f107 0317 	add.w	r3, r7, #23
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7ff f80b 	bl	800c248 <lv_bidi_calculate_align>
    return align;
 800d232:	7dfb      	ldrb	r3, [r7, #23]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <get_local_style>:
 * @param obj pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the local style
 */
static lv_style_t * get_local_style(lv_obj_t * obj, lv_style_selector_t selector)
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d246:	2300      	movs	r3, #0
 800d248:	60fb      	str	r3, [r7, #12]
 800d24a:	e020      	b.n	800d28e <get_local_style+0x52>
        if(obj->styles[i].is_local &&
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	68da      	ldr	r2, [r3, #12]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	4413      	add	r3, r2
 800d256:	79db      	ldrb	r3, [r3, #7]
 800d258:	f003 0301 	and.w	r3, r3, #1
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d012      	beq.n	800d288 <get_local_style+0x4c>
           obj->styles[i].selector == selector) {
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	68da      	ldr	r2, [r3, #12]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	00db      	lsls	r3, r3, #3
 800d26a:	4413      	add	r3, r2
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d272:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	4293      	cmp	r3, r2
 800d278:	d106      	bne.n	800d288 <get_local_style+0x4c>
            return obj->styles[i].style;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68da      	ldr	r2, [r3, #12]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	00db      	lsls	r3, r3, #3
 800d282:	4413      	add	r3, r2
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	e0a0      	b.n	800d3ca <get_local_style+0x18e>
    for(i = 0; i < obj->style_cnt; i++) {
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	3301      	adds	r3, #1
 800d28c:	60fb      	str	r3, [r7, #12]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d292:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d296:	b2db      	uxtb	r3, r3
 800d298:	461a      	mov	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d3d5      	bcc.n	800d24c <get_local_style+0x10>
        }
    }

    obj->style_cnt++;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d2a4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2b0:	b2d9      	uxtb	r1, r3
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800d2b6:	f361 03c8 	bfi	r3, r1, #3, #6
 800d2ba:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68da      	ldr	r2, [r3, #12]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d2c4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	f014 fd74 	bl	8021dbc <lv_mem_realloc>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	60da      	str	r2, [r3, #12]
    LV_ASSERT_MALLOC(obj->styles);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d100      	bne.n	800d2e4 <get_local_style+0xa8>
 800d2e2:	e7fe      	b.n	800d2e2 <get_local_style+0xa6>

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d2e8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	60fb      	str	r3, [r7, #12]
 800d2f2:	e030      	b.n	800d356 <get_local_style+0x11a>
        /*Copy only normal styles (not local and transition).
         *The new local style will be added as the last local style*/
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68da      	ldr	r2, [r3, #12]
 800d2f8:	68f9      	ldr	r1, [r7, #12]
 800d2fa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d2fe:	440b      	add	r3, r1
 800d300:	00db      	lsls	r3, r3, #3
 800d302:	4413      	add	r3, r2
 800d304:	79db      	ldrb	r3, [r3, #7]
 800d306:	f003 0301 	and.w	r3, r3, #1
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d125      	bne.n	800d35c <get_local_style+0x120>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68da      	ldr	r2, [r3, #12]
 800d314:	68f9      	ldr	r1, [r7, #12]
 800d316:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d31a:	440b      	add	r3, r1
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	4413      	add	r3, r2
 800d320:	79db      	ldrb	r3, [r3, #7]
 800d322:	f003 0302 	and.w	r3, r3, #2
 800d326:	b2db      	uxtb	r3, r3
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d117      	bne.n	800d35c <get_local_style+0x120>
        obj->styles[i] = obj->styles[i - 1];
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68da      	ldr	r2, [r3, #12]
 800d330:	68f9      	ldr	r1, [r7, #12]
 800d332:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d336:	440b      	add	r3, r1
 800d338:	00db      	lsls	r3, r3, #3
 800d33a:	18d1      	adds	r1, r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68da      	ldr	r2, [r3, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	00db      	lsls	r3, r3, #3
 800d344:	4413      	add	r3, r2
 800d346:	460a      	mov	r2, r1
 800d348:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d34c:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	3b01      	subs	r3, #1
 800d354:	60fb      	str	r3, [r7, #12]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1cb      	bne.n	800d2f4 <get_local_style+0xb8>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68da      	ldr	r2, [r3, #12]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	00db      	lsls	r3, r3, #3
 800d364:	4413      	add	r3, r2
 800d366:	2108      	movs	r1, #8
 800d368:	4618      	mov	r0, r3
 800d36a:	f015 f8fd 	bl	8022568 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68da      	ldr	r2, [r3, #12]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	18d4      	adds	r4, r2, r3
 800d378:	200c      	movs	r0, #12
 800d37a:	f014 fcc1 	bl	8021d00 <lv_mem_alloc>
 800d37e:	4603      	mov	r3, r0
 800d380:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[i].style);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	68da      	ldr	r2, [r3, #12]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	4413      	add	r3, r2
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4618      	mov	r0, r3
 800d390:	f015 fae8 	bl	8022964 <lv_style_init>
    obj->styles[i].is_local = 1;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	00db      	lsls	r3, r3, #3
 800d39c:	441a      	add	r2, r3
 800d39e:	79d3      	ldrb	r3, [r2, #7]
 800d3a0:	f043 0301 	orr.w	r3, r3, #1
 800d3a4:	71d3      	strb	r3, [r2, #7]
    obj->styles[i].selector = selector;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	441a      	add	r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d3b6:	6853      	ldr	r3, [r2, #4]
 800d3b8:	f361 0317 	bfi	r3, r1, #0, #24
 800d3bc:	6053      	str	r3, [r2, #4]
    return obj->styles[i].style;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68da      	ldr	r2, [r3, #12]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	4413      	add	r3, r2
 800d3c8:	681b      	ldr	r3, [r3, #0]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd90      	pop	{r4, r7, pc}

0800d3d2 <get_trans_style>:
 * @param obj   pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the transition style
 */
static _lv_obj_style_t * get_trans_style(lv_obj_t * obj,  lv_style_selector_t selector)
{
 800d3d2:	b590      	push	{r4, r7, lr}
 800d3d4:	b085      	sub	sp, #20
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	e019      	b.n	800d416 <get_trans_style+0x44>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68da      	ldr	r2, [r3, #12]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	00db      	lsls	r3, r3, #3
 800d3ea:	4413      	add	r3, r2
 800d3ec:	79db      	ldrb	r3, [r3, #7]
 800d3ee:	f003 0302 	and.w	r3, r3, #2
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00b      	beq.n	800d410 <get_trans_style+0x3e>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68da      	ldr	r2, [r3, #12]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	4413      	add	r3, r2
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d408:	461a      	mov	r2, r3
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d00c      	beq.n	800d42a <get_trans_style+0x58>
    for(i = 0; i < obj->style_cnt; i++) {
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3301      	adds	r3, #1
 800d414:	60fb      	str	r3, [r7, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d41a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	461a      	mov	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	4293      	cmp	r3, r2
 800d426:	d3dc      	bcc.n	800d3e2 <get_trans_style+0x10>
 800d428:	e000      	b.n	800d42c <get_trans_style+0x5a>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800d42a:	bf00      	nop
    }

    /*Already have a transition style for it*/
    if(i != obj->style_cnt) return &obj->styles[i];
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d430:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d434:	b2db      	uxtb	r3, r3
 800d436:	461a      	mov	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d005      	beq.n	800d44a <get_trans_style+0x78>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	68da      	ldr	r2, [r3, #12]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	4413      	add	r3, r2
 800d448:	e060      	b.n	800d50c <get_trans_style+0x13a>

    obj->style_cnt++;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d44e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d452:	b2db      	uxtb	r3, r3
 800d454:	3301      	adds	r3, #1
 800d456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d45a:	b2d9      	uxtb	r1, r3
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800d460:	f361 03c8 	bfi	r3, r1, #3, #6
 800d464:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	68da      	ldr	r2, [r3, #12]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d46e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d472:	b2db      	uxtb	r3, r3
 800d474:	00db      	lsls	r3, r3, #3
 800d476:	4619      	mov	r1, r3
 800d478:	4610      	mov	r0, r2
 800d47a:	f014 fc9f 	bl	8021dbc <lv_mem_realloc>
 800d47e:	4602      	mov	r2, r0
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	60da      	str	r2, [r3, #12]

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d488:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	60fb      	str	r3, [r7, #12]
 800d492:	e014      	b.n	800d4be <get_trans_style+0xec>
        obj->styles[i] = obj->styles[i - 1];
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	68da      	ldr	r2, [r3, #12]
 800d498:	68f9      	ldr	r1, [r7, #12]
 800d49a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d49e:	440b      	add	r3, r1
 800d4a0:	00db      	lsls	r3, r3, #3
 800d4a2:	18d1      	adds	r1, r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68da      	ldr	r2, [r3, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	4413      	add	r3, r2
 800d4ae:	460a      	mov	r2, r1
 800d4b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4b4:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1e7      	bne.n	800d494 <get_trans_style+0xc2>
    }

    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	2108      	movs	r1, #8
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f015 f84c 	bl	8022568 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	68dc      	ldr	r4, [r3, #12]
 800d4d4:	200c      	movs	r0, #12
 800d4d6:	f014 fc13 	bl	8021d00 <lv_mem_alloc>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[0].style);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f015 fa3d 	bl	8022964 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68da      	ldr	r2, [r3, #12]
 800d4ee:	79d3      	ldrb	r3, [r2, #7]
 800d4f0:	f043 0302 	orr.w	r3, r3, #2
 800d4f4:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	68da      	ldr	r2, [r3, #12]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d500:	6853      	ldr	r3, [r2, #4]
 800d502:	f361 0317 	bfi	r3, r1, #0, #24
 800d506:	6053      	str	r3, [r2, #4]
    return &obj->styles[0];
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	68db      	ldr	r3, [r3, #12]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	bd90      	pop	{r4, r7, pc}

0800d514 <get_prop_core>:


static lv_style_res_t get_prop_core(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, lv_style_value_t * v)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b090      	sub	sp, #64	; 0x40
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	603b      	str	r3, [r7, #0]
 800d520:	4613      	mov	r3, r2
 800d522:	80fb      	strh	r3, [r7, #6]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800d524:	88fb      	ldrh	r3, [r7, #6]
 800d526:	4618      	mov	r0, r3
 800d528:	f015 fc7e 	bl	8022e28 <_lv_style_get_prop_group>
 800d52c:	4603      	mov	r3, r0
 800d52e:	461a      	mov	r2, r3
 800d530:	2301      	movs	r3, #1
 800d532:	4093      	lsls	r3, r2
 800d534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t weight = -1;
 800d538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d53c:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_state_t state = obj->state;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	8c1b      	ldrh	r3, [r3, #32]
 800d542:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_state_t state_inv = ~state;
 800d544:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d546:	43db      	mvns	r3, r3
 800d548:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_style_value_t value_tmp;
    bool skip_trans = obj->skip_trans;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d550:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d554:	b2db      	uxtb	r3, r3
 800d556:	2b00      	cmp	r3, #0
 800d558:	bf14      	ite	ne
 800d55a:	2301      	movne	r3, #1
 800d55c:	2300      	moveq	r3, #0
 800d55e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    uint32_t i;
    lv_style_res_t found;
    for(i = 0; i < obj->style_cnt; i++) {
 800d562:	2300      	movs	r3, #0
 800d564:	63bb      	str	r3, [r7, #56]	; 0x38
 800d566:	e04b      	b.n	800d600 <get_prop_core+0xec>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	68da      	ldr	r2, [r3, #12]
 800d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56e:	00db      	lsls	r3, r3, #3
 800d570:	4413      	add	r3, r2
 800d572:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(obj_style->is_trans == false) break;
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	79db      	ldrb	r3, [r3, #7]
 800d578:	f003 0302 	and.w	r3, r3, #2
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d048      	beq.n	800d614 <get_prop_core+0x100>
        if(skip_trans) continue;
 800d582:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800d586:	2b00      	cmp	r3, #0
 800d588:	d132      	bne.n	800d5f0 <get_prop_core+0xdc>

        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	68da      	ldr	r2, [r3, #12]
 800d58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	4413      	add	r3, r2
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7ff fe22 	bl	800d1e4 <lv_obj_style_get_selector_part>
 800d5a0:	62b8      	str	r0, [r7, #40]	; 0x28

        if(part_act != part) continue;
 800d5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d124      	bne.n	800d5f4 <get_prop_core+0xe0>
        if((obj_style->style->has_group & group) == 0) continue;
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	7a9a      	ldrb	r2, [r3, #10]
 800d5b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d01d      	beq.n	800d5f8 <get_prop_core+0xe4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800d5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f107 0214 	add.w	r2, r7, #20
 800d5c4:	88f9      	ldrh	r1, [r7, #6]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f015 faf4 	bl	8022bb4 <lv_style_get_prop>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(found == LV_STYLE_RES_FOUND) {
 800d5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d104      	bne.n	800d5e4 <get_prop_core+0xd0>
            *v = value_tmp;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	697a      	ldr	r2, [r7, #20]
 800d5de:	601a      	str	r2, [r3, #0]
            return LV_STYLE_RES_FOUND;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e097      	b.n	800d714 <get_prop_core+0x200>
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800d5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d106      	bne.n	800d5fa <get_prop_core+0xe6>
            return LV_STYLE_RES_INHERIT;
 800d5ec:	2302      	movs	r3, #2
 800d5ee:	e091      	b.n	800d714 <get_prop_core+0x200>
        if(skip_trans) continue;
 800d5f0:	bf00      	nop
 800d5f2:	e002      	b.n	800d5fa <get_prop_core+0xe6>
        if(part_act != part) continue;
 800d5f4:	bf00      	nop
 800d5f6:	e000      	b.n	800d5fa <get_prop_core+0xe6>
        if((obj_style->style->has_group & group) == 0) continue;
 800d5f8:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800d5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d604:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	461a      	mov	r2, r3
 800d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60e:	4293      	cmp	r3, r2
 800d610:	d3aa      	bcc.n	800d568 <get_prop_core+0x54>
 800d612:	e06d      	b.n	800d6f0 <get_prop_core+0x1dc>
        if(obj_style->is_trans == false) break;
 800d614:	bf00      	nop
        }
    }

    for(; i < obj->style_cnt; i++) {
 800d616:	e06b      	b.n	800d6f0 <get_prop_core+0x1dc>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	68da      	ldr	r2, [r3, #12]
 800d61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61e:	00db      	lsls	r3, r3, #3
 800d620:	4413      	add	r3, r2
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	7a9a      	ldrb	r2, [r3, #10]
 800d626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d62a:	4013      	ands	r3, r2
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d054      	beq.n	800d6dc <get_prop_core+0x1c8>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	68da      	ldr	r2, [r3, #12]
 800d636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d638:	00db      	lsls	r3, r3, #3
 800d63a:	4413      	add	r3, r2
 800d63c:	623b      	str	r3, [r7, #32]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	68da      	ldr	r2, [r3, #12]
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	4413      	add	r3, r2
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff fdc8 	bl	800d1e4 <lv_obj_style_get_selector_part>
 800d654:	61f8      	str	r0, [r7, #28]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	68da      	ldr	r2, [r3, #12]
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	4413      	add	r3, r2
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d666:	4618      	mov	r0, r3
 800d668:	f7ff fdb0 	bl	800d1cc <lv_obj_style_get_selector_state>
 800d66c:	4603      	mov	r3, r0
 800d66e:	837b      	strh	r3, [r7, #26]
        if(part_act != part) continue;
 800d670:	69fa      	ldr	r2, [r7, #28]
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	429a      	cmp	r2, r3
 800d676:	d133      	bne.n	800d6e0 <get_prop_core+0x1cc>

        /*Be sure the style not specifies other state than the requested.
         *E.g. For HOVER+PRESS object state, HOVER style only is OK, but HOVER+FOCUS style is not*/
        if((state_act & state_inv)) continue;
 800d678:	8b7a      	ldrh	r2, [r7, #26]
 800d67a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d67c:	4013      	ands	r3, r2
 800d67e:	b29b      	uxth	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d12f      	bne.n	800d6e4 <get_prop_core+0x1d0>

        /*Check only better candidates*/
        if(state_act <= weight) continue;
 800d684:	8b7b      	ldrh	r3, [r7, #26]
 800d686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d688:	429a      	cmp	r2, r3
 800d68a:	da2d      	bge.n	800d6e8 <get_prop_core+0x1d4>

        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f107 0214 	add.w	r2, r7, #20
 800d694:	88f9      	ldrh	r1, [r7, #6]
 800d696:	4618      	mov	r0, r3
 800d698:	f015 fa8c 	bl	8022bb4 <lv_style_get_prop>
 800d69c:	4603      	mov	r3, r0
 800d69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(found == LV_STYLE_RES_FOUND) {
 800d6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d112      	bne.n	800d6d0 <get_prop_core+0x1bc>
            if(state_act == state) {
 800d6aa:	8b7a      	ldrh	r2, [r7, #26]
 800d6ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d104      	bne.n	800d6bc <get_prop_core+0x1a8>
                *v = value_tmp;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e02b      	b.n	800d714 <get_prop_core+0x200>
            }
            if(weight < state_act) {
 800d6bc:	8b7b      	ldrh	r3, [r7, #26]
 800d6be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	da12      	bge.n	800d6ea <get_prop_core+0x1d6>
                weight = state_act;
 800d6c4:	8b7b      	ldrh	r3, [r7, #26]
 800d6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                *v = value_tmp;
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	697a      	ldr	r2, [r7, #20]
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	e00c      	b.n	800d6ea <get_prop_core+0x1d6>
            }
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800d6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6d4:	2b02      	cmp	r3, #2
 800d6d6:	d108      	bne.n	800d6ea <get_prop_core+0x1d6>
            return LV_STYLE_RES_INHERIT;
 800d6d8:	2302      	movs	r3, #2
 800d6da:	e01b      	b.n	800d714 <get_prop_core+0x200>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800d6dc:	bf00      	nop
 800d6de:	e004      	b.n	800d6ea <get_prop_core+0x1d6>
        if(part_act != part) continue;
 800d6e0:	bf00      	nop
 800d6e2:	e002      	b.n	800d6ea <get_prop_core+0x1d6>
        if((state_act & state_inv)) continue;
 800d6e4:	bf00      	nop
 800d6e6:	e000      	b.n	800d6ea <get_prop_core+0x1d6>
        if(state_act <= weight) continue;
 800d6e8:	bf00      	nop
    for(; i < obj->style_cnt; i++) {
 800d6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d6f4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d38a      	bcc.n	800d618 <get_prop_core+0x104>
        }
    }

    if(weight >= 0) {
 800d702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d704:	2b00      	cmp	r3, #0
 800d706:	db04      	blt.n	800d712 <get_prop_core+0x1fe>
        *v = value_tmp;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	601a      	str	r2, [r3, #0]
        return LV_STYLE_RES_FOUND;
 800d70e:	2301      	movs	r3, #1
 800d710:	e000      	b.n	800d714 <get_prop_core+0x200>
    }
    else return LV_STYLE_RES_NOT_FOUND;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3740      	adds	r7, #64	; 0x40
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 fc33 	bl	800df90 <lv_obj_get_child_cnt>
 800d72a:	6138      	str	r0, [r7, #16]
    for(i = 0; i < child_cnt; i++) {
 800d72c:	2300      	movs	r3, #0
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	e018      	b.n	800d764 <refresh_children_style+0x48>
        lv_obj_t * child = obj->spec_attr->children[i];
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	4413      	add	r3, r2
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	60fb      	str	r3, [r7, #12]
        lv_obj_invalidate(child);
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f7fb ff8b 	bl	800965e <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800d748:	2200      	movs	r2, #0
 800d74a:	212a      	movs	r1, #42	; 0x2a
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f7f7 f9d1 	bl	8004af4 <lv_event_send>
        lv_obj_invalidate(child);
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f7fb ff83 	bl	800965e <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f7ff ffdf 	bl	800d71c <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	3301      	adds	r3, #1
 800d762:	617b      	str	r3, [r7, #20]
 800d764:	697a      	ldr	r2, [r7, #20]
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d3e2      	bcc.n	800d732 <refresh_children_style+0x16>
    }
}
 800d76c:	bf00      	nop
 800d76e:	bf00      	nop
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	603b      	str	r3, [r7, #0]
 800d784:	4613      	mov	r3, r2
 800d786:	80fb      	strh	r3, [r7, #6]
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
 800d788:	2300      	movs	r3, #0
 800d78a:	76fb      	strb	r3, [r7, #27]
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800d78c:	483a      	ldr	r0, [pc, #232]	; (800d878 <trans_del+0x100>)
 800d78e:	f014 f909 	bl	80219a4 <_lv_ll_get_tail>
 800d792:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 800d794:	e065      	b.n	800d862 <trans_del+0xea>
        if(tr == tr_limit) break;
 800d796:	69fa      	ldr	r2, [r7, #28]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d065      	beq.n	800d86a <trans_del+0xf2>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800d79e:	69f9      	ldr	r1, [r7, #28]
 800d7a0:	4835      	ldr	r0, [pc, #212]	; (800d878 <trans_del+0x100>)
 800d7a2:	f014 f925 	bl	80219f0 <_lv_ll_get_prev>
 800d7a6:	6138      	str	r0, [r7, #16]

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d155      	bne.n	800d85e <trans_del+0xe6>
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d003      	beq.n	800d7c4 <trans_del+0x4c>
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800d7c2:	d14c      	bne.n	800d85e <trans_del+0xe6>
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	889b      	ldrh	r3, [r3, #4]
 800d7c8:	88fa      	ldrh	r2, [r7, #6]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d004      	beq.n	800d7d8 <trans_del+0x60>
 800d7ce:	88fb      	ldrh	r3, [r7, #6]
 800d7d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d142      	bne.n	800d85e <trans_del+0xe6>
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
 800d7d8:	2300      	movs	r3, #0
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	e029      	b.n	800d832 <trans_del+0xba>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	68da      	ldr	r2, [r3, #12]
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	00db      	lsls	r3, r3, #3
 800d7e6:	4413      	add	r3, r2
 800d7e8:	79db      	ldrb	r3, [r3, #7]
 800d7ea:	f003 0302 	and.w	r3, r3, #2
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d01b      	beq.n	800d82c <trans_del+0xb4>
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800d7fa:	d00b      	beq.n	800d814 <trans_del+0x9c>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	68da      	ldr	r2, [r3, #12]
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	4413      	add	r3, r2
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d80c:	461a      	mov	r2, r3
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	4293      	cmp	r3, r2
 800d812:	d10b      	bne.n	800d82c <trans_del+0xb4>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	68da      	ldr	r2, [r3, #12]
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	00db      	lsls	r3, r3, #3
 800d81c:	4413      	add	r3, r2
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	889b      	ldrh	r3, [r3, #4]
 800d824:	4619      	mov	r1, r3
 800d826:	4610      	mov	r0, r2
 800d828:	f015 f8de 	bl	80229e8 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	3301      	adds	r3, #1
 800d830:	617b      	str	r3, [r7, #20]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d836:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	461a      	mov	r2, r3
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	4293      	cmp	r3, r2
 800d842:	d3cc      	bcc.n	800d7de <trans_del+0x66>
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800d844:	2100      	movs	r1, #0
 800d846:	69f8      	ldr	r0, [r7, #28]
 800d848:	f012 fbee 	bl	8020028 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800d84c:	69f9      	ldr	r1, [r7, #28]
 800d84e:	480a      	ldr	r0, [pc, #40]	; (800d878 <trans_del+0x100>)
 800d850:	f014 f83a 	bl	80218c8 <_lv_ll_remove>
            lv_mem_free(tr);
 800d854:	69f8      	ldr	r0, [r7, #28]
 800d856:	f014 fa83 	bl	8021d60 <lv_mem_free>
            removed = true;
 800d85a:	2301      	movs	r3, #1
 800d85c:	76fb      	strb	r3, [r7, #27]

        }
        tr = tr_prev;
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d196      	bne.n	800d796 <trans_del+0x1e>
 800d868:	e000      	b.n	800d86c <trans_del+0xf4>
        if(tr == tr_limit) break;
 800d86a:	bf00      	nop
    }
    return removed;
 800d86c:	7efb      	ldrb	r3, [r7, #27]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3720      	adds	r7, #32
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	200008a0 	.word	0x200008a0

0800d87c <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
    trans_t * tr = _tr;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	617b      	str	r3, [r7, #20]
    lv_obj_t * obj = tr->obj;
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	613b      	str	r3, [r7, #16]

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d890:	2300      	movs	r3, #0
 800d892:	61fb      	str	r3, [r7, #28]
 800d894:	e152      	b.n	800db3c <trans_anim_cb+0x2c0>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	68da      	ldr	r2, [r3, #12]
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	00db      	lsls	r3, r3, #3
 800d89e:	4413      	add	r3, r2
 800d8a0:	79db      	ldrb	r3, [r3, #7]
 800d8a2:	f003 0302 	and.w	r3, r3, #2
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00c      	beq.n	800d8c6 <trans_anim_cb+0x4a>
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	68da      	ldr	r2, [r3, #12]
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d8bc:	461a      	mov	r2, r3
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d003      	beq.n	800d8ce <trans_anim_cb+0x52>
    for(i = 0; i < obj->style_cnt; i++) {
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	61fb      	str	r3, [r7, #28]
 800d8cc:	e136      	b.n	800db3c <trans_anim_cb+0x2c0>

        lv_style_value_t value_final;
        switch(tr->prop) {
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	889b      	ldrh	r3, [r3, #4]
 800d8d2:	3b20      	subs	r3, #32
 800d8d4:	2b47      	cmp	r3, #71	; 0x47
 800d8d6:	f200 80dc 	bhi.w	800da92 <trans_anim_cb+0x216>
 800d8da:	a201      	add	r2, pc, #4	; (adr r2, 800d8e0 <trans_anim_cb+0x64>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800da63 	.word	0x0800da63
 800d8e4:	0800da93 	.word	0x0800da93
 800d8e8:	0800da93 	.word	0x0800da93
 800d8ec:	0800da93 	.word	0x0800da93
 800d8f0:	0800da93 	.word	0x0800da93
 800d8f4:	0800da93 	.word	0x0800da93
 800d8f8:	0800da93 	.word	0x0800da93
 800d8fc:	0800da93 	.word	0x0800da93
 800d900:	0800da93 	.word	0x0800da93
 800d904:	0800da93 	.word	0x0800da93
 800d908:	0800da93 	.word	0x0800da93
 800d90c:	0800da93 	.word	0x0800da93
 800d910:	0800da93 	.word	0x0800da93
 800d914:	0800da93 	.word	0x0800da93
 800d918:	0800da93 	.word	0x0800da93
 800d91c:	0800da93 	.word	0x0800da93
 800d920:	0800da63 	.word	0x0800da63
 800d924:	0800da93 	.word	0x0800da93
 800d928:	0800da93 	.word	0x0800da93
 800d92c:	0800da01 	.word	0x0800da01
 800d930:	0800da01 	.word	0x0800da01
 800d934:	0800da93 	.word	0x0800da93
 800d938:	0800da63 	.word	0x0800da63
 800d93c:	0800da93 	.word	0x0800da93
 800d940:	0800da93 	.word	0x0800da93
 800d944:	0800da93 	.word	0x0800da93
 800d948:	0800da93 	.word	0x0800da93
 800d94c:	0800da93 	.word	0x0800da93
 800d950:	0800da93 	.word	0x0800da93
 800d954:	0800da93 	.word	0x0800da93
 800d958:	0800da93 	.word	0x0800da93
 800d95c:	0800da93 	.word	0x0800da93
 800d960:	0800da93 	.word	0x0800da93
 800d964:	0800da93 	.word	0x0800da93
 800d968:	0800da93 	.word	0x0800da93
 800d96c:	0800da93 	.word	0x0800da93
 800d970:	0800da63 	.word	0x0800da63
 800d974:	0800da93 	.word	0x0800da93
 800d978:	0800da93 	.word	0x0800da93
 800d97c:	0800da63 	.word	0x0800da63
 800d980:	0800da93 	.word	0x0800da93
 800d984:	0800da93 	.word	0x0800da93
 800d988:	0800da93 	.word	0x0800da93
 800d98c:	0800da93 	.word	0x0800da93
 800d990:	0800da93 	.word	0x0800da93
 800d994:	0800da93 	.word	0x0800da93
 800d998:	0800da93 	.word	0x0800da93
 800d99c:	0800da93 	.word	0x0800da93
 800d9a0:	0800da93 	.word	0x0800da93
 800d9a4:	0800da93 	.word	0x0800da93
 800d9a8:	0800da93 	.word	0x0800da93
 800d9ac:	0800da93 	.word	0x0800da93
 800d9b0:	0800da93 	.word	0x0800da93
 800d9b4:	0800da63 	.word	0x0800da63
 800d9b8:	0800da93 	.word	0x0800da93
 800d9bc:	0800da17 	.word	0x0800da17
 800d9c0:	0800da93 	.word	0x0800da93
 800d9c4:	0800da93 	.word	0x0800da93
 800d9c8:	0800da93 	.word	0x0800da93
 800d9cc:	0800da93 	.word	0x0800da93
 800d9d0:	0800da93 	.word	0x0800da93
 800d9d4:	0800da93 	.word	0x0800da93
 800d9d8:	0800da93 	.word	0x0800da93
 800d9dc:	0800da93 	.word	0x0800da93
 800d9e0:	0800da93 	.word	0x0800da93
 800d9e4:	0800da2d 	.word	0x0800da2d
 800d9e8:	0800da93 	.word	0x0800da93
 800d9ec:	0800da93 	.word	0x0800da93
 800d9f0:	0800da93 	.word	0x0800da93
 800d9f4:	0800da93 	.word	0x0800da93
 800d9f8:	0800da17 	.word	0x0800da17
 800d9fc:	0800da01 	.word	0x0800da01

            case LV_STYLE_BORDER_SIDE:
            case LV_STYLE_BORDER_POST:
            case LV_STYLE_BLEND_MODE:
                if(v < 255) value_final.num = tr->start_value.num;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	2bfe      	cmp	r3, #254	; 0xfe
 800da04:	dc03      	bgt.n	800da0e <trans_anim_cb+0x192>
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	60fb      	str	r3, [r7, #12]
                else value_final.num = tr->end_value.num;
                break;
 800da0c:	e05d      	b.n	800daca <trans_anim_cb+0x24e>
                else value_final.num = tr->end_value.num;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	60fb      	str	r3, [r7, #12]
                break;
 800da14:	e059      	b.n	800daca <trans_anim_cb+0x24e>
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	2bfe      	cmp	r3, #254	; 0xfe
 800da1a:	dc03      	bgt.n	800da24 <trans_anim_cb+0x1a8>
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	60fb      	str	r3, [r7, #12]
                else value_final.ptr = tr->end_value.ptr;
                break;
 800da22:	e052      	b.n	800daca <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	60fb      	str	r3, [r7, #12]
                break;
 800da2a:	e04e      	b.n	800daca <trans_anim_cb+0x24e>
            case LV_STYLE_COLOR_FILTER_DSC:
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d103      	bne.n	800da3c <trans_anim_cb+0x1c0>
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	60fb      	str	r3, [r7, #12]
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
                else value_final.ptr = tr->end_value.ptr;
                break;
 800da3a:	e046      	b.n	800daca <trans_anim_cb+0x24e>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d103      	bne.n	800da4c <trans_anim_cb+0x1d0>
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	60fb      	str	r3, [r7, #12]
                break;
 800da4a:	e03e      	b.n	800daca <trans_anim_cb+0x24e>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2b7f      	cmp	r3, #127	; 0x7f
 800da50:	dc03      	bgt.n	800da5a <trans_anim_cb+0x1de>
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	60fb      	str	r3, [r7, #12]
                break;
 800da58:	e037      	b.n	800daca <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	60fb      	str	r3, [r7, #12]
                break;
 800da60:	e033      	b.n	800daca <trans_anim_cb+0x24e>
            case LV_STYLE_BORDER_COLOR:
            case LV_STYLE_TEXT_COLOR:
            case LV_STYLE_SHADOW_COLOR:
            case LV_STYLE_OUTLINE_COLOR:
            case LV_STYLE_IMG_RECOLOR:
                if(v <= 0) value_final.color = tr->start_value.color;
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	dc03      	bgt.n	800da70 <trans_anim_cb+0x1f4>
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	7b1b      	ldrb	r3, [r3, #12]
 800da6c:	733b      	strb	r3, [r7, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
                break;
 800da6e:	e02c      	b.n	800daca <trans_anim_cb+0x24e>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	2bfe      	cmp	r3, #254	; 0xfe
 800da74:	dd03      	ble.n	800da7e <trans_anim_cb+0x202>
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	7c1b      	ldrb	r3, [r3, #16]
 800da7a:	733b      	strb	r3, [r7, #12]
                break;
 800da7c:	e025      	b.n	800daca <trans_anim_cb+0x24e>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	b2da      	uxtb	r2, r3
 800da82:	6979      	ldr	r1, [r7, #20]
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	7b09      	ldrb	r1, [r1, #12]
 800da88:	7c18      	ldrb	r0, [r3, #16]
 800da8a:	f7fe fb3b 	bl	800c104 <lv_color_mix>
 800da8e:	7338      	strb	r0, [r7, #12]
                break;
 800da90:	e01b      	b.n	800daca <trans_anim_cb+0x24e>

            default:
                if(v == 0) value_final.num = tr->start_value.num;
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d103      	bne.n	800daa0 <trans_anim_cb+0x224>
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	60fb      	str	r3, [r7, #12]
                else if(v == 255) value_final.num = tr->end_value.num;
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
                break;
 800da9e:	e013      	b.n	800dac8 <trans_anim_cb+0x24c>
                else if(v == 255) value_final.num = tr->end_value.num;
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2bff      	cmp	r3, #255	; 0xff
 800daa4:	d103      	bne.n	800daae <trans_anim_cb+0x232>
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	691b      	ldr	r3, [r3, #16]
 800daaa:	60fb      	str	r3, [r7, #12]
                break;
 800daac:	e00c      	b.n	800dac8 <trans_anim_cb+0x24c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	68da      	ldr	r2, [r3, #12]
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	6919      	ldr	r1, [r3, #16]
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	1acb      	subs	r3, r1, r3
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	fb01 f303 	mul.w	r3, r1, r3
 800dac2:	121b      	asrs	r3, r3, #8
 800dac4:	4413      	add	r3, r2
 800dac6:	60fb      	str	r3, [r7, #12]
                break;
 800dac8:	bf00      	nop
        }

        lv_style_value_t old_value;
        bool refr = true;
 800daca:	2301      	movs	r3, #1
 800dacc:	76fb      	strb	r3, [r7, #27]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	68da      	ldr	r2, [r3, #12]
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	00db      	lsls	r3, r3, #3
 800dad6:	4413      	add	r3, r2
 800dad8:	6818      	ldr	r0, [r3, #0]
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	889b      	ldrh	r3, [r3, #4]
 800dade:	f107 0208 	add.w	r2, r7, #8
 800dae2:	4619      	mov	r1, r3
 800dae4:	f015 f866 	bl	8022bb4 <lv_style_get_prop>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00d      	beq.n	800db0a <trans_anim_cb+0x28e>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d109      	bne.n	800db0a <trans_anim_cb+0x28e>
 800daf6:	7b3a      	ldrb	r2, [r7, #12]
 800daf8:	7a3b      	ldrb	r3, [r7, #8]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d105      	bne.n	800db0a <trans_anim_cb+0x28e>
               value_final.num == old_value.num) {
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	68bb      	ldr	r3, [r7, #8]
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800db02:	429a      	cmp	r2, r3
 800db04:	d101      	bne.n	800db0a <trans_anim_cb+0x28e>
                refr = false;
 800db06:	2300      	movs	r3, #0
 800db08:	76fb      	strb	r3, [r7, #27]
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	68da      	ldr	r2, [r3, #12]
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	00db      	lsls	r3, r3, #3
 800db12:	4413      	add	r3, r2
 800db14:	6818      	ldr	r0, [r3, #0]
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	889b      	ldrh	r3, [r3, #4]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	4619      	mov	r1, r3
 800db1e:	f015 f835 	bl	8022b8c <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800db22:	7efb      	ldrb	r3, [r7, #27]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d014      	beq.n	800db52 <trans_anim_cb+0x2d6>
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	6818      	ldr	r0, [r3, #0]
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	6899      	ldr	r1, [r3, #8]
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	889b      	ldrh	r3, [r3, #4]
 800db34:	461a      	mov	r2, r3
 800db36:	f7fe fe01 	bl	800c73c <lv_obj_refresh_style>
        break;

    }

}
 800db3a:	e00b      	b.n	800db54 <trans_anim_cb+0x2d8>
    for(i = 0; i < obj->style_cnt; i++) {
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800db40:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800db44:	b2db      	uxtb	r3, r3
 800db46:	461a      	mov	r2, r3
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	4293      	cmp	r3, r2
 800db4c:	f4ff aea3 	bcc.w	800d896 <trans_anim_cb+0x1a>
}
 800db50:	e000      	b.n	800db54 <trans_anim_cb+0x2d8>
        break;
 800db52:	bf00      	nop
}
 800db54:	bf00      	nop
 800db56:	3720      	adds	r7, #32
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 800db5c:	b590      	push	{r4, r7, lr}
 800db5e:	b087      	sub	sp, #28
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	617b      	str	r3, [r7, #20]

    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff fb38 	bl	800d1e4 <lv_obj_style_get_selector_part>
 800db74:	6138      	str	r0, [r7, #16]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	6818      	ldr	r0, [r3, #0]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	889b      	ldrh	r3, [r3, #4]
 800db7e:	697c      	ldr	r4, [r7, #20]
 800db80:	461a      	mov	r2, r3
 800db82:	6939      	ldr	r1, [r7, #16]
 800db84:	f7fe feb4 	bl	800c8f0 <lv_obj_get_style_prop>
 800db88:	60e0      	str	r0, [r4, #12]

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    lv_style_prop_t prop_tmp = tr->prop;
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	889b      	ldrh	r3, [r3, #4]
 800db8e:	81fb      	strh	r3, [r7, #14]
    tr->prop = LV_STYLE_PROP_INV;
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	2200      	movs	r2, #0
 800db94:	809a      	strh	r2, [r3, #4]

    /*Delete the related transitions if any*/
    trans_del(tr->obj, part, prop_tmp, tr);
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	6818      	ldr	r0, [r3, #0]
 800db9a:	89fa      	ldrh	r2, [r7, #14]
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	6939      	ldr	r1, [r7, #16]
 800dba0:	f7ff fdea 	bl	800d778 <trans_del>

    tr->prop = prop_tmp;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	89fa      	ldrh	r2, [r7, #14]
 800dba8:	809a      	strh	r2, [r3, #4]

    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	f7ff fc0c 	bl	800d3d2 <get_trans_style>
 800dbba:	60b8      	str	r0, [r7, #8]
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	6818      	ldr	r0, [r3, #0]
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	8899      	ldrh	r1, [r3, #4]
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	68da      	ldr	r2, [r3, #12]
 800dbc8:	f014 ffe0 	bl	8022b8c <lv_style_set_prop>

}
 800dbcc:	bf00      	nop
 800dbce:	371c      	adds	r7, #28
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd90      	pop	{r4, r7, pc}

0800dbd4 <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08a      	sub	sp, #40	; 0x28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	61bb      	str	r3, [r7, #24]
    lv_obj_t * obj = tr->obj;
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	617b      	str	r3, [r7, #20]
    lv_style_prop_t prop = tr->prop;
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	889b      	ldrh	r3, [r3, #4]
 800dbec:	827b      	strh	r3, [r7, #18]

    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800dbf4:	4842      	ldr	r0, [pc, #264]	; (800dd00 <trans_anim_ready_cb+0x12c>)
 800dbf6:	f013 fec4 	bl	8021982 <_lv_ll_get_head>
 800dbfa:	6238      	str	r0, [r7, #32]
 800dbfc:	e01e      	b.n	800dc3c <trans_anim_ready_cb+0x68>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800dbfe:	6a3a      	ldr	r2, [r7, #32]
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d015      	beq.n	800dc32 <trans_anim_ready_cb+0x5e>
 800dc06:	6a3b      	ldr	r3, [r7, #32]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d10f      	bne.n	800dc32 <trans_anim_ready_cb+0x5e>
 800dc12:	6a3b      	ldr	r3, [r7, #32]
 800dc14:	689a      	ldr	r2, [r3, #8]
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d109      	bne.n	800dc32 <trans_anim_ready_cb+0x5e>
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	889a      	ldrh	r2, [r3, #4]
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	889b      	ldrh	r3, [r3, #4]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d103      	bne.n	800dc32 <trans_anim_ready_cb+0x5e>
            running = true;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800dc30:	e007      	b.n	800dc42 <trans_anim_ready_cb+0x6e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800dc32:	6a39      	ldr	r1, [r7, #32]
 800dc34:	4832      	ldr	r0, [pc, #200]	; (800dd00 <trans_anim_ready_cb+0x12c>)
 800dc36:	f013 fec6 	bl	80219c6 <_lv_ll_get_next>
 800dc3a:	6238      	str	r0, [r7, #32]
 800dc3c:	6a3b      	ldr	r3, [r7, #32]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1dd      	bne.n	800dbfe <trans_anim_ready_cb+0x2a>
        }
    }

    if(!running) {
 800dc42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc46:	f083 0301 	eor.w	r3, r3, #1
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d053      	beq.n	800dcf8 <trans_anim_ready_cb+0x124>
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 800dc50:	2300      	movs	r3, #0
 800dc52:	61fb      	str	r3, [r7, #28]
 800dc54:	e045      	b.n	800dce2 <trans_anim_ready_cb+0x10e>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	68da      	ldr	r2, [r3, #12]
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	00db      	lsls	r3, r3, #3
 800dc5e:	4413      	add	r3, r2
 800dc60:	79db      	ldrb	r3, [r3, #7]
 800dc62:	f003 0302 	and.w	r3, r3, #2
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d037      	beq.n	800dcdc <trans_anim_ready_cb+0x108>
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	68da      	ldr	r2, [r3, #12]
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	00db      	lsls	r3, r3, #3
 800dc74:	4413      	add	r3, r2
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d12a      	bne.n	800dcdc <trans_anim_ready_cb+0x108>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800dc86:	69b9      	ldr	r1, [r7, #24]
 800dc88:	481d      	ldr	r0, [pc, #116]	; (800dd00 <trans_anim_ready_cb+0x12c>)
 800dc8a:	f013 fe1d 	bl	80218c8 <_lv_ll_remove>
                lv_mem_free(tr);
 800dc8e:	69b8      	ldr	r0, [r7, #24]
 800dc90:	f014 f866 	bl	8021d60 <lv_mem_free>

                _lv_obj_style_t * obj_style = &obj->styles[i];
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	68da      	ldr	r2, [r3, #12]
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	00db      	lsls	r3, r3, #3
 800dc9c:	4413      	add	r3, r2
 800dc9e:	60fb      	str	r3, [r7, #12]
                lv_style_remove_prop(obj_style->style, prop);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	8a7a      	ldrh	r2, [r7, #18]
 800dca6:	4611      	mov	r1, r2
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f014 fe9d 	bl	80229e8 <lv_style_remove_prop>

                if(lv_style_is_empty(obj->styles[i].style)) {
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	68da      	ldr	r2, [r3, #12]
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	00db      	lsls	r3, r3, #3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f015 f896 	bl	8022dec <lv_style_is_empty>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d017      	beq.n	800dcf6 <trans_anim_ready_cb+0x122>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6819      	ldr	r1, [r3, #0]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	6978      	ldr	r0, [r7, #20]
 800dcd6:	f7fe fc3b 	bl	800c550 <lv_obj_remove_style>

                }
                break;
 800dcda:	e00c      	b.n	800dcf6 <trans_anim_ready_cb+0x122>
        for(i = 0; i < obj->style_cnt; i++) {
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	3301      	adds	r3, #1
 800dce0:	61fb      	str	r3, [r7, #28]
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800dce6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	461a      	mov	r2, r3
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d3b0      	bcc.n	800dc56 <trans_anim_ready_cb+0x82>
            }
        }
    }
}
 800dcf4:	e000      	b.n	800dcf8 <trans_anim_ready_cb+0x124>
                break;
 800dcf6:	bf00      	nop
}
 800dcf8:	bf00      	nop
 800dcfa:	3728      	adds	r7, #40	; 0x28
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	200008a0 	.word	0x200008a0

0800dd04 <calculate_layer_type>:

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7fe fafd 	bl	800c30e <lv_obj_get_style_transform_angle>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <calculate_layer_type+0x1a>
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	e01c      	b.n	800dd58 <calculate_layer_type+0x54>
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800dd1e:	2100      	movs	r1, #0
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7fe fae2 	bl	800c2ea <lv_obj_get_style_transform_zoom>
 800dd26:	4603      	mov	r3, r0
 800dd28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd2c:	d001      	beq.n	800dd32 <calculate_layer_type+0x2e>
 800dd2e:	2302      	movs	r3, #2
 800dd30:	e012      	b.n	800dd58 <calculate_layer_type+0x54>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800dd32:	2100      	movs	r1, #0
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7fe fb0e 	bl	800c356 <lv_obj_get_style_opa>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2bff      	cmp	r3, #255	; 0xff
 800dd3e:	d001      	beq.n	800dd44 <calculate_layer_type+0x40>
 800dd40:	2301      	movs	r3, #1
 800dd42:	e009      	b.n	800dd58 <calculate_layer_type+0x54>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800dd44:	2100      	movs	r1, #0
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7fe fb3a 	bl	800c3c0 <lv_obj_get_style_blend_mode>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <calculate_layer_type+0x52>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e000      	b.n	800dd58 <calculate_layer_type+0x54>
#endif
    return LV_LAYER_TYPE_NONE;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	607a      	str	r2, [r7, #4]
 800dd6c:	817b      	strh	r3, [r7, #10]
    lv_style_value_t v = {
        .num = (int32_t)value
 800dd6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    lv_style_value_t v = {
 800dd72:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	2107      	movs	r1, #7
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f7fe fe32 	bl	800c9e4 <lv_obj_set_local_style_prop>
}
 800dd80:	bf00      	nop
 800dd82:	3718      	adds	r7, #24
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	460b      	mov	r3, r1
 800dd92:	607a      	str	r2, [r7, #4]
 800dd94:	817b      	strh	r3, [r7, #10]
    lv_style_value_t v = {
        .num = (int32_t)value
 800dd96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    lv_style_value_t v = {
 800dd9a:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	2108      	movs	r1, #8
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f7fe fe1e 	bl	800c9e4 <lv_obj_set_local_style_prop>
}
 800dda8:	bf00      	nop
 800ddaa:	3718      	adds	r7, #24
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <lv_obj_set_style_opa>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_CLIP_CORNER, v, selector);
}

void lv_obj_set_style_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	607a      	str	r2, [r7, #4]
 800ddbc:	72fb      	strb	r3, [r7, #11]
    lv_style_value_t v = {
        .num = (int32_t)value
 800ddbe:	7afb      	ldrb	r3, [r7, #11]
    lv_style_value_t v = {
 800ddc0:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OPA, v, selector);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	697a      	ldr	r2, [r7, #20]
 800ddc6:	2160      	movs	r1, #96	; 0x60
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7fe fe0b 	bl	800c9e4 <lv_obj_set_local_style_prop>
}
 800ddce:	bf00      	nop
 800ddd0:	3718      	adds	r7, #24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <lv_obj_del>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_del(lv_obj_t * obj)
{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b086      	sub	sp, #24
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("begin (delete %p)", (void *)obj);
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_obj_invalidate(obj);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7fb fc3d 	bl	800965e <lv_obj_invalidate>

    lv_obj_t * par = lv_obj_get_parent(obj);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 f88f 	bl	800df08 <lv_obj_get_parent>
 800ddea:	60f8      	str	r0, [r7, #12]
    if(par) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <lv_obj_del+0x22>
        lv_obj_scrollbar_invalidate(par);
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f7fd fdd0 	bl	800b998 <lv_obj_scrollbar_invalidate>
    }

    lv_disp_t * disp = NULL;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	617b      	str	r3, [r7, #20]
    bool act_scr_del = false;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	74fb      	strb	r3, [r7, #19]
    if(par == NULL) {
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10d      	bne.n	800de22 <lv_obj_del+0x4c>
        disp = lv_obj_get_disp(obj);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 f844 	bl	800de94 <lv_obj_get_disp>
 800de0c:	6178      	str	r0, [r7, #20]
        if(!disp) return;   /*Shouldn't happen*/
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d027      	beq.n	800de64 <lv_obj_del+0x8e>
        if(disp->act_scr == obj) act_scr_del = true;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d101      	bne.n	800de22 <lv_obj_del+0x4c>
 800de1e:	2301      	movs	r3, #1
 800de20:	74fb      	strb	r3, [r7, #19]
    }

    obj_del_core(obj);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 f8f4 	bl	800e010 <obj_del_core>

    /*Call the ancestor's event handler to the parent to notify it about the child delete*/
    if(par) {
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d013      	beq.n	800de56 <lv_obj_del+0x80>
        lv_obj_update_layout(par);
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	f7fa fe10 	bl	8008a54 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 800de34:	2100      	movs	r1, #0
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f7fd fdeb 	bl	800ba12 <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f7fd fdab 	bl	800b998 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 800de42:	2200      	movs	r2, #0
 800de44:	2122      	movs	r1, #34	; 0x22
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f7f6 fe54 	bl	8004af4 <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 800de4c:	2200      	movs	r2, #0
 800de4e:	2124      	movs	r1, #36	; 0x24
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7f6 fe4f 	bl	8004af4 <lv_event_send>
    }

    /*Handle if the active screen was deleted*/
    if(act_scr_del) {
 800de56:	7cfb      	ldrb	r3, [r7, #19]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d004      	beq.n	800de66 <lv_obj_del+0x90>
        LV_LOG_WARN("the active screen was deleted");
        disp->act_scr = NULL;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	2200      	movs	r2, #0
 800de60:	611a      	str	r2, [r3, #16]
 800de62:	e000      	b.n	800de66 <lv_obj_del+0x90>
        if(!disp) return;   /*Shouldn't happen*/
 800de64:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
    LV_LOG_TRACE("finished (delete %p)", (void *)obj);
}
 800de66:	3718      	adds	r7, #24
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <lv_obj_get_screen>:
    }
    lv_group_swap_obj(obj1, obj2);
}

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_par;

    do {
        act_par = par;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	60bb      	str	r3, [r7, #8]
        par = lv_obj_get_parent(act_par);
 800de7c:	68b8      	ldr	r0, [r7, #8]
 800de7e:	f000 f843 	bl	800df08 <lv_obj_get_parent>
 800de82:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1f6      	bne.n	800de78 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_par;
 800de8a:	68bb      	ldr	r3, [r7, #8]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <lv_obj_get_disp>:

lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <lv_obj_get_disp+0x16>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e003      	b.n	800deb2 <lv_obj_get_disp+0x1e>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7ff ffde 	bl	800de6c <lv_obj_get_screen>
 800deb0:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800deb2:	4814      	ldr	r0, [pc, #80]	; (800df04 <lv_obj_get_disp+0x70>)
 800deb4:	f013 fd65 	bl	8021982 <_lv_ll_get_head>
 800deb8:	6138      	str	r0, [r7, #16]
 800deba:	e01a      	b.n	800def2 <lv_obj_get_disp+0x5e>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 800debc:	2300      	movs	r3, #0
 800debe:	60fb      	str	r3, [r7, #12]
 800dec0:	e00d      	b.n	800dede <lv_obj_get_disp+0x4a>
            if(d->screens[i] == scr) return d;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	68da      	ldr	r2, [r3, #12]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4413      	add	r3, r2
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	697a      	ldr	r2, [r7, #20]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d101      	bne.n	800ded8 <lv_obj_get_disp+0x44>
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	e010      	b.n	800defa <lv_obj_get_disp+0x66>
        for(i = 0; i < d->screen_cnt; i++) {
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3301      	adds	r3, #1
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d3ec      	bcc.n	800dec2 <lv_obj_get_disp+0x2e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800dee8:	6939      	ldr	r1, [r7, #16]
 800deea:	4806      	ldr	r0, [pc, #24]	; (800df04 <lv_obj_get_disp+0x70>)
 800deec:	f013 fd6b 	bl	80219c6 <_lv_ll_get_next>
 800def0:	6138      	str	r0, [r7, #16]
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1e1      	bne.n	800debc <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
 800def8:	2300      	movs	r3, #0
}
 800defa:	4618      	mov	r0, r3
 800defc:	3718      	adds	r7, #24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	20000858 	.word	0x20000858

0800df08 <lv_obj_get_parent>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <lv_obj_get_parent+0x12>
 800df16:	2300      	movs	r3, #0
 800df18:	e001      	b.n	800df1e <lv_obj_get_parent+0x16>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	685b      	ldr	r3, [r3, #4]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	370c      	adds	r7, #12
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
 800df2a:	b480      	push	{r7}
 800df2c:	b085      	sub	sp, #20
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
 800df32:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <lv_obj_get_child+0x16>
 800df3c:	2300      	movs	r3, #0
 800df3e:	e021      	b.n	800df84 <lv_obj_get_child+0x5a>

    uint32_t idu;
    if(id < 0) {
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	da0d      	bge.n	800df62 <lv_obj_get_child+0x38>
        id = obj->spec_attr->child_cnt + id;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	4413      	add	r3, r2
 800df50:	603b      	str	r3, [r7, #0]
        if(id < 0) return NULL;
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	da01      	bge.n	800df5c <lv_obj_get_child+0x32>
 800df58:	2300      	movs	r3, #0
 800df5a:	e013      	b.n	800df84 <lv_obj_get_child+0x5a>
        idu = (uint32_t) id;
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	e001      	b.n	800df66 <lv_obj_get_child+0x3c>
    }
    else {
        idu = id;
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	60fb      	str	r3, [r7, #12]
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d301      	bcc.n	800df76 <lv_obj_get_child+0x4c>
 800df72:	2300      	movs	r3, #0
 800df74:	e006      	b.n	800df84 <lv_obj_get_child+0x5a>
    else return obj->spec_attr->children[id];
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	681b      	ldr	r3, [r3, #0]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3714      	adds	r7, #20
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <lv_obj_get_child_cnt+0x14>
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	e002      	b.n	800dfaa <lv_obj_get_child_cnt+0x1a>
    return obj->spec_attr->child_cnt;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	685b      	ldr	r3, [r3, #4]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b084      	sub	sp, #16
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff ffa2 	bl	800df08 <lv_obj_get_parent>
 800dfc4:	60b8      	str	r0, [r7, #8]
    if(parent == NULL) return 0;
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d101      	bne.n	800dfd0 <lv_obj_get_index+0x1a>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e01b      	b.n	800e008 <lv_obj_get_index+0x52>

    uint32_t i = 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	60fb      	str	r3, [r7, #12]
 800dfd8:	e00d      	b.n	800dff6 <lv_obj_get_index+0x40>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	68b8      	ldr	r0, [r7, #8]
 800dfe0:	f7ff ffa3 	bl	800df2a <lv_obj_get_child>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d101      	bne.n	800dff0 <lv_obj_get_index+0x3a>
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	e00b      	b.n	800e008 <lv_obj_get_index+0x52>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	3301      	adds	r3, #1
 800dff4:	60fb      	str	r3, [r7, #12]
 800dff6:	68b8      	ldr	r0, [r7, #8]
 800dff8:	f7ff ffca 	bl	800df90 <lv_obj_get_child_cnt>
 800dffc:	4602      	mov	r2, r0
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	4293      	cmp	r3, r2
 800e002:	d3ea      	bcc.n	800dfda <lv_obj_get_index+0x24>
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 800e004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 800e010:	b590      	push	{r4, r7, lr}
 800e012:	b08d      	sub	sp, #52	; 0x34
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800e018:	2200      	movs	r2, #0
 800e01a:	2121      	movs	r1, #33	; 0x21
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7f6 fd69 	bl	8004af4 <lv_event_send>
 800e022:	4603      	mov	r3, r0
 800e024:	77fb      	strb	r3, [r7, #31]
    if(res == LV_RES_INV) return;
 800e026:	7ffb      	ldrb	r3, [r7, #31]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f000 80d2 	beq.w	800e1d2 <obj_del_core+0x1c2>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
 800e02e:	2100      	movs	r1, #0
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff ff7a 	bl	800df2a <lv_obj_get_child>
 800e036:	62f8      	str	r0, [r7, #44]	; 0x2c
    while(child) {
 800e038:	e007      	b.n	800e04a <obj_del_core+0x3a>
        obj_del_core(child);
 800e03a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e03c:	f7ff ffe8 	bl	800e010 <obj_del_core>
        child = lv_obj_get_child(obj, 0);
 800e040:	2100      	movs	r1, #0
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff ff71 	bl	800df2a <lv_obj_get_child>
 800e048:	62f8      	str	r0, [r7, #44]	; 0x2c
    while(child) {
 800e04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1f4      	bne.n	800e03a <obj_del_core+0x2a>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f7f7 ff5d 	bl	8005f10 <lv_obj_get_group>
 800e056:	61b8      	str	r0, [r7, #24]

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800e058:	2000      	movs	r0, #0
 800e05a:	f011 fec3 	bl	801fde4 <lv_indev_get_next>
 800e05e:	62b8      	str	r0, [r7, #40]	; 0x28
    while(indev) {
 800e060:	e028      	b.n	800e0b4 <obj_del_core+0xa4>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800e062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d004      	beq.n	800e076 <obj_del_core+0x66>
 800e06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	429a      	cmp	r2, r3
 800e074:	d103      	bne.n	800e07e <obj_del_core+0x6e>
            lv_indev_reset(indev, obj);
 800e076:	6879      	ldr	r1, [r7, #4]
 800e078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e07a:	f7f7 fad9 	bl	8005630 <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 800e07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	429a      	cmp	r2, r3
 800e086:	d102      	bne.n	800e08e <obj_del_core+0x7e>
            indev->proc.types.pointer.last_pressed = NULL;
 800e088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08a:	2200      	movs	r2, #0
 800e08c:	635a      	str	r2, [r3, #52]	; 0x34
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e092:	69ba      	ldr	r2, [r7, #24]
 800e094:	429a      	cmp	r2, r3
 800e096:	d109      	bne.n	800e0ac <obj_del_core+0x9c>
 800e098:	f7f7 fb90 	bl	80057bc <lv_indev_get_obj_act>
 800e09c:	4602      	mov	r2, r0
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d103      	bne.n	800e0ac <obj_del_core+0x9c>
            lv_indev_reset(indev, obj);
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0a8:	f7f7 fac2 	bl	8005630 <lv_indev_reset>
        }
        indev = lv_indev_get_next(indev);
 800e0ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0ae:	f011 fe99 	bl	801fde4 <lv_indev_get_next>
 800e0b2:	62b8      	str	r0, [r7, #40]	; 0x28
    while(indev) {
 800e0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1d3      	bne.n	800e062 <obj_del_core+0x52>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7f9 f908 	bl	80072d0 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d146      	bne.n	800e156 <obj_del_core+0x146>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7ff fee3 	bl	800de94 <lv_obj_get_disp>
 800e0ce:	6138      	str	r0, [r7, #16]
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e0d4:	e00b      	b.n	800e0ee <obj_del_core+0xde>
            if(disp->screens[i] == obj) break;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	68da      	ldr	r2, [r3, #12]
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4413      	add	r3, r2
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d008      	beq.n	800e0fa <obj_del_core+0xea>
        for(i = 0; i < disp->screen_cnt; i++) {
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d3ee      	bcc.n	800e0d6 <obj_del_core+0xc6>
 800e0f8:	e000      	b.n	800e0fc <obj_del_core+0xec>
            if(disp->screens[i] == obj) break;
 800e0fa:	bf00      	nop
        }

        uint32_t id = i;
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fe:	60fb      	str	r3, [r7, #12]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
 800e104:	e00f      	b.n	800e126 <obj_del_core+0x116>
            disp->screens[i] = disp->screens[i + 1];
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	68da      	ldr	r2, [r3, #12]
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	3301      	adds	r3, #1
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	441a      	add	r2, r3
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	68d9      	ldr	r1, [r3, #12]
 800e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	440b      	add	r3, r1
 800e11c:	6812      	ldr	r2, [r2, #0]
 800e11e:	601a      	str	r2, [r3, #0]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	3301      	adds	r3, #1
 800e124:	627b      	str	r3, [r7, #36]	; 0x24
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12a:	3b01      	subs	r3, #1
 800e12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e12e:	429a      	cmp	r2, r3
 800e130:	d3e9      	bcc.n	800e106 <obj_del_core+0xf6>
        }
        disp->screen_cnt--;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e136:	1e5a      	subs	r2, r3, #1
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	625a      	str	r2, [r3, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	68da      	ldr	r2, [r3, #12]
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4619      	mov	r1, r3
 800e148:	4610      	mov	r0, r2
 800e14a:	f013 fe37 	bl	8021dbc <lv_mem_realloc>
 800e14e:	4602      	mov	r2, r0
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	60da      	str	r2, [r3, #12]
 800e154:	e039      	b.n	800e1ca <obj_del_core+0x1ba>
    }
    /*Remove the object from the child list of its parent*/
    else {
        uint32_t id = lv_obj_get_index(obj);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7ff ff2d 	bl	800dfb6 <lv_obj_get_index>
 800e15c:	6178      	str	r0, [r7, #20]
        uint32_t i;
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	623b      	str	r3, [r7, #32]
 800e162:	e013      	b.n	800e18c <obj_del_core+0x17c>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	6a3b      	ldr	r3, [r7, #32]
 800e16e:	3301      	adds	r3, #1
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	441a      	add	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	6819      	ldr	r1, [r3, #0]
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	440b      	add	r3, r1
 800e182:	6812      	ldr	r2, [r2, #0]
 800e184:	601a      	str	r2, [r3, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800e186:	6a3b      	ldr	r3, [r7, #32]
 800e188:	3301      	adds	r3, #1
 800e18a:	623b      	str	r3, [r7, #32]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	3b01      	subs	r3, #1
 800e196:	6a3a      	ldr	r2, [r7, #32]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d3e3      	bcc.n	800e164 <obj_del_core+0x154>
        }
        obj->parent->spec_attr->child_cnt--;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	3a01      	subs	r2, #1
 800e1a6:	605a      	str	r2, [r3, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	681a      	ldr	r2, [r3, #0]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	0099      	lsls	r1, r3, #2
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	689c      	ldr	r4, [r3, #8]
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	f013 fdfb 	bl	8021dbc <lv_mem_realloc>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	6023      	str	r3, [r4, #0]
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f013 fdc8 	bl	8021d60 <lv_mem_free>
 800e1d0:	e000      	b.n	800e1d4 <obj_del_core+0x1c4>
    if(res == LV_RES_INV) return;
 800e1d2:	bf00      	nop
}
 800e1d4:	3734      	adds	r7, #52	; 0x34
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd90      	pop	{r4, r7, pc}

0800e1da <lv_area_copy>:
{
 800e1da:	b480      	push	{r7}
 800e1dc:	b083      	sub	sp, #12
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
 800e1e2:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	80da      	strh	r2, [r3, #6]
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <lv_area_get_width>:
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e226:	b29a      	uxth	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e22e:	b29b      	uxth	r3, r3
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	b29b      	uxth	r3, r3
 800e234:	3301      	adds	r3, #1
 800e236:	b29b      	uxth	r3, r3
 800e238:	b21b      	sxth	r3, r3
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	370c      	adds	r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <lv_area_get_height>:
{
 800e246:	b480      	push	{r7}
 800e248:	b083      	sub	sp, #12
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e254:	b29a      	uxth	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	b29b      	uxth	r3, r3
 800e262:	3301      	adds	r3, #1
 800e264:	b29b      	uxth	r3, r3
 800e266:	b21b      	sxth	r3, r3
}
 800e268:	4618      	mov	r0, r3
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <lv_obj_get_style_transform_zoom>:
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800e27e:	226c      	movs	r2, #108	; 0x6c
 800e280:	6839      	ldr	r1, [r7, #0]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7fe fb34 	bl	800c8f0 <lv_obj_get_style_prop>
 800e288:	4603      	mov	r3, r0
 800e28a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	b21b      	sxth	r3, r3
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <lv_obj_get_style_transform_angle>:
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800e2a2:	226d      	movs	r2, #109	; 0x6d
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7fe fb22 	bl	800c8f0 <lv_obj_get_style_prop>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	b21b      	sxth	r3, r3
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <lv_obj_get_style_transform_pivot_x>:
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800e2c6:	226e      	movs	r2, #110	; 0x6e
 800e2c8:	6839      	ldr	r1, [r7, #0]
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7fe fb10 	bl	800c8f0 <lv_obj_get_style_prop>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	b21b      	sxth	r3, r3
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <lv_obj_get_style_transform_pivot_y>:
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800e2ea:	226f      	movs	r2, #111	; 0x6f
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7fe fafe 	bl	800c8f0 <lv_obj_get_style_prop>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	b21b      	sxth	r3, r3
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <lv_obj_get_style_opa>:
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800e30e:	2260      	movs	r2, #96	; 0x60
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7fe faec 	bl	800c8f0 <lv_obj_get_style_prop>
 800e318:	4603      	mov	r3, r0
 800e31a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	b2db      	uxtb	r3, r3
}
 800e320:	4618      	mov	r0, r3
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <lv_obj_get_style_blend_mode>:
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800e332:	2267      	movs	r2, #103	; 0x67
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7fe fada 	bl	800c8f0 <lv_obj_get_style_prop>
 800e33c:	4603      	mov	r3, r0
 800e33e:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	b2db      	uxtb	r3, r3
}
 800e344:	4618      	mov	r0, r3
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 800e34c:	b480      	push	{r7}
 800e34e:	af00      	add	r7, sp, #0
    perf_monitor_init(&perf_monitor);
#endif
#if LV_USE_MEM_MONITOR
    mem_monitor_init(&mem_monitor);
#endif
}
 800e350:	bf00      	nop
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr

0800e35a <lv_obj_redraw>:
        }
    }
}

void lv_obj_redraw(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b08e      	sub	sp, #56	; 0x38
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
 800e362:	6039      	str	r1, [r7, #0]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_area_t clip_coords_for_obj;

    /*Truncate the clip area to `obj size + ext size` area*/
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800e36a:	f107 0310 	add.w	r3, r7, #16
 800e36e:	4619      	mov	r1, r3
 800e370:	6838      	ldr	r0, [r7, #0]
 800e372:	f7fa fb9b 	bl	8008aac <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800e376:	6838      	ldr	r0, [r7, #0]
 800e378:	f7f9 fe7a 	bl	8008070 <_lv_obj_get_ext_draw_size>
 800e37c:	4603      	mov	r3, r0
 800e37e:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800e380:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800e384:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800e388:	f107 0310 	add.w	r3, r7, #16
 800e38c:	4618      	mov	r0, r3
 800e38e:	f012 f92b 	bl	80205e8 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800e392:	f107 0210 	add.w	r2, r7, #16
 800e396:	f107 0318 	add.w	r3, r7, #24
 800e39a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e39c:	4618      	mov	r0, r3
 800e39e:	f012 f98f 	bl	80206c0 <_lv_area_intersect>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    /*If the object is visible on the current clip area OR has overflow visible draw it.
     *With overflow visible drawing should happen to apply the masks which might affect children */
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800e3a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d107      	bne.n	800e3c0 <lv_obj_redraw+0x66>
 800e3b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e3b4:	6838      	ldr	r0, [r7, #0]
 800e3b6:	f7f7 fd76 	bl	8005ea6 <lv_obj_has_flag>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <lv_obj_redraw+0x6a>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e000      	b.n	800e3c6 <lv_obj_redraw+0x6c>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800e3ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3ce:	f003 0301 	and.w	r3, r3, #1
 800e3d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(should_draw) {
 800e3d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d012      	beq.n	800e404 <lv_obj_redraw+0xaa>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f107 0218 	add.w	r2, r7, #24
 800e3e4:	609a      	str	r2, [r3, #8]

        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	2114      	movs	r1, #20
 800e3ea:	6838      	ldr	r0, [r7, #0]
 800e3ec:	f7f6 fb82 	bl	8004af4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	2115      	movs	r1, #21
 800e3f4:	6838      	ldr	r0, [r7, #0]
 800e3f6:	f7f6 fb7d 	bl	8004af4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	2116      	movs	r1, #22
 800e3fe:	6838      	ldr	r0, [r7, #0]
 800e400:	f7f6 fb78 	bl	8004af4 <lv_event_send>
    }

    /*With overflow visible keep the previous clip area to let the children visible out of this object too
     *With not overflow visible limit the clip are to the object's coordinates to clip the children*/
    lv_area_t clip_coords_for_children;
    bool refr_children = true;
 800e404:	2301      	movs	r3, #1
 800e406:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e40a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e40e:	6838      	ldr	r0, [r7, #0]
 800e410:	f7f7 fd49 	bl	8005ea6 <lv_obj_has_flag>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d006      	beq.n	800e428 <lv_obj_redraw+0xce>
        clip_coords_for_children  = *clip_area_ori;
 800e41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e41c:	f107 0308 	add.w	r3, r7, #8
 800e420:	6810      	ldr	r0, [r2, #0]
 800e422:	6851      	ldr	r1, [r2, #4]
 800e424:	c303      	stmia	r3!, {r0, r1}
 800e426:	e011      	b.n	800e44c <lv_obj_redraw+0xf2>
    }
    else {
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	f103 0214 	add.w	r2, r3, #20
 800e42e:	f107 0308 	add.w	r3, r7, #8
 800e432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e434:	4618      	mov	r0, r3
 800e436:	f012 f943 	bl	80206c0 <_lv_area_intersect>
 800e43a:	4603      	mov	r3, r0
 800e43c:	f083 0301 	eor.w	r3, r3, #1
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <lv_obj_redraw+0xf2>
            refr_children = false;
 800e446:	2300      	movs	r3, #0
 800e448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if(refr_children) {
 800e44c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e450:	2b00      	cmp	r3, #0
 800e452:	d01d      	beq.n	800e490 <lv_obj_redraw+0x136>
        draw_ctx->clip_area = &clip_coords_for_children;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f107 0208 	add.w	r2, r7, #8
 800e45a:	609a      	str	r2, [r3, #8]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800e45c:	6838      	ldr	r0, [r7, #0]
 800e45e:	f7ff fd97 	bl	800df90 <lv_obj_get_child_cnt>
 800e462:	6278      	str	r0, [r7, #36]	; 0x24
        for(i = 0; i < child_cnt; i++) {
 800e464:	2300      	movs	r3, #0
 800e466:	633b      	str	r3, [r7, #48]	; 0x30
 800e468:	e00e      	b.n	800e488 <lv_obj_redraw+0x12e>
            lv_obj_t * child = obj->spec_attr->children[i];
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	4413      	add	r3, r2
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	623b      	str	r3, [r7, #32]
            refr_obj(draw_ctx, child);
 800e47a:	6a39      	ldr	r1, [r7, #32]
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fef1 	bl	800f264 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800e482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e484:	3301      	adds	r3, #1
 800e486:	633b      	str	r3, [r7, #48]	; 0x30
 800e488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d3ec      	bcc.n	800e46a <lv_obj_redraw+0x110>
        }
    }

    /*If the object was visible on the clip area call the post draw events too*/
    if(should_draw) {
 800e490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e494:	2b00      	cmp	r3, #0
 800e496:	d012      	beq.n	800e4be <lv_obj_redraw+0x164>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f107 0218 	add.w	r2, r7, #24
 800e49e:	609a      	str	r2, [r3, #8]

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	2117      	movs	r1, #23
 800e4a4:	6838      	ldr	r0, [r7, #0]
 800e4a6:	f7f6 fb25 	bl	8004af4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	2118      	movs	r1, #24
 800e4ae:	6838      	ldr	r0, [r7, #0]
 800e4b0:	f7f6 fb20 	bl	8004af4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	2119      	movs	r1, #25
 800e4b8:	6838      	ldr	r0, [r7, #0]
 800e4ba:	f7f6 fb1b 	bl	8004af4 <lv_event_send>
    }

    draw_ctx->clip_area = clip_area_ori;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4c2:	609a      	str	r2, [r3, #8]
}
 800e4c4:	bf00      	nop
 800e4c6:	3738      	adds	r7, #56	; 0x38
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b088      	sub	sp, #32
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d102      	bne.n	800e4e2 <_lv_inv_area+0x16>
 800e4dc:	f011 fbf0 	bl	801fcc0 <lv_disp_get_default>
 800e4e0:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 80be 	beq.w	800e666 <_lv_inv_area+0x19a>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7f6 f9f8 	bl	80048e0 <lv_disp_is_invalidation_enabled>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	f083 0301 	eor.w	r3, r3, #1
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f040 80b6 	bne.w	800e66a <_lv_inv_area+0x19e>

    if(disp->rendering_in_progress) {
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e504:	f003 0304 	and.w	r3, r3, #4
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f040 80af 	bne.w	800e66e <_lv_inv_area+0x1a2>
        LV_LOG_ERROR("detected modifying dirty areas in render");
        return;
    }

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d104      	bne.n	800e520 <_lv_inv_area+0x54>
        disp->inv_p = 0;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        return;
 800e51e:	e0ad      	b.n	800e67c <_lv_inv_area+0x1b0>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f011 fbd5 	bl	801fcd8 <lv_disp_get_hor_res>
 800e52e:	4603      	mov	r3, r0
 800e530:	b29b      	uxth	r3, r3
 800e532:	3b01      	subs	r3, #1
 800e534:	b29b      	uxth	r3, r3
 800e536:	b21b      	sxth	r3, r3
 800e538:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f011 fbf2 	bl	801fd24 <lv_disp_get_ver_res>
 800e540:	4603      	mov	r3, r0
 800e542:	b29b      	uxth	r3, r3
 800e544:	3b01      	subs	r3, #1
 800e546:	b29b      	uxth	r3, r3
 800e548:	b21b      	sxth	r3, r3
 800e54a:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800e54c:	f107 0214 	add.w	r2, r7, #20
 800e550:	f107 030c 	add.w	r3, r7, #12
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f012 f8b2 	bl	80206c0 <_lv_area_intersect>
 800e55c:	4603      	mov	r3, r0
 800e55e:	777b      	strb	r3, [r7, #29]
    if(suc == false)  return; /*Out of the screen*/
 800e560:	7f7b      	ldrb	r3, [r7, #29]
 800e562:	f083 0301 	eor.w	r3, r3, #1
 800e566:	b2db      	uxtb	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f040 8082 	bne.w	800e672 <_lv_inv_area+0x1a6>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->driver->full_refresh) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	7c1b      	ldrb	r3, [r3, #16]
 800e574:	f003 0302 	and.w	r3, r3, #2
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d015      	beq.n	800e5aa <_lv_inv_area+0xde>
        disp->inv_areas[0] = scr_area;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3330      	adds	r3, #48	; 0x30
 800e582:	f107 0214 	add.w	r2, r7, #20
 800e586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e58a:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2201      	movs	r2, #1
 800e592:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d06b      	beq.n	800e676 <_lv_inv_area+0x1aa>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f014 ff01 	bl	80233aa <lv_timer_resume>
        return;
 800e5a8:	e065      	b.n	800e676 <_lv_inv_area+0x1aa>
    }

    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	699b      	ldr	r3, [r3, #24]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d008      	beq.n	800e5c6 <_lv_inv_area+0xfa>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	699b      	ldr	r3, [r3, #24]
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	6812      	ldr	r2, [r2, #0]
 800e5be:	f107 010c 	add.w	r1, r7, #12
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	4798      	blx	r3

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	83fb      	strh	r3, [r7, #30]
 800e5ca:	e010      	b.n	800e5ee <_lv_inv_area+0x122>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800e5cc:	8bfb      	ldrh	r3, [r7, #30]
 800e5ce:	3306      	adds	r3, #6
 800e5d0:	00db      	lsls	r3, r3, #3
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	18d1      	adds	r1, r2, r3
 800e5d6:	f107 030c 	add.w	r3, r7, #12
 800e5da:	2200      	movs	r2, #0
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f012 fa53 	bl	8020a88 <_lv_area_is_in>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d148      	bne.n	800e67a <_lv_inv_area+0x1ae>
    for(i = 0; i < disp->inv_p; i++) {
 800e5e8:	8bfb      	ldrh	r3, [r7, #30]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	83fb      	strh	r3, [r7, #30]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e5f4:	8bfa      	ldrh	r2, [r7, #30]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d3e8      	bcc.n	800e5cc <_lv_inv_area+0x100>
    }

    /*Save the area*/
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e600:	2b1f      	cmp	r3, #31
 800e602:	d80d      	bhi.n	800e620 <_lv_inv_area+0x154>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e60a:	3306      	adds	r3, #6
 800e60c:	00db      	lsls	r3, r3, #3
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	4413      	add	r3, r2
 800e612:	f107 020c 	add.w	r2, r7, #12
 800e616:	4611      	mov	r1, r2
 800e618:	4618      	mov	r0, r3
 800e61a:	f7ff fdde 	bl	800e1da <lv_area_copy>
 800e61e:	e010      	b.n	800e642 <_lv_inv_area+0x176>
    }
    else {   /*If no place for the area add the screen*/
        disp->inv_p = 0;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e62e:	3306      	adds	r3, #6
 800e630:	00db      	lsls	r3, r3, #3
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	4413      	add	r3, r2
 800e636:	f107 0214 	add.w	r2, r7, #20
 800e63a:	4611      	mov	r1, r2
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff fdcc 	bl	800e1da <lv_area_copy>
    }
    disp->inv_p++;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e648:	3301      	adds	r3, #1
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d010      	beq.n	800e67c <_lv_inv_area+0x1b0>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	4618      	mov	r0, r3
 800e660:	f014 fea3 	bl	80233aa <lv_timer_resume>
 800e664:	e00a      	b.n	800e67c <_lv_inv_area+0x1b0>
    if(!disp) return;
 800e666:	bf00      	nop
 800e668:	e008      	b.n	800e67c <_lv_inv_area+0x1b0>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800e66a:	bf00      	nop
 800e66c:	e006      	b.n	800e67c <_lv_inv_area+0x1b0>
        return;
 800e66e:	bf00      	nop
 800e670:	e004      	b.n	800e67c <_lv_inv_area+0x1b0>
    if(suc == false)  return; /*Out of the screen*/
 800e672:	bf00      	nop
 800e674:	e002      	b.n	800e67c <_lv_inv_area+0x1b0>
        return;
 800e676:	bf00      	nop
 800e678:	e000      	b.n	800e67c <_lv_inv_area+0x1b0>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800e67a:	bf00      	nop
}
 800e67c:	3720      	adds	r7, #32
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
	...

0800e684 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 800e684:	b480      	push	{r7}
 800e686:	af00      	add	r7, sp, #0
    return disp_refr;
 800e688:	4b03      	ldr	r3, [pc, #12]	; (800e698 <_lv_refr_get_disp_refreshing+0x14>)
 800e68a:	681b      	ldr	r3, [r3, #0]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	20000710 	.word	0x20000710

0800e69c <_lv_disp_refr_timer>:
/**
 * Called periodically to handle the refreshing
 * @param tmr pointer to the timer itself
 */
void _lv_disp_refr_timer(lv_timer_t * tmr)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
    REFR_TRACE("begin");

    uint32_t start = lv_tick_get();
 800e6a4:	f011 fbce 	bl	801fe44 <lv_tick_get>
 800e6a8:	60f8      	str	r0, [r7, #12]
    volatile uint32_t elaps = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	60bb      	str	r3, [r7, #8]

    if(tmr) {
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d007      	beq.n	800e6c4 <_lv_disp_refr_timer+0x28>
        disp_refr = tmr->user_data;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	4a38      	ldr	r2, [pc, #224]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e6ba:	6013      	str	r3, [r2, #0]
#if LV_USE_PERF_MONITOR == 0 && LV_USE_MEM_MONITOR == 0
        /**
         * Ensure the timer does not run again automatically.
         * This is done before refreshing in case refreshing invalidates something else.
         */
        lv_timer_pause(tmr);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f014 fe65 	bl	802338c <lv_timer_pause>
 800e6c2:	e004      	b.n	800e6ce <_lv_disp_refr_timer+0x32>
#endif
    }
    else {
        disp_refr = lv_disp_get_default();
 800e6c4:	f011 fafc 	bl	801fcc0 <lv_disp_get_default>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	4a34      	ldr	r2, [pc, #208]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e6cc:	6013      	str	r3, [r2, #0]
    }

    /*Refresh the screen's layout if required*/
    lv_obj_update_layout(disp_refr->act_scr);
 800e6ce:	4b33      	ldr	r3, [pc, #204]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	691b      	ldr	r3, [r3, #16]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fa f9bd 	bl	8008a54 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800e6da:	4b30      	ldr	r3, [pc, #192]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	695b      	ldr	r3, [r3, #20]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d005      	beq.n	800e6f0 <_lv_disp_refr_timer+0x54>
 800e6e4:	4b2d      	ldr	r3, [pc, #180]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	695b      	ldr	r3, [r3, #20]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fa f9b2 	bl	8008a54 <lv_obj_update_layout>

    lv_obj_update_layout(disp_refr->top_layer);
 800e6f0:	4b2a      	ldr	r3, [pc, #168]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	69db      	ldr	r3, [r3, #28]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fa f9ac 	bl	8008a54 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800e6fc:	4b27      	ldr	r3, [pc, #156]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	4618      	mov	r0, r3
 800e704:	f7fa f9a6 	bl	8008a54 <lv_obj_update_layout>

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 800e708:	4b24      	ldr	r3, [pc, #144]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d105      	bne.n	800e71e <_lv_disp_refr_timer+0x82>
        disp_refr->inv_p = 0;
 800e712:	4b22      	ldr	r3, [pc, #136]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2200      	movs	r2, #0
 800e718:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        LV_LOG_WARN("there is no active screen");
        REFR_TRACE("finished");
        return;
 800e71c:	e03a      	b.n	800e794 <_lv_disp_refr_timer+0xf8>
    }

    lv_refr_join_area();
 800e71e:	f000 f841 	bl	800e7a4 <lv_refr_join_area>

    refr_invalid_areas();
 800e722:	f000 f8d7 	bl	800e8d4 <refr_invalid_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800e726:	4b1d      	ldr	r3, [pc, #116]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d02a      	beq.n	800e788 <_lv_disp_refr_timer+0xec>

        /*Clean up*/
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800e732:	4b1a      	ldr	r3, [pc, #104]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3330      	adds	r3, #48	; 0x30
 800e738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e73c:	4618      	mov	r0, r3
 800e73e:	f013 ff13 	bl	8022568 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800e742:	4b16      	ldr	r3, [pc, #88]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e74a:	2120      	movs	r1, #32
 800e74c:	4618      	mov	r0, r3
 800e74e:	f013 ff0b 	bl	8022568 <lv_memset_00>
        disp_refr->inv_p = 0;
 800e752:	4b12      	ldr	r3, [pc, #72]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2200      	movs	r2, #0
 800e758:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150

        elaps = lv_tick_elaps(start);
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f011 fb8b 	bl	801fe78 <lv_tick_elaps>
 800e762:	4603      	mov	r3, r0
 800e764:	60bb      	str	r3, [r7, #8]

        /*Call monitor cb if present*/
        if(disp_refr->driver->monitor_cb) {
 800e766:	4b0d      	ldr	r3, [pc, #52]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00a      	beq.n	800e788 <_lv_disp_refr_timer+0xec>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800e772:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77a:	4a08      	ldr	r2, [pc, #32]	; (800e79c <_lv_disp_refr_timer+0x100>)
 800e77c:	6812      	ldr	r2, [r2, #0]
 800e77e:	6810      	ldr	r0, [r2, #0]
 800e780:	68b9      	ldr	r1, [r7, #8]
 800e782:	4a07      	ldr	r2, [pc, #28]	; (800e7a0 <_lv_disp_refr_timer+0x104>)
 800e784:	6812      	ldr	r2, [r2, #0]
 800e786:	4798      	blx	r3
        }
    }

    lv_mem_buf_free_all();
 800e788:	f013 fc14 	bl	8021fb4 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800e78c:	f010 fed6 	bl	801f53c <_lv_font_clean_up_fmt_txt>

#if LV_DRAW_COMPLEX
    _lv_draw_mask_cleanup();
 800e790:	f003 f94e 	bl	8011a30 <_lv_draw_mask_cleanup>
                              mon.frag_pct);
    }
#endif

    REFR_TRACE("finished");
}
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	20000710 	.word	0x20000710
 800e7a0:	2000070c 	.word	0x2000070c

0800e7a4 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800e7a4:	b5b0      	push	{r4, r5, r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	60bb      	str	r3, [r7, #8]
 800e7ae:	e080      	b.n	800e8b2 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800e7b0:	4b47      	ldr	r3, [pc, #284]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d173      	bne.n	800e8aa <lv_refr_join_area+0x106>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	e067      	b.n	800e898 <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800e7c8:	4b41      	ldr	r3, [pc, #260]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d158      	bne.n	800e88c <lv_refr_join_area+0xe8>
 800e7da:	68ba      	ldr	r2, [r7, #8]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d054      	beq.n	800e88c <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800e7e2:	4b3b      	ldr	r3, [pc, #236]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	3306      	adds	r3, #6
 800e7ea:	00db      	lsls	r3, r3, #3
 800e7ec:	18d0      	adds	r0, r2, r3
 800e7ee:	4b38      	ldr	r3, [pc, #224]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3306      	adds	r3, #6
 800e7f6:	00db      	lsls	r3, r3, #3
 800e7f8:	4413      	add	r3, r2
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	f012 f916 	bl	8020a2c <_lv_area_is_on>
 800e800:	4603      	mov	r3, r0
 800e802:	f083 0301 	eor.w	r3, r3, #1
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d141      	bne.n	800e890 <lv_refr_join_area+0xec>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800e80c:	4b30      	ldr	r3, [pc, #192]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	3306      	adds	r3, #6
 800e814:	00db      	lsls	r3, r3, #3
 800e816:	18d1      	adds	r1, r2, r3
 800e818:	4b2d      	ldr	r3, [pc, #180]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	3306      	adds	r3, #6
 800e820:	00db      	lsls	r3, r3, #3
 800e822:	441a      	add	r2, r3
 800e824:	463b      	mov	r3, r7
 800e826:	4618      	mov	r0, r3
 800e828:	f011 ff9b 	bl	8020762 <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800e82c:	463b      	mov	r3, r7
 800e82e:	4618      	mov	r0, r3
 800e830:	f011 feb9 	bl	80205a6 <lv_area_get_size>
 800e834:	4604      	mov	r4, r0
 800e836:	4b26      	ldr	r3, [pc, #152]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	3306      	adds	r3, #6
 800e83e:	00db      	lsls	r3, r3, #3
 800e840:	4413      	add	r3, r2
 800e842:	4618      	mov	r0, r3
 800e844:	f011 feaf 	bl	80205a6 <lv_area_get_size>
 800e848:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800e84a:	4b21      	ldr	r3, [pc, #132]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	3306      	adds	r3, #6
 800e852:	00db      	lsls	r3, r3, #3
 800e854:	4413      	add	r3, r2
 800e856:	4618      	mov	r0, r3
 800e858:	f011 fea5 	bl	80205a6 <lv_area_get_size>
 800e85c:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800e85e:	442b      	add	r3, r5
 800e860:	429c      	cmp	r4, r3
 800e862:	d216      	bcs.n	800e892 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800e864:	4b1a      	ldr	r3, [pc, #104]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	3306      	adds	r3, #6
 800e86c:	00db      	lsls	r3, r3, #3
 800e86e:	4413      	add	r3, r2
 800e870:	463a      	mov	r2, r7
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f7ff fcb0 	bl	800e1da <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800e87a:	4b15      	ldr	r3, [pc, #84]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e886:	2201      	movs	r2, #1
 800e888:	701a      	strb	r2, [r3, #0]
 800e88a:	e002      	b.n	800e892 <lv_refr_join_area+0xee>
                continue;
 800e88c:	bf00      	nop
 800e88e:	e000      	b.n	800e892 <lv_refr_join_area+0xee>
                continue;
 800e890:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3301      	adds	r3, #1
 800e896:	60fb      	str	r3, [r7, #12]
 800e898:	4b0d      	ldr	r3, [pc, #52]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d38f      	bcc.n	800e7c8 <lv_refr_join_area+0x24>
 800e8a8:	e000      	b.n	800e8ac <lv_refr_join_area+0x108>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800e8aa:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	60bb      	str	r3, [r7, #8]
 800e8b2:	4b07      	ldr	r3, [pc, #28]	; (800e8d0 <lv_refr_join_area+0x12c>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	f4ff af76 	bcc.w	800e7b0 <lv_refr_join_area+0xc>
            }
        }
    }
}
 800e8c4:	bf00      	nop
 800e8c6:	bf00      	nop
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20000710 	.word	0x20000710

0800e8d4 <refr_invalid_areas>:

/**
 * Refresh the joined areas
 */
static void refr_invalid_areas(void)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
    px_num = 0;
 800e8da:	4b4e      	ldr	r3, [pc, #312]	; (800ea14 <refr_invalid_areas+0x140>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 800e8e0:	4b4d      	ldr	r3, [pc, #308]	; (800ea18 <refr_invalid_areas+0x144>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f000 808e 	beq.w	800ea0a <refr_invalid_areas+0x136>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800e8f2:	4b49      	ldr	r3, [pc, #292]	; (800ea18 <refr_invalid_areas+0x144>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	607b      	str	r3, [r7, #4]
 800e8fe:	e00e      	b.n	800e91e <refr_invalid_areas+0x4a>
        if(disp_refr->inv_area_joined[i] == 0) {
 800e900:	4b45      	ldr	r3, [pc, #276]	; (800ea18 <refr_invalid_areas+0x144>)
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4413      	add	r3, r2
 800e908:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d102      	bne.n	800e918 <refr_invalid_areas+0x44>
            last_i = i;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	603b      	str	r3, [r7, #0]
            break;
 800e916:	e005      	b.n	800e924 <refr_invalid_areas+0x50>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	3b01      	subs	r3, #1
 800e91c:	607b      	str	r3, [r7, #4]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	daed      	bge.n	800e900 <refr_invalid_areas+0x2c>
        }
    }

    /*Notify the display driven rendering has started*/
    if(disp_refr->driver->render_start_cb) {
 800e924:	4b3c      	ldr	r3, [pc, #240]	; (800ea18 <refr_invalid_areas+0x144>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d008      	beq.n	800e942 <refr_invalid_areas+0x6e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800e930:	4b39      	ldr	r3, [pc, #228]	; (800ea18 <refr_invalid_areas+0x144>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e938:	4a37      	ldr	r2, [pc, #220]	; (800ea18 <refr_invalid_areas+0x144>)
 800e93a:	6812      	ldr	r2, [r2, #0]
 800e93c:	6812      	ldr	r2, [r2, #0]
 800e93e:	4610      	mov	r0, r2
 800e940:	4798      	blx	r3
    }

    disp_refr->driver->draw_buf->last_area = 0;
 800e942:	4b35      	ldr	r3, [pc, #212]	; (800ea18 <refr_invalid_areas+0x144>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68da      	ldr	r2, [r3, #12]
 800e94a:	7e13      	ldrb	r3, [r2, #24]
 800e94c:	f36f 0300 	bfc	r3, #0, #1
 800e950:	7613      	strb	r3, [r2, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800e952:	4b31      	ldr	r3, [pc, #196]	; (800ea18 <refr_invalid_areas+0x144>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	68da      	ldr	r2, [r3, #12]
 800e95a:	7e13      	ldrb	r3, [r2, #24]
 800e95c:	f36f 0341 	bfc	r3, #1, #1
 800e960:	7613      	strb	r3, [r2, #24]
    disp_refr->rendering_in_progress = true;
 800e962:	4b2d      	ldr	r3, [pc, #180]	; (800ea18 <refr_invalid_areas+0x144>)
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800e96a:	f043 0304 	orr.w	r3, r3, #4
 800e96e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    for(i = 0; i < disp_refr->inv_p; i++) {
 800e972:	2300      	movs	r3, #0
 800e974:	607b      	str	r3, [r7, #4]
 800e976:	e037      	b.n	800e9e8 <refr_invalid_areas+0x114>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800e978:	4b27      	ldr	r3, [pc, #156]	; (800ea18 <refr_invalid_areas+0x144>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4413      	add	r3, r2
 800e980:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d12b      	bne.n	800e9e2 <refr_invalid_areas+0x10e>

            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d107      	bne.n	800e9a2 <refr_invalid_areas+0xce>
 800e992:	4b21      	ldr	r3, [pc, #132]	; (800ea18 <refr_invalid_areas+0x144>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	68da      	ldr	r2, [r3, #12]
 800e99a:	7e13      	ldrb	r3, [r2, #24]
 800e99c:	f043 0301 	orr.w	r3, r3, #1
 800e9a0:	7613      	strb	r3, [r2, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 800e9a2:	4b1d      	ldr	r3, [pc, #116]	; (800ea18 <refr_invalid_areas+0x144>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	68da      	ldr	r2, [r3, #12]
 800e9aa:	7e13      	ldrb	r3, [r2, #24]
 800e9ac:	f36f 0341 	bfc	r3, #1, #1
 800e9b0:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800e9b2:	4b19      	ldr	r3, [pc, #100]	; (800ea18 <refr_invalid_areas+0x144>)
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	3306      	adds	r3, #6
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	4413      	add	r3, r2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f000 f82c 	bl	800ea1c <refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800e9c4:	4b14      	ldr	r3, [pc, #80]	; (800ea18 <refr_invalid_areas+0x144>)
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	3306      	adds	r3, #6
 800e9cc:	00db      	lsls	r3, r3, #3
 800e9ce:	4413      	add	r3, r2
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f011 fde8 	bl	80205a6 <lv_area_get_size>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ea14 <refr_invalid_areas+0x140>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4413      	add	r3, r2
 800e9de:	4a0d      	ldr	r2, [pc, #52]	; (800ea14 <refr_invalid_areas+0x140>)
 800e9e0:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	607b      	str	r3, [r7, #4]
 800e9e8:	4b0b      	ldr	r3, [pc, #44]	; (800ea18 <refr_invalid_areas+0x144>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	dbbf      	blt.n	800e978 <refr_invalid_areas+0xa4>
        }
    }

    disp_refr->rendering_in_progress = false;
 800e9f8:	4b07      	ldr	r3, [pc, #28]	; (800ea18 <refr_invalid_areas+0x144>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800ea00:	f36f 0382 	bfc	r3, #2, #1
 800ea04:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800ea08:	e000      	b.n	800ea0c <refr_invalid_areas+0x138>
    if(disp_refr->inv_p == 0) return;
 800ea0a:	bf00      	nop
}
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	2000070c 	.word	0x2000070c
 800ea18:	20000710 	.word	0x20000710

0800ea1c <refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void refr_area(const lv_area_t * area_p)
{
 800ea1c:	b590      	push	{r4, r7, lr}
 800ea1e:	b08f      	sub	sp, #60	; 0x3c
 800ea20:	af02      	add	r7, sp, #8
 800ea22:	6078      	str	r0, [r7, #4]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800ea24:	4b8e      	ldr	r3, [pc, #568]	; (800ec60 <refr_area+0x244>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea2c:	62bb      	str	r3, [r7, #40]	; 0x28
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ea2e:	4b8c      	ldr	r3, [pc, #560]	; (800ec60 <refr_area+0x244>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	689a      	ldr	r2, [r3, #8]
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3a:	601a      	str	r2, [r3, #0]

    /*With full refresh just redraw directly into the buffer*/
    /*In direct mode draw directly on the absolute coordinates of the buffer*/
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800ea3c:	4b88      	ldr	r3, [pc, #544]	; (800ec60 <refr_area+0x244>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	7c1b      	ldrb	r3, [r3, #16]
 800ea44:	f003 0302 	and.w	r3, r3, #2
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d108      	bne.n	800ea60 <refr_area+0x44>
 800ea4e:	4b84      	ldr	r3, [pc, #528]	; (800ec60 <refr_area+0x244>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	7c1b      	ldrb	r3, [r3, #16]
 800ea56:	f003 0301 	and.w	r3, r3, #1
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d04f      	beq.n	800eb00 <refr_area+0xe4>
        lv_area_t disp_area;
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800ea60:	4b7f      	ldr	r3, [pc, #508]	; (800ec60 <refr_area+0x244>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f011 f937 	bl	801fcd8 <lv_disp_get_hor_res>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	3b01      	subs	r3, #1
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	b21c      	sxth	r4, r3
 800ea74:	4b7a      	ldr	r3, [pc, #488]	; (800ec60 <refr_area+0x244>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f011 f953 	bl	801fd24 <lv_disp_get_ver_res>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	3b01      	subs	r3, #1
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	b21b      	sxth	r3, r3
 800ea88:	f107 000c 	add.w	r0, r7, #12
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	4623      	mov	r3, r4
 800ea90:	2200      	movs	r2, #0
 800ea92:	2100      	movs	r1, #0
 800ea94:	f011 fd50 	bl	8020538 <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	f107 020c 	add.w	r2, r7, #12
 800ea9e:	605a      	str	r2, [r3, #4]

        if(disp_refr->driver->full_refresh) {
 800eaa0:	4b6f      	ldr	r3, [pc, #444]	; (800ec60 <refr_area+0x244>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	7c1b      	ldrb	r3, [r3, #16]
 800eaa8:	f003 0302 	and.w	r3, r3, #2
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00f      	beq.n	800ead2 <refr_area+0xb6>
            disp_refr->driver->draw_buf->last_part = 1;
 800eab2:	4b6b      	ldr	r3, [pc, #428]	; (800ec60 <refr_area+0x244>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	68da      	ldr	r2, [r3, #12]
 800eaba:	7e13      	ldrb	r3, [r2, #24]
 800eabc:	f043 0302 	orr.w	r3, r3, #2
 800eac0:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800eac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac4:	f107 020c 	add.w	r2, r7, #12
 800eac8:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800eaca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eacc:	f000 f8ca 	bl	800ec64 <refr_area_part>
 800ead0:	e0c3      	b.n	800ec5a <refr_area+0x23e>
        }
        else {
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800ead2:	4b63      	ldr	r3, [pc, #396]	; (800ec60 <refr_area+0x244>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	4a61      	ldr	r2, [pc, #388]	; (800ec60 <refr_area+0x244>)
 800eadc:	6812      	ldr	r2, [r2, #0]
 800eade:	6812      	ldr	r2, [r2, #0]
 800eae0:	68d2      	ldr	r2, [r2, #12]
 800eae2:	699b      	ldr	r3, [r3, #24]
 800eae4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eae8:	b2d9      	uxtb	r1, r3
 800eaea:	7e13      	ldrb	r3, [r2, #24]
 800eaec:	f361 0341 	bfi	r3, r1, #1, #1
 800eaf0:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = area_p;
 800eaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800eaf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eafa:	f000 f8b3 	bl	800ec64 <refr_area_part>
 800eafe:	e0ac      	b.n	800ec5a <refr_area+0x23e>
        return;
    }

    /*Normal refresh: draw the area in parts*/
    /*Calculate the max row num*/
    lv_coord_t w = lv_area_get_width(area_p);
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7ff fb89 	bl	800e218 <lv_area_get_width>
 800eb06:	4603      	mov	r3, r0
 800eb08:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h = lv_area_get_height(area_p);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7ff fb9b 	bl	800e246 <lv_area_get_height>
 800eb10:	4603      	mov	r3, r0
 800eb12:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800eb1a:	4b51      	ldr	r3, [pc, #324]	; (800ec60 <refr_area+0x244>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f011 f900 	bl	801fd24 <lv_disp_get_ver_res>
 800eb24:	4603      	mov	r3, r0
 800eb26:	429c      	cmp	r4, r3
 800eb28:	db0a      	blt.n	800eb40 <refr_area+0x124>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800eb2a:	4b4d      	ldr	r3, [pc, #308]	; (800ec60 <refr_area+0x244>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f011 f8f8 	bl	801fd24 <lv_disp_get_ver_res>
 800eb34:	4603      	mov	r3, r0
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	b29b      	uxth	r3, r3
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800eb3c:	b21b      	sxth	r3, r3
 800eb3e:	e002      	b.n	800eb46 <refr_area+0x12a>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800eb46:	847b      	strh	r3, [r7, #34]	; 0x22

    int32_t max_row = get_max_row(disp_refr, w, h);
 800eb48:	4b45      	ldr	r3, [pc, #276]	; (800ec60 <refr_area+0x244>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800eb50:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 fd59 	bl	800f60c <get_max_row>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	61fb      	str	r3, [r7, #28]

    lv_coord_t row;
    lv_coord_t row_last = 0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_area_t sub_area;
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	885b      	ldrh	r3, [r3, #2]
 800eb66:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800eb68:	e042      	b.n	800ebf0 <refr_area+0x1d4>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb70:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eb78:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800eb7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb7c:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = row + max_row - 1;
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb84:	4413      	add	r3, r2
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	3b01      	subs	r3, #1
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	b21b      	sxth	r3, r3
 800eb8e:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	f107 0214 	add.w	r2, r7, #20
 800eb96:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	f107 0214 	add.w	r2, r7, #20
 800eb9e:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800eba0:	4b2f      	ldr	r3, [pc, #188]	; (800ec60 <refr_area+0x244>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	689a      	ldr	r2, [r3, #8]
 800ebaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebac:	601a      	str	r2, [r3, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800ebae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ebb2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	da01      	bge.n	800ebbe <refr_area+0x1a2>
 800ebba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ebbc:	837b      	strh	r3, [r7, #26]
        row_last = sub_area.y2;
 800ebbe:	8b7b      	ldrh	r3, [r7, #26]
 800ebc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800ebc2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ebc6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d107      	bne.n	800ebde <refr_area+0x1c2>
 800ebce:	4b24      	ldr	r3, [pc, #144]	; (800ec60 <refr_area+0x244>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	68da      	ldr	r2, [r3, #12]
 800ebd6:	7e13      	ldrb	r3, [r2, #24]
 800ebd8:	f043 0302 	orr.w	r3, r3, #2
 800ebdc:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800ebde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebe0:	f000 f840 	bl	800ec64 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ebea:	4413      	add	r3, r2
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ebf0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	1e5a      	subs	r2, r3, #1
 800ebfa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	ddb3      	ble.n	800eb6a <refr_area+0x14e>
    }

    /*If the last y coordinates are not handled yet ...*/
    if(y2 != row_last) {
 800ec02:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ec06:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d025      	beq.n	800ec5a <refr_area+0x23e>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec14:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ec1c:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800ec1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec20:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = y2;
 800ec22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec24:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	f107 0214 	add.w	r2, r7, #20
 800ec2c:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800ec2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec30:	f107 0214 	add.w	r2, r7, #20
 800ec34:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ec36:	4b0a      	ldr	r3, [pc, #40]	; (800ec60 <refr_area+0x244>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	689a      	ldr	r2, [r3, #8]
 800ec40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec42:	601a      	str	r2, [r3, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800ec44:	4b06      	ldr	r3, [pc, #24]	; (800ec60 <refr_area+0x244>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68da      	ldr	r2, [r3, #12]
 800ec4c:	7e13      	ldrb	r3, [r2, #24]
 800ec4e:	f043 0302 	orr.w	r3, r3, #2
 800ec52:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800ec54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec56:	f000 f805 	bl	800ec64 <refr_area_part>
    }
}
 800ec5a:	3734      	adds	r7, #52	; 0x34
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd90      	pop	{r4, r7, pc}
 800ec60:	20000710 	.word	0x20000710

0800ec64 <refr_area_part>:

static void refr_area_part(lv_draw_ctx_t * draw_ctx)
{
 800ec64:	b590      	push	{r4, r7, lr}
 800ec66:	b09d      	sub	sp, #116	; 0x74
 800ec68:	af02      	add	r7, sp, #8
 800ec6a:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800ec6c:	4b89      	ldr	r3, [pc, #548]	; (800ee94 <refr_area_part+0x230>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f011 f8a9 	bl	801fdc8 <lv_disp_get_draw_buf>
 800ec76:	65f8      	str	r0, [r7, #92]	; 0x5c

    /* Below the `area_p` area will be redrawn into the draw buffer.
     * In single buffered mode wait here until the buffer is freed.
     * In full double buffered mode wait here while the buffers are swapped and a buffer becomes available*/
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800ec78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec7a:	68da      	ldr	r2, [r3, #12]
 800ec7c:	4b85      	ldr	r3, [pc, #532]	; (800ee94 <refr_area_part+0x230>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec86:	4619      	mov	r1, r3
 800ec88:	4b82      	ldr	r3, [pc, #520]	; (800ee94 <refr_area_part+0x230>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec92:	fb01 f303 	mul.w	r3, r1, r3
 800ec96:	429a      	cmp	r2, r3
 800ec98:	bf0c      	ite	eq
 800ec9a:	2301      	moveq	r3, #1
 800ec9c:	2300      	movne	r3, #0
 800ec9e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800eca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d003      	beq.n	800ecb2 <refr_area_part+0x4e>
 800ecaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d01b      	beq.n	800ecea <refr_area_part+0x86>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800ecb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecb4:	681b      	ldr	r3, [r3, #0]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d01b      	beq.n	800ecf2 <refr_area_part+0x8e>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800ecba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d017      	beq.n	800ecf2 <refr_area_part+0x8e>
 800ecc2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d013      	beq.n	800ecf2 <refr_area_part+0x8e>
        while(draw_buf->flushing) {
 800ecca:	e00e      	b.n	800ecea <refr_area_part+0x86>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800eccc:	4b71      	ldr	r3, [pc, #452]	; (800ee94 <refr_area_part+0x230>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d008      	beq.n	800ecea <refr_area_part+0x86>
 800ecd8:	4b6e      	ldr	r3, [pc, #440]	; (800ee94 <refr_area_part+0x230>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece0:	4a6c      	ldr	r2, [pc, #432]	; (800ee94 <refr_area_part+0x230>)
 800ece2:	6812      	ldr	r2, [r2, #0]
 800ece4:	6812      	ldr	r2, [r2, #0]
 800ece6:	4610      	mov	r0, r2
 800ece8:	4798      	blx	r3
        while(draw_buf->flushing) {
 800ecea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecec:	691b      	ldr	r3, [r3, #16]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1ec      	bne.n	800eccc <refr_area_part+0x68>
            }
        }
#endif
    }

    lv_obj_t * top_act_scr = NULL;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	667b      	str	r3, [r7, #100]	; 0x64
    lv_obj_t * top_prev_scr = NULL;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	663b      	str	r3, [r7, #96]	; 0x60

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685c      	ldr	r4, [r3, #4]
 800ecfe:	4b65      	ldr	r3, [pc, #404]	; (800ee94 <refr_area_part+0x230>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7f5 faf2 	bl	80042ec <lv_disp_get_scr_act>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f000 f8fd 	bl	800ef0c <lv_refr_get_top_obj>
 800ed12:	6678      	str	r0, [r7, #100]	; 0x64
    if(disp_refr->prev_scr) {
 800ed14:	4b5f      	ldr	r3, [pc, #380]	; (800ee94 <refr_area_part+0x230>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	695b      	ldr	r3, [r3, #20]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d009      	beq.n	800ed32 <refr_area_part+0xce>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	685a      	ldr	r2, [r3, #4]
 800ed22:	4b5c      	ldr	r3, [pc, #368]	; (800ee94 <refr_area_part+0x230>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	695b      	ldr	r3, [r3, #20]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	4610      	mov	r0, r2
 800ed2c:	f000 f8ee 	bl	800ef0c <lv_refr_get_top_obj>
 800ed30:	6638      	str	r0, [r7, #96]	; 0x60
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800ed32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f040 8087 	bne.w	800ee48 <refr_area_part+0x1e4>
 800ed3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f040 8083 	bne.w	800ee48 <refr_area_part+0x1e4>
        lv_area_t a;
        lv_area_set(&a, 0, 0,
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800ed42:	4b54      	ldr	r3, [pc, #336]	; (800ee94 <refr_area_part+0x230>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4618      	mov	r0, r3
 800ed48:	f010 ffc6 	bl	801fcd8 <lv_disp_get_hor_res>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	3b01      	subs	r3, #1
 800ed52:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800ed54:	b21c      	sxth	r4, r3
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800ed56:	4b4f      	ldr	r3, [pc, #316]	; (800ee94 <refr_area_part+0x230>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f010 ffe2 	bl	801fd24 <lv_disp_get_ver_res>
 800ed60:	4603      	mov	r3, r0
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	3b01      	subs	r3, #1
 800ed66:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800ed68:	b21b      	sxth	r3, r3
 800ed6a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	4623      	mov	r3, r4
 800ed72:	2200      	movs	r2, #0
 800ed74:	2100      	movs	r1, #0
 800ed76:	f011 fbdf 	bl	8020538 <lv_area_set>
        if(draw_ctx->draw_bg) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d020      	beq.n	800edc4 <refr_area_part+0x160>
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800ed82:	f107 0308 	add.w	r3, r7, #8
 800ed86:	4618      	mov	r0, r3
 800ed88:	f005 f91e 	bl	8013fc8 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800ed8c:	4b41      	ldr	r3, [pc, #260]	; (800ee94 <refr_area_part+0x230>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed92:	617b      	str	r3, [r7, #20]
            dsc.bg_img_opa = disp_refr->bg_opa;
 800ed94:	4b3f      	ldr	r3, [pc, #252]	; (800ee94 <refr_area_part+0x230>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ed9c:	777b      	strb	r3, [r7, #29]
            dsc.bg_color = disp_refr->bg_color;
 800ed9e:	4b3d      	ldr	r3, [pc, #244]	; (800ee94 <refr_area_part+0x230>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800eda6:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800eda8:	4b3a      	ldr	r3, [pc, #232]	; (800ee94 <refr_area_part+0x230>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800edb0:	72fb      	strb	r3, [r7, #11]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800edba:	f107 0108 	add.w	r1, r7, #8
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	4798      	blx	r3
 800edc2:	e041      	b.n	800ee48 <refr_area_part+0x1e4>
        }
        else if(disp_refr->bg_img) {
 800edc4:	4b33      	ldr	r3, [pc, #204]	; (800ee94 <refr_area_part+0x230>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d025      	beq.n	800ee1a <refr_area_part+0x1b6>
            lv_img_header_t header;
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800edce:	4b31      	ldr	r3, [pc, #196]	; (800ee94 <refr_area_part+0x230>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800edd8:	4611      	mov	r1, r2
 800edda:	4618      	mov	r0, r3
 800eddc:	f005 fb00 	bl	80143e0 <lv_img_decoder_get_info>
 800ede0:	4603      	mov	r3, r0
 800ede2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if(res == LV_RES_OK) {
 800ede6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800edea:	2b01      	cmp	r3, #1
 800edec:	d12c      	bne.n	800ee48 <refr_area_part+0x1e4>
                lv_draw_img_dsc_t dsc;
                lv_draw_img_dsc_init(&dsc);
 800edee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edf2:	4618      	mov	r0, r3
 800edf4:	f001 f997 	bl	8010126 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800edf8:	4b26      	ldr	r3, [pc, #152]	; (800ee94 <refr_area_part+0x230>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ee00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800ee04:	4b23      	ldr	r3, [pc, #140]	; (800ee94 <refr_area_part+0x230>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ee0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f001 f9a4 	bl	8010160 <lv_draw_img>
 800ee18:	e016      	b.n	800ee48 <refr_area_part+0x1e4>
                LV_LOG_WARN("Can't draw the background image");
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800ee1a:	f107 0308 	add.w	r3, r7, #8
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f005 f8d2 	bl	8013fc8 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800ee24:	4b1b      	ldr	r3, [pc, #108]	; (800ee94 <refr_area_part+0x230>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800ee2c:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800ee2e:	4b19      	ldr	r3, [pc, #100]	; (800ee94 <refr_area_part+0x230>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ee36:	72fb      	strb	r3, [r7, #11]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685a      	ldr	r2, [r3, #4]
 800ee3c:	f107 0308 	add.w	r3, r7, #8
 800ee40:	4619      	mov	r1, r3
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f005 f904 	bl	8014050 <lv_draw_rect>
        }
    }

    if(disp_refr->draw_prev_over_act) {
 800ee48:	4b12      	ldr	r3, [pc, #72]	; (800ee94 <refr_area_part+0x230>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee50:	f003 0301 	and.w	r3, r3, #1
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d01e      	beq.n	800ee98 <refr_area_part+0x234>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800ee5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d103      	bne.n	800ee68 <refr_area_part+0x204>
 800ee60:	4b0c      	ldr	r3, [pc, #48]	; (800ee94 <refr_area_part+0x230>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800ee68:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f8b4 	bl	800efd8 <refr_obj_and_children>

        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800ee70:	4b08      	ldr	r3, [pc, #32]	; (800ee94 <refr_area_part+0x230>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	695b      	ldr	r3, [r3, #20]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d029      	beq.n	800eece <refr_area_part+0x26a>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800ee7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d103      	bne.n	800ee88 <refr_area_part+0x224>
 800ee80:	4b04      	ldr	r3, [pc, #16]	; (800ee94 <refr_area_part+0x230>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800ee88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 f8a4 	bl	800efd8 <refr_obj_and_children>
 800ee90:	e01d      	b.n	800eece <refr_area_part+0x26a>
 800ee92:	bf00      	nop
 800ee94:	20000710 	.word	0x20000710
        }
    }
    else {
        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800ee98:	4b1b      	ldr	r3, [pc, #108]	; (800ef08 <refr_area_part+0x2a4>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	695b      	ldr	r3, [r3, #20]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00a      	beq.n	800eeb8 <refr_area_part+0x254>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800eea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d103      	bne.n	800eeb0 <refr_area_part+0x24c>
 800eea8:	4b17      	ldr	r3, [pc, #92]	; (800ef08 <refr_area_part+0x2a4>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	695b      	ldr	r3, [r3, #20]
 800eeae:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800eeb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 f890 	bl	800efd8 <refr_obj_and_children>
        }

        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800eeb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d103      	bne.n	800eec6 <refr_area_part+0x262>
 800eebe:	4b12      	ldr	r3, [pc, #72]	; (800ef08 <refr_area_part+0x2a4>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	691b      	ldr	r3, [r3, #16]
 800eec4:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800eec6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 f885 	bl	800efd8 <refr_obj_and_children>
    }

    /*Also refresh top and sys layer unconditionally*/
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800eece:	4b0e      	ldr	r3, [pc, #56]	; (800ef08 <refr_area_part+0x2a4>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7f5 fa44 	bl	8004360 <lv_disp_get_layer_top>
 800eed8:	4603      	mov	r3, r0
 800eeda:	4619      	mov	r1, r3
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 f87b 	bl	800efd8 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800eee2:	4b09      	ldr	r3, [pc, #36]	; (800ef08 <refr_area_part+0x2a4>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7f5 fa4f 	bl	800438a <lv_disp_get_layer_sys>
 800eeec:	4603      	mov	r3, r0
 800eeee:	4619      	mov	r1, r3
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f871 	bl	800efd8 <refr_obj_and_children>

    draw_buf_flush(disp_refr);
 800eef6:	4b04      	ldr	r3, [pc, #16]	; (800ef08 <refr_area_part+0x2a4>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f000 ff22 	bl	800fd44 <draw_buf_flush>
}
 800ef00:	bf00      	nop
 800ef02:	376c      	adds	r7, #108	; 0x6c
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd90      	pop	{r4, r7, pc}
 800ef08:	20000710 	.word	0x20000710

0800ef0c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b088      	sub	sp, #32
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	61fb      	str	r3, [r7, #28]

    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	3314      	adds	r3, #20
 800ef1e:	2200      	movs	r2, #0
 800ef20:	4619      	mov	r1, r3
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f011 fdb0 	bl	8020a88 <_lv_area_is_in>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	f083 0301 	eor.w	r3, r3, #1
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <lv_refr_get_top_obj+0x2c>
 800ef34:	2300      	movs	r3, #0
 800ef36:	e04a      	b.n	800efce <lv_refr_get_top_obj+0xc2>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800ef38:	2101      	movs	r1, #1
 800ef3a:	6838      	ldr	r0, [r7, #0]
 800ef3c:	f7f6 ffb3 	bl	8005ea6 <lv_obj_has_flag>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <lv_refr_get_top_obj+0x3e>
 800ef46:	2300      	movs	r3, #0
 800ef48:	e041      	b.n	800efce <lv_refr_get_top_obj+0xc2>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800ef4a:	6838      	ldr	r0, [r7, #0]
 800ef4c:	f7f9 f8a4 	bl	8008098 <_lv_obj_get_layer_type>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d001      	beq.n	800ef5a <lv_refr_get_top_obj+0x4e>
 800ef56:	2300      	movs	r3, #0
 800ef58:	e039      	b.n	800efce <lv_refr_get_top_obj+0xc2>

    /*If this object is fully cover the draw area then check the children too*/
    lv_cover_check_info_t info;
    info.res = LV_COVER_RES_COVER;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	723b      	strb	r3, [r7, #8]
    info.area = area_p;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	60fb      	str	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800ef62:	f107 0308 	add.w	r3, r7, #8
 800ef66:	461a      	mov	r2, r3
 800ef68:	2112      	movs	r1, #18
 800ef6a:	6838      	ldr	r0, [r7, #0]
 800ef6c:	f7f5 fdc2 	bl	8004af4 <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800ef70:	7a3b      	ldrb	r3, [r7, #8]
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d101      	bne.n	800ef7a <lv_refr_get_top_obj+0x6e>
 800ef76:	2300      	movs	r3, #0
 800ef78:	e029      	b.n	800efce <lv_refr_get_top_obj+0xc2>

    int32_t i;
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800ef7a:	6838      	ldr	r0, [r7, #0]
 800ef7c:	f7ff f808 	bl	800df90 <lv_obj_get_child_cnt>
 800ef80:	4603      	mov	r3, r0
 800ef82:	617b      	str	r3, [r7, #20]
    for(i = child_cnt - 1; i >= 0; i--) {
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	3b01      	subs	r3, #1
 800ef88:	61bb      	str	r3, [r7, #24]
 800ef8a:	e012      	b.n	800efb2 <lv_refr_get_top_obj+0xa6>
        lv_obj_t * child = obj->spec_attr->children[i];
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	009b      	lsls	r3, r3, #2
 800ef96:	4413      	add	r3, r2
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	613b      	str	r3, [r7, #16]
        found_p = lv_refr_get_top_obj(area_p, child);
 800ef9c:	6939      	ldr	r1, [r7, #16]
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7ff ffb4 	bl	800ef0c <lv_refr_get_top_obj>
 800efa4:	61f8      	str	r0, [r7, #28]

        /*If a children is ok then break*/
        if(found_p != NULL) {
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d106      	bne.n	800efba <lv_refr_get_top_obj+0xae>
    for(i = child_cnt - 1; i >= 0; i--) {
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	3b01      	subs	r3, #1
 800efb0:	61bb      	str	r3, [r7, #24]
 800efb2:	69bb      	ldr	r3, [r7, #24]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	dae9      	bge.n	800ef8c <lv_refr_get_top_obj+0x80>
 800efb8:	e000      	b.n	800efbc <lv_refr_get_top_obj+0xb0>
            break;
 800efba:	bf00      	nop
        }
    }

    /*If no better children use this object*/
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d104      	bne.n	800efcc <lv_refr_get_top_obj+0xc0>
 800efc2:	7a3b      	ldrb	r3, [r7, #8]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d101      	bne.n	800efcc <lv_refr_get_top_obj+0xc0>
        found_p = obj;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	61fb      	str	r3, [r7, #28]
    }

    return found_p;
 800efcc:	69fb      	ldr	r3, [r7, #28]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3720      	adds	r7, #32
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
	...

0800efd8 <refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void refr_obj_and_children(lv_draw_ctx_t * draw_ctx, lv_obj_t * top_obj)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
    /*Normally always will be a top_obj (at least the screen)
     *but in special cases (e.g. if the screen has alpha) it won't.
     *In this case use the screen directly*/
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d105      	bne.n	800eff4 <refr_obj_and_children+0x1c>
 800efe8:	4b2c      	ldr	r3, [pc, #176]	; (800f09c <refr_obj_and_children+0xc4>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4618      	mov	r0, r3
 800efee:	f7f5 f97d 	bl	80042ec <lv_disp_get_scr_act>
 800eff2:	6038      	str	r0, [r7, #0]
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d04c      	beq.n	800f094 <refr_obj_and_children+0xbc>

    /*Refresh the top object and its children*/
    refr_obj(draw_ctx, top_obj);
 800effa:	6839      	ldr	r1, [r7, #0]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 f931 	bl	800f264 <refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj*/
    lv_obj_t * parent;
    lv_obj_t * border_p = top_obj;
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	61bb      	str	r3, [r7, #24]

    parent = lv_obj_get_parent(top_obj);
 800f006:	6838      	ldr	r0, [r7, #0]
 800f008:	f7fe ff7e 	bl	800df08 <lv_obj_get_parent>
 800f00c:	61f8      	str	r0, [r7, #28]

    /*Do until not reach the screen*/
    while(parent != NULL) {
 800f00e:	e03d      	b.n	800f08c <refr_obj_and_children+0xb4>
        bool go = false;
 800f010:	2300      	movs	r3, #0
 800f012:	75fb      	strb	r3, [r7, #23]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800f014:	69f8      	ldr	r0, [r7, #28]
 800f016:	f7fe ffbb 	bl	800df90 <lv_obj_get_child_cnt>
 800f01a:	60f8      	str	r0, [r7, #12]
        for(i = 0; i < child_cnt; i++) {
 800f01c:	2300      	movs	r3, #0
 800f01e:	613b      	str	r3, [r7, #16]
 800f020:	e01b      	b.n	800f05a <refr_obj_and_children+0x82>
            lv_obj_t * child = parent->spec_attr->children[i];
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4413      	add	r3, r2
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	60bb      	str	r3, [r7, #8]
            if(!go) {
 800f032:	7dfb      	ldrb	r3, [r7, #23]
 800f034:	f083 0301 	eor.w	r3, r3, #1
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d006      	beq.n	800f04c <refr_obj_and_children+0x74>
                if(child == border_p) go = true;
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	429a      	cmp	r2, r3
 800f044:	d106      	bne.n	800f054 <refr_obj_and_children+0x7c>
 800f046:	2301      	movs	r3, #1
 800f048:	75fb      	strb	r3, [r7, #23]
 800f04a:	e003      	b.n	800f054 <refr_obj_and_children+0x7c>
            }
            else {
                /*Refresh the objects*/
                refr_obj(draw_ctx, child);
 800f04c:	68b9      	ldr	r1, [r7, #8]
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f908 	bl	800f264 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	3301      	adds	r3, #1
 800f058:	613b      	str	r3, [r7, #16]
 800f05a:	693a      	ldr	r2, [r7, #16]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d3df      	bcc.n	800f022 <refr_obj_and_children+0x4a>
            }
        }

        /*Call the post draw draw function of the parents of the to object*/
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	2117      	movs	r1, #23
 800f066:	69f8      	ldr	r0, [r7, #28]
 800f068:	f7f5 fd44 	bl	8004af4 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	2118      	movs	r1, #24
 800f070:	69f8      	ldr	r0, [r7, #28]
 800f072:	f7f5 fd3f 	bl	8004af4 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	2119      	movs	r1, #25
 800f07a:	69f8      	ldr	r0, [r7, #28]
 800f07c:	f7f5 fd3a 	bl	8004af4 <lv_event_send>

        /*The new border will be the last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = parent;
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	61bb      	str	r3, [r7, #24]
        /*Go a level deeper*/
        parent = lv_obj_get_parent(parent);
 800f084:	69f8      	ldr	r0, [r7, #28]
 800f086:	f7fe ff3f 	bl	800df08 <lv_obj_get_parent>
 800f08a:	61f8      	str	r0, [r7, #28]
    while(parent != NULL) {
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1be      	bne.n	800f010 <refr_obj_and_children+0x38>
 800f092:	e000      	b.n	800f096 <refr_obj_and_children+0xbe>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800f094:	bf00      	nop
    }
}
 800f096:	3720      	adds	r7, #32
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	20000710 	.word	0x20000710

0800f0a0 <layer_get_area>:


static lv_res_t layer_get_area(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj, lv_layer_type_t layer_type,
                               lv_area_t * layer_area_out)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b090      	sub	sp, #64	; 0x40
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	603b      	str	r3, [r7, #0]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	71fb      	strb	r3, [r7, #7]
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800f0b0:	68b8      	ldr	r0, [r7, #8]
 800f0b2:	f7f8 ffdd 	bl	8008070 <_lv_obj_get_ext_draw_size>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800f0ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f0be:	4619      	mov	r1, r3
 800f0c0:	68b8      	ldr	r0, [r7, #8]
 800f0c2:	f7f9 fcf3 	bl	8008aac <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800f0c6:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800f0ca:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800f0ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f011 fa88 	bl	80205e8 <lv_area_increase>

    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800f0d8:	79fb      	ldrb	r3, [r7, #7]
 800f0da:	2b02      	cmp	r3, #2
 800f0dc:	d147      	bne.n	800f16e <layer_get_area+0xce>
        /*Get the transformed area and clip it to the current clip area.
         *This area needs to be updated on the screen.*/
        lv_area_t clip_coords_for_obj;
        lv_area_t tranf_coords = obj_coords_ext;
 800f0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f0e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0ea:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800f0ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	68b8      	ldr	r0, [r7, #8]
 800f0f8:	f7fa f9cc 	bl	8009494 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6899      	ldr	r1, [r3, #8]
 800f100:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f108:	4618      	mov	r0, r3
 800f10a:	f011 fad9 	bl	80206c0 <_lv_area_intersect>
 800f10e:	4603      	mov	r3, r0
 800f110:	f083 0301 	eor.w	r3, r3, #1
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b00      	cmp	r3, #0
 800f118:	d001      	beq.n	800f11e <layer_get_area+0x7e>
            return LV_RES_INV;
 800f11a:	2300      	movs	r3, #0
 800f11c:	e046      	b.n	800f1ac <layer_get_area+0x10c>
        }

        /*Transform back (inverse) the transformed area.
         *It will tell which area of the non-transformed widget needs to be redrawn
         *in order to cover transformed area after transformation.*/
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800f11e:	f107 031c 	add.w	r3, r7, #28
 800f122:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f12a:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800f12e:	f107 011c 	add.w	r1, r7, #28
 800f132:	2301      	movs	r3, #1
 800f134:	2200      	movs	r2, #0
 800f136:	68b8      	ldr	r0, [r7, #8]
 800f138:	f7fa f9ac 	bl	8009494 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800f13c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f140:	f107 011c 	add.w	r1, r7, #28
 800f144:	f107 031c 	add.w	r3, r7, #28
 800f148:	4618      	mov	r0, r3
 800f14a:	f011 fab9 	bl	80206c0 <_lv_area_intersect>
 800f14e:	4603      	mov	r3, r0
 800f150:	f083 0301 	eor.w	r3, r3, #1
 800f154:	b2db      	uxtb	r3, r3
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <layer_get_area+0xbe>
            return LV_RES_INV;
 800f15a:	2300      	movs	r3, #0
 800f15c:	e026      	b.n	800f1ac <layer_get_area+0x10c>
        }

        *layer_area_out = inverse_clip_coords_for_obj;
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	461a      	mov	r2, r3
 800f162:	f107 031c 	add.w	r3, r7, #28
 800f166:	cb03      	ldmia	r3!, {r0, r1}
 800f168:	6010      	str	r0, [r2, #0]
 800f16a:	6051      	str	r1, [r2, #4]
 800f16c:	e01d      	b.n	800f1aa <layer_get_area+0x10a>
    }
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800f16e:	79fb      	ldrb	r3, [r7, #7]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d118      	bne.n	800f1a6 <layer_get_area+0x106>
        lv_area_t clip_coords_for_obj;
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6899      	ldr	r1, [r3, #8]
 800f178:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f17c:	f107 0314 	add.w	r3, r7, #20
 800f180:	4618      	mov	r0, r3
 800f182:	f011 fa9d 	bl	80206c0 <_lv_area_intersect>
 800f186:	4603      	mov	r3, r0
 800f188:	f083 0301 	eor.w	r3, r3, #1
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d001      	beq.n	800f196 <layer_get_area+0xf6>
            return LV_RES_INV;
 800f192:	2300      	movs	r3, #0
 800f194:	e00a      	b.n	800f1ac <layer_get_area+0x10c>
        }
        *layer_area_out = clip_coords_for_obj;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	461a      	mov	r2, r3
 800f19a:	f107 0314 	add.w	r3, r7, #20
 800f19e:	cb03      	ldmia	r3!, {r0, r1}
 800f1a0:	6010      	str	r0, [r2, #0]
 800f1a2:	6051      	str	r1, [r2, #4]
 800f1a4:	e001      	b.n	800f1aa <layer_get_area+0x10a>
    }
    else {
        LV_LOG_WARN("Unhandled intermediate layer type");
        return LV_RES_INV;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e000      	b.n	800f1ac <layer_get_area+0x10c>
    }

    return LV_RES_OK;
 800f1aa:	2301      	movs	r3, #1
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3740      	adds	r7, #64	; 0x40
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <layer_alpha_test>:

static void layer_alpha_test(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b088      	sub	sp, #32
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	607a      	str	r2, [r7, #4]
 800f1c0:	70fb      	strb	r3, [r7, #3]
    bool has_alpha;
    /*If globally the layer has alpha maybe this smaller section has not (e.g. not on a rounded corner)
     *If turns out that this section has no alpha renderer can choose faster algorithms*/
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800f1c2:	78fb      	ldrb	r3, [r7, #3]
 800f1c4:	f003 0301 	and.w	r3, r3, #1
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d031      	beq.n	800f230 <layer_alpha_test+0x7c>
        /*Test for alpha by assuming there is no alpha. If it fails, fall back to rendering with alpha*/
        has_alpha = true;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	77fb      	strb	r3, [r7, #31]
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f103 0008 	add.w	r0, r3, #8
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	3314      	adds	r3, #20
 800f1da:	2200      	movs	r2, #0
 800f1dc:	4619      	mov	r1, r3
 800f1de:	f011 fc53 	bl	8020a88 <_lv_area_is_in>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d010      	beq.n	800f20a <layer_alpha_test+0x56>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	753b      	strb	r3, [r7, #20]
            info.area = &layer_ctx->area_act;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	3308      	adds	r3, #8
 800f1f0:	61bb      	str	r3, [r7, #24]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800f1f2:	f107 0314 	add.w	r3, r7, #20
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	2112      	movs	r1, #18
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f7f5 fc7a 	bl	8004af4 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800f200:	7d3b      	ldrb	r3, [r7, #20]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d101      	bne.n	800f20a <layer_alpha_test+0x56>
 800f206:	2300      	movs	r3, #0
 800f208:	77fb      	strb	r3, [r7, #31]
        }

        if(has_alpha) {
 800f20a:	7ffb      	ldrb	r3, [r7, #31]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d011      	beq.n	800f234 <layer_alpha_test+0x80>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f216:	b29a      	uxth	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f21e:	b29b      	uxth	r3, r3
 800f220:	4413      	add	r3, r2
 800f222:	b29b      	uxth	r3, r3
 800f224:	3b01      	subs	r3, #1
 800f226:	b29b      	uxth	r3, r3
 800f228:	b21a      	sxth	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	81da      	strh	r2, [r3, #14]
 800f22e:	e001      	b.n	800f234 <layer_alpha_test+0x80>
        }
    }
    else {
        has_alpha = false;
 800f230:	2300      	movs	r3, #0
 800f232:	77fb      	strb	r3, [r7, #31]
    }

    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f240:	429a      	cmp	r2, r3
 800f242:	dd04      	ble.n	800f24e <layer_alpha_test+0x9a>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	81da      	strh	r2, [r3, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800f24e:	7ffb      	ldrb	r3, [r7, #31]
 800f250:	461a      	mov	r2, r3
 800f252:	6879      	ldr	r1, [r7, #4]
 800f254:	68b8      	ldr	r0, [r7, #8]
 800f256:	f002 f9ef 	bl	8011638 <lv_draw_layer_adjust>
}
 800f25a:	bf00      	nop
 800f25c:	3720      	adds	r7, #32
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
	...

0800f264 <refr_obj>:


void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800f264:	b590      	push	{r4, r7, lr}
 800f266:	b08f      	sub	sp, #60	; 0x3c
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800f26e:	2101      	movs	r1, #1
 800f270:	6838      	ldr	r0, [r7, #0]
 800f272:	f7f6 fe18 	bl	8005ea6 <lv_obj_has_flag>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f040 81b8 	bne.w	800f5ee <refr_obj+0x38a>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800f27e:	6838      	ldr	r0, [r7, #0]
 800f280:	f7f8 ff0a 	bl	8008098 <_lv_obj_get_layer_type>
 800f284:	4603      	mov	r3, r0
 800f286:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800f28a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d104      	bne.n	800f29c <refr_obj+0x38>
        lv_obj_redraw(draw_ctx, obj);
 800f292:	6839      	ldr	r1, [r7, #0]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff f860 	bl	800e35a <lv_obj_redraw>
 800f29a:	e1af      	b.n	800f5fc <refr_obj+0x398>
    }
    else {
        lv_opa_t opa = lv_obj_get_style_opa(obj, 0);
 800f29c:	2100      	movs	r1, #0
 800f29e:	6838      	ldr	r0, [r7, #0]
 800f2a0:	f7ff f830 	bl	800e304 <lv_obj_get_style_opa>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(opa < LV_OPA_MIN) return;
 800f2aa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	f240 819f 	bls.w	800f5f2 <refr_obj+0x38e>

        lv_area_t layer_area_full;
        lv_res_t res = layer_get_area(draw_ctx, obj, layer_type, &layer_area_full);
 800f2b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2b8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7ff feee 	bl	800f0a0 <layer_get_area>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        if(res != LV_RES_OK) return;
 800f2ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	f040 8191 	bne.w	800f5f6 <refr_obj+0x392>

        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	f103 0114 	add.w	r1, r3, #20
 800f2e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f011 fbce 	bl	8020a88 <_lv_area_is_in>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d014      	beq.n	800f31c <refr_obj+0xb8>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	723b      	strb	r3, [r7, #8]
            info.area = &layer_area_full;
 800f2f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2fa:	60fb      	str	r3, [r7, #12]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800f2fc:	f107 0308 	add.w	r3, r7, #8
 800f300:	461a      	mov	r2, r3
 800f302:	2112      	movs	r1, #18
 800f304:	6838      	ldr	r0, [r7, #0]
 800f306:	f7f5 fbf5 	bl	8004af4 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800f30a:	7a3b      	ldrb	r3, [r7, #8]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d105      	bne.n	800f31c <refr_obj+0xb8>
 800f310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f314:	f023 0301 	bic.w	r3, r3, #1
 800f318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800f31c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f320:	2b01      	cmp	r3, #1
 800f322:	d105      	bne.n	800f330 <refr_obj+0xcc>
 800f324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f328:	f043 0302 	orr.w	r3, r3, #2
 800f32c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800f330:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f002 f926 	bl	801158c <lv_draw_layer_create>
 800f340:	6338      	str	r0, [r7, #48]	; 0x30
        if(layer_ctx == NULL) {
 800f342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f344:	2b00      	cmp	r3, #0
 800f346:	f000 8158 	beq.w	800f5fa <refr_obj+0x396>
            LV_LOG_WARN("Couldn't create a new layer context");
            return;
        }
        lv_point_t pivot = {
            .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 800f34a:	2100      	movs	r1, #0
 800f34c:	6838      	ldr	r0, [r7, #0]
 800f34e:	f7fe ffb5 	bl	800e2bc <lv_obj_get_style_transform_pivot_x>
 800f352:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800f354:	84bb      	strh	r3, [r7, #36]	; 0x24
            .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800f356:	2100      	movs	r1, #0
 800f358:	6838      	ldr	r0, [r7, #0]
 800f35a:	f7fe ffc1 	bl	800e2e0 <lv_obj_get_style_transform_pivot_y>
 800f35e:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800f360:	84fb      	strh	r3, [r7, #38]	; 0x26
        };

        if(LV_COORD_IS_PCT(pivot.x)) {
 800f362:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f366:	b29b      	uxth	r3, r3
 800f368:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f36c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f370:	d12d      	bne.n	800f3ce <refr_obj+0x16a>
 800f372:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f376:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f37a:	b21b      	sxth	r3, r3
 800f37c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f380:	dc25      	bgt.n	800f3ce <refr_obj+0x16a>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800f382:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f386:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f38a:	b21b      	sxth	r3, r3
 800f38c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f390:	dd07      	ble.n	800f3a2 <refr_obj+0x13e>
 800f392:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f396:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f39a:	b21b      	sxth	r3, r3
 800f39c:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800f3a0:	e005      	b.n	800f3ae <refr_obj+0x14a>
 800f3a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f3a6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f3aa:	b21b      	sxth	r3, r3
 800f3ac:	461c      	mov	r4, r3
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	3314      	adds	r3, #20
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fe ff30 	bl	800e218 <lv_area_get_width>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	fb04 f303 	mul.w	r3, r4, r3
 800f3be:	4a91      	ldr	r2, [pc, #580]	; (800f604 <refr_obj+0x3a0>)
 800f3c0:	fb82 1203 	smull	r1, r2, r2, r3
 800f3c4:	1152      	asrs	r2, r2, #5
 800f3c6:	17db      	asrs	r3, r3, #31
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	b21b      	sxth	r3, r3
 800f3cc:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        if(LV_COORD_IS_PCT(pivot.y)) {
 800f3ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f3d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3dc:	d12d      	bne.n	800f43a <refr_obj+0x1d6>
 800f3de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f3e2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f3e6:	b21b      	sxth	r3, r3
 800f3e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f3ec:	dc25      	bgt.n	800f43a <refr_obj+0x1d6>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800f3ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f3f2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f3f6:	b21b      	sxth	r3, r3
 800f3f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f3fc:	dd07      	ble.n	800f40e <refr_obj+0x1aa>
 800f3fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f402:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f406:	b21b      	sxth	r3, r3
 800f408:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800f40c:	e005      	b.n	800f41a <refr_obj+0x1b6>
 800f40e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f412:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f416:	b21b      	sxth	r3, r3
 800f418:	461c      	mov	r4, r3
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	3314      	adds	r3, #20
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fe ff11 	bl	800e246 <lv_area_get_height>
 800f424:	4603      	mov	r3, r0
 800f426:	fb04 f303 	mul.w	r3, r4, r3
 800f42a:	4a76      	ldr	r2, [pc, #472]	; (800f604 <refr_obj+0x3a0>)
 800f42c:	fb82 1203 	smull	r1, r2, r2, r3
 800f430:	1152      	asrs	r2, r2, #5
 800f432:	17db      	asrs	r3, r3, #31
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	b21b      	sxth	r3, r3
 800f438:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        lv_draw_img_dsc_t draw_dsc;
        lv_draw_img_dsc_init(&draw_dsc);
 800f43a:	f107 0310 	add.w	r3, r7, #16
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 fe71 	bl	8010126 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800f444:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f448:	76bb      	strb	r3, [r7, #26]
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800f44a:	2100      	movs	r1, #0
 800f44c:	6838      	ldr	r0, [r7, #0]
 800f44e:	f7fe ff23 	bl	800e298 <lv_obj_get_style_transform_angle>
 800f452:	4603      	mov	r3, r0
 800f454:	823b      	strh	r3, [r7, #16]
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800f456:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f45a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800f45e:	dd08      	ble.n	800f472 <refr_obj+0x20e>
 800f460:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f464:	b29b      	uxth	r3, r3
 800f466:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	b21b      	sxth	r3, r3
 800f46e:	823b      	strh	r3, [r7, #16]
 800f470:	e00b      	b.n	800f48a <refr_obj+0x226>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800f472:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f476:	2b00      	cmp	r3, #0
 800f478:	da07      	bge.n	800f48a <refr_obj+0x226>
 800f47a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f47e:	b29b      	uxth	r3, r3
 800f480:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800f484:	b29b      	uxth	r3, r3
 800f486:	b21b      	sxth	r3, r3
 800f488:	823b      	strh	r3, [r7, #16]

        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800f48a:	2100      	movs	r1, #0
 800f48c:	6838      	ldr	r0, [r7, #0]
 800f48e:	f7fe fef1 	bl	800e274 <lv_obj_get_style_transform_zoom>
 800f492:	4603      	mov	r3, r0
 800f494:	b29b      	uxth	r3, r3
 800f496:	827b      	strh	r3, [r7, #18]
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800f498:	2100      	movs	r1, #0
 800f49a:	6838      	ldr	r0, [r7, #0]
 800f49c:	f7fe ff44 	bl	800e328 <lv_obj_get_style_blend_mode>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	f003 030f 	and.w	r3, r3, #15
 800f4a6:	b2da      	uxtb	r2, r3
 800f4a8:	7efb      	ldrb	r3, [r7, #27]
 800f4aa:	f362 0303 	bfi	r3, r2, #0, #4
 800f4ae:	76fb      	strb	r3, [r7, #27]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800f4b0:	4b55      	ldr	r3, [pc, #340]	; (800f608 <refr_obj+0x3a4>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	7c1b      	ldrb	r3, [r3, #16]
 800f4b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4c2:	f362 0300 	bfi	r3, r2, #0, #1
 800f4c6:	f887 3020 	strb.w	r3, [r7, #32]

        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800f4ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4ce:	f003 0302 	and.w	r3, r3, #2
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d07d      	beq.n	800f5d2 <refr_obj+0x36e>
            layer_ctx->area_act = layer_ctx->area_full;
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4da:	3308      	adds	r3, #8
 800f4dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4e0:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	4413      	add	r3, r2
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	b21a      	sxth	r2, r3
 800f4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f500:	81da      	strh	r2, [r3, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f504:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f50e:	429a      	cmp	r2, r3
 800f510:	dd5f      	ble.n	800f5d2 <refr_obj+0x36e>
 800f512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f514:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	81da      	strh	r2, [r3, #14]
        }

        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800f51c:	e059      	b.n	800f5d2 <refr_obj+0x36e>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800f51e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f522:	f003 0302 	and.w	r3, r3, #2
 800f526:	2b00      	cmp	r3, #0
 800f528:	d006      	beq.n	800f538 <refr_obj+0x2d4>
                layer_alpha_test(obj, draw_ctx, layer_ctx, flags);
 800f52a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f530:	6879      	ldr	r1, [r7, #4]
 800f532:	6838      	ldr	r0, [r7, #0]
 800f534:	f7ff fe3e 	bl	800f1b4 <layer_alpha_test>
            }

            lv_obj_redraw(draw_ctx, obj);
 800f538:	6839      	ldr	r1, [r7, #0]
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7fe ff0d 	bl	800e35a <lv_obj_redraw>

            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f546:	b29a      	uxth	r2, r3
 800f548:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	4413      	add	r3, r2
 800f550:	b29a      	uxth	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	1ad3      	subs	r3, r2, r3
 800f55e:	b29b      	uxth	r3, r3
 800f560:	b21b      	sxth	r3, r3
 800f562:	82bb      	strh	r3, [r7, #20]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f570:	b29b      	uxth	r3, r3
 800f572:	4413      	add	r3, r2
 800f574:	b29a      	uxth	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	b29b      	uxth	r3, r3
 800f584:	b21b      	sxth	r3, r3
 800f586:	82fb      	strh	r3, [r7, #22]

            /*With LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE it should also go the next chunk*/
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800f588:	f107 0310 	add.w	r3, r7, #16
 800f58c:	461a      	mov	r2, r3
 800f58e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f002 f866 	bl	8011662 <lv_draw_layer_blend>

            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800f596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f59a:	f003 0302 	and.w	r3, r3, #2
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d01f      	beq.n	800f5e2 <refr_obj+0x37e>

            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800f5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	b21a      	sxth	r2, r3
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	815a      	strh	r2, [r3, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5be:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	4413      	add	r3, r2
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	b21a      	sxth	r2, r3
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	81da      	strh	r2, [r3, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f5d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	dd9e      	ble.n	800f51e <refr_obj+0x2ba>
 800f5e0:	e000      	b.n	800f5e4 <refr_obj+0x380>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800f5e2:	bf00      	nop
        }

        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800f5e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f002 f84f 	bl	801168a <lv_draw_layer_destroy>
 800f5ec:	e006      	b.n	800f5fc <refr_obj+0x398>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800f5ee:	bf00      	nop
 800f5f0:	e004      	b.n	800f5fc <refr_obj+0x398>
        if(opa < LV_OPA_MIN) return;
 800f5f2:	bf00      	nop
 800f5f4:	e002      	b.n	800f5fc <refr_obj+0x398>
        if(res != LV_RES_OK) return;
 800f5f6:	bf00      	nop
 800f5f8:	e000      	b.n	800f5fc <refr_obj+0x398>
            return;
 800f5fa:	bf00      	nop
    }
}
 800f5fc:	373c      	adds	r7, #60	; 0x3c
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd90      	pop	{r4, r7, pc}
 800f602:	bf00      	nop
 800f604:	51eb851f 	.word	0x51eb851f
 800f608:	20000710 	.word	0x20000710

0800f60c <get_max_row>:


static uint32_t get_max_row(lv_disp_t * disp, lv_coord_t area_w, lv_coord_t area_h)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b086      	sub	sp, #24
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	460b      	mov	r3, r1
 800f616:	807b      	strh	r3, [r7, #2]
 800f618:	4613      	mov	r3, r2
 800f61a:	803b      	strh	r3, [r7, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	68da      	ldr	r2, [r3, #12]
 800f624:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f628:	fbb2 f3f3 	udiv	r3, r2, r3
 800f62c:	617b      	str	r3, [r7, #20]

    if(max_row > area_h) max_row = area_h;
 800f62e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f632:	697a      	ldr	r2, [r7, #20]
 800f634:	429a      	cmp	r2, r3
 800f636:	dd02      	ble.n	800f63e <get_max_row+0x32>
 800f638:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f63c:	617b      	str	r3, [r7, #20]

    /*Round down the lines of draw_buf if rounding is added*/
    if(disp_refr->driver->rounder_cb) {
 800f63e:	4b21      	ldr	r3, [pc, #132]	; (800f6c4 <get_max_row+0xb8>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	699b      	ldr	r3, [r3, #24]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d037      	beq.n	800f6ba <get_max_row+0xae>
        lv_area_t tmp;
        tmp.x1 = 0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	813b      	strh	r3, [r7, #8]
        tmp.x2 = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	81bb      	strh	r3, [r7, #12]
        tmp.y1 = 0;
 800f652:	2300      	movs	r3, #0
 800f654:	817b      	strh	r3, [r7, #10]

        lv_coord_t h_tmp = max_row;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	827b      	strh	r3, [r7, #18]
        do {
            tmp.y2 = h_tmp - 1;
 800f65a:	8a7b      	ldrh	r3, [r7, #18]
 800f65c:	3b01      	subs	r3, #1
 800f65e:	b29b      	uxth	r3, r3
 800f660:	b21b      	sxth	r3, r3
 800f662:	81fb      	strh	r3, [r7, #14]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800f664:	4b17      	ldr	r3, [pc, #92]	; (800f6c4 <get_max_row+0xb8>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	699b      	ldr	r3, [r3, #24]
 800f66c:	4a15      	ldr	r2, [pc, #84]	; (800f6c4 <get_max_row+0xb8>)
 800f66e:	6812      	ldr	r2, [r2, #0]
 800f670:	6812      	ldr	r2, [r2, #0]
 800f672:	f107 0108 	add.w	r1, r7, #8
 800f676:	4610      	mov	r0, r2
 800f678:	4798      	blx	r3

            /*If this height fits into `max_row` then fine*/
            if(lv_area_get_height(&tmp) <= max_row) break;
 800f67a:	f107 0308 	add.w	r3, r7, #8
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fe fde1 	bl	800e246 <lv_area_get_height>
 800f684:	4603      	mov	r3, r0
 800f686:	461a      	mov	r2, r3
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	4293      	cmp	r3, r2
 800f68c:	da0a      	bge.n	800f6a4 <get_max_row+0x98>

            /*Decrement the height of the area until it fits into `max_row` after rounding*/
            h_tmp--;
 800f68e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f692:	b29b      	uxth	r3, r3
 800f694:	3b01      	subs	r3, #1
 800f696:	b29b      	uxth	r3, r3
 800f698:	827b      	strh	r3, [r7, #18]
        } while(h_tmp > 0);
 800f69a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	dcdb      	bgt.n	800f65a <get_max_row+0x4e>
 800f6a2:	e000      	b.n	800f6a6 <get_max_row+0x9a>
            if(lv_area_get_height(&tmp) <= max_row) break;
 800f6a4:	bf00      	nop

        if(h_tmp <= 0) {
 800f6a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	dc01      	bgt.n	800f6b2 <get_max_row+0xa6>
            LV_LOG_WARN("Can't set draw_buf height using the round function. (Wrong round_cb or to "
                        "small draw_buf)");
            return 0;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e004      	b.n	800f6bc <get_max_row+0xb0>
        }
        else {
            max_row = tmp.y2 + 1;
 800f6b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	617b      	str	r3, [r7, #20]
        }
    }

    return max_row;
 800f6ba:	697b      	ldr	r3, [r7, #20]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3718      	adds	r7, #24
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	20000710 	.word	0x20000710

0800f6c8 <draw_buf_rotate_180>:

static void draw_buf_rotate_180(lv_disp_drv_t * drv, lv_area_t * area, lv_color_t * color_p)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b08a      	sub	sp, #40	; 0x28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]
    lv_coord_t area_w = lv_area_get_width(area);
 800f6d4:	68b8      	ldr	r0, [r7, #8]
 800f6d6:	f7fe fd9f 	bl	800e218 <lv_area_get_width>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	83fb      	strh	r3, [r7, #30]
    lv_coord_t area_h = lv_area_get_height(area);
 800f6de:	68b8      	ldr	r0, [r7, #8]
 800f6e0:	f7fe fdb1 	bl	800e246 <lv_area_get_height>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	83bb      	strh	r3, [r7, #28]
    uint32_t total = area_w * area_h;
 800f6e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f6ec:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f6f0:	fb02 f303 	mul.w	r3, r2, r3
 800f6f4:	61bb      	str	r3, [r7, #24]
    /*Swap the beginning and end values*/
    lv_color_t tmp;
    uint32_t i = total - 1, j = 0;
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	627b      	str	r3, [r7, #36]	; 0x24
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800f700:	e017      	b.n	800f732 <draw_buf_rotate_180+0x6a>
        tmp = color_p[i];
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f706:	4413      	add	r3, r2
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	753b      	strb	r3, [r7, #20]
        color_p[i] = color_p[j];
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	6a3b      	ldr	r3, [r7, #32]
 800f710:	441a      	add	r2, r3
 800f712:	6879      	ldr	r1, [r7, #4]
 800f714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f716:	440b      	add	r3, r1
 800f718:	7812      	ldrb	r2, [r2, #0]
 800f71a:	701a      	strb	r2, [r3, #0]
        color_p[j] = tmp;
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	6a3b      	ldr	r3, [r7, #32]
 800f720:	4413      	add	r3, r2
 800f722:	7d3a      	ldrb	r2, [r7, #20]
 800f724:	701a      	strb	r2, [r3, #0]
        i--;
 800f726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f728:	3b01      	subs	r3, #1
 800f72a:	627b      	str	r3, [r7, #36]	; 0x24
        j++;
 800f72c:	6a3b      	ldr	r3, [r7, #32]
 800f72e:	3301      	adds	r3, #1
 800f730:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800f732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f734:	6a3b      	ldr	r3, [r7, #32]
 800f736:	429a      	cmp	r2, r3
 800f738:	d8e3      	bhi.n	800f702 <draw_buf_rotate_180+0x3a>
    }
    lv_coord_t tmp_coord;
    tmp_coord = area->y2;
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	88db      	ldrh	r3, [r3, #6]
 800f73e:	82fb      	strh	r3, [r7, #22]
    area->y2 = drv->ver_res - area->y1 - 1;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f746:	b29a      	uxth	r2, r3
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	b29b      	uxth	r3, r3
 800f754:	3b01      	subs	r3, #1
 800f756:	b29b      	uxth	r3, r3
 800f758:	b21a      	sxth	r2, r3
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	80da      	strh	r2, [r3, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f764:	b29a      	uxth	r2, r3
 800f766:	8afb      	ldrh	r3, [r7, #22]
 800f768:	1ad3      	subs	r3, r2, r3
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	3b01      	subs	r3, #1
 800f76e:	b29b      	uxth	r3, r3
 800f770:	b21a      	sxth	r2, r3
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	805a      	strh	r2, [r3, #2]
    tmp_coord = area->x2;
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	889b      	ldrh	r3, [r3, #4]
 800f77a:	82fb      	strh	r3, [r7, #22]
    area->x2 = drv->hor_res - area->x1 - 1;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f782:	b29a      	uxth	r2, r3
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	b29b      	uxth	r3, r3
 800f790:	3b01      	subs	r3, #1
 800f792:	b29b      	uxth	r3, r3
 800f794:	b21a      	sxth	r2, r3
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	809a      	strh	r2, [r3, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	8afb      	ldrh	r3, [r7, #22]
 800f7a4:	1ad3      	subs	r3, r2, r3
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	b21a      	sxth	r2, r3
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	801a      	strh	r2, [r3, #0]
}
 800f7b2:	bf00      	nop
 800f7b4:	3728      	adds	r7, #40	; 0x28
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <draw_buf_rotate_90>:

static LV_ATTRIBUTE_FAST_MEM void draw_buf_rotate_90(bool invert_i, lv_coord_t area_w, lv_coord_t area_h,
                                                     lv_color_t * orig_color_p, lv_color_t * rot_buf)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b08b      	sub	sp, #44	; 0x2c
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	607b      	str	r3, [r7, #4]
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	73fb      	strb	r3, [r7, #15]
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	81bb      	strh	r3, [r7, #12]
 800f7ca:	4613      	mov	r3, r2
 800f7cc:	817b      	strh	r3, [r7, #10]

    uint32_t invert = (area_w * area_h) - 1;
 800f7ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f7d6:	fb02 f303 	mul.w	r3, r2, r3
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	61bb      	str	r3, [r7, #24]
    uint32_t initial_i = ((area_w - 1) * area_h);
 800f7de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7e2:	3b01      	subs	r3, #1
 800f7e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f7e8:	fb02 f303 	mul.w	r3, r2, r3
 800f7ec:	617b      	str	r3, [r7, #20]
    for(lv_coord_t y = 0; y < area_h; y++) {
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f7f2:	e036      	b.n	800f862 <draw_buf_rotate_90+0xa8>
        uint32_t i = initial_i + y;
 800f7f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	623b      	str	r3, [r7, #32]
        if(invert_i)
 800f7fe:	7bfb      	ldrb	r3, [r7, #15]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d003      	beq.n	800f80c <draw_buf_rotate_90+0x52>
            i = invert - i;
 800f804:	69ba      	ldr	r2, [r7, #24]
 800f806:	6a3b      	ldr	r3, [r7, #32]
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800f80c:	2300      	movs	r3, #0
 800f80e:	83fb      	strh	r3, [r7, #30]
 800f810:	e01b      	b.n	800f84a <draw_buf_rotate_90+0x90>
            rot_buf[i] = *(orig_color_p++);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	1c5a      	adds	r2, r3, #1
 800f816:	607a      	str	r2, [r7, #4]
 800f818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f81a:	6a3a      	ldr	r2, [r7, #32]
 800f81c:	440a      	add	r2, r1
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	7013      	strb	r3, [r2, #0]
            if(invert_i)
 800f822:	7bfb      	ldrb	r3, [r7, #15]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d005      	beq.n	800f834 <draw_buf_rotate_90+0x7a>
                i += area_h;
 800f828:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f82c:	6a3a      	ldr	r2, [r7, #32]
 800f82e:	4413      	add	r3, r2
 800f830:	623b      	str	r3, [r7, #32]
 800f832:	e004      	b.n	800f83e <draw_buf_rotate_90+0x84>
            else
                i -= area_h;
 800f834:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f838:	6a3a      	ldr	r2, [r7, #32]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800f83e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f842:	b29b      	uxth	r3, r3
 800f844:	3301      	adds	r3, #1
 800f846:	b29b      	uxth	r3, r3
 800f848:	83fb      	strh	r3, [r7, #30]
 800f84a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800f84e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f852:	429a      	cmp	r2, r3
 800f854:	dbdd      	blt.n	800f812 <draw_buf_rotate_90+0x58>
    for(lv_coord_t y = 0; y < area_h; y++) {
 800f856:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	3301      	adds	r3, #1
 800f85e:	b29b      	uxth	r3, r3
 800f860:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f862:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f866:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	dbc2      	blt.n	800f7f4 <draw_buf_rotate_90+0x3a>
        }
    }
}
 800f86e:	bf00      	nop
 800f870:	bf00      	nop
 800f872:	372c      	adds	r7, #44	; 0x2c
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <draw_buf_rotate4>:

/**
 * Helper function for draw_buf_rotate_90_sqr. Given a list of four numbers, rotate the entire list to the left.
 */
static inline void draw_buf_rotate4(lv_color_t * a, lv_color_t * b, lv_color_t * c, lv_color_t * d)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b087      	sub	sp, #28
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
 800f888:	603b      	str	r3, [r7, #0]
    lv_color_t tmp;
    tmp = *a;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	753b      	strb	r3, [r7, #20]
    *a = *b;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	7812      	ldrb	r2, [r2, #0]
 800f896:	701a      	strb	r2, [r3, #0]
    *b = *c;
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	7812      	ldrb	r2, [r2, #0]
 800f89e:	701a      	strb	r2, [r3, #0]
    *c = *d;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	683a      	ldr	r2, [r7, #0]
 800f8a4:	7812      	ldrb	r2, [r2, #0]
 800f8a6:	701a      	strb	r2, [r3, #0]
    *d = tmp;
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	7d3a      	ldrb	r2, [r7, #20]
 800f8ac:	701a      	strb	r2, [r3, #0]
}
 800f8ae:	bf00      	nop
 800f8b0:	371c      	adds	r7, #28
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr

0800f8ba <draw_buf_rotate_90_sqr>:
/**
 * Rotate a square image 90/270 degrees in place.
 * @note inspired by https://stackoverflow.com/a/43694906
 */
static void draw_buf_rotate_90_sqr(bool is_270, lv_coord_t w, lv_color_t * color_p)
{
 800f8ba:	b590      	push	{r4, r7, lr}
 800f8bc:	b085      	sub	sp, #20
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	603a      	str	r2, [r7, #0]
 800f8c4:	71fb      	strb	r3, [r7, #7]
 800f8c6:	460b      	mov	r3, r1
 800f8c8:	80bb      	strh	r3, [r7, #4]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	81fb      	strh	r3, [r7, #14]
 800f8ce:	e092      	b.n	800f9f6 <draw_buf_rotate_90_sqr+0x13c>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	81bb      	strh	r3, [r7, #12]
 800f8d4:	e07d      	b.n	800f9d2 <draw_buf_rotate_90_sqr+0x118>
            lv_coord_t inv_i = (w - 1) - i;
 800f8d6:	88ba      	ldrh	r2, [r7, #4]
 800f8d8:	89fb      	ldrh	r3, [r7, #14]
 800f8da:	1ad3      	subs	r3, r2, r3
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	817b      	strh	r3, [r7, #10]
            lv_coord_t inv_j = (w - 1) - j;
 800f8e4:	88ba      	ldrh	r2, [r7, #4]
 800f8e6:	89bb      	ldrh	r3, [r7, #12]
 800f8e8:	1ad3      	subs	r3, r2, r3
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	813b      	strh	r3, [r7, #8]
            if(is_270) {
 800f8f2:	79fb      	ldrb	r3, [r7, #7]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d033      	beq.n	800f960 <draw_buf_rotate_90_sqr+0xa6>
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800f8f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f900:	fb03 f202 	mul.w	r2, r3, r2
 800f904:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f908:	4413      	add	r3, r2
 800f90a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	1898      	adds	r0, r3, r2
                    &color_p[inv_j * w + i],
 800f910:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f914:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f918:	fb03 f202 	mul.w	r2, r3, r2
 800f91c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f920:	4413      	add	r3, r2
 800f922:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800f928:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f92c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f930:	fb03 f202 	mul.w	r2, r3, r2
 800f934:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f938:	4413      	add	r3, r2
 800f93a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	189c      	adds	r4, r3, r2
                    &color_p[j * w + inv_i]
 800f940:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f944:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f948:	fb03 f202 	mul.w	r2, r3, r2
 800f94c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f950:	4413      	add	r3, r2
 800f952:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	4413      	add	r3, r2
 800f958:	4622      	mov	r2, r4
 800f95a:	f7ff ff8f 	bl	800f87c <draw_buf_rotate4>
 800f95e:	e032      	b.n	800f9c6 <draw_buf_rotate_90_sqr+0x10c>
                );
            }
            else {
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800f960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f964:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f968:	fb03 f202 	mul.w	r2, r3, r2
 800f96c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f970:	4413      	add	r3, r2
 800f972:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	1898      	adds	r0, r3, r2
                    &color_p[j * w + inv_i],
 800f978:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f97c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f980:	fb03 f202 	mul.w	r2, r3, r2
 800f984:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f988:	4413      	add	r3, r2
 800f98a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800f990:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f994:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f998:	fb03 f202 	mul.w	r2, r3, r2
 800f99c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	189c      	adds	r4, r3, r2
                    &color_p[inv_j * w + i]
 800f9a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f9ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f9b0:	fb03 f202 	mul.w	r2, r3, r2
 800f9b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	4413      	add	r3, r2
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	f7ff ff5b 	bl	800f87c <draw_buf_rotate4>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800f9c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	81bb      	strh	r3, [r7, #12]
 800f9d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f9d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f9da:	3301      	adds	r3, #1
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	da00      	bge.n	800f9e2 <draw_buf_rotate_90_sqr+0x128>
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	105b      	asrs	r3, r3, #1
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	f6ff af76 	blt.w	800f8d6 <draw_buf_rotate_90_sqr+0x1c>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800f9ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	81fb      	strh	r3, [r7, #14]
 800f9f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	da00      	bge.n	800fa00 <draw_buf_rotate_90_sqr+0x146>
 800f9fe:	3301      	adds	r3, #1
 800fa00:	105b      	asrs	r3, r3, #1
 800fa02:	b21b      	sxth	r3, r3
 800fa04:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	f6ff af61 	blt.w	800f8d0 <draw_buf_rotate_90_sqr+0x16>
                );
            }

        }
    }
}
 800fa0e:	bf00      	nop
 800fa10:	bf00      	nop
 800fa12:	3714      	adds	r7, #20
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd90      	pop	{r4, r7, pc}

0800fa18 <draw_buf_rotate>:

/**
 * Rotate the draw_buf to the display's native orientation.
 */
static void draw_buf_rotate(lv_area_t * area, lv_color_t * color_p)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b08a      	sub	sp, #40	; 0x28
 800fa1c:	af02      	add	r7, sp, #8
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
    lv_disp_drv_t * drv = disp_refr->driver;
 800fa22:	4b8e      	ldr	r3, [pc, #568]	; (800fc5c <draw_buf_rotate+0x244>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	617b      	str	r3, [r7, #20]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800fa2a:	4b8c      	ldr	r3, [pc, #560]	; (800fc5c <draw_buf_rotate+0x244>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	7c1b      	ldrb	r3, [r3, #16]
 800fa32:	f003 0302 	and.w	r3, r3, #2
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d007      	beq.n	800fa4c <draw_buf_rotate+0x34>
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	7c1b      	ldrb	r3, [r3, #16]
 800fa40:	f003 0304 	and.w	r3, r3, #4
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	f040 8178 	bne.w	800fd3c <draw_buf_rotate+0x324>
        LV_LOG_ERROR("cannot rotate a full refreshed display!");
        return;
    }
    if(drv->rotated == LV_DISP_ROT_180) {
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	7c1b      	ldrb	r3, [r3, #16]
 800fa50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	2b20      	cmp	r3, #32
 800fa58:	d10a      	bne.n	800fa70 <draw_buf_rotate+0x58>
        draw_buf_rotate_180(drv, area, color_p);
 800fa5a:	683a      	ldr	r2, [r7, #0]
 800fa5c:	6879      	ldr	r1, [r7, #4]
 800fa5e:	6978      	ldr	r0, [r7, #20]
 800fa60:	f7ff fe32 	bl	800f6c8 <draw_buf_rotate_180>
        call_flush_cb(drv, area, color_p);
 800fa64:	683a      	ldr	r2, [r7, #0]
 800fa66:	6879      	ldr	r1, [r7, #4]
 800fa68:	6978      	ldr	r0, [r7, #20]
 800fa6a:	f000 fa2b 	bl	800fec4 <call_flush_cb>
 800fa6e:	e166      	b.n	800fd3e <draw_buf_rotate+0x326>
    }
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	7c1b      	ldrb	r3, [r3, #16]
 800fa74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	2b10      	cmp	r3, #16
 800fa7c:	d007      	beq.n	800fa8e <draw_buf_rotate+0x76>
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	7c1b      	ldrb	r3, [r3, #16]
 800fa82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b30      	cmp	r3, #48	; 0x30
 800fa8a:	f040 8158 	bne.w	800fd3e <draw_buf_rotate+0x326>
        /*Allocate a temporary buffer to store rotated image*/
        lv_color_t * rot_buf = NULL;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	61fb      	str	r3, [r7, #28]
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800fa92:	4b72      	ldr	r3, [pc, #456]	; (800fc5c <draw_buf_rotate+0x244>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f010 f996 	bl	801fdc8 <lv_disp_get_draw_buf>
 800fa9c:	6138      	str	r0, [r7, #16]
        lv_coord_t area_w = lv_area_get_width(area);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f7fe fbba 	bl	800e218 <lv_area_get_width>
 800faa4:	4603      	mov	r3, r0
 800faa6:	81fb      	strh	r3, [r7, #14]
        lv_coord_t area_h = lv_area_get_height(area);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f7fe fbcc 	bl	800e246 <lv_area_get_height>
 800faae:	4603      	mov	r3, r0
 800fab0:	81bb      	strh	r3, [r7, #12]
        /*Determine the maximum number of rows that can be rotated at a time*/
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800fab2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fab6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800faba:	fbb2 f3f3 	udiv	r3, r2, r3
 800fabe:	b21b      	sxth	r3, r3
 800fac0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fac4:	4293      	cmp	r3, r2
 800fac6:	bfa8      	it	ge
 800fac8:	4613      	movge	r3, r2
 800faca:	817b      	strh	r3, [r7, #10]
        lv_coord_t init_y_off;
        init_y_off = area->y1;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	885b      	ldrh	r3, [r3, #2]
 800fad0:	813b      	strh	r3, [r7, #8]
        if(drv->rotated == LV_DISP_ROT_90) {
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	7c1b      	ldrb	r3, [r3, #16]
 800fad6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	2b10      	cmp	r3, #16
 800fade:	d11b      	bne.n	800fb18 <draw_buf_rotate+0x100>
            area->y2 = drv->ver_res - area->x1 - 1;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fae6:	b29a      	uxth	r2, r3
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800faee:	b29b      	uxth	r3, r3
 800faf0:	1ad3      	subs	r3, r2, r3
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	3b01      	subs	r3, #1
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	b21a      	sxth	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	80da      	strh	r2, [r3, #6]
            area->y1 = area->y2 - area_w + 1;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fb04:	b29a      	uxth	r2, r3
 800fb06:	89fb      	ldrh	r3, [r7, #14]
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	b21a      	sxth	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	805a      	strh	r2, [r3, #2]
 800fb16:	e010      	b.n	800fb3a <draw_buf_rotate+0x122>
        }
        else {
            area->y1 = area->x1;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	805a      	strh	r2, [r3, #2]
            area->y2 = area->y1 + area_w - 1;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	89fb      	ldrh	r3, [r7, #14]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	3b01      	subs	r3, #1
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	b21a      	sxth	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	80da      	strh	r2, [r3, #6]
        }

        /*Rotate the screen in chunks, flushing after each one*/
        lv_coord_t row = 0;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800fb3e:	e0ef      	b.n	800fd20 <draw_buf_rotate+0x308>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800fb40:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fb44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fb48:	1ad2      	subs	r2, r2, r3
 800fb4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	bfa8      	it	ge
 800fb52:	4613      	movge	r3, r2
 800fb54:	833b      	strh	r3, [r7, #24]
            draw_buf->flushing = 1;
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	611a      	str	r2, [r3, #16]
            if((row == 0) && (area_h >= area_w)) {
 800fb5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d144      	bne.n	800fbee <draw_buf_rotate+0x1d6>
 800fb64:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fb68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	db3e      	blt.n	800fbee <draw_buf_rotate+0x1d6>
                /*Rotate the initial area as a square*/
                height = area_w;
 800fb70:	89fb      	ldrh	r3, [r7, #14]
 800fb72:	833b      	strh	r3, [r7, #24]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	7c1b      	ldrb	r3, [r3, #16]
 800fb78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b30      	cmp	r3, #48	; 0x30
 800fb80:	bf0c      	ite	eq
 800fb82:	2301      	moveq	r3, #1
 800fb84:	2300      	movne	r3, #0
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff fe93 	bl	800f8ba <draw_buf_rotate_90_sqr>
                if(drv->rotated == LV_DISP_ROT_90) {
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	7c1b      	ldrb	r3, [r3, #16]
 800fb98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	2b10      	cmp	r3, #16
 800fba0:	d10c      	bne.n	800fbbc <draw_buf_rotate+0x1a4>
                    area->x1 = init_y_off;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	893a      	ldrh	r2, [r7, #8]
 800fba6:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800fba8:	893a      	ldrh	r2, [r7, #8]
 800fbaa:	89fb      	ldrh	r3, [r7, #14]
 800fbac:	4413      	add	r3, r2
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	b21a      	sxth	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	809a      	strh	r2, [r3, #4]
                if(drv->rotated == LV_DISP_ROT_90) {
 800fbba:	e06c      	b.n	800fc96 <draw_buf_rotate+0x27e>
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	893b      	ldrh	r3, [r7, #8]
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	b21a      	sxth	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - area_w + 1;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fbda:	b29a      	uxth	r2, r3
 800fbdc:	89fb      	ldrh	r3, [r7, #14]
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	b21a      	sxth	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	801a      	strh	r2, [r3, #0]
                if(drv->rotated == LV_DISP_ROT_90) {
 800fbec:	e053      	b.n	800fc96 <draw_buf_rotate+0x27e>
                }
            }
            else {
                /*Rotate other areas using a maximum buffer size*/
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d104      	bne.n	800fbfe <draw_buf_rotate+0x1e6>
 800fbf4:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800fbf8:	f012 f90c 	bl	8021e14 <lv_mem_buf_get>
 800fbfc:	61f8      	str	r0, [r7, #28]
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	7c1b      	ldrb	r3, [r3, #16]
 800fc02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	2b30      	cmp	r3, #48	; 0x30
 800fc0a:	bf0c      	ite	eq
 800fc0c:	2301      	moveq	r3, #1
 800fc0e:	2300      	movne	r3, #0
 800fc10:	b2d8      	uxtb	r0, r3
 800fc12:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800fc16:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	f7ff fdcb 	bl	800f7ba <draw_buf_rotate_90>

                if(drv->rotated == LV_DISP_ROT_90) {
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	7c1b      	ldrb	r3, [r3, #16]
 800fc28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	2b10      	cmp	r3, #16
 800fc30:	d116      	bne.n	800fc60 <draw_buf_rotate+0x248>
                    area->x1 = init_y_off + row;
 800fc32:	893a      	ldrh	r2, [r7, #8]
 800fc34:	8b7b      	ldrh	r3, [r7, #26]
 800fc36:	4413      	add	r3, r2
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	b21a      	sxth	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + row + height - 1;
 800fc40:	893a      	ldrh	r2, [r7, #8]
 800fc42:	8b7b      	ldrh	r3, [r7, #26]
 800fc44:	4413      	add	r3, r2
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	8b3b      	ldrh	r3, [r7, #24]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	b21a      	sxth	r2, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	809a      	strh	r2, [r3, #4]
 800fc58:	e01d      	b.n	800fc96 <draw_buf_rotate+0x27e>
 800fc5a:	bf00      	nop
 800fc5c:	20000710 	.word	0x20000710
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc66:	b29a      	uxth	r2, r3
 800fc68:	893b      	ldrh	r3, [r7, #8]
 800fc6a:	1ad3      	subs	r3, r2, r3
 800fc6c:	b29a      	uxth	r2, r3
 800fc6e:	8b7b      	ldrh	r3, [r7, #26]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	3b01      	subs	r3, #1
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	b21a      	sxth	r2, r3
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - height + 1;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	8b3b      	ldrh	r3, [r7, #24]
 800fc88:	1ad3      	subs	r3, r2, r3
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	b21a      	sxth	r2, r3
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	801a      	strh	r2, [r3, #0]
                }
            }

            /* The original part (chunk of the current area) were split into more parts here.
             * Set the original last_part flag on the last part of rotation. */
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800fc96:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fc9a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800fc9e:	441a      	add	r2, r3
 800fca0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	db11      	blt.n	800fccc <draw_buf_rotate+0x2b4>
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	699b      	ldr	r3, [r3, #24]
 800fcac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00a      	beq.n	800fccc <draw_buf_rotate+0x2b4>
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	699b      	ldr	r3, [r3, #24]
 800fcba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d003      	beq.n	800fccc <draw_buf_rotate+0x2b4>
                draw_buf->flushing_last = 1;
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	615a      	str	r2, [r3, #20]
 800fcca:	e002      	b.n	800fcd2 <draw_buf_rotate+0x2ba>
            }
            else {
                draw_buf->flushing_last = 0;
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	615a      	str	r2, [r3, #20]
            }

            /*Flush the completed area to the display*/
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d101      	bne.n	800fcdc <draw_buf_rotate+0x2c4>
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	e000      	b.n	800fcde <draw_buf_rotate+0x2c6>
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	461a      	mov	r2, r3
 800fce0:	6879      	ldr	r1, [r7, #4]
 800fce2:	6978      	ldr	r0, [r7, #20]
 800fce4:	f000 f8ee 	bl	800fec4 <call_flush_cb>
            /*FIXME: Rotation forces legacy behavior where rendering and flushing are done serially*/
            while(draw_buf->flushing) {
 800fce8:	e007      	b.n	800fcfa <draw_buf_rotate+0x2e2>
                if(drv->wait_cb) drv->wait_cb(drv);
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d003      	beq.n	800fcfa <draw_buf_rotate+0x2e2>
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcf6:	6978      	ldr	r0, [r7, #20]
 800fcf8:	4798      	blx	r3
            while(draw_buf->flushing) {
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	691b      	ldr	r3, [r3, #16]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d1f3      	bne.n	800fcea <draw_buf_rotate+0x2d2>
            }
            color_p += area_w * height;
 800fd02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fd06:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800fd0a:	fb02 f303 	mul.w	r3, r2, r3
 800fd0e:	461a      	mov	r2, r3
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	4413      	add	r3, r2
 800fd14:	603b      	str	r3, [r7, #0]
            row += height;
 800fd16:	8b7a      	ldrh	r2, [r7, #26]
 800fd18:	8b3b      	ldrh	r3, [r7, #24]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800fd20:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fd24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	f6ff af09 	blt.w	800fb40 <draw_buf_rotate+0x128>
        }
        /*Free the allocated buffer at the end if necessary*/
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d004      	beq.n	800fd3e <draw_buf_rotate+0x326>
 800fd34:	69f8      	ldr	r0, [r7, #28]
 800fd36:	f012 f919 	bl	8021f6c <lv_mem_buf_release>
 800fd3a:	e000      	b.n	800fd3e <draw_buf_rotate+0x326>
        return;
 800fd3c:	bf00      	nop
    }
}
 800fd3e:	3720      	adds	r7, #32
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800fd4c:	4b5c      	ldr	r3, [pc, #368]	; (800fec0 <draw_buf_flush+0x17c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4618      	mov	r0, r3
 800fd52:	f010 f839 	bl	801fdc8 <lv_disp_get_draw_buf>
 800fd56:	6178      	str	r0, [r7, #20]

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd5e:	613b      	str	r3, [r7, #16]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d003      	beq.n	800fd70 <draw_buf_flush+0x2c>
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd6c:	6938      	ldr	r0, [r7, #16]
 800fd6e:	4798      	blx	r3

    /* In partial double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	68da      	ldr	r2, [r3, #12]
 800fd74:	4b52      	ldr	r3, [pc, #328]	; (800fec0 <draw_buf_flush+0x17c>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd7e:	4619      	mov	r1, r3
 800fd80:	4b4f      	ldr	r3, [pc, #316]	; (800fec0 <draw_buf_flush+0x17c>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fd8a:	fb01 f303 	mul.w	r3, r1, r3
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	bf0c      	ite	eq
 800fd92:	2301      	moveq	r3, #1
 800fd94:	2300      	movne	r3, #0
 800fd96:	73fb      	strb	r3, [r7, #15]
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d01d      	beq.n	800fddc <draw_buf_flush+0x98>
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d019      	beq.n	800fddc <draw_buf_flush+0x98>
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
 800fdaa:	f083 0301 	eor.w	r3, r3, #1
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d013      	beq.n	800fddc <draw_buf_flush+0x98>
        while(draw_buf->flushing) {
 800fdb4:	e00e      	b.n	800fdd4 <draw_buf_flush+0x90>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800fdb6:	4b42      	ldr	r3, [pc, #264]	; (800fec0 <draw_buf_flush+0x17c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d008      	beq.n	800fdd4 <draw_buf_flush+0x90>
 800fdc2:	4b3f      	ldr	r3, [pc, #252]	; (800fec0 <draw_buf_flush+0x17c>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdca:	4a3d      	ldr	r2, [pc, #244]	; (800fec0 <draw_buf_flush+0x17c>)
 800fdcc:	6812      	ldr	r2, [r2, #0]
 800fdce:	6812      	ldr	r2, [r2, #0]
 800fdd0:	4610      	mov	r0, r2
 800fdd2:	4798      	blx	r3
        while(draw_buf->flushing) {
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	691b      	ldr	r3, [r3, #16]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d1ec      	bne.n	800fdb6 <draw_buf_flush+0x72>
        }
    }

    draw_buf->flushing = 1;
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	2201      	movs	r2, #1
 800fde0:	611a      	str	r2, [r3, #16]

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800fde2:	4b37      	ldr	r3, [pc, #220]	; (800fec0 <draw_buf_flush+0x17c>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	699b      	ldr	r3, [r3, #24]
 800fdec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d00d      	beq.n	800fe12 <draw_buf_flush+0xce>
 800fdf6:	4b32      	ldr	r3, [pc, #200]	; (800fec0 <draw_buf_flush+0x17c>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	699b      	ldr	r3, [r3, #24]
 800fe00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fe04:	b2db      	uxtb	r3, r3
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d003      	beq.n	800fe12 <draw_buf_flush+0xce>
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	615a      	str	r2, [r3, #20]
 800fe10:	e002      	b.n	800fe18 <draw_buf_flush+0xd4>
    else draw_buf->flushing_last = 0;
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	2200      	movs	r2, #0
 800fe16:	615a      	str	r2, [r3, #20]

    bool flushing_last = draw_buf->flushing_last;
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	695b      	ldr	r3, [r3, #20]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	bf14      	ite	ne
 800fe20:	2301      	movne	r3, #1
 800fe22:	2300      	moveq	r3, #0
 800fe24:	73bb      	strb	r3, [r7, #14]

    if(disp->driver->flush_cb) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	695b      	ldr	r3, [r3, #20]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d021      	beq.n	800fe74 <draw_buf_flush+0x130>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	7c1b      	ldrb	r3, [r3, #16]
 800fe36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d010      	beq.n	800fe62 <draw_buf_flush+0x11e>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	7c1b      	ldrb	r3, [r3, #16]
 800fe46:	f003 0304 	and.w	r3, r3, #4
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d008      	beq.n	800fe62 <draw_buf_flush+0x11e>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	685a      	ldr	r2, [r3, #4]
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4619      	mov	r1, r3
 800fe5a:	4610      	mov	r0, r2
 800fe5c:	f7ff fddc 	bl	800fa18 <draw_buf_rotate>
 800fe60:	e008      	b.n	800fe74 <draw_buf_flush+0x130>
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6818      	ldr	r0, [r3, #0]
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	6859      	ldr	r1, [r3, #4]
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	461a      	mov	r2, r3
 800fe70:	f000 f828 	bl	800fec4 <call_flush_cb>
        }
    }

    /*If there are 2 buffers swap them. With direct mode swap only on the last area*/
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d01d      	beq.n	800feb8 <draw_buf_flush+0x174>
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d019      	beq.n	800feb8 <draw_buf_flush+0x174>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	7c1b      	ldrb	r3, [r3, #16]
 800fe8a:	f003 0301 	and.w	r3, r3, #1
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d002      	beq.n	800fe9a <draw_buf_flush+0x156>
 800fe94:	7bbb      	ldrb	r3, [r7, #14]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00e      	beq.n	800feb8 <draw_buf_flush+0x174>
        if(draw_buf->buf_act == draw_buf->buf1)
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	689a      	ldr	r2, [r3, #8]
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d104      	bne.n	800feb0 <draw_buf_flush+0x16c>
            draw_buf->buf_act = draw_buf->buf2;
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	685a      	ldr	r2, [r3, #4]
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	609a      	str	r2, [r3, #8]
        else
            draw_buf->buf_act = draw_buf->buf1;
    }
}
 800feae:	e003      	b.n	800feb8 <draw_buf_flush+0x174>
            draw_buf->buf_act = draw_buf->buf1;
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	609a      	str	r2, [r3, #8]
}
 800feb8:	bf00      	nop
 800feba:	3718      	adds	r7, #24
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20000710 	.word	0x20000710

0800fec4 <call_flush_cb>:

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	607a      	str	r2, [r7, #4]
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fede:	b29b      	uxth	r3, r3
 800fee0:	4413      	add	r3, r2
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800fee6:	823b      	strh	r3, [r7, #16]
        .y1 = area->y1 + drv->offset_y,
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800feee:	b29a      	uxth	r2, r3
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	4413      	add	r3, r2
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800fefe:	827b      	strh	r3, [r7, #18]
        .x2 = area->x2 + drv->offset_x,
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	4413      	add	r3, r2
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ff16:	82bb      	strh	r3, [r7, #20]
        .y2 = area->y2 + drv->offset_y
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	4413      	add	r3, r2
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ff2e:	82fb      	strh	r3, [r7, #22]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	695b      	ldr	r3, [r3, #20]
 800ff34:	f107 0110 	add.w	r1, r7, #16
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	4798      	blx	r3
}
 800ff3e:	bf00      	nop
 800ff40:	3718      	adds	r7, #24
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
	...

0800ff48 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800ff50:	4a04      	ldr	r2, [pc, #16]	; (800ff64 <lv_obj_remove_style_all+0x1c>)
 800ff52:	2100      	movs	r1, #0
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7fc fafb 	bl	800c550 <lv_obj_remove_style>
}
 800ff5a:	bf00      	nop
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	000fffff 	.word	0x000fffff

0800ff68 <lv_theme_get_from_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_theme_t  * lv_theme_get_from_obj(lv_obj_t * obj)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d004      	beq.n	800ff80 <lv_theme_get_from_obj+0x18>
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7fd ff8c 	bl	800de94 <lv_obj_get_disp>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	e002      	b.n	800ff86 <lv_theme_get_from_obj+0x1e>
 800ff80:	f00f fe9e 	bl	801fcc0 <lv_disp_get_default>
 800ff84:	4603      	mov	r3, r0
 800ff86:	60fb      	str	r3, [r7, #12]
    return lv_disp_get_theme(disp);
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f7f4 fa13 	bl	80043b4 <lv_disp_get_theme>
 800ff8e:	4603      	mov	r3, r0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7ff ffe1 	bl	800ff68 <lv_theme_get_from_obj>
 800ffa6:	60f8      	str	r0, [r7, #12]
    if(th == NULL) return;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d007      	beq.n	800ffbe <lv_theme_apply+0x26>

    lv_obj_remove_style_all(obj);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7ff ffca 	bl	800ff48 <lv_obj_remove_style_all>

    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800ffb4:	6879      	ldr	r1, [r7, #4]
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f000 f805 	bl	800ffc6 <apply_theme>
 800ffbc:	e000      	b.n	800ffc0 <lv_theme_apply+0x28>
    if(th == NULL) return;
 800ffbe:	bf00      	nop
}
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b082      	sub	sp, #8
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
    if(th->parent) apply_theme(th->parent, obj);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <apply_theme+0x1e>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	6839      	ldr	r1, [r7, #0]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7ff fff1 	bl	800ffc6 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d004      	beq.n	800fff6 <apply_theme+0x30>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	6839      	ldr	r1, [r7, #0]
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	4798      	blx	r3
}
 800fff6:	bf00      	nop
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <lv_draw_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_init(void)
{
 800fffe:	b480      	push	{r7}
 8010000:	af00      	add	r7, sp, #0
    /*Nothing to init now*/
}
 8010002:	bf00      	nop
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010018:	2b00      	cmp	r3, #0
 801001a:	d003      	beq.n	8010024 <lv_draw_wait_for_finish+0x18>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	4798      	blx	r3
}
 8010024:	bf00      	nop
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	4603      	mov	r3, r0
 8010034:	71fb      	strb	r3, [r7, #7]
 8010036:	460b      	mov	r3, r1
 8010038:	71bb      	strb	r3, [r7, #6]
 801003a:	4613      	mov	r3, r2
 801003c:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801003e:	797b      	ldrb	r3, [r7, #5]
 8010040:	09db      	lsrs	r3, r3, #7
 8010042:	b2da      	uxtb	r2, r3
 8010044:	79bb      	ldrb	r3, [r7, #6]
 8010046:	09db      	lsrs	r3, r3, #7
 8010048:	b2db      	uxtb	r3, r3
 801004a:	4313      	orrs	r3, r2
 801004c:	b2da      	uxtb	r2, r3
 801004e:	79fb      	ldrb	r3, [r7, #7]
 8010050:	09db      	lsrs	r3, r3, #7
 8010052:	b2db      	uxtb	r3, r3
 8010054:	4313      	orrs	r3, r2
 8010056:	b2db      	uxtb	r3, r3
}
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8010068:	22ff      	movs	r2, #255	; 0xff
 801006a:	21ff      	movs	r1, #255	; 0xff
 801006c:	20ff      	movs	r0, #255	; 0xff
 801006e:	f7ff ffdd 	bl	801002c <lv_color_make>
 8010072:	4603      	mov	r3, r0
}
 8010074:	4618      	mov	r0, r3
 8010076:	bd80      	pop	{r7, pc}

08010078 <lv_color_black>:
static inline lv_color_t lv_color_black(void)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801007c:	2200      	movs	r2, #0
 801007e:	2100      	movs	r1, #0
 8010080:	2000      	movs	r0, #0
 8010082:	f7ff ffd3 	bl	801002c <lv_color_make>
 8010086:	4603      	mov	r3, r0
}
 8010088:	4618      	mov	r0, r3
 801008a:	bd80      	pop	{r7, pc}

0801008c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801008c:	b480      	push	{r7}
 801008e:	b083      	sub	sp, #12
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	f9b3 2000 	ldrsh.w	r2, [r3]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	80da      	strh	r2, [r3, #6]
}
 80100be:	bf00      	nop
 80100c0:	370c      	adds	r7, #12
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr

080100ca <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80100ca:	b480      	push	{r7}
 80100cc:	b083      	sub	sp, #12
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80100d8:	b29a      	uxth	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	3301      	adds	r3, #1
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	b21b      	sxth	r3, r3
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010106:	b29a      	uxth	r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801010e:	b29b      	uxth	r3, r3
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	b29b      	uxth	r3, r3
 8010114:	3301      	adds	r3, #1
 8010116:	b29b      	uxth	r3, r3
 8010118:	b21b      	sxth	r3, r3
}
 801011a:	4618      	mov	r0, r3
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr

08010126 <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 8010126:	b590      	push	{r4, r7, lr}
 8010128:	b083      	sub	sp, #12
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 801012e:	2114      	movs	r1, #20
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f012 fa19 	bl	8022568 <lv_memset_00>
    dsc->recolor = lv_color_black();
 8010136:	687c      	ldr	r4, [r7, #4]
 8010138:	f7ff ff9e 	bl	8010078 <lv_color_black>
 801013c:	7220      	strb	r0, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	22ff      	movs	r2, #255	; 0xff
 8010142:	729a      	strb	r2, [r3, #10]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f44f 7280 	mov.w	r2, #256	; 0x100
 801014a:	805a      	strh	r2, [r3, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	7c13      	ldrb	r3, [r2, #16]
 8010150:	f36f 0300 	bfc	r3, #0, #1
 8010154:	7413      	strb	r3, [r2, #16]
}
 8010156:	bf00      	nop
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	bd90      	pop	{r4, r7, pc}
	...

08010160 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc, const lv_area_t * coords, const void * src)
{
 8010160:	b590      	push	{r4, r7, lr}
 8010162:	b087      	sub	sp, #28
 8010164:	af00      	add	r7, sp, #0
 8010166:	60f8      	str	r0, [r7, #12]
 8010168:	60b9      	str	r1, [r7, #8]
 801016a:	607a      	str	r2, [r7, #4]
 801016c:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d105      	bne.n	8010180 <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(draw_ctx, coords, "No\ndata");
 8010174:	4a16      	ldr	r2, [pc, #88]	; (80101d0 <lv_draw_img+0x70>)
 8010176:	6879      	ldr	r1, [r7, #4]
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f000 fab3 	bl	80106e4 <show_error>
        return;
 801017e:	e023      	b.n	80101c8 <lv_draw_img+0x68>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	7a9b      	ldrb	r3, [r3, #10]
 8010184:	2b02      	cmp	r3, #2
 8010186:	d91e      	bls.n	80101c6 <lv_draw_img+0x66>

    lv_res_t res;
    if(draw_ctx->draw_img) {
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	699b      	ldr	r3, [r3, #24]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d009      	beq.n	80101a4 <lv_draw_img+0x44>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	699c      	ldr	r4, [r3, #24]
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	687a      	ldr	r2, [r7, #4]
 8010198:	68b9      	ldr	r1, [r7, #8]
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	47a0      	blx	r4
 801019e:	4603      	mov	r3, r0
 80101a0:	75fb      	strb	r3, [r7, #23]
 80101a2:	e007      	b.n	80101b4 <lv_draw_img+0x54>
    }
    else {
        res = decode_and_draw(draw_ctx, dsc, coords, src);
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	68b9      	ldr	r1, [r7, #8]
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f000 f8e3 	bl	8010376 <decode_and_draw>
 80101b0:	4603      	mov	r3, r0
 80101b2:	75fb      	strb	r3, [r7, #23]
    }

    if(res == LV_RES_INV) {
 80101b4:	7dfb      	ldrb	r3, [r7, #23]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d106      	bne.n	80101c8 <lv_draw_img+0x68>
        LV_LOG_WARN("Image draw error");
        show_error(draw_ctx, coords, "No\ndata");
 80101ba:	4a05      	ldr	r2, [pc, #20]	; (80101d0 <lv_draw_img+0x70>)
 80101bc:	6879      	ldr	r1, [r7, #4]
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f000 fa90 	bl	80106e4 <show_error>
        return;
 80101c4:	e000      	b.n	80101c8 <lv_draw_img+0x68>
    if(dsc->opa <= LV_OPA_MIN) return;
 80101c6:	bf00      	nop
    }
}
 80101c8:	371c      	adds	r7, #28
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd90      	pop	{r4, r7, pc}
 80101ce:	bf00      	nop
 80101d0:	080266f0 	.word	0x080266f0

080101d4 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	4603      	mov	r3, r0
 80101dc:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 80101de:	2300      	movs	r3, #0
 80101e0:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 80101e2:	79fb      	ldrb	r3, [r7, #7]
 80101e4:	2b0e      	cmp	r3, #14
 80101e6:	d836      	bhi.n	8010256 <lv_img_cf_get_px_size+0x82>
 80101e8:	a201      	add	r2, pc, #4	; (adr r2, 80101f0 <lv_img_cf_get_px_size+0x1c>)
 80101ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ee:	bf00      	nop
 80101f0:	0801022d 	.word	0x0801022d
 80101f4:	0801022d 	.word	0x0801022d
 80101f8:	08010257 	.word	0x08010257
 80101fc:	08010257 	.word	0x08010257
 8010200:	08010233 	.word	0x08010233
 8010204:	08010239 	.word	0x08010239
 8010208:	08010233 	.word	0x08010233
 801020c:	0801023f 	.word	0x0801023f
 8010210:	08010245 	.word	0x08010245
 8010214:	0801024b 	.word	0x0801024b
 8010218:	08010251 	.word	0x08010251
 801021c:	0801023f 	.word	0x0801023f
 8010220:	08010245 	.word	0x08010245
 8010224:	0801024b 	.word	0x0801024b
 8010228:	08010251 	.word	0x08010251
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 801022c:	2300      	movs	r3, #0
 801022e:	73fb      	strb	r3, [r7, #15]
            break;
 8010230:	e014      	b.n	801025c <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 8010232:	2308      	movs	r3, #8
 8010234:	73fb      	strb	r3, [r7, #15]
            break;
 8010236:	e011      	b.n	801025c <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 8010238:	2310      	movs	r3, #16
 801023a:	73fb      	strb	r3, [r7, #15]
            break;
 801023c:	e00e      	b.n	801025c <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 801023e:	2301      	movs	r3, #1
 8010240:	73fb      	strb	r3, [r7, #15]
            break;
 8010242:	e00b      	b.n	801025c <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 8010244:	2302      	movs	r3, #2
 8010246:	73fb      	strb	r3, [r7, #15]
            break;
 8010248:	e008      	b.n	801025c <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 801024a:	2304      	movs	r3, #4
 801024c:	73fb      	strb	r3, [r7, #15]
            break;
 801024e:	e005      	b.n	801025c <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 8010250:	2308      	movs	r3, #8
 8010252:	73fb      	strb	r3, [r7, #15]
            break;
 8010254:	e002      	b.n	801025c <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	73fb      	strb	r3, [r7, #15]
            break;
 801025a:	bf00      	nop
    }

    return px_size;
 801025c:	7bfb      	ldrb	r3, [r7, #15]
}
 801025e:	4618      	mov	r0, r3
 8010260:	3714      	adds	r7, #20
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop

0801026c <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 801026c:	b480      	push	{r7}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
 8010272:	4603      	mov	r3, r0
 8010274:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 8010276:	2300      	movs	r3, #0
 8010278:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	2b03      	cmp	r3, #3
 801027e:	d001      	beq.n	8010284 <lv_img_cf_is_chroma_keyed+0x18>
 8010280:	2b06      	cmp	r3, #6
 8010282:	d102      	bne.n	801028a <lv_img_cf_is_chroma_keyed+0x1e>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
            is_chroma_keyed = true;
 8010284:	2301      	movs	r3, #1
 8010286:	73fb      	strb	r3, [r7, #15]
            break;
 8010288:	e002      	b.n	8010290 <lv_img_cf_is_chroma_keyed+0x24>

        default:
            is_chroma_keyed = false;
 801028a:	2300      	movs	r3, #0
 801028c:	73fb      	strb	r3, [r7, #15]
            break;
 801028e:	bf00      	nop
    }

    return is_chroma_keyed;
 8010290:	7bfb      	ldrb	r3, [r7, #15]
}
 8010292:	4618      	mov	r0, r3
 8010294:	3714      	adds	r7, #20
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr

0801029e <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 801029e:	b480      	push	{r7}
 80102a0:	b085      	sub	sp, #20
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	4603      	mov	r3, r0
 80102a6:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 80102a8:	2300      	movs	r3, #0
 80102aa:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 80102ac:	79fb      	ldrb	r3, [r7, #7]
 80102ae:	2b0e      	cmp	r3, #14
 80102b0:	bf8c      	ite	hi
 80102b2:	2201      	movhi	r2, #1
 80102b4:	2200      	movls	r2, #0
 80102b6:	b2d2      	uxtb	r2, r2
 80102b8:	2a00      	cmp	r2, #0
 80102ba:	d10e      	bne.n	80102da <lv_img_cf_has_alpha+0x3c>
 80102bc:	2201      	movs	r2, #1
 80102be:	409a      	lsls	r2, r3
 80102c0:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 80102c4:	4013      	ands	r3, r2
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	bf14      	ite	ne
 80102ca:	2301      	movne	r3, #1
 80102cc:	2300      	moveq	r3, #0
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <lv_img_cf_has_alpha+0x3c>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 80102d4:	2301      	movs	r3, #1
 80102d6:	73fb      	strb	r3, [r7, #15]
            break;
 80102d8:	e002      	b.n	80102e0 <lv_img_cf_has_alpha+0x42>
        default:
            has_alpha = false;
 80102da:	2300      	movs	r3, #0
 80102dc:	73fb      	strb	r3, [r7, #15]
            break;
 80102de:	bf00      	nop
    }

    return has_alpha;
 80102e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3714      	adds	r7, #20
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 80102ee:	b480      	push	{r7}
 80102f0:	b085      	sub	sp, #20
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 80102f6:	2303      	movs	r3, #3
 80102f8:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <lv_img_src_get_type+0x16>
 8010300:	7bfb      	ldrb	r3, [r7, #15]
 8010302:	e018      	b.n	8010336 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	2b1f      	cmp	r3, #31
 801030e:	d907      	bls.n	8010320 <lv_img_src_get_type+0x32>
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	b25b      	sxtb	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	db02      	blt.n	8010320 <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 801031a:	2301      	movs	r3, #1
 801031c:	73fb      	strb	r3, [r7, #15]
 801031e:	e009      	b.n	8010334 <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	b25b      	sxtb	r3, r3
 8010326:	2b00      	cmp	r3, #0
 8010328:	da02      	bge.n	8010330 <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 801032a:	2302      	movs	r3, #2
 801032c:	73fb      	strb	r3, [r7, #15]
 801032e:	e001      	b.n	8010334 <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 8010330:	2300      	movs	r3, #0
 8010332:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 8010334:	7bfb      	ldrb	r3, [r7, #15]
}
 8010336:	4618      	mov	r0, r3
 8010338:	3714      	adds	r7, #20
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr

08010342 <lv_draw_img_decoded>:

void lv_draw_img_decoded(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc,
                         const lv_area_t * coords, const uint8_t * map_p, lv_img_cf_t color_format)
{
 8010342:	b590      	push	{r4, r7, lr}
 8010344:	b087      	sub	sp, #28
 8010346:	af02      	add	r7, sp, #8
 8010348:	60f8      	str	r0, [r7, #12]
 801034a:	60b9      	str	r1, [r7, #8]
 801034c:	607a      	str	r2, [r7, #4]
 801034e:	603b      	str	r3, [r7, #0]
    if(draw_ctx->draw_img_decoded == NULL) return;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	695b      	ldr	r3, [r3, #20]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00a      	beq.n	801036e <lv_draw_img_decoded+0x2c>

    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	695c      	ldr	r4, [r3, #20]
 801035c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010360:	9300      	str	r3, [sp, #0]
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	68b9      	ldr	r1, [r7, #8]
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	47a0      	blx	r4
 801036c:	e000      	b.n	8010370 <lv_draw_img_decoded+0x2e>
    if(draw_ctx->draw_img_decoded == NULL) return;
 801036e:	bf00      	nop
}
 8010370:	3714      	adds	r7, #20
 8010372:	46bd      	mov	sp, r7
 8010374:	bd90      	pop	{r4, r7, pc}

08010376 <decode_and_draw>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
 8010376:	b5b0      	push	{r4, r5, r7, lr}
 8010378:	b09e      	sub	sp, #120	; 0x78
 801037a:	af02      	add	r7, sp, #8
 801037c:	60f8      	str	r0, [r7, #12]
 801037e:	60b9      	str	r1, [r7, #8]
 8010380:	607a      	str	r2, [r7, #4]
 8010382:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	7a9b      	ldrb	r3, [r3, #10]
 8010388:	2b02      	cmp	r3, #2
 801038a:	d801      	bhi.n	8010390 <decode_and_draw+0x1a>
 801038c:	2301      	movs	r3, #1
 801038e:	e1a5      	b.n	80106dc <decode_and_draw+0x366>

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	68da      	ldr	r2, [r3, #12]
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	7a19      	ldrb	r1, [r3, #8]
 8010398:	6838      	ldr	r0, [r7, #0]
 801039a:	f003 ff6b 	bl	8014274 <_lv_img_cache_open>
 801039e:	6638      	str	r0, [r7, #96]	; 0x60

    if(cdsc == NULL) return LV_RES_INV;
 80103a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d101      	bne.n	80103aa <decode_and_draw+0x34>
 80103a6:	2300      	movs	r3, #0
 80103a8:	e198      	b.n	80106dc <decode_and_draw+0x366>

    lv_img_cf_t cf;
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 80103aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103ac:	7d1b      	ldrb	r3, [r3, #20]
 80103ae:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff ff59 	bl	801026c <lv_img_cf_is_chroma_keyed>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d003      	beq.n	80103c8 <decode_and_draw+0x52>
 80103c0:	2306      	movs	r3, #6
 80103c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80103c6:	e027      	b.n	8010418 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 80103c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103ca:	7d1b      	ldrb	r3, [r3, #20]
 80103cc:	f003 031f 	and.w	r3, r3, #31
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b0e      	cmp	r3, #14
 80103d4:	d103      	bne.n	80103de <decode_and_draw+0x68>
 80103d6:	230e      	movs	r3, #14
 80103d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80103dc:	e01c      	b.n	8010418 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 80103de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103e0:	7d1b      	ldrb	r3, [r3, #20]
 80103e2:	f003 031f 	and.w	r3, r3, #31
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	2b14      	cmp	r3, #20
 80103ea:	d103      	bne.n	80103f4 <decode_and_draw+0x7e>
 80103ec:	2314      	movs	r3, #20
 80103ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80103f2:	e011      	b.n	8010418 <decode_and_draw+0xa2>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 80103f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103f6:	7d1b      	ldrb	r3, [r3, #20]
 80103f8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff ff4d 	bl	801029e <lv_img_cf_has_alpha>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d003      	beq.n	8010412 <decode_and_draw+0x9c>
 801040a:	2305      	movs	r3, #5
 801040c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010410:	e002      	b.n	8010418 <decode_and_draw+0xa2>
    else cf = LV_IMG_CF_TRUE_COLOR;
 8010412:	2304      	movs	r3, #4
 8010414:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if(cf == LV_IMG_CF_ALPHA_8BIT) {
 8010418:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801041c:	2b0e      	cmp	r3, #14
 801041e:	d10f      	bne.n	8010440 <decode_and_draw+0xca>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d104      	bne.n	8010434 <decode_and_draw+0xbe>
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	885b      	ldrh	r3, [r3, #2]
 801042e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010432:	d005      	beq.n	8010440 <decode_and_draw+0xca>
            /* resume normal method */
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8010434:	2305      	movs	r3, #5
 8010436:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            cdsc->dec_dsc.img_data = NULL;
 801043a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801043c:	2200      	movs	r2, #0
 801043e:	619a      	str	r2, [r3, #24]
        }
    }

    if(cdsc->dec_dsc.error_msg != NULL) {
 8010440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010442:	6a1b      	ldr	r3, [r3, #32]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d007      	beq.n	8010458 <decode_and_draw+0xe2>
        LV_LOG_WARN("Image draw error");

        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 8010448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801044a:	6a1b      	ldr	r3, [r3, #32]
 801044c:	461a      	mov	r2, r3
 801044e:	6879      	ldr	r1, [r7, #4]
 8010450:	68f8      	ldr	r0, [r7, #12]
 8010452:	f000 f947 	bl	80106e4 <show_error>
 8010456:	e13d      	b.n	80106d4 <decode_and_draw+0x35e>
    }
    /*The decoder could open the image and gave the entire uncompressed image.
     *Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 8010458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801045a:	699b      	ldr	r3, [r3, #24]
 801045c:	2b00      	cmp	r3, #0
 801045e:	f000 8087 	beq.w	8010570 <decode_and_draw+0x1fa>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 8010462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010466:	6879      	ldr	r1, [r7, #4]
 8010468:	4618      	mov	r0, r3
 801046a:	f7ff fe0f 	bl	801008c <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d104      	bne.n	8010482 <decode_and_draw+0x10c>
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	885b      	ldrh	r3, [r3, #2]
 801047c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010480:	d048      	beq.n	8010514 <decode_and_draw+0x19e>
            int32_t w = lv_area_get_width(coords);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff fe21 	bl	80100ca <lv_area_get_width>
 8010488:	4603      	mov	r3, r0
 801048a:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f7ff fe33 	bl	80100f8 <lv_area_get_height>
 8010492:	4603      	mov	r3, r0
 8010494:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8010496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010498:	b219      	sxth	r1, r3
 801049a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801049c:	b21c      	sxth	r4, r3
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	885b      	ldrh	r3, [r3, #2]
 80104a8:	68ba      	ldr	r2, [r7, #8]
 80104aa:	3204      	adds	r2, #4
 80104ac:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80104b0:	9201      	str	r2, [sp, #4]
 80104b2:	9300      	str	r3, [sp, #0]
 80104b4:	462b      	mov	r3, r5
 80104b6:	4622      	mov	r2, r4
 80104b8:	f003 fe13 	bl	80140e2 <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 80104bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	4413      	add	r3, r2
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	b21b      	sxth	r3, r3
 80104d0:	863b      	strh	r3, [r7, #48]	; 0x30
            map_area_rot.y1 += coords->y1;
 80104d2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80104de:	b29b      	uxth	r3, r3
 80104e0:	4413      	add	r3, r2
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	b21b      	sxth	r3, r3
 80104e6:	867b      	strh	r3, [r7, #50]	; 0x32
            map_area_rot.x2 += coords->x1;
 80104e8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	4413      	add	r3, r2
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	b21b      	sxth	r3, r3
 80104fc:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y2 += coords->y1;
 80104fe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010502:	b29a      	uxth	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801050a:	b29b      	uxth	r3, r3
 801050c:	4413      	add	r3, r2
 801050e:	b29b      	uxth	r3, r3
 8010510:	b21b      	sxth	r3, r3
 8010512:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        lv_area_t clip_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6899      	ldr	r1, [r3, #8]
 8010518:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801051c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010520:	4618      	mov	r0, r3
 8010522:	f010 f8cd 	bl	80206c0 <_lv_area_intersect>
 8010526:	4603      	mov	r3, r0
 8010528:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 801052c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010530:	f083 0301 	eor.w	r3, r3, #1
 8010534:	b2db      	uxtb	r3, r3
 8010536:	2b00      	cmp	r3, #0
 8010538:	d004      	beq.n	8010544 <decode_and_draw+0x1ce>
            draw_cleanup(cdsc);
 801053a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801053c:	f000 f8fa 	bl	8010734 <draw_cleanup>
            return LV_RES_OK;
 8010540:	2301      	movs	r3, #1
 8010542:	e0cb      	b.n	80106dc <decode_and_draw+0x366>
        }

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	63bb      	str	r3, [r7, #56]	; 0x38
        draw_ctx->clip_area = &clip_com;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010550:	609a      	str	r2, [r3, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8010552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010554:	699a      	ldr	r2, [r3, #24]
 8010556:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	4613      	mov	r3, r2
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	68b9      	ldr	r1, [r7, #8]
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f7ff feed 	bl	8010342 <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801056c:	609a      	str	r2, [r3, #8]
 801056e:	e0b1      	b.n	80106d4 <decode_and_draw+0x35e>
    }
    /*The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6899      	ldr	r1, [r3, #8]
 8010574:	f107 0320 	add.w	r3, r7, #32
 8010578:	687a      	ldr	r2, [r7, #4]
 801057a:	4618      	mov	r0, r3
 801057c:	f010 f8a0 	bl	80206c0 <_lv_area_intersect>
 8010580:	4603      	mov	r3, r0
 8010582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 8010586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801058a:	f083 0301 	eor.w	r3, r3, #1
 801058e:	b2db      	uxtb	r3, r3
 8010590:	2b00      	cmp	r3, #0
 8010592:	d004      	beq.n	801059e <decode_and_draw+0x228>
            draw_cleanup(cdsc);
 8010594:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010596:	f000 f8cd 	bl	8010734 <draw_cleanup>
            return LV_RES_OK;
 801059a:	2301      	movs	r3, #1
 801059c:	e09e      	b.n	80106dc <decode_and_draw+0x366>
        }

        int32_t width = lv_area_get_width(&mask_com);
 801059e:	f107 0320 	add.w	r3, r7, #32
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7ff fd91 	bl	80100ca <lv_area_get_width>
 80105a8:	4603      	mov	r3, r0
 80105aa:	65bb      	str	r3, [r7, #88]	; 0x58

        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 80105ac:	f107 0320 	add.w	r3, r7, #32
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7ff fd8a 	bl	80100ca <lv_area_get_width>
 80105b6:	4603      	mov	r3, r0
 80105b8:	005b      	lsls	r3, r3, #1
 80105ba:	4618      	mov	r0, r3
 80105bc:	f011 fc2a 	bl	8021e14 <lv_mem_buf_get>
 80105c0:	6578      	str	r0, [r7, #84]	; 0x54
                                        LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 80105c8:	f107 0220 	add.w	r2, r7, #32
 80105cc:	f107 0318 	add.w	r3, r7, #24
 80105d0:	4611      	mov	r1, r2
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7ff fd5a 	bl	801008c <lv_area_copy>
        lv_area_set_height(&line, 1);
 80105d8:	f107 0318 	add.w	r3, r7, #24
 80105dc:	2101      	movs	r1, #1
 80105de:	4618      	mov	r0, r3
 80105e0:	f00f ffc9 	bl	8020576 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 80105e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105e8:	461a      	mov	r2, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 80105f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80105f8:	461a      	mov	r2, r3
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	66bb      	str	r3, [r7, #104]	; 0x68
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8010604:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010608:	667b      	str	r3, [r7, #100]	; 0x64
 801060a:	e057      	b.n	80106bc <decode_and_draw+0x346>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 801060c:	f107 0218 	add.w	r2, r7, #24
 8010610:	f107 0310 	add.w	r3, r7, #16
 8010614:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010616:	4618      	mov	r0, r3
 8010618:	f010 f852 	bl	80206c0 <_lv_area_intersect>
 801061c:	4603      	mov	r3, r0
 801061e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if(union_ok == false) continue;
 8010622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010626:	f083 0301 	eor.w	r3, r3, #1
 801062a:	b2db      	uxtb	r3, r3
 801062c:	2b00      	cmp	r3, #0
 801062e:	d141      	bne.n	80106b4 <decode_and_draw+0x33e>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8010630:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010634:	b219      	sxth	r1, r3
 8010636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010638:	b21a      	sxth	r2, r3
 801063a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801063c:	b21c      	sxth	r4, r3
 801063e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	4623      	mov	r3, r4
 8010644:	f003 ffc0 	bl	80145c8 <lv_img_decoder_read_line>
 8010648:	4603      	mov	r3, r0
 801064a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 801064e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010652:	2b01      	cmp	r3, #1
 8010654:	d00e      	beq.n	8010674 <decode_and_draw+0x2fe>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8010656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010658:	4618      	mov	r0, r3
 801065a:	f003 ffe1 	bl	8014620 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                lv_mem_buf_release(buf);
 801065e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010660:	f011 fc84 	bl	8021f6c <lv_mem_buf_release>
                draw_cleanup(cdsc);
 8010664:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010666:	f000 f865 	bl	8010734 <draw_cleanup>
                draw_ctx->clip_area = clip_area_ori;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801066e:	609a      	str	r2, [r3, #8]
                return LV_RES_INV;
 8010670:	2300      	movs	r3, #0
            return LV_RES_OK;
 8010672:	e033      	b.n	80106dc <decode_and_draw+0x366>
            }

            draw_ctx->clip_area = &mask_line;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f107 0210 	add.w	r2, r7, #16
 801067a:	609a      	str	r2, [r3, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 801067c:	f107 0218 	add.w	r2, r7, #24
 8010680:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010688:	68b9      	ldr	r1, [r7, #8]
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f7ff fe59 	bl	8010342 <lv_draw_img_decoded>
            line.y1++;
 8010690:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010694:	b29b      	uxth	r3, r3
 8010696:	3301      	adds	r3, #1
 8010698:	b29b      	uxth	r3, r3
 801069a:	b21b      	sxth	r3, r3
 801069c:	837b      	strh	r3, [r7, #26]
            line.y2++;
 801069e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	3301      	adds	r3, #1
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	b21b      	sxth	r3, r3
 80106aa:	83fb      	strh	r3, [r7, #30]
            y++;
 80106ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106ae:	3301      	adds	r3, #1
 80106b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80106b2:	e000      	b.n	80106b6 <decode_and_draw+0x340>
            if(union_ok == false) continue;
 80106b4:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 80106b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106b8:	3301      	adds	r3, #1
 80106ba:	667b      	str	r3, [r7, #100]	; 0x64
 80106bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80106c0:	461a      	mov	r2, r3
 80106c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106c4:	4293      	cmp	r3, r2
 80106c6:	dda1      	ble.n	801060c <decode_and_draw+0x296>
        }
        draw_ctx->clip_area = clip_area_ori;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80106cc:	609a      	str	r2, [r3, #8]
        lv_mem_buf_release(buf);
 80106ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80106d0:	f011 fc4c 	bl	8021f6c <lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 80106d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80106d6:	f000 f82d 	bl	8010734 <draw_cleanup>
    return LV_RES_OK;
 80106da:	2301      	movs	r3, #1
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3770      	adds	r7, #112	; 0x70
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bdb0      	pop	{r4, r5, r7, pc}

080106e4 <show_error>:


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b09a      	sub	sp, #104	; 0x68
 80106e8:	af02      	add	r7, sp, #8
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 80106f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106f4:	4618      	mov	r0, r3
 80106f6:	f003 fc67 	bl	8013fc8 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 80106fa:	f7ff fcb3 	bl	8010064 <lv_color_white>
 80106fe:	f887 0034 	strb.w	r0, [r7, #52]	; 0x34
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8010702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010706:	68ba      	ldr	r2, [r7, #8]
 8010708:	4619      	mov	r1, r3
 801070a:	68f8      	ldr	r0, [r7, #12]
 801070c:	f003 fca0 	bl	8014050 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 8010710:	f107 0310 	add.w	r3, r7, #16
 8010714:	4618      	mov	r0, r3
 8010716:	f000 f899 	bl	801084c <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 801071a:	f107 0110 	add.w	r1, r7, #16
 801071e:	2300      	movs	r3, #0
 8010720:	9300      	str	r3, [sp, #0]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f000 f8bc 	bl	80108a4 <lv_draw_label>
}
 801072c:	bf00      	nop
 801072e:	3760      	adds	r7, #96	; 0x60
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <draw_cleanup>:

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	4618      	mov	r0, r3
 8010740:	f003 ff6e 	bl	8014620 <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 8010744:	bf00      	nop
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801075a:	b29a      	uxth	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010762:	b29b      	uxth	r3, r3
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	b29b      	uxth	r3, r3
 8010768:	3301      	adds	r3, #1
 801076a:	b29b      	uxth	r3, r3
 801076c:	b21b      	sxth	r3, r3
}
 801076e:	4618      	mov	r0, r3
 8010770:	370c      	adds	r7, #12
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr

0801077a <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 801077a:	b480      	push	{r7}
 801077c:	b083      	sub	sp, #12
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8010788:	4618      	mov	r0, r3
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
 8010794:	b480      	push	{r7}
 8010796:	b087      	sub	sp, #28
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	613b      	str	r3, [r7, #16]

    while(len) {
 80107a8:	e00c      	b.n	80107c4 <lv_memcpy_small+0x30>
        *d8 = *s8;
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	781a      	ldrb	r2, [r3, #0]
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	701a      	strb	r2, [r3, #0]
        d8++;
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	3301      	adds	r3, #1
 80107b6:	617b      	str	r3, [r7, #20]
        s8++;
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	3301      	adds	r3, #1
 80107bc:	613b      	str	r3, [r7, #16]
        len--;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	3b01      	subs	r3, #1
 80107c2:	607b      	str	r3, [r7, #4]
    while(len) {
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1ef      	bne.n	80107aa <lv_memcpy_small+0x16>
    }

    return dst;
 80107ca:	68fb      	ldr	r3, [r7, #12]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	371c      	adds	r7, #28
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <lv_color_make>:
{
 80107d8:	b480      	push	{r7}
 80107da:	b083      	sub	sp, #12
 80107dc:	af00      	add	r7, sp, #0
 80107de:	4603      	mov	r3, r0
 80107e0:	71fb      	strb	r3, [r7, #7]
 80107e2:	460b      	mov	r3, r1
 80107e4:	71bb      	strb	r3, [r7, #6]
 80107e6:	4613      	mov	r3, r2
 80107e8:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80107ea:	797b      	ldrb	r3, [r7, #5]
 80107ec:	09db      	lsrs	r3, r3, #7
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	79bb      	ldrb	r3, [r7, #6]
 80107f2:	09db      	lsrs	r3, r3, #7
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	4313      	orrs	r3, r2
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	79fb      	ldrb	r3, [r7, #7]
 80107fc:	09db      	lsrs	r3, r3, #7
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	4313      	orrs	r3, r2
 8010802:	b2db      	uxtb	r3, r3
}
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <lv_color_black>:
{
 8010810:	b580      	push	{r7, lr}
 8010812:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8010814:	2200      	movs	r2, #0
 8010816:	2100      	movs	r1, #0
 8010818:	2000      	movs	r0, #0
 801081a:	f7ff ffdd 	bl	80107d8 <lv_color_make>
 801081e:	4603      	mov	r3, r0
}
 8010820:	4618      	mov	r0, r3
 8010822:	bd80      	pop	{r7, pc}

08010824 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d102      	bne.n	801083e <lv_bidi_calculate_align+0x1a>
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2201      	movs	r2, #1
 801083c:	701a      	strb	r2, [r3, #0]
}
 801083e:	bf00      	nop
 8010840:	3714      	adds	r7, #20
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr
	...

0801084c <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8010854:	2120      	movs	r1, #32
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f011 fe86 	bl	8022568 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	22ff      	movs	r2, #255	; 0xff
 8010860:	761a      	strb	r2, [r3, #24]
    dsc->color = lv_color_black();
 8010862:	687c      	ldr	r4, [r7, #4]
 8010864:	f7ff ffd4 	bl	8010810 <lv_color_black>
 8010868:	7320      	strb	r0, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4a0c      	ldr	r2, [pc, #48]	; (80108a0 <lv_draw_label_dsc_init+0x54>)
 801086e:	601a      	str	r2, [r3, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010876:	605a      	str	r2, [r3, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801087e:	609a      	str	r2, [r3, #8]
    dsc->sel_color = lv_color_black();
 8010880:	687c      	ldr	r4, [r7, #4]
 8010882:	f7ff ffc5 	bl	8010810 <lv_color_black>
 8010886:	7360      	strb	r0, [r4, #13]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8010888:	687c      	ldr	r4, [r7, #4]
 801088a:	2005      	movs	r0, #5
 801088c:	f010 fc66 	bl	802115c <lv_palette_main>
 8010890:	73a0      	strb	r0, [r4, #14]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	765a      	strb	r2, [r3, #25]
}
 8010898:	bf00      	nop
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	bd90      	pop	{r4, r7, pc}
 80108a0:	08029ddc 	.word	0x08029ddc

080108a4 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 80108a4:	b5b0      	push	{r4, r5, r7, lr}
 80108a6:	b0c8      	sub	sp, #288	; 0x120
 80108a8:	af04      	add	r7, sp, #16
 80108aa:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80108ae:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80108b2:	6020      	str	r0, [r4, #0]
 80108b4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80108b8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80108bc:	6001      	str	r1, [r0, #0]
 80108be:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80108c2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80108c6:	600a      	str	r2, [r1, #0]
 80108c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80108cc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80108d0:	6013      	str	r3, [r2, #0]
    if(dsc->opa <= LV_OPA_MIN) return;
 80108d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	7e1b      	ldrb	r3, [r3, #24]
 80108de:	2b02      	cmp	r3, #2
 80108e0:	f240 85ea 	bls.w	80114b8 <lv_draw_label+0xc14>
    if(dsc->font == NULL) {
 80108e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f000 85e3 	beq.w	80114bc <lv_draw_label+0xc18>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 80108f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80108fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	69db      	ldr	r3, [r3, #28]
 8010902:	2b00      	cmp	r3, #0
 8010904:	f000 85dc 	beq.w	80114c0 <lv_draw_label+0xc1c>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 8010908:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801090c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8010916:	461d      	mov	r5, r3
 8010918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801091a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801091c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const lv_font_t * font = dsc->font;
 8010924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 8010934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010938:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	f000 85c0 	beq.w	80114c4 <lv_draw_label+0xc20>
 8010944:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010948:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	f000 85b7 	beq.w	80114c4 <lv_draw_label+0xc20>
        return;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 8010956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801095a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	689a      	ldr	r2, [r3, #8]
 8010962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010966:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801096a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 801096e:	6819      	ldr	r1, [r3, #0]
 8010970:	f00f fea6 	bl	80206c0 <_lv_area_intersect>
 8010974:	4603      	mov	r3, r0
 8010976:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    if(!clip_ok) return;
 801097a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 801097e:	f083 0301 	eor.w	r3, r3, #1
 8010982:	b2db      	uxtb	r3, r3
 8010984:	2b00      	cmp	r3, #0
 8010986:	f040 859f 	bne.w	80114c8 <lv_draw_label+0xc24>

    lv_text_align_t align = dsc->align;
 801098a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801098e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	7e9b      	ldrb	r3, [r3, #26]
 8010996:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_base_dir_t base_dir = dsc->bidi_dir;
 801099a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801099e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	7e5b      	ldrb	r3, [r3, #25]
 80109a6:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    lv_bidi_calculate_align(&align, &base_dir, txt);
 80109aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80109b2:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 80109b6:	f107 008b 	add.w	r0, r7, #139	; 0x8b
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	f7ff ff32 	bl	8010824 <lv_bidi_calculate_align>

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 80109c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	7edb      	ldrb	r3, [r3, #27]
 80109cc:	f003 0302 	and.w	r3, r3, #2
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d10a      	bne.n	80109ea <lv_draw_label+0x146>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 80109d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80109dc:	6818      	ldr	r0, [r3, #0]
 80109de:	f7ff feb5 	bl	801074c <lv_area_get_width>
 80109e2:	4603      	mov	r3, r0
 80109e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80109e8:	e02d      	b.n	8010a46 <lv_draw_label+0x1a2>
    }
    else {
        /*If EXPAND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 80109ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	681c      	ldr	r4, [r3, #0]
 80109f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 8010a04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010a12:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010a16:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8010a1a:	6812      	ldr	r2, [r2, #0]
 8010a1c:	7ed2      	ldrb	r2, [r2, #27]
 8010a1e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8010a22:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8010a26:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010a2a:	9202      	str	r2, [sp, #8]
 8010a2c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8010a30:	9201      	str	r2, [sp, #4]
 8010a32:	9300      	str	r3, [sp, #0]
 8010a34:	462b      	mov	r3, r5
 8010a36:	4622      	mov	r2, r4
 8010a38:	6809      	ldr	r1, [r1, #0]
 8010a3a:	f013 fbd3 	bl	80241e4 <lv_txt_get_size>
                        dsc->flag);
        w = p.x;
 8010a3e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8010a42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 8010a46:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8010a4a:	f7ff fe96 	bl	801077a <lv_font_get_line_height>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int32_t line_height = line_height_font + dsc->line_space;
 8010a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010a62:	461a      	mov	r2, r3
 8010a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a68:	4413      	add	r3, r2
 8010a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /*Init variables for the first line*/
    int32_t line_width = 0;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    lv_point_t pos;
    pos.x = coords->x1;
 8010a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a82:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    pos.y = coords->y1;
 8010a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a94:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t x_ofs = 0;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int32_t y_ofs = 0;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    x_ofs = dsc->ofs_x;
 8010aa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y_ofs = dsc->ofs_y;
 8010ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8010ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    pos.y += y_ofs;
 8010ac8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	4413      	add	r3, r2
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	b21b      	sxth	r3, r3
 8010ada:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    uint32_t line_start     = 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    int32_t last_line_start = -1;
 8010ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ae8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8010aec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d02c      	beq.n	8010b4e <lv_draw_label+0x2aa>
 8010af4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d128      	bne.n	8010b4e <lv_draw_label+0x2aa>
 8010afc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	da1f      	bge.n	8010b4e <lv_draw_label+0x2aa>
        /*If the label changed too much recalculate the hint.*/
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8010b0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010b18:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8010b1c:	6812      	ldr	r2, [r2, #0]
 8010b1e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010b22:	1a9b      	subs	r3, r3, r2
 8010b24:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010b28:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b30:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010b34:	005b      	lsls	r3, r3, #1
 8010b36:	429a      	cmp	r2, r3
 8010b38:	dd04      	ble.n	8010b44 <lv_draw_label+0x2a0>
            hint->line_start = -1;
 8010b3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b42:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 8010b44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 8010b4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d013      	beq.n	8010b7e <lv_draw_label+0x2da>
 8010b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	db0f      	blt.n	8010b7e <lv_draw_label+0x2da>
        line_start = last_line_start;
 8010b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        pos.y += hint->y;
 8010b66:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	4413      	add	r3, r2
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	b21b      	sxth	r3, r3
 8010b7a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8010b7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010b8c:	18d0      	adds	r0, r2, r3
 8010b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010ba0:	b219      	sxth	r1, r3
 8010ba2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	7edb      	ldrb	r3, [r3, #27]
 8010bae:	9301      	str	r3, [sp, #4]
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8010bba:	f013 fcaf 	bl	802451c <_lv_txt_get_next_line>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010bc4:	4413      	add	r3, r2
 8010bc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8010bca:	e06c      	b.n	8010ca6 <lv_draw_label+0x402>
        /*Go to next line*/
        line_start = line_end;
 8010bcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010bd0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8010bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010be2:	18d0      	adds	r0, r2, r3
 8010be4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010bf6:	b219      	sxth	r1, r3
 8010bf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	7edb      	ldrb	r3, [r3, #27]
 8010c04:	9301      	str	r3, [sp, #4]
 8010c06:	2300      	movs	r3, #0
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8010c10:	f013 fc84 	bl	802451c <_lv_txt_get_next_line>
 8010c14:	4602      	mov	r2, r0
 8010c16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010c1a:	4413      	add	r3, r2
 8010c1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        pos.y += line_height;
 8010c20:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	4413      	add	r3, r2
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	b21b      	sxth	r3, r3
 8010c32:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8010c36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d027      	beq.n	8010c8e <lv_draw_label+0x3ea>
 8010c3e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010c42:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8010c46:	db22      	blt.n	8010c8e <lv_draw_label+0x3ea>
 8010c48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	da1d      	bge.n	8010c8e <lv_draw_label+0x3ea>
            hint->line_start = line_start;
 8010c52:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010c56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010c5a:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 8010c5c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010c60:	461a      	mov	r2, r3
 8010c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010c70:	1ad2      	subs	r2, r2, r3
 8010c72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010c76:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 8010c78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010c86:	461a      	mov	r2, r3
 8010c88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010c8c:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 8010c8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010c9c:	4413      	add	r3, r2
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f000 8413 	beq.w	80114cc <lv_draw_label+0xc28>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8010ca6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010caa:	461a      	mov	r2, r3
 8010cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cb0:	4413      	add	r3, r2
 8010cb2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010cb6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8010cba:	6812      	ldr	r2, [r2, #0]
 8010cbc:	6892      	ldr	r2, [r2, #8]
 8010cbe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	db82      	blt.n	8010bcc <lv_draw_label+0x328>
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
 8010cc6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8010cca:	2b02      	cmp	r3, #2
 8010ccc:	d13d      	bne.n	8010d4a <lv_draw_label+0x4a6>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8010cce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010cdc:	18d0      	adds	r0, r2, r3
 8010cde:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010ce2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010ce6:	1ad1      	subs	r1, r2, r3
 8010ce8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010cf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	7edb      	ldrb	r3, [r3, #27]
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	4613      	mov	r3, r2
 8010d06:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010d0a:	f013 fce5 	bl	80246d8 <lv_txt_get_width>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8010d14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010d1c:	6818      	ldr	r0, [r3, #0]
 8010d1e:	f7ff fd15 	bl	801074c <lv_area_get_width>
 8010d22:	4603      	mov	r3, r0
 8010d24:	461a      	mov	r2, r3
 8010d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	da00      	bge.n	8010d32 <lv_draw_label+0x48e>
 8010d30:	3301      	adds	r3, #1
 8010d32:	105b      	asrs	r3, r3, #1
 8010d34:	4619      	mov	r1, r3
 8010d36:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	b28b      	uxth	r3, r1
 8010d3e:	4413      	add	r3, r2
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	b21b      	sxth	r3, r3
 8010d44:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8010d48:	e03b      	b.n	8010dc2 <lv_draw_label+0x51e>

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8010d4a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8010d4e:	2b03      	cmp	r3, #3
 8010d50:	d137      	bne.n	8010dc2 <lv_draw_label+0x51e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8010d52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010d5a:	681a      	ldr	r2, [r3, #0]
 8010d5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010d60:	18d0      	adds	r0, r2, r3
 8010d62:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010d66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010d6a:	1ad1      	subs	r1, r2, r3
 8010d6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	7edb      	ldrb	r3, [r3, #27]
 8010d86:	9300      	str	r3, [sp, #0]
 8010d88:	4613      	mov	r3, r2
 8010d8a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010d8e:	f013 fca3 	bl	80246d8 <lv_txt_get_width>
 8010d92:	4603      	mov	r3, r0
 8010d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        pos.x += lv_area_get_width(coords) - line_width;
 8010d98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010da0:	6818      	ldr	r0, [r3, #0]
 8010da2:	f7ff fcd3 	bl	801074c <lv_area_get_width>
 8010da6:	4603      	mov	r3, r0
 8010da8:	461a      	mov	r2, r3
 8010daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8010db4:	b292      	uxth	r2, r2
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	4413      	add	r3, r2
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	b21b      	sxth	r3, r3
 8010dbe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    }
    uint32_t sel_start = dsc->sel_start;
 8010dc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    uint32_t sel_end = dsc->sel_end;
 8010dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	689b      	ldr	r3, [r3, #8]
 8010dde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    if(sel_start > sel_end) {
 8010de2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d90b      	bls.n	8010e06 <lv_draw_label+0x562>
        uint32_t tmp = sel_start;
 8010dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010df2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        sel_start = sel_end;
 8010df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        sel_end = tmp;
 8010dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010e02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8010e06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	7f1b      	ldrb	r3, [r3, #28]
 8010e12:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d10c      	bne.n	8010e3a <lv_draw_label+0x596>
 8010e20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	7f1b      	ldrb	r3, [r3, #28]
 8010e2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	f003 0302 	and.w	r3, r3, #2
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d035      	beq.n	8010ea6 <lv_draw_label+0x602>
        lv_draw_line_dsc_init(&line_dsc);
 8010e3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f000 fc79 	bl	8011736 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 8010e44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	7b1b      	ldrb	r3, [r3, #12]
 8010e50:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8010e54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010e58:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d005      	beq.n	8010e6c <lv_draw_label+0x5c8>
 8010e60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010e64:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8010e68:	b21b      	sxth	r3, r3
 8010e6a:	e000      	b.n	8010e6e <lv_draw_label+0x5ca>
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        line_dsc.opa = dsc->opa;
 8010e72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	7e1b      	ldrb	r3, [r3, #24]
 8010e7e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        line_dsc.blend_mode = dsc->blend_mode;
 8010e82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	7f1b      	ldrb	r3, [r3, #28]
 8010e8e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	f003 0303 	and.w	r3, r3, #3
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010e9e:	f362 0301 	bfi	r3, r2, #0, #2
 8010ea2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
    uint32_t i;
    uint32_t par_start = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_color_t recolor  = lv_color_black();
 8010eb2:	f7ff fcad 	bl	8010810 <lv_color_black>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    lv_color_t color = lv_color_black();
 8010ebc:	f7ff fca8 	bl	8010810 <lv_color_black>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8010ec6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f003 f87c 	bl	8013fc8 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8010ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	7b9b      	ldrb	r3, [r3, #14]
 8010edc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    int32_t pos_x_start = pos.x;
 8010ee0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8010ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 8010ee8:	e2d9      	b.n	801149e <lv_draw_label+0xbfa>
        pos.x += x_ofs;
 8010eea:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	4413      	add	r3, r2
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	b21b      	sxth	r3, r3
 8010efc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 8010f00:	2300      	movs	r3, #0
 8010f02:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
        i         = 0;
 8010f06:	2300      	movs	r3, #0
 8010f08:	677b      	str	r3, [r7, #116]	; 0x74
#if LV_USE_BIDI
        char * bidi_txt = lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, base_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 8010f0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f0e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010f18:	4413      	add	r3, r2
 8010f1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
#endif

        while(i < line_end - line_start) {
 8010f1e:	e154      	b.n	80111ca <lv_draw_label+0x926>
            uint32_t logical_char_pos = 0;
 8010f20:	2300      	movs	r3, #0
 8010f22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8010f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d013      	beq.n	8010f5a <lv_draw_label+0x6b6>
 8010f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d00d      	beq.n	8010f5a <lv_draw_label+0x6b6>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, base_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 8010f3e:	4ba1      	ldr	r3, [pc, #644]	; (80111c4 <lv_draw_label+0x920>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010f44:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010f48:	4411      	add	r1, r2
 8010f4a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010f4e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8010f52:	6810      	ldr	r0, [r2, #0]
 8010f54:	4798      	blx	r3
 8010f56:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
#endif
            }

            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8010f5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010f5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f62:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8010f66:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8010f6a:	f013 fc53 	bl	8024814 <_lv_txt_encoded_letter_next_2>
            /*Handle the re-color command*/
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8010f6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	7edb      	ldrb	r3, [r3, #27]
 8010f7a:	f003 0301 	and.w	r3, r3, #1
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f000 8088 	beq.w	8011094 <lv_draw_label+0x7f0>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8010f84:	2323      	movs	r3, #35	; 0x23
 8010f86:	461a      	mov	r2, r3
 8010f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d11a      	bne.n	8010fc4 <lv_draw_label+0x720>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8010f8e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d106      	bne.n	8010fa4 <lv_draw_label+0x700>
                        par_start = i;
 8010f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                        cmd_state = CMD_STATE_PAR;
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 8010fa2:	e112      	b.n	80111ca <lv_draw_label+0x926>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 8010fa4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8010fa8:	2b01      	cmp	r3, #1
 8010faa:	d103      	bne.n	8010fb4 <lv_draw_label+0x710>
                        cmd_state = CMD_STATE_WAIT;
 8010fac:	2300      	movs	r3, #0
 8010fae:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8010fb2:	e007      	b.n	8010fc4 <lv_draw_label+0x720>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 8010fb4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	d103      	bne.n	8010fc4 <lv_draw_label+0x720>
                        cmd_state = CMD_STATE_WAIT;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 8010fc2:	e102      	b.n	80111ca <lv_draw_label+0x926>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 8010fc4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	d163      	bne.n	8011094 <lv_draw_label+0x7f0>
                    if(letter == ' ') {
 8010fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fce:	2b20      	cmp	r3, #32
 8010fd0:	f040 80fa 	bne.w	80111c8 <lv_draw_label+0x924>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8010fd4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010fd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	2b07      	cmp	r3, #7
 8010fde:	d14d      	bne.n	801107c <lv_draw_label+0x7d8>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8010fe0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010fe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010fe8:	18d1      	adds	r1, r2, r3
 8010fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010fee:	2206      	movs	r2, #6
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7ff fbcf 	bl	8010794 <lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8010ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011000:	4618      	mov	r0, r3
 8011002:	f000 fa7d 	bl	8011500 <hex_char_to_num>
 8011006:	4603      	mov	r3, r0
 8011008:	011c      	lsls	r4, r3, #4
 801100a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801100e:	4618      	mov	r0, r3
 8011010:	f000 fa76 	bl	8011500 <hex_char_to_num>
 8011014:	4603      	mov	r3, r0
 8011016:	4423      	add	r3, r4
 8011018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 801101c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8011020:	4618      	mov	r0, r3
 8011022:	f000 fa6d 	bl	8011500 <hex_char_to_num>
 8011026:	4603      	mov	r3, r0
 8011028:	011c      	lsls	r4, r3, #4
 801102a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801102e:	4618      	mov	r0, r3
 8011030:	f000 fa66 	bl	8011500 <hex_char_to_num>
 8011034:	4603      	mov	r3, r0
 8011036:	4423      	add	r3, r4
 8011038:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 801103c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011040:	4618      	mov	r0, r3
 8011042:	f000 fa5d 	bl	8011500 <hex_char_to_num>
 8011046:	4603      	mov	r3, r0
 8011048:	011c      	lsls	r4, r3, #4
 801104a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801104e:	4618      	mov	r0, r3
 8011050:	f000 fa56 	bl	8011500 <hex_char_to_num>
 8011054:	4603      	mov	r3, r0
 8011056:	4423      	add	r3, r4
 8011058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                            recolor = lv_color_make(r, g, b);
 801105c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011060:	b2db      	uxtb	r3, r3
 8011062:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011066:	b2d1      	uxtb	r1, r2
 8011068:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801106c:	b2d2      	uxtb	r2, r2
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff fbb2 	bl	80107d8 <lv_color_make>
 8011074:	4603      	mov	r3, r0
 8011076:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 801107a:	e007      	b.n	801108c <lv_draw_label+0x7e8>
                        }
                        else {
                            recolor.full = dsc->color.full;
 801107c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	7b1b      	ldrb	r3, [r3, #12]
 8011088:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 801108c:	2302      	movs	r3, #2
 801108e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                    }
                    continue;
 8011092:	e099      	b.n	80111c8 <lv_draw_label+0x924>
                }
            }

            color = dsc->color;
 8011094:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	7b1b      	ldrb	r3, [r3, #12]
 80110a0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            if(cmd_state == CMD_STATE_IN) color = recolor;
 80110a4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80110a8:	2b02      	cmp	r3, #2
 80110aa:	d103      	bne.n	80110b4 <lv_draw_label+0x810>
 80110ac:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80110b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80110b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110b8:	4619      	mov	r1, r3
 80110ba:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80110be:	f00e f965 	bl	801f38c <lv_font_get_glyph_width>
 80110c2:	4603      	mov	r3, r0
 80110c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80110c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80110cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d04c      	beq.n	801116e <lv_draw_label+0x8ca>
 80110d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80110d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110dc:	4293      	cmp	r3, r2
 80110de:	d046      	beq.n	801116e <lv_draw_label+0x8ca>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 80110e0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80110e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d340      	bcc.n	801116e <lv_draw_label+0x8ca>
 80110ec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80110f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d23a      	bcs.n	801116e <lv_draw_label+0x8ca>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 80110f8:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80110fc:	843b      	strh	r3, [r7, #32]
                    sel_coords.y1 = pos.y;
 80110fe:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011102:	847b      	strh	r3, [r7, #34]	; 0x22
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8011104:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8011108:	b29a      	uxth	r2, r3
 801110a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801110e:	b29b      	uxth	r3, r3
 8011110:	4413      	add	r3, r2
 8011112:	b29a      	uxth	r2, r3
 8011114:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011122:	b29b      	uxth	r3, r3
 8011124:	4413      	add	r3, r2
 8011126:	b29b      	uxth	r3, r3
 8011128:	3b01      	subs	r3, #1
 801112a:	b29b      	uxth	r3, r3
 801112c:	b21b      	sxth	r3, r3
 801112e:	84bb      	strh	r3, [r7, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
 8011130:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011134:	b29a      	uxth	r2, r3
 8011136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801113a:	b29b      	uxth	r3, r3
 801113c:	4413      	add	r3, r2
 801113e:	b29b      	uxth	r3, r3
 8011140:	3b01      	subs	r3, #1
 8011142:	b29b      	uxth	r3, r3
 8011144:	b21b      	sxth	r3, r3
 8011146:	84fb      	strh	r3, [r7, #38]	; 0x26
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 8011148:	f107 0220 	add.w	r2, r7, #32
 801114c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8011150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011158:	6818      	ldr	r0, [r3, #0]
 801115a:	f002 ff79 	bl	8014050 <lv_draw_rect>
                    color = dsc->sel_color;
 801115e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	7b5b      	ldrb	r3, [r3, #13]
 801116a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                }
            }

            dsc_mod.color = color;
 801116e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8011172:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 8011176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011178:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801117c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8011180:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011184:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011188:	6800      	ldr	r0, [r0, #0]
 801118a:	f000 f9a7 	bl	80114dc <lv_draw_letter>

            if(letter_w > 0) {
 801118e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011192:	2b00      	cmp	r3, #0
 8011194:	dd19      	ble.n	80111ca <lv_draw_label+0x926>
                pos.x += letter_w + dsc->letter_space;
 8011196:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801119a:	b29a      	uxth	r2, r3
 801119c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80111a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80111aa:	b299      	uxth	r1, r3
 80111ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	440b      	add	r3, r1
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	4413      	add	r3, r2
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	b21b      	sxth	r3, r3
 80111bc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80111c0:	e003      	b.n	80111ca <lv_draw_label+0x926>
 80111c2:	bf00      	nop
 80111c4:	20000028 	.word	0x20000028
                    continue;
 80111c8:	bf00      	nop
        while(i < line_end - line_start) {
 80111ca:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80111ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80111d2:	1ad2      	subs	r2, r2, r3
 80111d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80111d6:	429a      	cmp	r2, r3
 80111d8:	f63f aea2 	bhi.w	8010f20 <lv_draw_label+0x67c>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 80111dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80111e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	7f1b      	ldrb	r3, [r3, #28]
 80111e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	f003 0302 	and.w	r3, r3, #2
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d039      	beq.n	801126a <lv_draw_label+0x9c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 80111f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111fa:	b21b      	sxth	r3, r3
 80111fc:	83bb      	strh	r3, [r7, #28]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 80111fe:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011202:	b29a      	uxth	r2, r3
 8011204:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011214:	2b00      	cmp	r3, #0
 8011216:	da00      	bge.n	801121a <lv_draw_label+0x976>
 8011218:	3301      	adds	r3, #1
 801121a:	105b      	asrs	r3, r3, #1
 801121c:	b21b      	sxth	r3, r3
 801121e:	b29b      	uxth	r3, r3
 8011220:	4413      	add	r3, r2
 8011222:	b29a      	uxth	r2, r3
 8011224:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8011228:	2b00      	cmp	r3, #0
 801122a:	da00      	bge.n	801122e <lv_draw_label+0x98a>
 801122c:	3301      	adds	r3, #1
 801122e:	105b      	asrs	r3, r3, #1
 8011230:	b21b      	sxth	r3, r3
 8011232:	b29b      	uxth	r3, r3
 8011234:	4413      	add	r3, r2
 8011236:	b29b      	uxth	r3, r3
 8011238:	b21b      	sxth	r3, r3
 801123a:	83fb      	strh	r3, [r7, #30]
            p2.x = pos.x;
 801123c:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8011240:	833b      	strh	r3, [r7, #24]
            p2.y = p1.y;
 8011242:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011246:	837b      	strh	r3, [r7, #26]
            line_dsc.color = color;
 8011248:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801124c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8011250:	f107 0318 	add.w	r3, r7, #24
 8011254:	f107 021c 	add.w	r2, r7, #28
 8011258:	f107 0178 	add.w	r1, r7, #120	; 0x78
 801125c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011260:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011264:	6800      	ldr	r0, [r0, #0]
 8011266:	f000 fa7c 	bl	8011762 <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 801126a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801126e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	7f1b      	ldrb	r3, [r3, #28]
 8011276:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801127a:	b2db      	uxtb	r3, r3
 801127c:	f003 0301 	and.w	r3, r3, #1
 8011280:	2b00      	cmp	r3, #0
 8011282:	d044      	beq.n	801130e <lv_draw_label+0xa6a>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 8011284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011288:	b21b      	sxth	r3, r3
 801128a:	82bb      	strh	r3, [r7, #20]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 801128c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011290:	b29a      	uxth	r2, r3
 8011292:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	4413      	add	r3, r2
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80112ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	b29a      	uxth	r2, r3
 80112be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80112c2:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	b21b      	sxth	r3, r3
 80112ce:	82fb      	strh	r3, [r7, #22]
            p2.x = pos.x;
 80112d0:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80112d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80112d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80112dc:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 80112de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80112e6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80112ea:	805a      	strh	r2, [r3, #2]
            line_dsc.color = color;
 80112ec:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80112f0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80112f4:	f107 0310 	add.w	r3, r7, #16
 80112f8:	f107 0214 	add.w	r2, r7, #20
 80112fc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8011300:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011304:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011308:	6800      	ldr	r0, [r0, #0]
 801130a:	f000 fa2a 	bl	8011762 <lv_draw_line>
#if LV_USE_BIDI
        lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 801130e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011312:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8011316:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801131a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011324:	18d0      	adds	r0, r2, r3
 8011326:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801132a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8011334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011338:	b219      	sxth	r1, r3
 801133a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801133e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	7edb      	ldrb	r3, [r3, #27]
 8011346:	9301      	str	r3, [sp, #4]
 8011348:	2300      	movs	r3, #0
 801134a:	9300      	str	r3, [sp, #0]
 801134c:	460b      	mov	r3, r1
 801134e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011352:	f013 f8e3 	bl	802451c <_lv_txt_get_next_line>
 8011356:	4602      	mov	r2, r0
 8011358:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801135c:	4413      	add	r3, r2
 801135e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        pos.x = coords->x1;
 8011362:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011366:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011370:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        /*Align to middle*/
        if(align == LV_TEXT_ALIGN_CENTER) {
 8011374:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011378:	2b02      	cmp	r3, #2
 801137a:	d13d      	bne.n	80113f8 <lv_draw_label+0xb54>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 801137c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011380:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011384:	681a      	ldr	r2, [r3, #0]
 8011386:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801138a:	18d0      	adds	r0, r2, r3
 801138c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011394:	1ad1      	subs	r1, r2, r3
 8011396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801139a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80113a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	7edb      	ldrb	r3, [r3, #27]
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	4613      	mov	r3, r2
 80113b4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80113b8:	f013 f98e 	bl	80246d8 <lv_txt_get_width>
 80113bc:	4603      	mov	r3, r0
            line_width =
 80113be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80113c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80113ca:	6818      	ldr	r0, [r3, #0]
 80113cc:	f7ff f9be 	bl	801074c <lv_area_get_width>
 80113d0:	4603      	mov	r3, r0
 80113d2:	461a      	mov	r2, r3
 80113d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	2b00      	cmp	r3, #0
 80113dc:	da00      	bge.n	80113e0 <lv_draw_label+0xb3c>
 80113de:	3301      	adds	r3, #1
 80113e0:	105b      	asrs	r3, r3, #1
 80113e2:	4619      	mov	r1, r3
 80113e4:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	b28b      	uxth	r3, r1
 80113ec:	4413      	add	r3, r2
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	b21b      	sxth	r3, r3
 80113f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80113f6:	e03b      	b.n	8011470 <lv_draw_label+0xbcc>

        }
        /*Align to the right*/
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 80113f8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80113fc:	2b03      	cmp	r3, #3
 80113fe:	d137      	bne.n	8011470 <lv_draw_label+0xbcc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8011400:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011404:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801140e:	18d0      	adds	r0, r2, r3
 8011410:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011414:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011418:	1ad1      	subs	r1, r2, r3
 801141a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801141e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8011428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801142c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	7edb      	ldrb	r3, [r3, #27]
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	4613      	mov	r3, r2
 8011438:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801143c:	f013 f94c 	bl	80246d8 <lv_txt_get_width>
 8011440:	4603      	mov	r3, r0
            line_width =
 8011442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            pos.x += lv_area_get_width(coords) - line_width;
 8011446:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801144a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801144e:	6818      	ldr	r0, [r3, #0]
 8011450:	f7ff f97c 	bl	801074c <lv_area_get_width>
 8011454:	4603      	mov	r3, r0
 8011456:	461a      	mov	r2, r3
 8011458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8011462:	b292      	uxth	r2, r2
 8011464:	b29b      	uxth	r3, r3
 8011466:	4413      	add	r3, r2
 8011468:	b29b      	uxth	r3, r3
 801146a:	b21b      	sxth	r3, r3
 801146c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        /*Go the next line position*/
        pos.y += line_height;
 8011470:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011474:	b29a      	uxth	r2, r3
 8011476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801147a:	b29b      	uxth	r3, r3
 801147c:	4413      	add	r3, r2
 801147e:	b29b      	uxth	r3, r3
 8011480:	b21b      	sxth	r3, r3
 8011482:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if(pos.y > draw_ctx->clip_area->y2) return;
 8011486:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801148a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801148e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	689b      	ldr	r3, [r3, #8]
 8011496:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801149a:	429a      	cmp	r2, r3
 801149c:	dc18      	bgt.n	80114d0 <lv_draw_label+0xc2c>
    while(txt[line_start] != '\0') {
 801149e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80114ac:	4413      	add	r3, r2
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f47f ad1a 	bne.w	8010eea <lv_draw_label+0x646>
 80114b6:	e00c      	b.n	80114d2 <lv_draw_label+0xc2e>
    if(dsc->opa <= LV_OPA_MIN) return;
 80114b8:	bf00      	nop
 80114ba:	e00a      	b.n	80114d2 <lv_draw_label+0xc2e>
        return;
 80114bc:	bf00      	nop
 80114be:	e008      	b.n	80114d2 <lv_draw_label+0xc2e>
        return;
 80114c0:	bf00      	nop
 80114c2:	e006      	b.n	80114d2 <lv_draw_label+0xc2e>
        return;
 80114c4:	bf00      	nop
 80114c6:	e004      	b.n	80114d2 <lv_draw_label+0xc2e>
    if(!clip_ok) return;
 80114c8:	bf00      	nop
 80114ca:	e002      	b.n	80114d2 <lv_draw_label+0xc2e>
        if(txt[line_start] == '\0') return;
 80114cc:	bf00      	nop
 80114ce:	e000      	b.n	80114d2 <lv_draw_label+0xc2e>
        if(pos.y > draw_ctx->clip_area->y2) return;
 80114d0:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 80114d2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bdb0      	pop	{r4, r5, r7, pc}
 80114da:	bf00      	nop

080114dc <lv_draw_letter>:

void lv_draw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                    uint32_t letter)
{
 80114dc:	b590      	push	{r4, r7, lr}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
 80114e8:	603b      	str	r3, [r7, #0]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	69dc      	ldr	r4, [r3, #28]
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	68b9      	ldr	r1, [r7, #8]
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	47a0      	blx	r4
}
 80114f8:	bf00      	nop
 80114fa:	3714      	adds	r7, #20
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd90      	pop	{r4, r7, pc}

08011500 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8011500:	b480      	push	{r7}
 8011502:	b085      	sub	sp, #20
 8011504:	af00      	add	r7, sp, #0
 8011506:	4603      	mov	r3, r0
 8011508:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 801150e:	79fb      	ldrb	r3, [r7, #7]
 8011510:	2b2f      	cmp	r3, #47	; 0x2f
 8011512:	d906      	bls.n	8011522 <hex_char_to_num+0x22>
 8011514:	79fb      	ldrb	r3, [r7, #7]
 8011516:	2b39      	cmp	r3, #57	; 0x39
 8011518:	d803      	bhi.n	8011522 <hex_char_to_num+0x22>
        result = hex - '0';
 801151a:	79fb      	ldrb	r3, [r7, #7]
 801151c:	3b30      	subs	r3, #48	; 0x30
 801151e:	73fb      	strb	r3, [r7, #15]
 8011520:	e02d      	b.n	801157e <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8011522:	79fb      	ldrb	r3, [r7, #7]
 8011524:	2b60      	cmp	r3, #96	; 0x60
 8011526:	d902      	bls.n	801152e <hex_char_to_num+0x2e>
 8011528:	79fb      	ldrb	r3, [r7, #7]
 801152a:	3b20      	subs	r3, #32
 801152c:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 801152e:	79fb      	ldrb	r3, [r7, #7]
 8011530:	3b41      	subs	r3, #65	; 0x41
 8011532:	2b05      	cmp	r3, #5
 8011534:	d820      	bhi.n	8011578 <hex_char_to_num+0x78>
 8011536:	a201      	add	r2, pc, #4	; (adr r2, 801153c <hex_char_to_num+0x3c>)
 8011538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801153c:	08011555 	.word	0x08011555
 8011540:	0801155b 	.word	0x0801155b
 8011544:	08011561 	.word	0x08011561
 8011548:	08011567 	.word	0x08011567
 801154c:	0801156d 	.word	0x0801156d
 8011550:	08011573 	.word	0x08011573
            case 'A':
                result = 10;
 8011554:	230a      	movs	r3, #10
 8011556:	73fb      	strb	r3, [r7, #15]
                break;
 8011558:	e011      	b.n	801157e <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 801155a:	230b      	movs	r3, #11
 801155c:	73fb      	strb	r3, [r7, #15]
                break;
 801155e:	e00e      	b.n	801157e <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 8011560:	230c      	movs	r3, #12
 8011562:	73fb      	strb	r3, [r7, #15]
                break;
 8011564:	e00b      	b.n	801157e <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 8011566:	230d      	movs	r3, #13
 8011568:	73fb      	strb	r3, [r7, #15]
                break;
 801156a:	e008      	b.n	801157e <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 801156c:	230e      	movs	r3, #14
 801156e:	73fb      	strb	r3, [r7, #15]
                break;
 8011570:	e005      	b.n	801157e <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 8011572:	230f      	movs	r3, #15
 8011574:	73fb      	strb	r3, [r7, #15]
                break;
 8011576:	e002      	b.n	801157e <hex_char_to_num+0x7e>
            default:
                result = 0;
 8011578:	2300      	movs	r3, #0
 801157a:	73fb      	strb	r3, [r7, #15]
                break;
 801157c:	bf00      	nop
        }
    }

    return result;
 801157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011580:	4618      	mov	r0, r3
 8011582:	3714      	adds	r7, #20
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b088      	sub	sp, #32
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	4613      	mov	r3, r2
 8011598:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_init == NULL) return NULL;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d101      	bne.n	80115a6 <lv_draw_layer_create+0x1a>
 80115a2:	2300      	movs	r3, #0
 80115a4:	e044      	b.n	8011630 <lv_draw_layer_create+0xa4>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115aa:	4618      	mov	r0, r3
 80115ac:	f010 fba8 	bl	8021d00 <lv_mem_alloc>
 80115b0:	61f8      	str	r0, [r7, #28]
    LV_ASSERT_MALLOC(layer_ctx);
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d100      	bne.n	80115ba <lv_draw_layer_create+0x2e>
 80115b8:	e7fe      	b.n	80115b8 <lv_draw_layer_create+0x2c>
    if(layer_ctx == NULL) {
 80115ba:	69fb      	ldr	r3, [r7, #28]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d101      	bne.n	80115c4 <lv_draw_layer_create+0x38>
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
 80115c0:	2300      	movs	r3, #0
 80115c2:	e035      	b.n	8011630 <lv_draw_layer_create+0xa4>
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115c8:	4619      	mov	r1, r3
 80115ca:	69f8      	ldr	r0, [r7, #28]
 80115cc:	f010 ffcc 	bl	8022568 <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80115d0:	f7fd f858 	bl	800e684 <_lv_refr_get_disp_refreshing>
 80115d4:	61b8      	str	r0, [r7, #24]
    layer_ctx->original.buf = draw_ctx->buf;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	621a      	str	r2, [r3, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	685a      	ldr	r2, [r3, #4]
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	61da      	str	r2, [r3, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	689a      	ldr	r2, [r3, #8]
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	619a      	str	r2, [r3, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	7c1b      	ldrb	r3, [r3, #16]
 80115f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80115f8:	b2db      	uxtb	r3, r3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	bf14      	ite	ne
 80115fe:	2301      	movne	r3, #1
 8011600:	2300      	moveq	r3, #0
 8011602:	b2da      	uxtb	r2, r3
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 801160a:	69fb      	ldr	r3, [r7, #28]
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	6810      	ldr	r0, [r2, #0]
 8011610:	6851      	ldr	r1, [r2, #4]
 8011612:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011618:	79fa      	ldrb	r2, [r7, #7]
 801161a:	69f9      	ldr	r1, [r7, #28]
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	4798      	blx	r3
 8011620:	6178      	str	r0, [r7, #20]
    if(NULL == init_layer_ctx) {
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d102      	bne.n	801162e <lv_draw_layer_create+0xa2>
        lv_mem_free(layer_ctx);
 8011628:	69f8      	ldr	r0, [r7, #28]
 801162a:	f010 fb99 	bl	8021d60 <lv_mem_free>
    }
    return init_layer_ctx;
 801162e:	697b      	ldr	r3, [r7, #20]
}
 8011630:	4618      	mov	r0, r3
 8011632:	3720      	adds	r7, #32
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	4613      	mov	r3, r2
 8011644:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801164a:	2b00      	cmp	r3, #0
 801164c:	d005      	beq.n	801165a <lv_draw_layer_adjust+0x22>
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011652:	79fa      	ldrb	r2, [r7, #7]
 8011654:	68b9      	ldr	r1, [r7, #8]
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	4798      	blx	r3
}
 801165a:	bf00      	nop
 801165c:	3710      	adds	r7, #16
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}

08011662 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 8011662:	b580      	push	{r7, lr}
 8011664:	b084      	sub	sp, #16
 8011666:	af00      	add	r7, sp, #0
 8011668:	60f8      	str	r0, [r7, #12]
 801166a:	60b9      	str	r1, [r7, #8]
 801166c:	607a      	str	r2, [r7, #4]
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011672:	2b00      	cmp	r3, #0
 8011674:	d005      	beq.n	8011682 <lv_draw_layer_blend+0x20>
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801167a:	687a      	ldr	r2, [r7, #4]
 801167c:	68b9      	ldr	r1, [r7, #8]
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	4798      	blx	r3
}
 8011682:	bf00      	nop
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b084      	sub	sp, #16
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]

    lv_draw_wait_for_finish(draw_ctx);
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7fe fcb9 	bl	801000c <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	6a1a      	ldr	r2, [r3, #32]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	69da      	ldr	r2, [r3, #28]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	699a      	ldr	r2, [r3, #24]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80116b2:	f7fc ffe7 	bl	800e684 <_lv_refr_get_disp_refreshing>
 80116b6:	60f8      	str	r0, [r7, #12]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 80116c2:	7c13      	ldrb	r3, [r2, #16]
 80116c4:	f361 1386 	bfi	r3, r1, #6, #1
 80116c8:	7413      	strb	r3, [r2, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d004      	beq.n	80116dc <lv_draw_layer_destroy+0x52>
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116d6:	6839      	ldr	r1, [r7, #0]
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 80116dc:	6838      	ldr	r0, [r7, #0]
 80116de:	f010 fb3f 	bl	8021d60 <lv_mem_free>
}
 80116e2:	bf00      	nop
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80116ea:	b480      	push	{r7}
 80116ec:	b083      	sub	sp, #12
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	4603      	mov	r3, r0
 80116f2:	71fb      	strb	r3, [r7, #7]
 80116f4:	460b      	mov	r3, r1
 80116f6:	71bb      	strb	r3, [r7, #6]
 80116f8:	4613      	mov	r3, r2
 80116fa:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80116fc:	797b      	ldrb	r3, [r7, #5]
 80116fe:	09db      	lsrs	r3, r3, #7
 8011700:	b2da      	uxtb	r2, r3
 8011702:	79bb      	ldrb	r3, [r7, #6]
 8011704:	09db      	lsrs	r3, r3, #7
 8011706:	b2db      	uxtb	r3, r3
 8011708:	4313      	orrs	r3, r2
 801170a:	b2da      	uxtb	r2, r3
 801170c:	79fb      	ldrb	r3, [r7, #7]
 801170e:	09db      	lsrs	r3, r3, #7
 8011710:	b2db      	uxtb	r3, r3
 8011712:	4313      	orrs	r3, r2
 8011714:	b2db      	uxtb	r3, r3
}
 8011716:	4618      	mov	r0, r3
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8011722:	b580      	push	{r7, lr}
 8011724:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8011726:	2200      	movs	r2, #0
 8011728:	2100      	movs	r1, #0
 801172a:	2000      	movs	r0, #0
 801172c:	f7ff ffdd 	bl	80116ea <lv_color_make>
 8011730:	4603      	mov	r3, r0
}
 8011732:	4618      	mov	r0, r3
 8011734:	bd80      	pop	{r7, pc}

08011736 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 8011736:	b590      	push	{r4, r7, lr}
 8011738:	b083      	sub	sp, #12
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 801173e:	210a      	movs	r1, #10
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f010 ff11 	bl	8022568 <lv_memset_00>
    dsc->width = 1;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2201      	movs	r2, #1
 801174a:	805a      	strh	r2, [r3, #2]
    dsc->opa = LV_OPA_COVER;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	22ff      	movs	r2, #255	; 0xff
 8011750:	721a      	strb	r2, [r3, #8]
    dsc->color = lv_color_black();
 8011752:	687c      	ldr	r4, [r7, #4]
 8011754:	f7ff ffe5 	bl	8011722 <lv_color_black>
 8011758:	7020      	strb	r0, [r4, #0]
}
 801175a:	bf00      	nop
 801175c:	370c      	adds	r7, #12
 801175e:	46bd      	mov	sp, r7
 8011760:	bd90      	pop	{r4, r7, pc}

08011762 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 8011762:	b590      	push	{r4, r7, lr}
 8011764:	b085      	sub	sp, #20
 8011766:	af00      	add	r7, sp, #0
 8011768:	60f8      	str	r0, [r7, #12]
 801176a:	60b9      	str	r1, [r7, #8]
 801176c:	607a      	str	r2, [r7, #4]
 801176e:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d00b      	beq.n	8011792 <lv_draw_line+0x30>
    if(dsc->opa <= LV_OPA_MIN) return;
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	7a1b      	ldrb	r3, [r3, #8]
 801177e:	2b02      	cmp	r3, #2
 8011780:	d909      	bls.n	8011796 <lv_draw_line+0x34>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	6a1c      	ldr	r4, [r3, #32]
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	68b9      	ldr	r1, [r7, #8]
 801178c:	68f8      	ldr	r0, [r7, #12]
 801178e:	47a0      	blx	r4
 8011790:	e002      	b.n	8011798 <lv_draw_line+0x36>
    if(dsc->width == 0) return;
 8011792:	bf00      	nop
 8011794:	e000      	b.n	8011798 <lv_draw_line+0x36>
    if(dsc->opa <= LV_OPA_MIN) return;
 8011796:	bf00      	nop
}
 8011798:	3714      	adds	r7, #20
 801179a:	46bd      	mov	sp, r7
 801179c:	bd90      	pop	{r4, r7, pc}

0801179e <lv_area_copy>:
{
 801179e:	b480      	push	{r7}
 80117a0:	b083      	sub	sp, #12
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
 80117a6:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	80da      	strh	r2, [r3, #6]
}
 80117d0:	bf00      	nop
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <lv_area_get_width>:
{
 80117dc:	b480      	push	{r7}
 80117de:	b083      	sub	sp, #12
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	3301      	adds	r3, #1
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	b21b      	sxth	r3, r3
}
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr

0801180a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801180a:	b480      	push	{r7}
 801180c:	b083      	sub	sp, #12
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011818:	b29a      	uxth	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011820:	b29b      	uxth	r3, r3
 8011822:	1ad3      	subs	r3, r2, r3
 8011824:	b29b      	uxth	r3, r3
 8011826:	3301      	adds	r3, #1
 8011828:	b29b      	uxth	r3, r3
 801182a:	b21b      	sxth	r3, r3
}
 801182c:	4618      	mov	r0, r3
 801182e:	370c      	adds	r7, #12
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 8011838:	b480      	push	{r7}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011842:	2300      	movs	r3, #0
 8011844:	73fb      	strb	r3, [r7, #15]
 8011846:	e008      	b.n	801185a <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8011848:	7bfb      	ldrb	r3, [r7, #15]
 801184a:	4a13      	ldr	r2, [pc, #76]	; (8011898 <lv_draw_mask_add+0x60>)
 801184c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d006      	beq.n	8011862 <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011854:	7bfb      	ldrb	r3, [r7, #15]
 8011856:	3301      	adds	r3, #1
 8011858:	73fb      	strb	r3, [r7, #15]
 801185a:	7bfb      	ldrb	r3, [r7, #15]
 801185c:	2b0f      	cmp	r3, #15
 801185e:	d9f3      	bls.n	8011848 <lv_draw_mask_add+0x10>
 8011860:	e000      	b.n	8011864 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8011862:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 8011864:	7bfb      	ldrb	r3, [r7, #15]
 8011866:	2b0f      	cmp	r3, #15
 8011868:	d902      	bls.n	8011870 <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 801186a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801186e:	e00c      	b.n	801188a <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 8011870:	7bfb      	ldrb	r3, [r7, #15]
 8011872:	4909      	ldr	r1, [pc, #36]	; (8011898 <lv_draw_mask_add+0x60>)
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 801187a:	7bfb      	ldrb	r3, [r7, #15]
 801187c:	4a06      	ldr	r2, [pc, #24]	; (8011898 <lv_draw_mask_add+0x60>)
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	4413      	add	r3, r2
 8011882:	683a      	ldr	r2, [r7, #0]
 8011884:	605a      	str	r2, [r3, #4]

    return i;
 8011886:	7bfb      	ldrb	r3, [r7, #15]
 8011888:	b21b      	sxth	r3, r3
}
 801188a:	4618      	mov	r0, r3
 801188c:	3714      	adds	r7, #20
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr
 8011896:	bf00      	nop
 8011898:	200009d0 	.word	0x200009d0

0801189c <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 801189c:	b590      	push	{r4, r7, lr}
 801189e:	b08b      	sub	sp, #44	; 0x2c
 80118a0:	af02      	add	r7, sp, #8
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	4608      	mov	r0, r1
 80118a6:	4611      	mov	r1, r2
 80118a8:	461a      	mov	r2, r3
 80118aa:	4603      	mov	r3, r0
 80118ac:	817b      	strh	r3, [r7, #10]
 80118ae:	460b      	mov	r3, r1
 80118b0:	813b      	strh	r3, [r7, #8]
 80118b2:	4613      	mov	r3, r2
 80118b4:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 80118b6:	2300      	movs	r3, #0
 80118b8:	77fb      	strb	r3, [r7, #31]
    _lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 80118ba:	4b19      	ldr	r3, [pc, #100]	; (8011920 <lv_draw_mask_apply+0x84>)
 80118bc:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 80118be:	e021      	b.n	8011904 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 80118c0:	69bb      	ldr	r3, [r7, #24]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 80118c6:	2301      	movs	r3, #1
 80118c8:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	681c      	ldr	r4, [r3, #0]
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80118d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80118da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80118de:	9300      	str	r3, [sp, #0]
 80118e0:	4603      	mov	r3, r0
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	47a0      	blx	r4
 80118e6:	4603      	mov	r3, r0
 80118e8:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 80118ea:	7cfb      	ldrb	r3, [r7, #19]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d101      	bne.n	80118f4 <lv_draw_mask_apply+0x58>
 80118f0:	2300      	movs	r3, #0
 80118f2:	e011      	b.n	8011918 <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 80118f4:	7cfb      	ldrb	r3, [r7, #19]
 80118f6:	2b02      	cmp	r3, #2
 80118f8:	d101      	bne.n	80118fe <lv_draw_mask_apply+0x62>
 80118fa:	2301      	movs	r3, #1
 80118fc:	77fb      	strb	r3, [r7, #31]

        m++;
 80118fe:	69bb      	ldr	r3, [r7, #24]
 8011900:	3308      	adds	r3, #8
 8011902:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d1d9      	bne.n	80118c0 <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 801190c:	7ffb      	ldrb	r3, [r7, #31]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d001      	beq.n	8011916 <lv_draw_mask_apply+0x7a>
 8011912:	2302      	movs	r3, #2
 8011914:	e000      	b.n	8011918 <lv_draw_mask_apply+0x7c>
 8011916:	2301      	movs	r3, #1
}
 8011918:	4618      	mov	r0, r3
 801191a:	3724      	adds	r7, #36	; 0x24
 801191c:	46bd      	mov	sp, r7
 801191e:	bd90      	pop	{r4, r7, pc}
 8011920:	200009d0 	.word	0x200009d0

08011924 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 8011924:	b480      	push	{r7}
 8011926:	b085      	sub	sp, #20
 8011928:	af00      	add	r7, sp, #0
 801192a:	4603      	mov	r3, r0
 801192c:	80fb      	strh	r3, [r7, #6]
    _lv_draw_mask_common_dsc_t * p = NULL;
 801192e:	2300      	movs	r3, #0
 8011930:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 8011932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801193a:	d012      	beq.n	8011962 <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 801193c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011940:	4a0b      	ldr	r2, [pc, #44]	; (8011970 <lv_draw_mask_remove_id+0x4c>)
 8011942:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011946:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8011948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801194c:	4a08      	ldr	r2, [pc, #32]	; (8011970 <lv_draw_mask_remove_id+0x4c>)
 801194e:	2100      	movs	r1, #0
 8011950:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8011954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011958:	4a05      	ldr	r2, [pc, #20]	; (8011970 <lv_draw_mask_remove_id+0x4c>)
 801195a:	00db      	lsls	r3, r3, #3
 801195c:	4413      	add	r3, r2
 801195e:	2200      	movs	r2, #0
 8011960:	605a      	str	r2, [r3, #4]
    }

    return p;
 8011962:	68fb      	ldr	r3, [r7, #12]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3714      	adds	r7, #20
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	200009d0 	.word	0x200009d0

08011974 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * p = NULL;
 801197c:	2300      	movs	r3, #0
 801197e:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011980:	2300      	movs	r3, #0
 8011982:	72fb      	strb	r3, [r7, #11]
 8011984:	e014      	b.n	80119b0 <lv_draw_mask_remove_custom+0x3c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8011986:	7afb      	ldrb	r3, [r7, #11]
 8011988:	4a0d      	ldr	r2, [pc, #52]	; (80119c0 <lv_draw_mask_remove_custom+0x4c>)
 801198a:	00db      	lsls	r3, r3, #3
 801198c:	4413      	add	r3, r2
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	429a      	cmp	r2, r3
 8011994:	d109      	bne.n	80119aa <lv_draw_mask_remove_custom+0x36>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011996:	7afb      	ldrb	r3, [r7, #11]
 8011998:	4a09      	ldr	r2, [pc, #36]	; (80119c0 <lv_draw_mask_remove_custom+0x4c>)
 801199a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801199e:	60fb      	str	r3, [r7, #12]
            lv_draw_mask_remove_id(i);
 80119a0:	7afb      	ldrb	r3, [r7, #11]
 80119a2:	b21b      	sxth	r3, r3
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7ff ffbd 	bl	8011924 <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80119aa:	7afb      	ldrb	r3, [r7, #11]
 80119ac:	3301      	adds	r3, #1
 80119ae:	72fb      	strb	r3, [r7, #11]
 80119b0:	7afb      	ldrb	r3, [r7, #11]
 80119b2:	2b0f      	cmp	r3, #15
 80119b4:	d9e7      	bls.n	8011986 <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 80119b6:	68fb      	ldr	r3, [r7, #12]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	200009d0 	.word	0x200009d0

080119c4 <lv_draw_mask_free_param>:
 * Needs to be called only in special cases when the mask is not added by `lv_draw_mask_add`
 * and not removed by `lv_draw_mask_remove_id` or `lv_draw_mask_remove_custom`
 * @param p pointer to a mask parameter
 */
void lv_draw_mask_free_param(void * p)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b086      	sub	sp, #24
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * pdsc = p;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	617b      	str	r3, [r7, #20]
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	791b      	ldrb	r3, [r3, #4]
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d11c      	bne.n	8011a12 <lv_draw_mask_free_param+0x4e>
        lv_draw_mask_radius_param_t * radius_p = (lv_draw_mask_radius_param_t *) p;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	60fb      	str	r3, [r7, #12]
        if(radius_p->circle) {
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	695b      	ldr	r3, [r3, #20]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d021      	beq.n	8011a28 <lv_draw_mask_free_param+0x64>
            if(radius_p->circle->life < 0) {
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	695b      	ldr	r3, [r3, #20]
 80119e8:	691b      	ldr	r3, [r3, #16]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	da0b      	bge.n	8011a06 <lv_draw_mask_free_param+0x42>
                lv_mem_free(radius_p->circle->cir_opa);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	695b      	ldr	r3, [r3, #20]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f010 f9b3 	bl	8021d60 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	695b      	ldr	r3, [r3, #20]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f010 f9ae 	bl	8021d60 <lv_mem_free>
    }
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
        lv_mem_free(poly_p->cfg.points);
    }
}
 8011a04:	e010      	b.n	8011a28 <lv_draw_mask_free_param+0x64>
                radius_p->circle->used_cnt--;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	695b      	ldr	r3, [r3, #20]
 8011a0a:	695a      	ldr	r2, [r3, #20]
 8011a0c:	3a01      	subs	r2, #1
 8011a0e:	615a      	str	r2, [r3, #20]
}
 8011a10:	e00a      	b.n	8011a28 <lv_draw_mask_free_param+0x64>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	791b      	ldrb	r3, [r3, #4]
 8011a16:	2b05      	cmp	r3, #5
 8011a18:	d106      	bne.n	8011a28 <lv_draw_mask_free_param+0x64>
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	613b      	str	r3, [r7, #16]
        lv_mem_free(poly_p->cfg.points);
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	689b      	ldr	r3, [r3, #8]
 8011a22:	4618      	mov	r0, r3
 8011a24:	f010 f99c 	bl	8021d60 <lv_mem_free>
}
 8011a28:	bf00      	nop
 8011a2a:	3718      	adds	r7, #24
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <_lv_draw_mask_cleanup>:

void _lv_draw_mask_cleanup(void)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8011a36:	2300      	movs	r3, #0
 8011a38:	71fb      	strb	r3, [r7, #7]
 8011a3a:	e022      	b.n	8011a82 <_lv_draw_mask_cleanup+0x52>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 8011a3c:	79fa      	ldrb	r2, [r7, #7]
 8011a3e:	4915      	ldr	r1, [pc, #84]	; (8011a94 <_lv_draw_mask_cleanup+0x64>)
 8011a40:	4613      	mov	r3, r2
 8011a42:	00db      	lsls	r3, r3, #3
 8011a44:	1a9b      	subs	r3, r3, r2
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	440b      	add	r3, r1
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d00a      	beq.n	8011a66 <_lv_draw_mask_cleanup+0x36>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 8011a50:	79fa      	ldrb	r2, [r7, #7]
 8011a52:	4910      	ldr	r1, [pc, #64]	; (8011a94 <_lv_draw_mask_cleanup+0x64>)
 8011a54:	4613      	mov	r3, r2
 8011a56:	00db      	lsls	r3, r3, #3
 8011a58:	1a9b      	subs	r3, r3, r2
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	440b      	add	r3, r1
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4618      	mov	r0, r3
 8011a62:	f010 f97d 	bl	8021d60 <lv_mem_free>
        }
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8011a66:	79fa      	ldrb	r2, [r7, #7]
 8011a68:	4613      	mov	r3, r2
 8011a6a:	00db      	lsls	r3, r3, #3
 8011a6c:	1a9b      	subs	r3, r3, r2
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	4a08      	ldr	r2, [pc, #32]	; (8011a94 <_lv_draw_mask_cleanup+0x64>)
 8011a72:	4413      	add	r3, r2
 8011a74:	211c      	movs	r1, #28
 8011a76:	4618      	mov	r0, r3
 8011a78:	f010 fd76 	bl	8022568 <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8011a7c:	79fb      	ldrb	r3, [r7, #7]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	71fb      	strb	r3, [r7, #7]
 8011a82:	79fb      	ldrb	r3, [r7, #7]
 8011a84:	2b03      	cmp	r3, #3
 8011a86:	d9d9      	bls.n	8011a3c <_lv_draw_mask_cleanup+0xc>
    }
}
 8011a88:	bf00      	nop
 8011a8a:	bf00      	nop
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	20000960 	.word	0x20000960

08011a98 <lv_draw_mask_is_any>:
    }
    return cnt;
}

bool lv_draw_mask_is_any(const lv_area_t * a)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d107      	bne.n	8011ab6 <lv_draw_mask_is_any+0x1e>
 8011aa6:	4b2a      	ldr	r3, [pc, #168]	; (8011b50 <lv_draw_mask_is_any+0xb8>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	bf14      	ite	ne
 8011aae:	2301      	movne	r3, #1
 8011ab0:	2300      	moveq	r3, #0
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	e048      	b.n	8011b48 <lv_draw_mask_is_any+0xb0>

    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	75fb      	strb	r3, [r7, #23]
 8011aba:	e041      	b.n	8011b40 <lv_draw_mask_is_any+0xa8>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011abc:	7dfb      	ldrb	r3, [r7, #23]
 8011abe:	4a24      	ldr	r2, [pc, #144]	; (8011b50 <lv_draw_mask_is_any+0xb8>)
 8011ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011ac4:	613b      	str	r3, [r7, #16]
        if(comm_param == NULL) continue;
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d035      	beq.n	8011b38 <lv_draw_mask_is_any+0xa0>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	791b      	ldrb	r3, [r3, #4]
 8011ad0:	2b02      	cmp	r3, #2
 8011ad2:	d12f      	bne.n	8011b34 <lv_draw_mask_is_any+0x9c>
            lv_draw_mask_radius_param_t * radius_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011ad4:	7dfb      	ldrb	r3, [r7, #23]
 8011ad6:	4a1e      	ldr	r2, [pc, #120]	; (8011b50 <lv_draw_mask_is_any+0xb8>)
 8011ad8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011adc:	60fb      	str	r3, [r7, #12]
            if(radius_param->cfg.outer) {
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	7c9b      	ldrb	r3, [r3, #18]
 8011ae2:	f003 0301 	and.w	r3, r3, #1
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d011      	beq.n	8011b10 <lv_draw_mask_is_any+0x78>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	f103 0108 	add.w	r1, r3, #8
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011af8:	461a      	mov	r2, r3
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f00f f862 	bl	8020bc4 <_lv_area_is_out>
 8011b00:	4603      	mov	r3, r0
 8011b02:	f083 0301 	eor.w	r3, r3, #1
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d016      	beq.n	8011b3a <lv_draw_mask_is_any+0xa2>
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	e01b      	b.n	8011b48 <lv_draw_mask_is_any+0xb0>
            }
            else {
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	f103 0108 	add.w	r1, r3, #8
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f00e ffb2 	bl	8020a88 <_lv_area_is_in>
 8011b24:	4603      	mov	r3, r0
 8011b26:	f083 0301 	eor.w	r3, r3, #1
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d004      	beq.n	8011b3a <lv_draw_mask_is_any+0xa2>
 8011b30:	2301      	movs	r3, #1
 8011b32:	e009      	b.n	8011b48 <lv_draw_mask_is_any+0xb0>
            }
        }
        else {
            return true;
 8011b34:	2301      	movs	r3, #1
 8011b36:	e007      	b.n	8011b48 <lv_draw_mask_is_any+0xb0>
        if(comm_param == NULL) continue;
 8011b38:	bf00      	nop
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011b3a:	7dfb      	ldrb	r3, [r7, #23]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	75fb      	strb	r3, [r7, #23]
 8011b40:	7dfb      	ldrb	r3, [r7, #23]
 8011b42:	2b0f      	cmp	r3, #15
 8011b44:	d9ba      	bls.n	8011abc <lv_draw_mask_is_any+0x24>
        }
    }

    return false;
 8011b46:	2300      	movs	r3, #0

}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3718      	adds	r7, #24
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}
 8011b50:	200009d0 	.word	0x200009d0

08011b54 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b08a      	sub	sp, #40	; 0x28
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	4608      	mov	r0, r1
 8011b5e:	4611      	mov	r1, r2
 8011b60:	461a      	mov	r2, r3
 8011b62:	4603      	mov	r3, r0
 8011b64:	817b      	strh	r3, [r7, #10]
 8011b66:	460b      	mov	r3, r1
 8011b68:	813b      	strh	r3, [r7, #8]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	80fb      	strh	r3, [r7, #6]
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8011b6e:	212c      	movs	r1, #44	; 0x2c
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f010 fcf9 	bl	8022568 <lv_memset_00>

    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8011b76:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011b7a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d10f      	bne.n	8011ba2 <lv_draw_mask_line_points_init+0x4e>
 8011b82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011b86:	2b03      	cmp	r3, #3
 8011b88:	d10b      	bne.n	8011ba2 <lv_draw_mask_line_points_init+0x4e>
        p1y--;
 8011b8a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011b8e:	b29b      	uxth	r3, r3
 8011b90:	3b01      	subs	r3, #1
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	813b      	strh	r3, [r7, #8]
        p2y--;
 8011b96:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    if(p1y > p2y) {
 8011ba2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011ba6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011baa:	429a      	cmp	r2, r3
 8011bac:	dd0b      	ble.n	8011bc6 <lv_draw_mask_line_points_init+0x72>
        lv_coord_t t;
        t = p2x;
 8011bae:	88fb      	ldrh	r3, [r7, #6]
 8011bb0:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 8011bb2:	897b      	ldrh	r3, [r7, #10]
 8011bb4:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 8011bb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bb8:	817b      	strh	r3, [r7, #10]

        t = p2y;
 8011bba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 8011bbe:	893b      	ldrh	r3, [r7, #8]
 8011bc0:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 8011bc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bc4:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	897a      	ldrh	r2, [r7, #10]
 8011bca:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	893a      	ldrh	r2, [r7, #8]
 8011bd0:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	88fa      	ldrh	r2, [r7, #6]
 8011bd6:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011bdc:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 8011bde:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011be2:	f003 0303 	and.w	r3, r3, #3
 8011be6:	b2d9      	uxtb	r1, r3
 8011be8:	68fa      	ldr	r2, [r7, #12]
 8011bea:	7c13      	ldrb	r3, [r2, #16]
 8011bec:	f361 0301 	bfi	r3, r1, #0, #2
 8011bf0:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	897a      	ldrh	r2, [r7, #10]
 8011bf6:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	893a      	ldrh	r2, [r7, #8]
 8011bfc:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8011bfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011c02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011c06:	1ad3      	subs	r3, r2, r3
 8011c08:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011c0c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011c10:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8011c14:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011c18:	1acb      	subs	r3, r1, r3
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	bfb8      	it	lt
 8011c1e:	425b      	neglt	r3, r3
 8011c20:	429a      	cmp	r2, r3
 8011c22:	bfcc      	ite	gt
 8011c24:	2301      	movgt	r3, #1
 8011c26:	2300      	movle	r3, #0
 8011c28:	b2d9      	uxtb	r1, r3
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011c30:	f361 0300 	bfi	r3, r1, #0, #1
 8011c34:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2200      	movs	r2, #0
 8011c42:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	4a63      	ldr	r2, [pc, #396]	; (8011dd4 <lv_draw_mask_line_points_init+0x280>)
 8011c48:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 8011c50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011c54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011c58:	1ad3      	subs	r3, r2, r3
 8011c5a:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 8011c5c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8011c60:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c6e:	f003 0301 	and.w	r3, r3, #1
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d024      	beq.n	8011cc2 <lv_draw_mask_line_points_init+0x16e>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8011c78:	6a3b      	ldr	r3, [r7, #32]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00c      	beq.n	8011c98 <lv_draw_mask_line_points_init+0x144>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8011c7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011c82:	6a3b      	ldr	r3, [r7, #32]
 8011c84:	fb92 f3f3 	sdiv	r3, r2, r3
 8011c88:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	69fa      	ldr	r2, [r7, #28]
 8011c8e:	fb02 f303 	mul.w	r3, r2, r3
 8011c92:	129a      	asrs	r2, r3, #10
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00c      	beq.n	8011cb8 <lv_draw_mask_line_points_init+0x164>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011c9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ca8:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	6a3a      	ldr	r2, [r7, #32]
 8011cae:	fb02 f303 	mul.w	r3, r2, r3
 8011cb2:	129a      	asrs	r2, r3, #10
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	69da      	ldr	r2, [r3, #28]
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	621a      	str	r2, [r3, #32]
 8011cc0:	e023      	b.n	8011d0a <lv_draw_mask_line_points_init+0x1b6>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d00c      	beq.n	8011ce2 <lv_draw_mask_line_points_init+0x18e>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011cc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8011cd2:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	6a3a      	ldr	r2, [r7, #32]
 8011cd8:	fb02 f303 	mul.w	r3, r2, r3
 8011cdc:	129a      	asrs	r2, r3, #10
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 8011ce2:	6a3b      	ldr	r3, [r7, #32]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00c      	beq.n	8011d02 <lv_draw_mask_line_points_init+0x1ae>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011ce8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	fb92 f3f3 	sdiv	r3, r2, r3
 8011cf2:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8011cf4:	69bb      	ldr	r3, [r7, #24]
 8011cf6:	69fa      	ldr	r2, [r7, #28]
 8011cf8:	fb02 f303 	mul.w	r3, r2, r3
 8011cfc:	129a      	asrs	r2, r3, #10
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	699a      	ldr	r2, [r3, #24]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	7c1b      	ldrb	r3, [r3, #16]
 8011d0e:	f003 0303 	and.w	r3, r3, #3
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d107      	bne.n	8011d28 <lv_draw_mask_line_points_init+0x1d4>
 8011d18:	68fa      	ldr	r2, [r7, #12]
 8011d1a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011d1e:	f36f 0341 	bfc	r3, #1, #1
 8011d22:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011d26:	e043      	b.n	8011db0 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	7c1b      	ldrb	r3, [r3, #16]
 8011d2c:	f003 0303 	and.w	r3, r3, #3
 8011d30:	b2db      	uxtb	r3, r3
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d107      	bne.n	8011d46 <lv_draw_mask_line_points_init+0x1f2>
 8011d36:	68fa      	ldr	r2, [r7, #12]
 8011d38:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011d3c:	f043 0302 	orr.w	r3, r3, #2
 8011d40:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011d44:	e034      	b.n	8011db0 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	7c1b      	ldrb	r3, [r3, #16]
 8011d4a:	f003 0303 	and.w	r3, r3, #3
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	2b02      	cmp	r3, #2
 8011d52:	d113      	bne.n	8011d7c <lv_draw_mask_line_points_init+0x228>
        if(param->steep > 0) param->inv = 1;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	6a1b      	ldr	r3, [r3, #32]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	dd07      	ble.n	8011d6c <lv_draw_mask_line_points_init+0x218>
 8011d5c:	68fa      	ldr	r2, [r7, #12]
 8011d5e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011d62:	f043 0302 	orr.w	r3, r3, #2
 8011d66:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011d6a:	e021      	b.n	8011db0 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 0;
 8011d6c:	68fa      	ldr	r2, [r7, #12]
 8011d6e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011d72:	f36f 0341 	bfc	r3, #1, #1
 8011d76:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011d7a:	e019      	b.n	8011db0 <lv_draw_mask_line_points_init+0x25c>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	7c1b      	ldrb	r3, [r3, #16]
 8011d80:	f003 0303 	and.w	r3, r3, #3
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	2b03      	cmp	r3, #3
 8011d88:	d112      	bne.n	8011db0 <lv_draw_mask_line_points_init+0x25c>
        if(param->steep > 0) param->inv = 0;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	6a1b      	ldr	r3, [r3, #32]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	dd07      	ble.n	8011da2 <lv_draw_mask_line_points_init+0x24e>
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011d98:	f36f 0341 	bfc	r3, #1, #1
 8011d9c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011da0:	e006      	b.n	8011db0 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 1;
 8011da2:	68fa      	ldr	r2, [r7, #12]
 8011da4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011da8:	f043 0302 	orr.w	r3, r3, #2
 8011dac:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	6a1b      	ldr	r3, [r3, #32]
 8011db4:	109a      	asrs	r2, r3, #2
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	6a1b      	ldr	r3, [r3, #32]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	da04      	bge.n	8011dcc <lv_draw_mask_line_points_init+0x278>
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc6:	425a      	negs	r2, r3
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011dcc:	bf00      	nop
 8011dce:	3728      	adds	r7, #40	; 0x28
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}
 8011dd4:	08012209 	.word	0x08012209

08011dd8 <lv_draw_mask_line_angle_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_angle_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t py, int16_t angle,
                                  lv_draw_mask_line_side_t side)
{
 8011dd8:	b590      	push	{r4, r7, lr}
 8011dda:	b089      	sub	sp, #36	; 0x24
 8011ddc:	af02      	add	r7, sp, #8
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	4608      	mov	r0, r1
 8011de2:	4611      	mov	r1, r2
 8011de4:	461a      	mov	r2, r3
 8011de6:	4603      	mov	r3, r0
 8011de8:	817b      	strh	r3, [r7, #10]
 8011dea:	460b      	mov	r3, r1
 8011dec:	813b      	strh	r3, [r7, #8]
 8011dee:	4613      	mov	r3, r2
 8011df0:	80fb      	strh	r3, [r7, #6]
    /*Find an optimal degree.
     *lv_mask_line_points_init will swap the points to keep the smaller y in p1
     *Theoretically a line with `angle` or `angle+180` is the same only the points are swapped
     *Find the degree which keeps the origo in place*/
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 8011df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011df6:	2bb4      	cmp	r3, #180	; 0xb4
 8011df8:	dd03      	ble.n	8011e02 <lv_draw_mask_line_angle_init+0x2a>
 8011dfa:	88fb      	ldrh	r3, [r7, #6]
 8011dfc:	3bb4      	subs	r3, #180	; 0xb4
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	80fb      	strh	r3, [r7, #6]

    int32_t p2x;
    int32_t p2y;

    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 8011e02:	88fb      	ldrh	r3, [r7, #6]
 8011e04:	335a      	adds	r3, #90	; 0x5a
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	b21b      	sxth	r3, r3
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f00f fe5e 	bl	8021acc <lv_trigo_sin>
 8011e10:	4603      	mov	r3, r0
 8011e12:	115b      	asrs	r3, r3, #5
 8011e14:	b21b      	sxth	r3, r3
 8011e16:	461a      	mov	r2, r3
 8011e18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011e1c:	4413      	add	r3, r2
 8011e1e:	617b      	str	r3, [r7, #20]
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 8011e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f00f fe51 	bl	8021acc <lv_trigo_sin>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	115b      	asrs	r3, r3, #5
 8011e2e:	b21b      	sxth	r3, r3
 8011e30:	461a      	mov	r2, r3
 8011e32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011e36:	4413      	add	r3, r2
 8011e38:	613b      	str	r3, [r7, #16]

    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	b21c      	sxth	r4, r3
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	b21b      	sxth	r3, r3
 8011e42:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8011e46:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011e4a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011e4e:	9201      	str	r2, [sp, #4]
 8011e50:	9300      	str	r3, [sp, #0]
 8011e52:	4623      	mov	r3, r4
 8011e54:	4602      	mov	r2, r0
 8011e56:	68f8      	ldr	r0, [r7, #12]
 8011e58:	f7ff fe7c 	bl	8011b54 <lv_draw_mask_line_points_init>
}
 8011e5c:	bf00      	nop
 8011e5e:	371c      	adds	r7, #28
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd90      	pop	{r4, r7, pc}

08011e64 <lv_draw_mask_angle_init>:
 * @param start_angle start angle in degrees. 0 deg on the right, 90 deg, on the bottom
 * @param end_angle end angle
 */
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,
                             lv_coord_t start_angle, lv_coord_t end_angle)
{
 8011e64:	b590      	push	{r4, r7, lr}
 8011e66:	b089      	sub	sp, #36	; 0x24
 8011e68:	af02      	add	r7, sp, #8
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	4608      	mov	r0, r1
 8011e6e:	4611      	mov	r1, r2
 8011e70:	461a      	mov	r2, r3
 8011e72:	4603      	mov	r3, r0
 8011e74:	817b      	strh	r3, [r7, #10]
 8011e76:	460b      	mov	r3, r1
 8011e78:	813b      	strh	r3, [r7, #8]
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	80fb      	strh	r3, [r7, #6]
    lv_draw_mask_line_side_t start_side;
    lv_draw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
 8011e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	da02      	bge.n	8011e8c <lv_draw_mask_angle_init+0x28>
        start_angle = 0;
 8011e86:	2300      	movs	r3, #0
 8011e88:	80fb      	strh	r3, [r7, #6]
 8011e8a:	e007      	b.n	8011e9c <lv_draw_mask_angle_init+0x38>
    else if(start_angle > 359)
 8011e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e90:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011e94:	db02      	blt.n	8011e9c <lv_draw_mask_angle_init+0x38>
        start_angle = 359;
 8011e96:	f240 1367 	movw	r3, #359	; 0x167
 8011e9a:	80fb      	strh	r3, [r7, #6]

    if(end_angle < 0)
 8011e9c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	da02      	bge.n	8011eaa <lv_draw_mask_angle_init+0x46>
        end_angle = 0;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	853b      	strh	r3, [r7, #40]	; 0x28
 8011ea8:	e007      	b.n	8011eba <lv_draw_mask_angle_init+0x56>
    else if(end_angle > 359)
 8011eaa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011eae:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011eb2:	db02      	blt.n	8011eba <lv_draw_mask_angle_init+0x56>
        end_angle = 359;
 8011eb4:	f240 1367 	movw	r3, #359	; 0x167
 8011eb8:	853b      	strh	r3, [r7, #40]	; 0x28

    if(end_angle < start_angle) {
 8011eba:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8011ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	da0a      	bge.n	8011edc <lv_draw_mask_angle_init+0x78>
        param->delta_deg = 360 - start_angle + end_angle;
 8011ec6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011ec8:	88fb      	ldrh	r3, [r7, #6]
 8011eca:	1ad3      	subs	r3, r2, r3
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011eda:	e00b      	b.n	8011ef4 <lv_draw_mask_angle_init+0x90>
    }
    else {
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8011edc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8011ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	bfb8      	it	lt
 8011eea:	425b      	neglt	r3, r3
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    }

    param->cfg.start_angle = start_angle;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	88fa      	ldrh	r2, [r7, #6]
 8011ef8:	819a      	strh	r2, [r3, #12]
    param->cfg.end_angle = end_angle;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011efe:	81da      	strh	r2, [r3, #14]
    param->cfg.vertex_p.x = vertex_x;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	897a      	ldrh	r2, [r7, #10]
 8011f04:	811a      	strh	r2, [r3, #8]
    param->cfg.vertex_p.y = vertex_y;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	893a      	ldrh	r2, [r7, #8]
 8011f0a:	815a      	strh	r2, [r3, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	4a2f      	ldr	r2, [pc, #188]	; (8011fcc <lv_draw_mask_angle_init+0x168>)
 8011f10:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2201      	movs	r2, #1
 8011f16:	711a      	strb	r2, [r3, #4]

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");
 8011f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	db04      	blt.n	8011f2a <lv_draw_mask_angle_init+0xc6>
 8011f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f24:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011f28:	dd00      	ble.n	8011f2c <lv_draw_mask_angle_init+0xc8>
 8011f2a:	e7fe      	b.n	8011f2a <lv_draw_mask_angle_init+0xc6>

    if(start_angle >= 0 && start_angle < 180) {
 8011f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	db06      	blt.n	8011f42 <lv_draw_mask_angle_init+0xde>
 8011f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f38:	2bb3      	cmp	r3, #179	; 0xb3
 8011f3a:	dc02      	bgt.n	8011f42 <lv_draw_mask_angle_init+0xde>
        start_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	75fb      	strb	r3, [r7, #23]
 8011f40:	e001      	b.n	8011f46 <lv_draw_mask_angle_init+0xe2>
    }
    else
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8011f42:	2301      	movs	r3, #1
 8011f44:	75fb      	strb	r3, [r7, #23]

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");
 8011f46:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	db04      	blt.n	8011f58 <lv_draw_mask_angle_init+0xf4>
 8011f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f52:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011f56:	dd00      	ble.n	8011f5a <lv_draw_mask_angle_init+0xf6>
 8011f58:	e7fe      	b.n	8011f58 <lv_draw_mask_angle_init+0xf4>

    if(end_angle >= 0 && end_angle < 180) {
 8011f5a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	db06      	blt.n	8011f70 <lv_draw_mask_angle_init+0x10c>
 8011f62:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011f66:	2bb3      	cmp	r3, #179	; 0xb3
 8011f68:	dc02      	bgt.n	8011f70 <lv_draw_mask_angle_init+0x10c>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	75bb      	strb	r3, [r7, #22]
 8011f6e:	e00d      	b.n	8011f8c <lv_draw_mask_angle_init+0x128>
    }
    else if(end_angle >= 180 && end_angle < 360) {
 8011f70:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011f74:	2bb3      	cmp	r3, #179	; 0xb3
 8011f76:	dd07      	ble.n	8011f88 <lv_draw_mask_angle_init+0x124>
 8011f78:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011f7c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011f80:	da02      	bge.n	8011f88 <lv_draw_mask_angle_init+0x124>
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8011f82:	2300      	movs	r3, #0
 8011f84:	75bb      	strb	r3, [r7, #22]
 8011f86:	e001      	b.n	8011f8c <lv_draw_mask_angle_init+0x128>
    }
    else
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8011f88:	2301      	movs	r3, #1
 8011f8a:	75bb      	strb	r3, [r7, #22]

    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f103 0010 	add.w	r0, r3, #16
 8011f92:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8011f96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011f9a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011f9e:	7dfb      	ldrb	r3, [r7, #23]
 8011fa0:	9300      	str	r3, [sp, #0]
 8011fa2:	4623      	mov	r3, r4
 8011fa4:	f7ff ff18 	bl	8011dd8 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8011fae:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8011fb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011fb6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011fba:	7dbb      	ldrb	r3, [r7, #22]
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	4623      	mov	r3, r4
 8011fc0:	f7ff ff0a 	bl	8011dd8 <lv_draw_mask_line_angle_init>
}
 8011fc4:	bf00      	nop
 8011fc6:	371c      	adds	r7, #28
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd90      	pop	{r4, r7, pc}
 8011fcc:	08012b89 	.word	0x08012b89

08011fd0 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b088      	sub	sp, #32
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	4611      	mov	r1, r2
 8011fdc:	461a      	mov	r2, r3
 8011fde:	460b      	mov	r3, r1
 8011fe0:	80fb      	strh	r3, [r7, #6]
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 8011fe6:	68b8      	ldr	r0, [r7, #8]
 8011fe8:	f7ff fbf8 	bl	80117dc <lv_area_get_width>
 8011fec:	4603      	mov	r3, r0
 8011fee:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 8011ff0:	68b8      	ldr	r0, [r7, #8]
 8011ff2:	f7ff fc0a 	bl	801180a <lv_area_get_height>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MIN(w, h);
 8011ffa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8011ffe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012002:	4293      	cmp	r3, r2
 8012004:	bfa8      	it	ge
 8012006:	4613      	movge	r3, r2
 8012008:	b21b      	sxth	r3, r3
 801200a:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 801200c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	105b      	asrs	r3, r3, #1
 8012014:	429a      	cmp	r2, r3
 8012016:	dd02      	ble.n	801201e <lv_draw_mask_radius_init+0x4e>
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	105b      	asrs	r3, r3, #1
 801201c:	80fb      	strh	r3, [r7, #6]
    if(radius < 0) radius = 0;
 801201e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012022:	2b00      	cmp	r3, #0
 8012024:	da01      	bge.n	801202a <lv_draw_mask_radius_init+0x5a>
 8012026:	2300      	movs	r3, #0
 8012028:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	3308      	adds	r3, #8
 801202e:	68b9      	ldr	r1, [r7, #8]
 8012030:	4618      	mov	r0, r3
 8012032:	f7ff fbb4 	bl	801179e <lv_area_copy>
    param->cfg.radius = radius;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	88fa      	ldrh	r2, [r7, #6]
 801203a:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 801203c:	7979      	ldrb	r1, [r7, #5]
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	7c93      	ldrb	r3, [r2, #18]
 8012042:	f361 0300 	bfi	r3, r1, #0, #1
 8012046:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	4a6d      	ldr	r2, [pc, #436]	; (8012200 <lv_draw_mask_radius_init+0x230>)
 801204c:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	2202      	movs	r2, #2
 8012052:	711a      	strb	r2, [r3, #4]

    if(radius == 0) {
 8012054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d103      	bne.n	8012064 <lv_draw_mask_radius_init+0x94>
        param->circle = NULL;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2200      	movs	r2, #0
 8012060:	615a      	str	r2, [r3, #20]
        return;
 8012062:	e0c9      	b.n	80121f8 <lv_draw_mask_radius_init+0x228>
    }

    uint32_t i;

    /*Try to reuse a circle cache entry*/
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8012064:	2300      	movs	r3, #0
 8012066:	61fb      	str	r3, [r7, #28]
 8012068:	e050      	b.n	801210c <lv_draw_mask_radius_init+0x13c>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 801206a:	4966      	ldr	r1, [pc, #408]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 801206c:	69fa      	ldr	r2, [r7, #28]
 801206e:	4613      	mov	r3, r2
 8012070:	00db      	lsls	r3, r3, #3
 8012072:	1a9b      	subs	r3, r3, r2
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	440b      	add	r3, r1
 8012078:	3318      	adds	r3, #24
 801207a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801207e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012082:	429a      	cmp	r2, r3
 8012084:	d13f      	bne.n	8012106 <lv_draw_mask_radius_init+0x136>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8012086:	495f      	ldr	r1, [pc, #380]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 8012088:	69fa      	ldr	r2, [r7, #28]
 801208a:	4613      	mov	r3, r2
 801208c:	00db      	lsls	r3, r3, #3
 801208e:	1a9b      	subs	r3, r3, r2
 8012090:	009b      	lsls	r3, r3, #2
 8012092:	440b      	add	r3, r1
 8012094:	3314      	adds	r3, #20
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	1c59      	adds	r1, r3, #1
 801209a:	485a      	ldr	r0, [pc, #360]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 801209c:	69fa      	ldr	r2, [r7, #28]
 801209e:	4613      	mov	r3, r2
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	1a9b      	subs	r3, r3, r2
 80120a4:	009b      	lsls	r3, r3, #2
 80120a6:	4403      	add	r3, r0
 80120a8:	3314      	adds	r3, #20
 80120aa:	6019      	str	r1, [r3, #0]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 80120ac:	4955      	ldr	r1, [pc, #340]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 80120ae:	69fa      	ldr	r2, [r7, #28]
 80120b0:	4613      	mov	r3, r2
 80120b2:	00db      	lsls	r3, r3, #3
 80120b4:	1a9b      	subs	r3, r3, r2
 80120b6:	009b      	lsls	r3, r3, #2
 80120b8:	440b      	add	r3, r1
 80120ba:	3310      	adds	r3, #16
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120c2:	2a0f      	cmp	r2, #15
 80120c4:	dd04      	ble.n	80120d0 <lv_draw_mask_radius_init+0x100>
 80120c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120ca:	1112      	asrs	r2, r2, #4
 80120cc:	b212      	sxth	r2, r2
 80120ce:	e000      	b.n	80120d2 <lv_draw_mask_radius_init+0x102>
 80120d0:	2201      	movs	r2, #1
 80120d2:	4413      	add	r3, r2
 80120d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80120d8:	bfa8      	it	ge
 80120da:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80120de:	4619      	mov	r1, r3
 80120e0:	4848      	ldr	r0, [pc, #288]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 80120e2:	69fa      	ldr	r2, [r7, #28]
 80120e4:	4613      	mov	r3, r2
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	1a9b      	subs	r3, r3, r2
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	4403      	add	r3, r0
 80120ee:	3310      	adds	r3, #16
 80120f0:	6019      	str	r1, [r3, #0]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 80120f2:	69fa      	ldr	r2, [r7, #28]
 80120f4:	4613      	mov	r3, r2
 80120f6:	00db      	lsls	r3, r3, #3
 80120f8:	1a9b      	subs	r3, r3, r2
 80120fa:	009b      	lsls	r3, r3, #2
 80120fc:	4a41      	ldr	r2, [pc, #260]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 80120fe:	441a      	add	r2, r3
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	615a      	str	r2, [r3, #20]
            return;
 8012104:	e078      	b.n	80121f8 <lv_draw_mask_radius_init+0x228>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8012106:	69fb      	ldr	r3, [r7, #28]
 8012108:	3301      	adds	r3, #1
 801210a:	61fb      	str	r3, [r7, #28]
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	2b03      	cmp	r3, #3
 8012110:	d9ab      	bls.n	801206a <lv_draw_mask_radius_init+0x9a>
        }
    }

    /*If not found find a free entry with lowest life*/
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 8012112:	2300      	movs	r3, #0
 8012114:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8012116:	2300      	movs	r3, #0
 8012118:	61fb      	str	r3, [r7, #28]
 801211a:	e02e      	b.n	801217a <lv_draw_mask_radius_init+0x1aa>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 801211c:	4939      	ldr	r1, [pc, #228]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 801211e:	69fa      	ldr	r2, [r7, #28]
 8012120:	4613      	mov	r3, r2
 8012122:	00db      	lsls	r3, r3, #3
 8012124:	1a9b      	subs	r3, r3, r2
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	440b      	add	r3, r1
 801212a:	3314      	adds	r3, #20
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d120      	bne.n	8012174 <lv_draw_mask_radius_init+0x1a4>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d108      	bne.n	801214a <lv_draw_mask_radius_init+0x17a>
 8012138:	69fa      	ldr	r2, [r7, #28]
 801213a:	4613      	mov	r3, r2
 801213c:	00db      	lsls	r3, r3, #3
 801213e:	1a9b      	subs	r3, r3, r2
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	4a30      	ldr	r2, [pc, #192]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 8012144:	4413      	add	r3, r2
 8012146:	61bb      	str	r3, [r7, #24]
 8012148:	e014      	b.n	8012174 <lv_draw_mask_radius_init+0x1a4>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 801214a:	492e      	ldr	r1, [pc, #184]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 801214c:	69fa      	ldr	r2, [r7, #28]
 801214e:	4613      	mov	r3, r2
 8012150:	00db      	lsls	r3, r3, #3
 8012152:	1a9b      	subs	r3, r3, r2
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	440b      	add	r3, r1
 8012158:	3310      	adds	r3, #16
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	69bb      	ldr	r3, [r7, #24]
 801215e:	691b      	ldr	r3, [r3, #16]
 8012160:	429a      	cmp	r2, r3
 8012162:	da07      	bge.n	8012174 <lv_draw_mask_radius_init+0x1a4>
 8012164:	69fa      	ldr	r2, [r7, #28]
 8012166:	4613      	mov	r3, r2
 8012168:	00db      	lsls	r3, r3, #3
 801216a:	1a9b      	subs	r3, r3, r2
 801216c:	009b      	lsls	r3, r3, #2
 801216e:	4a25      	ldr	r2, [pc, #148]	; (8012204 <lv_draw_mask_radius_init+0x234>)
 8012170:	4413      	add	r3, r2
 8012172:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8012174:	69fb      	ldr	r3, [r7, #28]
 8012176:	3301      	adds	r3, #1
 8012178:	61fb      	str	r3, [r7, #28]
 801217a:	69fb      	ldr	r3, [r7, #28]
 801217c:	2b03      	cmp	r3, #3
 801217e:	d9cd      	bls.n	801211c <lv_draw_mask_radius_init+0x14c>
        }
    }

    if(!entry) {
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d110      	bne.n	80121a8 <lv_draw_mask_radius_init+0x1d8>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8012186:	201c      	movs	r0, #28
 8012188:	f00f fdba 	bl	8021d00 <lv_mem_alloc>
 801218c:	61b8      	str	r0, [r7, #24]
        LV_ASSERT_MALLOC(entry);
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d100      	bne.n	8012196 <lv_draw_mask_radius_init+0x1c6>
 8012194:	e7fe      	b.n	8012194 <lv_draw_mask_radius_init+0x1c4>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8012196:	211c      	movs	r1, #28
 8012198:	69b8      	ldr	r0, [r7, #24]
 801219a:	f010 f9e5 	bl	8022568 <lv_memset_00>
        entry->life = -1;
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121a4:	611a      	str	r2, [r3, #16]
 80121a6:	e01c      	b.n	80121e2 <lv_draw_mask_radius_init+0x212>
    }
    else {
        entry->used_cnt++;
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	695b      	ldr	r3, [r3, #20]
 80121ac:	1c5a      	adds	r2, r3, #1
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	615a      	str	r2, [r3, #20]
        entry->life = 0;
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	2200      	movs	r2, #0
 80121b6:	611a      	str	r2, [r3, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	691b      	ldr	r3, [r3, #16]
 80121bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80121c0:	2a0f      	cmp	r2, #15
 80121c2:	dd04      	ble.n	80121ce <lv_draw_mask_radius_init+0x1fe>
 80121c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80121c8:	1112      	asrs	r2, r2, #4
 80121ca:	b212      	sxth	r2, r2
 80121cc:	e000      	b.n	80121d0 <lv_draw_mask_radius_init+0x200>
 80121ce:	2201      	movs	r2, #1
 80121d0:	4413      	add	r3, r2
 80121d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80121d6:	bfa8      	it	ge
 80121d8:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80121dc:	461a      	mov	r2, r3
 80121de:	69bb      	ldr	r3, [r7, #24]
 80121e0:	611a      	str	r2, [r3, #16]
    }

    param->circle = entry;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	69ba      	ldr	r2, [r7, #24]
 80121e6:	615a      	str	r2, [r3, #20]

    circ_calc_aa4(param->circle, radius);
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	695b      	ldr	r3, [r3, #20]
 80121ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80121f0:	4611      	mov	r1, r2
 80121f2:	4618      	mov	r0, r3
 80121f4:	f001 fae6 	bl	80137c4 <circ_calc_aa4>
}
 80121f8:	3720      	adds	r7, #32
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	08013189 	.word	0x08013189
 8012204:	20000960 	.word	0x20000960

08012208 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b08a      	sub	sp, #40	; 0x28
 801220c:	af02      	add	r7, sp, #8
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	4608      	mov	r0, r1
 8012212:	4611      	mov	r1, r2
 8012214:	461a      	mov	r2, r3
 8012216:	4603      	mov	r3, r0
 8012218:	817b      	strh	r3, [r7, #10]
 801221a:	460b      	mov	r3, r1
 801221c:	813b      	strh	r3, [r7, #8]
 801221e:	4613      	mov	r3, r2
 8012220:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 8012222:	893a      	ldrh	r2, [r7, #8]
 8012224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012226:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801222a:	b29b      	uxth	r3, r3
 801222c:	1ad3      	subs	r3, r2, r3
 801222e:	b29b      	uxth	r3, r3
 8012230:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 8012232:	897a      	ldrh	r2, [r7, #10]
 8012234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012236:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801223a:	b29b      	uxth	r3, r3
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	b29b      	uxth	r3, r3
 8012240:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 8012242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012244:	6a1b      	ldr	r3, [r3, #32]
 8012246:	2b00      	cmp	r3, #0
 8012248:	f040 80a7 	bne.w	801239a <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 801224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012252:	f003 0301 	and.w	r3, r3, #1
 8012256:	b2db      	uxtb	r3, r3
 8012258:	2b00      	cmp	r3, #0
 801225a:	d02c      	beq.n	80122b6 <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 801225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801225e:	7c1b      	ldrb	r3, [r3, #16]
 8012260:	f003 0303 	and.w	r3, r3, #3
 8012264:	b2db      	uxtb	r3, r3
 8012266:	2b00      	cmp	r3, #0
 8012268:	d006      	beq.n	8012278 <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 801226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226c:	7c1b      	ldrb	r3, [r3, #16]
 801226e:	f003 0303 	and.w	r3, r3, #3
 8012272:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8012274:	2b01      	cmp	r3, #1
 8012276:	d101      	bne.n	801227c <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8012278:	2301      	movs	r3, #1
 801227a:	e0b4      	b.n	80123e6 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227e:	7c1b      	ldrb	r3, [r3, #16]
 8012280:	f003 0303 	and.w	r3, r3, #3
 8012284:	b2db      	uxtb	r3, r3
 8012286:	2b02      	cmp	r3, #2
 8012288:	d106      	bne.n	8012298 <lv_draw_mask_line+0x90>
 801228a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801228e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012292:	da01      	bge.n	8012298 <lv_draw_mask_line+0x90>
 8012294:	2301      	movs	r3, #1
 8012296:	e0a6      	b.n	80123e6 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8012298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229a:	7c1b      	ldrb	r3, [r3, #16]
 801229c:	f003 0303 	and.w	r3, r3, #3
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	2b03      	cmp	r3, #3
 80122a4:	d105      	bne.n	80122b2 <lv_draw_mask_line+0xaa>
 80122a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	dd01      	ble.n	80122b2 <lv_draw_mask_line+0xaa>
 80122ae:	2301      	movs	r3, #1
 80122b0:	e099      	b.n	80123e6 <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80122b2:	2300      	movs	r3, #0
 80122b4:	e097      	b.n	80123e6 <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 80122b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b8:	7c1b      	ldrb	r3, [r3, #16]
 80122ba:	f003 0303 	and.w	r3, r3, #3
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d006      	beq.n	80122d2 <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 80122c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c6:	7c1b      	ldrb	r3, [r3, #16]
 80122c8:	f003 0303 	and.w	r3, r3, #3
 80122cc:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 80122ce:	2b03      	cmp	r3, #3
 80122d0:	d101      	bne.n	80122d6 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 80122d2:	2301      	movs	r3, #1
 80122d4:	e087      	b.n	80123e6 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80122d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d8:	7c1b      	ldrb	r3, [r3, #16]
 80122da:	f003 0303 	and.w	r3, r3, #3
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d105      	bne.n	80122f0 <lv_draw_mask_line+0xe8>
 80122e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	dd01      	ble.n	80122f0 <lv_draw_mask_line+0xe8>
 80122ec:	2301      	movs	r3, #1
 80122ee:	e07a      	b.n	80123e6 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 80122f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f2:	7c1b      	ldrb	r3, [r3, #16]
 80122f4:	f003 0303 	and.w	r3, r3, #3
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d125      	bne.n	801234a <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80122fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012306:	4413      	add	r3, r2
 8012308:	2b00      	cmp	r3, #0
 801230a:	da01      	bge.n	8012310 <lv_draw_mask_line+0x108>
 801230c:	2301      	movs	r3, #1
 801230e:	e06a      	b.n	80123e6 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 8012310:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012314:	425b      	negs	r3, r3
 8012316:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	2b00      	cmp	r3, #0
 801231c:	da01      	bge.n	8012322 <lv_draw_mask_line+0x11a>
 801231e:	2300      	movs	r3, #0
 8012320:	e061      	b.n	80123e6 <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	2b00      	cmp	r3, #0
 8012326:	db0e      	blt.n	8012346 <lv_draw_mask_line+0x13e>
 8012328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801232c:	697a      	ldr	r2, [r7, #20]
 801232e:	429a      	cmp	r2, r3
 8012330:	da09      	bge.n	8012346 <lv_draw_mask_line+0x13e>
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	68fa      	ldr	r2, [r7, #12]
 8012336:	18d0      	adds	r0, r2, r3
 8012338:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	1ad3      	subs	r3, r2, r3
 8012340:	4619      	mov	r1, r3
 8012342:	f010 f911 	bl	8022568 <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8012346:	2302      	movs	r3, #2
 8012348:	e04d      	b.n	80123e6 <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 801234a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801234e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012352:	4413      	add	r3, r2
 8012354:	2b00      	cmp	r3, #0
 8012356:	da01      	bge.n	801235c <lv_draw_mask_line+0x154>
 8012358:	2300      	movs	r3, #0
 801235a:	e044      	b.n	80123e6 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 801235c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012360:	425b      	negs	r3, r3
 8012362:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	2b00      	cmp	r3, #0
 8012368:	da01      	bge.n	801236e <lv_draw_mask_line+0x166>
 801236a:	2300      	movs	r3, #0
 801236c:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801236e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012372:	69fa      	ldr	r2, [r7, #28]
 8012374:	429a      	cmp	r2, r3
 8012376:	db01      	blt.n	801237c <lv_draw_mask_line+0x174>
 8012378:	2300      	movs	r3, #0
 801237a:	e034      	b.n	80123e6 <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 801237c:	69fb      	ldr	r3, [r7, #28]
 801237e:	2b00      	cmp	r3, #0
 8012380:	db09      	blt.n	8012396 <lv_draw_mask_line+0x18e>
 8012382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012386:	69fa      	ldr	r2, [r7, #28]
 8012388:	429a      	cmp	r2, r3
 801238a:	da04      	bge.n	8012396 <lv_draw_mask_line+0x18e>
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	4619      	mov	r1, r3
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f010 f8e9 	bl	8022568 <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8012396:	2302      	movs	r3, #2
 8012398:	e025      	b.n	80123e6 <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 801239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123a0:	f003 0301 	and.w	r3, r3, #1
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00e      	beq.n	80123c8 <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 80123aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80123ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80123b2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80123b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b8:	9300      	str	r3, [sp, #0]
 80123ba:	4603      	mov	r3, r0
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 f816 	bl	80123ee <line_mask_flat>
 80123c2:	4603      	mov	r3, r0
 80123c4:	76fb      	strb	r3, [r7, #27]
 80123c6:	e00d      	b.n	80123e4 <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 80123c8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80123cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80123d0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80123d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d6:	9300      	str	r3, [sp, #0]
 80123d8:	4603      	mov	r3, r0
 80123da:	68f8      	ldr	r0, [r7, #12]
 80123dc:	f000 f991 	bl	8012702 <line_mask_steep>
 80123e0:	4603      	mov	r3, r0
 80123e2:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 80123e4:	7efb      	ldrb	r3, [r7, #27]
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3720      	adds	r7, #32
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}

080123ee <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 80123ee:	b590      	push	{r4, r7, lr}
 80123f0:	b08d      	sub	sp, #52	; 0x34
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	60f8      	str	r0, [r7, #12]
 80123f6:	4608      	mov	r0, r1
 80123f8:	4611      	mov	r1, r2
 80123fa:	461a      	mov	r2, r3
 80123fc:	4603      	mov	r3, r0
 80123fe:	817b      	strh	r3, [r7, #10]
 8012400:	460b      	mov	r3, r1
 8012402:	813b      	strh	r3, [r7, #8]
 8012404:	4613      	mov	r3, r2
 8012406:	80fb      	strh	r3, [r7, #6]

    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8012408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801240a:	69db      	ldr	r3, [r3, #28]
 801240c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012410:	fb02 f303 	mul.w	r3, r2, r3
 8012414:	129b      	asrs	r3, r3, #10
 8012416:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 8012418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801241a:	69db      	ldr	r3, [r3, #28]
 801241c:	2b00      	cmp	r3, #0
 801241e:	dd10      	ble.n	8012442 <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 8012420:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012424:	69fa      	ldr	r2, [r7, #28]
 8012426:	429a      	cmp	r2, r3
 8012428:	dd1c      	ble.n	8012464 <line_mask_flat+0x76>
            if(p->inv) {
 801242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801242c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012430:	f003 0302 	and.w	r3, r3, #2
 8012434:	b2db      	uxtb	r3, r3
 8012436:	2b00      	cmp	r3, #0
 8012438:	d001      	beq.n	801243e <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 801243a:	2301      	movs	r3, #1
 801243c:	e15d      	b.n	80126fa <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 801243e:	2300      	movs	r3, #0
 8012440:	e15b      	b.n	80126fa <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 8012442:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012446:	69fa      	ldr	r2, [r7, #28]
 8012448:	429a      	cmp	r2, r3
 801244a:	da0b      	bge.n	8012464 <line_mask_flat+0x76>
            if(p->inv) {
 801244c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801244e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012452:	f003 0302 	and.w	r3, r3, #2
 8012456:	b2db      	uxtb	r3, r3
 8012458:	2b00      	cmp	r3, #0
 801245a:	d001      	beq.n	8012460 <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 801245c:	2301      	movs	r3, #1
 801245e:	e14c      	b.n	80126fa <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8012460:	2300      	movs	r3, #0
 8012462:	e14a      	b.n	80126fa <line_mask_flat+0x30c>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 8012464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012466:	69db      	ldr	r3, [r3, #28]
 8012468:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801246c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012470:	440a      	add	r2, r1
 8012472:	fb02 f303 	mul.w	r3, r2, r3
 8012476:	129b      	asrs	r3, r3, #10
 8012478:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 801247a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801247c:	69db      	ldr	r3, [r3, #28]
 801247e:	2b00      	cmp	r3, #0
 8012480:	dd10      	ble.n	80124a4 <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 8012482:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012486:	69fa      	ldr	r2, [r7, #28]
 8012488:	429a      	cmp	r2, r3
 801248a:	da1c      	bge.n	80124c6 <line_mask_flat+0xd8>
            if(p->inv) {
 801248c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801248e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012492:	f003 0302 	and.w	r3, r3, #2
 8012496:	b2db      	uxtb	r3, r3
 8012498:	2b00      	cmp	r3, #0
 801249a:	d001      	beq.n	80124a0 <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 801249c:	2300      	movs	r3, #0
 801249e:	e12c      	b.n	80126fa <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 80124a0:	2301      	movs	r3, #1
 80124a2:	e12a      	b.n	80126fa <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 80124a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80124a8:	69fa      	ldr	r2, [r7, #28]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	dd0b      	ble.n	80124c6 <line_mask_flat+0xd8>
            if(p->inv) {
 80124ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124b4:	f003 0302 	and.w	r3, r3, #2
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d001      	beq.n	80124c2 <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 80124be:	2300      	movs	r3, #0
 80124c0:	e11b      	b.n	80126fa <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 80124c2:	2301      	movs	r3, #1
 80124c4:	e119      	b.n	80126fa <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 80124c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124c8:	69db      	ldr	r3, [r3, #28]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	dd09      	ble.n	80124e2 <line_mask_flat+0xf4>
 80124ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80124d2:	021b      	lsls	r3, r3, #8
 80124d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124d6:	6992      	ldr	r2, [r2, #24]
 80124d8:	fb02 f303 	mul.w	r3, r2, r3
 80124dc:	129b      	asrs	r3, r3, #10
 80124de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124e0:	e009      	b.n	80124f6 <line_mask_flat+0x108>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 80124e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80124e6:	3301      	adds	r3, #1
 80124e8:	021b      	lsls	r3, r3, #8
 80124ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124ec:	6992      	ldr	r2, [r2, #24]
 80124ee:	fb02 f303 	mul.w	r3, r2, r3
 80124f2:	129b      	asrs	r3, r3, #10
 80124f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 80124f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f8:	121b      	asrs	r3, r3, #8
 80124fa:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 80124fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d102      	bne.n	801250e <line_mask_flat+0x120>
 8012508:	23ff      	movs	r3, #255	; 0xff
 801250a:	62bb      	str	r3, [r7, #40]	; 0x28
 801250c:	e00a      	b.n	8012524 <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012514:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012516:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012518:	fb02 f303 	mul.w	r3, r2, r3
 801251c:	121b      	asrs	r3, r3, #8
 801251e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012522:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 8012524:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012528:	69ba      	ldr	r2, [r7, #24]
 801252a:	1ad3      	subs	r3, r2, r3
 801252c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d06c      	beq.n	801260e <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 8012534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012536:	2b00      	cmp	r3, #0
 8012538:	db2c      	blt.n	8012594 <line_mask_flat+0x1a6>
 801253a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801253e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012540:	429a      	cmp	r2, r3
 8012542:	da27      	bge.n	8012594 <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801254a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801254c:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8012550:	fb02 f303 	mul.w	r3, r2, r3
 8012554:	125b      	asrs	r3, r3, #9
 8012556:	b2db      	uxtb	r3, r3
 8012558:	43db      	mvns	r3, r3
 801255a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 801255e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012564:	f003 0302 	and.w	r3, r3, #2
 8012568:	b2db      	uxtb	r3, r3
 801256a:	2b00      	cmp	r3, #0
 801256c:	d004      	beq.n	8012578 <line_mask_flat+0x18a>
 801256e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012572:	43db      	mvns	r3, r3
 8012574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801257a:	68fa      	ldr	r2, [r7, #12]
 801257c:	4413      	add	r3, r2
 801257e:	7818      	ldrb	r0, [r3, #0]
 8012580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012582:	68fa      	ldr	r2, [r7, #12]
 8012584:	18d4      	adds	r4, r2, r3
 8012586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801258a:	4619      	mov	r1, r3
 801258c:	f001 fc9a 	bl	8013ec4 <mask_mix>
 8012590:	4603      	mov	r3, r0
 8012592:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8012594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012596:	3301      	adds	r3, #1
 8012598:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 801259a:	e038      	b.n	801260e <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 801259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259e:	2b00      	cmp	r3, #0
 80125a0:	db28      	blt.n	80125f4 <line_mask_flat+0x206>
 80125a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125a8:	429a      	cmp	r2, r3
 80125aa:	da23      	bge.n	80125f4 <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 80125ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ae:	b2da      	uxtb	r2, r3
 80125b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b4:	105b      	asrs	r3, r3, #1
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	1ad3      	subs	r3, r2, r3
 80125ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 80125be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125c4:	f003 0302 	and.w	r3, r3, #2
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d004      	beq.n	80125d8 <line_mask_flat+0x1ea>
 80125ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80125d2:	43db      	mvns	r3, r3
 80125d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125da:	68fa      	ldr	r2, [r7, #12]
 80125dc:	4413      	add	r3, r2
 80125de:	7818      	ldrb	r0, [r3, #0]
 80125e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	18d4      	adds	r4, r2, r3
 80125e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80125ea:	4619      	mov	r1, r3
 80125ec:	f001 fc6a 	bl	8013ec4 <mask_mix>
 80125f0:	4603      	mov	r3, r0
 80125f2:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 80125f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 80125fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012600:	3301      	adds	r3, #1
 8012602:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 8012604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801260a:	429a      	cmp	r2, r3
 801260c:	da05      	bge.n	801261a <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 801260e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012614:	429a      	cmp	r2, r3
 8012616:	dcc1      	bgt.n	801259c <line_mask_flat+0x1ae>
 8012618:	e000      	b.n	801261c <line_mask_flat+0x22e>
        if(k >= len) break;
 801261a:	bf00      	nop
    }

    if(k < len && k >= 0) {
 801261c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012622:	429a      	cmp	r2, r3
 8012624:	da34      	bge.n	8012690 <line_mask_flat+0x2a2>
 8012626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012628:	2b00      	cmp	r3, #0
 801262a:	db31      	blt.n	8012690 <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 801262c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801262e:	699b      	ldr	r3, [r3, #24]
 8012630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012632:	fb02 f303 	mul.w	r3, r2, r3
 8012636:	129b      	asrs	r3, r3, #10
 8012638:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801263e:	fb02 f303 	mul.w	r3, r2, r3
 8012642:	125b      	asrs	r3, r3, #9
 8012644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 8012648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801264a:	69db      	ldr	r3, [r3, #28]
 801264c:	2b00      	cmp	r3, #0
 801264e:	da04      	bge.n	801265a <line_mask_flat+0x26c>
 8012650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012654:	43db      	mvns	r3, r3
 8012656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 801265a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801265c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012660:	f003 0302 	and.w	r3, r3, #2
 8012664:	b2db      	uxtb	r3, r3
 8012666:	2b00      	cmp	r3, #0
 8012668:	d004      	beq.n	8012674 <line_mask_flat+0x286>
 801266a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801266e:	43db      	mvns	r3, r3
 8012670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 8012674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	4413      	add	r3, r2
 801267a:	7818      	ldrb	r0, [r3, #0]
 801267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267e:	68fa      	ldr	r2, [r7, #12]
 8012680:	18d4      	adds	r4, r2, r3
 8012682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012686:	4619      	mov	r1, r3
 8012688:	f001 fc1c 	bl	8013ec4 <mask_mix>
 801268c:	4603      	mov	r3, r0
 801268e:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 8012690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012696:	f003 0302 	and.w	r3, r3, #2
 801269a:	b2db      	uxtb	r3, r3
 801269c:	2b00      	cmp	r3, #0
 801269e:	d014      	beq.n	80126ca <line_mask_flat+0x2dc>
        k = xei - abs_x;
 80126a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80126a4:	69ba      	ldr	r2, [r7, #24]
 80126a6:	1ad3      	subs	r3, r2, r3
 80126a8:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 80126aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126b0:	429a      	cmp	r2, r3
 80126b2:	dd01      	ble.n	80126b8 <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 80126b4:	2300      	movs	r3, #0
 80126b6:	e020      	b.n	80126fa <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 80126b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	db1c      	blt.n	80126f8 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[0], k);
 80126be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c0:	4619      	mov	r1, r3
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	f00f ff50 	bl	8022568 <lv_memset_00>
 80126c8:	e016      	b.n	80126f8 <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	3301      	adds	r3, #1
 80126ce:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 80126d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	da01      	bge.n	80126da <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 80126d6:	2300      	movs	r3, #0
 80126d8:	e00f      	b.n	80126fa <line_mask_flat+0x30c>
        }
        if(k <= len) {
 80126da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126e0:	429a      	cmp	r2, r3
 80126e2:	dc09      	bgt.n	80126f8 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[k], len - k);
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	68fa      	ldr	r2, [r7, #12]
 80126e8:	18d0      	adds	r0, r2, r3
 80126ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80126ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f0:	1ad3      	subs	r3, r2, r3
 80126f2:	4619      	mov	r1, r3
 80126f4:	f00f ff38 	bl	8022568 <lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 80126f8:	2302      	movs	r3, #2
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3734      	adds	r7, #52	; 0x34
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd90      	pop	{r4, r7, pc}

08012702 <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 8012702:	b590      	push	{r4, r7, lr}
 8012704:	b091      	sub	sp, #68	; 0x44
 8012706:	af00      	add	r7, sp, #0
 8012708:	60f8      	str	r0, [r7, #12]
 801270a:	4608      	mov	r0, r1
 801270c:	4611      	mov	r1, r2
 801270e:	461a      	mov	r2, r3
 8012710:	4603      	mov	r3, r0
 8012712:	817b      	strh	r3, [r7, #10]
 8012714:	460b      	mov	r3, r1
 8012716:	813b      	strh	r3, [r7, #8]
 8012718:	4613      	mov	r3, r2
 801271a:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /*At the beginning of the mask if the limit line is greater than the mask's y.
     *Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801271c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801271e:	699b      	ldr	r3, [r3, #24]
 8012720:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012724:	fb02 f303 	mul.w	r3, r2, r3
 8012728:	129b      	asrs	r3, r3, #10
 801272a:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 801272c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801272e:	699b      	ldr	r3, [r3, #24]
 8012730:	2b00      	cmp	r3, #0
 8012732:	dd02      	ble.n	801273a <line_mask_steep+0x38>
 8012734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012736:	3301      	adds	r3, #1
 8012738:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 801273a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801273e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012740:	429a      	cmp	r2, r3
 8012742:	da0b      	bge.n	801275c <line_mask_steep+0x5a>
        if(p->inv) {
 8012744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801274a:	f003 0302 	and.w	r3, r3, #2
 801274e:	b2db      	uxtb	r3, r3
 8012750:	2b00      	cmp	r3, #0
 8012752:	d001      	beq.n	8012758 <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012754:	2301      	movs	r3, #1
 8012756:	e213      	b.n	8012b80 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 8012758:	2300      	movs	r3, #0
 801275a:	e211      	b.n	8012b80 <line_mask_steep+0x47e>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 801275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801275e:	699b      	ldr	r3, [r3, #24]
 8012760:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012764:	fb02 f303 	mul.w	r3, r2, r3
 8012768:	129b      	asrs	r3, r3, #10
 801276a:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 801276c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012774:	4413      	add	r3, r2
 8012776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012778:	429a      	cmp	r2, r3
 801277a:	dd0b      	ble.n	8012794 <line_mask_steep+0x92>
        if(p->inv) {
 801277c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801277e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012782:	f003 0302 	and.w	r3, r3, #2
 8012786:	b2db      	uxtb	r3, r3
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 801278c:	2300      	movs	r3, #0
 801278e:	e1f7      	b.n	8012b80 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012790:	2301      	movs	r3, #1
 8012792:	e1f5      	b.n	8012b80 <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y * 256) * p->xy_steep) >> 10;
 8012794:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012798:	021b      	lsls	r3, r3, #8
 801279a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801279c:	6992      	ldr	r2, [r2, #24]
 801279e:	fb02 f303 	mul.w	r3, r2, r3
 80127a2:	129b      	asrs	r3, r3, #10
 80127a4:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 80127a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a8:	121b      	asrs	r3, r3, #8
 80127aa:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 80127ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 80127b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80127b6:	3301      	adds	r3, #1
 80127b8:	021b      	lsls	r3, r3, #8
 80127ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127bc:	6992      	ldr	r2, [r2, #24]
 80127be:	fb02 f303 	mul.w	r3, r2, r3
 80127c2:	129b      	asrs	r3, r3, #10
 80127c4:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 80127c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c8:	121b      	asrs	r3, r3, #8
 80127ca:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 80127cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 80127d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80127d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127d8:	1ad3      	subs	r3, r2, r3
 80127da:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 80127dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127de:	6a3b      	ldr	r3, [r7, #32]
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d00d      	beq.n	8012800 <line_mask_steep+0xfe>
 80127e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e6:	699b      	ldr	r3, [r3, #24]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	da09      	bge.n	8012800 <line_mask_steep+0xfe>
 80127ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d106      	bne.n	8012800 <line_mask_steep+0xfe>
        xsf = 0xFF;
 80127f2:	23ff      	movs	r3, #255	; 0xff
 80127f4:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 80127f6:	6a3b      	ldr	r3, [r7, #32]
 80127f8:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 80127fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127fc:	3b01      	subs	r3, #1
 80127fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 8012800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012802:	6a3b      	ldr	r3, [r7, #32]
 8012804:	429a      	cmp	r2, r3
 8012806:	d165      	bne.n	80128d4 <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 8012808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801280a:	2b00      	cmp	r3, #0
 801280c:	db25      	blt.n	801285a <line_mask_steep+0x158>
 801280e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012814:	429a      	cmp	r2, r3
 8012816:	da20      	bge.n	801285a <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 8012818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	4413      	add	r3, r2
 801281e:	105b      	asrs	r3, r3, #1
 8012820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 8012824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801282a:	f003 0302 	and.w	r3, r3, #2
 801282e:	b2db      	uxtb	r3, r3
 8012830:	2b00      	cmp	r3, #0
 8012832:	d004      	beq.n	801283e <line_mask_steep+0x13c>
 8012834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012838:	43db      	mvns	r3, r3
 801283a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801283e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012840:	68fa      	ldr	r2, [r7, #12]
 8012842:	4413      	add	r3, r2
 8012844:	7818      	ldrb	r0, [r3, #0]
 8012846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	18d4      	adds	r4, r2, r3
 801284c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012850:	4619      	mov	r1, r3
 8012852:	f001 fb37 	bl	8013ec4 <mask_mix>
 8012856:	4603      	mov	r3, r0
 8012858:	7023      	strb	r3, [r4, #0]
        }
        k++;
 801285a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801285c:	3301      	adds	r3, #1
 801285e:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 8012860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012866:	f003 0302 	and.w	r3, r3, #2
 801286a:	b2db      	uxtb	r3, r3
 801286c:	2b00      	cmp	r3, #0
 801286e:	d015      	beq.n	801289c <line_mask_steep+0x19a>
            k = xsi - abs_x;
 8012870:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012876:	1ad3      	subs	r3, r2, r3
 8012878:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 801287a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801287e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012880:	429a      	cmp	r2, r3
 8012882:	db01      	blt.n	8012888 <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 8012884:	2300      	movs	r3, #0
 8012886:	e17b      	b.n	8012b80 <line_mask_steep+0x47e>
            }
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 8012888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801288a:	2b00      	cmp	r3, #0
 801288c:	f2c0 8177 	blt.w	8012b7e <line_mask_steep+0x47c>
 8012890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012892:	4619      	mov	r1, r3
 8012894:	68f8      	ldr	r0, [r7, #12]
 8012896:	f00f fe67 	bl	8022568 <lv_memset_00>
 801289a:	e170      	b.n	8012b7e <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 801289c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128a2:	429a      	cmp	r2, r3
 80128a4:	dd02      	ble.n	80128ac <line_mask_steep+0x1aa>
 80128a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128aa:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 80128ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d101      	bne.n	80128b6 <line_mask_steep+0x1b4>
 80128b2:	2300      	movs	r3, #0
 80128b4:	e164      	b.n	8012b80 <line_mask_steep+0x47e>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 80128b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	f340 8160 	ble.w	8012b7e <line_mask_steep+0x47c>
 80128be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128c0:	68fa      	ldr	r2, [r7, #12]
 80128c2:	18d0      	adds	r0, r2, r3
 80128c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80128c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ca:	1ad3      	subs	r3, r2, r3
 80128cc:	4619      	mov	r1, r3
 80128ce:	f00f fe4b 	bl	8022568 <lv_memset_00>
 80128d2:	e154      	b.n	8012b7e <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 80128d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128d6:	699b      	ldr	r3, [r3, #24]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f280 80a7 	bge.w	8012a2c <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 80128de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128e0:	69db      	ldr	r3, [r3, #28]
 80128e2:	425b      	negs	r3, r3
 80128e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128e6:	fb02 f303 	mul.w	r3, r2, r3
 80128ea:	129b      	asrs	r3, r3, #10
 80128ec:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 80128ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	db26      	blt.n	8012942 <line_mask_steep+0x240>
 80128f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128fa:	429a      	cmp	r2, r3
 80128fc:	da21      	bge.n	8012942 <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012902:	fb02 f303 	mul.w	r3, r2, r3
 8012906:	125b      	asrs	r3, r3, #9
 8012908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 801290c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801290e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012912:	f003 0302 	and.w	r3, r3, #2
 8012916:	b2db      	uxtb	r3, r3
 8012918:	2b00      	cmp	r3, #0
 801291a:	d004      	beq.n	8012926 <line_mask_steep+0x224>
 801291c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012920:	43db      	mvns	r3, r3
 8012922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	4413      	add	r3, r2
 801292c:	7818      	ldrb	r0, [r3, #0]
 801292e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	18d4      	adds	r4, r2, r3
 8012934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012938:	4619      	mov	r1, r3
 801293a:	f001 fac3 	bl	8013ec4 <mask_mix>
 801293e:	4603      	mov	r3, r0
 8012940:	7023      	strb	r3, [r4, #0]
            }
            k--;
 8012942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012944:	3b01      	subs	r3, #1
 8012946:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 8012948:	69bb      	ldr	r3, [r7, #24]
 801294a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801294e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012950:	6992      	ldr	r2, [r2, #24]
 8012952:	4252      	negs	r2, r2
 8012954:	fb02 f303 	mul.w	r3, r2, r3
 8012958:	129b      	asrs	r3, r3, #10
 801295a:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 801295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801295e:	2b00      	cmp	r3, #0
 8012960:	db2a      	blt.n	80129b8 <line_mask_steep+0x2b6>
 8012962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012968:	429a      	cmp	r2, r3
 801296a:	da25      	bge.n	80129b8 <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 801296c:	69bb      	ldr	r3, [r7, #24]
 801296e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012972:	693a      	ldr	r2, [r7, #16]
 8012974:	fb02 f303 	mul.w	r3, r2, r3
 8012978:	125b      	asrs	r3, r3, #9
 801297a:	b2db      	uxtb	r3, r3
 801297c:	43db      	mvns	r3, r3
 801297e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012988:	f003 0302 	and.w	r3, r3, #2
 801298c:	b2db      	uxtb	r3, r3
 801298e:	2b00      	cmp	r3, #0
 8012990:	d004      	beq.n	801299c <line_mask_steep+0x29a>
 8012992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012996:	43db      	mvns	r3, r3
 8012998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801299c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801299e:	68fa      	ldr	r2, [r7, #12]
 80129a0:	4413      	add	r3, r2
 80129a2:	7818      	ldrb	r0, [r3, #0]
 80129a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129a6:	68fa      	ldr	r2, [r7, #12]
 80129a8:	18d4      	adds	r4, r2, r3
 80129aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129ae:	4619      	mov	r1, r3
 80129b0:	f001 fa88 	bl	8013ec4 <mask_mix>
 80129b4:	4603      	mov	r3, r0
 80129b6:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 80129b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129ba:	3302      	adds	r3, #2
 80129bc:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 80129be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129c4:	f003 0302 	and.w	r3, r3, #2
 80129c8:	b2db      	uxtb	r3, r3
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d018      	beq.n	8012a00 <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 80129ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80129d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129d4:	1ad3      	subs	r3, r2, r3
 80129d6:	3b01      	subs	r3, #1
 80129d8:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 80129da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129e0:	429a      	cmp	r2, r3
 80129e2:	dd03      	ble.n	80129ec <line_mask_steep+0x2ea>
 80129e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80129ea:	e0c8      	b.n	8012b7e <line_mask_steep+0x47c>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 80129ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	f340 80c5 	ble.w	8012b7e <line_mask_steep+0x47c>
 80129f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129f6:	4619      	mov	r1, r3
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f00f fdb5 	bl	8022568 <lv_memset_00>
 80129fe:	e0be      	b.n	8012b7e <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8012a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a06:	429a      	cmp	r2, r3
 8012a08:	dd01      	ble.n	8012a0e <line_mask_steep+0x30c>
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	e0b8      	b.n	8012b80 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8012a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	f2c0 80b4 	blt.w	8012b7e <line_mask_steep+0x47c>
 8012a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	18d0      	adds	r0, r2, r3
 8012a1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	4619      	mov	r1, r3
 8012a26:	f00f fd9f 	bl	8022568 <lv_memset_00>
 8012a2a:	e0a8      	b.n	8012b7e <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 8012a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012a32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a34:	69d2      	ldr	r2, [r2, #28]
 8012a36:	fb02 f303 	mul.w	r3, r2, r3
 8012a3a:	129b      	asrs	r3, r3, #10
 8012a3c:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8012a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	db2a      	blt.n	8012a9a <line_mask_steep+0x398>
 8012a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	da25      	bge.n	8012a9a <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8012a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a50:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012a54:	69ba      	ldr	r2, [r7, #24]
 8012a56:	fb02 f303 	mul.w	r3, r2, r3
 8012a5a:	125b      	asrs	r3, r3, #9
 8012a5c:	b2db      	uxtb	r3, r3
 8012a5e:	43db      	mvns	r3, r3
 8012a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a6a:	f003 0302 	and.w	r3, r3, #2
 8012a6e:	b2db      	uxtb	r3, r3
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d004      	beq.n	8012a7e <line_mask_steep+0x37c>
 8012a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a78:	43db      	mvns	r3, r3
 8012a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a80:	68fa      	ldr	r2, [r7, #12]
 8012a82:	4413      	add	r3, r2
 8012a84:	7818      	ldrb	r0, [r3, #0]
 8012a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	18d4      	adds	r4, r2, r3
 8012a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a90:	4619      	mov	r1, r3
 8012a92:	f001 fa17 	bl	8013ec4 <mask_mix>
 8012a96:	4603      	mov	r3, r0
 8012a98:	7023      	strb	r3, [r4, #0]
            }

            k++;
 8012a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8012aa0:	69bb      	ldr	r3, [r7, #24]
 8012aa2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012aa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012aa8:	6992      	ldr	r2, [r2, #24]
 8012aaa:	fb02 f303 	mul.w	r3, r2, r3
 8012aae:	129b      	asrs	r3, r3, #10
 8012ab0:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 8012ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	db28      	blt.n	8012b0a <line_mask_steep+0x408>
 8012ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	da23      	bge.n	8012b0a <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012ac8:	697a      	ldr	r2, [r7, #20]
 8012aca:	fb02 f303 	mul.w	r3, r2, r3
 8012ace:	125b      	asrs	r3, r3, #9
 8012ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ada:	f003 0302 	and.w	r3, r3, #2
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d004      	beq.n	8012aee <line_mask_steep+0x3ec>
 8012ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ae8:	43db      	mvns	r3, r3
 8012aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af0:	68fa      	ldr	r2, [r7, #12]
 8012af2:	4413      	add	r3, r2
 8012af4:	7818      	ldrb	r0, [r3, #0]
 8012af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	18d4      	adds	r4, r2, r3
 8012afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b00:	4619      	mov	r1, r3
 8012b02:	f001 f9df 	bl	8013ec4 <mask_mix>
 8012b06:	4603      	mov	r3, r0
 8012b08:	7023      	strb	r3, [r4, #0]
            }
            k++;
 8012b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8012b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b16:	f003 0302 	and.w	r3, r3, #2
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d014      	beq.n	8012b4a <line_mask_steep+0x448>
                k = xsi - abs_x;
 8012b20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b26:	1ad3      	subs	r3, r2, r3
 8012b28:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 8012b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b30:	429a      	cmp	r2, r3
 8012b32:	dd01      	ble.n	8012b38 <line_mask_steep+0x436>
 8012b34:	2300      	movs	r3, #0
 8012b36:	e023      	b.n	8012b80 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 8012b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	db1f      	blt.n	8012b7e <line_mask_steep+0x47c>
 8012b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b40:	4619      	mov	r1, r3
 8012b42:	68f8      	ldr	r0, [r7, #12]
 8012b44:	f00f fd10 	bl	8022568 <lv_memset_00>
 8012b48:	e019      	b.n	8012b7e <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 8012b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b50:	429a      	cmp	r2, r3
 8012b52:	dd02      	ble.n	8012b5a <line_mask_steep+0x458>
 8012b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b58:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8012b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d101      	bne.n	8012b64 <line_mask_steep+0x462>
 8012b60:	2300      	movs	r3, #0
 8012b62:	e00d      	b.n	8012b80 <line_mask_steep+0x47e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8012b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	dd09      	ble.n	8012b7e <line_mask_steep+0x47c>
 8012b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	18d0      	adds	r0, r2, r3
 8012b70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	4619      	mov	r1, r3
 8012b7a:	f00f fcf5 	bl	8022568 <lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012b7e:	2302      	movs	r3, #2
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3744      	adds	r7, #68	; 0x44
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd90      	pop	{r4, r7, pc}

08012b88 <lv_draw_mask_angle>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_angle(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                   lv_coord_t abs_y, lv_coord_t len,
                                                                   lv_draw_mask_angle_param_t * p)
{
 8012b88:	b590      	push	{r4, r7, lr}
 8012b8a:	b097      	sub	sp, #92	; 0x5c
 8012b8c:	af02      	add	r7, sp, #8
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	4608      	mov	r0, r1
 8012b92:	4611      	mov	r1, r2
 8012b94:	461a      	mov	r2, r3
 8012b96:	4603      	mov	r3, r0
 8012b98:	817b      	strh	r3, [r7, #10]
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	813b      	strh	r3, [r7, #8]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	80fb      	strh	r3, [r7, #6]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8012ba2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012ba6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012ba8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8012bac:	1a9b      	subs	r3, r3, r2
 8012bae:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8012bb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012bb6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8012bba:	1a9b      	subs	r3, r3, r2
 8012bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8012bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bc0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012bc4:	2bb3      	cmp	r3, #179	; 0xb3
 8012bc6:	f300 810c 	bgt.w	8012de2 <lv_draw_mask_angle+0x25a>
 8012bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bcc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012bd0:	2bb3      	cmp	r3, #179	; 0xb3
 8012bd2:	f300 8106 	bgt.w	8012de2 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bd8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	f000 8100 	beq.w	8012de2 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012be4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	f000 80fa 	beq.w	8012de2 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle > p->cfg.end_angle) {
 8012bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bf0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bf6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	f340 80f1 	ble.w	8012de2 <lv_draw_mask_angle+0x25a>

        if(abs_y < p->cfg.vertex_p.y) {
 8012c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012c06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	da01      	bge.n	8012c12 <lv_draw_mask_angle+0x8a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012c0e:	2301      	movs	r3, #1
 8012c10:	e2b6      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8012c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c18:	fb02 f303 	mul.w	r3, r2, r3
 8012c1c:	129b      	asrs	r3, r3, #10
 8012c1e:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8012c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c22:	3301      	adds	r3, #1
 8012c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c26:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8012c28:	fb02 f303 	mul.w	r3, r2, r3
 8012c2c:	129b      	asrs	r3, r3, #10
 8012c2e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c32:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c3a:	dd0b      	ble.n	8012c54 <lv_draw_mask_angle+0xcc>
 8012c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c42:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012c46:	da05      	bge.n	8012c54 <lv_draw_mask_angle+0xcc>
 8012c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	da02      	bge.n	8012c54 <lv_draw_mask_angle+0xcc>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c52:	e01f      	b.n	8012c94 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	dd0a      	ble.n	8012c74 <lv_draw_mask_angle+0xec>
 8012c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c60:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c64:	2b5a      	cmp	r3, #90	; 0x5a
 8012c66:	dc05      	bgt.n	8012c74 <lv_draw_mask_angle+0xec>
 8012c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	da02      	bge.n	8012c74 <lv_draw_mask_angle+0xec>
 8012c6e:	2300      	movs	r3, #0
 8012c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c72:	e00f      	b.n	8012c94 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c76:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c7a:	2b5a      	cmp	r3, #90	; 0x5a
 8012c7c:	dd0a      	ble.n	8012c94 <lv_draw_mask_angle+0x10c>
 8012c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c80:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c84:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c88:	da04      	bge.n	8012c94 <lv_draw_mask_angle+0x10c>
 8012c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	dd01      	ble.n	8012c94 <lv_draw_mask_angle+0x10c>
 8012c90:	2300      	movs	r3, #0
 8012c92:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c96:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012c9a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c9e:	dd0b      	ble.n	8012cb8 <lv_draw_mask_angle+0x130>
 8012ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ca2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012ca6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012caa:	da05      	bge.n	8012cb8 <lv_draw_mask_angle+0x130>
 8012cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	da02      	bge.n	8012cb8 <lv_draw_mask_angle+0x130>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012cb6:	e01f      	b.n	8012cf8 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	dd0a      	ble.n	8012cd8 <lv_draw_mask_angle+0x150>
 8012cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cc4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012cc8:	2b5a      	cmp	r3, #90	; 0x5a
 8012cca:	dc05      	bgt.n	8012cd8 <lv_draw_mask_angle+0x150>
 8012ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	da02      	bge.n	8012cd8 <lv_draw_mask_angle+0x150>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012cd6:	e00f      	b.n	8012cf8 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cda:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012cde:	2b5a      	cmp	r3, #90	; 0x5a
 8012ce0:	dd0a      	ble.n	8012cf8 <lv_draw_mask_angle+0x170>
 8012ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ce4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012ce8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012cec:	da04      	bge.n	8012cf8 <lv_draw_mask_angle+0x170>
 8012cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	dd01      	ble.n	8012cf8 <lv_draw_mask_angle+0x170>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	64fb      	str	r3, [r7, #76]	; 0x4c

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8012cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	105b      	asrs	r3, r3, #1
 8012d00:	627b      	str	r3, [r7, #36]	; 0x24

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8012d02:	2301      	movs	r3, #1
 8012d04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8012d08:	2301      	movs	r3, #1
 8012d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        int32_t tmp = start_angle_last + dist - rel_x;
 8012d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d12:	441a      	add	r2, r3
 8012d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d16:	1ad3      	subs	r3, r2, r3
 8012d18:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > len) tmp = len;
 8012d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d20:	429a      	cmp	r2, r3
 8012d22:	dd02      	ble.n	8012d2a <lv_draw_mask_angle+0x1a2>
 8012d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d28:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > 0) {
 8012d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	dd18      	ble.n	8012d62 <lv_draw_mask_angle+0x1da>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 8012d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d32:	b218      	sxth	r0, r3
 8012d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d36:	3310      	adds	r3, #16
 8012d38:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012d3c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012d40:	9300      	str	r3, [sp, #0]
 8012d42:	4603      	mov	r3, r0
 8012d44:	68f8      	ldr	r0, [r7, #12]
 8012d46:	f7ff fa5f 	bl	8012208 <lv_draw_mask_line>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8012d50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d104      	bne.n	8012d62 <lv_draw_mask_angle+0x1da>
                lv_memset_00(&mask_buf[0], tmp);
 8012d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	68f8      	ldr	r0, [r7, #12]
 8012d5e:	f00f fc03 	bl	8022568 <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 8012d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	dd02      	ble.n	8012d72 <lv_draw_mask_angle+0x1ea>
 8012d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d70:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp < 0) tmp = 0;
 8012d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	da01      	bge.n	8012d7c <lv_draw_mask_angle+0x1f4>
 8012d78:	2300      	movs	r3, #0
 8012d7a:	647b      	str	r3, [r7, #68]	; 0x44
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 8012d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	18d0      	adds	r0, r2, r3
 8012d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d84:	b29a      	uxth	r2, r3
 8012d86:	897b      	ldrh	r3, [r7, #10]
 8012d88:	4413      	add	r3, r2
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	b219      	sxth	r1, r3
 8012d8e:	88fa      	ldrh	r2, [r7, #6]
 8012d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	1ad3      	subs	r3, r2, r3
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	b21c      	sxth	r4, r3
 8012d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d9c:	333c      	adds	r3, #60	; 0x3c
 8012d9e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012da2:	9300      	str	r3, [sp, #0]
 8012da4:	4623      	mov	r3, r4
 8012da6:	f7ff fa2f 	bl	8012208 <lv_draw_mask_line>
 8012daa:	4603      	mov	r3, r0
 8012dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8012db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d109      	bne.n	8012dcc <lv_draw_mask_angle+0x244>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8012db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dba:	68fa      	ldr	r2, [r7, #12]
 8012dbc:	18d0      	adds	r0, r2, r3
 8012dbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dc4:	1ad3      	subs	r3, r2, r3
 8012dc6:	4619      	mov	r1, r3
 8012dc8:	f00f fbce 	bl	8022568 <lv_memset_00>
        }
        if(res1 == res2) return res1;
 8012dcc:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8012dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d102      	bne.n	8012dde <lv_draw_mask_angle+0x256>
 8012dd8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012ddc:	e1d0      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8012dde:	2302      	movs	r3, #2
 8012de0:	e1ce      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
    }
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 8012de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012de4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012de8:	2bb4      	cmp	r3, #180	; 0xb4
 8012dea:	f340 80fc 	ble.w	8012fe6 <lv_draw_mask_angle+0x45e>
 8012dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012df0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012df4:	2bb4      	cmp	r3, #180	; 0xb4
 8012df6:	f340 80f6 	ble.w	8012fe6 <lv_draw_mask_angle+0x45e>
 8012dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012dfc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	f340 80ed 	ble.w	8012fe6 <lv_draw_mask_angle+0x45e>

        if(abs_y > p->cfg.vertex_p.y) {
 8012e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e0e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012e12:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	dd01      	ble.n	8012e1e <lv_draw_mask_angle+0x296>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	e1b0      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8012e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e24:	fb02 f303 	mul.w	r3, r2, r3
 8012e28:	129b      	asrs	r3, r3, #10
 8012e2a:	61fb      	str	r3, [r7, #28]
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8012e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2e:	3301      	adds	r3, #1
 8012e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e32:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8012e34:	fb02 f303 	mul.w	r3, r2, r3
 8012e38:	129b      	asrs	r3, r3, #10
 8012e3a:	643b      	str	r3, [r7, #64]	; 0x40

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e42:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012e46:	dd0b      	ble.n	8012e60 <lv_draw_mask_angle+0x2d8>
 8012e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e4a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e4e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012e52:	da05      	bge.n	8012e60 <lv_draw_mask_angle+0x2d8>
 8012e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	da02      	bge.n	8012e60 <lv_draw_mask_angle+0x2d8>
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8012e5e:	e01f      	b.n	8012ea0 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e62:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	dd0a      	ble.n	8012e80 <lv_draw_mask_angle+0x2f8>
 8012e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e70:	2b5a      	cmp	r3, #90	; 0x5a
 8012e72:	dc05      	bgt.n	8012e80 <lv_draw_mask_angle+0x2f8>
 8012e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	da02      	bge.n	8012e80 <lv_draw_mask_angle+0x2f8>
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8012e7e:	e00f      	b.n	8012ea0 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e82:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e86:	2b5a      	cmp	r3, #90	; 0x5a
 8012e88:	dd0a      	ble.n	8012ea0 <lv_draw_mask_angle+0x318>
 8012e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e90:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012e94:	da04      	bge.n	8012ea0 <lv_draw_mask_angle+0x318>
 8012e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	dd01      	ble.n	8012ea0 <lv_draw_mask_angle+0x318>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	643b      	str	r3, [r7, #64]	; 0x40

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ea2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012ea6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012eaa:	dd0b      	ble.n	8012ec4 <lv_draw_mask_angle+0x33c>
 8012eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012eae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012eb2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012eb6:	da05      	bge.n	8012ec4 <lv_draw_mask_angle+0x33c>
 8012eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	da02      	bge.n	8012ec4 <lv_draw_mask_angle+0x33c>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8012ec2:	e01f      	b.n	8012f04 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ec6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	dd0a      	ble.n	8012ee4 <lv_draw_mask_angle+0x35c>
 8012ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ed0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012ed4:	2b5a      	cmp	r3, #90	; 0x5a
 8012ed6:	dc05      	bgt.n	8012ee4 <lv_draw_mask_angle+0x35c>
 8012ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	da02      	bge.n	8012ee4 <lv_draw_mask_angle+0x35c>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8012ee2:	e00f      	b.n	8012f04 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012ee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ee6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012eea:	2b5a      	cmp	r3, #90	; 0x5a
 8012eec:	dd0a      	ble.n	8012f04 <lv_draw_mask_angle+0x37c>
 8012eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ef0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012ef4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012ef8:	da04      	bge.n	8012f04 <lv_draw_mask_angle+0x37c>
 8012efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	dd01      	ble.n	8012f04 <lv_draw_mask_angle+0x37c>
 8012f00:	2300      	movs	r3, #0
 8012f02:	643b      	str	r3, [r7, #64]	; 0x40

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8012f04:	69fa      	ldr	r2, [r7, #28]
 8012f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f08:	1ad3      	subs	r3, r2, r3
 8012f0a:	105b      	asrs	r3, r3, #1
 8012f0c:	61bb      	str	r3, [r7, #24]

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8012f0e:	2301      	movs	r3, #1
 8012f10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8012f14:	2301      	movs	r3, #1
 8012f16:	75fb      	strb	r3, [r7, #23]

        int32_t tmp = start_angle_last + dist - rel_x;
 8012f18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	441a      	add	r2, r3
 8012f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f20:	1ad3      	subs	r3, r2, r3
 8012f22:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > len) tmp = len;
 8012f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	dd02      	ble.n	8012f34 <lv_draw_mask_angle+0x3ac>
 8012f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f32:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > 0) {
 8012f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	dd18      	ble.n	8012f6c <lv_draw_mask_angle+0x3e4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	b218      	sxth	r0, r3
 8012f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f40:	333c      	adds	r3, #60	; 0x3c
 8012f42:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012f46:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012f4a:	9300      	str	r3, [sp, #0]
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	68f8      	ldr	r0, [r7, #12]
 8012f50:	f7ff f95a 	bl	8012208 <lv_draw_mask_line>
 8012f54:	4603      	mov	r3, r0
 8012f56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8012f5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d104      	bne.n	8012f6c <lv_draw_mask_angle+0x3e4>
                lv_memset_00(&mask_buf[0], tmp);
 8012f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f64:	4619      	mov	r1, r3
 8012f66:	68f8      	ldr	r0, [r7, #12]
 8012f68:	f00f fafe 	bl	8022568 <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 8012f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f72:	429a      	cmp	r2, r3
 8012f74:	dd02      	ble.n	8012f7c <lv_draw_mask_angle+0x3f4>
 8012f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f7a:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp < 0) tmp = 0;
 8012f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	da01      	bge.n	8012f86 <lv_draw_mask_angle+0x3fe>
 8012f82:	2300      	movs	r3, #0
 8012f84:	63bb      	str	r3, [r7, #56]	; 0x38
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 8012f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f88:	68fa      	ldr	r2, [r7, #12]
 8012f8a:	18d0      	adds	r0, r2, r3
 8012f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	897b      	ldrh	r3, [r7, #10]
 8012f92:	4413      	add	r3, r2
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	b219      	sxth	r1, r3
 8012f98:	88fa      	ldrh	r2, [r7, #6]
 8012f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	b21c      	sxth	r4, r3
 8012fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012fa6:	3310      	adds	r3, #16
 8012fa8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012fac:	9300      	str	r3, [sp, #0]
 8012fae:	4623      	mov	r3, r4
 8012fb0:	f7ff f92a 	bl	8012208 <lv_draw_mask_line>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	75fb      	strb	r3, [r7, #23]
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8012fb8:	7dfb      	ldrb	r3, [r7, #23]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d109      	bne.n	8012fd2 <lv_draw_mask_angle+0x44a>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8012fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	18d0      	adds	r0, r2, r3
 8012fc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	4619      	mov	r1, r3
 8012fce:	f00f facb 	bl	8022568 <lv_memset_00>
        }
        if(res1 == res2) return res1;
 8012fd2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012fd6:	7dfb      	ldrb	r3, [r7, #23]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d102      	bne.n	8012fe2 <lv_draw_mask_angle+0x45a>
 8012fdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012fe0:	e0ce      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8012fe2:	2302      	movs	r3, #2
 8012fe4:	e0cc      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
    }
    else  {

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8012fec:	2301      	movs	r3, #1
 8012fee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        if(p->cfg.start_angle == 180) {
 8012ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ff4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ff8:	2bb4      	cmp	r3, #180	; 0xb4
 8012ffa:	d10e      	bne.n	801301a <lv_draw_mask_angle+0x492>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8012ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ffe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013002:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013006:	429a      	cmp	r2, r3
 8013008:	da03      	bge.n	8013012 <lv_draw_mask_angle+0x48a>
 801300a:	2301      	movs	r3, #1
 801300c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013010:	e043      	b.n	801309a <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8013012:	2303      	movs	r3, #3
 8013014:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013018:	e03f      	b.n	801309a <lv_draw_mask_angle+0x512>
        }
        else if(p->cfg.start_angle == 0) {
 801301a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801301c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d10e      	bne.n	8013042 <lv_draw_mask_angle+0x4ba>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8013024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013026:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801302a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801302e:	429a      	cmp	r2, r3
 8013030:	da03      	bge.n	801303a <lv_draw_mask_angle+0x4b2>
 8013032:	2303      	movs	r3, #3
 8013034:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013038:	e02f      	b.n	801309a <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801303a:	2301      	movs	r3, #1
 801303c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013040:	e02b      	b.n	801309a <lv_draw_mask_angle+0x512>
        }
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8013042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013044:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013048:	2bb3      	cmp	r3, #179	; 0xb3
 801304a:	dc06      	bgt.n	801305a <lv_draw_mask_angle+0x4d2>
 801304c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801304e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013052:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013056:	429a      	cmp	r2, r3
 8013058:	db0b      	blt.n	8013072 <lv_draw_mask_angle+0x4ea>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801305a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801305c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8013060:	2bb4      	cmp	r3, #180	; 0xb4
 8013062:	dd0a      	ble.n	801307a <lv_draw_mask_angle+0x4f2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8013064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013066:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801306a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801306e:	429a      	cmp	r2, r3
 8013070:	db03      	blt.n	801307a <lv_draw_mask_angle+0x4f2>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8013072:	2303      	movs	r3, #3
 8013074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013078:	e00f      	b.n	801309a <lv_draw_mask_angle+0x512>
        }
        else  {
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 801307a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801307c:	3310      	adds	r3, #16
 801307e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8013082:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013086:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801308a:	9300      	str	r3, [sp, #0]
 801308c:	4603      	mov	r3, r0
 801308e:	68f8      	ldr	r0, [r7, #12]
 8013090:	f7ff f8ba 	bl	8012208 <lv_draw_mask_line>
 8013094:	4603      	mov	r3, r0
 8013096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(p->cfg.end_angle == 180) {
 801309a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801309c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80130a0:	2bb4      	cmp	r3, #180	; 0xb4
 80130a2:	d10e      	bne.n	80130c2 <lv_draw_mask_angle+0x53a>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 80130a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80130aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	da03      	bge.n	80130ba <lv_draw_mask_angle+0x532>
 80130b2:	2303      	movs	r3, #3
 80130b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80130b8:	e043      	b.n	8013142 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 80130ba:	2301      	movs	r3, #1
 80130bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80130c0:	e03f      	b.n	8013142 <lv_draw_mask_angle+0x5ba>
        }
        else if(p->cfg.end_angle == 0) {
 80130c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130c4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d10e      	bne.n	80130ea <lv_draw_mask_angle+0x562>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 80130cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80130d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80130d6:	429a      	cmp	r2, r3
 80130d8:	da03      	bge.n	80130e2 <lv_draw_mask_angle+0x55a>
 80130da:	2301      	movs	r3, #1
 80130dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80130e0:	e02f      	b.n	8013142 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 80130e2:	2303      	movs	r3, #3
 80130e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80130e8:	e02b      	b.n	8013142 <lv_draw_mask_angle+0x5ba>
        }
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 80130ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80130f0:	2bb3      	cmp	r3, #179	; 0xb3
 80130f2:	dc06      	bgt.n	8013102 <lv_draw_mask_angle+0x57a>
 80130f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80130fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80130fe:	429a      	cmp	r2, r3
 8013100:	db0b      	blt.n	801311a <lv_draw_mask_angle+0x592>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8013102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013104:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8013108:	2bb4      	cmp	r3, #180	; 0xb4
 801310a:	dd0a      	ble.n	8013122 <lv_draw_mask_angle+0x59a>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801310c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801310e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013112:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013116:	429a      	cmp	r2, r3
 8013118:	db03      	blt.n	8013122 <lv_draw_mask_angle+0x59a>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 801311a:	2303      	movs	r3, #3
 801311c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013120:	e00f      	b.n	8013142 <lv_draw_mask_angle+0x5ba>
        }
        else {
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 8013122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013124:	333c      	adds	r3, #60	; 0x3c
 8013126:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801312a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801312e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	4603      	mov	r3, r0
 8013136:	68f8      	ldr	r0, [r7, #12]
 8013138:	f7ff f866 	bl	8012208 <lv_draw_mask_line>
 801313c:	4603      	mov	r3, r0
 801313e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        }

        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8013142:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013146:	2b00      	cmp	r3, #0
 8013148:	d003      	beq.n	8013152 <lv_draw_mask_angle+0x5ca>
 801314a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801314e:	2b00      	cmp	r3, #0
 8013150:	d101      	bne.n	8013156 <lv_draw_mask_angle+0x5ce>
 8013152:	2300      	movs	r3, #0
 8013154:	e014      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 8013156:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801315a:	2b03      	cmp	r3, #3
 801315c:	d105      	bne.n	801316a <lv_draw_mask_angle+0x5e2>
 801315e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013162:	2b03      	cmp	r3, #3
 8013164:	d101      	bne.n	801316a <lv_draw_mask_angle+0x5e2>
 8013166:	2300      	movs	r3, #0
 8013168:	e00a      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 801316a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801316e:	2b01      	cmp	r3, #1
 8013170:	d105      	bne.n	801317e <lv_draw_mask_angle+0x5f6>
 8013172:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013176:	2b01      	cmp	r3, #1
 8013178:	d101      	bne.n	801317e <lv_draw_mask_angle+0x5f6>
 801317a:	2301      	movs	r3, #1
 801317c:	e000      	b.n	8013180 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 801317e:	2302      	movs	r3, #2
    }
}
 8013180:	4618      	mov	r0, r3
 8013182:	3754      	adds	r7, #84	; 0x54
 8013184:	46bd      	mov	sp, r7
 8013186:	bd90      	pop	{r4, r7, pc}

08013188 <lv_draw_mask_radius>:


LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 8013188:	b590      	push	{r4, r7, lr}
 801318a:	b097      	sub	sp, #92	; 0x5c
 801318c:	af00      	add	r7, sp, #0
 801318e:	60f8      	str	r0, [r7, #12]
 8013190:	4608      	mov	r0, r1
 8013192:	4611      	mov	r1, r2
 8013194:	461a      	mov	r2, r3
 8013196:	4603      	mov	r3, r0
 8013198:	817b      	strh	r3, [r7, #10]
 801319a:	460b      	mov	r3, r1
 801319c:	813b      	strh	r3, [r7, #8]
 801319e:	4613      	mov	r3, r2
 80131a0:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 80131a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80131a4:	7c9b      	ldrb	r3, [r3, #18]
 80131a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	bf14      	ite	ne
 80131b0:	2301      	movne	r3, #1
 80131b2:	2300      	moveq	r3, #0
 80131b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t radius = p->cfg.radius;
 80131b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80131ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80131be:	647b      	str	r3, [r7, #68]	; 0x44
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 80131c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80131c2:	f103 0208 	add.w	r2, r3, #8
 80131c6:	f107 0318 	add.w	r3, r7, #24
 80131ca:	4611      	mov	r1, r2
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fe fae6 	bl	801179e <lv_area_copy>

    if(outer == false) {
 80131d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80131d6:	f083 0301 	eor.w	r3, r3, #1
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d00d      	beq.n	80131fc <lv_draw_mask_radius+0x74>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 80131e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80131e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80131e8:	429a      	cmp	r2, r3
 80131ea:	db05      	blt.n	80131f8 <lv_draw_mask_radius+0x70>
 80131ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80131f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	dd0f      	ble.n	8013218 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_TRANSP;
 80131f8:	2300      	movs	r3, #0
 80131fa:	e266      	b.n	80136ca <lv_draw_mask_radius+0x542>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 80131fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013200:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013204:	429a      	cmp	r2, r3
 8013206:	db05      	blt.n	8013214 <lv_draw_mask_radius+0x8c>
 8013208:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801320c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013210:	429a      	cmp	r2, r3
 8013212:	dd01      	ble.n	8013218 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8013214:	2301      	movs	r3, #1
 8013216:	e258      	b.n	80136ca <lv_draw_mask_radius+0x542>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8013218:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801321c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8013220:	4619      	mov	r1, r3
 8013222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013224:	440b      	add	r3, r1
 8013226:	429a      	cmp	r2, r3
 8013228:	db0b      	blt.n	8013242 <lv_draw_mask_radius+0xba>
 801322a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801322e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013232:	441a      	add	r2, r3
 8013234:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013238:	4619      	mov	r1, r3
 801323a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801323c:	1acb      	subs	r3, r1, r3
 801323e:	429a      	cmp	r2, r3
 8013240:	dd12      	ble.n	8013268 <lv_draw_mask_radius+0xe0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8013242:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013246:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801324a:	4619      	mov	r1, r3
 801324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801324e:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8013250:	429a      	cmp	r2, r3
 8013252:	f2c0 8082 	blt.w	801335a <lv_draw_mask_radius+0x1d2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8013256:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801325a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801325e:	4619      	mov	r1, r3
 8013260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013262:	1acb      	subs	r3, r1, r3
 8013264:	429a      	cmp	r2, r3
 8013266:	dc78      	bgt.n	801335a <lv_draw_mask_radius+0x1d2>
        if(outer == false) {
 8013268:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801326c:	f083 0301 	eor.w	r3, r3, #1
 8013270:	b2db      	uxtb	r3, r3
 8013272:	2b00      	cmp	r3, #0
 8013274:	d03d      	beq.n	80132f2 <lv_draw_mask_radius+0x16a>
            /*Remove the edges*/
            int32_t last = rect.x1 - abs_x;
 8013276:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801327a:	461a      	mov	r2, r3
 801327c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013280:	1ad3      	subs	r3, r2, r3
 8013282:	627b      	str	r3, [r7, #36]	; 0x24
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8013284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801328a:	429a      	cmp	r2, r3
 801328c:	dd01      	ble.n	8013292 <lv_draw_mask_radius+0x10a>
 801328e:	2300      	movs	r3, #0
 8013290:	e21b      	b.n	80136ca <lv_draw_mask_radius+0x542>
            if(last >= 0) {
 8013292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013294:	2b00      	cmp	r3, #0
 8013296:	db04      	blt.n	80132a2 <lv_draw_mask_radius+0x11a>
                lv_memset_00(&mask_buf[0], last);
 8013298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329a:	4619      	mov	r1, r3
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f00f f963 	bl	8022568 <lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 80132a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80132a6:	461a      	mov	r2, r3
 80132a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80132ac:	1ad3      	subs	r3, r2, r3
 80132ae:	3301      	adds	r3, #1
 80132b0:	623b      	str	r3, [r7, #32]
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 80132b2:	6a3b      	ldr	r3, [r7, #32]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	dc01      	bgt.n	80132bc <lv_draw_mask_radius+0x134>
 80132b8:	2300      	movs	r3, #0
 80132ba:	e206      	b.n	80136ca <lv_draw_mask_radius+0x542>
            else if(first < len) {
 80132bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80132c0:	6a3a      	ldr	r2, [r7, #32]
 80132c2:	429a      	cmp	r2, r3
 80132c4:	da09      	bge.n	80132da <lv_draw_mask_radius+0x152>
                lv_memset_00(&mask_buf[first], len - first);
 80132c6:	6a3b      	ldr	r3, [r7, #32]
 80132c8:	68fa      	ldr	r2, [r7, #12]
 80132ca:	18d0      	adds	r0, r2, r3
 80132cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80132d0:	6a3b      	ldr	r3, [r7, #32]
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	4619      	mov	r1, r3
 80132d6:	f00f f947 	bl	8022568 <lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 80132da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d106      	bne.n	80132ee <lv_draw_mask_radius+0x166>
 80132e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80132e4:	6a3a      	ldr	r2, [r7, #32]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d101      	bne.n	80132ee <lv_draw_mask_radius+0x166>
 80132ea:	2301      	movs	r3, #1
 80132ec:	e1ed      	b.n	80136ca <lv_draw_mask_radius+0x542>
            else return LV_DRAW_MASK_RES_CHANGED;
 80132ee:	2302      	movs	r3, #2
 80132f0:	e1eb      	b.n	80136ca <lv_draw_mask_radius+0x542>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 80132f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80132f6:	461a      	mov	r2, r3
 80132f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80132fc:	1ad3      	subs	r3, r2, r3
 80132fe:	657b      	str	r3, [r7, #84]	; 0x54
            if(first < 0) first = 0;
 8013300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013302:	2b00      	cmp	r3, #0
 8013304:	da01      	bge.n	801330a <lv_draw_mask_radius+0x182>
 8013306:	2300      	movs	r3, #0
 8013308:	657b      	str	r3, [r7, #84]	; 0x54
            if(first <= len) {
 801330a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801330e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013310:	429a      	cmp	r2, r3
 8013312:	dc20      	bgt.n	8013356 <lv_draw_mask_radius+0x1ce>
                int32_t last = rect.x2 - abs_x - first + 1;
 8013314:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013318:	461a      	mov	r2, r3
 801331a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801331e:	1ad2      	subs	r2, r2, r3
 8013320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013322:	1ad3      	subs	r3, r2, r3
 8013324:	3301      	adds	r3, #1
 8013326:	653b      	str	r3, [r7, #80]	; 0x50
                if(first + last > len) last = len - first;
 8013328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801332a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801332c:	441a      	add	r2, r3
 801332e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013332:	429a      	cmp	r2, r3
 8013334:	dd04      	ble.n	8013340 <lv_draw_mask_radius+0x1b8>
 8013336:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801333a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801333c:	1ad3      	subs	r3, r2, r3
 801333e:	653b      	str	r3, [r7, #80]	; 0x50
                if(last >= 0) {
 8013340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013342:	2b00      	cmp	r3, #0
 8013344:	db07      	blt.n	8013356 <lv_draw_mask_radius+0x1ce>
                    lv_memset_00(&mask_buf[first], last);
 8013346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013348:	68fa      	ldr	r2, [r7, #12]
 801334a:	4413      	add	r3, r2
 801334c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801334e:	4611      	mov	r1, r2
 8013350:	4618      	mov	r0, r3
 8013352:	f00f f909 	bl	8022568 <lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 8013356:	2302      	movs	r3, #2
 8013358:	e1b7      	b.n	80136ca <lv_draw_mask_radius+0x542>
    //    if( abs_x == 276 && abs_x + len - 1 == 479 && abs_y == 63 && p->cfg.radius == 5 && p->cfg.outer == 1) {
    //        char x = 0;
    //    }
    //exec: x:276.. 479, y:63: r:5, inv)

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 801335a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801335e:	461a      	mov	r2, r3
 8013360:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013364:	1ad3      	subs	r3, r2, r3
 8013366:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t w = lv_area_get_width(&rect);
 8013368:	f107 0318 	add.w	r3, r7, #24
 801336c:	4618      	mov	r0, r3
 801336e:	f7fe fa35 	bl	80117dc <lv_area_get_width>
 8013372:	4603      	mov	r3, r0
 8013374:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h = lv_area_get_height(&rect);
 8013376:	f107 0318 	add.w	r3, r7, #24
 801337a:	4618      	mov	r0, r3
 801337c:	f7fe fa45 	bl	801180a <lv_area_get_height>
 8013380:	4603      	mov	r3, r0
 8013382:	63bb      	str	r3, [r7, #56]	; 0x38
    abs_x -= rect.x1;
 8013384:	897a      	ldrh	r2, [r7, #10]
 8013386:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801338a:	b29b      	uxth	r3, r3
 801338c:	1ad3      	subs	r3, r2, r3
 801338e:	b29b      	uxth	r3, r3
 8013390:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 8013392:	893a      	ldrh	r2, [r7, #8]
 8013394:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013398:	b29b      	uxth	r3, r3
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	b29b      	uxth	r3, r3
 801339e:	813b      	strh	r3, [r7, #8]

    lv_coord_t aa_len;
    lv_coord_t x_start;
    lv_coord_t cir_y;
    if(abs_y < radius) {
 80133a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80133a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133a6:	429a      	cmp	r2, r3
 80133a8:	dd09      	ble.n	80133be <lv_draw_mask_radius+0x236>
        cir_y = radius - abs_y - 1;
 80133aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133ac:	b29a      	uxth	r2, r3
 80133ae:	893b      	ldrh	r3, [r7, #8]
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	3b01      	subs	r3, #1
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80133bc:	e00a      	b.n	80133d4 <lv_draw_mask_radius+0x24c>
    }
    else {
        cir_y = abs_y - (h - radius);
 80133be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133c0:	b29a      	uxth	r2, r3
 80133c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c4:	b29b      	uxth	r3, r3
 80133c6:	1ad3      	subs	r3, r2, r3
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	893b      	ldrh	r3, [r7, #8]
 80133cc:	4413      	add	r3, r2
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 80133d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133d6:	6958      	ldr	r0, [r3, #20]
 80133d8:	f107 0314 	add.w	r3, r7, #20
 80133dc:	f107 0216 	add.w	r2, r7, #22
 80133e0:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 80133e4:	f000 fd38 	bl	8013e58 <get_next_line>
 80133e8:	6378      	str	r0, [r7, #52]	; 0x34
    lv_coord_t cir_x_right = k + w - radius + x_start;
 80133ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	4413      	add	r3, r2
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	1ad3      	subs	r3, r2, r3
 80133fc:	b29a      	uxth	r2, r3
 80133fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013402:	b29b      	uxth	r3, r3
 8013404:	4413      	add	r3, r2
 8013406:	b29b      	uxth	r3, r3
 8013408:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 801340a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801340c:	b29a      	uxth	r2, r3
 801340e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013410:	b29b      	uxth	r3, r3
 8013412:	4413      	add	r3, r2
 8013414:	b29a      	uxth	r2, r3
 8013416:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801341a:	b29b      	uxth	r3, r3
 801341c:	1ad3      	subs	r3, r2, r3
 801341e:	b29b      	uxth	r3, r3
 8013420:	3b01      	subs	r3, #1
 8013422:	b29b      	uxth	r3, r3
 8013424:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t i;

    if(outer == false) {
 8013426:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801342a:	f083 0301 	eor.w	r3, r3, #1
 801342e:	b2db      	uxtb	r3, r3
 8013430:	2b00      	cmp	r3, #0
 8013432:	f000 809b 	beq.w	801356c <lv_draw_mask_radius+0x3e4>
        for(i = 0; i < aa_len; i++) {
 8013436:	2300      	movs	r3, #0
 8013438:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801343c:	e062      	b.n	8013504 <lv_draw_mask_radius+0x37c>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 801343e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013442:	461a      	mov	r2, r3
 8013444:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013448:	1ad3      	subs	r3, r2, r3
 801344a:	3b01      	subs	r3, #1
 801344c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801344e:	4413      	add	r3, r2
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8013456:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801345a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801345e:	4413      	add	r3, r2
 8013460:	2b00      	cmp	r3, #0
 8013462:	db20      	blt.n	80134a6 <lv_draw_mask_radius+0x31e>
 8013464:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013468:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801346c:	441a      	add	r2, r3
 801346e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013472:	429a      	cmp	r2, r3
 8013474:	da17      	bge.n	80134a6 <lv_draw_mask_radius+0x31e>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8013476:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801347a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801347e:	4413      	add	r3, r2
 8013480:	461a      	mov	r2, r3
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	4413      	add	r3, r2
 8013486:	7819      	ldrb	r1, [r3, #0]
 8013488:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801348c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013490:	4413      	add	r3, r2
 8013492:	461a      	mov	r2, r3
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	189c      	adds	r4, r3, r2
 8013498:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801349c:	4618      	mov	r0, r3
 801349e:	f000 fd11 	bl	8013ec4 <mask_mix>
 80134a2:	4603      	mov	r3, r0
 80134a4:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 80134a6:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80134aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134ae:	1ad3      	subs	r3, r2, r3
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	db20      	blt.n	80134f6 <lv_draw_mask_radius+0x36e>
 80134b4:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80134b8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134bc:	1ad2      	subs	r2, r2, r3
 80134be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	da17      	bge.n	80134f6 <lv_draw_mask_radius+0x36e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 80134c6:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80134ca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	461a      	mov	r2, r3
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	4413      	add	r3, r2
 80134d6:	7819      	ldrb	r1, [r3, #0]
 80134d8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80134dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134e0:	1ad3      	subs	r3, r2, r3
 80134e2:	461a      	mov	r2, r3
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	189c      	adds	r4, r3, r2
 80134e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80134ec:	4618      	mov	r0, r3
 80134ee:	f000 fce9 	bl	8013ec4 <mask_mix>
 80134f2:	4603      	mov	r3, r0
 80134f4:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 80134f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	3301      	adds	r3, #1
 80134fe:	b29b      	uxth	r3, r3
 8013500:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8013504:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013508:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 801350c:	429a      	cmp	r2, r3
 801350e:	db96      	blt.n	801343e <lv_draw_mask_radius+0x2b6>
            }
        }

        /*Clean the right side*/
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 8013510:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013514:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8013518:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801351c:	440b      	add	r3, r1
 801351e:	4293      	cmp	r3, r2
 8013520:	bfa8      	it	ge
 8013522:	4613      	movge	r3, r2
 8013524:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013528:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 801352a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801352e:	68fa      	ldr	r2, [r7, #12]
 8013530:	18d0      	adds	r0, r2, r3
 8013532:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013536:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	4619      	mov	r1, r3
 801353e:	f00f f813 	bl	8022568 <lv_memset_00>

        /*Clean the left side*/
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 8013542:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013546:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801354a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801354e:	1a5b      	subs	r3, r3, r1
 8013550:	3301      	adds	r3, #1
 8013552:	4293      	cmp	r3, r2
 8013554:	bfa8      	it	ge
 8013556:	4613      	movge	r3, r2
 8013558:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801355c:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_memset_00(&mask_buf[0], cir_x_left);
 801355e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013562:	4619      	mov	r1, r3
 8013564:	68f8      	ldr	r0, [r7, #12]
 8013566:	f00e ffff 	bl	8022568 <lv_memset_00>
 801356a:	e0ad      	b.n	80136c8 <lv_draw_mask_radius+0x540>
    }
    else {
        for(i = 0; i < aa_len; i++) {
 801356c:	2300      	movs	r3, #0
 801356e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8013572:	e063      	b.n	801363c <lv_draw_mask_radius+0x4b4>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8013574:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013578:	1e5a      	subs	r2, r3, #1
 801357a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801357e:	1ad3      	subs	r3, r2, r3
 8013580:	461a      	mov	r2, r3
 8013582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013584:	4413      	add	r3, r2
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	43db      	mvns	r3, r3
 801358a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801358e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013592:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013596:	4413      	add	r3, r2
 8013598:	2b00      	cmp	r3, #0
 801359a:	db20      	blt.n	80135de <lv_draw_mask_radius+0x456>
 801359c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80135a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80135a4:	441a      	add	r2, r3
 80135a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	da17      	bge.n	80135de <lv_draw_mask_radius+0x456>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 80135ae:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80135b2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80135b6:	4413      	add	r3, r2
 80135b8:	461a      	mov	r2, r3
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	4413      	add	r3, r2
 80135be:	7819      	ldrb	r1, [r3, #0]
 80135c0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80135c4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80135c8:	4413      	add	r3, r2
 80135ca:	461a      	mov	r2, r3
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	189c      	adds	r4, r3, r2
 80135d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80135d4:	4618      	mov	r0, r3
 80135d6:	f000 fc75 	bl	8013ec4 <mask_mix>
 80135da:	4603      	mov	r3, r0
 80135dc:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 80135de:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80135e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80135e6:	1ad3      	subs	r3, r2, r3
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	db20      	blt.n	801362e <lv_draw_mask_radius+0x4a6>
 80135ec:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80135f0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80135f4:	1ad2      	subs	r2, r2, r3
 80135f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80135fa:	429a      	cmp	r2, r3
 80135fc:	da17      	bge.n	801362e <lv_draw_mask_radius+0x4a6>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 80135fe:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013602:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013606:	1ad3      	subs	r3, r2, r3
 8013608:	461a      	mov	r2, r3
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	4413      	add	r3, r2
 801360e:	7819      	ldrb	r1, [r3, #0]
 8013610:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013614:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013618:	1ad3      	subs	r3, r2, r3
 801361a:	461a      	mov	r2, r3
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	189c      	adds	r4, r3, r2
 8013620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013624:	4618      	mov	r0, r3
 8013626:	f000 fc4d 	bl	8013ec4 <mask_mix>
 801362a:	4603      	mov	r3, r0
 801362c:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 801362e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013632:	b29b      	uxth	r3, r3
 8013634:	3301      	adds	r3, #1
 8013636:	b29b      	uxth	r3, r3
 8013638:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801363c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013640:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8013644:	429a      	cmp	r2, r3
 8013646:	db95      	blt.n	8013574 <lv_draw_mask_radius+0x3ec>
            }
        }

        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 8013648:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801364c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013650:	3301      	adds	r3, #1
 8013652:	4293      	cmp	r3, r2
 8013654:	bfa8      	it	ge
 8013656:	4613      	movge	r3, r2
 8013658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801365c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 801365e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013666:	429a      	cmp	r2, r3
 8013668:	da07      	bge.n	801367a <lv_draw_mask_radius+0x4f2>
 801366a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801366e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8013672:	1ad3      	subs	r3, r2, r3
 8013674:	0fdb      	lsrs	r3, r3, #31
 8013676:	b2db      	uxtb	r3, r3
 8013678:	e006      	b.n	8013688 <lv_draw_mask_radius+0x500>
 801367a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801367e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8013682:	1ad3      	subs	r3, r2, r3
 8013684:	0fdb      	lsrs	r3, r3, #31
 8013686:	b2db      	uxtb	r3, r3
 8013688:	2b00      	cmp	r3, #0
 801368a:	d001      	beq.n	8013690 <lv_draw_mask_radius+0x508>
 801368c:	2300      	movs	r3, #0
 801368e:	e010      	b.n	80136b2 <lv_draw_mask_radius+0x52a>
 8013690:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013698:	429a      	cmp	r2, r3
 801369a:	da05      	bge.n	80136a8 <lv_draw_mask_radius+0x520>
 801369c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801369e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80136a0:	1ad3      	subs	r3, r2, r3
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	b21b      	sxth	r3, r3
 80136a6:	e004      	b.n	80136b2 <lv_draw_mask_radius+0x52a>
 80136a8:	88fa      	ldrh	r2, [r7, #6]
 80136aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	b21b      	sxth	r3, r3
 80136b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_memset_00(&mask_buf[clr_start], clr_len);
 80136b4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80136b8:	68fa      	ldr	r2, [r7, #12]
 80136ba:	4413      	add	r3, r2
 80136bc:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80136c0:	4611      	mov	r1, r2
 80136c2:	4618      	mov	r0, r3
 80136c4:	f00e ff50 	bl	8022568 <lv_memset_00>
    }

    return LV_DRAW_MASK_RES_CHANGED;
 80136c8:	2302      	movs	r3, #2
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	375c      	adds	r7, #92	; 0x5c
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd90      	pop	{r4, r7, pc}

080136d2 <circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 80136d2:	b480      	push	{r7}
 80136d4:	b085      	sub	sp, #20
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	60f8      	str	r0, [r7, #12]
 80136da:	60b9      	str	r1, [r7, #8]
 80136dc:	4613      	mov	r3, r2
 80136de:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	88fa      	ldrh	r2, [r7, #6]
 80136e4:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2200      	movs	r2, #0
 80136ea:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 80136ec:	88fb      	ldrh	r3, [r7, #6]
 80136ee:	f1c3 0301 	rsb	r3, r3, #1
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	b21a      	sxth	r2, r3
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	801a      	strh	r2, [r3, #0]
}
 80136fa:	bf00      	nop
 80136fc:	3714      	adds	r7, #20
 80136fe:	46bd      	mov	sp, r7
 8013700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013704:	4770      	bx	lr

08013706 <circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
 8013706:	b480      	push	{r7}
 8013708:	b083      	sub	sp, #12
 801370a:	af00      	add	r7, sp, #0
 801370c:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f9b3 3000 	ldrsh.w	r3, [r3]
 801371a:	429a      	cmp	r2, r3
 801371c:	bfd4      	ite	le
 801371e:	2301      	movle	r3, #1
 8013720:	2300      	movgt	r3, #0
 8013722:	b2db      	uxtb	r3, r3
}
 8013724:	4618      	mov	r0, r3
 8013726:	370c      	adds	r7, #12
 8013728:	46bd      	mov	sp, r7
 801372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372e:	4770      	bx	lr

08013730 <circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 8013730:	b480      	push	{r7}
 8013732:	b083      	sub	sp, #12
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]

    if(*tmp <= 0) {
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013740:	2b00      	cmp	r3, #0
 8013742:	dc11      	bgt.n	8013768 <circ_next+0x38>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	f9b3 3000 	ldrsh.w	r3, [r3]
 801374a:	b29a      	uxth	r2, r3
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013752:	b29b      	uxth	r3, r3
 8013754:	005b      	lsls	r3, r3, #1
 8013756:	b29b      	uxth	r3, r3
 8013758:	4413      	add	r3, r2
 801375a:	b29b      	uxth	r3, r3
 801375c:	3303      	adds	r3, #3
 801375e:	b29b      	uxth	r3, r3
 8013760:	b21a      	sxth	r2, r3
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	801a      	strh	r2, [r3, #0]
 8013766:	e01e      	b.n	80137a6 <circ_next+0x76>
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801376e:	b29a      	uxth	r2, r3
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013776:	4619      	mov	r1, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801377e:	1acb      	subs	r3, r1, r3
 8013780:	b29b      	uxth	r3, r3
 8013782:	005b      	lsls	r3, r3, #1
 8013784:	b29b      	uxth	r3, r3
 8013786:	4413      	add	r3, r2
 8013788:	b29b      	uxth	r3, r3
 801378a:	3305      	adds	r3, #5
 801378c:	b29b      	uxth	r3, r3
 801378e:	b21a      	sxth	r2, r3
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	801a      	strh	r2, [r3, #0]
        c->x--;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f9b3 3000 	ldrsh.w	r3, [r3]
 801379a:	b29b      	uxth	r3, r3
 801379c:	3b01      	subs	r3, #1
 801379e:	b29b      	uxth	r3, r3
 80137a0:	b21a      	sxth	r2, r3
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	801a      	strh	r2, [r3, #0]
    }
    c->y++;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	3301      	adds	r3, #1
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	b21a      	sxth	r2, r3
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	805a      	strh	r2, [r3, #2]
}
 80137b8:	bf00      	nop
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr

080137c4 <circ_calc_aa4>:

static void circ_calc_aa4(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t radius)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b096      	sub	sp, #88	; 0x58
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	460b      	mov	r3, r1
 80137ce:	807b      	strh	r3, [r7, #2]
    if(radius == 0) return;
 80137d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	f000 833b 	beq.w	8013e50 <circ_calc_aa4+0x68c>
    c->radius = radius;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	887a      	ldrh	r2, [r7, #2]
 80137de:	831a      	strh	r2, [r3, #24]

    /*Allocate buffers*/
    if(c->buf) lv_mem_free(c->buf);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d004      	beq.n	80137f2 <circ_calc_aa4+0x2e>
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f00e fab7 	bl	8021d60 <lv_mem_free>

    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 80137f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80137f6:	1c5a      	adds	r2, r3, #1
 80137f8:	4613      	mov	r3, r2
 80137fa:	005b      	lsls	r3, r3, #1
 80137fc:	4413      	add	r3, r2
 80137fe:	005b      	lsls	r3, r3, #1
 8013800:	4618      	mov	r0, r3
 8013802:	f00e fa7d 	bl	8021d00 <lv_mem_alloc>
 8013806:	4602      	mov	r2, r0
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MALLOC(c->buf);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d100      	bne.n	8013816 <circ_calc_aa4+0x52>
 8013814:	e7fe      	b.n	8013814 <circ_calc_aa4+0x50>
    c->cir_opa = c->buf;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	605a      	str	r2, [r3, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681a      	ldr	r2, [r3, #0]
 8013822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013826:	005b      	lsls	r3, r3, #1
 8013828:	3302      	adds	r3, #2
 801382a:	441a      	add	r2, r3
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	60da      	str	r2, [r3, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	3304      	adds	r3, #4
 801383c:	441a      	add	r2, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	609a      	str	r2, [r3, #8]

    /*Special case, handle manually*/
    if(radius == 1) {
 8013842:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013846:	2b01      	cmp	r3, #1
 8013848:	d111      	bne.n	801386e <circ_calc_aa4+0xaa>
        c->cir_opa[0] = 180;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	685b      	ldr	r3, [r3, #4]
 801384e:	22b4      	movs	r2, #180	; 0xb4
 8013850:	701a      	strb	r2, [r3, #0]
        c->opa_start_on_y[0] = 0;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	2200      	movs	r2, #0
 8013858:	801a      	strh	r2, [r3, #0]
        c->opa_start_on_y[1] = 1;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	3302      	adds	r3, #2
 8013860:	2201      	movs	r2, #1
 8013862:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[0] = 0;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	2200      	movs	r2, #0
 801386a:	801a      	strh	r2, [r3, #0]
        return;
 801386c:	e2f1      	b.n	8013e52 <circ_calc_aa4+0x68e>
    }

    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 801386e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013872:	3301      	adds	r3, #1
 8013874:	00db      	lsls	r3, r3, #3
 8013876:	4618      	mov	r0, r3
 8013878:	f00e facc 	bl	8021e14 <lv_mem_buf_get>
 801387c:	6438      	str	r0, [r7, #64]	; 0x40
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 801387e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013882:	3301      	adds	r3, #1
 8013884:	009b      	lsls	r3, r3, #2
 8013886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013888:	4413      	add	r3, r2
 801388a:	63fb      	str	r3, [r7, #60]	; 0x3c

    uint32_t y_8th_cnt = 0;
 801388c:	2300      	movs	r3, #0
 801388e:	657b      	str	r3, [r7, #84]	; 0x54
    lv_point_t cp;
    lv_coord_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 8013890:	887b      	ldrh	r3, [r7, #2]
 8013892:	009b      	lsls	r3, r3, #2
 8013894:	b29b      	uxth	r3, r3
 8013896:	b21a      	sxth	r2, r3
 8013898:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 801389c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7ff ff16 	bl	80136d2 <circ_init>
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    lv_coord_t cir_size = 0;
 80138a6:	2300      	movs	r3, #0
 80138a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    x_int[0] = cp.x >> 2;
 80138ac:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80138b0:	109b      	asrs	r3, r3, #2
 80138b2:	b21b      	sxth	r3, r3
 80138b4:	61fb      	str	r3, [r7, #28]
    x_fract[0] = 0;
 80138b6:	2300      	movs	r3, #0
 80138b8:	60fb      	str	r3, [r7, #12]

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 80138ba:	e1b7      	b.n	8013c2c <circ_calc_aa4+0x468>
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 80138bc:	2300      	movs	r3, #0
 80138be:	653b      	str	r3, [r7, #80]	; 0x50
 80138c0:	e02b      	b.n	801391a <circ_calc_aa4+0x156>
            circ_next(&cp, &tmp);
 80138c2:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80138c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80138ca:	4611      	mov	r1, r2
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7ff ff2f 	bl	8013730 <circ_next>
            if(circ_cont(&cp) == false) break;
 80138d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7ff ff15 	bl	8013706 <circ_cont>
 80138dc:	4603      	mov	r3, r0
 80138de:	f083 0301 	eor.w	r3, r3, #1
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d11c      	bne.n	8013922 <circ_calc_aa4+0x15e>
            x_int[i] = cp.x >> 2;
 80138e8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80138ec:	109b      	asrs	r3, r3, #2
 80138ee:	b21b      	sxth	r3, r3
 80138f0:	461a      	mov	r2, r3
 80138f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138f4:	009b      	lsls	r3, r3, #2
 80138f6:	3358      	adds	r3, #88	; 0x58
 80138f8:	443b      	add	r3, r7
 80138fa:	f843 2c3c 	str.w	r2, [r3, #-60]
            x_fract[i] = cp.x & 0x3;
 80138fe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013902:	b29b      	uxth	r3, r3
 8013904:	f003 0203 	and.w	r2, r3, #3
 8013908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801390a:	009b      	lsls	r3, r3, #2
 801390c:	3358      	adds	r3, #88	; 0x58
 801390e:	443b      	add	r3, r7
 8013910:	f843 2c4c 	str.w	r2, [r3, #-76]
        for(i = 0; i < 4; i++) {
 8013914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013916:	3301      	adds	r3, #1
 8013918:	653b      	str	r3, [r7, #80]	; 0x50
 801391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801391c:	2b03      	cmp	r3, #3
 801391e:	ddd0      	ble.n	80138c2 <circ_calc_aa4+0xfe>
 8013920:	e000      	b.n	8013924 <circ_calc_aa4+0x160>
            if(circ_cont(&cp) == false) break;
 8013922:	bf00      	nop
        }
        if(i != 4) break;
 8013924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013926:	2b04      	cmp	r3, #4
 8013928:	f040 818a 	bne.w	8013c40 <circ_calc_aa4+0x47c>

        /*All lines on the same x when downscaled*/
        if(x_int[0] == x_int[3]) {
 801392c:	69fa      	ldr	r2, [r7, #28]
 801392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013930:	429a      	cmp	r2, r3
 8013932:	d139      	bne.n	80139a8 <circ_calc_aa4+0x1e4>
            cir_x[cir_size] = x_int[0];
 8013934:	69f9      	ldr	r1, [r7, #28]
 8013936:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801393a:	005b      	lsls	r3, r3, #1
 801393c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801393e:	4413      	add	r3, r2
 8013940:	b20a      	sxth	r2, r1
 8013942:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013944:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013948:	005b      	lsls	r3, r3, #1
 801394a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801394c:	4413      	add	r3, r2
 801394e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013950:	b212      	sxth	r2, r2
 8013952:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	b2da      	uxtb	r2, r3
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	b2db      	uxtb	r3, r3
 801395c:	4413      	add	r3, r2
 801395e:	b2da      	uxtb	r2, r3
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	b2db      	uxtb	r3, r3
 8013964:	4413      	add	r3, r2
 8013966:	b2d9      	uxtb	r1, r3
 8013968:	69bb      	ldr	r3, [r7, #24]
 801396a:	b2da      	uxtb	r2, r3
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6858      	ldr	r0, [r3, #4]
 8013970:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013974:	4403      	add	r3, r0
 8013976:	440a      	add	r2, r1
 8013978:	b2d2      	uxtb	r2, r2
 801397a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	685a      	ldr	r2, [r3, #4]
 8013980:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013984:	4413      	add	r3, r2
 8013986:	781a      	ldrb	r2, [r3, #0]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6859      	ldr	r1, [r3, #4]
 801398c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013990:	440b      	add	r3, r1
 8013992:	0112      	lsls	r2, r2, #4
 8013994:	b2d2      	uxtb	r2, r2
 8013996:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013998:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801399c:	b29b      	uxth	r3, r3
 801399e:	3301      	adds	r3, #1
 80139a0:	b29b      	uxth	r3, r3
 80139a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80139a6:	e13e      	b.n	8013c26 <circ_calc_aa4+0x462>
        }
        /*Second line on new x when downscaled*/
        else if(x_int[0] != x_int[1]) {
 80139a8:	69fa      	ldr	r2, [r7, #28]
 80139aa:	6a3b      	ldr	r3, [r7, #32]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d067      	beq.n	8013a80 <circ_calc_aa4+0x2bc>
            cir_x[cir_size] = x_int[0];
 80139b0:	69f9      	ldr	r1, [r7, #28]
 80139b2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139b6:	005b      	lsls	r3, r3, #1
 80139b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80139ba:	4413      	add	r3, r2
 80139bc:	b20a      	sxth	r2, r1
 80139be:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 80139c0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139c4:	005b      	lsls	r3, r3, #1
 80139c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139c8:	4413      	add	r3, r2
 80139ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80139cc:	b212      	sxth	r2, r2
 80139ce:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0];
 80139d0:	68f9      	ldr	r1, [r7, #12]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	685a      	ldr	r2, [r3, #4]
 80139d6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139da:	4413      	add	r3, r2
 80139dc:	b2ca      	uxtb	r2, r1
 80139de:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	685a      	ldr	r2, [r3, #4]
 80139e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139e8:	4413      	add	r3, r2
 80139ea:	781a      	ldrb	r2, [r3, #0]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6859      	ldr	r1, [r3, #4]
 80139f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139f4:	440b      	add	r3, r1
 80139f6:	0112      	lsls	r2, r2, #4
 80139f8:	b2d2      	uxtb	r2, r2
 80139fa:	701a      	strb	r2, [r3, #0]
            cir_size++;
 80139fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	3301      	adds	r3, #1
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	3b01      	subs	r3, #1
 8013a10:	b299      	uxth	r1, r3
 8013a12:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a16:	005b      	lsls	r3, r3, #1
 8013a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a1a:	4413      	add	r3, r2
 8013a1c:	b20a      	sxth	r2, r1
 8013a1e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013a20:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a24:	005b      	lsls	r3, r3, #1
 8013a26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013a28:	4413      	add	r3, r2
 8013a2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a2c:	b212      	sxth	r2, r2
 8013a2e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	b2da      	uxtb	r2, r3
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	4413      	add	r3, r2
 8013a3a:	b2da      	uxtb	r2, r3
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	4413      	add	r3, r2
 8013a42:	b2da      	uxtb	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6859      	ldr	r1, [r3, #4]
 8013a48:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a4c:	440b      	add	r3, r1
 8013a4e:	3204      	adds	r2, #4
 8013a50:	b2d2      	uxtb	r2, r2
 8013a52:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	685a      	ldr	r2, [r3, #4]
 8013a58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a5c:	4413      	add	r3, r2
 8013a5e:	781a      	ldrb	r2, [r3, #0]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6859      	ldr	r1, [r3, #4]
 8013a64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a68:	440b      	add	r3, r1
 8013a6a:	0112      	lsls	r2, r2, #4
 8013a6c:	b2d2      	uxtb	r2, r2
 8013a6e:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013a70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a74:	b29b      	uxth	r3, r3
 8013a76:	3301      	adds	r3, #1
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013a7e:	e0d2      	b.n	8013c26 <circ_calc_aa4+0x462>
        }
        /*Third line on new x when downscaled*/
        else if(x_int[0] != x_int[2]) {
 8013a80:	69fa      	ldr	r2, [r7, #28]
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d067      	beq.n	8013b58 <circ_calc_aa4+0x394>
            cir_x[cir_size] = x_int[0];
 8013a88:	69f9      	ldr	r1, [r7, #28]
 8013a8a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a8e:	005b      	lsls	r3, r3, #1
 8013a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a92:	4413      	add	r3, r2
 8013a94:	b20a      	sxth	r2, r1
 8013a96:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013a98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a9c:	005b      	lsls	r3, r3, #1
 8013a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013aa0:	4413      	add	r3, r2
 8013aa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013aa4:	b212      	sxth	r2, r2
 8013aa6:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	b2d9      	uxtb	r1, r3
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	b2da      	uxtb	r2, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6858      	ldr	r0, [r3, #4]
 8013ab4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ab8:	4403      	add	r3, r0
 8013aba:	440a      	add	r2, r1
 8013abc:	b2d2      	uxtb	r2, r2
 8013abe:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	685a      	ldr	r2, [r3, #4]
 8013ac4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ac8:	4413      	add	r3, r2
 8013aca:	781a      	ldrb	r2, [r3, #0]
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6859      	ldr	r1, [r3, #4]
 8013ad0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ad4:	440b      	add	r3, r1
 8013ad6:	0112      	lsls	r2, r2, #4
 8013ad8:	b2d2      	uxtb	r2, r2
 8013ada:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013adc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	b29b      	uxth	r3, r3
 8013ae6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013aea:	69fb      	ldr	r3, [r7, #28]
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	3b01      	subs	r3, #1
 8013af0:	b299      	uxth	r1, r3
 8013af2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013af6:	005b      	lsls	r3, r3, #1
 8013af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013afa:	4413      	add	r3, r2
 8013afc:	b20a      	sxth	r2, r1
 8013afe:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013b00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b04:	005b      	lsls	r3, r3, #1
 8013b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b08:	4413      	add	r3, r2
 8013b0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b0c:	b212      	sxth	r2, r2
 8013b0e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	b2da      	uxtb	r2, r3
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	4413      	add	r3, r2
 8013b1a:	b2da      	uxtb	r2, r3
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6859      	ldr	r1, [r3, #4]
 8013b20:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b24:	440b      	add	r3, r1
 8013b26:	3208      	adds	r2, #8
 8013b28:	b2d2      	uxtb	r2, r2
 8013b2a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	685a      	ldr	r2, [r3, #4]
 8013b30:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b34:	4413      	add	r3, r2
 8013b36:	781a      	ldrb	r2, [r3, #0]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6859      	ldr	r1, [r3, #4]
 8013b3c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b40:	440b      	add	r3, r1
 8013b42:	0112      	lsls	r2, r2, #4
 8013b44:	b2d2      	uxtb	r2, r2
 8013b46:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013b48:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	3301      	adds	r3, #1
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013b56:	e066      	b.n	8013c26 <circ_calc_aa4+0x462>
        }
        /*Forth line on new x when downscaled*/
        else {
            cir_x[cir_size] = x_int[0];
 8013b58:	69f9      	ldr	r1, [r7, #28]
 8013b5a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b5e:	005b      	lsls	r3, r3, #1
 8013b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b62:	4413      	add	r3, r2
 8013b64:	b20a      	sxth	r2, r1
 8013b66:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013b68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b6c:	005b      	lsls	r3, r3, #1
 8013b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b70:	4413      	add	r3, r2
 8013b72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b74:	b212      	sxth	r2, r2
 8013b76:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	b2da      	uxtb	r2, r3
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	4413      	add	r3, r2
 8013b82:	b2d9      	uxtb	r1, r3
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	b2da      	uxtb	r2, r3
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6858      	ldr	r0, [r3, #4]
 8013b8c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013b90:	4403      	add	r3, r0
 8013b92:	440a      	add	r2, r1
 8013b94:	b2d2      	uxtb	r2, r2
 8013b96:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	685a      	ldr	r2, [r3, #4]
 8013b9c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ba0:	4413      	add	r3, r2
 8013ba2:	781a      	ldrb	r2, [r3, #0]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6859      	ldr	r1, [r3, #4]
 8013ba8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bac:	440b      	add	r3, r1
 8013bae:	0112      	lsls	r2, r2, #4
 8013bb0:	b2d2      	uxtb	r2, r2
 8013bb2:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013bb4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	3301      	adds	r3, #1
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013bc2:	69fb      	ldr	r3, [r7, #28]
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	3b01      	subs	r3, #1
 8013bc8:	b299      	uxth	r1, r3
 8013bca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bce:	005b      	lsls	r3, r3, #1
 8013bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013bd2:	4413      	add	r3, r2
 8013bd4:	b20a      	sxth	r2, r1
 8013bd6:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013bd8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bdc:	005b      	lsls	r3, r3, #1
 8013bde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013be0:	4413      	add	r3, r2
 8013be2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013be4:	b212      	sxth	r2, r2
 8013be6:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	b2da      	uxtb	r2, r3
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6859      	ldr	r1, [r3, #4]
 8013bf0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bf4:	440b      	add	r3, r1
 8013bf6:	320c      	adds	r2, #12
 8013bf8:	b2d2      	uxtb	r2, r2
 8013bfa:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	685a      	ldr	r2, [r3, #4]
 8013c00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c04:	4413      	add	r3, r2
 8013c06:	781a      	ldrb	r2, [r3, #0]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6859      	ldr	r1, [r3, #4]
 8013c0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c10:	440b      	add	r3, r1
 8013c12:	0112      	lsls	r2, r2, #4
 8013c14:	b2d2      	uxtb	r2, r2
 8013c16:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013c18:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	3301      	adds	r3, #1
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        y_8th_cnt++;
 8013c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c28:	3301      	adds	r3, #1
 8013c2a:	657b      	str	r3, [r7, #84]	; 0x54
    while(circ_cont(&cp)) {
 8013c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7ff fd68 	bl	8013706 <circ_cont>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	f47f ae3f 	bne.w	80138bc <circ_calc_aa4+0xf8>
 8013c3e:	e000      	b.n	8013c42 <circ_calc_aa4+0x47e>
        if(i != 4) break;
 8013c40:	bf00      	nop
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
 8013c42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c46:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013c4a:	fb02 f303 	mul.w	r3, r2, r3
 8013c4e:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t mid_int = mid >> 10;
 8013c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c52:	129b      	asrs	r3, r3, #10
 8013c54:	637b      	str	r3, [r7, #52]	; 0x34
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8013c56:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8013c5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013c5e:	4413      	add	r3, r2
 8013c60:	005b      	lsls	r3, r3, #1
 8013c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c64:	4413      	add	r3, r2
 8013c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c6a:	461a      	mov	r2, r3
 8013c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c6e:	4293      	cmp	r3, r2
 8013c70:	d10d      	bne.n	8013c8e <circ_calc_aa4+0x4ca>
 8013c72:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8013c76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013c7a:	4413      	add	r3, r2
 8013c7c:	005b      	lsls	r3, r3, #1
 8013c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c80:	4413      	add	r3, r2
 8013c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c86:	461a      	mov	r2, r3
 8013c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	d04e      	beq.n	8013d2c <circ_calc_aa4+0x568>
        int32_t tmp_val = mid - (mid_int << 10);
 8013c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c90:	029b      	lsls	r3, r3, #10
 8013c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c94:	1ad3      	subs	r3, r2, r3
 8013c96:	64bb      	str	r3, [r7, #72]	; 0x48
        if(tmp_val <= 512) {
 8013c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c9e:	dc08      	bgt.n	8013cb2 <circ_calc_aa4+0x4ee>
            tmp_val = tmp_val * tmp_val * 2;
 8013ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ca2:	fb03 f303 	mul.w	r3, r3, r3
 8013ca6:	005b      	lsls	r3, r3, #1
 8013ca8:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8013caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cac:	141b      	asrs	r3, r3, #16
 8013cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8013cb0:	e00f      	b.n	8013cd2 <circ_calc_aa4+0x50e>
        }
        else {
            tmp_val = 1024 - tmp_val;
 8013cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cb4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8013cb8:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val * tmp_val * 2;
 8013cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cbc:	fb03 f303 	mul.w	r3, r3, r3
 8013cc0:	005b      	lsls	r3, r3, #1
 8013cc2:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8013cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cc6:	141b      	asrs	r3, r3, #16
 8013cc8:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = 15 - tmp_val;
 8013cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ccc:	f1c3 030f 	rsb	r3, r3, #15
 8013cd0:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        cir_x[cir_size] = mid_int;
 8013cd2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013cda:	4413      	add	r3, r2
 8013cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cde:	b212      	sxth	r2, r2
 8013ce0:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = mid_int;
 8013ce2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ce6:	005b      	lsls	r3, r3, #1
 8013ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013cea:	4413      	add	r3, r2
 8013cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cee:	b212      	sxth	r2, r2
 8013cf0:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = tmp_val;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	685a      	ldr	r2, [r3, #4]
 8013cf6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013cfa:	4413      	add	r3, r2
 8013cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013cfe:	b2d2      	uxtb	r2, r2
 8013d00:	701a      	strb	r2, [r3, #0]
        c->cir_opa[cir_size] *= 16;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	685a      	ldr	r2, [r3, #4]
 8013d06:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d0a:	4413      	add	r3, r2
 8013d0c:	781a      	ldrb	r2, [r3, #0]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6859      	ldr	r1, [r3, #4]
 8013d12:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d16:	440b      	add	r3, r1
 8013d18:	0112      	lsls	r2, r2, #4
 8013d1a:	b2d2      	uxtb	r2, r2
 8013d1c:	701a      	strb	r2, [r3, #0]
        cir_size++;
 8013d1e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	3301      	adds	r3, #1
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8013d2c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d30:	3b02      	subs	r3, #2
 8013d32:	653b      	str	r3, [r7, #80]	; 0x50
 8013d34:	e02c      	b.n	8013d90 <circ_calc_aa4+0x5cc>
        cir_x[cir_size] = cir_y[i];
 8013d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d38:	005b      	lsls	r3, r3, #1
 8013d3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d3c:	441a      	add	r2, r3
 8013d3e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d42:	005b      	lsls	r3, r3, #1
 8013d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d46:	440b      	add	r3, r1
 8013d48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013d4c:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = cir_x[i];
 8013d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d50:	005b      	lsls	r3, r3, #1
 8013d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d54:	441a      	add	r2, r3
 8013d56:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d5a:	005b      	lsls	r3, r3, #1
 8013d5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d5e:	440b      	add	r3, r1
 8013d60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013d64:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = c->cir_opa[i];
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	685a      	ldr	r2, [r3, #4]
 8013d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d6c:	441a      	add	r2, r3
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6859      	ldr	r1, [r3, #4]
 8013d72:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d76:	440b      	add	r3, r1
 8013d78:	7812      	ldrb	r2, [r2, #0]
 8013d7a:	701a      	strb	r2, [r3, #0]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8013d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d7e:	3b01      	subs	r3, #1
 8013d80:	653b      	str	r3, [r7, #80]	; 0x50
 8013d82:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	3301      	adds	r3, #1
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	dacf      	bge.n	8013d36 <circ_calc_aa4+0x572>
    }

    lv_coord_t y = 0;
 8013d96:	2300      	movs	r3, #0
 8013d98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    i = 0;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	653b      	str	r3, [r7, #80]	; 0x50
    c->opa_start_on_y[0] = 0;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	2200      	movs	r2, #0
 8013da6:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 8013da8:	e049      	b.n	8013e3e <circ_calc_aa4+0x67a>
        c->opa_start_on_y[y] = i;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	68da      	ldr	r2, [r3, #12]
 8013dae:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013db8:	b292      	uxth	r2, r2
 8013dba:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[y] = cir_x[i];
 8013dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dbe:	005b      	lsls	r3, r3, #1
 8013dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013dc2:	4413      	add	r3, r2
 8013dc4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	689a      	ldr	r2, [r3, #8]
 8013dcc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013dd0:	005b      	lsls	r3, r3, #1
 8013dd2:	4413      	add	r3, r2
 8013dd4:	b28a      	uxth	r2, r1
 8013dd6:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8013dd8:	e01b      	b.n	8013e12 <circ_calc_aa4+0x64e>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 8013dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ddc:	005b      	lsls	r3, r3, #1
 8013dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013de0:	4413      	add	r3, r2
 8013de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013de6:	4619      	mov	r1, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	689a      	ldr	r2, [r3, #8]
 8013dec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013df0:	005b      	lsls	r3, r3, #1
 8013df2:	4413      	add	r3, r2
 8013df4:	881b      	ldrh	r3, [r3, #0]
 8013df6:	4299      	cmp	r1, r3
 8013df8:	bfa8      	it	ge
 8013dfa:	4619      	movge	r1, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	689a      	ldr	r2, [r3, #8]
 8013e00:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	4413      	add	r3, r2
 8013e08:	b28a      	uxth	r2, r1
 8013e0a:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8013e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e0e:	3301      	adds	r3, #1
 8013e10:	653b      	str	r3, [r7, #80]	; 0x50
 8013e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e14:	005b      	lsls	r3, r3, #1
 8013e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e18:	4413      	add	r3, r2
 8013e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e1e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d104      	bne.n	8013e30 <circ_calc_aa4+0x66c>
 8013e26:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	dbd4      	blt.n	8013dda <circ_calc_aa4+0x616>
        }
        y++;
 8013e30:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	3301      	adds	r3, #1
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while(i < cir_size) {
 8013e3e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e44:	429a      	cmp	r2, r3
 8013e46:	dbb0      	blt.n	8013daa <circ_calc_aa4+0x5e6>
    }

    lv_mem_buf_release(cir_x);
 8013e48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013e4a:	f00e f88f 	bl	8021f6c <lv_mem_buf_release>
 8013e4e:	e000      	b.n	8013e52 <circ_calc_aa4+0x68e>
    if(radius == 0) return;
 8013e50:	bf00      	nop
}
 8013e52:	3758      	adds	r7, #88	; 0x58
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}

08013e58 <get_next_line>:

static lv_opa_t * get_next_line(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t y, lv_coord_t * len,
                                lv_coord_t * x_start)
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b085      	sub	sp, #20
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	60f8      	str	r0, [r7, #12]
 8013e60:	607a      	str	r2, [r7, #4]
 8013e62:	603b      	str	r3, [r7, #0]
 8013e64:	460b      	mov	r3, r1
 8013e66:	817b      	strh	r3, [r7, #10]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	68da      	ldr	r2, [r3, #12]
 8013e6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013e70:	3301      	adds	r3, #1
 8013e72:	005b      	lsls	r3, r3, #1
 8013e74:	4413      	add	r3, r2
 8013e76:	881a      	ldrh	r2, [r3, #0]
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	68d9      	ldr	r1, [r3, #12]
 8013e7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013e80:	005b      	lsls	r3, r3, #1
 8013e82:	440b      	add	r3, r1
 8013e84:	881b      	ldrh	r3, [r3, #0]
 8013e86:	1ad3      	subs	r3, r2, r3
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	b21a      	sxth	r2, r3
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	801a      	strh	r2, [r3, #0]
    *x_start = c->x_start_on_y[y];
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	689a      	ldr	r2, [r3, #8]
 8013e94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013e98:	005b      	lsls	r3, r3, #1
 8013e9a:	4413      	add	r3, r2
 8013e9c:	881b      	ldrh	r3, [r3, #0]
 8013e9e:	b21a      	sxth	r2, r3
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	801a      	strh	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	68fa      	ldr	r2, [r7, #12]
 8013eaa:	68d1      	ldr	r1, [r2, #12]
 8013eac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013eb0:	0052      	lsls	r2, r2, #1
 8013eb2:	440a      	add	r2, r1
 8013eb4:	8812      	ldrh	r2, [r2, #0]
 8013eb6:	4413      	add	r3, r2
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3714      	adds	r7, #20
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec2:	4770      	bx	lr

08013ec4 <mask_mix>:


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b083      	sub	sp, #12
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	4603      	mov	r3, r0
 8013ecc:	460a      	mov	r2, r1
 8013ece:	71fb      	strb	r3, [r7, #7]
 8013ed0:	4613      	mov	r3, r2
 8013ed2:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8013ed4:	79bb      	ldrb	r3, [r7, #6]
 8013ed6:	2bfc      	cmp	r3, #252	; 0xfc
 8013ed8:	d901      	bls.n	8013ede <mask_mix+0x1a>
 8013eda:	79fb      	ldrb	r3, [r7, #7]
 8013edc:	e010      	b.n	8013f00 <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 8013ede:	79bb      	ldrb	r3, [r7, #6]
 8013ee0:	2b02      	cmp	r3, #2
 8013ee2:	d801      	bhi.n	8013ee8 <mask_mix+0x24>
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	e00b      	b.n	8013f00 <mask_mix+0x3c>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8013ee8:	79fb      	ldrb	r3, [r7, #7]
 8013eea:	79ba      	ldrb	r2, [r7, #6]
 8013eec:	fb02 f303 	mul.w	r3, r2, r3
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	4613      	mov	r3, r2
 8013ef4:	021b      	lsls	r3, r3, #8
 8013ef6:	4413      	add	r3, r2
 8013ef8:	01db      	lsls	r3, r3, #7
 8013efa:	4413      	add	r3, r2
 8013efc:	0ddb      	lsrs	r3, r3, #23
 8013efe:	b2db      	uxtb	r3, r3
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	370c      	adds	r7, #12
 8013f04:	46bd      	mov	sp, r7
 8013f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0a:	4770      	bx	lr

08013f0c <lv_area_get_width>:
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b083      	sub	sp, #12
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f1a:	b29a      	uxth	r2, r3
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	1ad3      	subs	r3, r2, r3
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	3301      	adds	r3, #1
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	b21b      	sxth	r3, r3
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	370c      	adds	r7, #12
 8013f32:	46bd      	mov	sp, r7
 8013f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f38:	4770      	bx	lr

08013f3a <lv_area_get_height>:
{
 8013f3a:	b480      	push	{r7}
 8013f3c:	b083      	sub	sp, #12
 8013f3e:	af00      	add	r7, sp, #0
 8013f40:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013f48:	b29a      	uxth	r2, r3
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	1ad3      	subs	r3, r2, r3
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	3301      	adds	r3, #1
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	b21b      	sxth	r3, r3
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	370c      	adds	r7, #12
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr

08013f68 <lv_color_make>:
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b083      	sub	sp, #12
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	4603      	mov	r3, r0
 8013f70:	71fb      	strb	r3, [r7, #7]
 8013f72:	460b      	mov	r3, r1
 8013f74:	71bb      	strb	r3, [r7, #6]
 8013f76:	4613      	mov	r3, r2
 8013f78:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8013f7a:	797b      	ldrb	r3, [r7, #5]
 8013f7c:	09db      	lsrs	r3, r3, #7
 8013f7e:	b2da      	uxtb	r2, r3
 8013f80:	79bb      	ldrb	r3, [r7, #6]
 8013f82:	09db      	lsrs	r3, r3, #7
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	4313      	orrs	r3, r2
 8013f88:	b2da      	uxtb	r2, r3
 8013f8a:	79fb      	ldrb	r3, [r7, #7]
 8013f8c:	09db      	lsrs	r3, r3, #7
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	4313      	orrs	r3, r2
 8013f92:	b2db      	uxtb	r3, r3
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	370c      	adds	r7, #12
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr

08013fa0 <lv_color_white>:
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8013fa4:	22ff      	movs	r2, #255	; 0xff
 8013fa6:	21ff      	movs	r1, #255	; 0xff
 8013fa8:	20ff      	movs	r0, #255	; 0xff
 8013faa:	f7ff ffdd 	bl	8013f68 <lv_color_make>
 8013fae:	4603      	mov	r3, r0
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <lv_color_black>:
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8013fb8:	2200      	movs	r2, #0
 8013fba:	2100      	movs	r1, #0
 8013fbc:	2000      	movs	r0, #0
 8013fbe:	f7ff ffd3 	bl	8013f68 <lv_color_make>
 8013fc2:	4603      	mov	r3, r0
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8013fc8:	b590      	push	{r4, r7, lr}
 8013fca:	b083      	sub	sp, #12
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8013fd0:	2130      	movs	r1, #48	; 0x30
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f00e fac8 	bl	8022568 <lv_memset_00>
    dsc->bg_color = lv_color_white();
 8013fd8:	687c      	ldr	r4, [r7, #4]
 8013fda:	f7ff ffe1 	bl	8013fa0 <lv_color_white>
 8013fde:	7120      	strb	r0, [r4, #4]
    dsc->bg_grad.stops[0].color = lv_color_white();
 8013fe0:	687c      	ldr	r4, [r7, #4]
 8013fe2:	f7ff ffdd 	bl	8013fa0 <lv_color_white>
 8013fe6:	7160      	strb	r0, [r4, #5]
    dsc->bg_grad.stops[1].color = lv_color_black();
 8013fe8:	687c      	ldr	r4, [r7, #4]
 8013fea:	f7ff ffe3 	bl	8013fb4 <lv_color_black>
 8013fee:	71e0      	strb	r0, [r4, #7]
    dsc->bg_grad.stops[1].frac = 0xFF;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	22ff      	movs	r2, #255	; 0xff
 8013ff4:	721a      	strb	r2, [r3, #8]
    dsc->bg_grad.stops_count = 2;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2202      	movs	r2, #2
 8013ffa:	725a      	strb	r2, [r3, #9]
    dsc->border_color = lv_color_black();
 8013ffc:	687c      	ldr	r4, [r7, #4]
 8013ffe:	f7ff ffd9 	bl	8013fb4 <lv_color_black>
 8014002:	7620      	strb	r0, [r4, #24]
    dsc->shadow_color = lv_color_black();
 8014004:	687c      	ldr	r4, [r7, #4]
 8014006:	f7ff ffd5 	bl	8013fb4 <lv_color_black>
 801400a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	4a0e      	ldr	r2, [pc, #56]	; (801404c <lv_draw_rect_dsc_init+0x84>)
 8014012:	611a      	str	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	22ff      	movs	r2, #255	; 0xff
 8014018:	70da      	strb	r2, [r3, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	22ff      	movs	r2, #255	; 0xff
 801401e:	755a      	strb	r2, [r3, #21]
    dsc->outline_opa = LV_OPA_COVER;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	22ff      	movs	r2, #255	; 0xff
 8014024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    dsc->border_opa = LV_OPA_COVER;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	22ff      	movs	r2, #255	; 0xff
 801402c:	771a      	strb	r2, [r3, #28]
    dsc->shadow_opa = LV_OPA_COVER;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	22ff      	movs	r2, #255	; 0xff
 8014032:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    dsc->border_side = LV_BORDER_SIDE_FULL;
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	7f53      	ldrb	r3, [r2, #29]
 801403a:	210f      	movs	r1, #15
 801403c:	f361 0345 	bfi	r3, r1, #1, #5
 8014040:	7753      	strb	r3, [r2, #29]
}
 8014042:	bf00      	nop
 8014044:	370c      	adds	r7, #12
 8014046:	46bd      	mov	sp, r7
 8014048:	bd90      	pop	{r4, r7, pc}
 801404a:	bf00      	nop
 801404c:	08029ddc 	.word	0x08029ddc

08014050 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b084      	sub	sp, #16
 8014054:	af00      	add	r7, sp, #0
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	60b9      	str	r1, [r7, #8]
 801405a:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f7ff ff6c 	bl	8013f3a <lv_area_get_height>
 8014062:	4603      	mov	r3, r0
 8014064:	2b00      	cmp	r3, #0
 8014066:	dd0c      	ble.n	8014082 <lv_draw_rect+0x32>
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f7ff ff4f 	bl	8013f0c <lv_area_get_width>
 801406e:	4603      	mov	r3, r0
 8014070:	2b00      	cmp	r3, #0
 8014072:	dd06      	ble.n	8014082 <lv_draw_rect+0x32>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	68db      	ldr	r3, [r3, #12]
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	68b9      	ldr	r1, [r7, #8]
 801407c:	68f8      	ldr	r0, [r7, #12]
 801407e:	4798      	blx	r3
 8014080:	e000      	b.n	8014084 <lv_draw_rect+0x34>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8014082:	bf00      	nop

    LV_ASSERT_MEM_INTEGRITY();
}
 8014084:	3710      	adds	r7, #16
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801408a:	b590      	push	{r4, r7, lr}
 801408c:	b08b      	sub	sp, #44	; 0x2c
 801408e:	af06      	add	r7, sp, #24
 8014090:	60f8      	str	r0, [r7, #12]
 8014092:	60b9      	str	r1, [r7, #8]
 8014094:	607a      	str	r2, [r7, #4]
 8014096:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_NULL(draw_ctx);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d100      	bne.n	80140a0 <lv_draw_transform+0x16>
 801409e:	e7fe      	b.n	801409e <lv_draw_transform+0x14>
    if(draw_ctx->draw_transform == NULL) {
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d018      	beq.n	80140da <lv_draw_transform+0x50>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80140ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80140b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b2:	9305      	str	r3, [sp, #20]
 80140b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b6:	9304      	str	r3, [sp, #16]
 80140b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80140bc:	9303      	str	r3, [sp, #12]
 80140be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c0:	9302      	str	r3, [sp, #8]
 80140c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80140c6:	9301      	str	r3, [sp, #4]
 80140c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140cc:	9300      	str	r3, [sp, #0]
 80140ce:	4613      	mov	r3, r2
 80140d0:	687a      	ldr	r2, [r7, #4]
 80140d2:	68b9      	ldr	r1, [r7, #8]
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	47a0      	blx	r4
 80140d8:	e000      	b.n	80140dc <lv_draw_transform+0x52>
        return;
 80140da:	bf00      	nop

}
 80140dc:	3714      	adds	r7, #20
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd90      	pop	{r4, r7, pc}

080140e2 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b088      	sub	sp, #32
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	60f8      	str	r0, [r7, #12]
 80140ea:	4608      	mov	r0, r1
 80140ec:	4611      	mov	r1, r2
 80140ee:	461a      	mov	r2, r3
 80140f0:	4603      	mov	r3, r0
 80140f2:	817b      	strh	r3, [r7, #10]
 80140f4:	460b      	mov	r3, r1
 80140f6:	813b      	strh	r3, [r7, #8]
 80140f8:	4613      	mov	r3, r2
 80140fa:	80fb      	strh	r3, [r7, #6]
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 80140fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d116      	bne.n	8014132 <_lv_img_buf_get_transformed_area+0x50>
 8014104:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801410a:	d112      	bne.n	8014132 <_lv_img_buf_get_transformed_area+0x50>
        res->x1 = 0;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2200      	movs	r2, #0
 8014110:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	2200      	movs	r2, #0
 8014116:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 8014118:	897b      	ldrh	r3, [r7, #10]
 801411a:	3b01      	subs	r3, #1
 801411c:	b29b      	uxth	r3, r3
 801411e:	b21a      	sxth	r2, r3
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 8014124:	893b      	ldrh	r3, [r7, #8]
 8014126:	3b01      	subs	r3, #1
 8014128:	b29b      	uxth	r3, r3
 801412a:	b21a      	sxth	r2, r3
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	80da      	strh	r2, [r3, #6]
 8014130:	e09c      	b.n	801426c <_lv_img_buf_get_transformed_area+0x18a>
        return;
    }

    lv_point_t p[4] = {
 8014132:	2300      	movs	r3, #0
 8014134:	823b      	strh	r3, [r7, #16]
 8014136:	2300      	movs	r3, #0
 8014138:	827b      	strh	r3, [r7, #18]
 801413a:	897b      	ldrh	r3, [r7, #10]
 801413c:	82bb      	strh	r3, [r7, #20]
 801413e:	2300      	movs	r3, #0
 8014140:	82fb      	strh	r3, [r7, #22]
 8014142:	2300      	movs	r3, #0
 8014144:	833b      	strh	r3, [r7, #24]
 8014146:	893b      	ldrh	r3, [r7, #8]
 8014148:	837b      	strh	r3, [r7, #26]
 801414a:	897b      	ldrh	r3, [r7, #10]
 801414c:	83bb      	strh	r3, [r7, #28]
 801414e:	893b      	ldrh	r3, [r7, #8]
 8014150:	83fb      	strh	r3, [r7, #30]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 8014152:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014156:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8014158:	f107 0010 	add.w	r0, r7, #16
 801415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415e:	f00c fdb9 	bl	8020cd4 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 8014162:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014166:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8014168:	f107 0310 	add.w	r3, r7, #16
 801416c:	1d18      	adds	r0, r3, #4
 801416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014170:	f00c fdb0 	bl	8020cd4 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 8014174:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014178:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801417a:	f107 0310 	add.w	r3, r7, #16
 801417e:	f103 0008 	add.w	r0, r3, #8
 8014182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014184:	f00c fda6 	bl	8020cd4 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 8014188:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801418c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801418e:	f107 0310 	add.w	r3, r7, #16
 8014192:	f103 000c 	add.w	r0, r3, #12
 8014196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014198:	f00c fd9c 	bl	8020cd4 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801419c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80141a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80141a4:	4293      	cmp	r3, r2
 80141a6:	bfa8      	it	ge
 80141a8:	4613      	movge	r3, r2
 80141aa:	b21a      	sxth	r2, r3
 80141ac:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80141b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80141b4:	428b      	cmp	r3, r1
 80141b6:	bfa8      	it	ge
 80141b8:	460b      	movge	r3, r1
 80141ba:	b21b      	sxth	r3, r3
 80141bc:	4293      	cmp	r3, r2
 80141be:	bfa8      	it	ge
 80141c0:	4613      	movge	r3, r2
 80141c2:	b21b      	sxth	r3, r3
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	3b02      	subs	r3, #2
 80141c8:	b29b      	uxth	r3, r3
 80141ca:	b21a      	sxth	r2, r3
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 80141d0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80141d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80141d8:	4293      	cmp	r3, r2
 80141da:	bfb8      	it	lt
 80141dc:	4613      	movlt	r3, r2
 80141de:	b21a      	sxth	r2, r3
 80141e0:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80141e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80141e8:	428b      	cmp	r3, r1
 80141ea:	bfb8      	it	lt
 80141ec:	460b      	movlt	r3, r1
 80141ee:	b21b      	sxth	r3, r3
 80141f0:	4293      	cmp	r3, r2
 80141f2:	bfb8      	it	lt
 80141f4:	4613      	movlt	r3, r2
 80141f6:	b21b      	sxth	r3, r3
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	3302      	adds	r3, #2
 80141fc:	b29b      	uxth	r3, r3
 80141fe:	b21a      	sxth	r2, r3
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 8014204:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8014208:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801420c:	4293      	cmp	r3, r2
 801420e:	bfa8      	it	ge
 8014210:	4613      	movge	r3, r2
 8014212:	b21a      	sxth	r2, r3
 8014214:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8014218:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801421c:	428b      	cmp	r3, r1
 801421e:	bfa8      	it	ge
 8014220:	460b      	movge	r3, r1
 8014222:	b21b      	sxth	r3, r3
 8014224:	4293      	cmp	r3, r2
 8014226:	bfa8      	it	ge
 8014228:	4613      	movge	r3, r2
 801422a:	b21b      	sxth	r3, r3
 801422c:	b29b      	uxth	r3, r3
 801422e:	3b02      	subs	r3, #2
 8014230:	b29b      	uxth	r3, r3
 8014232:	b21a      	sxth	r2, r3
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 8014238:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801423c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014240:	4293      	cmp	r3, r2
 8014242:	bfb8      	it	lt
 8014244:	4613      	movlt	r3, r2
 8014246:	b21a      	sxth	r2, r3
 8014248:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801424c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014250:	428b      	cmp	r3, r1
 8014252:	bfb8      	it	lt
 8014254:	460b      	movlt	r3, r1
 8014256:	b21b      	sxth	r3, r3
 8014258:	4293      	cmp	r3, r2
 801425a:	bfb8      	it	lt
 801425c:	4613      	movlt	r3, r2
 801425e:	b21b      	sxth	r3, r3
 8014260:	b29b      	uxth	r3, r3
 8014262:	3302      	adds	r3, #2
 8014264:	b29b      	uxth	r3, r3
 8014266:	b21a      	sxth	r2, r3
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 801426c:	3720      	adds	r7, #32
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
	...

08014274 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b088      	sub	sp, #32
 8014278:	af00      	add	r7, sp, #0
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	7239      	strb	r1, [r7, #8]
 801427e:	607a      	str	r2, [r7, #4]
    /*Is the image cached?*/
    _lv_img_cache_entry_t * cached_src = NULL;
 8014280:	2300      	movs	r3, #0
 8014282:	61fb      	str	r3, [r7, #28]
    }
    else {
        LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
 8014284:	4b19      	ldr	r3, [pc, #100]	; (80142ec <_lv_img_cache_open+0x78>)
 8014286:	61fb      	str	r3, [r7, #28]
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 8014288:	f00b fddc 	bl	801fe44 <lv_tick_get>
 801428c:	61b8      	str	r0, [r7, #24]
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 801428e:	69f8      	ldr	r0, [r7, #28]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	7a3a      	ldrb	r2, [r7, #8]
 8014294:	68f9      	ldr	r1, [r7, #12]
 8014296:	f000 f8e9 	bl	801446c <lv_img_decoder_open>
 801429a:	4603      	mov	r3, r0
 801429c:	75fb      	strb	r3, [r7, #23]
    if(open_res == LV_RES_INV) {
 801429e:	7dfb      	ldrb	r3, [r7, #23]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d109      	bne.n	80142b8 <_lv_img_cache_open+0x44>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 80142a4:	212c      	movs	r1, #44	; 0x2c
 80142a6:	69f8      	ldr	r0, [r7, #28]
 80142a8:	f00e f95e 	bl	8022568 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 80142ac:	69fb      	ldr	r3, [r7, #28]
 80142ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80142b2:	629a      	str	r2, [r3, #40]	; 0x28
        return NULL;
 80142b4:	2300      	movs	r3, #0
 80142b6:	e014      	b.n	80142e2 <_lv_img_cache_open+0x6e>
    }

    cached_src->life = 0;
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	2200      	movs	r2, #0
 80142bc:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 80142be:	69fb      	ldr	r3, [r7, #28]
 80142c0:	69db      	ldr	r3, [r3, #28]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d105      	bne.n	80142d2 <_lv_img_cache_open+0x5e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80142c6:	69b8      	ldr	r0, [r7, #24]
 80142c8:	f00b fdd6 	bl	801fe78 <lv_tick_elaps>
 80142cc:	4602      	mov	r2, r0
 80142ce:	69fb      	ldr	r3, [r7, #28]
 80142d0:	61da      	str	r2, [r3, #28]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	69db      	ldr	r3, [r3, #28]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d102      	bne.n	80142e0 <_lv_img_cache_open+0x6c>
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	2201      	movs	r2, #1
 80142de:	61da      	str	r2, [r3, #28]

    return cached_src;
 80142e0:	69fb      	ldr	r3, [r7, #28]
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3720      	adds	r7, #32
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	200008b0 	.word	0x200008b0

080142f0 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 80142f0:	b480      	push	{r7}
 80142f2:	b083      	sub	sp, #12
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 80142f8:	bf00      	nop
 80142fa:	370c      	adds	r7, #12
 80142fc:	46bd      	mov	sp, r7
 80142fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014302:	4770      	bx	lr

08014304 <lv_memcpy_small>:
{
 8014304:	b480      	push	{r7}
 8014306:	b087      	sub	sp, #28
 8014308:	af00      	add	r7, sp, #0
 801430a:	60f8      	str	r0, [r7, #12]
 801430c:	60b9      	str	r1, [r7, #8]
 801430e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	613b      	str	r3, [r7, #16]
    while(len) {
 8014318:	e00c      	b.n	8014334 <lv_memcpy_small+0x30>
        *d8 = *s8;
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	781a      	ldrb	r2, [r3, #0]
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	701a      	strb	r2, [r3, #0]
        d8++;
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	3301      	adds	r3, #1
 8014326:	617b      	str	r3, [r7, #20]
        s8++;
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	3301      	adds	r3, #1
 801432c:	613b      	str	r3, [r7, #16]
        len--;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	3b01      	subs	r3, #1
 8014332:	607b      	str	r3, [r7, #4]
    while(len) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d1ef      	bne.n	801431a <lv_memcpy_small+0x16>
    return dst;
 801433a:	68fb      	ldr	r3, [r7, #12]
}
 801433c:	4618      	mov	r0, r3
 801433e:	371c      	adds	r7, #28
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <lv_color_make>:
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	4603      	mov	r3, r0
 8014350:	71fb      	strb	r3, [r7, #7]
 8014352:	460b      	mov	r3, r1
 8014354:	71bb      	strb	r3, [r7, #6]
 8014356:	4613      	mov	r3, r2
 8014358:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801435a:	797b      	ldrb	r3, [r7, #5]
 801435c:	09db      	lsrs	r3, r3, #7
 801435e:	b2da      	uxtb	r2, r3
 8014360:	79bb      	ldrb	r3, [r7, #6]
 8014362:	09db      	lsrs	r3, r3, #7
 8014364:	b2db      	uxtb	r3, r3
 8014366:	4313      	orrs	r3, r2
 8014368:	b2da      	uxtb	r2, r3
 801436a:	79fb      	ldrb	r3, [r7, #7]
 801436c:	09db      	lsrs	r3, r3, #7
 801436e:	b2db      	uxtb	r3, r3
 8014370:	4313      	orrs	r3, r2
 8014372:	b2db      	uxtb	r3, r3
}
 8014374:	4618      	mov	r0, r3
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 */
void _lv_img_decoder_init(void)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b082      	sub	sp, #8
 8014384:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 8014386:	2114      	movs	r1, #20
 8014388:	4810      	ldr	r0, [pc, #64]	; (80143cc <_lv_img_decoder_init+0x4c>)
 801438a:	f00d fa1c 	bl	80217c6 <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 801438e:	f000 f96d 	bl	801466c <lv_img_decoder_create>
 8014392:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d100      	bne.n	801439c <_lv_img_decoder_init+0x1c>
 801439a:	e7fe      	b.n	801439a <_lv_img_decoder_init+0x1a>
    if(decoder == NULL) {
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d010      	beq.n	80143c4 <_lv_img_decoder_init+0x44>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 80143a2:	490b      	ldr	r1, [pc, #44]	; (80143d0 <_lv_img_decoder_init+0x50>)
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f000 f97d 	bl	80146a4 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 80143aa:	490a      	ldr	r1, [pc, #40]	; (80143d4 <_lv_img_decoder_init+0x54>)
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 f987 	bl	80146c0 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 80143b2:	4909      	ldr	r1, [pc, #36]	; (80143d8 <_lv_img_decoder_init+0x58>)
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f000 f991 	bl	80146dc <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 80143ba:	4908      	ldr	r1, [pc, #32]	; (80143dc <_lv_img_decoder_init+0x5c>)
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f000 f99b 	bl	80146f8 <lv_img_decoder_set_close_cb>
 80143c2:	e000      	b.n	80143c6 <_lv_img_decoder_init+0x46>
        return;
 80143c4:	bf00      	nop
}
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	20000894 	.word	0x20000894
 80143d0:	08014715 	.word	0x08014715
 80143d4:	08014865 	.word	0x08014865
 80143d8:	08014b29 	.word	0x08014b29
 80143dc:	08014c4d 	.word	0x08014c4d

080143e0 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const void * src, lv_img_header_t * header)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	6039      	str	r1, [r7, #0]
    lv_memset_00(header, sizeof(lv_img_header_t));
 80143ea:	2104      	movs	r1, #4
 80143ec:	6838      	ldr	r0, [r7, #0]
 80143ee:	f00e f8bb 	bl	8022568 <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d101      	bne.n	80143fc <lv_img_decoder_get_info+0x1c>
 80143f8:	2300      	movs	r3, #0
 80143fa:	e030      	b.n	801445e <lv_img_decoder_get_info+0x7e>

    lv_img_src_t src_type = lv_img_src_get_type(src);
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7fb ff76 	bl	80102ee <lv_img_src_get_type>
 8014402:	4603      	mov	r3, r0
 8014404:	73fb      	strb	r3, [r7, #15]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8014406:	7bfb      	ldrb	r3, [r7, #15]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d107      	bne.n	801441c <lv_img_decoder_get_info+0x3c>
        const lv_img_dsc_t * img_dsc = src;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	60bb      	str	r3, [r7, #8]
        if(img_dsc->data == NULL) return LV_RES_INV;
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d101      	bne.n	801441c <lv_img_decoder_get_info+0x3c>
 8014418:	2300      	movs	r3, #0
 801441a:	e020      	b.n	801445e <lv_img_decoder_get_info+0x7e>
    }

    lv_res_t res = LV_RES_INV;
 801441c:	2300      	movs	r3, #0
 801441e:	75fb      	strb	r3, [r7, #23]
    lv_img_decoder_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8014420:	4811      	ldr	r0, [pc, #68]	; (8014468 <lv_img_decoder_get_info+0x88>)
 8014422:	f00d faae 	bl	8021982 <_lv_ll_get_head>
 8014426:	6138      	str	r0, [r7, #16]
 8014428:	e013      	b.n	8014452 <lv_img_decoder_get_info+0x72>
        if(d->info_cb) {
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d00a      	beq.n	8014448 <lv_img_decoder_get_info+0x68>
            res = d->info_cb(d, src, header);
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	683a      	ldr	r2, [r7, #0]
 8014438:	6879      	ldr	r1, [r7, #4]
 801443a:	6938      	ldr	r0, [r7, #16]
 801443c:	4798      	blx	r3
 801443e:	4603      	mov	r3, r0
 8014440:	75fb      	strb	r3, [r7, #23]
            if(res == LV_RES_OK) break;
 8014442:	7dfb      	ldrb	r3, [r7, #23]
 8014444:	2b01      	cmp	r3, #1
 8014446:	d008      	beq.n	801445a <lv_img_decoder_get_info+0x7a>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8014448:	6939      	ldr	r1, [r7, #16]
 801444a:	4807      	ldr	r0, [pc, #28]	; (8014468 <lv_img_decoder_get_info+0x88>)
 801444c:	f00d fabb 	bl	80219c6 <_lv_ll_get_next>
 8014450:	6138      	str	r0, [r7, #16]
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d1e8      	bne.n	801442a <lv_img_decoder_get_info+0x4a>
 8014458:	e000      	b.n	801445c <lv_img_decoder_get_info+0x7c>
            if(res == LV_RES_OK) break;
 801445a:	bf00      	nop
        }
    }

    return res;
 801445c:	7dfb      	ldrb	r3, [r7, #23]
}
 801445e:	4618      	mov	r0, r3
 8014460:	3718      	adds	r7, #24
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	20000894 	.word	0x20000894

0801446c <lv_img_decoder_open>:

lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color, int32_t frame_id)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b08a      	sub	sp, #40	; 0x28
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	60b9      	str	r1, [r7, #8]
 8014476:	713a      	strb	r2, [r7, #4]
 8014478:	603b      	str	r3, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 801447a:	2128      	movs	r1, #40	; 0x28
 801447c:	68f8      	ldr	r0, [r7, #12]
 801447e:	f00e f873 	bl	8022568 <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d101      	bne.n	801448c <lv_img_decoder_open+0x20>
 8014488:	2300      	movs	r3, #0
 801448a:	e096      	b.n	80145ba <lv_img_decoder_open+0x14e>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 801448c:	68b8      	ldr	r0, [r7, #8]
 801448e:	f7fb ff2e 	bl	80102ee <lv_img_src_get_type>
 8014492:	4603      	mov	r3, r0
 8014494:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8014496:	7ffb      	ldrb	r3, [r7, #31]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d107      	bne.n	80144ac <lv_img_decoder_open+0x40>
        const lv_img_dsc_t * img_dsc = src;
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	61bb      	str	r3, [r7, #24]
        if(img_dsc->data == NULL) return LV_RES_INV;
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	689b      	ldr	r3, [r3, #8]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d101      	bne.n	80144ac <lv_img_decoder_open+0x40>
 80144a8:	2300      	movs	r3, #0
 80144aa:	e086      	b.n	80145ba <lv_img_decoder_open+0x14e>
    }

    dsc->color    = color;
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	793a      	ldrb	r2, [r7, #4]
 80144b0:	721a      	strb	r2, [r3, #8]
    dsc->src_type = src_type;
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	7ffa      	ldrb	r2, [r7, #31]
 80144b6:	741a      	strb	r2, [r3, #16]
    dsc->frame_id = frame_id;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	683a      	ldr	r2, [r7, #0]
 80144bc:	60da      	str	r2, [r3, #12]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	7c1b      	ldrb	r3, [r3, #16]
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	d11d      	bne.n	8014502 <lv_img_decoder_open+0x96>
        size_t fnlen = strlen(src);
 80144c6:	68b8      	ldr	r0, [r7, #8]
 80144c8:	f7eb fec0 	bl	800024c <strlen>
 80144cc:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	3301      	adds	r3, #1
 80144d2:	4618      	mov	r0, r3
 80144d4:	f00d fc14 	bl	8021d00 <lv_mem_alloc>
 80144d8:	4602      	mov	r2, r0
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MALLOC(dsc->src);
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d100      	bne.n	80144e8 <lv_img_decoder_open+0x7c>
 80144e6:	e7fe      	b.n	80144e6 <lv_img_decoder_open+0x7a>
        if(dsc->src == NULL) {
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d101      	bne.n	80144f4 <lv_img_decoder_open+0x88>
            LV_LOG_WARN("lv_img_decoder_open: out of memory");
            return LV_RES_INV;
 80144f0:	2300      	movs	r3, #0
 80144f2:	e062      	b.n	80145ba <lv_img_decoder_open+0x14e>
        }
        strcpy((char *)dsc->src, src);
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	68b9      	ldr	r1, [r7, #8]
 80144fa:	4618      	mov	r0, r3
 80144fc:	f012 f8de 	bl	80266bc <strcpy>
 8014500:	e002      	b.n	8014508 <lv_img_decoder_open+0x9c>
    }
    else {
        dsc->src = src;
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	68ba      	ldr	r2, [r7, #8]
 8014506:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 8014508:	2300      	movs	r3, #0
 801450a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    lv_img_decoder_t * decoder;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 801450e:	482d      	ldr	r0, [pc, #180]	; (80145c4 <lv_img_decoder_open+0x158>)
 8014510:	f00d fa37 	bl	8021982 <_lv_ll_get_head>
 8014514:	6238      	str	r0, [r7, #32]
 8014516:	e042      	b.n	801459e <lv_img_decoder_open+0x132>
        /*Info and Open callbacks are required*/
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 8014518:	6a3b      	ldr	r3, [r7, #32]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d036      	beq.n	801458e <lv_img_decoder_open+0x122>
 8014520:	6a3b      	ldr	r3, [r7, #32]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d032      	beq.n	801458e <lv_img_decoder_open+0x122>

        res = decoder->info_cb(decoder, src, &dsc->header);
 8014528:	6a3b      	ldr	r3, [r7, #32]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	68fa      	ldr	r2, [r7, #12]
 801452e:	3214      	adds	r2, #20
 8014530:	68b9      	ldr	r1, [r7, #8]
 8014532:	6a38      	ldr	r0, [r7, #32]
 8014534:	4798      	blx	r3
 8014536:	4603      	mov	r3, r0
 8014538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(res != LV_RES_OK) continue;
 801453c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014540:	2b01      	cmp	r3, #1
 8014542:	d126      	bne.n	8014592 <lv_img_decoder_open+0x126>

        dsc->decoder = decoder;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	6a3a      	ldr	r2, [r7, #32]
 8014548:	601a      	str	r2, [r3, #0]
        res = decoder->open_cb(decoder, dsc);
 801454a:	6a3b      	ldr	r3, [r7, #32]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	68f9      	ldr	r1, [r7, #12]
 8014550:	6a38      	ldr	r0, [r7, #32]
 8014552:	4798      	blx	r3
 8014554:	4603      	mov	r3, r0
 8014556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /*Opened successfully. It is a good decoder for this image source*/
        if(res == LV_RES_OK) return res;
 801455a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801455e:	2b01      	cmp	r3, #1
 8014560:	d102      	bne.n	8014568 <lv_img_decoder_open+0xfc>
 8014562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014566:	e028      	b.n	80145ba <lv_img_decoder_open+0x14e>

        /*Prepare for the next loop*/
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	3314      	adds	r3, #20
 801456c:	2104      	movs	r1, #4
 801456e:	4618      	mov	r0, r3
 8014570:	f00d fffa 	bl	8022568 <lv_memset_00>

        dsc->error_msg = NULL;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2200      	movs	r2, #0
 8014578:	621a      	str	r2, [r3, #32]
        dsc->img_data  = NULL;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	2200      	movs	r2, #0
 801457e:	619a      	str	r2, [r3, #24]
        dsc->user_data = NULL;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2200      	movs	r2, #0
 8014584:	625a      	str	r2, [r3, #36]	; 0x24
        dsc->time_to_open = 0;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	2200      	movs	r2, #0
 801458a:	61da      	str	r2, [r3, #28]
 801458c:	e002      	b.n	8014594 <lv_img_decoder_open+0x128>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 801458e:	bf00      	nop
 8014590:	e000      	b.n	8014594 <lv_img_decoder_open+0x128>
        if(res != LV_RES_OK) continue;
 8014592:	bf00      	nop
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8014594:	6a39      	ldr	r1, [r7, #32]
 8014596:	480b      	ldr	r0, [pc, #44]	; (80145c4 <lv_img_decoder_open+0x158>)
 8014598:	f00d fa15 	bl	80219c6 <_lv_ll_get_next>
 801459c:	6238      	str	r0, [r7, #32]
 801459e:	6a3b      	ldr	r3, [r7, #32]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d1b9      	bne.n	8014518 <lv_img_decoder_open+0xac>
    }

    if(dsc->src_type == LV_IMG_SRC_FILE)
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	7c1b      	ldrb	r3, [r3, #16]
 80145a8:	2b01      	cmp	r3, #1
 80145aa:	d104      	bne.n	80145b6 <lv_img_decoder_open+0x14a>
        lv_mem_free((void *)dsc->src);
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	685b      	ldr	r3, [r3, #4]
 80145b0:	4618      	mov	r0, r3
 80145b2:	f00d fbd5 	bl	8021d60 <lv_mem_free>

    return res;
 80145b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3728      	adds	r7, #40	; 0x28
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	20000894 	.word	0x20000894

080145c8 <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 80145c8:	b590      	push	{r4, r7, lr}
 80145ca:	b089      	sub	sp, #36	; 0x24
 80145cc:	af02      	add	r7, sp, #8
 80145ce:	60f8      	str	r0, [r7, #12]
 80145d0:	4608      	mov	r0, r1
 80145d2:	4611      	mov	r1, r2
 80145d4:	461a      	mov	r2, r3
 80145d6:	4603      	mov	r3, r0
 80145d8:	817b      	strh	r3, [r7, #10]
 80145da:	460b      	mov	r3, r1
 80145dc:	813b      	strh	r3, [r7, #8]
 80145de:	4613      	mov	r3, r2
 80145e0:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 80145e2:	2300      	movs	r3, #0
 80145e4:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	689b      	ldr	r3, [r3, #8]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d012      	beq.n	8014616 <lv_img_decoder_read_line+0x4e>
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	689c      	ldr	r4, [r3, #8]
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	6818      	ldr	r0, [r3, #0]
 80145fa:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80145fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014604:	9301      	str	r3, [sp, #4]
 8014606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801460a:	9300      	str	r3, [sp, #0]
 801460c:	460b      	mov	r3, r1
 801460e:	68f9      	ldr	r1, [r7, #12]
 8014610:	47a0      	blx	r4
 8014612:	4603      	mov	r3, r0
 8014614:	75fb      	strb	r3, [r7, #23]

    return res;
 8014616:	7dfb      	ldrb	r3, [r7, #23]
}
 8014618:	4618      	mov	r0, r3
 801461a:	371c      	adds	r7, #28
 801461c:	46bd      	mov	sp, r7
 801461e:	bd90      	pop	{r4, r7, pc}

08014620 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d018      	beq.n	8014662 <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	68db      	ldr	r3, [r3, #12]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d007      	beq.n	801464a <lv_img_decoder_close+0x2a>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68db      	ldr	r3, [r3, #12]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	6812      	ldr	r2, [r2, #0]
 8014644:	6879      	ldr	r1, [r7, #4]
 8014646:	4610      	mov	r0, r2
 8014648:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	7c1b      	ldrb	r3, [r3, #16]
 801464e:	2b01      	cmp	r3, #1
 8014650:	d107      	bne.n	8014662 <lv_img_decoder_close+0x42>
            lv_mem_free((void *)dsc->src);
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	685b      	ldr	r3, [r3, #4]
 8014656:	4618      	mov	r0, r3
 8014658:	f00d fb82 	bl	8021d60 <lv_mem_free>
            dsc->src = NULL;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2200      	movs	r2, #0
 8014660:	605a      	str	r2, [r3, #4]
        }
    }
}
 8014662:	bf00      	nop
 8014664:	3708      	adds	r7, #8
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}
	...

0801466c <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 8014672:	480b      	ldr	r0, [pc, #44]	; (80146a0 <lv_img_decoder_create+0x34>)
 8014674:	f00d f8c0 	bl	80217f8 <_lv_ll_ins_head>
 8014678:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d100      	bne.n	8014682 <lv_img_decoder_create+0x16>
 8014680:	e7fe      	b.n	8014680 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d101      	bne.n	801468c <lv_img_decoder_create+0x20>
 8014688:	2300      	movs	r3, #0
 801468a:	e004      	b.n	8014696 <lv_img_decoder_create+0x2a>

    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 801468c:	2114      	movs	r1, #20
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f00d ff6a 	bl	8022568 <lv_memset_00>

    return decoder;
 8014694:	687b      	ldr	r3, [r7, #4]
}
 8014696:	4618      	mov	r0, r3
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}
 801469e:	bf00      	nop
 80146a0:	20000894 	.word	0x20000894

080146a4 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 80146a4:	b480      	push	{r7}
 80146a6:	b083      	sub	sp, #12
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	683a      	ldr	r2, [r7, #0]
 80146b2:	601a      	str	r2, [r3, #0]
}
 80146b4:	bf00      	nop
 80146b6:	370c      	adds	r7, #12
 80146b8:	46bd      	mov	sp, r7
 80146ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146be:	4770      	bx	lr

080146c0 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 80146c0:	b480      	push	{r7}
 80146c2:	b083      	sub	sp, #12
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	683a      	ldr	r2, [r7, #0]
 80146ce:	605a      	str	r2, [r3, #4]
}
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 80146dc:	b480      	push	{r7}
 80146de:	b083      	sub	sp, #12
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	683a      	ldr	r2, [r7, #0]
 80146ea:	609a      	str	r2, [r3, #8]
}
 80146ec:	bf00      	nop
 80146ee:	370c      	adds	r7, #12
 80146f0:	46bd      	mov	sp, r7
 80146f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f6:	4770      	bx	lr

080146f8 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	683a      	ldr	r2, [r7, #0]
 8014706:	60da      	str	r2, [r3, #12]
}
 8014708:	bf00      	nop
 801470a:	370c      	adds	r7, #12
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr

08014714 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b08a      	sub	sp, #40	; 0x28
 8014718:	af00      	add	r7, sp, #0
 801471a:	60f8      	str	r0, [r7, #12]
 801471c:	60b9      	str	r1, [r7, #8]
 801471e:	607a      	str	r2, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8014720:	68b8      	ldr	r0, [r7, #8]
 8014722:	f7fb fde4 	bl	80102ee <lv_img_src_get_type>
 8014726:	4603      	mov	r3, r0
 8014728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801472c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014730:	2b00      	cmp	r3, #0
 8014732:	d12f      	bne.n	8014794 <lv_img_decoder_built_in_info+0x80>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801473c:	b2db      	uxtb	r3, r3
 801473e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8014742:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8014746:	2b03      	cmp	r3, #3
 8014748:	d903      	bls.n	8014752 <lv_img_decoder_built_in_info+0x3e>
 801474a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801474e:	2b14      	cmp	r3, #20
 8014750:	d901      	bls.n	8014756 <lv_img_decoder_built_in_info+0x42>
 8014752:	2300      	movs	r3, #0
 8014754:	e080      	b.n	8014858 <lv_img_decoder_built_in_info+0x144>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801475e:	b299      	uxth	r1, r3
 8014760:	687a      	ldr	r2, [r7, #4]
 8014762:	6813      	ldr	r3, [r2, #0]
 8014764:	f361 2394 	bfi	r3, r1, #10, #11
 8014768:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	885b      	ldrh	r3, [r3, #2]
 801476e:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8014772:	b299      	uxth	r1, r3
 8014774:	687a      	ldr	r2, [r7, #4]
 8014776:	8853      	ldrh	r3, [r2, #2]
 8014778:	f361 134f 	bfi	r3, r1, #5, #11
 801477c:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014786:	b2d9      	uxtb	r1, r3
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	7813      	ldrb	r3, [r2, #0]
 801478c:	f361 0304 	bfi	r3, r1, #0, #5
 8014790:	7013      	strb	r3, [r2, #0]
 8014792:	e060      	b.n	8014856 <lv_img_decoder_built_in_info+0x142>
    }
    else if(src_type == LV_IMG_SRC_FILE) {
 8014794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014798:	2b01      	cmp	r3, #1
 801479a:	d143      	bne.n	8014824 <lv_img_decoder_built_in_info+0x110>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 801479c:	68b8      	ldr	r0, [r7, #8]
 801479e:	f00c ffcd 	bl	802173c <lv_fs_get_ext>
 80147a2:	4603      	mov	r3, r0
 80147a4:	492e      	ldr	r1, [pc, #184]	; (8014860 <lv_img_decoder_built_in_info+0x14c>)
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7eb fd46 	bl	8000238 <strcmp>
 80147ac:	4603      	mov	r3, r0
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d001      	beq.n	80147b6 <lv_img_decoder_built_in_info+0xa2>
 80147b2:	2300      	movs	r3, #0
 80147b4:	e050      	b.n	8014858 <lv_img_decoder_built_in_info+0x144>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 80147b6:	f107 0318 	add.w	r3, r7, #24
 80147ba:	2202      	movs	r2, #2
 80147bc:	68b9      	ldr	r1, [r7, #8]
 80147be:	4618      	mov	r0, r3
 80147c0:	f00c fcec 	bl	802119c <lv_fs_open>
 80147c4:	4603      	mov	r3, r0
 80147c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if(res == LV_FS_RES_OK) {
 80147ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d118      	bne.n	8014804 <lv_img_decoder_built_in_info+0xf0>
            uint32_t rn;
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 80147d2:	f107 0314 	add.w	r3, r7, #20
 80147d6:	f107 0018 	add.w	r0, r7, #24
 80147da:	2204      	movs	r2, #4
 80147dc:	6879      	ldr	r1, [r7, #4]
 80147de:	f00c fe9b 	bl	8021518 <lv_fs_read>
 80147e2:	4603      	mov	r3, r0
 80147e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            lv_fs_close(&f);
 80147e8:	f107 0318 	add.w	r3, r7, #24
 80147ec:	4618      	mov	r0, r3
 80147ee:	f00c fd42 	bl	8021276 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 80147f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d102      	bne.n	8014800 <lv_img_decoder_built_in_info+0xec>
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	2b04      	cmp	r3, #4
 80147fe:	d001      	beq.n	8014804 <lv_img_decoder_built_in_info+0xf0>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 8014800:	2300      	movs	r3, #0
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8014802:	e029      	b.n	8014858 <lv_img_decoder_built_in_info+0x144>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	781b      	ldrb	r3, [r3, #0]
 8014808:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801480c:	b2db      	uxtb	r3, r3
 801480e:	2b03      	cmp	r3, #3
 8014810:	d906      	bls.n	8014820 <lv_img_decoder_built_in_info+0x10c>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801481a:	b2db      	uxtb	r3, r3
 801481c:	2b14      	cmp	r3, #20
 801481e:	d91a      	bls.n	8014856 <lv_img_decoder_built_in_info+0x142>
 8014820:	2300      	movs	r3, #0
 8014822:	e019      	b.n	8014858 <lv_img_decoder_built_in_info+0x144>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8014824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014828:	2b02      	cmp	r3, #2
 801482a:	d112      	bne.n	8014852 <lv_img_decoder_built_in_info+0x13e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         *function*/
        header->w = 1;
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	6813      	ldr	r3, [r2, #0]
 8014830:	2101      	movs	r1, #1
 8014832:	f361 2394 	bfi	r3, r1, #10, #11
 8014836:	6013      	str	r3, [r2, #0]
        header->h = 1;
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	8853      	ldrh	r3, [r2, #2]
 801483c:	2101      	movs	r1, #1
 801483e:	f361 134f 	bfi	r3, r1, #5, #11
 8014842:	8053      	strh	r3, [r2, #2]
        /*Symbols always have transparent parts. Important because of cover check in the draw
         *function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	7813      	ldrb	r3, [r2, #0]
 8014848:	210b      	movs	r1, #11
 801484a:	f361 0304 	bfi	r3, r1, #0, #5
 801484e:	7013      	strb	r3, [r2, #0]
 8014850:	e001      	b.n	8014856 <lv_img_decoder_built_in_info+0x142>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 8014852:	2300      	movs	r3, #0
 8014854:	e000      	b.n	8014858 <lv_img_decoder_built_in_info+0x144>
    }
    return LV_RES_OK;
 8014856:	2301      	movs	r3, #1
}
 8014858:	4618      	mov	r0, r3
 801485a:	3728      	adds	r7, #40	; 0x28
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}
 8014860:	080266f8 	.word	0x080266f8

08014864 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `color` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8014864:	b5b0      	push	{r4, r5, r7, lr}
 8014866:	b08e      	sub	sp, #56	; 0x38
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
 801486c:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	7c1b      	ldrb	r3, [r3, #16]
 8014872:	2b01      	cmp	r3, #1
 8014874:	d14a      	bne.n	801490c <lv_img_decoder_built_in_open+0xa8>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	4618      	mov	r0, r3
 801487c:	f00c ff5e 	bl	802173c <lv_fs_get_ext>
 8014880:	4603      	mov	r3, r0
 8014882:	499c      	ldr	r1, [pc, #624]	; (8014af4 <lv_img_decoder_built_in_open+0x290>)
 8014884:	4618      	mov	r0, r3
 8014886:	f7eb fcd7 	bl	8000238 <strcmp>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d001      	beq.n	8014894 <lv_img_decoder_built_in_open+0x30>
 8014890:	2300      	movs	r3, #0
 8014892:	e144      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	6859      	ldr	r1, [r3, #4]
 8014898:	f107 030c 	add.w	r3, r7, #12
 801489c:	2202      	movs	r2, #2
 801489e:	4618      	mov	r0, r3
 80148a0:	f00c fc7c 	bl	802119c <lv_fs_open>
 80148a4:	4603      	mov	r3, r0
 80148a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 80148aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d001      	beq.n	80148b6 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 80148b2:	2300      	movs	r3, #0
 80148b4:	e133      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d11b      	bne.n	80148f6 <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80148be:	2014      	movs	r0, #20
 80148c0:	f00d fa1e 	bl	8021d00 <lv_mem_alloc>
 80148c4:	4602      	mov	r2, r0
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d100      	bne.n	80148d4 <lv_img_decoder_built_in_open+0x70>
 80148d2:	e7fe      	b.n	80148d2 <lv_img_decoder_built_in_open+0x6e>
            if(dsc->user_data == NULL) {
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d106      	bne.n	80148ea <lv_img_decoder_built_in_open+0x86>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_fs_close(&f);
 80148dc:	f107 030c 	add.w	r3, r7, #12
 80148e0:	4618      	mov	r0, r3
 80148e2:	f00c fcc8 	bl	8021276 <lv_fs_close>
                return LV_RES_INV;
 80148e6:	2300      	movs	r3, #0
 80148e8:	e119      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ee:	2114      	movs	r1, #20
 80148f0:	4618      	mov	r0, r3
 80148f2:	f00d fe39 	bl	8022568 <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fa:	62bb      	str	r3, [r7, #40]	; 0x28
        lv_memcpy_small(&user_data->f, &f, sizeof(f));
 80148fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148fe:	f107 010c 	add.w	r1, r7, #12
 8014902:	220c      	movs	r2, #12
 8014904:	4618      	mov	r0, r3
 8014906:	f7ff fcfd 	bl	8014304 <lv_memcpy_small>
 801490a:	e00a      	b.n	8014922 <lv_img_decoder_built_in_open+0xbe>
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	7c1b      	ldrb	r3, [r3, #16]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d106      	bne.n	8014922 <lv_img_decoder_built_in_open+0xbe>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d101      	bne.n	8014922 <lv_img_decoder_built_in_open+0xbe>
            return LV_RES_INV;
 801491e:	2300      	movs	r3, #0
 8014920:	e0fd      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	7d1b      	ldrb	r3, [r3, #20]
 8014926:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801492a:	b2db      	uxtb	r3, r3
 801492c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014934:	2b04      	cmp	r3, #4
 8014936:	d00f      	beq.n	8014958 <lv_img_decoder_built_in_open+0xf4>
 8014938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801493c:	2b05      	cmp	r3, #5
 801493e:	d00b      	beq.n	8014958 <lv_img_decoder_built_in_open+0xf4>
 8014940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014944:	2b06      	cmp	r3, #6
 8014946:	d007      	beq.n	8014958 <lv_img_decoder_built_in_open+0xf4>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 8014948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801494c:	2b14      	cmp	r3, #20
 801494e:	d003      	beq.n	8014958 <lv_img_decoder_built_in_open+0xf4>
 8014950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014954:	2b0e      	cmp	r3, #14
 8014956:	d10c      	bne.n	8014972 <lv_img_decoder_built_in_open+0x10e>
       cf == LV_IMG_CF_ALPHA_8BIT) {
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	7c1b      	ldrb	r3, [r3, #16]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d106      	bne.n	801496e <lv_img_decoder_built_in_open+0x10a>
            /*In case of uncompressed formats the image stored in the ROM/RAM.
             *So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	689a      	ldr	r2, [r3, #8]
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	619a      	str	r2, [r3, #24]
            return LV_RES_OK;
 801496a:	2301      	movs	r3, #1
 801496c:	e0d7      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            return LV_RES_OK;
 801496e:	2301      	movs	r3, #1
 8014970:	e0d5      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8014972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014976:	2b07      	cmp	r3, #7
 8014978:	d00c      	beq.n	8014994 <lv_img_decoder_built_in_open+0x130>
 801497a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801497e:	2b08      	cmp	r3, #8
 8014980:	d008      	beq.n	8014994 <lv_img_decoder_built_in_open+0x130>
 8014982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014986:	2b09      	cmp	r3, #9
 8014988:	d004      	beq.n	8014994 <lv_img_decoder_built_in_open+0x130>
 801498a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801498e:	2b0a      	cmp	r3, #10
 8014990:	f040 80b2 	bne.w	8014af8 <lv_img_decoder_built_in_open+0x294>
            cf == LV_IMG_CF_INDEXED_8BIT) {
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8014994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014998:	4618      	mov	r0, r3
 801499a:	f7fb fc1b 	bl	80101d4 <lv_img_cf_get_px_size>
 801499e:	4603      	mov	r3, r0
 80149a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 80149a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80149a8:	2201      	movs	r2, #1
 80149aa:	fa02 f303 	lsl.w	r3, r2, r3
 80149ae:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d116      	bne.n	80149e6 <lv_img_decoder_built_in_open+0x182>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80149b8:	2014      	movs	r0, #20
 80149ba:	f00d f9a1 	bl	8021d00 <lv_mem_alloc>
 80149be:	4602      	mov	r2, r0
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d100      	bne.n	80149ce <lv_img_decoder_built_in_open+0x16a>
 80149cc:	e7fe      	b.n	80149cc <lv_img_decoder_built_in_open+0x168>
            if(dsc->user_data == NULL) {
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d101      	bne.n	80149da <lv_img_decoder_built_in_open+0x176>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 80149d6:	2300      	movs	r3, #0
 80149d8:	e0a1      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149de:	2114      	movs	r1, #20
 80149e0:	4618      	mov	r0, r3
 80149e2:	f00d fdc1 	bl	8022568 <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ea:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80149ec:	6a38      	ldr	r0, [r7, #32]
 80149ee:	f00d f987 	bl	8021d00 <lv_mem_alloc>
 80149f2:	4602      	mov	r2, r0
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	60da      	str	r2, [r3, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 80149f8:	69fb      	ldr	r3, [r7, #28]
 80149fa:	68db      	ldr	r3, [r3, #12]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d100      	bne.n	8014a02 <lv_img_decoder_built_in_open+0x19e>
 8014a00:	e7fe      	b.n	8014a00 <lv_img_decoder_built_in_open+0x19c>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8014a02:	6a38      	ldr	r0, [r7, #32]
 8014a04:	f00d f97c 	bl	8021d00 <lv_mem_alloc>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	69fb      	ldr	r3, [r7, #28]
 8014a0c:	611a      	str	r2, [r3, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8014a0e:	69fb      	ldr	r3, [r7, #28]
 8014a10:	691b      	ldr	r3, [r3, #16]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d100      	bne.n	8014a18 <lv_img_decoder_built_in_open+0x1b4>
 8014a16:	e7fe      	b.n	8014a16 <lv_img_decoder_built_in_open+0x1b2>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	68db      	ldr	r3, [r3, #12]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d003      	beq.n	8014a28 <lv_img_decoder_built_in_open+0x1c4>
 8014a20:	69fb      	ldr	r3, [r7, #28]
 8014a22:	691b      	ldr	r3, [r3, #16]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d105      	bne.n	8014a34 <lv_img_decoder_built_in_open+0x1d0>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8014a28:	6839      	ldr	r1, [r7, #0]
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f000 f90e 	bl	8014c4c <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8014a30:	2300      	movs	r3, #0
 8014a32:	e074      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	7c1b      	ldrb	r3, [r3, #16]
 8014a38:	2b01      	cmp	r3, #1
 8014a3a:	d129      	bne.n	8014a90 <lv_img_decoder_built_in_open+0x22c>
            /*Read the palette from file*/
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8014a3c:	69fb      	ldr	r3, [r7, #28]
 8014a3e:	2200      	movs	r2, #0
 8014a40:	2104      	movs	r1, #4
 8014a42:	4618      	mov	r0, r3
 8014a44:	f00c fdad 	bl	80215a2 <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8014a48:	2300      	movs	r3, #0
 8014a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8014a4c:	e01b      	b.n	8014a86 <lv_img_decoder_built_in_open+0x222>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8014a4e:	69f8      	ldr	r0, [r7, #28]
 8014a50:	f107 0108 	add.w	r1, r7, #8
 8014a54:	2300      	movs	r3, #0
 8014a56:	2204      	movs	r2, #4
 8014a58:	f00c fd5e 	bl	8021518 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8014a5c:	7ab8      	ldrb	r0, [r7, #10]
 8014a5e:	7a79      	ldrb	r1, [r7, #9]
 8014a60:	7a3d      	ldrb	r5, [r7, #8]
 8014a62:	69fb      	ldr	r3, [r7, #28]
 8014a64:	68da      	ldr	r2, [r3, #12]
 8014a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a68:	18d4      	adds	r4, r2, r3
 8014a6a:	462a      	mov	r2, r5
 8014a6c:	f7ff fc6c 	bl	8014348 <lv_color_make>
 8014a70:	4603      	mov	r3, r0
 8014a72:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 8014a74:	69fb      	ldr	r3, [r7, #28]
 8014a76:	691a      	ldr	r2, [r3, #16]
 8014a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a7a:	4413      	add	r3, r2
 8014a7c:	7afa      	ldrb	r2, [r7, #11]
 8014a7e:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8014a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a82:	3301      	adds	r3, #1
 8014a84:	637b      	str	r3, [r7, #52]	; 0x34
 8014a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a88:	6a3b      	ldr	r3, [r7, #32]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d3df      	bcc.n	8014a4e <lv_img_decoder_built_in_open+0x1ea>
 8014a8e:	e02f      	b.n	8014af0 <lv_img_decoder_built_in_open+0x28c>
            }
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	689b      	ldr	r3, [r3, #8]
 8014a96:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8014a98:	2300      	movs	r3, #0
 8014a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8014a9c:	e024      	b.n	8014ae8 <lv_img_decoder_built_in_open+0x284>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8014a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa0:	009b      	lsls	r3, r3, #2
 8014aa2:	69ba      	ldr	r2, [r7, #24]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	7898      	ldrb	r0, [r3, #2]
 8014aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	69ba      	ldr	r2, [r7, #24]
 8014aae:	4413      	add	r3, r2
 8014ab0:	7859      	ldrb	r1, [r3, #1]
 8014ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab4:	009b      	lsls	r3, r3, #2
 8014ab6:	69ba      	ldr	r2, [r7, #24]
 8014ab8:	4413      	add	r3, r2
 8014aba:	781d      	ldrb	r5, [r3, #0]
 8014abc:	69fb      	ldr	r3, [r7, #28]
 8014abe:	68da      	ldr	r2, [r3, #12]
 8014ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ac2:	18d4      	adds	r4, r2, r3
 8014ac4:	462a      	mov	r2, r5
 8014ac6:	f7ff fc3f 	bl	8014348 <lv_color_make>
 8014aca:	4603      	mov	r3, r0
 8014acc:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8014ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ad0:	009b      	lsls	r3, r3, #2
 8014ad2:	69ba      	ldr	r2, [r7, #24]
 8014ad4:	441a      	add	r2, r3
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	6919      	ldr	r1, [r3, #16]
 8014ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014adc:	440b      	add	r3, r1
 8014ade:	78d2      	ldrb	r2, [r2, #3]
 8014ae0:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8014ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae4:	3301      	adds	r3, #1
 8014ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8014ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aea:	6a3b      	ldr	r3, [r7, #32]
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d3d6      	bcc.n	8014a9e <lv_img_decoder_built_in_open+0x23a>
            }
        }

        return LV_RES_OK;
 8014af0:	2301      	movs	r3, #1
 8014af2:	e014      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
 8014af4:	080266f8 	.word	0x080266f8
    }
    /*Alpha indexed images.*/
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 8014af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014afc:	2b0b      	cmp	r3, #11
 8014afe:	d007      	beq.n	8014b10 <lv_img_decoder_built_in_open+0x2ac>
 8014b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b04:	2b0c      	cmp	r3, #12
 8014b06:	d003      	beq.n	8014b10 <lv_img_decoder_built_in_open+0x2ac>
 8014b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b0c:	2b0d      	cmp	r3, #13
 8014b0e:	d101      	bne.n	8014b14 <lv_img_decoder_built_in_open+0x2b0>
        return LV_RES_OK; /*Nothing to process*/
 8014b10:	2301      	movs	r3, #1
 8014b12:	e004      	b.n	8014b1e <lv_img_decoder_built_in_open+0x2ba>
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8014b14:	6839      	ldr	r1, [r7, #0]
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 f898 	bl	8014c4c <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format");
        return LV_RES_INV;
 8014b1c:	2300      	movs	r3, #0
    }
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3738      	adds	r7, #56	; 0x38
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bdb0      	pop	{r4, r5, r7, pc}
 8014b26:	bf00      	nop

08014b28 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b088      	sub	sp, #32
 8014b2c:	af02      	add	r7, sp, #8
 8014b2e:	60f8      	str	r0, [r7, #12]
 8014b30:	60b9      	str	r1, [r7, #8]
 8014b32:	4611      	mov	r1, r2
 8014b34:	461a      	mov	r2, r3
 8014b36:	460b      	mov	r3, r1
 8014b38:	80fb      	strh	r3, [r7, #6]
 8014b3a:	4613      	mov	r3, r2
 8014b3c:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_res_t res = LV_RES_INV;
 8014b3e:	2300      	movs	r3, #0
 8014b40:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	7d1b      	ldrb	r3, [r3, #20]
 8014b46:	f003 031f 	and.w	r3, r3, #31
 8014b4a:	b2db      	uxtb	r3, r3
 8014b4c:	2b04      	cmp	r3, #4
 8014b4e:	d00d      	beq.n	8014b6c <lv_img_decoder_built_in_read_line+0x44>
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	7d1b      	ldrb	r3, [r3, #20]
 8014b54:	f003 031f 	and.w	r3, r3, #31
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	2b05      	cmp	r3, #5
 8014b5c:	d006      	beq.n	8014b6c <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	7d1b      	ldrb	r3, [r3, #20]
 8014b62:	f003 031f 	and.w	r3, r3, #31
 8014b66:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014b68:	2b06      	cmp	r3, #6
 8014b6a:	d112      	bne.n	8014b92 <lv_img_decoder_built_in_read_line+0x6a>
        /*For TRUE_COLOR images read line required only for files.
         *For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	7c1b      	ldrb	r3, [r3, #16]
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d166      	bne.n	8014c42 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8014b74:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014b78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014b7c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b82:	9300      	str	r3, [sp, #0]
 8014b84:	4603      	mov	r3, r0
 8014b86:	68b8      	ldr	r0, [r7, #8]
 8014b88:	f000 f88f 	bl	8014caa <lv_img_decoder_built_in_line_true_color>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014b90:	e057      	b.n	8014c42 <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	7d1b      	ldrb	r3, [r3, #20]
 8014b96:	f003 031f 	and.w	r3, r3, #31
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	2b0b      	cmp	r3, #11
 8014b9e:	d014      	beq.n	8014bca <lv_img_decoder_built_in_read_line+0xa2>
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	7d1b      	ldrb	r3, [r3, #20]
 8014ba4:	f003 031f 	and.w	r3, r3, #31
 8014ba8:	b2db      	uxtb	r3, r3
 8014baa:	2b0c      	cmp	r3, #12
 8014bac:	d00d      	beq.n	8014bca <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	7d1b      	ldrb	r3, [r3, #20]
 8014bb2:	f003 031f 	and.w	r3, r3, #31
 8014bb6:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8014bb8:	2b0d      	cmp	r3, #13
 8014bba:	d006      	beq.n	8014bca <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	7d1b      	ldrb	r3, [r3, #20]
 8014bc0:	f003 031f 	and.w	r3, r3, #31
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	2b0e      	cmp	r3, #14
 8014bc8:	d10e      	bne.n	8014be8 <lv_img_decoder_built_in_read_line+0xc0>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8014bca:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014bce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014bd2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd8:	9300      	str	r3, [sp, #0]
 8014bda:	4603      	mov	r3, r0
 8014bdc:	68b8      	ldr	r0, [r7, #8]
 8014bde:	f000 f8c3 	bl	8014d68 <lv_img_decoder_built_in_line_alpha>
 8014be2:	4603      	mov	r3, r0
 8014be4:	75fb      	strb	r3, [r7, #23]
 8014be6:	e02c      	b.n	8014c42 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	7d1b      	ldrb	r3, [r3, #20]
 8014bec:	f003 031f 	and.w	r3, r3, #31
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	2b07      	cmp	r3, #7
 8014bf4:	d014      	beq.n	8014c20 <lv_img_decoder_built_in_read_line+0xf8>
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	7d1b      	ldrb	r3, [r3, #20]
 8014bfa:	f003 031f 	and.w	r3, r3, #31
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	2b08      	cmp	r3, #8
 8014c02:	d00d      	beq.n	8014c20 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	7d1b      	ldrb	r3, [r3, #20]
 8014c08:	f003 031f 	and.w	r3, r3, #31
 8014c0c:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8014c0e:	2b09      	cmp	r3, #9
 8014c10:	d006      	beq.n	8014c20 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	7d1b      	ldrb	r3, [r3, #20]
 8014c16:	f003 031f 	and.w	r3, r3, #31
 8014c1a:	b2db      	uxtb	r3, r3
 8014c1c:	2b0a      	cmp	r3, #10
 8014c1e:	d10e      	bne.n	8014c3e <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8014c20:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014c24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014c28:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2e:	9300      	str	r3, [sp, #0]
 8014c30:	4603      	mov	r3, r0
 8014c32:	68b8      	ldr	r0, [r7, #8]
 8014c34:	f000 fa0a 	bl	801504c <lv_img_decoder_built_in_line_indexed>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	75fb      	strb	r3, [r7, #23]
 8014c3c:	e001      	b.n	8014c42 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	e000      	b.n	8014c44 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8014c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3718      	adds	r7, #24
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}

08014c4c <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b084      	sub	sp, #16
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c5a:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d01f      	beq.n	8014ca2 <lv_img_decoder_built_in_close+0x56>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	7c1b      	ldrb	r3, [r3, #16]
 8014c66:	2b01      	cmp	r3, #1
 8014c68:	d103      	bne.n	8014c72 <lv_img_decoder_built_in_close+0x26>
            lv_fs_close(&user_data->f);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f00c fb02 	bl	8021276 <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	68db      	ldr	r3, [r3, #12]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d004      	beq.n	8014c84 <lv_img_decoder_built_in_close+0x38>
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f00d f86e 	bl	8021d60 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	691b      	ldr	r3, [r3, #16]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d004      	beq.n	8014c96 <lv_img_decoder_built_in_close+0x4a>
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	691b      	ldr	r3, [r3, #16]
 8014c90:	4618      	mov	r0, r3
 8014c92:	f00d f865 	bl	8021d60 <lv_mem_free>

        lv_mem_free(user_data);
 8014c96:	68f8      	ldr	r0, [r7, #12]
 8014c98:	f00d f862 	bl	8021d60 <lv_mem_free>
        dsc->user_data = NULL;
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8014ca2:	bf00      	nop
 8014ca4:	3710      	adds	r7, #16
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}

08014caa <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b08a      	sub	sp, #40	; 0x28
 8014cae:	af00      	add	r7, sp, #0
 8014cb0:	60f8      	str	r0, [r7, #12]
 8014cb2:	4608      	mov	r0, r1
 8014cb4:	4611      	mov	r1, r2
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	4603      	mov	r3, r0
 8014cba:	817b      	strh	r3, [r7, #10]
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	813b      	strh	r3, [r7, #8]
 8014cc0:	4613      	mov	r3, r2
 8014cc2:	80fb      	strh	r3, [r7, #6]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cc8:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	7d1b      	ldrb	r3, [r3, #20]
 8014cce:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7fb fa7d 	bl	80101d4 <lv_img_cf_get_px_size>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8014ce0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014ce4:	68fa      	ldr	r2, [r7, #12]
 8014ce6:	6952      	ldr	r2, [r2, #20]
 8014ce8:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8014cec:	b292      	uxth	r2, r2
 8014cee:	fb03 f202 	mul.w	r2, r3, r2
 8014cf2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014cf6:	4413      	add	r3, r2
 8014cf8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014cfc:	fb02 f303 	mul.w	r3, r2, r3
 8014d00:	10db      	asrs	r3, r3, #3
 8014d02:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	3304      	adds	r3, #4
 8014d08:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8014d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	69f9      	ldr	r1, [r7, #28]
 8014d10:	4618      	mov	r0, r3
 8014d12:	f00c fc46 	bl	80215a2 <lv_fs_seek>
 8014d16:	4603      	mov	r3, r0
 8014d18:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8014d1a:	7efb      	ldrb	r3, [r7, #27]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d001      	beq.n	8014d24 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8014d20:	2300      	movs	r3, #0
 8014d22:	e01d      	b.n	8014d60 <lv_img_decoder_built_in_line_true_color+0xb6>
    }
    uint32_t btr = len * (px_size >> 3);
 8014d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014d2c:	08d2      	lsrs	r2, r2, #3
 8014d2e:	b2d2      	uxtb	r2, r2
 8014d30:	fb02 f303 	mul.w	r3, r2, r3
 8014d34:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8014d36:	2300      	movs	r3, #0
 8014d38:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8014d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d3c:	f107 0310 	add.w	r3, r7, #16
 8014d40:	697a      	ldr	r2, [r7, #20]
 8014d42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014d44:	f00c fbe8 	bl	8021518 <lv_fs_read>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 8014d4c:	7efb      	ldrb	r3, [r7, #27]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d103      	bne.n	8014d5a <lv_img_decoder_built_in_line_true_color+0xb0>
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	697a      	ldr	r2, [r7, #20]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d001      	beq.n	8014d5e <lv_img_decoder_built_in_line_true_color+0xb4>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e000      	b.n	8014d60 <lv_img_decoder_built_in_line_true_color+0xb6>
    }

    return LV_RES_OK;
 8014d5e:	2301      	movs	r3, #1
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3728      	adds	r7, #40	; 0x28
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8014d68:	b590      	push	{r4, r7, lr}
 8014d6a:	b097      	sub	sp, #92	; 0x5c
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	4608      	mov	r0, r1
 8014d72:	4611      	mov	r1, r2
 8014d74:	461a      	mov	r2, r3
 8014d76:	4603      	mov	r3, r0
 8014d78:	817b      	strh	r3, [r7, #10]
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	813b      	strh	r3, [r7, #8]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	80fb      	strh	r3, [r7, #6]
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8014d82:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8014d86:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8014d88:	4bae      	ldr	r3, [pc, #696]	; (8015044 <lv_img_decoder_built_in_line_alpha+0x2dc>)
 8014d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8014d8c:	4bae      	ldr	r3, [pc, #696]	; (8015048 <lv_img_decoder_built_in_line_alpha+0x2e0>)
 8014d8e:	f107 0418 	add.w	r4, r7, #24
 8014d92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	7a1b      	ldrb	r3, [r3, #8]
 8014d9c:	753b      	strb	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8014d9e:	2300      	movs	r3, #0
 8014da0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8014da4:	e00e      	b.n	8014dc4 <lv_img_decoder_built_in_line_alpha+0x5c>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
 8014da6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8014daa:	005b      	lsls	r3, r3, #1
 8014dac:	461a      	mov	r2, r3
 8014dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014db0:	4413      	add	r3, r2
 8014db2:	7d3a      	ldrb	r2, [r7, #20]
 8014db4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8014db6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	b29b      	uxth	r3, r3
 8014dc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8014dc4:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8014dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	dbea      	blt.n	8014da6 <lv_img_decoder_built_in_line_alpha+0x3e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	7d1b      	ldrb	r3, [r3, #20]
 8014dd8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7fb f9f8 	bl	80101d4 <lv_img_cf_get_px_size>
 8014de4:	4603      	mov	r3, r0
 8014de6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8014dea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014dee:	2201      	movs	r2, #1
 8014df0:	fa02 f303 	lsl.w	r3, r2, r3
 8014df4:	b29b      	uxth	r3, r3
 8014df6:	3b01      	subs	r3, #1
 8014df8:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 8014e00:	2300      	movs	r3, #0
 8014e02:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8014e04:	2300      	movs	r3, #0
 8014e06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	7d1b      	ldrb	r3, [r3, #20]
 8014e0e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014e12:	b2db      	uxtb	r3, r3
 8014e14:	3b0b      	subs	r3, #11
 8014e16:	2b03      	cmp	r3, #3
 8014e18:	f200 8094 	bhi.w	8014f44 <lv_img_decoder_built_in_line_alpha+0x1dc>
 8014e1c:	a201      	add	r2, pc, #4	; (adr r2, 8014e24 <lv_img_decoder_built_in_line_alpha+0xbc>)
 8014e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e22:	bf00      	nop
 8014e24:	08014e35 	.word	0x08014e35
 8014e28:	08014e7d 	.word	0x08014e7d
 8014e2c:	08014ec9 	.word	0x08014ec9
 8014e30:	08014f15 	.word	0x08014f15
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	695b      	ldr	r3, [r3, #20]
 8014e38:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	3307      	adds	r3, #7
 8014e40:	10db      	asrs	r3, r3, #3
 8014e42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 8014e46:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014e4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014e4e:	fb02 f303 	mul.w	r3, r2, r3
 8014e52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014e56:	10d2      	asrs	r2, r2, #3
 8014e58:	b212      	sxth	r2, r2
 8014e5a:	4413      	add	r3, r2
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e60:	4413      	add	r3, r2
 8014e62:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 7 - (x & 0x7);
 8014e64:	897b      	ldrh	r3, [r7, #10]
 8014e66:	b25b      	sxtb	r3, r3
 8014e68:	43db      	mvns	r3, r3
 8014e6a:	b25b      	sxtb	r3, r3
 8014e6c:	f003 0307 	and.w	r3, r3, #7
 8014e70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 8014e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014e78:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8014e7a:	e063      	b.n	8014f44 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	695b      	ldr	r3, [r3, #20]
 8014e80:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	3303      	adds	r3, #3
 8014e88:	109b      	asrs	r3, r3, #2
 8014e8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 8014e8e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014e92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014e96:	fb02 f303 	mul.w	r3, r2, r3
 8014e9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014e9e:	1092      	asrs	r2, r2, #2
 8014ea0:	b212      	sxth	r2, r2
 8014ea2:	4413      	add	r3, r2
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ea8:	4413      	add	r3, r2
 8014eaa:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 6 - (x & 0x3) * 2;
 8014eac:	897b      	ldrh	r3, [r7, #10]
 8014eae:	43db      	mvns	r3, r3
 8014eb0:	b2db      	uxtb	r3, r3
 8014eb2:	f003 0303 	and.w	r3, r3, #3
 8014eb6:	b2db      	uxtb	r3, r3
 8014eb8:	005b      	lsls	r3, r3, #1
 8014eba:	b2db      	uxtb	r3, r3
 8014ebc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 8014ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014ec4:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8014ec6:	e03d      	b.n	8014f44 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	695b      	ldr	r3, [r3, #20]
 8014ecc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	105b      	asrs	r3, r3, #1
 8014ed6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 8014eda:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014ede:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014ee2:	fb02 f303 	mul.w	r3, r2, r3
 8014ee6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014eea:	1052      	asrs	r2, r2, #1
 8014eec:	b212      	sxth	r2, r2
 8014eee:	4413      	add	r3, r2
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ef4:	4413      	add	r3, r2
 8014ef6:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 4 - (x & 0x1) * 4;
 8014ef8:	897b      	ldrh	r3, [r7, #10]
 8014efa:	f003 0301 	and.w	r3, r3, #1
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d101      	bne.n	8014f06 <lv_img_decoder_built_in_line_alpha+0x19e>
 8014f02:	2304      	movs	r3, #4
 8014f04:	e000      	b.n	8014f08 <lv_img_decoder_built_in_line_alpha+0x1a0>
 8014f06:	2300      	movs	r3, #0
 8014f08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 8014f0c:	f107 0318 	add.w	r3, r7, #24
 8014f10:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8014f12:	e017      	b.n	8014f44 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	695b      	ldr	r3, [r3, #20]
 8014f18:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 8014f22:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014f26:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014f2a:	fb03 f202 	mul.w	r2, r3, r2
 8014f2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014f32:	4413      	add	r3, r2
 8014f34:	461a      	mov	r2, r3
 8014f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f38:	4413      	add	r3, r2
 8014f3a:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8014f42:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f48:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8014f4a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f00c ff60 	bl	8021e14 <lv_mem_buf_get>
 8014f54:	6378      	str	r0, [r7, #52]	; 0x34
    if(fs_buf == NULL) return LV_RES_INV;
 8014f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d101      	bne.n	8014f60 <lv_img_decoder_built_in_line_alpha+0x1f8>
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	e06d      	b.n	801503c <lv_img_decoder_built_in_line_alpha+0x2d4>

    const uint8_t * data_tmp = NULL;
 8014f60:	2300      	movs	r3, #0
 8014f62:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	7c1b      	ldrb	r3, [r3, #16]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d108      	bne.n	8014f7e <lv_img_decoder_built_in_line_alpha+0x216>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 8014f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f74:	689a      	ldr	r2, [r3, #8]
 8014f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f78:	4413      	add	r3, r2
 8014f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8014f7c:	e00f      	b.n	8014f9e <lv_img_decoder_built_in_line_alpha+0x236>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8014f7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f82:	3304      	adds	r3, #4
 8014f84:	2200      	movs	r2, #0
 8014f86:	4619      	mov	r1, r3
 8014f88:	f00c fb0b 	bl	80215a2 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8014f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014f8e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014f92:	2300      	movs	r3, #0
 8014f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014f96:	f00c fabf 	bl	8021518 <lv_fs_read>
        data_tmp = fs_buf;
 8014f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f9c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    for(i = 0; i < len; i++) {
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8014fa4:	e040      	b.n	8015028 <lv_img_decoder_built_in_line_alpha+0x2c0>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8014fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	461a      	mov	r2, r3
 8014fac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8014fb0:	fa42 f303 	asr.w	r3, r2, r3
 8014fb4:	b25a      	sxtb	r2, r3
 8014fb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014fb8:	b25b      	sxtb	r3, r3
 8014fba:	4013      	ands	r3, r2
 8014fbc:	b25b      	sxtb	r3, r3
 8014fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	7d1b      	ldrb	r3, [r3, #20]
 8014fc6:	f003 031f 	and.w	r3, r3, #31
 8014fca:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8014fcc:	2b0e      	cmp	r3, #14
 8014fce:	d005      	beq.n	8014fdc <lv_img_decoder_built_in_line_alpha+0x274>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8014fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014fd6:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	e001      	b.n	8014fe0 <lv_img_decoder_built_in_line_alpha+0x278>
 8014fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fe0:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8014fe4:	0052      	lsls	r2, r2, #1
 8014fe6:	3201      	adds	r2, #1
 8014fe8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014fea:	440a      	add	r2, r1
 8014fec:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 8014fee:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8014ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014ff6:	1ad3      	subs	r3, r2, r3
 8014ff8:	b2db      	uxtb	r3, r3
 8014ffa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 8014ffe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8015002:	2b00      	cmp	r3, #0
 8015004:	da09      	bge.n	801501a <lv_img_decoder_built_in_line_alpha+0x2b2>
            pos = 8 - px_size;
 8015006:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801500a:	f1c3 0308 	rsb	r3, r3, #8
 801500e:	b2db      	uxtb	r3, r3
 8015010:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 8015014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015016:	3301      	adds	r3, #1
 8015018:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 801501a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801501e:	b29b      	uxth	r3, r3
 8015020:	3301      	adds	r3, #1
 8015022:	b29b      	uxth	r3, r3
 8015024:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8015028:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801502c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015030:	429a      	cmp	r2, r3
 8015032:	dbb8      	blt.n	8014fa6 <lv_img_decoder_built_in_line_alpha+0x23e>
        }
    }
    lv_mem_buf_release(fs_buf);
 8015034:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015036:	f00c ff99 	bl	8021f6c <lv_mem_buf_release>
    return LV_RES_OK;
 801503a:	2301      	movs	r3, #1
}
 801503c:	4618      	mov	r0, r3
 801503e:	375c      	adds	r7, #92	; 0x5c
 8015040:	46bd      	mov	sp, r7
 8015042:	bd90      	pop	{r4, r7, pc}
 8015044:	ffaa5500 	.word	0xffaa5500
 8015048:	080266fc 	.word	0x080266fc

0801504c <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b08e      	sub	sp, #56	; 0x38
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	4608      	mov	r0, r1
 8015056:	4611      	mov	r1, r2
 8015058:	461a      	mov	r2, r3
 801505a:	4603      	mov	r3, r0
 801505c:	817b      	strh	r3, [r7, #10]
 801505e:	460b      	mov	r3, r1
 8015060:	813b      	strh	r3, [r7, #8]
 8015062:	4613      	mov	r3, r2
 8015064:	80fb      	strh	r3, [r7, #6]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	7d1b      	ldrb	r3, [r3, #20]
 801506a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801506e:	b2db      	uxtb	r3, r3
 8015070:	4618      	mov	r0, r3
 8015072:	f7fb f8af 	bl	80101d4 <lv_img_cf_get_px_size>
 8015076:	4603      	mov	r3, r0
 8015078:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801507c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8015080:	2201      	movs	r2, #1
 8015082:	fa02 f303 	lsl.w	r3, r2, r3
 8015086:	b29b      	uxth	r3, r3
 8015088:	3b01      	subs	r3, #1
 801508a:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 801508c:	2300      	movs	r3, #0
 801508e:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 8015090:	2300      	movs	r3, #0
 8015092:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 8015096:	2300      	movs	r3, #0
 8015098:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	7d1b      	ldrb	r3, [r3, #20]
 801509e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	3b07      	subs	r3, #7
 80150a6:	2b03      	cmp	r3, #3
 80150a8:	f200 8094 	bhi.w	80151d4 <lv_img_decoder_built_in_line_indexed+0x188>
 80150ac:	a201      	add	r2, pc, #4	; (adr r2, 80150b4 <lv_img_decoder_built_in_line_indexed+0x68>)
 80150ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150b2:	bf00      	nop
 80150b4:	080150c5 	.word	0x080150c5
 80150b8:	0801510b 	.word	0x0801510b
 80150bc:	08015155 	.word	0x08015155
 80150c0:	0801519f 	.word	0x0801519f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	695b      	ldr	r3, [r3, #20]
 80150c8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	3307      	adds	r3, #7
 80150d0:	10db      	asrs	r3, r3, #3
 80150d2:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 80150d4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80150d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80150dc:	fb02 f303 	mul.w	r3, r2, r3
 80150e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80150e4:	10d2      	asrs	r2, r2, #3
 80150e6:	b212      	sxth	r2, r2
 80150e8:	4413      	add	r3, r2
 80150ea:	461a      	mov	r2, r3
 80150ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ee:	4413      	add	r3, r2
 80150f0:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 80150f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f4:	3308      	adds	r3, #8
 80150f6:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 80150f8:	897b      	ldrh	r3, [r7, #10]
 80150fa:	b25b      	sxtb	r3, r3
 80150fc:	43db      	mvns	r3, r3
 80150fe:	b25b      	sxtb	r3, r3
 8015100:	f003 0307 	and.w	r3, r3, #7
 8015104:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015108:	e064      	b.n	80151d4 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	695b      	ldr	r3, [r3, #20]
 801510e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015112:	b29b      	uxth	r3, r3
 8015114:	3303      	adds	r3, #3
 8015116:	109b      	asrs	r3, r3, #2
 8015118:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 801511a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801511e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015122:	fb02 f303 	mul.w	r3, r2, r3
 8015126:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801512a:	1092      	asrs	r2, r2, #2
 801512c:	b212      	sxth	r2, r2
 801512e:	4413      	add	r3, r2
 8015130:	461a      	mov	r2, r3
 8015132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015134:	4413      	add	r3, r2
 8015136:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 8015138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801513a:	3310      	adds	r3, #16
 801513c:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - (x & 0x3) * 2;
 801513e:	897b      	ldrh	r3, [r7, #10]
 8015140:	43db      	mvns	r3, r3
 8015142:	b2db      	uxtb	r3, r3
 8015144:	f003 0303 	and.w	r3, r3, #3
 8015148:	b2db      	uxtb	r3, r3
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	b2db      	uxtb	r3, r3
 801514e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015152:	e03f      	b.n	80151d4 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	695b      	ldr	r3, [r3, #20]
 8015158:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801515c:	b29b      	uxth	r3, r3
 801515e:	3301      	adds	r3, #1
 8015160:	105b      	asrs	r3, r3, #1
 8015162:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 8015164:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015168:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801516c:	fb02 f303 	mul.w	r3, r2, r3
 8015170:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015174:	1052      	asrs	r2, r2, #1
 8015176:	b212      	sxth	r2, r2
 8015178:	4413      	add	r3, r2
 801517a:	461a      	mov	r2, r3
 801517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801517e:	4413      	add	r3, r2
 8015180:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 8015182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015184:	3340      	adds	r3, #64	; 0x40
 8015186:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - (x & 0x1) * 4;
 8015188:	897b      	ldrh	r3, [r7, #10]
 801518a:	f003 0301 	and.w	r3, r3, #1
 801518e:	2b00      	cmp	r3, #0
 8015190:	d101      	bne.n	8015196 <lv_img_decoder_built_in_line_indexed+0x14a>
 8015192:	2304      	movs	r3, #4
 8015194:	e000      	b.n	8015198 <lv_img_decoder_built_in_line_indexed+0x14c>
 8015196:	2300      	movs	r3, #0
 8015198:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801519c:	e01a      	b.n	80151d4 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	695b      	ldr	r3, [r3, #20]
 80151a2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80151a6:	b29b      	uxth	r3, r3
 80151a8:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 80151aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80151ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80151b2:	fb03 f202 	mul.w	r2, r3, r2
 80151b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80151ba:	4413      	add	r3, r2
 80151bc:	461a      	mov	r2, r3
 80151be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c0:	4413      	add	r3, r2
 80151c2:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 80151c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80151ca:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80151d2:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d8:	623b      	str	r3, [r7, #32]

    uint8_t * fs_buf = lv_mem_buf_get(w);
 80151da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80151de:	4618      	mov	r0, r3
 80151e0:	f00c fe18 	bl	8021e14 <lv_mem_buf_get>
 80151e4:	61f8      	str	r0, [r7, #28]
    if(fs_buf == NULL) return LV_RES_INV;
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d101      	bne.n	80151f0 <lv_img_decoder_built_in_line_indexed+0x1a4>
 80151ec:	2300      	movs	r3, #0
 80151ee:	e06e      	b.n	80152ce <lv_img_decoder_built_in_line_indexed+0x282>
    const uint8_t * data_tmp = NULL;
 80151f0:	2300      	movs	r3, #0
 80151f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	7c1b      	ldrb	r3, [r3, #16]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d108      	bne.n	801520e <lv_img_decoder_built_in_line_indexed+0x1c2>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	689a      	ldr	r2, [r3, #8]
 8015206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015208:	4413      	add	r3, r2
 801520a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801520c:	e00f      	b.n	801522e <lv_img_decoder_built_in_line_indexed+0x1e2>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801520e:	6a38      	ldr	r0, [r7, #32]
 8015210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015212:	3304      	adds	r3, #4
 8015214:	2200      	movs	r2, #0
 8015216:	4619      	mov	r1, r3
 8015218:	f00c f9c3 	bl	80215a2 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 801521c:	6a38      	ldr	r0, [r7, #32]
 801521e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8015222:	2300      	movs	r3, #0
 8015224:	69f9      	ldr	r1, [r7, #28]
 8015226:	f00c f977 	bl	8021518 <lv_fs_read>
        data_tmp = fs_buf;
 801522a:	69fb      	ldr	r3, [r7, #28]
 801522c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 801522e:	2300      	movs	r3, #0
 8015230:	857b      	strh	r3, [r7, #42]	; 0x2a
 8015232:	e042      	b.n	80152ba <lv_img_decoder_built_in_line_indexed+0x26e>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8015234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015236:	781b      	ldrb	r3, [r3, #0]
 8015238:	461a      	mov	r2, r3
 801523a:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 801523e:	fa42 f303 	asr.w	r3, r2, r3
 8015242:	b25a      	sxtb	r2, r3
 8015244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015246:	b25b      	sxtb	r3, r3
 8015248:	4013      	ands	r3, r2
 801524a:	b25b      	sxtb	r3, r3
 801524c:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 801524e:	6a3b      	ldr	r3, [r7, #32]
 8015250:	68da      	ldr	r2, [r3, #12]
 8015252:	7dfb      	ldrb	r3, [r7, #23]
 8015254:	4413      	add	r3, r2
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	753b      	strb	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
 801525a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801525e:	005b      	lsls	r3, r3, #1
 8015260:	461a      	mov	r2, r3
 8015262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015264:	4413      	add	r3, r2
 8015266:	7d3a      	ldrb	r2, [r7, #20]
 8015268:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 801526a:	6a3b      	ldr	r3, [r7, #32]
 801526c:	691a      	ldr	r2, [r3, #16]
 801526e:	7dfb      	ldrb	r3, [r7, #23]
 8015270:	441a      	add	r2, r3
 8015272:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015276:	005b      	lsls	r3, r3, #1
 8015278:	3301      	adds	r3, #1
 801527a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801527c:	440b      	add	r3, r1
 801527e:	7812      	ldrb	r2, [r2, #0]
 8015280:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 8015282:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8015286:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801528a:	1ad3      	subs	r3, r2, r3
 801528c:	b2db      	uxtb	r3, r3
 801528e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 8015292:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8015296:	2b00      	cmp	r3, #0
 8015298:	da09      	bge.n	80152ae <lv_img_decoder_built_in_line_indexed+0x262>
            pos = 8 - px_size;
 801529a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801529e:	f1c3 0308 	rsb	r3, r3, #8
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 80152a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152aa:	3301      	adds	r3, #1
 80152ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 80152ae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	3301      	adds	r3, #1
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80152ba:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80152be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	dbb6      	blt.n	8015234 <lv_img_decoder_built_in_line_indexed+0x1e8>
        }
    }
    lv_mem_buf_release(fs_buf);
 80152c6:	69f8      	ldr	r0, [r7, #28]
 80152c8:	f00c fe50 	bl	8021f6c <lv_mem_buf_release>
    return LV_RES_OK;
 80152cc:	2301      	movs	r3, #1
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3738      	adds	r7, #56	; 0x38
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop

080152d8 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80152d8:	b480      	push	{r7}
 80152da:	b083      	sub	sp, #12
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80152e6:	b29a      	uxth	r2, r3
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152ee:	b29b      	uxth	r3, r3
 80152f0:	1ad3      	subs	r3, r2, r3
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	3301      	adds	r3, #1
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	b21b      	sxth	r3, r3
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	370c      	adds	r7, #12
 80152fe:	46bd      	mov	sp, r7
 8015300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015304:	4770      	bx	lr
	...

08015308 <lv_draw_sw_init_ctx>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init_ctx(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b084      	sub	sp, #16
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	6039      	str	r1, [r7, #0]
    LV_UNUSED(drv);

    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	60fb      	str	r3, [r7, #12]
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 8015316:	2154      	movs	r1, #84	; 0x54
 8015318:	68f8      	ldr	r0, [r7, #12]
 801531a:	f00d f925 	bl	8022568 <lv_memset_00>

    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	4a19      	ldr	r2, [pc, #100]	; (8015388 <lv_draw_sw_init_ctx+0x80>)
 8015322:	611a      	str	r2, [r3, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	4a19      	ldr	r2, [pc, #100]	; (801538c <lv_draw_sw_init_ctx+0x84>)
 8015328:	60da      	str	r2, [r3, #12]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	4a18      	ldr	r2, [pc, #96]	; (8015390 <lv_draw_sw_init_ctx+0x88>)
 801532e:	62da      	str	r2, [r3, #44]	; 0x2c
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	4a18      	ldr	r2, [pc, #96]	; (8015394 <lv_draw_sw_init_ctx+0x8c>)
 8015334:	61da      	str	r2, [r3, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	4a17      	ldr	r2, [pc, #92]	; (8015398 <lv_draw_sw_init_ctx+0x90>)
 801533a:	615a      	str	r2, [r3, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	4a17      	ldr	r2, [pc, #92]	; (801539c <lv_draw_sw_init_ctx+0x94>)
 8015340:	621a      	str	r2, [r3, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	4a16      	ldr	r2, [pc, #88]	; (80153a0 <lv_draw_sw_init_ctx+0x98>)
 8015346:	625a      	str	r2, [r3, #36]	; 0x24
#if LV_DRAW_COMPLEX
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	4a16      	ldr	r2, [pc, #88]	; (80153a4 <lv_draw_sw_init_ctx+0x9c>)
 801534c:	629a      	str	r2, [r3, #40]	; 0x28
#endif
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	4a15      	ldr	r2, [pc, #84]	; (80153a8 <lv_draw_sw_init_ctx+0xa0>)
 8015352:	631a      	str	r2, [r3, #48]	; 0x30
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	4a15      	ldr	r2, [pc, #84]	; (80153ac <lv_draw_sw_init_ctx+0xa4>)
 8015358:	635a      	str	r2, [r3, #52]	; 0x34
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	4a14      	ldr	r2, [pc, #80]	; (80153b0 <lv_draw_sw_init_ctx+0xa8>)
 801535e:	639a      	str	r2, [r3, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	4a14      	ldr	r2, [pc, #80]	; (80153b4 <lv_draw_sw_init_ctx+0xac>)
 8015364:	63da      	str	r2, [r3, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	4a13      	ldr	r2, [pc, #76]	; (80153b8 <lv_draw_sw_init_ctx+0xb0>)
 801536a:	641a      	str	r2, [r3, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	4a13      	ldr	r2, [pc, #76]	; (80153bc <lv_draw_sw_init_ctx+0xb4>)
 8015370:	645a      	str	r2, [r3, #68]	; 0x44
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	4a12      	ldr	r2, [pc, #72]	; (80153c0 <lv_draw_sw_init_ctx+0xb8>)
 8015376:	651a      	str	r2, [r3, #80]	; 0x50
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	222c      	movs	r2, #44	; 0x2c
 801537c:	649a      	str	r2, [r3, #72]	; 0x48
}
 801537e:	bf00      	nop
 8015380:	3710      	adds	r7, #16
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}
 8015386:	bf00      	nop
 8015388:	08015529 	.word	0x08015529
 801538c:	0801b57b 	.word	0x0801b57b
 8015390:	0801b5c1 	.word	0x0801b5c1
 8015394:	0801985d 	.word	0x0801985d
 8015398:	08018d01 	.word	0x08018d01
 801539c:	08019fcb 	.word	0x08019fcb
 80153a0:	0801af69 	.word	0x0801af69
 80153a4:	0801e7c5 	.word	0x0801e7c5
 80153a8:	080153c5 	.word	0x080153c5
 80153ac:	080153d9 	.word	0x080153d9
 80153b0:	08019497 	.word	0x08019497
 80153b4:	0801967b 	.word	0x0801967b
 80153b8:	0801970b 	.word	0x0801970b
 80153bc:	080197d5 	.word	0x080197d5
 80153c0:	08017091 	.word	0x08017091

080153c4 <lv_draw_sw_wait_for_finish>:
    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
}

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 80153cc:	bf00      	nop
 80153ce:	370c      	adds	r7, #12
 80153d0:	46bd      	mov	sp, r7
 80153d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d6:	4770      	bx	lr

080153d8 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b088      	sub	sp, #32
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	60b9      	str	r1, [r7, #8]
 80153e2:	603b      	str	r3, [r7, #0]
 80153e4:	4613      	mov	r3, r2
 80153e6:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(draw_ctx);

    lv_color_t * dest_bufc =  dest_buf;
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	61fb      	str	r3, [r7, #28]
    lv_color_t * src_bufc =  src_buf;
 80153ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ee:	61bb      	str	r3, [r7, #24]

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 80153f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80153f4:	683a      	ldr	r2, [r7, #0]
 80153f6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80153fa:	fb02 f303 	mul.w	r3, r2, r3
 80153fe:	461a      	mov	r2, r3
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	4413      	add	r3, r2
 8015404:	61fb      	str	r3, [r7, #28]
    dest_bufc += dest_area->x1;
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	f9b3 3000 	ldrsh.w	r3, [r3]
 801540c:	461a      	mov	r2, r3
 801540e:	69fb      	ldr	r3, [r7, #28]
 8015410:	4413      	add	r3, r2
 8015412:	61fb      	str	r3, [r7, #28]

    src_bufc += src_stride * src_area->y1;
 8015414:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8015418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801541a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801541e:	fb02 f303 	mul.w	r3, r2, r3
 8015422:	461a      	mov	r2, r3
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	4413      	add	r3, r2
 8015428:	61bb      	str	r3, [r7, #24]
    src_bufc += src_area->x1;
 801542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015430:	461a      	mov	r2, r3
 8015432:	69bb      	ldr	r3, [r7, #24]
 8015434:	4413      	add	r3, r2
 8015436:	61bb      	str	r3, [r7, #24]

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 8015438:	6838      	ldr	r0, [r7, #0]
 801543a:	f7ff ff4d 	bl	80152d8 <lv_area_get_width>
 801543e:	4603      	mov	r3, r0
 8015440:	613b      	str	r3, [r7, #16]
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	885b      	ldrh	r3, [r3, #2]
 8015446:	82fb      	strh	r3, [r7, #22]
 8015448:	e014      	b.n	8015474 <lv_draw_sw_buffer_copy+0x9c>
        lv_memcpy(dest_bufc, src_bufc, line_length);
 801544a:	693a      	ldr	r2, [r7, #16]
 801544c:	69b9      	ldr	r1, [r7, #24]
 801544e:	69f8      	ldr	r0, [r7, #28]
 8015450:	f00c fde4 	bl	802201c <lv_memcpy>
        dest_bufc += dest_stride;
 8015454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015458:	69fa      	ldr	r2, [r7, #28]
 801545a:	4413      	add	r3, r2
 801545c:	61fb      	str	r3, [r7, #28]
        src_bufc += src_stride;
 801545e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8015462:	69ba      	ldr	r2, [r7, #24]
 8015464:	4413      	add	r3, r2
 8015466:	61bb      	str	r3, [r7, #24]
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8015468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801546c:	b29b      	uxth	r3, r3
 801546e:	3301      	adds	r3, #1
 8015470:	b29b      	uxth	r3, r3
 8015472:	82fb      	strh	r3, [r7, #22]
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801547a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801547e:	429a      	cmp	r2, r3
 8015480:	dde3      	ble.n	801544a <lv_draw_sw_buffer_copy+0x72>
    }
}
 8015482:	bf00      	nop
 8015484:	bf00      	nop
 8015486:	3720      	adds	r7, #32
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801548c:	b480      	push	{r7}
 801548e:	b083      	sub	sp, #12
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	f9b3 2000 	ldrsh.w	r2, [r3]
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 80154aa:	683b      	ldr	r3, [r7, #0]
 80154ac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	80da      	strh	r2, [r3, #6]
}
 80154be:	bf00      	nop
 80154c0:	370c      	adds	r7, #12
 80154c2:	46bd      	mov	sp, r7
 80154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c8:	4770      	bx	lr

080154ca <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80154ca:	b480      	push	{r7}
 80154cc:	b083      	sub	sp, #12
 80154ce:	af00      	add	r7, sp, #0
 80154d0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154d8:	b29a      	uxth	r2, r3
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	1ad3      	subs	r3, r2, r3
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	3301      	adds	r3, #1
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	b21b      	sxth	r3, r3
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	370c      	adds	r7, #12
 80154f0:	46bd      	mov	sp, r7
 80154f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f6:	4770      	bx	lr

080154f8 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80154f8:	b480      	push	{r7}
 80154fa:	b083      	sub	sp, #12
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015506:	b29a      	uxth	r2, r3
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801550e:	b29b      	uxth	r3, r3
 8015510:	1ad3      	subs	r3, r2, r3
 8015512:	b29b      	uxth	r3, r3
 8015514:	3301      	adds	r3, #1
 8015516:	b29b      	uxth	r3, r3
 8015518:	b21b      	sxth	r3, r3
}
 801551a:	4618      	mov	r0, r3
 801551c:	370c      	adds	r7, #12
 801551e:	46bd      	mov	sp, r7
 8015520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015524:	4770      	bx	lr
	...

08015528 <lv_draw_sw_arc>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                    uint16_t start_angle, uint16_t end_angle)
{
 8015528:	b590      	push	{r4, r7, lr}
 801552a:	b0d5      	sub	sp, #340	; 0x154
 801552c:	af02      	add	r7, sp, #8
 801552e:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8015532:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8015536:	6020      	str	r0, [r4, #0]
 8015538:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 801553c:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 8015540:	6001      	str	r1, [r0, #0]
 8015542:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8015546:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 801554a:	600a      	str	r2, [r1, #0]
 801554c:	461a      	mov	r2, r3
 801554e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015552:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015556:	801a      	strh	r2, [r3, #0]
#if LV_DRAW_COMPLEX
    if(dsc->opa <= LV_OPA_MIN) return;
 8015558:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801555c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	7b1b      	ldrb	r3, [r3, #12]
 8015564:	2b02      	cmp	r3, #2
 8015566:	f240 83e4 	bls.w	8015d32 <lv_draw_sw_arc+0x80a>
    if(dsc->width == 0) return;
 801556a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801556e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015578:	2b00      	cmp	r3, #0
 801557a:	f000 83dc 	beq.w	8015d36 <lv_draw_sw_arc+0x80e>
    if(start_angle == end_angle) return;
 801557e:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8015582:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015586:	429a      	cmp	r2, r3
 8015588:	f000 83d7 	beq.w	8015d3a <lv_draw_sw_arc+0x812>

    lv_coord_t width = dsc->width;
 801558c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015590:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	885b      	ldrh	r3, [r3, #2]
 8015598:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if(width > radius) width = radius;
 801559c:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 80155a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155a4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80155a8:	881b      	ldrh	r3, [r3, #0]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	dd06      	ble.n	80155bc <lv_draw_sw_arc+0x94>
 80155ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155b2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80155b6:	881b      	ldrh	r3, [r3, #0]
 80155b8:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    lv_draw_rect_dsc_t cir_dsc;
    lv_draw_rect_dsc_init(&cir_dsc);
 80155bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7fe fd01 	bl	8013fc8 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 80155c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	7b5b      	ldrb	r3, [r3, #13]
 80155d2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80155d6:	b2db      	uxtb	r3, r3
 80155d8:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
    if(dsc->img_src) {
 80155dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	689b      	ldr	r3, [r3, #8]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d013      	beq.n	8015614 <lv_draw_sw_arc+0xec>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 80155ec:	2300      	movs	r3, #0
 80155ee:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_img_src = dsc->img_src;
 80155f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80155f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	689b      	ldr	r3, [r3, #8]
 80155fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        cir_dsc.bg_img_opa = dsc->opa;
 8015602:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015606:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	7b1b      	ldrb	r3, [r3, #12]
 801560e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8015612:	e00f      	b.n	8015634 <lv_draw_sw_arc+0x10c>
    }
    else {
        cir_dsc.bg_opa = dsc->opa;
 8015614:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015618:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	7b1b      	ldrb	r3, [r3, #12]
 8015620:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_color = dsc->color;
 8015624:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015628:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    }

    lv_area_t area_out;
    area_out.x1 = center->x - radius;
 8015634:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015638:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015642:	b29a      	uxth	r2, r3
 8015644:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015648:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 801564c:	881b      	ldrh	r3, [r3, #0]
 801564e:	1ad3      	subs	r3, r2, r3
 8015650:	b29b      	uxth	r3, r3
 8015652:	b21b      	sxth	r3, r3
 8015654:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    area_out.y1 = center->y - radius;
 8015658:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801565c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015666:	b29a      	uxth	r2, r3
 8015668:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801566c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015670:	881b      	ldrh	r3, [r3, #0]
 8015672:	1ad3      	subs	r3, r2, r3
 8015674:	b29b      	uxth	r3, r3
 8015676:	b21b      	sxth	r3, r3
 8015678:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801567c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015680:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	f9b3 3000 	ldrsh.w	r3, [r3]
 801568a:	b29a      	uxth	r2, r3
 801568c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015690:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015694:	881b      	ldrh	r3, [r3, #0]
 8015696:	4413      	add	r3, r2
 8015698:	b29b      	uxth	r3, r3
 801569a:	3b01      	subs	r3, #1
 801569c:	b29b      	uxth	r3, r3
 801569e:	b21b      	sxth	r3, r3
 80156a0:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
    area_out.y2 = center->y + radius - 1;
 80156a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80156b2:	b29a      	uxth	r2, r3
 80156b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156b8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80156bc:	881b      	ldrh	r3, [r3, #0]
 80156be:	4413      	add	r3, r2
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	3b01      	subs	r3, #1
 80156c4:	b29b      	uxth	r3, r3
 80156c6:	b21b      	sxth	r3, r3
 80156c8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    lv_area_t area_in;
    lv_area_copy(&area_in, &area_out);
 80156cc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80156d0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80156d4:	4611      	mov	r1, r2
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7ff fed8 	bl	801548c <lv_area_copy>
    area_in.x1 += dsc->width;
 80156dc:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
 80156e0:	b29a      	uxth	r2, r3
 80156e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80156f0:	b29b      	uxth	r3, r3
 80156f2:	4413      	add	r3, r2
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	b21b      	sxth	r3, r3
 80156f8:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
    area_in.y1 += dsc->width;
 80156fc:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	; 0xf2
 8015700:	b29a      	uxth	r2, r3
 8015702:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015706:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015710:	b29b      	uxth	r3, r3
 8015712:	4413      	add	r3, r2
 8015714:	b29b      	uxth	r3, r3
 8015716:	b21b      	sxth	r3, r3
 8015718:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    area_in.x2 -= dsc->width;
 801571c:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 8015720:	b29a      	uxth	r2, r3
 8015722:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015726:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015730:	b29b      	uxth	r3, r3
 8015732:	1ad3      	subs	r3, r2, r3
 8015734:	b29b      	uxth	r3, r3
 8015736:	b21b      	sxth	r3, r3
 8015738:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
    area_in.y2 -= dsc->width;
 801573c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8015740:	b29a      	uxth	r2, r3
 8015742:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015746:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015750:	b29b      	uxth	r3, r3
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	b29b      	uxth	r3, r3
 8015756:	b21b      	sxth	r3, r3
 8015758:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

    /*Create inner the mask*/
    int16_t mask_in_id = LV_MASK_ID_INV;
 801575c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015760:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    lv_draw_mask_radius_param_t mask_in_param;
    bool mask_in_param_valid = false;
 8015764:	2300      	movs	r3, #0
 8015766:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 801576a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801576e:	4618      	mov	r0, r3
 8015770:	f7ff feab 	bl	80154ca <lv_area_get_width>
 8015774:	4603      	mov	r3, r0
 8015776:	2b00      	cmp	r3, #0
 8015778:	dd1c      	ble.n	80157b4 <lv_draw_sw_arc+0x28c>
 801577a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801577e:	4618      	mov	r0, r3
 8015780:	f7ff feba 	bl	80154f8 <lv_area_get_height>
 8015784:	4603      	mov	r3, r0
 8015786:	2b00      	cmp	r3, #0
 8015788:	dd14      	ble.n	80157b4 <lv_draw_sw_arc+0x28c>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 801578a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 801578e:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8015792:	2301      	movs	r3, #1
 8015794:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015798:	f7fc fc1a 	bl	8011fd0 <lv_draw_mask_radius_init>
        mask_in_param_valid = true;
 801579c:	2301      	movs	r3, #1
 801579e:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 80157a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80157a6:	2100      	movs	r1, #0
 80157a8:	4618      	mov	r0, r3
 80157aa:	f7fc f845 	bl	8011838 <lv_draw_mask_add>
 80157ae:	4603      	mov	r3, r0
 80157b0:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    }

    lv_draw_mask_radius_param_t mask_out_param;
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 80157b4:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80157b8:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80157bc:	2300      	movs	r3, #0
 80157be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80157c2:	f7fc fc05 	bl	8011fd0 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 80157c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80157ca:	2100      	movs	r1, #0
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7fc f833 	bl	8011838 <lv_draw_mask_add>
 80157d2:	4603      	mov	r3, r0
 80157d4:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

    /*Draw a full ring*/
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 80157d8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80157dc:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80157e0:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d007      	beq.n	80157f8 <lv_draw_sw_arc+0x2d0>
 80157e8:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80157ec:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80157f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d133      	bne.n	8015860 <lv_draw_sw_arc+0x338>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 80157f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80157fc:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015800:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015804:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015808:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801580c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015810:	6818      	ldr	r0, [r3, #0]
 8015812:	f7fe fc1d 	bl	8014050 <lv_draw_rect>

        lv_draw_mask_remove_id(mask_out_id);
 8015816:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 801581a:	4618      	mov	r0, r3
 801581c:	f7fc f882 	bl	8011924 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8015820:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015828:	d004      	beq.n	8015834 <lv_draw_sw_arc+0x30c>
 801582a:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 801582e:	4618      	mov	r0, r3
 8015830:	f7fc f878 	bl	8011924 <lv_draw_mask_remove_id>

        lv_draw_mask_free_param(&mask_out_param);
 8015834:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015838:	4618      	mov	r0, r3
 801583a:	f7fc f8c3 	bl	80119c4 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 801583e:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8015842:	2b00      	cmp	r3, #0
 8015844:	f000 827b 	beq.w	8015d3e <lv_draw_sw_arc+0x816>
            lv_draw_mask_free_param(&mask_in_param);
 8015848:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801584c:	4618      	mov	r0, r3
 801584e:	f7fc f8b9 	bl	80119c4 <lv_draw_mask_free_param>
        }

        return;
 8015852:	e274      	b.n	8015d3e <lv_draw_sw_arc+0x816>
    }

    while(start_angle >= 360) start_angle -= 360;
 8015854:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015858:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801585c:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 8015860:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015864:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8015868:	d2f4      	bcs.n	8015854 <lv_draw_sw_arc+0x32c>
    while(end_angle >= 360) end_angle -= 360;
 801586a:	e005      	b.n	8015878 <lv_draw_sw_arc+0x350>
 801586c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015870:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8015874:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8015878:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 801587c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8015880:	d2f4      	bcs.n	801586c <lv_draw_sw_arc+0x344>

    lv_draw_mask_angle_param_t mask_angle_param;
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 8015882:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015886:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015890:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015894:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801589e:	f9b7 4158 	ldrsh.w	r4, [r7, #344]	; 0x158
 80158a2:	f9b7 315c 	ldrsh.w	r3, [r7, #348]	; 0x15c
 80158a6:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80158aa:	9300      	str	r3, [sp, #0]
 80158ac:	4623      	mov	r3, r4
 80158ae:	f7fc fad9 	bl	8011e64 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 80158b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80158b6:	2100      	movs	r1, #0
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7fb ffbd 	bl	8011838 <lv_draw_mask_add>
 80158be:	4603      	mov	r3, r0
 80158c0:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

    int32_t angle_gap;
    if(end_angle > start_angle) {
 80158c4:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80158c8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80158cc:	429a      	cmp	r2, r3
 80158ce:	d909      	bls.n	80158e4 <lv_draw_sw_arc+0x3bc>
        angle_gap = 360 - (end_angle - start_angle);
 80158d0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80158d4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80158d8:	1ad3      	subs	r3, r2, r3
 80158da:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 80158de:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80158e2:	e006      	b.n	80158f2 <lv_draw_sw_arc+0x3ca>
    }
    else {
        angle_gap = start_angle - end_angle;
 80158e4:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80158e8:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80158ec:	1ad3      	subs	r3, r2, r3
 80158ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80158f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	689b      	ldr	r3, [r3, #8]
 80158fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8015902:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015906:	2b3c      	cmp	r3, #60	; 0x3c
 8015908:	f340 8080 	ble.w	8015a0c <lv_draw_sw_arc+0x4e4>
 801590c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015910:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015914:	881b      	ldrh	r3, [r3, #0]
 8015916:	2b0a      	cmp	r3, #10
 8015918:	d978      	bls.n	8015a0c <lv_draw_sw_arc+0x4e4>
        /*Handle each quarter individually and skip which is empty*/
        quarter_draw_dsc_t q_dsc;
        q_dsc.center = center;
 801591a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801591e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015922:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8015926:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 801592a:	6812      	ldr	r2, [r2, #0]
 801592c:	601a      	str	r2, [r3, #0]
        q_dsc.radius = radius;
 801592e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015932:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015936:	f9b3 2000 	ldrsh.w	r2, [r3]
 801593a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801593e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015942:	809a      	strh	r2, [r3, #4]
        q_dsc.start_angle = start_angle;
 8015944:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015948:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801594c:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8015950:	80da      	strh	r2, [r3, #6]
        q_dsc.end_angle = end_angle;
 8015952:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015956:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801595a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 801595e:	811a      	strh	r2, [r3, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8015960:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015964:	085b      	lsrs	r3, r3, #1
 8015966:	4a28      	ldr	r2, [pc, #160]	; (8015a08 <lv_draw_sw_arc+0x4e0>)
 8015968:	fba2 2303 	umull	r2, r3, r2, r3
 801596c:	095b      	lsrs	r3, r3, #5
 801596e:	b29b      	uxth	r3, r3
 8015970:	f003 0303 	and.w	r3, r3, #3
 8015974:	b29a      	uxth	r2, r3
 8015976:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801597a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801597e:	815a      	strh	r2, [r3, #10]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 8015980:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015984:	085b      	lsrs	r3, r3, #1
 8015986:	4a20      	ldr	r2, [pc, #128]	; (8015a08 <lv_draw_sw_arc+0x4e0>)
 8015988:	fba2 2303 	umull	r2, r3, r2, r3
 801598c:	095b      	lsrs	r3, r3, #5
 801598e:	b29b      	uxth	r3, r3
 8015990:	f003 0303 	and.w	r3, r3, #3
 8015994:	b29a      	uxth	r2, r3
 8015996:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801599a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801599e:	819a      	strh	r2, [r3, #12]
        q_dsc.width = width;
 80159a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80159a8:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 80159ac:	81da      	strh	r2, [r3, #14]
        q_dsc.draw_dsc = &cir_dsc;
 80159ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80159b6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80159ba:	611a      	str	r2, [r3, #16]
        q_dsc.draw_area = &area_out;
 80159bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80159c4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80159c8:	615a      	str	r2, [r3, #20]
        q_dsc.draw_ctx = draw_ctx;
 80159ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80159d2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80159d6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80159da:	6812      	ldr	r2, [r2, #0]
 80159dc:	619a      	str	r2, [r3, #24]

        draw_quarter_0(&q_dsc);
 80159de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80159e2:	4618      	mov	r0, r3
 80159e4:	f000 f9b0 	bl	8015d48 <draw_quarter_0>
        draw_quarter_1(&q_dsc);
 80159e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80159ec:	4618      	mov	r0, r3
 80159ee:	f000 fb9d 	bl	801612c <draw_quarter_1>
        draw_quarter_2(&q_dsc);
 80159f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80159f6:	4618      	mov	r0, r3
 80159f8:	f000 fd92 	bl	8016520 <draw_quarter_2>
        draw_quarter_3(&q_dsc);
 80159fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a00:	4618      	mov	r0, r3
 8015a02:	f000 ff90 	bl	8016926 <draw_quarter_3>
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8015a06:	e00c      	b.n	8015a22 <lv_draw_sw_arc+0x4fa>
 8015a08:	b60b60b7 	.word	0xb60b60b7
    }
    else {
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015a0c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015a10:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015a14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015a1c:	6818      	ldr	r0, [r3, #0]
 8015a1e:	f7fe fb17 	bl	8014050 <lv_draw_rect>
    }

    lv_draw_mask_free_param(&mask_angle_param);
 8015a22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7fb ffcc 	bl	80119c4 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 8015a2c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7fb ffc7 	bl	80119c4 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 8015a36:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d004      	beq.n	8015a48 <lv_draw_sw_arc+0x520>
        lv_draw_mask_free_param(&mask_in_param);
 8015a3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7fb ffbe 	bl	80119c4 <lv_draw_mask_free_param>
    }

    lv_draw_mask_remove_id(mask_angle_id);
 8015a48:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	; 0x138
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7fb ff69 	bl	8011924 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8015a52:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7fb ff64 	bl	8011924 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8015a5c:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a64:	d004      	beq.n	8015a70 <lv_draw_sw_arc+0x548>
 8015a66:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7fb ff5a 	bl	8011924 <lv_draw_mask_remove_id>

    if(dsc->rounded) {
 8015a70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	7b5b      	ldrb	r3, [r3, #13]
 8015a7c:	f003 0304 	and.w	r3, r3, #4
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	f000 815c 	beq.w	8015d40 <lv_draw_sw_arc+0x818>

        lv_draw_mask_radius_param_t mask_end_param;

        lv_area_t round_area;
        get_rounded_area(start_angle, radius, width, &round_area);
 8015a88:	f9b7 0158 	ldrsh.w	r0, [r7, #344]	; 0x158
 8015a8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a90:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015a94:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015a98:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8015a9c:	b2da      	uxtb	r2, r3
 8015a9e:	f107 0318 	add.w	r3, r7, #24
 8015aa2:	f001 f93a 	bl	8016d1a <get_rounded_area>
        round_area.x1 += center->x;
 8015aa6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ab2:	b29a      	uxth	r2, r3
 8015ab4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ab8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	4413      	add	r3, r2
 8015ac6:	b29b      	uxth	r3, r3
 8015ac8:	b21a      	sxth	r2, r3
 8015aca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015ad2:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8015ad4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015adc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ae0:	b29a      	uxth	r2, r3
 8015ae2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ae6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015af0:	b29b      	uxth	r3, r3
 8015af2:	4413      	add	r3, r2
 8015af4:	b29b      	uxth	r3, r3
 8015af6:	b21a      	sxth	r2, r3
 8015af8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b00:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8015b02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b0e:	b29a      	uxth	r2, r3
 8015b10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b14:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	4413      	add	r3, r2
 8015b22:	b29b      	uxth	r3, r3
 8015b24:	b21a      	sxth	r2, r3
 8015b26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b2e:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8015b30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015b3c:	b29a      	uxth	r2, r3
 8015b3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b42:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	4413      	add	r3, r2
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	b21a      	sxth	r2, r3
 8015b54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b5c:	80da      	strh	r2, [r3, #6]
        lv_area_t clip_area2;
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8015b5e:	f107 0218 	add.w	r2, r7, #24
 8015b62:	f107 0310 	add.w	r3, r7, #16
 8015b66:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f00a fda8 	bl	80206c0 <_lv_area_intersect>
 8015b70:	4603      	mov	r3, r0
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d02e      	beq.n	8015bd4 <lv_draw_sw_arc+0x6ac>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8015b76:	f107 0118 	add.w	r1, r7, #24
 8015b7a:	f107 0020 	add.w	r0, r7, #32
 8015b7e:	2300      	movs	r3, #0
 8015b80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015b84:	f7fc fa24 	bl	8011fd0 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8015b88:	f107 0320 	add.w	r3, r7, #32
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7fb fe52 	bl	8011838 <lv_draw_mask_add>
 8015b94:	4603      	mov	r3, r0
 8015b96:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132

            draw_ctx->clip_area = &clip_area2;
 8015b9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b9e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	f107 0210 	add.w	r2, r7, #16
 8015ba8:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015baa:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015bae:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015bb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015bb6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015bba:	6818      	ldr	r0, [r3, #0]
 8015bbc:	f7fe fa48 	bl	8014050 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8015bc0:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7fb fead 	bl	8011924 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8015bca:	f107 0320 	add.w	r3, r7, #32
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7fb fef8 	bl	80119c4 <lv_draw_mask_free_param>
        }

        get_rounded_area(end_angle, radius, width, &round_area);
 8015bd4:	f9b7 015c 	ldrsh.w	r0, [r7, #348]	; 0x15c
 8015bd8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015bdc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015be0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015be4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8015be8:	b2da      	uxtb	r2, r3
 8015bea:	f107 0318 	add.w	r3, r7, #24
 8015bee:	f001 f894 	bl	8016d1a <get_rounded_area>
        round_area.x1 += center->x;
 8015bf2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bfe:	b29a      	uxth	r2, r3
 8015c00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c04:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	4413      	add	r3, r2
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	b21a      	sxth	r2, r3
 8015c16:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c1e:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8015c20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c2c:	b29a      	uxth	r2, r3
 8015c2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	4413      	add	r3, r2
 8015c40:	b29b      	uxth	r3, r3
 8015c42:	b21a      	sxth	r2, r3
 8015c44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c4c:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8015c4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c60:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	4413      	add	r3, r2
 8015c6e:	b29b      	uxth	r3, r3
 8015c70:	b21a      	sxth	r2, r3
 8015c72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c7a:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8015c7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015c84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c98:	b29b      	uxth	r3, r3
 8015c9a:	4413      	add	r3, r2
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	b21a      	sxth	r2, r3
 8015ca0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015ca8:	80da      	strh	r2, [r3, #6]
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8015caa:	f107 0218 	add.w	r2, r7, #24
 8015cae:	f107 0310 	add.w	r3, r7, #16
 8015cb2:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f00a fd02 	bl	80206c0 <_lv_area_intersect>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d02e      	beq.n	8015d20 <lv_draw_sw_arc+0x7f8>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8015cc2:	f107 0118 	add.w	r1, r7, #24
 8015cc6:	f107 0020 	add.w	r0, r7, #32
 8015cca:	2300      	movs	r3, #0
 8015ccc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015cd0:	f7fc f97e 	bl	8011fd0 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8015cd4:	f107 0320 	add.w	r3, r7, #32
 8015cd8:	2100      	movs	r1, #0
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7fb fdac 	bl	8011838 <lv_draw_mask_add>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

            draw_ctx->clip_area = &clip_area2;
 8015ce6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015cea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	f107 0210 	add.w	r2, r7, #16
 8015cf4:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015cf6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015cfa:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015cfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d02:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015d06:	6818      	ldr	r0, [r3, #0]
 8015d08:	f7fe f9a2 	bl	8014050 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8015d0c:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7fb fe07 	bl	8011924 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8015d16:	f107 0320 	add.w	r3, r7, #32
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7fb fe52 	bl	80119c4 <lv_draw_mask_free_param>
        }
        draw_ctx->clip_area = clip_area_ori;
 8015d20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015d2e:	609a      	str	r2, [r3, #8]
 8015d30:	e006      	b.n	8015d40 <lv_draw_sw_arc+0x818>
    if(dsc->opa <= LV_OPA_MIN) return;
 8015d32:	bf00      	nop
 8015d34:	e004      	b.n	8015d40 <lv_draw_sw_arc+0x818>
    if(dsc->width == 0) return;
 8015d36:	bf00      	nop
 8015d38:	e002      	b.n	8015d40 <lv_draw_sw_arc+0x818>
    if(start_angle == end_angle) return;
 8015d3a:	bf00      	nop
 8015d3c:	e000      	b.n	8015d40 <lv_draw_sw_arc+0x818>
        return;
 8015d3e:	bf00      	nop
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_COMPLEX*/
}
 8015d40:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd90      	pop	{r4, r7, pc}

08015d48 <draw_quarter_0>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_DRAW_COMPLEX
static void draw_quarter_0(quarter_draw_dsc_t * q)
{
 8015d48:	b590      	push	{r4, r7, lr}
 8015d4a:	b087      	sub	sp, #28
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	699b      	ldr	r3, [r3, #24]
 8015d54:	689b      	ldr	r3, [r3, #8]
 8015d56:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	895b      	ldrh	r3, [r3, #10]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f040 8097 	bne.w	8015e90 <draw_quarter_0+0x148>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	899b      	ldrh	r3, [r3, #12]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	f040 8092 	bne.w	8015e90 <draw_quarter_0+0x148>
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	88da      	ldrh	r2, [r3, #6]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	891b      	ldrh	r3, [r3, #8]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	f080 808b 	bcs.w	8015e90 <draw_quarter_0+0x148>
        /*Small arc here*/
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015d82:	b29c      	uxth	r4, r3
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	88db      	ldrh	r3, [r3, #6]
 8015d88:	b21b      	sxth	r3, r3
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f00b fe9e 	bl	8021acc <lv_trigo_sin>
 8015d90:	4603      	mov	r3, r0
 8015d92:	461a      	mov	r2, r3
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015d9a:	4619      	mov	r1, r3
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015da2:	1acb      	subs	r3, r1, r3
 8015da4:	fb02 f303 	mul.w	r3, r2, r3
 8015da8:	13db      	asrs	r3, r3, #15
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	4423      	add	r3, r4
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	b21b      	sxth	r3, r3
 8015db2:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dbc:	b29c      	uxth	r4, r3
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	88db      	ldrh	r3, [r3, #6]
 8015dc2:	335a      	adds	r3, #90	; 0x5a
 8015dc4:	b29b      	uxth	r3, r3
 8015dc6:	b21b      	sxth	r3, r3
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f00b fe7f 	bl	8021acc <lv_trigo_sin>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	461a      	mov	r2, r3
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015dd8:	fb02 f303 	mul.w	r3, r2, r3
 8015ddc:	13db      	asrs	r3, r3, #15
 8015dde:	b29b      	uxth	r3, r3
 8015de0:	4423      	add	r3, r4
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	b21b      	sxth	r3, r3
 8015de6:	81bb      	strh	r3, [r7, #12]

        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015df0:	b29c      	uxth	r4, r3
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	891b      	ldrh	r3, [r3, #8]
 8015df6:	b21b      	sxth	r3, r3
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f00b fe67 	bl	8021acc <lv_trigo_sin>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	461a      	mov	r2, r3
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015e08:	fb02 f303 	mul.w	r3, r2, r3
 8015e0c:	13db      	asrs	r3, r3, #15
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	4423      	add	r3, r4
 8015e12:	b29b      	uxth	r3, r3
 8015e14:	b21b      	sxth	r3, r3
 8015e16:	81fb      	strh	r3, [r7, #14]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e20:	b29c      	uxth	r4, r3
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	891b      	ldrh	r3, [r3, #8]
 8015e26:	335a      	adds	r3, #90	; 0x5a
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	b21b      	sxth	r3, r3
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f00b fe4d 	bl	8021acc <lv_trigo_sin>
 8015e32:	4603      	mov	r3, r0
 8015e34:	461a      	mov	r2, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015e3c:	4619      	mov	r1, r3
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015e44:	1acb      	subs	r3, r1, r3
 8015e46:	fb02 f303 	mul.w	r3, r2, r3
 8015e4a:	13db      	asrs	r3, r3, #15
 8015e4c:	b29b      	uxth	r3, r3
 8015e4e:	4423      	add	r3, r4
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	b21b      	sxth	r3, r3
 8015e54:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015e56:	f107 0108 	add.w	r1, r7, #8
 8015e5a:	f107 0308 	add.w	r3, r7, #8
 8015e5e:	697a      	ldr	r2, [r7, #20]
 8015e60:	4618      	mov	r0, r3
 8015e62:	f00a fc2d 	bl	80206c0 <_lv_area_intersect>
 8015e66:	4603      	mov	r3, r0
 8015e68:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8015e6a:	7cfb      	ldrb	r3, [r7, #19]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	f000 8152 	beq.w	8016116 <draw_quarter_0+0x3ce>
            q->draw_ctx->clip_area = &quarter_area;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	699b      	ldr	r3, [r3, #24]
 8015e76:	f107 0208 	add.w	r2, r7, #8
 8015e7a:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	6998      	ldr	r0, [r3, #24]
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6919      	ldr	r1, [r3, #16]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	695b      	ldr	r3, [r3, #20]
 8015e88:	461a      	mov	r2, r3
 8015e8a:	f7fe f8e1 	bl	8014050 <lv_draw_rect>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8015e8e:	e142      	b.n	8016116 <draw_quarter_0+0x3ce>
        }
    }
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	895b      	ldrh	r3, [r3, #10]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d004      	beq.n	8015ea2 <draw_quarter_0+0x15a>
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	899b      	ldrh	r3, [r3, #12]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	f040 80d2 	bne.w	8016046 <draw_quarter_0+0x2fe>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 0) {
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	895b      	ldrh	r3, [r3, #10]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d163      	bne.n	8015f72 <draw_quarter_0+0x22a>
            quarter_area.x1 = q->center->x;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015eb2:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + q->radius;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ebc:	b29a      	uxth	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	4413      	add	r3, r2
 8015ec8:	b29b      	uxth	r3, r3
 8015eca:	b21b      	sxth	r3, r3
 8015ecc:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ed6:	b29c      	uxth	r4, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	88db      	ldrh	r3, [r3, #6]
 8015edc:	b21b      	sxth	r3, r3
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f00b fdf4 	bl	8021acc <lv_trigo_sin>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015eee:	4619      	mov	r1, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015ef6:	1acb      	subs	r3, r1, r3
 8015ef8:	fb02 f303 	mul.w	r3, r2, r3
 8015efc:	13db      	asrs	r3, r3, #15
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	4423      	add	r3, r4
 8015f02:	b29b      	uxth	r3, r3
 8015f04:	b21b      	sxth	r3, r3
 8015f06:	817b      	strh	r3, [r7, #10]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f10:	b29c      	uxth	r4, r3
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	88db      	ldrh	r3, [r3, #6]
 8015f16:	335a      	adds	r3, #90	; 0x5a
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	b21b      	sxth	r3, r3
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f00b fdd5 	bl	8021acc <lv_trigo_sin>
 8015f22:	4603      	mov	r3, r0
 8015f24:	461a      	mov	r2, r3
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f2c:	fb02 f303 	mul.w	r3, r2, r3
 8015f30:	13db      	asrs	r3, r3, #15
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	4423      	add	r3, r4
 8015f36:	b29b      	uxth	r3, r3
 8015f38:	b21b      	sxth	r3, r3
 8015f3a:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015f3c:	f107 0108 	add.w	r1, r7, #8
 8015f40:	f107 0308 	add.w	r3, r7, #8
 8015f44:	697a      	ldr	r2, [r7, #20]
 8015f46:	4618      	mov	r0, r3
 8015f48:	f00a fbba 	bl	80206c0 <_lv_area_intersect>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8015f50:	7c7b      	ldrb	r3, [r7, #17]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d00d      	beq.n	8015f72 <draw_quarter_0+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	699b      	ldr	r3, [r3, #24]
 8015f5a:	f107 0208 	add.w	r2, r7, #8
 8015f5e:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6998      	ldr	r0, [r3, #24]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6919      	ldr	r1, [r3, #16]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	695b      	ldr	r3, [r3, #20]
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	f7fe f86f 	bl	8014050 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 0) {
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	899b      	ldrh	r3, [r3, #12]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	f040 80cf 	bne.w	801611a <draw_quarter_0+0x3d2>
            quarter_area.x2 = q->center->x + q->radius;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f84:	b29a      	uxth	r2, r3
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	4413      	add	r3, r2
 8015f90:	b29b      	uxth	r3, r3
 8015f92:	b21b      	sxth	r3, r3
 8015f94:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f9e:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015fa8:	b29c      	uxth	r4, r3
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	891b      	ldrh	r3, [r3, #8]
 8015fae:	b21b      	sxth	r3, r3
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f00b fd8b 	bl	8021acc <lv_trigo_sin>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	461a      	mov	r2, r3
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fc0:	fb02 f303 	mul.w	r3, r2, r3
 8015fc4:	13db      	asrs	r3, r3, #15
 8015fc6:	b29b      	uxth	r3, r3
 8015fc8:	4423      	add	r3, r4
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	b21b      	sxth	r3, r3
 8015fce:	81fb      	strh	r3, [r7, #14]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fd8:	b29c      	uxth	r4, r3
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	891b      	ldrh	r3, [r3, #8]
 8015fde:	335a      	adds	r3, #90	; 0x5a
 8015fe0:	b29b      	uxth	r3, r3
 8015fe2:	b21b      	sxth	r3, r3
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f00b fd71 	bl	8021acc <lv_trigo_sin>
 8015fea:	4603      	mov	r3, r0
 8015fec:	461a      	mov	r2, r3
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ff4:	4619      	mov	r1, r3
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015ffc:	1acb      	subs	r3, r1, r3
 8015ffe:	fb02 f303 	mul.w	r3, r2, r3
 8016002:	13db      	asrs	r3, r3, #15
 8016004:	b29b      	uxth	r3, r3
 8016006:	4423      	add	r3, r4
 8016008:	b29b      	uxth	r3, r3
 801600a:	b21b      	sxth	r3, r3
 801600c:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801600e:	f107 0108 	add.w	r1, r7, #8
 8016012:	f107 0308 	add.w	r3, r7, #8
 8016016:	697a      	ldr	r2, [r7, #20]
 8016018:	4618      	mov	r0, r3
 801601a:	f00a fb51 	bl	80206c0 <_lv_area_intersect>
 801601e:	4603      	mov	r3, r0
 8016020:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8016022:	7c3b      	ldrb	r3, [r7, #16]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d078      	beq.n	801611a <draw_quarter_0+0x3d2>
                q->draw_ctx->clip_area = &quarter_area;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	699b      	ldr	r3, [r3, #24]
 801602c:	f107 0208 	add.w	r2, r7, #8
 8016030:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6998      	ldr	r0, [r3, #24]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6919      	ldr	r1, [r3, #16]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	695b      	ldr	r3, [r3, #20]
 801603e:	461a      	mov	r2, r3
 8016040:	f7fe f806 	bl	8014050 <lv_draw_rect>
        if(q->end_quarter == 0) {
 8016044:	e069      	b.n	801611a <draw_quarter_0+0x3d2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	895a      	ldrh	r2, [r3, #10]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	899b      	ldrh	r3, [r3, #12]
 801604e:	429a      	cmp	r2, r3
 8016050:	d109      	bne.n	8016066 <draw_quarter_0+0x31e>
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	895b      	ldrh	r3, [r3, #10]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d005      	beq.n	8016066 <draw_quarter_0+0x31e>
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	891a      	ldrh	r2, [r3, #8]
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	88db      	ldrh	r3, [r3, #6]
 8016062:	429a      	cmp	r2, r3
 8016064:	d317      	bcc.n	8016096 <draw_quarter_0+0x34e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 801606a:	2b02      	cmp	r3, #2
 801606c:	d103      	bne.n	8016076 <draw_quarter_0+0x32e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	899b      	ldrh	r3, [r3, #12]
 8016072:	2b01      	cmp	r3, #1
 8016074:	d00f      	beq.n	8016096 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801607a:	2b03      	cmp	r3, #3
 801607c:	d103      	bne.n	8016086 <draw_quarter_0+0x33e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	899b      	ldrh	r3, [r3, #12]
 8016082:	2b02      	cmp	r3, #2
 8016084:	d007      	beq.n	8016096 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801608a:	2b03      	cmp	r3, #3
 801608c:	d146      	bne.n	801611c <draw_quarter_0+0x3d4>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	899b      	ldrh	r3, [r3, #12]
 8016092:	2b01      	cmp	r3, #1
 8016094:	d142      	bne.n	801611c <draw_quarter_0+0x3d4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801609e:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80160a8:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160b2:	b29a      	uxth	r2, r3
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	4413      	add	r3, r2
 80160be:	b29b      	uxth	r3, r3
 80160c0:	b21b      	sxth	r3, r3
 80160c2:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80160cc:	b29a      	uxth	r2, r3
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80160d4:	b29b      	uxth	r3, r3
 80160d6:	4413      	add	r3, r2
 80160d8:	b29b      	uxth	r3, r3
 80160da:	b21b      	sxth	r3, r3
 80160dc:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80160de:	f107 0108 	add.w	r1, r7, #8
 80160e2:	f107 0308 	add.w	r3, r7, #8
 80160e6:	697a      	ldr	r2, [r7, #20]
 80160e8:	4618      	mov	r0, r3
 80160ea:	f00a fae9 	bl	80206c0 <_lv_area_intersect>
 80160ee:	4603      	mov	r3, r0
 80160f0:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 80160f2:	7cbb      	ldrb	r3, [r7, #18]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d011      	beq.n	801611c <draw_quarter_0+0x3d4>
            q->draw_ctx->clip_area = &quarter_area;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	699b      	ldr	r3, [r3, #24]
 80160fc:	f107 0208 	add.w	r2, r7, #8
 8016100:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6998      	ldr	r0, [r3, #24]
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	6919      	ldr	r1, [r3, #16]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	695b      	ldr	r3, [r3, #20]
 801610e:	461a      	mov	r2, r3
 8016110:	f7fd ff9e 	bl	8014050 <lv_draw_rect>
 8016114:	e002      	b.n	801611c <draw_quarter_0+0x3d4>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8016116:	bf00      	nop
 8016118:	e000      	b.n	801611c <draw_quarter_0+0x3d4>
        if(q->end_quarter == 0) {
 801611a:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	699b      	ldr	r3, [r3, #24]
 8016120:	697a      	ldr	r2, [r7, #20]
 8016122:	609a      	str	r2, [r3, #8]
}
 8016124:	bf00      	nop
 8016126:	371c      	adds	r7, #28
 8016128:	46bd      	mov	sp, r7
 801612a:	bd90      	pop	{r4, r7, pc}

0801612c <draw_quarter_1>:

static void draw_quarter_1(quarter_draw_dsc_t * q)
{
 801612c:	b590      	push	{r4, r7, lr}
 801612e:	b087      	sub	sp, #28
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	699b      	ldr	r3, [r3, #24]
 8016138:	689b      	ldr	r3, [r3, #8]
 801613a:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	895b      	ldrh	r3, [r3, #10]
 8016140:	2b01      	cmp	r3, #1
 8016142:	f040 8097 	bne.w	8016274 <draw_quarter_1+0x148>
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	899b      	ldrh	r3, [r3, #12]
 801614a:	2b01      	cmp	r3, #1
 801614c:	f040 8092 	bne.w	8016274 <draw_quarter_1+0x148>
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	88da      	ldrh	r2, [r3, #6]
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	891b      	ldrh	r3, [r3, #8]
 8016158:	429a      	cmp	r2, r3
 801615a:	f080 808b 	bcs.w	8016274 <draw_quarter_1+0x148>
        /*Small arc here*/
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016166:	b29c      	uxth	r4, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	88db      	ldrh	r3, [r3, #6]
 801616c:	b21b      	sxth	r3, r3
 801616e:	4618      	mov	r0, r3
 8016170:	f00b fcac 	bl	8021acc <lv_trigo_sin>
 8016174:	4603      	mov	r3, r0
 8016176:	461a      	mov	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801617e:	fb02 f303 	mul.w	r3, r2, r3
 8016182:	13db      	asrs	r3, r3, #15
 8016184:	b29b      	uxth	r3, r3
 8016186:	4423      	add	r3, r4
 8016188:	b29b      	uxth	r3, r3
 801618a:	b21b      	sxth	r3, r3
 801618c:	81fb      	strh	r3, [r7, #14]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016196:	b29c      	uxth	r4, r3
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	88db      	ldrh	r3, [r3, #6]
 801619c:	335a      	adds	r3, #90	; 0x5a
 801619e:	b29b      	uxth	r3, r3
 80161a0:	b21b      	sxth	r3, r3
 80161a2:	4618      	mov	r0, r3
 80161a4:	f00b fc92 	bl	8021acc <lv_trigo_sin>
 80161a8:	4603      	mov	r3, r0
 80161aa:	461a      	mov	r2, r3
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80161b2:	4619      	mov	r1, r3
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80161ba:	1acb      	subs	r3, r1, r3
 80161bc:	fb02 f303 	mul.w	r3, r2, r3
 80161c0:	13db      	asrs	r3, r3, #15
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	4423      	add	r3, r4
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	b21b      	sxth	r3, r3
 80161ca:	81bb      	strh	r3, [r7, #12]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80161d4:	b29c      	uxth	r4, r3
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	891b      	ldrh	r3, [r3, #8]
 80161da:	b21b      	sxth	r3, r3
 80161dc:	4618      	mov	r0, r3
 80161de:	f00b fc75 	bl	8021acc <lv_trigo_sin>
 80161e2:	4603      	mov	r3, r0
 80161e4:	461a      	mov	r2, r3
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80161ec:	4619      	mov	r1, r3
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80161f4:	1acb      	subs	r3, r1, r3
 80161f6:	fb02 f303 	mul.w	r3, r2, r3
 80161fa:	13db      	asrs	r3, r3, #15
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	4423      	add	r3, r4
 8016200:	b29b      	uxth	r3, r3
 8016202:	b21b      	sxth	r3, r3
 8016204:	817b      	strh	r3, [r7, #10]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801620e:	b29c      	uxth	r4, r3
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	891b      	ldrh	r3, [r3, #8]
 8016214:	335a      	adds	r3, #90	; 0x5a
 8016216:	b29b      	uxth	r3, r3
 8016218:	b21b      	sxth	r3, r3
 801621a:	4618      	mov	r0, r3
 801621c:	f00b fc56 	bl	8021acc <lv_trigo_sin>
 8016220:	4603      	mov	r3, r0
 8016222:	461a      	mov	r2, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801622a:	fb02 f303 	mul.w	r3, r2, r3
 801622e:	13db      	asrs	r3, r3, #15
 8016230:	b29b      	uxth	r3, r3
 8016232:	4423      	add	r3, r4
 8016234:	b29b      	uxth	r3, r3
 8016236:	b21b      	sxth	r3, r3
 8016238:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801623a:	f107 0108 	add.w	r1, r7, #8
 801623e:	f107 0308 	add.w	r3, r7, #8
 8016242:	697a      	ldr	r2, [r7, #20]
 8016244:	4618      	mov	r0, r3
 8016246:	f00a fa3b 	bl	80206c0 <_lv_area_intersect>
 801624a:	4603      	mov	r3, r0
 801624c:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 801624e:	7cfb      	ldrb	r3, [r7, #19]
 8016250:	2b00      	cmp	r3, #0
 8016252:	f000 815a 	beq.w	801650a <draw_quarter_1+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	699b      	ldr	r3, [r3, #24]
 801625a:	f107 0208 	add.w	r2, r7, #8
 801625e:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6998      	ldr	r0, [r3, #24]
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	6919      	ldr	r1, [r3, #16]
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	695b      	ldr	r3, [r3, #20]
 801626c:	461a      	mov	r2, r3
 801626e:	f7fd feef 	bl	8014050 <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8016272:	e14a      	b.n	801650a <draw_quarter_1+0x3de>
        }
    }
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	895b      	ldrh	r3, [r3, #10]
 8016278:	2b01      	cmp	r3, #1
 801627a:	d004      	beq.n	8016286 <draw_quarter_1+0x15a>
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	899b      	ldrh	r3, [r3, #12]
 8016280:	2b01      	cmp	r3, #1
 8016282:	f040 80d6 	bne.w	8016432 <draw_quarter_1+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 1) {
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	895b      	ldrh	r3, [r3, #10]
 801628a:	2b01      	cmp	r3, #1
 801628c:	d163      	bne.n	8016356 <draw_quarter_1+0x22a>
            quarter_area.x1 = q->center->x - q->radius;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016296:	b29a      	uxth	r2, r3
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	1ad3      	subs	r3, r2, r3
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	b21b      	sxth	r3, r3
 80162a6:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80162b0:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80162ba:	b29c      	uxth	r4, r3
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	88db      	ldrh	r3, [r3, #6]
 80162c0:	b21b      	sxth	r3, r3
 80162c2:	4618      	mov	r0, r3
 80162c4:	f00b fc02 	bl	8021acc <lv_trigo_sin>
 80162c8:	4603      	mov	r3, r0
 80162ca:	461a      	mov	r2, r3
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80162d2:	fb02 f303 	mul.w	r3, r2, r3
 80162d6:	13db      	asrs	r3, r3, #15
 80162d8:	b29b      	uxth	r3, r3
 80162da:	4423      	add	r3, r4
 80162dc:	b29b      	uxth	r3, r3
 80162de:	b21b      	sxth	r3, r3
 80162e0:	81fb      	strh	r3, [r7, #14]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162ea:	b29c      	uxth	r4, r3
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	88db      	ldrh	r3, [r3, #6]
 80162f0:	335a      	adds	r3, #90	; 0x5a
 80162f2:	b29b      	uxth	r3, r3
 80162f4:	b21b      	sxth	r3, r3
 80162f6:	4618      	mov	r0, r3
 80162f8:	f00b fbe8 	bl	8021acc <lv_trigo_sin>
 80162fc:	4603      	mov	r3, r0
 80162fe:	461a      	mov	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016306:	4619      	mov	r1, r3
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801630e:	1acb      	subs	r3, r1, r3
 8016310:	fb02 f303 	mul.w	r3, r2, r3
 8016314:	13db      	asrs	r3, r3, #15
 8016316:	b29b      	uxth	r3, r3
 8016318:	4423      	add	r3, r4
 801631a:	b29b      	uxth	r3, r3
 801631c:	b21b      	sxth	r3, r3
 801631e:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016320:	f107 0108 	add.w	r1, r7, #8
 8016324:	f107 0308 	add.w	r3, r7, #8
 8016328:	697a      	ldr	r2, [r7, #20]
 801632a:	4618      	mov	r0, r3
 801632c:	f00a f9c8 	bl	80206c0 <_lv_area_intersect>
 8016330:	4603      	mov	r3, r0
 8016332:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8016334:	7c7b      	ldrb	r3, [r7, #17]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d00d      	beq.n	8016356 <draw_quarter_1+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	699b      	ldr	r3, [r3, #24]
 801633e:	f107 0208 	add.w	r2, r7, #8
 8016342:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	6998      	ldr	r0, [r3, #24]
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6919      	ldr	r1, [r3, #16]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	695b      	ldr	r3, [r3, #20]
 8016350:	461a      	mov	r2, r3
 8016352:	f7fd fe7d 	bl	8014050 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 1) {
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	899b      	ldrh	r3, [r3, #12]
 801635a:	2b01      	cmp	r3, #1
 801635c:	f040 80d7 	bne.w	801650e <draw_quarter_1+0x3e2>
            quarter_area.x2 = q->center->x - 1;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016368:	b29b      	uxth	r3, r3
 801636a:	3b01      	subs	r3, #1
 801636c:	b29b      	uxth	r3, r3
 801636e:	b21b      	sxth	r3, r3
 8016370:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + q->radius;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801637a:	b29a      	uxth	r2, r3
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016382:	b29b      	uxth	r3, r3
 8016384:	4413      	add	r3, r2
 8016386:	b29b      	uxth	r3, r3
 8016388:	b21b      	sxth	r3, r3
 801638a:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016394:	b29c      	uxth	r4, r3
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	891b      	ldrh	r3, [r3, #8]
 801639a:	b21b      	sxth	r3, r3
 801639c:	4618      	mov	r0, r3
 801639e:	f00b fb95 	bl	8021acc <lv_trigo_sin>
 80163a2:	4603      	mov	r3, r0
 80163a4:	461a      	mov	r2, r3
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80163ac:	4619      	mov	r1, r3
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80163b4:	1acb      	subs	r3, r1, r3
 80163b6:	fb02 f303 	mul.w	r3, r2, r3
 80163ba:	13db      	asrs	r3, r3, #15
 80163bc:	b29b      	uxth	r3, r3
 80163be:	4423      	add	r3, r4
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	b21b      	sxth	r3, r3
 80163c4:	817b      	strh	r3, [r7, #10]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163ce:	b29c      	uxth	r4, r3
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	891b      	ldrh	r3, [r3, #8]
 80163d4:	335a      	adds	r3, #90	; 0x5a
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	b21b      	sxth	r3, r3
 80163da:	4618      	mov	r0, r3
 80163dc:	f00b fb76 	bl	8021acc <lv_trigo_sin>
 80163e0:	4603      	mov	r3, r0
 80163e2:	461a      	mov	r2, r3
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80163ea:	fb02 f303 	mul.w	r3, r2, r3
 80163ee:	13db      	asrs	r3, r3, #15
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	4423      	add	r3, r4
 80163f4:	b29b      	uxth	r3, r3
 80163f6:	b21b      	sxth	r3, r3
 80163f8:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80163fa:	f107 0108 	add.w	r1, r7, #8
 80163fe:	f107 0308 	add.w	r3, r7, #8
 8016402:	697a      	ldr	r2, [r7, #20]
 8016404:	4618      	mov	r0, r3
 8016406:	f00a f95b 	bl	80206c0 <_lv_area_intersect>
 801640a:	4603      	mov	r3, r0
 801640c:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801640e:	7c3b      	ldrb	r3, [r7, #16]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d07c      	beq.n	801650e <draw_quarter_1+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	699b      	ldr	r3, [r3, #24]
 8016418:	f107 0208 	add.w	r2, r7, #8
 801641c:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	6998      	ldr	r0, [r3, #24]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	6919      	ldr	r1, [r3, #16]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	695b      	ldr	r3, [r3, #20]
 801642a:	461a      	mov	r2, r3
 801642c:	f7fd fe10 	bl	8014050 <lv_draw_rect>
        if(q->end_quarter == 1) {
 8016430:	e06d      	b.n	801650e <draw_quarter_1+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	895a      	ldrh	r2, [r3, #10]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	899b      	ldrh	r3, [r3, #12]
 801643a:	429a      	cmp	r2, r3
 801643c:	d109      	bne.n	8016452 <draw_quarter_1+0x326>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	895b      	ldrh	r3, [r3, #10]
 8016442:	2b01      	cmp	r3, #1
 8016444:	d005      	beq.n	8016452 <draw_quarter_1+0x326>
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	891a      	ldrh	r2, [r3, #8]
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	88db      	ldrh	r3, [r3, #6]
 801644e:	429a      	cmp	r2, r3
 8016450:	d317      	bcc.n	8016482 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8016456:	2b00      	cmp	r3, #0
 8016458:	d103      	bne.n	8016462 <draw_quarter_1+0x336>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	899b      	ldrh	r3, [r3, #12]
 801645e:	2b02      	cmp	r3, #2
 8016460:	d00f      	beq.n	8016482 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8016466:	2b00      	cmp	r3, #0
 8016468:	d103      	bne.n	8016472 <draw_quarter_1+0x346>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	899b      	ldrh	r3, [r3, #12]
 801646e:	2b03      	cmp	r3, #3
 8016470:	d007      	beq.n	8016482 <draw_quarter_1+0x356>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016476:	2b03      	cmp	r3, #3
 8016478:	d14a      	bne.n	8016510 <draw_quarter_1+0x3e4>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	899b      	ldrh	r3, [r3, #12]
 801647e:	2b02      	cmp	r3, #2
 8016480:	d146      	bne.n	8016510 <draw_quarter_1+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	f9b3 3000 	ldrsh.w	r3, [r3]
 801648a:	b29a      	uxth	r2, r3
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016492:	b29b      	uxth	r3, r3
 8016494:	1ad3      	subs	r3, r2, r3
 8016496:	b29b      	uxth	r3, r3
 8016498:	b21b      	sxth	r3, r3
 801649a:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80164a4:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ae:	b29b      	uxth	r3, r3
 80164b0:	3b01      	subs	r3, #1
 80164b2:	b29b      	uxth	r3, r3
 80164b4:	b21b      	sxth	r3, r3
 80164b6:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80164c0:	b29a      	uxth	r2, r3
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	4413      	add	r3, r2
 80164cc:	b29b      	uxth	r3, r3
 80164ce:	b21b      	sxth	r3, r3
 80164d0:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80164d2:	f107 0108 	add.w	r1, r7, #8
 80164d6:	f107 0308 	add.w	r3, r7, #8
 80164da:	697a      	ldr	r2, [r7, #20]
 80164dc:	4618      	mov	r0, r3
 80164de:	f00a f8ef 	bl	80206c0 <_lv_area_intersect>
 80164e2:	4603      	mov	r3, r0
 80164e4:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 80164e6:	7cbb      	ldrb	r3, [r7, #18]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d011      	beq.n	8016510 <draw_quarter_1+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	699b      	ldr	r3, [r3, #24]
 80164f0:	f107 0208 	add.w	r2, r7, #8
 80164f4:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	6998      	ldr	r0, [r3, #24]
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	6919      	ldr	r1, [r3, #16]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	695b      	ldr	r3, [r3, #20]
 8016502:	461a      	mov	r2, r3
 8016504:	f7fd fda4 	bl	8014050 <lv_draw_rect>
 8016508:	e002      	b.n	8016510 <draw_quarter_1+0x3e4>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801650a:	bf00      	nop
 801650c:	e000      	b.n	8016510 <draw_quarter_1+0x3e4>
        if(q->end_quarter == 1) {
 801650e:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	699b      	ldr	r3, [r3, #24]
 8016514:	697a      	ldr	r2, [r7, #20]
 8016516:	609a      	str	r2, [r3, #8]
}
 8016518:	bf00      	nop
 801651a:	371c      	adds	r7, #28
 801651c:	46bd      	mov	sp, r7
 801651e:	bd90      	pop	{r4, r7, pc}

08016520 <draw_quarter_2>:

static void draw_quarter_2(quarter_draw_dsc_t * q)
{
 8016520:	b590      	push	{r4, r7, lr}
 8016522:	b087      	sub	sp, #28
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	699b      	ldr	r3, [r3, #24]
 801652c:	689b      	ldr	r3, [r3, #8]
 801652e:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	895b      	ldrh	r3, [r3, #10]
 8016534:	2b02      	cmp	r3, #2
 8016536:	f040 8097 	bne.w	8016668 <draw_quarter_2+0x148>
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	899b      	ldrh	r3, [r3, #12]
 801653e:	2b02      	cmp	r3, #2
 8016540:	f040 8092 	bne.w	8016668 <draw_quarter_2+0x148>
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	88da      	ldrh	r2, [r3, #6]
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	891b      	ldrh	r3, [r3, #8]
 801654c:	429a      	cmp	r2, r3
 801654e:	f080 808b 	bcs.w	8016668 <draw_quarter_2+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	f9b3 3000 	ldrsh.w	r3, [r3]
 801655a:	b29c      	uxth	r4, r3
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	88db      	ldrh	r3, [r3, #6]
 8016560:	335a      	adds	r3, #90	; 0x5a
 8016562:	b29b      	uxth	r3, r3
 8016564:	b21b      	sxth	r3, r3
 8016566:	4618      	mov	r0, r3
 8016568:	f00b fab0 	bl	8021acc <lv_trigo_sin>
 801656c:	4603      	mov	r3, r0
 801656e:	461a      	mov	r2, r3
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016576:	fb02 f303 	mul.w	r3, r2, r3
 801657a:	13db      	asrs	r3, r3, #15
 801657c:	b29b      	uxth	r3, r3
 801657e:	4423      	add	r3, r4
 8016580:	b29b      	uxth	r3, r3
 8016582:	b21b      	sxth	r3, r3
 8016584:	813b      	strh	r3, [r7, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801658e:	b29c      	uxth	r4, r3
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	88db      	ldrh	r3, [r3, #6]
 8016594:	b21b      	sxth	r3, r3
 8016596:	4618      	mov	r0, r3
 8016598:	f00b fa98 	bl	8021acc <lv_trigo_sin>
 801659c:	4603      	mov	r3, r0
 801659e:	461a      	mov	r2, r3
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80165a6:	4619      	mov	r1, r3
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80165ae:	1acb      	subs	r3, r1, r3
 80165b0:	fb02 f303 	mul.w	r3, r2, r3
 80165b4:	13db      	asrs	r3, r3, #15
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	4423      	add	r3, r4
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	b21b      	sxth	r3, r3
 80165be:	81fb      	strh	r3, [r7, #14]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80165c8:	b29c      	uxth	r4, r3
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	891b      	ldrh	r3, [r3, #8]
 80165ce:	b21b      	sxth	r3, r3
 80165d0:	4618      	mov	r0, r3
 80165d2:	f00b fa7b 	bl	8021acc <lv_trigo_sin>
 80165d6:	4603      	mov	r3, r0
 80165d8:	461a      	mov	r2, r3
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80165e0:	fb02 f303 	mul.w	r3, r2, r3
 80165e4:	13db      	asrs	r3, r3, #15
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	4423      	add	r3, r4
 80165ea:	b29b      	uxth	r3, r3
 80165ec:	b21b      	sxth	r3, r3
 80165ee:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165f8:	b29c      	uxth	r4, r3
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	891b      	ldrh	r3, [r3, #8]
 80165fe:	335a      	adds	r3, #90	; 0x5a
 8016600:	b29b      	uxth	r3, r3
 8016602:	b21b      	sxth	r3, r3
 8016604:	4618      	mov	r0, r3
 8016606:	f00b fa61 	bl	8021acc <lv_trigo_sin>
 801660a:	4603      	mov	r3, r0
 801660c:	461a      	mov	r2, r3
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016614:	4619      	mov	r1, r3
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801661c:	1acb      	subs	r3, r1, r3
 801661e:	fb02 f303 	mul.w	r3, r2, r3
 8016622:	13db      	asrs	r3, r3, #15
 8016624:	b29b      	uxth	r3, r3
 8016626:	4423      	add	r3, r4
 8016628:	b29b      	uxth	r3, r3
 801662a:	b21b      	sxth	r3, r3
 801662c:	81bb      	strh	r3, [r7, #12]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801662e:	f107 0108 	add.w	r1, r7, #8
 8016632:	f107 0308 	add.w	r3, r7, #8
 8016636:	697a      	ldr	r2, [r7, #20]
 8016638:	4618      	mov	r0, r3
 801663a:	f00a f841 	bl	80206c0 <_lv_area_intersect>
 801663e:	4603      	mov	r3, r0
 8016640:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8016642:	7cfb      	ldrb	r3, [r7, #19]
 8016644:	2b00      	cmp	r3, #0
 8016646:	f000 8163 	beq.w	8016910 <draw_quarter_2+0x3f0>
            q->draw_ctx->clip_area = &quarter_area;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	699b      	ldr	r3, [r3, #24]
 801664e:	f107 0208 	add.w	r2, r7, #8
 8016652:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6998      	ldr	r0, [r3, #24]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	6919      	ldr	r1, [r3, #16]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	695b      	ldr	r3, [r3, #20]
 8016660:	461a      	mov	r2, r3
 8016662:	f7fd fcf5 	bl	8014050 <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8016666:	e153      	b.n	8016910 <draw_quarter_2+0x3f0>
        }
    }
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	895b      	ldrh	r3, [r3, #10]
 801666c:	2b02      	cmp	r3, #2
 801666e:	d004      	beq.n	801667a <draw_quarter_2+0x15a>
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	899b      	ldrh	r3, [r3, #12]
 8016674:	2b02      	cmp	r3, #2
 8016676:	f040 80db 	bne.w	8016830 <draw_quarter_2+0x310>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 2) {
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	895b      	ldrh	r3, [r3, #10]
 801667e:	2b02      	cmp	r3, #2
 8016680:	d167      	bne.n	8016752 <draw_quarter_2+0x232>
            quarter_area.x2 = q->center->x - 1;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	f9b3 3000 	ldrsh.w	r3, [r3]
 801668a:	b29b      	uxth	r3, r3
 801668c:	3b01      	subs	r3, #1
 801668e:	b29b      	uxth	r3, r3
 8016690:	b21b      	sxth	r3, r3
 8016692:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y - q->radius;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801669c:	b29a      	uxth	r2, r3
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80166a4:	b29b      	uxth	r3, r3
 80166a6:	1ad3      	subs	r3, r2, r3
 80166a8:	b29b      	uxth	r3, r3
 80166aa:	b21b      	sxth	r3, r3
 80166ac:	817b      	strh	r3, [r7, #10]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166b6:	b29c      	uxth	r4, r3
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	88db      	ldrh	r3, [r3, #6]
 80166bc:	335a      	adds	r3, #90	; 0x5a
 80166be:	b29b      	uxth	r3, r3
 80166c0:	b21b      	sxth	r3, r3
 80166c2:	4618      	mov	r0, r3
 80166c4:	f00b fa02 	bl	8021acc <lv_trigo_sin>
 80166c8:	4603      	mov	r3, r0
 80166ca:	461a      	mov	r2, r3
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80166d2:	fb02 f303 	mul.w	r3, r2, r3
 80166d6:	13db      	asrs	r3, r3, #15
 80166d8:	b29b      	uxth	r3, r3
 80166da:	4423      	add	r3, r4
 80166dc:	b29b      	uxth	r3, r3
 80166de:	b21b      	sxth	r3, r3
 80166e0:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80166ea:	b29c      	uxth	r4, r3
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	88db      	ldrh	r3, [r3, #6]
 80166f0:	b21b      	sxth	r3, r3
 80166f2:	4618      	mov	r0, r3
 80166f4:	f00b f9ea 	bl	8021acc <lv_trigo_sin>
 80166f8:	4603      	mov	r3, r0
 80166fa:	461a      	mov	r2, r3
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016702:	4619      	mov	r1, r3
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801670a:	1acb      	subs	r3, r1, r3
 801670c:	fb02 f303 	mul.w	r3, r2, r3
 8016710:	13db      	asrs	r3, r3, #15
 8016712:	b29b      	uxth	r3, r3
 8016714:	4423      	add	r3, r4
 8016716:	b29b      	uxth	r3, r3
 8016718:	b21b      	sxth	r3, r3
 801671a:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801671c:	f107 0108 	add.w	r1, r7, #8
 8016720:	f107 0308 	add.w	r3, r7, #8
 8016724:	697a      	ldr	r2, [r7, #20]
 8016726:	4618      	mov	r0, r3
 8016728:	f009 ffca 	bl	80206c0 <_lv_area_intersect>
 801672c:	4603      	mov	r3, r0
 801672e:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8016730:	7c7b      	ldrb	r3, [r7, #17]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d00d      	beq.n	8016752 <draw_quarter_2+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	699b      	ldr	r3, [r3, #24]
 801673a:	f107 0208 	add.w	r2, r7, #8
 801673e:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	6998      	ldr	r0, [r3, #24]
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6919      	ldr	r1, [r3, #16]
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	695b      	ldr	r3, [r3, #20]
 801674c:	461a      	mov	r2, r3
 801674e:	f7fd fc7f 	bl	8014050 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 2) {
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	899b      	ldrh	r3, [r3, #12]
 8016756:	2b02      	cmp	r3, #2
 8016758:	f040 80dc 	bne.w	8016914 <draw_quarter_2+0x3f4>
            quarter_area.x1 = q->center->x - q->radius;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016764:	b29a      	uxth	r2, r3
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801676c:	b29b      	uxth	r3, r3
 801676e:	1ad3      	subs	r3, r2, r3
 8016770:	b29b      	uxth	r3, r3
 8016772:	b21b      	sxth	r3, r3
 8016774:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y - 1;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801677e:	b29b      	uxth	r3, r3
 8016780:	3b01      	subs	r3, #1
 8016782:	b29b      	uxth	r3, r3
 8016784:	b21b      	sxth	r3, r3
 8016786:	81fb      	strh	r3, [r7, #14]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016790:	b29c      	uxth	r4, r3
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	891b      	ldrh	r3, [r3, #8]
 8016796:	335a      	adds	r3, #90	; 0x5a
 8016798:	b29b      	uxth	r3, r3
 801679a:	b21b      	sxth	r3, r3
 801679c:	4618      	mov	r0, r3
 801679e:	f00b f995 	bl	8021acc <lv_trigo_sin>
 80167a2:	4603      	mov	r3, r0
 80167a4:	461a      	mov	r2, r3
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80167ac:	4619      	mov	r1, r3
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80167b4:	1acb      	subs	r3, r1, r3
 80167b6:	fb02 f303 	mul.w	r3, r2, r3
 80167ba:	13db      	asrs	r3, r3, #15
 80167bc:	b29b      	uxth	r3, r3
 80167be:	4423      	add	r3, r4
 80167c0:	b29b      	uxth	r3, r3
 80167c2:	b21b      	sxth	r3, r3
 80167c4:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80167ce:	b29c      	uxth	r4, r3
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	891b      	ldrh	r3, [r3, #8]
 80167d4:	b21b      	sxth	r3, r3
 80167d6:	4618      	mov	r0, r3
 80167d8:	f00b f978 	bl	8021acc <lv_trigo_sin>
 80167dc:	4603      	mov	r3, r0
 80167de:	461a      	mov	r2, r3
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80167e6:	fb02 f303 	mul.w	r3, r2, r3
 80167ea:	13db      	asrs	r3, r3, #15
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	4423      	add	r3, r4
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	b21b      	sxth	r3, r3
 80167f4:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80167f6:	f107 0108 	add.w	r1, r7, #8
 80167fa:	f107 0308 	add.w	r3, r7, #8
 80167fe:	697a      	ldr	r2, [r7, #20]
 8016800:	4618      	mov	r0, r3
 8016802:	f009 ff5d 	bl	80206c0 <_lv_area_intersect>
 8016806:	4603      	mov	r3, r0
 8016808:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801680a:	7c3b      	ldrb	r3, [r7, #16]
 801680c:	2b00      	cmp	r3, #0
 801680e:	f000 8081 	beq.w	8016914 <draw_quarter_2+0x3f4>
                q->draw_ctx->clip_area = &quarter_area;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	699b      	ldr	r3, [r3, #24]
 8016816:	f107 0208 	add.w	r2, r7, #8
 801681a:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6998      	ldr	r0, [r3, #24]
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6919      	ldr	r1, [r3, #16]
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	695b      	ldr	r3, [r3, #20]
 8016828:	461a      	mov	r2, r3
 801682a:	f7fd fc11 	bl	8014050 <lv_draw_rect>
        if(q->end_quarter == 2) {
 801682e:	e071      	b.n	8016914 <draw_quarter_2+0x3f4>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	895a      	ldrh	r2, [r3, #10]
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	899b      	ldrh	r3, [r3, #12]
 8016838:	429a      	cmp	r2, r3
 801683a:	d109      	bne.n	8016850 <draw_quarter_2+0x330>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	895b      	ldrh	r3, [r3, #10]
 8016840:	2b02      	cmp	r3, #2
 8016842:	d005      	beq.n	8016850 <draw_quarter_2+0x330>
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	891a      	ldrh	r2, [r3, #8]
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	88db      	ldrh	r3, [r3, #6]
 801684c:	429a      	cmp	r2, r3
 801684e:	d317      	bcc.n	8016880 <draw_quarter_2+0x360>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8016854:	2b00      	cmp	r3, #0
 8016856:	d103      	bne.n	8016860 <draw_quarter_2+0x340>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	899b      	ldrh	r3, [r3, #12]
 801685c:	2b03      	cmp	r3, #3
 801685e:	d00f      	beq.n	8016880 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016864:	2b01      	cmp	r3, #1
 8016866:	d103      	bne.n	8016870 <draw_quarter_2+0x350>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	899b      	ldrh	r3, [r3, #12]
 801686c:	2b03      	cmp	r3, #3
 801686e:	d007      	beq.n	8016880 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8016874:	2b01      	cmp	r3, #1
 8016876:	d14e      	bne.n	8016916 <draw_quarter_2+0x3f6>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	899b      	ldrh	r3, [r3, #12]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d14a      	bne.n	8016916 <draw_quarter_2+0x3f6>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016888:	b29a      	uxth	r2, r3
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016890:	b29b      	uxth	r3, r3
 8016892:	1ad3      	subs	r3, r2, r3
 8016894:	b29b      	uxth	r3, r3
 8016896:	b21b      	sxth	r3, r3
 8016898:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	1ad3      	subs	r3, r2, r3
 80168ae:	b29b      	uxth	r3, r3
 80168b0:	b21b      	sxth	r3, r3
 80168b2:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168bc:	b29b      	uxth	r3, r3
 80168be:	3b01      	subs	r3, #1
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	b21b      	sxth	r3, r3
 80168c4:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	3b01      	subs	r3, #1
 80168d2:	b29b      	uxth	r3, r3
 80168d4:	b21b      	sxth	r3, r3
 80168d6:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80168d8:	f107 0108 	add.w	r1, r7, #8
 80168dc:	f107 0308 	add.w	r3, r7, #8
 80168e0:	697a      	ldr	r2, [r7, #20]
 80168e2:	4618      	mov	r0, r3
 80168e4:	f009 feec 	bl	80206c0 <_lv_area_intersect>
 80168e8:	4603      	mov	r3, r0
 80168ea:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 80168ec:	7cbb      	ldrb	r3, [r7, #18]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d011      	beq.n	8016916 <draw_quarter_2+0x3f6>
            q->draw_ctx->clip_area = &quarter_area;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	699b      	ldr	r3, [r3, #24]
 80168f6:	f107 0208 	add.w	r2, r7, #8
 80168fa:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6998      	ldr	r0, [r3, #24]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6919      	ldr	r1, [r3, #16]
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	695b      	ldr	r3, [r3, #20]
 8016908:	461a      	mov	r2, r3
 801690a:	f7fd fba1 	bl	8014050 <lv_draw_rect>
 801690e:	e002      	b.n	8016916 <draw_quarter_2+0x3f6>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8016910:	bf00      	nop
 8016912:	e000      	b.n	8016916 <draw_quarter_2+0x3f6>
        if(q->end_quarter == 2) {
 8016914:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	699b      	ldr	r3, [r3, #24]
 801691a:	697a      	ldr	r2, [r7, #20]
 801691c:	609a      	str	r2, [r3, #8]
}
 801691e:	bf00      	nop
 8016920:	371c      	adds	r7, #28
 8016922:	46bd      	mov	sp, r7
 8016924:	bd90      	pop	{r4, r7, pc}

08016926 <draw_quarter_3>:

static void draw_quarter_3(quarter_draw_dsc_t * q)
{
 8016926:	b590      	push	{r4, r7, lr}
 8016928:	b087      	sub	sp, #28
 801692a:	af00      	add	r7, sp, #0
 801692c:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	699b      	ldr	r3, [r3, #24]
 8016932:	689b      	ldr	r3, [r3, #8]
 8016934:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	895b      	ldrh	r3, [r3, #10]
 801693a:	2b03      	cmp	r3, #3
 801693c:	f040 8097 	bne.w	8016a6e <draw_quarter_3+0x148>
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	899b      	ldrh	r3, [r3, #12]
 8016944:	2b03      	cmp	r3, #3
 8016946:	f040 8092 	bne.w	8016a6e <draw_quarter_3+0x148>
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	88da      	ldrh	r2, [r3, #6]
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	891b      	ldrh	r3, [r3, #8]
 8016952:	429a      	cmp	r2, r3
 8016954:	f080 808b 	bcs.w	8016a6e <draw_quarter_3+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016960:	b29c      	uxth	r4, r3
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	88db      	ldrh	r3, [r3, #6]
 8016966:	335a      	adds	r3, #90	; 0x5a
 8016968:	b29b      	uxth	r3, r3
 801696a:	b21b      	sxth	r3, r3
 801696c:	4618      	mov	r0, r3
 801696e:	f00b f8ad 	bl	8021acc <lv_trigo_sin>
 8016972:	4603      	mov	r3, r0
 8016974:	461a      	mov	r2, r3
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801697c:	4619      	mov	r1, r3
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016984:	1acb      	subs	r3, r1, r3
 8016986:	fb02 f303 	mul.w	r3, r2, r3
 801698a:	13db      	asrs	r3, r3, #15
 801698c:	b29b      	uxth	r3, r3
 801698e:	4423      	add	r3, r4
 8016990:	b29b      	uxth	r3, r3
 8016992:	b21b      	sxth	r3, r3
 8016994:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801699e:	b29c      	uxth	r4, r3
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	88db      	ldrh	r3, [r3, #6]
 80169a4:	b21b      	sxth	r3, r3
 80169a6:	4618      	mov	r0, r3
 80169a8:	f00b f890 	bl	8021acc <lv_trigo_sin>
 80169ac:	4603      	mov	r3, r0
 80169ae:	461a      	mov	r2, r3
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169b6:	fb02 f303 	mul.w	r3, r2, r3
 80169ba:	13db      	asrs	r3, r3, #15
 80169bc:	b29b      	uxth	r3, r3
 80169be:	4423      	add	r3, r4
 80169c0:	b29b      	uxth	r3, r3
 80169c2:	b21b      	sxth	r3, r3
 80169c4:	817b      	strh	r3, [r7, #10]

        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ce:	b29c      	uxth	r4, r3
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	891b      	ldrh	r3, [r3, #8]
 80169d4:	335a      	adds	r3, #90	; 0x5a
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	b21b      	sxth	r3, r3
 80169da:	4618      	mov	r0, r3
 80169dc:	f00b f876 	bl	8021acc <lv_trigo_sin>
 80169e0:	4603      	mov	r3, r0
 80169e2:	461a      	mov	r2, r3
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169ea:	fb02 f303 	mul.w	r3, r2, r3
 80169ee:	13db      	asrs	r3, r3, #15
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	4423      	add	r3, r4
 80169f4:	b29b      	uxth	r3, r3
 80169f6:	b21b      	sxth	r3, r3
 80169f8:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a02:	b29c      	uxth	r4, r3
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	891b      	ldrh	r3, [r3, #8]
 8016a08:	b21b      	sxth	r3, r3
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f00b f85e 	bl	8021acc <lv_trigo_sin>
 8016a10:	4603      	mov	r3, r0
 8016a12:	461a      	mov	r2, r3
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a1a:	4619      	mov	r1, r3
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016a22:	1acb      	subs	r3, r1, r3
 8016a24:	fb02 f303 	mul.w	r3, r2, r3
 8016a28:	13db      	asrs	r3, r3, #15
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	4423      	add	r3, r4
 8016a2e:	b29b      	uxth	r3, r3
 8016a30:	b21b      	sxth	r3, r3
 8016a32:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016a34:	f107 0108 	add.w	r1, r7, #8
 8016a38:	f107 0308 	add.w	r3, r7, #8
 8016a3c:	697a      	ldr	r2, [r7, #20]
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f009 fe3e 	bl	80206c0 <_lv_area_intersect>
 8016a44:	4603      	mov	r3, r0
 8016a46:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8016a48:	7cfb      	ldrb	r3, [r7, #19]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f000 815a 	beq.w	8016d04 <draw_quarter_3+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	699b      	ldr	r3, [r3, #24]
 8016a54:	f107 0208 	add.w	r2, r7, #8
 8016a58:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6998      	ldr	r0, [r3, #24]
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	6919      	ldr	r1, [r3, #16]
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	695b      	ldr	r3, [r3, #20]
 8016a66:	461a      	mov	r2, r3
 8016a68:	f7fd faf2 	bl	8014050 <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8016a6c:	e14a      	b.n	8016d04 <draw_quarter_3+0x3de>
        }
    }
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	895b      	ldrh	r3, [r3, #10]
 8016a72:	2b03      	cmp	r3, #3
 8016a74:	d004      	beq.n	8016a80 <draw_quarter_3+0x15a>
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	899b      	ldrh	r3, [r3, #12]
 8016a7a:	2b03      	cmp	r3, #3
 8016a7c:	f040 80d6 	bne.w	8016c2c <draw_quarter_3+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 3) {
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	895b      	ldrh	r3, [r3, #10]
 8016a84:	2b03      	cmp	r3, #3
 8016a86:	d167      	bne.n	8016b58 <draw_quarter_3+0x232>
            quarter_area.x2 = q->center->x + q->radius;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a90:	b29a      	uxth	r2, r3
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	4413      	add	r3, r2
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	b21b      	sxth	r3, r3
 8016aa0:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y - 1;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016aaa:	b29b      	uxth	r3, r3
 8016aac:	3b01      	subs	r3, #1
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	b21b      	sxth	r3, r3
 8016ab2:	81fb      	strh	r3, [r7, #14]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016abc:	b29c      	uxth	r4, r3
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	88db      	ldrh	r3, [r3, #6]
 8016ac2:	335a      	adds	r3, #90	; 0x5a
 8016ac4:	b29b      	uxth	r3, r3
 8016ac6:	b21b      	sxth	r3, r3
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f00a ffff 	bl	8021acc <lv_trigo_sin>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016ad8:	4619      	mov	r1, r3
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016ae0:	1acb      	subs	r3, r1, r3
 8016ae2:	fb02 f303 	mul.w	r3, r2, r3
 8016ae6:	13db      	asrs	r3, r3, #15
 8016ae8:	b29b      	uxth	r3, r3
 8016aea:	4423      	add	r3, r4
 8016aec:	b29b      	uxth	r3, r3
 8016aee:	b21b      	sxth	r3, r3
 8016af0:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016afa:	b29c      	uxth	r4, r3
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	88db      	ldrh	r3, [r3, #6]
 8016b00:	b21b      	sxth	r3, r3
 8016b02:	4618      	mov	r0, r3
 8016b04:	f00a ffe2 	bl	8021acc <lv_trigo_sin>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b12:	fb02 f303 	mul.w	r3, r2, r3
 8016b16:	13db      	asrs	r3, r3, #15
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	4423      	add	r3, r4
 8016b1c:	b29b      	uxth	r3, r3
 8016b1e:	b21b      	sxth	r3, r3
 8016b20:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016b22:	f107 0108 	add.w	r1, r7, #8
 8016b26:	f107 0308 	add.w	r3, r7, #8
 8016b2a:	697a      	ldr	r2, [r7, #20]
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f009 fdc7 	bl	80206c0 <_lv_area_intersect>
 8016b32:	4603      	mov	r3, r0
 8016b34:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8016b36:	7c7b      	ldrb	r3, [r7, #17]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d00d      	beq.n	8016b58 <draw_quarter_3+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	699b      	ldr	r3, [r3, #24]
 8016b40:	f107 0208 	add.w	r2, r7, #8
 8016b44:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6998      	ldr	r0, [r3, #24]
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	6919      	ldr	r1, [r3, #16]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	695b      	ldr	r3, [r3, #20]
 8016b52:	461a      	mov	r2, r3
 8016b54:	f7fd fa7c 	bl	8014050 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 3) {
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	899b      	ldrh	r3, [r3, #12]
 8016b5c:	2b03      	cmp	r3, #3
 8016b5e:	f040 80d3 	bne.w	8016d08 <draw_quarter_3+0x3e2>
            quarter_area.x1 = q->center->x;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b6a:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y - q->radius;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016b74:	b29a      	uxth	r2, r3
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b7c:	b29b      	uxth	r3, r3
 8016b7e:	1ad3      	subs	r3, r2, r3
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	b21b      	sxth	r3, r3
 8016b84:	817b      	strh	r3, [r7, #10]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b8e:	b29c      	uxth	r4, r3
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	891b      	ldrh	r3, [r3, #8]
 8016b94:	335a      	adds	r3, #90	; 0x5a
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	b21b      	sxth	r3, r3
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f00a ff96 	bl	8021acc <lv_trigo_sin>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016baa:	fb02 f303 	mul.w	r3, r2, r3
 8016bae:	13db      	asrs	r3, r3, #15
 8016bb0:	b29b      	uxth	r3, r3
 8016bb2:	4423      	add	r3, r4
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	b21b      	sxth	r3, r3
 8016bb8:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016bc2:	b29c      	uxth	r4, r3
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	891b      	ldrh	r3, [r3, #8]
 8016bc8:	b21b      	sxth	r3, r3
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f00a ff7e 	bl	8021acc <lv_trigo_sin>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016bda:	4619      	mov	r1, r3
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016be2:	1acb      	subs	r3, r1, r3
 8016be4:	fb02 f303 	mul.w	r3, r2, r3
 8016be8:	13db      	asrs	r3, r3, #15
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	4423      	add	r3, r4
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	b21b      	sxth	r3, r3
 8016bf2:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016bf4:	f107 0108 	add.w	r1, r7, #8
 8016bf8:	f107 0308 	add.w	r3, r7, #8
 8016bfc:	697a      	ldr	r2, [r7, #20]
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f009 fd5e 	bl	80206c0 <_lv_area_intersect>
 8016c04:	4603      	mov	r3, r0
 8016c06:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8016c08:	7c3b      	ldrb	r3, [r7, #16]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d07c      	beq.n	8016d08 <draw_quarter_3+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	699b      	ldr	r3, [r3, #24]
 8016c12:	f107 0208 	add.w	r2, r7, #8
 8016c16:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	6998      	ldr	r0, [r3, #24]
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	6919      	ldr	r1, [r3, #16]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	695b      	ldr	r3, [r3, #20]
 8016c24:	461a      	mov	r2, r3
 8016c26:	f7fd fa13 	bl	8014050 <lv_draw_rect>
        if(q->end_quarter == 3) {
 8016c2a:	e06d      	b.n	8016d08 <draw_quarter_3+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	895a      	ldrh	r2, [r3, #10]
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	899b      	ldrh	r3, [r3, #12]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d109      	bne.n	8016c4c <draw_quarter_3+0x326>
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	895b      	ldrh	r3, [r3, #10]
 8016c3c:	2b03      	cmp	r3, #3
 8016c3e:	d005      	beq.n	8016c4c <draw_quarter_3+0x326>
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	891a      	ldrh	r2, [r3, #8]
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	88db      	ldrh	r3, [r3, #6]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d317      	bcc.n	8016c7c <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8016c50:	2b02      	cmp	r3, #2
 8016c52:	d103      	bne.n	8016c5c <draw_quarter_3+0x336>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	899b      	ldrh	r3, [r3, #12]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d00f      	beq.n	8016c7c <draw_quarter_3+0x356>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016c60:	2b01      	cmp	r3, #1
 8016c62:	d103      	bne.n	8016c6c <draw_quarter_3+0x346>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	899b      	ldrh	r3, [r3, #12]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d007      	beq.n	8016c7c <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016c70:	2b02      	cmp	r3, #2
 8016c72:	d14a      	bne.n	8016d0a <draw_quarter_3+0x3e4>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	899b      	ldrh	r3, [r3, #12]
 8016c78:	2b01      	cmp	r3, #1
 8016c7a:	d146      	bne.n	8016d0a <draw_quarter_3+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c84:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c8e:	b29a      	uxth	r2, r3
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c96:	b29b      	uxth	r3, r3
 8016c98:	1ad3      	subs	r3, r2, r3
 8016c9a:	b29b      	uxth	r3, r3
 8016c9c:	b21b      	sxth	r3, r3
 8016c9e:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ca8:	b29a      	uxth	r2, r3
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	4413      	add	r3, r2
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	b21b      	sxth	r3, r3
 8016cb8:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016cc2:	b29b      	uxth	r3, r3
 8016cc4:	3b01      	subs	r3, #1
 8016cc6:	b29b      	uxth	r3, r3
 8016cc8:	b21b      	sxth	r3, r3
 8016cca:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016ccc:	f107 0108 	add.w	r1, r7, #8
 8016cd0:	f107 0308 	add.w	r3, r7, #8
 8016cd4:	697a      	ldr	r2, [r7, #20]
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f009 fcf2 	bl	80206c0 <_lv_area_intersect>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8016ce0:	7cbb      	ldrb	r3, [r7, #18]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d011      	beq.n	8016d0a <draw_quarter_3+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	699b      	ldr	r3, [r3, #24]
 8016cea:	f107 0208 	add.w	r2, r7, #8
 8016cee:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	6998      	ldr	r0, [r3, #24]
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	6919      	ldr	r1, [r3, #16]
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	695b      	ldr	r3, [r3, #20]
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	f7fd f9a7 	bl	8014050 <lv_draw_rect>
 8016d02:	e002      	b.n	8016d0a <draw_quarter_3+0x3e4>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8016d04:	bf00      	nop
 8016d06:	e000      	b.n	8016d0a <draw_quarter_3+0x3e4>
        if(q->end_quarter == 3) {
 8016d08:	bf00      	nop
        }
    }

    q->draw_ctx->clip_area = clip_area_ori;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	699b      	ldr	r3, [r3, #24]
 8016d0e:	697a      	ldr	r2, [r7, #20]
 8016d10:	609a      	str	r2, [r3, #8]
}
 8016d12:	bf00      	nop
 8016d14:	371c      	adds	r7, #28
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bd90      	pop	{r4, r7, pc}

08016d1a <get_rounded_area>:

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 8016d1a:	b590      	push	{r4, r7, lr}
 8016d1c:	b08b      	sub	sp, #44	; 0x2c
 8016d1e:	af00      	add	r7, sp, #0
 8016d20:	607b      	str	r3, [r7, #4]
 8016d22:	4603      	mov	r3, r0
 8016d24:	81fb      	strh	r3, [r7, #14]
 8016d26:	460b      	mov	r3, r1
 8016d28:	81bb      	strh	r3, [r7, #12]
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	72fb      	strb	r3, [r7, #11]
    const uint8_t ps = 8;
 8016d2e:	2308      	movs	r3, #8
 8016d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t pa = 127;
 8016d34:	237f      	movs	r3, #127	; 0x7f
 8016d36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    int32_t thick_half = thickness / 2;
 8016d3a:	7afb      	ldrb	r3, [r7, #11]
 8016d3c:	085b      	lsrs	r3, r3, #1
 8016d3e:	b2db      	uxtb	r3, r3
 8016d40:	623b      	str	r3, [r7, #32]
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 8016d42:	7afb      	ldrb	r3, [r7, #11]
 8016d44:	f003 0301 	and.w	r3, r3, #1
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	bf0c      	ite	eq
 8016d4c:	2301      	moveq	r3, #1
 8016d4e:	2300      	movne	r3, #0
 8016d50:	b2db      	uxtb	r3, r3
 8016d52:	77fb      	strb	r3, [r7, #31]

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8016d54:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016d58:	6a3b      	ldr	r3, [r7, #32]
 8016d5a:	1ad4      	subs	r4, r2, r3
 8016d5c:	89fb      	ldrh	r3, [r7, #14]
 8016d5e:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8016d62:	b29b      	uxth	r3, r3
 8016d64:	b21b      	sxth	r3, r3
 8016d66:	4618      	mov	r0, r3
 8016d68:	f00a feb0 	bl	8021acc <lv_trigo_sin>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	fb03 f204 	mul.w	r2, r3, r4
 8016d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d76:	f1c3 030f 	rsb	r3, r3, #15
 8016d7a:	fa42 f303 	asr.w	r3, r2, r3
 8016d7e:	61bb      	str	r3, [r7, #24]
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 8016d80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016d84:	6a3b      	ldr	r3, [r7, #32]
 8016d86:	1ad4      	subs	r4, r2, r3
 8016d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f00a fe9d 	bl	8021acc <lv_trigo_sin>
 8016d92:	4603      	mov	r3, r0
 8016d94:	fb03 f204 	mul.w	r2, r3, r4
 8016d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d9c:	f1c3 030f 	rsb	r3, r3, #15
 8016da0:	fa42 f303 	asr.w	r3, r2, r3
 8016da4:	617b      	str	r3, [r7, #20]

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 8016da6:	69bb      	ldr	r3, [r7, #24]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	dd1f      	ble.n	8016dec <get_rounded_area+0xd2>
        cir_x = (cir_x - pa) >> ps;
 8016dac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016db0:	69ba      	ldr	r2, [r7, #24]
 8016db2:	1ad2      	subs	r2, r2, r3
 8016db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016db8:	fa42 f303 	asr.w	r3, r2, r3
 8016dbc:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half + thick_corr;
 8016dbe:	69bb      	ldr	r3, [r7, #24]
 8016dc0:	b29a      	uxth	r2, r3
 8016dc2:	6a3b      	ldr	r3, [r7, #32]
 8016dc4:	b29b      	uxth	r3, r3
 8016dc6:	1ad3      	subs	r3, r2, r3
 8016dc8:	b29a      	uxth	r2, r3
 8016dca:	7ffb      	ldrb	r3, [r7, #31]
 8016dcc:	b29b      	uxth	r3, r3
 8016dce:	4413      	add	r3, r2
 8016dd0:	b29b      	uxth	r3, r3
 8016dd2:	b21a      	sxth	r2, r3
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half;
 8016dd8:	69bb      	ldr	r3, [r7, #24]
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	6a3b      	ldr	r3, [r7, #32]
 8016dde:	b29b      	uxth	r3, r3
 8016de0:	4413      	add	r3, r2
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	b21a      	sxth	r2, r3
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	809a      	strh	r2, [r3, #4]
 8016dea:	e01e      	b.n	8016e2a <get_rounded_area+0x110>
    }
    else {
        cir_x = (cir_x + pa) >> ps;
 8016dec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016df0:	69bb      	ldr	r3, [r7, #24]
 8016df2:	441a      	add	r2, r3
 8016df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016df8:	fa42 f303 	asr.w	r3, r2, r3
 8016dfc:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half;
 8016dfe:	69bb      	ldr	r3, [r7, #24]
 8016e00:	b29a      	uxth	r2, r3
 8016e02:	6a3b      	ldr	r3, [r7, #32]
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	1ad3      	subs	r3, r2, r3
 8016e08:	b29b      	uxth	r3, r3
 8016e0a:	b21a      	sxth	r2, r3
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 8016e10:	69bb      	ldr	r3, [r7, #24]
 8016e12:	b29a      	uxth	r2, r3
 8016e14:	6a3b      	ldr	r3, [r7, #32]
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	4413      	add	r3, r2
 8016e1a:	b29a      	uxth	r2, r3
 8016e1c:	7ffb      	ldrb	r3, [r7, #31]
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	1ad3      	subs	r3, r2, r3
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	b21a      	sxth	r2, r3
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	809a      	strh	r2, [r3, #4]
    }

    if(cir_y > 0) {
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	dd1f      	ble.n	8016e70 <get_rounded_area+0x156>
        cir_y = (cir_y - pa) >> ps;
 8016e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e34:	697a      	ldr	r2, [r7, #20]
 8016e36:	1ad2      	subs	r2, r2, r3
 8016e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e3c:	fa42 f303 	asr.w	r3, r2, r3
 8016e40:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half + thick_corr;
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	b29a      	uxth	r2, r3
 8016e46:	6a3b      	ldr	r3, [r7, #32]
 8016e48:	b29b      	uxth	r3, r3
 8016e4a:	1ad3      	subs	r3, r2, r3
 8016e4c:	b29a      	uxth	r2, r3
 8016e4e:	7ffb      	ldrb	r3, [r7, #31]
 8016e50:	b29b      	uxth	r3, r3
 8016e52:	4413      	add	r3, r2
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	b21a      	sxth	r2, r3
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half;
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	6a3b      	ldr	r3, [r7, #32]
 8016e62:	b29b      	uxth	r3, r3
 8016e64:	4413      	add	r3, r2
 8016e66:	b29b      	uxth	r3, r3
 8016e68:	b21a      	sxth	r2, r3
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	80da      	strh	r2, [r3, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 8016e6e:	e01e      	b.n	8016eae <get_rounded_area+0x194>
        cir_y = (cir_y + pa) >> ps;
 8016e70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016e74:	697b      	ldr	r3, [r7, #20]
 8016e76:	441a      	add	r2, r3
 8016e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e7c:	fa42 f303 	asr.w	r3, r2, r3
 8016e80:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half;
 8016e82:	697b      	ldr	r3, [r7, #20]
 8016e84:	b29a      	uxth	r2, r3
 8016e86:	6a3b      	ldr	r3, [r7, #32]
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	1ad3      	subs	r3, r2, r3
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	b21a      	sxth	r2, r3
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8016e94:	697b      	ldr	r3, [r7, #20]
 8016e96:	b29a      	uxth	r2, r3
 8016e98:	6a3b      	ldr	r3, [r7, #32]
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	4413      	add	r3, r2
 8016e9e:	b29a      	uxth	r2, r3
 8016ea0:	7ffb      	ldrb	r3, [r7, #31]
 8016ea2:	b29b      	uxth	r3, r3
 8016ea4:	1ad3      	subs	r3, r2, r3
 8016ea6:	b29b      	uxth	r3, r3
 8016ea8:	b21a      	sxth	r2, r3
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	80da      	strh	r2, [r3, #6]
}
 8016eae:	bf00      	nop
 8016eb0:	372c      	adds	r7, #44	; 0x2c
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd90      	pop	{r4, r7, pc}

08016eb6 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8016eb6:	b480      	push	{r7}
 8016eb8:	b085      	sub	sp, #20
 8016eba:	af00      	add	r7, sp, #0
 8016ebc:	7138      	strb	r0, [r7, #4]
 8016ebe:	7039      	strb	r1, [r7, #0]
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 8016ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	da01      	bge.n	8016ed0 <lv_color_mix+0x1a>
 8016ecc:	793b      	ldrb	r3, [r7, #4]
 8016ece:	e000      	b.n	8016ed2 <lv_color_mix+0x1c>
 8016ed0:	783b      	ldrb	r3, [r7, #0]
 8016ed2:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8016ed4:	7b3b      	ldrb	r3, [r7, #12]
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3714      	adds	r7, #20
 8016eda:	46bd      	mov	sp, r7
 8016edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee0:	4770      	bx	lr

08016ee2 <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 8016ee2:	b480      	push	{r7}
 8016ee4:	b083      	sub	sp, #12
 8016ee6:	af00      	add	r7, sp, #0
 8016ee8:	7138      	strb	r0, [r7, #4]
 8016eea:	460b      	mov	r3, r1
 8016eec:	603a      	str	r2, [r7, #0]
 8016eee:	71fb      	strb	r3, [r7, #7]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
#else
    (void) mix;
    /*Pre-multiplication can't be used with 1 bpp*/
    out[0] = LV_COLOR_GET_R(c);
 8016ef0:	793b      	ldrb	r3, [r7, #4]
 8016ef2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016ef6:	b2db      	uxtb	r3, r3
 8016ef8:	b29a      	uxth	r2, r3
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 8016efe:	793b      	ldrb	r3, [r7, #4]
 8016f00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016f04:	b2da      	uxtb	r2, r3
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	3302      	adds	r3, #2
 8016f0a:	b292      	uxth	r2, r2
 8016f0c:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 8016f0e:	793b      	ldrb	r3, [r7, #4]
 8016f10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016f14:	b2da      	uxtb	r2, r3
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	3304      	adds	r3, #4
 8016f1a:	b292      	uxth	r2, r2
 8016f1c:	801a      	strh	r2, [r3, #0]
#endif

}
 8016f1e:	bf00      	nop
 8016f20:	370c      	adds	r7, #12
 8016f22:	46bd      	mov	sp, r7
 8016f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f28:	4770      	bx	lr

08016f2a <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 8016f2a:	b480      	push	{r7}
 8016f2c:	b085      	sub	sp, #20
 8016f2e:	af00      	add	r7, sp, #0
 8016f30:	6078      	str	r0, [r7, #4]
 8016f32:	7039      	strb	r1, [r7, #0]
 8016f34:	4613      	mov	r3, r2
 8016f36:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    /*Restore color1*/
    lv_color_t c1;
    LV_COLOR_SET_R(c1, premult_c1[0]);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	881b      	ldrh	r3, [r3, #0]
 8016f3c:	f003 0301 	and.w	r3, r3, #1
 8016f40:	b2da      	uxtb	r2, r3
 8016f42:	7a3b      	ldrb	r3, [r7, #8]
 8016f44:	f362 0300 	bfi	r3, r2, #0, #1
 8016f48:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	3302      	adds	r3, #2
 8016f4e:	881b      	ldrh	r3, [r3, #0]
 8016f50:	f003 0301 	and.w	r3, r3, #1
 8016f54:	b2da      	uxtb	r2, r3
 8016f56:	7a3b      	ldrb	r3, [r7, #8]
 8016f58:	f362 0300 	bfi	r3, r2, #0, #1
 8016f5c:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	3304      	adds	r3, #4
 8016f62:	881b      	ldrh	r3, [r3, #0]
 8016f64:	f003 0301 	and.w	r3, r3, #1
 8016f68:	b2da      	uxtb	r2, r3
 8016f6a:	7a3b      	ldrb	r3, [r7, #8]
 8016f6c:	f362 0300 	bfi	r3, r2, #0, #1
 8016f70:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8016f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	da01      	bge.n	8016f7e <lv_color_mix_premult+0x54>
 8016f7a:	783b      	ldrb	r3, [r7, #0]
 8016f7c:	e000      	b.n	8016f80 <lv_color_mix_premult+0x56>
 8016f7e:	7a3b      	ldrb	r3, [r7, #8]
 8016f80:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8016f82:	7b3b      	ldrb	r3, [r7, #12]
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	3714      	adds	r7, #20
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8e:	4770      	bx	lr

08016f90 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b083      	sub	sp, #12
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	4603      	mov	r3, r0
 8016f98:	71fb      	strb	r3, [r7, #7]
 8016f9a:	460b      	mov	r3, r1
 8016f9c:	71bb      	strb	r3, [r7, #6]
 8016f9e:	4613      	mov	r3, r2
 8016fa0:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8016fa2:	797b      	ldrb	r3, [r7, #5]
 8016fa4:	09db      	lsrs	r3, r3, #7
 8016fa6:	b2da      	uxtb	r2, r3
 8016fa8:	79bb      	ldrb	r3, [r7, #6]
 8016faa:	09db      	lsrs	r3, r3, #7
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	4313      	orrs	r3, r2
 8016fb0:	b2da      	uxtb	r2, r3
 8016fb2:	79fb      	ldrb	r3, [r7, #7]
 8016fb4:	09db      	lsrs	r3, r3, #7
 8016fb6:	b2db      	uxtb	r3, r3
 8016fb8:	4313      	orrs	r3, r2
 8016fba:	b2db      	uxtb	r3, r3
}
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	370c      	adds	r7, #12
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc6:	4770      	bx	lr

08016fc8 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8016fcc:	2200      	movs	r2, #0
 8016fce:	2100      	movs	r1, #0
 8016fd0:	2000      	movs	r0, #0
 8016fd2:	f7ff ffdd 	bl	8016f90 <lv_color_make>
 8016fd6:	4603      	mov	r3, r0
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <lv_area_get_width>:
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b083      	sub	sp, #12
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016fea:	b29a      	uxth	r2, r3
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	1ad3      	subs	r3, r2, r3
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	b21b      	sxth	r3, r3
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	370c      	adds	r7, #12
 8017002:	46bd      	mov	sp, r7
 8017004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017008:	4770      	bx	lr

0801700a <lv_area_get_height>:
{
 801700a:	b480      	push	{r7}
 801700c:	b083      	sub	sp, #12
 801700e:	af00      	add	r7, sp, #0
 8017010:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017018:	b29a      	uxth	r2, r3
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017020:	b29b      	uxth	r3, r3
 8017022:	1ad3      	subs	r3, r2, r3
 8017024:	b29b      	uxth	r3, r3
 8017026:	3301      	adds	r3, #1
 8017028:	b29b      	uxth	r3, r3
 801702a:	b21b      	sxth	r3, r3
}
 801702c:	4618      	mov	r0, r3
 801702e:	370c      	adds	r7, #12
 8017030:	46bd      	mov	sp, r7
 8017032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017036:	4770      	bx	lr

08017038 <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b084      	sub	sp, #16
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
 8017040:	6039      	str	r1, [r7, #0]
    /*Do not draw transparent things*/
    if(dsc->opa <= LV_OPA_MIN) return;
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	7e1b      	ldrb	r3, [r3, #24]
 8017046:	2b02      	cmp	r3, #2
 8017048:	d91c      	bls.n	8017084 <lv_draw_sw_blend+0x4c>

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	6819      	ldr	r1, [r3, #0]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	689a      	ldr	r2, [r3, #8]
 8017052:	f107 0308 	add.w	r3, r7, #8
 8017056:	4618      	mov	r0, r3
 8017058:	f009 fb32 	bl	80206c0 <_lv_area_intersect>
 801705c:	4603      	mov	r3, r0
 801705e:	f083 0301 	eor.w	r3, r3, #1
 8017062:	b2db      	uxtb	r3, r3
 8017064:	2b00      	cmp	r3, #0
 8017066:	d10f      	bne.n	8017088 <lv_draw_sw_blend+0x50>

    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801706c:	2b00      	cmp	r3, #0
 801706e:	d003      	beq.n	8017078 <lv_draw_sw_blend+0x40>
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	4798      	blx	r3

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801707c:	6839      	ldr	r1, [r7, #0]
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	4798      	blx	r3
 8017082:	e002      	b.n	801708a <lv_draw_sw_blend+0x52>
    if(dsc->opa <= LV_OPA_MIN) return;
 8017084:	bf00      	nop
 8017086:	e000      	b.n	801708a <lv_draw_sw_blend+0x52>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8017088:	bf00      	nop
}
 801708a:	3710      	adds	r7, #16
 801708c:	46bd      	mov	sp, r7
 801708e:	bd80      	pop	{r7, pc}

08017090 <lv_draw_sw_blend_basic>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8017090:	b590      	push	{r4, r7, lr}
 8017092:	b095      	sub	sp, #84	; 0x54
 8017094:	af06      	add	r7, sp, #24
 8017096:	6078      	str	r0, [r7, #4]
 8017098:	6039      	str	r1, [r7, #0]
    lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	68db      	ldr	r3, [r3, #12]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d101      	bne.n	80170a6 <lv_draw_sw_blend_basic+0x16>
 80170a2:	2300      	movs	r3, #0
 80170a4:	637b      	str	r3, [r7, #52]	; 0x34
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	68db      	ldr	r3, [r3, #12]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d004      	beq.n	80170b8 <lv_draw_sw_blend_basic+0x28>
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	7c1b      	ldrb	r3, [r3, #16]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	f000 8191 	beq.w	80173da <lv_draw_sw_blend_basic+0x34a>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	7c1b      	ldrb	r3, [r3, #16]
 80170bc:	2b01      	cmp	r3, #1
 80170be:	d102      	bne.n	80170c6 <lv_draw_sw_blend_basic+0x36>
 80170c0:	2300      	movs	r3, #0
 80170c2:	637b      	str	r3, [r7, #52]	; 0x34
 80170c4:	e002      	b.n	80170cc <lv_draw_sw_blend_basic+0x3c>
    else mask = dsc->mask_buf;
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	68db      	ldr	r3, [r3, #12]
 80170ca:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	685b      	ldr	r3, [r3, #4]
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7ff ff83 	bl	8016fdc <lv_area_get_width>
 80170d6:	4603      	mov	r3, r0
 80170d8:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	6819      	ldr	r1, [r3, #0]
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	689a      	ldr	r2, [r3, #8]
 80170e2:	f107 030c 	add.w	r3, r7, #12
 80170e6:	4618      	mov	r0, r3
 80170e8:	f009 faea 	bl	80206c0 <_lv_area_intersect>
 80170ec:	4603      	mov	r3, r0
 80170ee:	f083 0301 	eor.w	r3, r3, #1
 80170f2:	b2db      	uxtb	r3, r3
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	f040 8172 	bne.w	80173de <lv_draw_sw_blend_basic+0x34e>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80170fa:	f7f7 fac3 	bl	800e684 <_lv_refr_get_disp_refreshing>
 80170fe:	61f8      	str	r0, [r7, #28]
    lv_color_t * dest_buf = draw_ctx->buf;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	633b      	str	r3, [r7, #48]	; 0x30
    if(disp->driver->set_px_cb == NULL) {
 8017106:	69fb      	ldr	r3, [r7, #28]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	69db      	ldr	r3, [r3, #28]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d143      	bne.n	8017198 <lv_draw_sw_blend_basic+0x108>
        if(disp->driver->screen_transp == 0) {
 8017110:	69fb      	ldr	r3, [r7, #28]
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	7c1b      	ldrb	r3, [r3, #16]
 8017116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801711a:	b2db      	uxtb	r3, r3
 801711c:	2b00      	cmp	r3, #0
 801711e:	d119      	bne.n	8017154 <lv_draw_sw_blend_basic+0xc4>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8017120:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017124:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017128:	4611      	mov	r1, r2
 801712a:	687a      	ldr	r2, [r7, #4]
 801712c:	6852      	ldr	r2, [r2, #4]
 801712e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017132:	1a8a      	subs	r2, r1, r2
 8017134:	fb03 f202 	mul.w	r2, r3, r2
 8017138:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801713c:	4619      	mov	r1, r3
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017146:	1acb      	subs	r3, r1, r3
 8017148:	4413      	add	r3, r2
 801714a:	461a      	mov	r2, r3
 801714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801714e:	4413      	add	r3, r2
 8017150:	633b      	str	r3, [r7, #48]	; 0x30
 8017152:	e021      	b.n	8017198 <lv_draw_sw_blend_basic+0x108>
        }
        else {
            /*With LV_COLOR_DEPTH 16 it means ARGB8565 (3 bytes format)*/
            uint8_t * dest_buf8 = (uint8_t *) dest_buf;
 8017154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017156:	61bb      	str	r3, [r7, #24]
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8017158:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801715c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017160:	4611      	mov	r1, r2
 8017162:	687a      	ldr	r2, [r7, #4]
 8017164:	6852      	ldr	r2, [r2, #4]
 8017166:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801716a:	1a8a      	subs	r2, r1, r2
 801716c:	fb02 f303 	mul.w	r3, r2, r3
 8017170:	005b      	lsls	r3, r3, #1
 8017172:	461a      	mov	r2, r3
 8017174:	69bb      	ldr	r3, [r7, #24]
 8017176:	4413      	add	r3, r2
 8017178:	61bb      	str	r3, [r7, #24]
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801717a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801717e:	461a      	mov	r2, r3
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	685b      	ldr	r3, [r3, #4]
 8017184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017188:	1ad3      	subs	r3, r2, r3
 801718a:	005b      	lsls	r3, r3, #1
 801718c:	461a      	mov	r2, r3
 801718e:	69bb      	ldr	r3, [r7, #24]
 8017190:	4413      	add	r3, r2
 8017192:	61bb      	str	r3, [r7, #24]
            dest_buf = (lv_color_t *)dest_buf8;
 8017194:	69bb      	ldr	r3, [r7, #24]
 8017196:	633b      	str	r3, [r7, #48]	; 0x30
        }
    }

    const lv_color_t * src_buf = dsc->src_buf;
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t src_stride;
    if(src_buf) {
 801719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d020      	beq.n	80171e6 <lv_draw_sw_blend_basic+0x156>
        src_stride = lv_area_get_width(dsc->blend_area);
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7ff ff17 	bl	8016fdc <lv_area_get_width>
 80171ae:	4603      	mov	r3, r0
 80171b0:	857b      	strh	r3, [r7, #42]	; 0x2a
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 80171b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80171b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80171ba:	4611      	mov	r1, r2
 80171bc:	683a      	ldr	r2, [r7, #0]
 80171be:	6812      	ldr	r2, [r2, #0]
 80171c0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80171c4:	1a8a      	subs	r2, r1, r2
 80171c6:	fb03 f202 	mul.w	r2, r3, r2
 80171ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80171ce:	4619      	mov	r1, r3
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171d8:	1acb      	subs	r3, r1, r3
 80171da:	4413      	add	r3, r2
 80171dc:	461a      	mov	r2, r3
 80171de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e0:	4413      	add	r3, r2
 80171e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171e4:	e001      	b.n	80171ea <lv_draw_sw_blend_basic+0x15a>
    }
    else {
        src_stride = 0;
 80171e6:	2300      	movs	r3, #0
 80171e8:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    lv_coord_t mask_stride;
    if(mask) {
 80171ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d047      	beq.n	8017280 <lv_draw_sw_blend_basic+0x1f0>
        /*Round the values in the mask if anti-aliasing is disabled*/
        if(disp->driver->antialiasing == 0) {
 80171f0:	69fb      	ldr	r3, [r7, #28]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	7c1b      	ldrb	r3, [r3, #16]
 80171f6:	f003 0308 	and.w	r3, r3, #8
 80171fa:	b2db      	uxtb	r3, r3
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d11e      	bne.n	801723e <lv_draw_sw_blend_basic+0x1ae>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 8017200:	683b      	ldr	r3, [r7, #0]
 8017202:	695b      	ldr	r3, [r3, #20]
 8017204:	4618      	mov	r0, r3
 8017206:	f009 f9ce 	bl	80205a6 <lv_area_get_size>
 801720a:	4603      	mov	r3, r0
 801720c:	617b      	str	r3, [r7, #20]
            int32_t i;
            for(i = 0; i < mask_size; i++) {
 801720e:	2300      	movs	r3, #0
 8017210:	627b      	str	r3, [r7, #36]	; 0x24
 8017212:	e010      	b.n	8017236 <lv_draw_sw_blend_basic+0x1a6>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8017214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017218:	4413      	add	r3, r2
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	2b80      	cmp	r3, #128	; 0x80
 801721e:	d901      	bls.n	8017224 <lv_draw_sw_blend_basic+0x194>
 8017220:	21ff      	movs	r1, #255	; 0xff
 8017222:	e000      	b.n	8017226 <lv_draw_sw_blend_basic+0x196>
 8017224:	2100      	movs	r1, #0
 8017226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801722a:	4413      	add	r3, r2
 801722c:	460a      	mov	r2, r1
 801722e:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 8017230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017232:	3301      	adds	r3, #1
 8017234:	627b      	str	r3, [r7, #36]	; 0x24
 8017236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	429a      	cmp	r2, r3
 801723c:	dbea      	blt.n	8017214 <lv_draw_sw_blend_basic+0x184>
            }
        }

        mask_stride = lv_area_get_width(dsc->mask_area);
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	695b      	ldr	r3, [r3, #20]
 8017242:	4618      	mov	r0, r3
 8017244:	f7ff feca 	bl	8016fdc <lv_area_get_width>
 8017248:	4603      	mov	r3, r0
 801724a:	853b      	strh	r3, [r7, #40]	; 0x28
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 801724c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8017250:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017254:	4611      	mov	r1, r2
 8017256:	683a      	ldr	r2, [r7, #0]
 8017258:	6952      	ldr	r2, [r2, #20]
 801725a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801725e:	1a8a      	subs	r2, r1, r2
 8017260:	fb03 f202 	mul.w	r2, r3, r2
 8017264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017268:	4619      	mov	r1, r3
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	695b      	ldr	r3, [r3, #20]
 801726e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017272:	1acb      	subs	r3, r1, r3
 8017274:	4413      	add	r3, r2
 8017276:	461a      	mov	r2, r3
 8017278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801727a:	4413      	add	r3, r2
 801727c:	637b      	str	r3, [r7, #52]	; 0x34
 801727e:	e001      	b.n	8017284 <lv_draw_sw_blend_basic+0x1f4>

    }
    else {
        mask_stride = 0;
 8017280:	2300      	movs	r3, #0
 8017282:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	685b      	ldr	r3, [r3, #4]
 8017288:	f9b3 3000 	ldrsh.w	r3, [r3]
 801728c:	b29b      	uxth	r3, r3
 801728e:	425b      	negs	r3, r3
 8017290:	b29b      	uxth	r3, r3
 8017292:	b219      	sxth	r1, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801729c:	b29b      	uxth	r3, r3
 801729e:	425b      	negs	r3, r3
 80172a0:	b29b      	uxth	r3, r3
 80172a2:	b21a      	sxth	r2, r3
 80172a4:	f107 030c 	add.w	r3, r7, #12
 80172a8:	4618      	mov	r0, r3
 80172aa:	f009 f9d3 	bl	8020654 <lv_area_move>


    if(disp->driver->set_px_cb) {
 80172ae:	69fb      	ldr	r3, [r7, #28]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	69db      	ldr	r3, [r3, #28]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d02c      	beq.n	8017312 <lv_draw_sw_blend_basic+0x282>
        if(dsc->src_buf == NULL) {
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	685b      	ldr	r3, [r3, #4]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d113      	bne.n	80172e8 <lv_draw_sw_blend_basic+0x258>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	7e1a      	ldrb	r2, [r3, #24]
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 80172ca:	f107 000c 	add.w	r0, r7, #12
 80172ce:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80172d2:	9102      	str	r1, [sp, #8]
 80172d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80172d6:	9101      	str	r1, [sp, #4]
 80172d8:	9200      	str	r2, [sp, #0]
 80172da:	7a1b      	ldrb	r3, [r3, #8]
 80172dc:	4622      	mov	r2, r4
 80172de:	4601      	mov	r1, r0
 80172e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172e2:	f000 f880 	bl	80173e6 <fill_set_px>
 80172e6:	e07b      	b.n	80173e0 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	7e1b      	ldrb	r3, [r3, #24]
 80172ec:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 80172f0:	f107 010c 	add.w	r1, r7, #12
 80172f4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80172f8:	9203      	str	r2, [sp, #12]
 80172fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80172fc:	9202      	str	r2, [sp, #8]
 80172fe:	9301      	str	r3, [sp, #4]
 8017300:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017304:	9300      	str	r3, [sp, #0]
 8017306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017308:	4602      	mov	r2, r0
 801730a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801730c:	f000 fc02 	bl	8017b14 <map_set_px>
 8017310:	e066      	b.n	80173e0 <lv_draw_sw_blend_basic+0x350>
        else {
            map_argb(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
        }
    }
#endif
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8017312:	683b      	ldr	r3, [r7, #0]
 8017314:	7e5b      	ldrb	r3, [r3, #25]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d12c      	bne.n	8017374 <lv_draw_sw_blend_basic+0x2e4>
        if(dsc->src_buf == NULL) {
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	685b      	ldr	r3, [r3, #4]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d113      	bne.n	801734a <lv_draw_sw_blend_basic+0x2ba>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	7e1a      	ldrb	r2, [r3, #24]
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 801732c:	f107 000c 	add.w	r0, r7, #12
 8017330:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8017334:	9102      	str	r1, [sp, #8]
 8017336:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017338:	9101      	str	r1, [sp, #4]
 801733a:	9200      	str	r2, [sp, #0]
 801733c:	7a1b      	ldrb	r3, [r3, #8]
 801733e:	4622      	mov	r2, r4
 8017340:	4601      	mov	r1, r0
 8017342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017344:	f000 f8ec 	bl	8017520 <fill_normal>
 8017348:	e04a      	b.n	80173e0 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	7e1b      	ldrb	r3, [r3, #24]
 801734e:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8017352:	f107 010c 	add.w	r1, r7, #12
 8017356:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 801735a:	9203      	str	r2, [sp, #12]
 801735c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801735e:	9202      	str	r2, [sp, #8]
 8017360:	9301      	str	r3, [sp, #4]
 8017362:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017366:	9300      	str	r3, [sp, #0]
 8017368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736a:	4602      	mov	r2, r0
 801736c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801736e:	f000 fc83 	bl	8017c78 <map_normal>
 8017372:	e035      	b.n	80173e0 <lv_draw_sw_blend_basic+0x350>
        }
    }
    else {
#if LV_DRAW_COMPLEX
        if(dsc->src_buf == NULL) {
 8017374:	683b      	ldr	r3, [r7, #0]
 8017376:	685b      	ldr	r3, [r3, #4]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d116      	bne.n	80173aa <lv_draw_sw_blend_basic+0x31a>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 801737c:	683b      	ldr	r3, [r7, #0]
 801737e:	7e1a      	ldrb	r2, [r3, #24]
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	7e59      	ldrb	r1, [r3, #25]
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 801738a:	f107 000c 	add.w	r0, r7, #12
 801738e:	9103      	str	r1, [sp, #12]
 8017390:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8017394:	9102      	str	r1, [sp, #8]
 8017396:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017398:	9101      	str	r1, [sp, #4]
 801739a:	9200      	str	r2, [sp, #0]
 801739c:	7a1b      	ldrb	r3, [r3, #8]
 801739e:	4622      	mov	r2, r4
 80173a0:	4601      	mov	r1, r0
 80173a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173a4:	f000 fabc 	bl	8017920 <fill_blended>
 80173a8:	e01a      	b.n	80173e0 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	7e1b      	ldrb	r3, [r3, #24]
 80173ae:	683a      	ldr	r2, [r7, #0]
 80173b0:	7e52      	ldrb	r2, [r2, #25]
 80173b2:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 80173b6:	f107 010c 	add.w	r1, r7, #12
 80173ba:	9204      	str	r2, [sp, #16]
 80173bc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80173c0:	9203      	str	r2, [sp, #12]
 80173c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80173c4:	9202      	str	r2, [sp, #8]
 80173c6:	9301      	str	r3, [sp, #4]
 80173c8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80173cc:	9300      	str	r3, [sp, #0]
 80173ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d0:	4602      	mov	r2, r0
 80173d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173d4:	f000 fe78 	bl	80180c8 <map_blended>
 80173d8:	e002      	b.n	80173e0 <lv_draw_sw_blend_basic+0x350>
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80173da:	bf00      	nop
 80173dc:	e000      	b.n	80173e0 <lv_draw_sw_blend_basic+0x350>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80173de:	bf00      	nop
        }
#endif
    }
}
 80173e0:	373c      	adds	r7, #60	; 0x3c
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd90      	pop	{r4, r7, pc}

080173e6 <fill_set_px>:
 *   STATIC FUNCTIONS
 **********************/

static void fill_set_px(lv_color_t * dest_buf, const lv_area_t * blend_area, lv_coord_t dest_stride,
                        lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stide)
{
 80173e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173e8:	b08f      	sub	sp, #60	; 0x3c
 80173ea:	af04      	add	r7, sp, #16
 80173ec:	60f8      	str	r0, [r7, #12]
 80173ee:	60b9      	str	r1, [r7, #8]
 80173f0:	713b      	strb	r3, [r7, #4]
 80173f2:	4613      	mov	r3, r2
 80173f4:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80173f6:	f7f7 f945 	bl	800e684 <_lv_refr_get_disp_refreshing>
 80173fa:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 80173fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d134      	bne.n	801746c <fill_set_px+0x86>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017408:	623b      	str	r3, [r7, #32]
 801740a:	e027      	b.n	801745c <fill_set_px+0x76>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017412:	627b      	str	r3, [r7, #36]	; 0x24
 8017414:	e018      	b.n	8017448 <fill_set_px+0x62>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 8017416:	69fb      	ldr	r3, [r7, #28]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	69dc      	ldr	r4, [r3, #28]
 801741c:	69fb      	ldr	r3, [r7, #28]
 801741e:	6818      	ldr	r0, [r3, #0]
 8017420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017422:	b21d      	sxth	r5, r3
 8017424:	6a3b      	ldr	r3, [r7, #32]
 8017426:	b21b      	sxth	r3, r3
 8017428:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801742c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8017430:	9202      	str	r2, [sp, #8]
 8017432:	793a      	ldrb	r2, [r7, #4]
 8017434:	f88d 2004 	strb.w	r2, [sp, #4]
 8017438:	9300      	str	r3, [sp, #0]
 801743a:	462b      	mov	r3, r5
 801743c:	460a      	mov	r2, r1
 801743e:	68f9      	ldr	r1, [r7, #12]
 8017440:	47a0      	blx	r4
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8017442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017444:	3301      	adds	r3, #1
 8017446:	627b      	str	r3, [r7, #36]	; 0x24
 8017448:	68bb      	ldr	r3, [r7, #8]
 801744a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801744e:	461a      	mov	r2, r3
 8017450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017452:	4293      	cmp	r3, r2
 8017454:	dddf      	ble.n	8017416 <fill_set_px+0x30>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8017456:	6a3b      	ldr	r3, [r7, #32]
 8017458:	3301      	adds	r3, #1
 801745a:	623b      	str	r3, [r7, #32]
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017462:	461a      	mov	r2, r3
 8017464:	6a3b      	ldr	r3, [r7, #32]
 8017466:	4293      	cmp	r3, r2
 8017468:	ddd0      	ble.n	801740c <fill_set_px+0x26>
                }
            }
            mask += mask_stide;
        }
    }
}
 801746a:	e055      	b.n	8017518 <fill_set_px+0x132>
        int32_t w = lv_area_get_width(blend_area);
 801746c:	68b8      	ldr	r0, [r7, #8]
 801746e:	f7ff fdb5 	bl	8016fdc <lv_area_get_width>
 8017472:	4603      	mov	r3, r0
 8017474:	61bb      	str	r3, [r7, #24]
        int32_t h = lv_area_get_height(blend_area);
 8017476:	68b8      	ldr	r0, [r7, #8]
 8017478:	f7ff fdc7 	bl	801700a <lv_area_get_height>
 801747c:	4603      	mov	r3, r0
 801747e:	617b      	str	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 8017480:	2300      	movs	r3, #0
 8017482:	623b      	str	r3, [r7, #32]
 8017484:	e044      	b.n	8017510 <fill_set_px+0x12a>
            for(x = 0; x < w; x++) {
 8017486:	2300      	movs	r3, #0
 8017488:	627b      	str	r3, [r7, #36]	; 0x24
 801748a:	e035      	b.n	80174f8 <fill_set_px+0x112>
                if(mask[x]) {
 801748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801748e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017490:	4413      	add	r3, r2
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d02c      	beq.n	80174f2 <fill_set_px+0x10c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8017498:	69fb      	ldr	r3, [r7, #28]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	69dc      	ldr	r4, [r3, #28]
 801749e:	69fb      	ldr	r3, [r7, #28]
 80174a0:	681d      	ldr	r5, [r3, #0]
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174a8:	b29a      	uxth	r2, r3
 80174aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	4413      	add	r3, r2
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	b21e      	sxth	r6, r3
 80174b4:	68bb      	ldr	r3, [r7, #8]
 80174b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80174ba:	b29a      	uxth	r2, r3
 80174bc:	6a3b      	ldr	r3, [r7, #32]
 80174be:	b29b      	uxth	r3, r3
 80174c0:	4413      	add	r3, r2
 80174c2:	b29b      	uxth	r3, r3
 80174c4:	b21b      	sxth	r3, r3
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 80174c6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80174ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80174cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80174ce:	4401      	add	r1, r0
 80174d0:	7809      	ldrb	r1, [r1, #0]
 80174d2:	fb01 f202 	mul.w	r2, r1, r2
 80174d6:	0a12      	lsrs	r2, r2, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 80174d8:	b2d2      	uxtb	r2, r2
 80174da:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80174de:	9202      	str	r2, [sp, #8]
 80174e0:	793a      	ldrb	r2, [r7, #4]
 80174e2:	f88d 2004 	strb.w	r2, [sp, #4]
 80174e6:	9300      	str	r3, [sp, #0]
 80174e8:	4633      	mov	r3, r6
 80174ea:	460a      	mov	r2, r1
 80174ec:	68f9      	ldr	r1, [r7, #12]
 80174ee:	4628      	mov	r0, r5
 80174f0:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 80174f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f4:	3301      	adds	r3, #1
 80174f6:	627b      	str	r3, [r7, #36]	; 0x24
 80174f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174fa:	69bb      	ldr	r3, [r7, #24]
 80174fc:	429a      	cmp	r2, r3
 80174fe:	dbc5      	blt.n	801748c <fill_set_px+0xa6>
            mask += mask_stide;
 8017500:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8017504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017506:	4413      	add	r3, r2
 8017508:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 801750a:	6a3b      	ldr	r3, [r7, #32]
 801750c:	3301      	adds	r3, #1
 801750e:	623b      	str	r3, [r7, #32]
 8017510:	6a3a      	ldr	r2, [r7, #32]
 8017512:	697b      	ldr	r3, [r7, #20]
 8017514:	429a      	cmp	r2, r3
 8017516:	dbb6      	blt.n	8017486 <fill_set_px+0xa0>
}
 8017518:	bf00      	nop
 801751a:	372c      	adds	r7, #44	; 0x2c
 801751c:	46bd      	mov	sp, r7
 801751e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017520 <fill_normal>:

LV_ATTRIBUTE_FAST_MEM static void fill_normal(lv_color_t * dest_buf, const lv_area_t * dest_area,
                                              lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b092      	sub	sp, #72	; 0x48
 8017524:	af00      	add	r7, sp, #0
 8017526:	60f8      	str	r0, [r7, #12]
 8017528:	60b9      	str	r1, [r7, #8]
 801752a:	713b      	strb	r3, [r7, #4]
 801752c:	4613      	mov	r3, r2
 801752e:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 8017530:	68b8      	ldr	r0, [r7, #8]
 8017532:	f7ff fd53 	bl	8016fdc <lv_area_get_width>
 8017536:	4603      	mov	r3, r0
 8017538:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h = lv_area_get_height(dest_area);
 801753a:	68b8      	ldr	r0, [r7, #8]
 801753c:	f7ff fd65 	bl	801700a <lv_area_get_height>
 8017540:	4603      	mov	r3, r0
 8017542:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t x;
    int32_t y;

    /*No mask*/
    if(mask == NULL) {
 8017544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017546:	2b00      	cmp	r3, #0
 8017548:	d171      	bne.n	801762e <fill_normal+0x10e>
        if(opa >= LV_OPA_MAX) {
 801754a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801754e:	2bfc      	cmp	r3, #252	; 0xfc
 8017550:	d915      	bls.n	801757e <fill_normal+0x5e>
            for(y = 0; y < h; y++) {
 8017552:	2300      	movs	r3, #0
 8017554:	643b      	str	r3, [r7, #64]	; 0x40
 8017556:	e00d      	b.n	8017574 <fill_normal+0x54>
                lv_color_fill(dest_buf, color, w);
 8017558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801755a:	461a      	mov	r2, r3
 801755c:	7939      	ldrb	r1, [r7, #4]
 801755e:	68f8      	ldr	r0, [r7, #12]
 8017560:	f009 fd7a 	bl	8021058 <lv_color_fill>
                dest_buf += dest_stride;
 8017564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017568:	68fa      	ldr	r2, [r7, #12]
 801756a:	4413      	add	r3, r2
 801756c:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 801756e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017570:	3301      	adds	r3, #1
 8017572:	643b      	str	r3, [r7, #64]	; 0x40
 8017574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017578:	429a      	cmp	r2, r3
 801757a:	dbed      	blt.n	8017558 <fill_normal+0x38>
                dest_buf += dest_stride;
                mask += (mask_stride - w);
            }
        }
    }
}
 801757c:	e1cc      	b.n	8017918 <fill_normal+0x3f8>
            lv_color_t last_dest_color = lv_color_black();
 801757e:	f7ff fd23 	bl	8016fc8 <lv_color_black>
 8017582:	4603      	mov	r3, r0
 8017584:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8017588:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801758c:	461a      	mov	r2, r3
 801758e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8017592:	7938      	ldrb	r0, [r7, #4]
 8017594:	f7ff fc8f 	bl	8016eb6 <lv_color_mix>
 8017598:	4603      	mov	r3, r0
 801759a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            lv_color_premult(color, opa, color_premult);
 801759e:	f107 021c 	add.w	r2, r7, #28
 80175a2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80175a6:	4619      	mov	r1, r3
 80175a8:	7938      	ldrb	r0, [r7, #4]
 80175aa:	f7ff fc9a 	bl	8016ee2 <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 80175ae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80175b2:	43db      	mvns	r3, r3
 80175b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            for(y = 0; y < h; y++) {
 80175b8:	2300      	movs	r3, #0
 80175ba:	643b      	str	r3, [r7, #64]	; 0x40
 80175bc:	e032      	b.n	8017624 <fill_normal+0x104>
                for(x = 0; x < w; x++) {
 80175be:	2300      	movs	r3, #0
 80175c0:	647b      	str	r3, [r7, #68]	; 0x44
 80175c2:	e023      	b.n	801760c <fill_normal+0xec>
                    if(last_dest_color.full != dest_buf[x].full) {
 80175c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80175c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175ca:	68f9      	ldr	r1, [r7, #12]
 80175cc:	440b      	add	r3, r1
 80175ce:	781b      	ldrb	r3, [r3, #0]
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d012      	beq.n	80175fa <fill_normal+0xda>
                        last_dest_color = dest_buf[x];
 80175d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175d6:	68fa      	ldr	r2, [r7, #12]
 80175d8:	4413      	add	r3, r2
 80175da:	781b      	ldrb	r3, [r3, #0]
 80175dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        last_res_color = lv_color_mix_premult(color_premult, dest_buf[x], opa_inv);
 80175e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175e2:	68fa      	ldr	r2, [r7, #12]
 80175e4:	4413      	add	r3, r2
 80175e6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80175ea:	f107 001c 	add.w	r0, r7, #28
 80175ee:	7819      	ldrb	r1, [r3, #0]
 80175f0:	f7ff fc9b 	bl	8016f2a <lv_color_mix_premult>
 80175f4:	4603      	mov	r3, r0
 80175f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    dest_buf[x] = last_res_color;
 80175fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	4413      	add	r3, r2
 8017600:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8017604:	701a      	strb	r2, [r3, #0]
                for(x = 0; x < w; x++) {
 8017606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017608:	3301      	adds	r3, #1
 801760a:	647b      	str	r3, [r7, #68]	; 0x44
 801760c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017610:	429a      	cmp	r2, r3
 8017612:	dbd7      	blt.n	80175c4 <fill_normal+0xa4>
                dest_buf += dest_stride;
 8017614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017618:	68fa      	ldr	r2, [r7, #12]
 801761a:	4413      	add	r3, r2
 801761c:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 801761e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017620:	3301      	adds	r3, #1
 8017622:	643b      	str	r3, [r7, #64]	; 0x40
 8017624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017628:	429a      	cmp	r2, r3
 801762a:	dbc8      	blt.n	80175be <fill_normal+0x9e>
}
 801762c:	e174      	b.n	8017918 <fill_normal+0x3f8>
        if(opa >= LV_OPA_MAX) {
 801762e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017632:	2bfc      	cmp	r3, #252	; 0xfc
 8017634:	f240 80f7 	bls.w	8017826 <fill_normal+0x306>
            int32_t x_end4 = w - 4;
 8017638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801763a:	3b04      	subs	r3, #4
 801763c:	633b      	str	r3, [r7, #48]	; 0x30
            for(y = 0; y < h; y++) {
 801763e:	2300      	movs	r3, #0
 8017640:	643b      	str	r3, [r7, #64]	; 0x40
 8017642:	e0ea      	b.n	801781a <fill_normal+0x2fa>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8017644:	2300      	movs	r3, #0
 8017646:	647b      	str	r3, [r7, #68]	; 0x44
 8017648:	e01a      	b.n	8017680 <fill_normal+0x160>
                    FILL_NORMAL_MASK_PX(color)
 801764a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	2bff      	cmp	r3, #255	; 0xff
 8017650:	d103      	bne.n	801765a <fill_normal+0x13a>
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	793a      	ldrb	r2, [r7, #4]
 8017656:	701a      	strb	r2, [r3, #0]
 8017658:	e009      	b.n	801766e <fill_normal+0x14e>
 801765a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801765c:	781a      	ldrb	r2, [r3, #0]
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	7819      	ldrb	r1, [r3, #0]
 8017662:	7938      	ldrb	r0, [r7, #4]
 8017664:	f7ff fc27 	bl	8016eb6 <lv_color_mix>
 8017668:	4602      	mov	r2, r0
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	701a      	strb	r2, [r3, #0]
 801766e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017670:	3301      	adds	r3, #1
 8017672:	657b      	str	r3, [r7, #84]	; 0x54
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	3301      	adds	r3, #1
 8017678:	60fb      	str	r3, [r7, #12]
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 801767a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801767c:	3301      	adds	r3, #1
 801767e:	647b      	str	r3, [r7, #68]	; 0x44
 8017680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017684:	429a      	cmp	r2, r3
 8017686:	f280 8090 	bge.w	80177aa <fill_normal+0x28a>
 801768a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801768c:	f003 0303 	and.w	r3, r3, #3
 8017690:	2b00      	cmp	r3, #0
 8017692:	d1da      	bne.n	801764a <fill_normal+0x12a>
                for(; x <= x_end4; x += 4) {
 8017694:	e089      	b.n	80177aa <fill_normal+0x28a>
                    uint32_t mask32 = *((uint32_t *)mask);
 8017696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if(mask32 == 0xFFFFFFFF) {
 801769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801769e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176a2:	d115      	bne.n	80176d0 <fill_normal+0x1b0>
                        dest_buf[0] = color;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	793a      	ldrb	r2, [r7, #4]
 80176a8:	701a      	strb	r2, [r3, #0]
                        dest_buf[1] = color;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	3301      	adds	r3, #1
 80176ae:	793a      	ldrb	r2, [r7, #4]
 80176b0:	701a      	strb	r2, [r3, #0]
                        dest_buf[2] = color;
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	3302      	adds	r3, #2
 80176b6:	793a      	ldrb	r2, [r7, #4]
 80176b8:	701a      	strb	r2, [r3, #0]
                        dest_buf[3] = color;
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	3303      	adds	r3, #3
 80176be:	793a      	ldrb	r2, [r7, #4]
 80176c0:	701a      	strb	r2, [r3, #0]
                        dest_buf += 4;
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	3304      	adds	r3, #4
 80176c6:	60fb      	str	r3, [r7, #12]
                        mask += 4;
 80176c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176ca:	3304      	adds	r3, #4
 80176cc:	657b      	str	r3, [r7, #84]	; 0x54
 80176ce:	e069      	b.n	80177a4 <fill_normal+0x284>
                    else if(mask32) {
 80176d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d060      	beq.n	8017798 <fill_normal+0x278>
                        FILL_NORMAL_MASK_PX(color)
 80176d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	2bff      	cmp	r3, #255	; 0xff
 80176dc:	d103      	bne.n	80176e6 <fill_normal+0x1c6>
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	793a      	ldrb	r2, [r7, #4]
 80176e2:	701a      	strb	r2, [r3, #0]
 80176e4:	e009      	b.n	80176fa <fill_normal+0x1da>
 80176e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176e8:	781a      	ldrb	r2, [r3, #0]
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	7819      	ldrb	r1, [r3, #0]
 80176ee:	7938      	ldrb	r0, [r7, #4]
 80176f0:	f7ff fbe1 	bl	8016eb6 <lv_color_mix>
 80176f4:	4602      	mov	r2, r0
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	701a      	strb	r2, [r3, #0]
 80176fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176fc:	3301      	adds	r3, #1
 80176fe:	657b      	str	r3, [r7, #84]	; 0x54
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	3301      	adds	r3, #1
 8017704:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8017706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	2bff      	cmp	r3, #255	; 0xff
 801770c:	d103      	bne.n	8017716 <fill_normal+0x1f6>
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	793a      	ldrb	r2, [r7, #4]
 8017712:	701a      	strb	r2, [r3, #0]
 8017714:	e009      	b.n	801772a <fill_normal+0x20a>
 8017716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017718:	781a      	ldrb	r2, [r3, #0]
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	7819      	ldrb	r1, [r3, #0]
 801771e:	7938      	ldrb	r0, [r7, #4]
 8017720:	f7ff fbc9 	bl	8016eb6 <lv_color_mix>
 8017724:	4602      	mov	r2, r0
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	701a      	strb	r2, [r3, #0]
 801772a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801772c:	3301      	adds	r3, #1
 801772e:	657b      	str	r3, [r7, #84]	; 0x54
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	3301      	adds	r3, #1
 8017734:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8017736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017738:	781b      	ldrb	r3, [r3, #0]
 801773a:	2bff      	cmp	r3, #255	; 0xff
 801773c:	d103      	bne.n	8017746 <fill_normal+0x226>
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	793a      	ldrb	r2, [r7, #4]
 8017742:	701a      	strb	r2, [r3, #0]
 8017744:	e009      	b.n	801775a <fill_normal+0x23a>
 8017746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017748:	781a      	ldrb	r2, [r3, #0]
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	7819      	ldrb	r1, [r3, #0]
 801774e:	7938      	ldrb	r0, [r7, #4]
 8017750:	f7ff fbb1 	bl	8016eb6 <lv_color_mix>
 8017754:	4602      	mov	r2, r0
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	701a      	strb	r2, [r3, #0]
 801775a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801775c:	3301      	adds	r3, #1
 801775e:	657b      	str	r3, [r7, #84]	; 0x54
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	3301      	adds	r3, #1
 8017764:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8017766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	2bff      	cmp	r3, #255	; 0xff
 801776c:	d103      	bne.n	8017776 <fill_normal+0x256>
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	793a      	ldrb	r2, [r7, #4]
 8017772:	701a      	strb	r2, [r3, #0]
 8017774:	e009      	b.n	801778a <fill_normal+0x26a>
 8017776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017778:	781a      	ldrb	r2, [r3, #0]
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	7819      	ldrb	r1, [r3, #0]
 801777e:	7938      	ldrb	r0, [r7, #4]
 8017780:	f7ff fb99 	bl	8016eb6 <lv_color_mix>
 8017784:	4602      	mov	r2, r0
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	701a      	strb	r2, [r3, #0]
 801778a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801778c:	3301      	adds	r3, #1
 801778e:	657b      	str	r3, [r7, #84]	; 0x54
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	3301      	adds	r3, #1
 8017794:	60fb      	str	r3, [r7, #12]
 8017796:	e005      	b.n	80177a4 <fill_normal+0x284>
                        mask += 4;
 8017798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801779a:	3304      	adds	r3, #4
 801779c:	657b      	str	r3, [r7, #84]	; 0x54
                        dest_buf += 4;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	3304      	adds	r3, #4
 80177a2:	60fb      	str	r3, [r7, #12]
                for(; x <= x_end4; x += 4) {
 80177a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177a6:	3304      	adds	r3, #4
 80177a8:	647b      	str	r3, [r7, #68]	; 0x44
 80177aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80177ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ae:	429a      	cmp	r2, r3
 80177b0:	f77f af71 	ble.w	8017696 <fill_normal+0x176>
                for(; x < w ; x++) {
 80177b4:	e01a      	b.n	80177ec <fill_normal+0x2cc>
                    FILL_NORMAL_MASK_PX(color)
 80177b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177b8:	781b      	ldrb	r3, [r3, #0]
 80177ba:	2bff      	cmp	r3, #255	; 0xff
 80177bc:	d103      	bne.n	80177c6 <fill_normal+0x2a6>
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	793a      	ldrb	r2, [r7, #4]
 80177c2:	701a      	strb	r2, [r3, #0]
 80177c4:	e009      	b.n	80177da <fill_normal+0x2ba>
 80177c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177c8:	781a      	ldrb	r2, [r3, #0]
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	7819      	ldrb	r1, [r3, #0]
 80177ce:	7938      	ldrb	r0, [r7, #4]
 80177d0:	f7ff fb71 	bl	8016eb6 <lv_color_mix>
 80177d4:	4602      	mov	r2, r0
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	701a      	strb	r2, [r3, #0]
 80177da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177dc:	3301      	adds	r3, #1
 80177de:	657b      	str	r3, [r7, #84]	; 0x54
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	3301      	adds	r3, #1
 80177e4:	60fb      	str	r3, [r7, #12]
                for(; x < w ; x++) {
 80177e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177e8:	3301      	adds	r3, #1
 80177ea:	647b      	str	r3, [r7, #68]	; 0x44
 80177ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80177ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177f0:	429a      	cmp	r2, r3
 80177f2:	dbe0      	blt.n	80177b6 <fill_normal+0x296>
                dest_buf += (dest_stride - w);
 80177f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80177f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177fa:	1ad3      	subs	r3, r2, r3
 80177fc:	461a      	mov	r2, r3
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	4413      	add	r3, r2
 8017802:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8017804:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8017808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801780a:	1ad3      	subs	r3, r2, r3
 801780c:	461a      	mov	r2, r3
 801780e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017810:	4413      	add	r3, r2
 8017812:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 8017814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017816:	3301      	adds	r3, #1
 8017818:	643b      	str	r3, [r7, #64]	; 0x40
 801781a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801781e:	429a      	cmp	r2, r3
 8017820:	f6ff af10 	blt.w	8017644 <fill_normal+0x124>
}
 8017824:	e078      	b.n	8017918 <fill_normal+0x3f8>
            lv_opa_t last_mask = LV_OPA_TRANSP;
 8017826:	2300      	movs	r3, #0
 8017828:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            last_dest_color.full = dest_buf[0].full;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	763b      	strb	r3, [r7, #24]
            last_res_color.full = dest_buf[0].full;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	753b      	strb	r3, [r7, #20]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8017838:	2300      	movs	r3, #0
 801783a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            for(y = 0; y < h; y++) {
 801783e:	2300      	movs	r3, #0
 8017840:	643b      	str	r3, [r7, #64]	; 0x40
 8017842:	e065      	b.n	8017910 <fill_normal+0x3f0>
                for(x = 0; x < w; x++) {
 8017844:	2300      	movs	r3, #0
 8017846:	647b      	str	r3, [r7, #68]	; 0x44
 8017848:	e04e      	b.n	80178e8 <fill_normal+0x3c8>
                    if(*mask) {
 801784a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801784c:	781b      	ldrb	r3, [r3, #0]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d044      	beq.n	80178dc <fill_normal+0x3bc>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8017852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017854:	781b      	ldrb	r3, [r3, #0]
 8017856:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801785a:	429a      	cmp	r2, r3
 801785c:	d011      	beq.n	8017882 <fill_normal+0x362>
 801785e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017860:	781b      	ldrb	r3, [r3, #0]
 8017862:	2bff      	cmp	r3, #255	; 0xff
 8017864:	d009      	beq.n	801787a <fill_normal+0x35a>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 8017866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017868:	781b      	ldrb	r3, [r3, #0]
 801786a:	461a      	mov	r2, r3
 801786c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017870:	fb02 f303 	mul.w	r3, r2, r3
 8017874:	0a1b      	lsrs	r3, r3, #8
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8017876:	b2db      	uxtb	r3, r3
 8017878:	e001      	b.n	801787e <fill_normal+0x35e>
 801787a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801787e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 8017882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801788a:	429a      	cmp	r2, r3
 801788c:	d106      	bne.n	801789c <fill_normal+0x37c>
 801788e:	7e3a      	ldrb	r2, [r7, #24]
 8017890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017892:	68f9      	ldr	r1, [r7, #12]
 8017894:	440b      	add	r3, r1
 8017896:	781b      	ldrb	r3, [r3, #0]
 8017898:	429a      	cmp	r2, r3
 801789a:	d01a      	beq.n	80178d2 <fill_normal+0x3b2>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 801789c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80178a0:	2bff      	cmp	r3, #255	; 0xff
 80178a2:	d102      	bne.n	80178aa <fill_normal+0x38a>
 80178a4:	793b      	ldrb	r3, [r7, #4]
 80178a6:	753b      	strb	r3, [r7, #20]
 80178a8:	e00a      	b.n	80178c0 <fill_normal+0x3a0>
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 80178aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80178ac:	68fa      	ldr	r2, [r7, #12]
 80178ae:	4413      	add	r3, r2
 80178b0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80178b4:	7819      	ldrb	r1, [r3, #0]
 80178b6:	7938      	ldrb	r0, [r7, #4]
 80178b8:	f7ff fafd 	bl	8016eb6 <lv_color_mix>
 80178bc:	4603      	mov	r3, r0
 80178be:	753b      	strb	r3, [r7, #20]
                            last_mask = *mask;
 80178c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178c2:	781b      	ldrb	r3, [r3, #0]
 80178c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                            last_dest_color.full = dest_buf[x].full;
 80178c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80178ca:	68fa      	ldr	r2, [r7, #12]
 80178cc:	4413      	add	r3, r2
 80178ce:	781b      	ldrb	r3, [r3, #0]
 80178d0:	763b      	strb	r3, [r7, #24]
                        dest_buf[x] = last_res_color;
 80178d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80178d4:	68fa      	ldr	r2, [r7, #12]
 80178d6:	4413      	add	r3, r2
 80178d8:	7d3a      	ldrb	r2, [r7, #20]
 80178da:	701a      	strb	r2, [r3, #0]
                    mask++;
 80178dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178de:	3301      	adds	r3, #1
 80178e0:	657b      	str	r3, [r7, #84]	; 0x54
                for(x = 0; x < w; x++) {
 80178e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80178e4:	3301      	adds	r3, #1
 80178e6:	647b      	str	r3, [r7, #68]	; 0x44
 80178e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80178ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ec:	429a      	cmp	r2, r3
 80178ee:	dbac      	blt.n	801784a <fill_normal+0x32a>
                dest_buf += dest_stride;
 80178f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80178f4:	68fa      	ldr	r2, [r7, #12]
 80178f6:	4413      	add	r3, r2
 80178f8:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 80178fa:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 80178fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017900:	1ad3      	subs	r3, r2, r3
 8017902:	461a      	mov	r2, r3
 8017904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017906:	4413      	add	r3, r2
 8017908:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 801790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801790c:	3301      	adds	r3, #1
 801790e:	643b      	str	r3, [r7, #64]	; 0x40
 8017910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017914:	429a      	cmp	r2, r3
 8017916:	db95      	blt.n	8017844 <fill_normal+0x324>
}
 8017918:	bf00      	nop
 801791a:	3748      	adds	r7, #72	; 0x48
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}

08017920 <fill_blended>:

#if LV_DRAW_COMPLEX
static void fill_blended(lv_color_t * dest_buf, const lv_area_t * dest_area,
                         lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride,
                         lv_blend_mode_t blend_mode)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b08e      	sub	sp, #56	; 0x38
 8017924:	af00      	add	r7, sp, #0
 8017926:	60f8      	str	r0, [r7, #12]
 8017928:	60b9      	str	r1, [r7, #8]
 801792a:	713b      	strb	r3, [r7, #4]
 801792c:	4613      	mov	r3, r2
 801792e:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 8017930:	68b8      	ldr	r0, [r7, #8]
 8017932:	f7ff fb53 	bl	8016fdc <lv_area_get_width>
 8017936:	4603      	mov	r3, r0
 8017938:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 801793a:	68b8      	ldr	r0, [r7, #8]
 801793c:	f7ff fb65 	bl	801700a <lv_area_get_height>
 8017940:	4603      	mov	r3, r0
 8017942:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 8017944:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8017948:	2b03      	cmp	r3, #3
 801794a:	d00d      	beq.n	8017968 <fill_blended+0x48>
 801794c:	2b03      	cmp	r3, #3
 801794e:	f300 80d6 	bgt.w	8017afe <fill_blended+0x1de>
 8017952:	2b01      	cmp	r3, #1
 8017954:	d002      	beq.n	801795c <fill_blended+0x3c>
 8017956:	2b02      	cmp	r3, #2
 8017958:	d003      	beq.n	8017962 <fill_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 801795a:	e0d0      	b.n	8017afe <fill_blended+0x1de>
            blend_fp = color_blend_true_color_additive;
 801795c:	4b6a      	ldr	r3, [pc, #424]	; (8017b08 <fill_blended+0x1e8>)
 801795e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8017960:	e005      	b.n	801796e <fill_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 8017962:	4b6a      	ldr	r3, [pc, #424]	; (8017b0c <fill_blended+0x1ec>)
 8017964:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8017966:	e002      	b.n	801796e <fill_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 8017968:	4b69      	ldr	r3, [pc, #420]	; (8017b10 <fill_blended+0x1f0>)
 801796a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801796c:	bf00      	nop
    }

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 801796e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017970:	2b00      	cmp	r3, #0
 8017972:	d141      	bne.n	80179f8 <fill_blended+0xd8>
        lv_color_t last_dest_color = dest_buf[0];
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	781b      	ldrb	r3, [r3, #0]
 8017978:	773b      	strb	r3, [r7, #28]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 801797a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801797e:	68f9      	ldr	r1, [r7, #12]
 8017980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017982:	7809      	ldrb	r1, [r1, #0]
 8017984:	7938      	ldrb	r0, [r7, #4]
 8017986:	4798      	blx	r3
 8017988:	4603      	mov	r3, r0
 801798a:	763b      	strb	r3, [r7, #24]
        for(y = 0; y < h; y++) {
 801798c:	2300      	movs	r3, #0
 801798e:	633b      	str	r3, [r7, #48]	; 0x30
 8017990:	e02d      	b.n	80179ee <fill_blended+0xce>
            for(x = 0; x < w; x++) {
 8017992:	2300      	movs	r3, #0
 8017994:	637b      	str	r3, [r7, #52]	; 0x34
 8017996:	e01e      	b.n	80179d6 <fill_blended+0xb6>
                if(last_dest_color.full != dest_buf[x].full) {
 8017998:	7f3a      	ldrb	r2, [r7, #28]
 801799a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801799c:	68f9      	ldr	r1, [r7, #12]
 801799e:	440b      	add	r3, r1
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d00f      	beq.n	80179c6 <fill_blended+0xa6>
                    last_dest_color = dest_buf[x];
 80179a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179a8:	68fa      	ldr	r2, [r7, #12]
 80179aa:	4413      	add	r3, r2
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	773b      	strb	r3, [r7, #28]
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 80179b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179b2:	68fa      	ldr	r2, [r7, #12]
 80179b4:	18d1      	adds	r1, r2, r3
 80179b6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80179ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179bc:	7809      	ldrb	r1, [r1, #0]
 80179be:	7938      	ldrb	r0, [r7, #4]
 80179c0:	4798      	blx	r3
 80179c2:	4603      	mov	r3, r0
 80179c4:	763b      	strb	r3, [r7, #24]
                }
                dest_buf[x] = last_res_color;
 80179c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179c8:	68fa      	ldr	r2, [r7, #12]
 80179ca:	4413      	add	r3, r2
 80179cc:	7e3a      	ldrb	r2, [r7, #24]
 80179ce:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 80179d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179d2:	3301      	adds	r3, #1
 80179d4:	637b      	str	r3, [r7, #52]	; 0x34
 80179d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80179d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179da:	429a      	cmp	r2, r3
 80179dc:	dbdc      	blt.n	8017998 <fill_blended+0x78>
            }
            dest_buf += dest_stride;
 80179de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80179e2:	68fa      	ldr	r2, [r7, #12]
 80179e4:	4413      	add	r3, r2
 80179e6:	60fb      	str	r3, [r7, #12]
        for(y = 0; y < h; y++) {
 80179e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ea:	3301      	adds	r3, #1
 80179ec:	633b      	str	r3, [r7, #48]	; 0x30
 80179ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179f0:	6a3b      	ldr	r3, [r7, #32]
 80179f2:	429a      	cmp	r2, r3
 80179f4:	dbcd      	blt.n	8017992 <fill_blended+0x72>
 80179f6:	e083      	b.n	8017b00 <fill_blended+0x1e0>
    /*Masked*/
    else {
        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 80179f8:	2300      	movs	r3, #0
 80179fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        last_dest_color = dest_buf[0];
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	753b      	strb	r3, [r7, #20]
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 8017a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	2bfc      	cmp	r3, #252	; 0xfc
 8017a0a:	d809      	bhi.n	8017a20 <fill_blended+0x100>
 8017a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a0e:	781b      	ldrb	r3, [r3, #0]
 8017a10:	461a      	mov	r2, r3
 8017a12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017a16:	fb02 f303 	mul.w	r3, r2, r3
 8017a1a:	0a1b      	lsrs	r3, r3, #8
 8017a1c:	b2db      	uxtb	r3, r3
 8017a1e:	e001      	b.n	8017a24 <fill_blended+0x104>
 8017a20:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017a24:	77fb      	strb	r3, [r7, #31]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8017a26:	7ffa      	ldrb	r2, [r7, #31]
 8017a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a2a:	7d39      	ldrb	r1, [r7, #20]
 8017a2c:	7938      	ldrb	r0, [r7, #4]
 8017a2e:	4798      	blx	r3
 8017a30:	4603      	mov	r3, r0
 8017a32:	743b      	strb	r3, [r7, #16]

        for(y = 0; y < h; y++) {
 8017a34:	2300      	movs	r3, #0
 8017a36:	633b      	str	r3, [r7, #48]	; 0x30
 8017a38:	e05c      	b.n	8017af4 <fill_blended+0x1d4>
            for(x = 0; x < w; x++) {
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8017a3e:	e048      	b.n	8017ad2 <fill_blended+0x1b2>
                if(mask[x] == 0) continue;
 8017a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a44:	4413      	add	r3, r2
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d03e      	beq.n	8017aca <fill_blended+0x1aa>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 8017a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a50:	4413      	add	r3, r2
 8017a52:	781b      	ldrb	r3, [r3, #0]
 8017a54:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d106      	bne.n	8017a6a <fill_blended+0x14a>
 8017a5c:	7d3a      	ldrb	r2, [r7, #20]
 8017a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a60:	68f9      	ldr	r1, [r7, #12]
 8017a62:	440b      	add	r3, r1
 8017a64:	781b      	ldrb	r3, [r3, #0]
 8017a66:	429a      	cmp	r2, r3
 8017a68:	d029      	beq.n	8017abe <fill_blended+0x19e>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 8017a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a6e:	4413      	add	r3, r2
 8017a70:	781b      	ldrb	r3, [r3, #0]
 8017a72:	2bfc      	cmp	r3, #252	; 0xfc
 8017a74:	d80b      	bhi.n	8017a8e <fill_blended+0x16e>
 8017a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a7a:	4413      	add	r3, r2
 8017a7c:	781b      	ldrb	r3, [r3, #0]
 8017a7e:	461a      	mov	r2, r3
 8017a80:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017a84:	fb02 f303 	mul.w	r3, r2, r3
 8017a88:	0a1b      	lsrs	r3, r3, #8
 8017a8a:	b2db      	uxtb	r3, r3
 8017a8c:	e001      	b.n	8017a92 <fill_blended+0x172>
 8017a8e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017a92:	77fb      	strb	r3, [r7, #31]

                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8017a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a96:	68fa      	ldr	r2, [r7, #12]
 8017a98:	18d1      	adds	r1, r2, r3
 8017a9a:	7ffa      	ldrb	r2, [r7, #31]
 8017a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a9e:	7809      	ldrb	r1, [r1, #0]
 8017aa0:	7938      	ldrb	r0, [r7, #4]
 8017aa2:	4798      	blx	r3
 8017aa4:	4603      	mov	r3, r0
 8017aa6:	743b      	strb	r3, [r7, #16]
                    last_mask = mask[x];
 8017aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017aac:	4413      	add	r3, r2
 8017aae:	781b      	ldrb	r3, [r3, #0]
 8017ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_dest_color.full = dest_buf[x].full;
 8017ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ab6:	68fa      	ldr	r2, [r7, #12]
 8017ab8:	4413      	add	r3, r2
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 8017abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ac0:	68fa      	ldr	r2, [r7, #12]
 8017ac2:	4413      	add	r3, r2
 8017ac4:	7c3a      	ldrb	r2, [r7, #16]
 8017ac6:	701a      	strb	r2, [r3, #0]
 8017ac8:	e000      	b.n	8017acc <fill_blended+0x1ac>
                if(mask[x] == 0) continue;
 8017aca:	bf00      	nop
            for(x = 0; x < w; x++) {
 8017acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ace:	3301      	adds	r3, #1
 8017ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8017ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	dbb2      	blt.n	8017a40 <fill_blended+0x120>
            }
            dest_buf += dest_stride;
 8017ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017ade:	68fa      	ldr	r2, [r7, #12]
 8017ae0:	4413      	add	r3, r2
 8017ae2:	60fb      	str	r3, [r7, #12]
            mask += mask_stride;
 8017ae4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8017ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017aea:	4413      	add	r3, r2
 8017aec:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 8017aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af0:	3301      	adds	r3, #1
 8017af2:	633b      	str	r3, [r7, #48]	; 0x30
 8017af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017af6:	6a3b      	ldr	r3, [r7, #32]
 8017af8:	429a      	cmp	r2, r3
 8017afa:	db9e      	blt.n	8017a3a <fill_blended+0x11a>
 8017afc:	e000      	b.n	8017b00 <fill_blended+0x1e0>
            return;
 8017afe:	bf00      	nop
        }
    }
}
 8017b00:	3738      	adds	r7, #56	; 0x38
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}
 8017b06:	bf00      	nop
 8017b08:	080182ed 	.word	0x080182ed
 8017b0c:	0801833d 	.word	0x0801833d
 8017b10:	080183f3 	.word	0x080183f3

08017b14 <map_set_px>:
#endif

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8017b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b16:	b08f      	sub	sp, #60	; 0x3c
 8017b18:	af04      	add	r7, sp, #16
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	603b      	str	r3, [r7, #0]
 8017b20:	4613      	mov	r3, r2
 8017b22:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8017b24:	f7f6 fdae 	bl	800e684 <_lv_refr_get_disp_refreshing>
 8017b28:	61f8      	str	r0, [r7, #28]

    int32_t w = lv_area_get_width(dest_area);
 8017b2a:	68b8      	ldr	r0, [r7, #8]
 8017b2c:	f7ff fa56 	bl	8016fdc <lv_area_get_width>
 8017b30:	4603      	mov	r3, r0
 8017b32:	61bb      	str	r3, [r7, #24]
    int32_t h = lv_area_get_height(dest_area);
 8017b34:	68b8      	ldr	r0, [r7, #8]
 8017b36:	f7ff fa68 	bl	801700a <lv_area_get_height>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8017b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d140      	bne.n	8017bc6 <map_set_px+0xb2>
        for(y = 0; y < h; y++) {
 8017b44:	2300      	movs	r3, #0
 8017b46:	623b      	str	r3, [r7, #32]
 8017b48:	e038      	b.n	8017bbc <map_set_px+0xa8>
            for(x = 0; x < w; x++) {
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8017b4e:	e029      	b.n	8017ba4 <map_set_px+0x90>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017b50:	69fb      	ldr	r3, [r7, #28]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	69dc      	ldr	r4, [r3, #28]
 8017b56:	69fb      	ldr	r3, [r7, #28]
 8017b58:	6818      	ldr	r0, [r3, #0]
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b60:	b29a      	uxth	r2, r3
 8017b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	4413      	add	r3, r2
 8017b68:	b29b      	uxth	r3, r3
 8017b6a:	b21e      	sxth	r6, r3
 8017b6c:	68bb      	ldr	r3, [r7, #8]
 8017b6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017b72:	b29a      	uxth	r2, r3
 8017b74:	6a3b      	ldr	r3, [r7, #32]
 8017b76:	b29b      	uxth	r3, r3
 8017b78:	4413      	add	r3, r2
 8017b7a:	b29b      	uxth	r3, r3
 8017b7c:	b21b      	sxth	r3, r3
 8017b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b80:	6839      	ldr	r1, [r7, #0]
 8017b82:	440a      	add	r2, r1
 8017b84:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8017b88:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8017b8c:	9102      	str	r1, [sp, #8]
 8017b8e:	7812      	ldrb	r2, [r2, #0]
 8017b90:	f88d 2004 	strb.w	r2, [sp, #4]
 8017b94:	9300      	str	r3, [sp, #0]
 8017b96:	4633      	mov	r3, r6
 8017b98:	462a      	mov	r2, r5
 8017b9a:	68f9      	ldr	r1, [r7, #12]
 8017b9c:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8017b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba0:	3301      	adds	r3, #1
 8017ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8017ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ba6:	69bb      	ldr	r3, [r7, #24]
 8017ba8:	429a      	cmp	r2, r3
 8017baa:	dbd1      	blt.n	8017b50 <map_set_px+0x3c>
                                        opa);
            }
            src_buf += src_stride;
 8017bac:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017bb0:	683a      	ldr	r2, [r7, #0]
 8017bb2:	4413      	add	r3, r2
 8017bb4:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8017bb6:	6a3b      	ldr	r3, [r7, #32]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	623b      	str	r3, [r7, #32]
 8017bbc:	6a3a      	ldr	r2, [r7, #32]
 8017bbe:	697b      	ldr	r3, [r7, #20]
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	dbc2      	blt.n	8017b4a <map_set_px+0x36>
            }
            mask += mask_stride;
            src_buf += src_stride;
        }
    }
}
 8017bc4:	e054      	b.n	8017c70 <map_set_px+0x15c>
        for(y = 0; y < h; y++) {
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	623b      	str	r3, [r7, #32]
 8017bca:	e04d      	b.n	8017c68 <map_set_px+0x154>
            for(x = 0; x < w; x++) {
 8017bcc:	2300      	movs	r3, #0
 8017bce:	627b      	str	r3, [r7, #36]	; 0x24
 8017bd0:	e039      	b.n	8017c46 <map_set_px+0x132>
                if(mask[x]) {
 8017bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017bd6:	4413      	add	r3, r2
 8017bd8:	781b      	ldrb	r3, [r3, #0]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d030      	beq.n	8017c40 <map_set_px+0x12c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017bde:	69fb      	ldr	r3, [r7, #28]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	69dc      	ldr	r4, [r3, #28]
 8017be4:	69fb      	ldr	r3, [r7, #28]
 8017be6:	681e      	ldr	r6, [r3, #0]
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	4413      	add	r3, r2
 8017bf6:	b29b      	uxth	r3, r3
 8017bf8:	fa0f fc83 	sxth.w	ip, r3
 8017bfc:	68bb      	ldr	r3, [r7, #8]
 8017bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	6a3b      	ldr	r3, [r7, #32]
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	4413      	add	r3, r2
 8017c0a:	b29b      	uxth	r3, r3
 8017c0c:	b21b      	sxth	r3, r3
 8017c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c10:	6839      	ldr	r1, [r7, #0]
 8017c12:	440a      	add	r2, r1
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8017c14:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8017c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c1a:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8017c1c:	4428      	add	r0, r5
 8017c1e:	7800      	ldrb	r0, [r0, #0]
 8017c20:	fb00 f101 	mul.w	r1, r0, r1
 8017c24:	0a09      	lsrs	r1, r1, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017c26:	b2c9      	uxtb	r1, r1
 8017c28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8017c2c:	9102      	str	r1, [sp, #8]
 8017c2e:	7812      	ldrb	r2, [r2, #0]
 8017c30:	f88d 2004 	strb.w	r2, [sp, #4]
 8017c34:	9300      	str	r3, [sp, #0]
 8017c36:	4663      	mov	r3, ip
 8017c38:	4602      	mov	r2, r0
 8017c3a:	68f9      	ldr	r1, [r7, #12]
 8017c3c:	4630      	mov	r0, r6
 8017c3e:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8017c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c42:	3301      	adds	r3, #1
 8017c44:	627b      	str	r3, [r7, #36]	; 0x24
 8017c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c48:	69bb      	ldr	r3, [r7, #24]
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	dbc1      	blt.n	8017bd2 <map_set_px+0xbe>
            mask += mask_stride;
 8017c4e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8017c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c54:	4413      	add	r3, r2
 8017c56:	64bb      	str	r3, [r7, #72]	; 0x48
            src_buf += src_stride;
 8017c58:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017c5c:	683a      	ldr	r2, [r7, #0]
 8017c5e:	4413      	add	r3, r2
 8017c60:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8017c62:	6a3b      	ldr	r3, [r7, #32]
 8017c64:	3301      	adds	r3, #1
 8017c66:	623b      	str	r3, [r7, #32]
 8017c68:	6a3a      	ldr	r2, [r7, #32]
 8017c6a:	697b      	ldr	r3, [r7, #20]
 8017c6c:	429a      	cmp	r2, r3
 8017c6e:	dbad      	blt.n	8017bcc <map_set_px+0xb8>
}
 8017c70:	bf00      	nop
 8017c72:	372c      	adds	r7, #44	; 0x2c
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c78 <map_normal>:

LV_ATTRIBUTE_FAST_MEM static void map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8017c78:	b5b0      	push	{r4, r5, r7, lr}
 8017c7a:	b08c      	sub	sp, #48	; 0x30
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	603b      	str	r3, [r7, #0]
 8017c84:	4613      	mov	r3, r2
 8017c86:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 8017c88:	68b8      	ldr	r0, [r7, #8]
 8017c8a:	f7ff f9a7 	bl	8016fdc <lv_area_get_width>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	61fb      	str	r3, [r7, #28]
    int32_t h = lv_area_get_height(dest_area);
 8017c92:	68b8      	ldr	r0, [r7, #8]
 8017c94:	f7ff f9b9 	bl	801700a <lv_area_get_height>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	61bb      	str	r3, [r7, #24]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8017c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d14e      	bne.n	8017d40 <map_normal+0xc8>
        if(opa >= LV_OPA_MAX) {
 8017ca2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017ca6:	2bfc      	cmp	r3, #252	; 0xfc
 8017ca8:	d91a      	bls.n	8017ce0 <map_normal+0x68>
            for(y = 0; y < h; y++) {
 8017caa:	2300      	movs	r3, #0
 8017cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8017cae:	e012      	b.n	8017cd6 <map_normal+0x5e>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8017cb0:	69fb      	ldr	r3, [r7, #28]
 8017cb2:	461a      	mov	r2, r3
 8017cb4:	6839      	ldr	r1, [r7, #0]
 8017cb6:	68f8      	ldr	r0, [r7, #12]
 8017cb8:	f00a f9b0 	bl	802201c <lv_memcpy>
                dest_buf += dest_stride;
 8017cbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017cc0:	68fa      	ldr	r2, [r7, #12]
 8017cc2:	4413      	add	r3, r2
 8017cc4:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8017cc6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017cca:	683a      	ldr	r2, [r7, #0]
 8017ccc:	4413      	add	r3, r2
 8017cce:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8017cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd2:	3301      	adds	r3, #1
 8017cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cd8:	69bb      	ldr	r3, [r7, #24]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	dbe8      	blt.n	8017cb0 <map_normal+0x38>
                src_buf += src_stride;
                mask += mask_stride;
            }
        }
    }
}
 8017cde:	e1ee      	b.n	80180be <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ce4:	e027      	b.n	8017d36 <map_normal+0xbe>
                for(x = 0; x < w; x++) {
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017cea:	e013      	b.n	8017d14 <map_normal+0x9c>
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 8017cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cee:	683a      	ldr	r2, [r7, #0]
 8017cf0:	4413      	add	r3, r2
 8017cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cf4:	68f9      	ldr	r1, [r7, #12]
 8017cf6:	4411      	add	r1, r2
 8017cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cfa:	68f8      	ldr	r0, [r7, #12]
 8017cfc:	1884      	adds	r4, r0, r2
 8017cfe:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8017d02:	7809      	ldrb	r1, [r1, #0]
 8017d04:	7818      	ldrb	r0, [r3, #0]
 8017d06:	f7ff f8d6 	bl	8016eb6 <lv_color_mix>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 8017d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d10:	3301      	adds	r3, #1
 8017d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d16:	69fb      	ldr	r3, [r7, #28]
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	dbe7      	blt.n	8017cec <map_normal+0x74>
                dest_buf += dest_stride;
 8017d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017d20:	68fa      	ldr	r2, [r7, #12]
 8017d22:	4413      	add	r3, r2
 8017d24:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8017d26:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017d2a:	683a      	ldr	r2, [r7, #0]
 8017d2c:	4413      	add	r3, r2
 8017d2e:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8017d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d32:	3301      	adds	r3, #1
 8017d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d38:	69bb      	ldr	r3, [r7, #24]
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	dbd3      	blt.n	8017ce6 <map_normal+0x6e>
}
 8017d3e:	e1be      	b.n	80180be <map_normal+0x446>
        if(opa > LV_OPA_MAX) {
 8017d40:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017d44:	2bfd      	cmp	r3, #253	; 0xfd
 8017d46:	f240 816d 	bls.w	8018024 <map_normal+0x3ac>
            int32_t x_end4 = w - 4;
 8017d4a:	69fb      	ldr	r3, [r7, #28]
 8017d4c:	3b04      	subs	r3, #4
 8017d4e:	613b      	str	r3, [r7, #16]
            for(y = 0; y < h; y++) {
 8017d50:	2300      	movs	r3, #0
 8017d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d54:	e160      	b.n	8018018 <map_normal+0x3a0>
                const lv_opa_t * mask_tmp_x = mask;
 8017d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d58:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d5e:	e028      	b.n	8017db2 <map_normal+0x13a>
                    MAP_NORMAL_MASK_PX(x)
 8017d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d62:	781b      	ldrb	r3, [r3, #0]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d01e      	beq.n	8017da6 <map_normal+0x12e>
 8017d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d6a:	781b      	ldrb	r3, [r3, #0]
 8017d6c:	2bff      	cmp	r3, #255	; 0xff
 8017d6e:	d108      	bne.n	8017d82 <map_normal+0x10a>
 8017d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d72:	683a      	ldr	r2, [r7, #0]
 8017d74:	441a      	add	r2, r3
 8017d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d78:	68f9      	ldr	r1, [r7, #12]
 8017d7a:	440b      	add	r3, r1
 8017d7c:	7812      	ldrb	r2, [r2, #0]
 8017d7e:	701a      	strb	r2, [r3, #0]
 8017d80:	e011      	b.n	8017da6 <map_normal+0x12e>
 8017d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d84:	683a      	ldr	r2, [r7, #0]
 8017d86:	4413      	add	r3, r2
 8017d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d8a:	68f9      	ldr	r1, [r7, #12]
 8017d8c:	4411      	add	r1, r2
 8017d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d90:	7815      	ldrb	r5, [r2, #0]
 8017d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d94:	68f8      	ldr	r0, [r7, #12]
 8017d96:	1884      	adds	r4, r0, r2
 8017d98:	462a      	mov	r2, r5
 8017d9a:	7809      	ldrb	r1, [r1, #0]
 8017d9c:	7818      	ldrb	r0, [r3, #0]
 8017d9e:	f7ff f88a 	bl	8016eb6 <lv_color_mix>
 8017da2:	4603      	mov	r3, r0
 8017da4:	7023      	strb	r3, [r4, #0]
 8017da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da8:	3301      	adds	r3, #1
 8017daa:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8017dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dae:	3301      	adds	r3, #1
 8017db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017db4:	69fb      	ldr	r3, [r7, #28]
 8017db6:	429a      	cmp	r2, r3
 8017db8:	da04      	bge.n	8017dc4 <map_normal+0x14c>
 8017dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dbc:	f003 0303 	and.w	r3, r3, #3
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d1cd      	bne.n	8017d60 <map_normal+0xe8>
                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc6:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8017dc8:	e0df      	b.n	8017f8a <map_normal+0x312>
                    if(*mask32) {
 8017dca:	6a3b      	ldr	r3, [r7, #32]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	f000 80d5 	beq.w	8017f7e <map_normal+0x306>
                        if((*mask32) == 0xFFFFFFFF) {
 8017dd4:	6a3b      	ldr	r3, [r7, #32]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ddc:	d126      	bne.n	8017e2c <map_normal+0x1b4>
                            dest_buf[x] = src_buf[x];
 8017dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de0:	683a      	ldr	r2, [r7, #0]
 8017de2:	441a      	add	r2, r3
 8017de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de6:	68f9      	ldr	r1, [r7, #12]
 8017de8:	440b      	add	r3, r1
 8017dea:	7812      	ldrb	r2, [r2, #0]
 8017dec:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 8017dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df0:	3301      	adds	r3, #1
 8017df2:	683a      	ldr	r2, [r7, #0]
 8017df4:	441a      	add	r2, r3
 8017df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df8:	3301      	adds	r3, #1
 8017dfa:	68f9      	ldr	r1, [r7, #12]
 8017dfc:	440b      	add	r3, r1
 8017dfe:	7812      	ldrb	r2, [r2, #0]
 8017e00:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 2] = src_buf[x + 2];
 8017e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e04:	3302      	adds	r3, #2
 8017e06:	683a      	ldr	r2, [r7, #0]
 8017e08:	441a      	add	r2, r3
 8017e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0c:	3302      	adds	r3, #2
 8017e0e:	68f9      	ldr	r1, [r7, #12]
 8017e10:	440b      	add	r3, r1
 8017e12:	7812      	ldrb	r2, [r2, #0]
 8017e14:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 3] = src_buf[x + 3];
 8017e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e18:	3303      	adds	r3, #3
 8017e1a:	683a      	ldr	r2, [r7, #0]
 8017e1c:	441a      	add	r2, r3
 8017e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e20:	3303      	adds	r3, #3
 8017e22:	68f9      	ldr	r1, [r7, #12]
 8017e24:	440b      	add	r3, r1
 8017e26:	7812      	ldrb	r2, [r2, #0]
 8017e28:	701a      	strb	r2, [r3, #0]
 8017e2a:	e0a8      	b.n	8017f7e <map_normal+0x306>
                            mask_tmp_x = (const lv_opa_t *)mask32;
 8017e2c:	6a3b      	ldr	r3, [r7, #32]
 8017e2e:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x)
 8017e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e32:	781b      	ldrb	r3, [r3, #0]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d01e      	beq.n	8017e76 <map_normal+0x1fe>
 8017e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3a:	781b      	ldrb	r3, [r3, #0]
 8017e3c:	2bff      	cmp	r3, #255	; 0xff
 8017e3e:	d108      	bne.n	8017e52 <map_normal+0x1da>
 8017e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e42:	683a      	ldr	r2, [r7, #0]
 8017e44:	441a      	add	r2, r3
 8017e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e48:	68f9      	ldr	r1, [r7, #12]
 8017e4a:	440b      	add	r3, r1
 8017e4c:	7812      	ldrb	r2, [r2, #0]
 8017e4e:	701a      	strb	r2, [r3, #0]
 8017e50:	e011      	b.n	8017e76 <map_normal+0x1fe>
 8017e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e54:	683a      	ldr	r2, [r7, #0]
 8017e56:	4413      	add	r3, r2
 8017e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e5a:	68f9      	ldr	r1, [r7, #12]
 8017e5c:	4411      	add	r1, r2
 8017e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e60:	7815      	ldrb	r5, [r2, #0]
 8017e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e64:	68f8      	ldr	r0, [r7, #12]
 8017e66:	1884      	adds	r4, r0, r2
 8017e68:	462a      	mov	r2, r5
 8017e6a:	7809      	ldrb	r1, [r1, #0]
 8017e6c:	7818      	ldrb	r0, [r3, #0]
 8017e6e:	f7ff f822 	bl	8016eb6 <lv_color_mix>
 8017e72:	4603      	mov	r3, r0
 8017e74:	7023      	strb	r3, [r4, #0]
 8017e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e78:	3301      	adds	r3, #1
 8017e7a:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 1)
 8017e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7e:	781b      	ldrb	r3, [r3, #0]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d023      	beq.n	8017ecc <map_normal+0x254>
 8017e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	2bff      	cmp	r3, #255	; 0xff
 8017e8a:	d10a      	bne.n	8017ea2 <map_normal+0x22a>
 8017e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e8e:	3301      	adds	r3, #1
 8017e90:	683a      	ldr	r2, [r7, #0]
 8017e92:	441a      	add	r2, r3
 8017e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e96:	3301      	adds	r3, #1
 8017e98:	68f9      	ldr	r1, [r7, #12]
 8017e9a:	440b      	add	r3, r1
 8017e9c:	7812      	ldrb	r2, [r2, #0]
 8017e9e:	701a      	strb	r2, [r3, #0]
 8017ea0:	e014      	b.n	8017ecc <map_normal+0x254>
 8017ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea4:	3301      	adds	r3, #1
 8017ea6:	683a      	ldr	r2, [r7, #0]
 8017ea8:	4413      	add	r3, r2
 8017eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017eac:	3201      	adds	r2, #1
 8017eae:	68f9      	ldr	r1, [r7, #12]
 8017eb0:	4411      	add	r1, r2
 8017eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eb4:	7815      	ldrb	r5, [r2, #0]
 8017eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017eb8:	3201      	adds	r2, #1
 8017eba:	68f8      	ldr	r0, [r7, #12]
 8017ebc:	1884      	adds	r4, r0, r2
 8017ebe:	462a      	mov	r2, r5
 8017ec0:	7809      	ldrb	r1, [r1, #0]
 8017ec2:	7818      	ldrb	r0, [r3, #0]
 8017ec4:	f7fe fff7 	bl	8016eb6 <lv_color_mix>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	7023      	strb	r3, [r4, #0]
 8017ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ece:	3301      	adds	r3, #1
 8017ed0:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 2)
 8017ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed4:	781b      	ldrb	r3, [r3, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d023      	beq.n	8017f22 <map_normal+0x2aa>
 8017eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017edc:	781b      	ldrb	r3, [r3, #0]
 8017ede:	2bff      	cmp	r3, #255	; 0xff
 8017ee0:	d10a      	bne.n	8017ef8 <map_normal+0x280>
 8017ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee4:	3302      	adds	r3, #2
 8017ee6:	683a      	ldr	r2, [r7, #0]
 8017ee8:	441a      	add	r2, r3
 8017eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eec:	3302      	adds	r3, #2
 8017eee:	68f9      	ldr	r1, [r7, #12]
 8017ef0:	440b      	add	r3, r1
 8017ef2:	7812      	ldrb	r2, [r2, #0]
 8017ef4:	701a      	strb	r2, [r3, #0]
 8017ef6:	e014      	b.n	8017f22 <map_normal+0x2aa>
 8017ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017efa:	3302      	adds	r3, #2
 8017efc:	683a      	ldr	r2, [r7, #0]
 8017efe:	4413      	add	r3, r2
 8017f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f02:	3202      	adds	r2, #2
 8017f04:	68f9      	ldr	r1, [r7, #12]
 8017f06:	4411      	add	r1, r2
 8017f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f0a:	7815      	ldrb	r5, [r2, #0]
 8017f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f0e:	3202      	adds	r2, #2
 8017f10:	68f8      	ldr	r0, [r7, #12]
 8017f12:	1884      	adds	r4, r0, r2
 8017f14:	462a      	mov	r2, r5
 8017f16:	7809      	ldrb	r1, [r1, #0]
 8017f18:	7818      	ldrb	r0, [r3, #0]
 8017f1a:	f7fe ffcc 	bl	8016eb6 <lv_color_mix>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	7023      	strb	r3, [r4, #0]
 8017f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f24:	3301      	adds	r3, #1
 8017f26:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 3)
 8017f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d023      	beq.n	8017f78 <map_normal+0x300>
 8017f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f32:	781b      	ldrb	r3, [r3, #0]
 8017f34:	2bff      	cmp	r3, #255	; 0xff
 8017f36:	d10a      	bne.n	8017f4e <map_normal+0x2d6>
 8017f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f3a:	3303      	adds	r3, #3
 8017f3c:	683a      	ldr	r2, [r7, #0]
 8017f3e:	441a      	add	r2, r3
 8017f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f42:	3303      	adds	r3, #3
 8017f44:	68f9      	ldr	r1, [r7, #12]
 8017f46:	440b      	add	r3, r1
 8017f48:	7812      	ldrb	r2, [r2, #0]
 8017f4a:	701a      	strb	r2, [r3, #0]
 8017f4c:	e014      	b.n	8017f78 <map_normal+0x300>
 8017f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f50:	3303      	adds	r3, #3
 8017f52:	683a      	ldr	r2, [r7, #0]
 8017f54:	4413      	add	r3, r2
 8017f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f58:	3203      	adds	r2, #3
 8017f5a:	68f9      	ldr	r1, [r7, #12]
 8017f5c:	4411      	add	r1, r2
 8017f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f60:	7815      	ldrb	r5, [r2, #0]
 8017f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f64:	3203      	adds	r2, #3
 8017f66:	68f8      	ldr	r0, [r7, #12]
 8017f68:	1884      	adds	r4, r0, r2
 8017f6a:	462a      	mov	r2, r5
 8017f6c:	7809      	ldrb	r1, [r1, #0]
 8017f6e:	7818      	ldrb	r0, [r3, #0]
 8017f70:	f7fe ffa1 	bl	8016eb6 <lv_color_mix>
 8017f74:	4603      	mov	r3, r0
 8017f76:	7023      	strb	r3, [r4, #0]
 8017f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f7a:	3301      	adds	r3, #1
 8017f7c:	627b      	str	r3, [r7, #36]	; 0x24
                    mask32++;
 8017f7e:	6a3b      	ldr	r3, [r7, #32]
 8017f80:	3304      	adds	r3, #4
 8017f82:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8017f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f86:	3304      	adds	r3, #4
 8017f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f8c:	693b      	ldr	r3, [r7, #16]
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	f6ff af1b 	blt.w	8017dca <map_normal+0x152>
                mask_tmp_x = (const lv_opa_t *)mask32;
 8017f94:	6a3b      	ldr	r3, [r7, #32]
 8017f96:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 8017f98:	e028      	b.n	8017fec <map_normal+0x374>
                    MAP_NORMAL_MASK_PX(x)
 8017f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f9c:	781b      	ldrb	r3, [r3, #0]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d01e      	beq.n	8017fe0 <map_normal+0x368>
 8017fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa4:	781b      	ldrb	r3, [r3, #0]
 8017fa6:	2bff      	cmp	r3, #255	; 0xff
 8017fa8:	d108      	bne.n	8017fbc <map_normal+0x344>
 8017faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fac:	683a      	ldr	r2, [r7, #0]
 8017fae:	441a      	add	r2, r3
 8017fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb2:	68f9      	ldr	r1, [r7, #12]
 8017fb4:	440b      	add	r3, r1
 8017fb6:	7812      	ldrb	r2, [r2, #0]
 8017fb8:	701a      	strb	r2, [r3, #0]
 8017fba:	e011      	b.n	8017fe0 <map_normal+0x368>
 8017fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fbe:	683a      	ldr	r2, [r7, #0]
 8017fc0:	4413      	add	r3, r2
 8017fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fc4:	68f9      	ldr	r1, [r7, #12]
 8017fc6:	4411      	add	r1, r2
 8017fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fca:	7815      	ldrb	r5, [r2, #0]
 8017fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fce:	68f8      	ldr	r0, [r7, #12]
 8017fd0:	1884      	adds	r4, r0, r2
 8017fd2:	462a      	mov	r2, r5
 8017fd4:	7809      	ldrb	r1, [r1, #0]
 8017fd6:	7818      	ldrb	r0, [r3, #0]
 8017fd8:	f7fe ff6d 	bl	8016eb6 <lv_color_mix>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	7023      	strb	r3, [r4, #0]
 8017fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe2:	3301      	adds	r3, #1
 8017fe4:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 8017fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe8:	3301      	adds	r3, #1
 8017fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fee:	69fb      	ldr	r3, [r7, #28]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	dbd2      	blt.n	8017f9a <map_normal+0x322>
                dest_buf += dest_stride;
 8017ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017ff8:	68fa      	ldr	r2, [r7, #12]
 8017ffa:	4413      	add	r3, r2
 8017ffc:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8017ffe:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8018002:	683a      	ldr	r2, [r7, #0]
 8018004:	4413      	add	r3, r2
 8018006:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 8018008:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801800c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801800e:	4413      	add	r3, r2
 8018010:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 8018012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018014:	3301      	adds	r3, #1
 8018016:	62bb      	str	r3, [r7, #40]	; 0x28
 8018018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801801a:	69bb      	ldr	r3, [r7, #24]
 801801c:	429a      	cmp	r2, r3
 801801e:	f6ff ae9a 	blt.w	8017d56 <map_normal+0xde>
}
 8018022:	e04c      	b.n	80180be <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8018024:	2300      	movs	r3, #0
 8018026:	62bb      	str	r3, [r7, #40]	; 0x28
 8018028:	e045      	b.n	80180b6 <map_normal+0x43e>
                for(x = 0; x < w; x++) {
 801802a:	2300      	movs	r3, #0
 801802c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801802e:	e02c      	b.n	801808a <map_normal+0x412>
                    if(mask[x]) {
 8018030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018034:	4413      	add	r3, r2
 8018036:	781b      	ldrb	r3, [r3, #0]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d023      	beq.n	8018084 <map_normal+0x40c>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 801803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018040:	4413      	add	r3, r2
 8018042:	781b      	ldrb	r3, [r3, #0]
 8018044:	2bfc      	cmp	r3, #252	; 0xfc
 8018046:	d80a      	bhi.n	801805e <map_normal+0x3e6>
 8018048:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801804c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801804e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018050:	440a      	add	r2, r1
 8018052:	7812      	ldrb	r2, [r2, #0]
 8018054:	fb02 f303 	mul.w	r3, r2, r3
 8018058:	121b      	asrs	r3, r3, #8
 801805a:	b2db      	uxtb	r3, r3
 801805c:	e001      	b.n	8018062 <map_normal+0x3ea>
 801805e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018062:	75fb      	strb	r3, [r7, #23]
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 8018064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018066:	683a      	ldr	r2, [r7, #0]
 8018068:	4413      	add	r3, r2
 801806a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801806c:	68f9      	ldr	r1, [r7, #12]
 801806e:	4411      	add	r1, r2
 8018070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018072:	68f8      	ldr	r0, [r7, #12]
 8018074:	1884      	adds	r4, r0, r2
 8018076:	7dfa      	ldrb	r2, [r7, #23]
 8018078:	7809      	ldrb	r1, [r1, #0]
 801807a:	7818      	ldrb	r0, [r3, #0]
 801807c:	f7fe ff1b 	bl	8016eb6 <lv_color_mix>
 8018080:	4603      	mov	r3, r0
 8018082:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 8018084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018086:	3301      	adds	r3, #1
 8018088:	62fb      	str	r3, [r7, #44]	; 0x2c
 801808a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	429a      	cmp	r2, r3
 8018090:	dbce      	blt.n	8018030 <map_normal+0x3b8>
                dest_buf += dest_stride;
 8018092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018096:	68fa      	ldr	r2, [r7, #12]
 8018098:	4413      	add	r3, r2
 801809a:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 801809c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80180a0:	683a      	ldr	r2, [r7, #0]
 80180a2:	4413      	add	r3, r2
 80180a4:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 80180a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80180aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80180ac:	4413      	add	r3, r2
 80180ae:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 80180b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b2:	3301      	adds	r3, #1
 80180b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80180b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80180b8:	69bb      	ldr	r3, [r7, #24]
 80180ba:	429a      	cmp	r2, r3
 80180bc:	dbb5      	blt.n	801802a <map_normal+0x3b2>
}
 80180be:	bf00      	nop
 80180c0:	3730      	adds	r7, #48	; 0x30
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080180c8 <map_blended>:

#if LV_DRAW_COMPLEX
static void map_blended(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                        const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa,
                        const lv_opa_t * mask, lv_coord_t mask_stride, lv_blend_mode_t blend_mode)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b08e      	sub	sp, #56	; 0x38
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	60f8      	str	r0, [r7, #12]
 80180d0:	60b9      	str	r1, [r7, #8]
 80180d2:	603b      	str	r3, [r7, #0]
 80180d4:	4613      	mov	r3, r2
 80180d6:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 80180d8:	68b8      	ldr	r0, [r7, #8]
 80180da:	f7fe ff7f 	bl	8016fdc <lv_area_get_width>
 80180de:	4603      	mov	r3, r0
 80180e0:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 80180e2:	68b8      	ldr	r0, [r7, #8]
 80180e4:	f7fe ff91 	bl	801700a <lv_area_get_height>
 80180e8:	4603      	mov	r3, r0
 80180ea:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 80180ec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80180f0:	2b03      	cmp	r3, #3
 80180f2:	d00d      	beq.n	8018110 <map_blended+0x48>
 80180f4:	2b03      	cmp	r3, #3
 80180f6:	f300 80ef 	bgt.w	80182d8 <map_blended+0x210>
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d002      	beq.n	8018104 <map_blended+0x3c>
 80180fe:	2b02      	cmp	r3, #2
 8018100:	d003      	beq.n	801810a <map_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 8018102:	e0e9      	b.n	80182d8 <map_blended+0x210>
            blend_fp = color_blend_true_color_additive;
 8018104:	4b76      	ldr	r3, [pc, #472]	; (80182e0 <map_blended+0x218>)
 8018106:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8018108:	e005      	b.n	8018116 <map_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 801810a:	4b76      	ldr	r3, [pc, #472]	; (80182e4 <map_blended+0x21c>)
 801810c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801810e:	e002      	b.n	8018116 <map_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 8018110:	4b75      	ldr	r3, [pc, #468]	; (80182e8 <map_blended+0x220>)
 8018112:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8018114:	bf00      	nop
    }

    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8018116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018118:	2b00      	cmp	r3, #0
 801811a:	d151      	bne.n	80181c0 <map_blended+0xf8>
        last_dest_color = dest_buf[0];
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	781b      	ldrb	r3, [r3, #0]
 8018120:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 8018122:	683b      	ldr	r3, [r7, #0]
 8018124:	781b      	ldrb	r3, [r3, #0]
 8018126:	763b      	strb	r3, [r7, #24]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8018128:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801812e:	7f39      	ldrb	r1, [r7, #28]
 8018130:	7e38      	ldrb	r0, [r7, #24]
 8018132:	4798      	blx	r3
 8018134:	4603      	mov	r3, r0
 8018136:	753b      	strb	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 8018138:	2300      	movs	r3, #0
 801813a:	633b      	str	r3, [r7, #48]	; 0x30
 801813c:	e03b      	b.n	80181b6 <map_blended+0xee>
            for(x = 0; x < w; x++) {
 801813e:	2300      	movs	r3, #0
 8018140:	637b      	str	r3, [r7, #52]	; 0x34
 8018142:	e027      	b.n	8018194 <map_blended+0xcc>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 8018144:	7e3a      	ldrb	r2, [r7, #24]
 8018146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018148:	6839      	ldr	r1, [r7, #0]
 801814a:	440b      	add	r3, r1
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	429a      	cmp	r2, r3
 8018150:	d106      	bne.n	8018160 <map_blended+0x98>
 8018152:	7f3a      	ldrb	r2, [r7, #28]
 8018154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018156:	68f9      	ldr	r1, [r7, #12]
 8018158:	440b      	add	r3, r1
 801815a:	781b      	ldrb	r3, [r3, #0]
 801815c:	429a      	cmp	r2, r3
 801815e:	d011      	beq.n	8018184 <map_blended+0xbc>
                    last_dest_color = dest_buf[x];
 8018160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018162:	68fa      	ldr	r2, [r7, #12]
 8018164:	4413      	add	r3, r2
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 801816a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801816c:	683a      	ldr	r2, [r7, #0]
 801816e:	4413      	add	r3, r2
 8018170:	781b      	ldrb	r3, [r3, #0]
 8018172:	763b      	strb	r3, [r7, #24]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8018174:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801817a:	7f39      	ldrb	r1, [r7, #28]
 801817c:	7e38      	ldrb	r0, [r7, #24]
 801817e:	4798      	blx	r3
 8018180:	4603      	mov	r3, r0
 8018182:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 8018184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018186:	68fa      	ldr	r2, [r7, #12]
 8018188:	4413      	add	r3, r2
 801818a:	7d3a      	ldrb	r2, [r7, #20]
 801818c:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 801818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018190:	3301      	adds	r3, #1
 8018192:	637b      	str	r3, [r7, #52]	; 0x34
 8018194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018198:	429a      	cmp	r2, r3
 801819a:	dbd3      	blt.n	8018144 <map_blended+0x7c>
            }
            dest_buf += dest_stride;
 801819c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80181a0:	68fa      	ldr	r2, [r7, #12]
 80181a2:	4413      	add	r3, r2
 80181a4:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 80181a6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80181aa:	683a      	ldr	r2, [r7, #0]
 80181ac:	4413      	add	r3, r2
 80181ae:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 80181b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b2:	3301      	adds	r3, #1
 80181b4:	633b      	str	r3, [r7, #48]	; 0x30
 80181b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181b8:	6a3b      	ldr	r3, [r7, #32]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	dbbf      	blt.n	801813e <map_blended+0x76>
 80181be:	e08c      	b.n	80182da <map_blended+0x212>
        }
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	781b      	ldrb	r3, [r3, #0]
 80181c4:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	781b      	ldrb	r3, [r3, #0]
 80181ca:	763b      	strb	r3, [r7, #24]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 80181cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181ce:	781b      	ldrb	r3, [r3, #0]
 80181d0:	2bfc      	cmp	r3, #252	; 0xfc
 80181d2:	d808      	bhi.n	80181e6 <map_blended+0x11e>
 80181d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80181d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80181da:	7812      	ldrb	r2, [r2, #0]
 80181dc:	fb02 f303 	mul.w	r3, r2, r3
 80181e0:	121b      	asrs	r3, r3, #8
 80181e2:	b2db      	uxtb	r3, r3
 80181e4:	e001      	b.n	80181ea <map_blended+0x122>
 80181e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80181ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 80181ee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80181f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f4:	7f39      	ldrb	r1, [r7, #28]
 80181f6:	7e38      	ldrb	r0, [r7, #24]
 80181f8:	4798      	blx	r3
 80181fa:	4603      	mov	r3, r0
 80181fc:	743b      	strb	r3, [r7, #16]
        for(y = 0; y < h; y++) {
 80181fe:	2300      	movs	r3, #0
 8018200:	633b      	str	r3, [r7, #48]	; 0x30
 8018202:	e064      	b.n	80182ce <map_blended+0x206>
            for(x = 0; x < w; x++) {
 8018204:	2300      	movs	r3, #0
 8018206:	637b      	str	r3, [r7, #52]	; 0x34
 8018208:	e04b      	b.n	80182a2 <map_blended+0x1da>
                if(mask[x] == 0) continue;
 801820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801820c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801820e:	4413      	add	r3, r2
 8018210:	781b      	ldrb	r3, [r3, #0]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d041      	beq.n	801829a <map_blended+0x1d2>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8018216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801821a:	4413      	add	r3, r2
 801821c:	781b      	ldrb	r3, [r3, #0]
 801821e:	2bfc      	cmp	r3, #252	; 0xfc
 8018220:	d80a      	bhi.n	8018238 <map_blended+0x170>
 8018222:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018228:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801822a:	440a      	add	r2, r1
 801822c:	7812      	ldrb	r2, [r2, #0]
 801822e:	fb02 f303 	mul.w	r3, r2, r3
 8018232:	121b      	asrs	r3, r3, #8
 8018234:	b2db      	uxtb	r3, r3
 8018236:	e001      	b.n	801823c <map_blended+0x174>
 8018238:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801823c:	77fb      	strb	r3, [r7, #31]
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 801823e:	7e3a      	ldrb	r2, [r7, #24]
 8018240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018242:	6839      	ldr	r1, [r7, #0]
 8018244:	440b      	add	r3, r1
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	429a      	cmp	r2, r3
 801824a:	d10b      	bne.n	8018264 <map_blended+0x19c>
 801824c:	7f3a      	ldrb	r2, [r7, #28]
 801824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018250:	68f9      	ldr	r1, [r7, #12]
 8018252:	440b      	add	r3, r1
 8018254:	781b      	ldrb	r3, [r3, #0]
 8018256:	429a      	cmp	r2, r3
 8018258:	d104      	bne.n	8018264 <map_blended+0x19c>
 801825a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801825e:	7ffb      	ldrb	r3, [r7, #31]
 8018260:	429a      	cmp	r2, r3
 8018262:	d014      	beq.n	801828e <map_blended+0x1c6>
                    last_dest_color = dest_buf[x];
 8018264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018266:	68fa      	ldr	r2, [r7, #12]
 8018268:	4413      	add	r3, r2
 801826a:	781b      	ldrb	r3, [r3, #0]
 801826c:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 801826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018270:	683a      	ldr	r2, [r7, #0]
 8018272:	4413      	add	r3, r2
 8018274:	781b      	ldrb	r3, [r3, #0]
 8018276:	763b      	strb	r3, [r7, #24]
                    last_opa = opa_tmp;
 8018278:	7ffb      	ldrb	r3, [r7, #31]
 801827a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 801827e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8018282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018284:	7f39      	ldrb	r1, [r7, #28]
 8018286:	7e38      	ldrb	r0, [r7, #24]
 8018288:	4798      	blx	r3
 801828a:	4603      	mov	r3, r0
 801828c:	743b      	strb	r3, [r7, #16]
                }
                dest_buf[x] = last_res_color;
 801828e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018290:	68fa      	ldr	r2, [r7, #12]
 8018292:	4413      	add	r3, r2
 8018294:	7c3a      	ldrb	r2, [r7, #16]
 8018296:	701a      	strb	r2, [r3, #0]
 8018298:	e000      	b.n	801829c <map_blended+0x1d4>
                if(mask[x] == 0) continue;
 801829a:	bf00      	nop
            for(x = 0; x < w; x++) {
 801829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801829e:	3301      	adds	r3, #1
 80182a0:	637b      	str	r3, [r7, #52]	; 0x34
 80182a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80182a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a6:	429a      	cmp	r2, r3
 80182a8:	dbaf      	blt.n	801820a <map_blended+0x142>
            }
            dest_buf += dest_stride;
 80182aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80182ae:	68fa      	ldr	r2, [r7, #12]
 80182b0:	4413      	add	r3, r2
 80182b2:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 80182b4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80182b8:	683a      	ldr	r2, [r7, #0]
 80182ba:	4413      	add	r3, r2
 80182bc:	603b      	str	r3, [r7, #0]
            mask += mask_stride;
 80182be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80182c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80182c4:	4413      	add	r3, r2
 80182c6:	64bb      	str	r3, [r7, #72]	; 0x48
        for(y = 0; y < h; y++) {
 80182c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ca:	3301      	adds	r3, #1
 80182cc:	633b      	str	r3, [r7, #48]	; 0x30
 80182ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182d0:	6a3b      	ldr	r3, [r7, #32]
 80182d2:	429a      	cmp	r2, r3
 80182d4:	db96      	blt.n	8018204 <map_blended+0x13c>
 80182d6:	e000      	b.n	80182da <map_blended+0x212>
            return;
 80182d8:	bf00      	nop
        }
    }
}
 80182da:	3738      	adds	r7, #56	; 0x38
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}
 80182e0:	080182ed 	.word	0x080182ed
 80182e4:	0801833d 	.word	0x0801833d
 80182e8:	080183f3 	.word	0x080183f3

080182ec <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	7138      	strb	r0, [r7, #4]
 80182f4:	7039      	strb	r1, [r7, #0]
 80182f6:	4613      	mov	r3, r2
 80182f8:	70fb      	strb	r3, [r7, #3]

    if(opa <= LV_OPA_MIN) return bg;
 80182fa:	78fb      	ldrb	r3, [r7, #3]
 80182fc:	2b02      	cmp	r3, #2
 80182fe:	d801      	bhi.n	8018304 <color_blend_true_color_additive+0x18>
 8018300:	783b      	ldrb	r3, [r7, #0]
 8018302:	e017      	b.n	8018334 <color_blend_true_color_additive+0x48>

    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
 8018304:	783b      	ldrb	r3, [r7, #0]
 8018306:	461a      	mov	r2, r3
 8018308:	793b      	ldrb	r3, [r7, #4]
 801830a:	4413      	add	r3, r2
 801830c:	60fb      	str	r3, [r7, #12]
    fg.full = LV_MIN(tmp, 1);
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	2b00      	cmp	r3, #0
 8018312:	bf14      	ite	ne
 8018314:	2301      	movne	r3, #1
 8018316:	2300      	moveq	r3, #0
 8018318:	b2db      	uxtb	r3, r3
 801831a:	713b      	strb	r3, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 801831c:	78fb      	ldrb	r3, [r7, #3]
 801831e:	2bff      	cmp	r3, #255	; 0xff
 8018320:	d101      	bne.n	8018326 <color_blend_true_color_additive+0x3a>
 8018322:	793b      	ldrb	r3, [r7, #4]
 8018324:	e006      	b.n	8018334 <color_blend_true_color_additive+0x48>

    return lv_color_mix(fg, bg, opa);
 8018326:	78fb      	ldrb	r3, [r7, #3]
 8018328:	461a      	mov	r2, r3
 801832a:	7839      	ldrb	r1, [r7, #0]
 801832c:	7938      	ldrb	r0, [r7, #4]
 801832e:	f7fe fdc2 	bl	8016eb6 <lv_color_mix>
 8018332:	4603      	mov	r3, r0
}
 8018334:	4618      	mov	r0, r3
 8018336:	3710      	adds	r7, #16
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
 8018342:	7138      	strb	r0, [r7, #4]
 8018344:	7039      	strb	r1, [r7, #0]
 8018346:	4613      	mov	r3, r2
 8018348:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 801834a:	78fb      	ldrb	r3, [r7, #3]
 801834c:	2b02      	cmp	r3, #2
 801834e:	d801      	bhi.n	8018354 <color_blend_true_color_subtractive+0x18>
 8018350:	783b      	ldrb	r3, [r7, #0]
 8018352:	e04a      	b.n	80183ea <color_blend_true_color_subtractive+0xae>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 8018354:	783b      	ldrb	r3, [r7, #0]
 8018356:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801835a:	b2db      	uxtb	r3, r3
 801835c:	461a      	mov	r2, r3
 801835e:	793b      	ldrb	r3, [r7, #4]
 8018360:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018364:	b2db      	uxtb	r3, r3
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	60fb      	str	r3, [r7, #12]
    fg.ch.red = LV_MAX(tmp, 0);
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018370:	f003 0301 	and.w	r3, r3, #1
 8018374:	b2da      	uxtb	r2, r3
 8018376:	793b      	ldrb	r3, [r7, #4]
 8018378:	f362 0300 	bfi	r3, r2, #0, #1
 801837c:	713b      	strb	r3, [r7, #4]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 801837e:	783b      	ldrb	r3, [r7, #0]
 8018380:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018384:	b2db      	uxtb	r3, r3
 8018386:	461a      	mov	r2, r3
 8018388:	793b      	ldrb	r3, [r7, #4]
 801838a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801838e:	b2db      	uxtb	r3, r3
 8018390:	1ad3      	subs	r3, r2, r3
 8018392:	60fb      	str	r3, [r7, #12]
    fg.ch.green = LV_MAX(tmp, 0);
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801839a:	f003 0301 	and.w	r3, r3, #1
 801839e:	b2da      	uxtb	r2, r3
 80183a0:	793b      	ldrb	r3, [r7, #4]
 80183a2:	f362 0300 	bfi	r3, r2, #0, #1
 80183a6:	713b      	strb	r3, [r7, #4]
    tmp = LV_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 80183a8:	783b      	ldrb	r3, [r7, #0]
 80183aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80183ae:	b2db      	uxtb	r3, r3
 80183b0:	461a      	mov	r2, r3
 80183b2:	793b      	ldrb	r3, [r7, #4]
 80183b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80183b8:	b2db      	uxtb	r3, r3
 80183ba:	1ad3      	subs	r3, r2, r3
 80183bc:	60fb      	str	r3, [r7, #12]
    fg.ch.blue = LV_MAX(tmp, 0);
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183c4:	f003 0301 	and.w	r3, r3, #1
 80183c8:	b2da      	uxtb	r2, r3
 80183ca:	793b      	ldrb	r3, [r7, #4]
 80183cc:	f362 0300 	bfi	r3, r2, #0, #1
 80183d0:	713b      	strb	r3, [r7, #4]

    if(opa == LV_OPA_COVER) return fg;
 80183d2:	78fb      	ldrb	r3, [r7, #3]
 80183d4:	2bff      	cmp	r3, #255	; 0xff
 80183d6:	d101      	bne.n	80183dc <color_blend_true_color_subtractive+0xa0>
 80183d8:	793b      	ldrb	r3, [r7, #4]
 80183da:	e006      	b.n	80183ea <color_blend_true_color_subtractive+0xae>

    return lv_color_mix(fg, bg, opa);
 80183dc:	78fb      	ldrb	r3, [r7, #3]
 80183de:	461a      	mov	r2, r3
 80183e0:	7839      	ldrb	r1, [r7, #0]
 80183e2:	7938      	ldrb	r0, [r7, #4]
 80183e4:	f7fe fd67 	bl	8016eb6 <lv_color_mix>
 80183e8:	4603      	mov	r3, r0
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	3710      	adds	r7, #16
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}

080183f2 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80183f2:	b580      	push	{r7, lr}
 80183f4:	b082      	sub	sp, #8
 80183f6:	af00      	add	r7, sp, #0
 80183f8:	7138      	strb	r0, [r7, #4]
 80183fa:	7039      	strb	r1, [r7, #0]
 80183fc:	4613      	mov	r3, r2
 80183fe:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 8018400:	78fb      	ldrb	r3, [r7, #3]
 8018402:	2b02      	cmp	r3, #2
 8018404:	d801      	bhi.n	801840a <color_blend_true_color_multiply+0x18>
 8018406:	783b      	ldrb	r3, [r7, #0]
 8018408:	e00b      	b.n	8018422 <color_blend_true_color_multiply+0x30>
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 801840a:	78fb      	ldrb	r3, [r7, #3]
 801840c:	2bff      	cmp	r3, #255	; 0xff
 801840e:	d101      	bne.n	8018414 <color_blend_true_color_multiply+0x22>
 8018410:	793b      	ldrb	r3, [r7, #4]
 8018412:	e006      	b.n	8018422 <color_blend_true_color_multiply+0x30>

    return lv_color_mix(fg, bg, opa);
 8018414:	78fb      	ldrb	r3, [r7, #3]
 8018416:	461a      	mov	r2, r3
 8018418:	7839      	ldrb	r1, [r7, #0]
 801841a:	7938      	ldrb	r0, [r7, #4]
 801841c:	f7fe fd4b 	bl	8016eb6 <lv_color_mix>
 8018420:	4603      	mov	r3, r0
}
 8018422:	4618      	mov	r0, r3
 8018424:	3708      	adds	r7, #8
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}

0801842a <lv_color_to32>:
{
 801842a:	b480      	push	{r7}
 801842c:	b083      	sub	sp, #12
 801842e:	af00      	add	r7, sp, #0
 8018430:	7138      	strb	r0, [r7, #4]
    if(color.full == 0)
 8018432:	793b      	ldrb	r3, [r7, #4]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d102      	bne.n	801843e <lv_color_to32+0x14>
        return 0xFF000000;
 8018438:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 801843c:	e001      	b.n	8018442 <lv_color_to32+0x18>
        return 0xFFFFFFFF;
 801843e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018442:	4618      	mov	r0, r3
 8018444:	370c      	adds	r7, #12
 8018446:	46bd      	mov	sp, r7
 8018448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844c:	4770      	bx	lr

0801844e <compute_key>:
    const void * ptr;
    const uint32_t value;
};

static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
{
 801844e:	b480      	push	{r7}
 8018450:	b085      	sub	sp, #20
 8018452:	af00      	add	r7, sp, #0
 8018454:	6078      	str	r0, [r7, #4]
 8018456:	460b      	mov	r3, r1
 8018458:	807b      	strh	r3, [r7, #2]
 801845a:	4613      	mov	r3, r2
 801845c:	803b      	strh	r3, [r7, #0]
    union void_cast v;
    v.ptr = g;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	60fb      	str	r3, [r7, #12]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8018462:	68fa      	ldr	r2, [r7, #12]
 8018464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018468:	4053      	eors	r3, r2
 801846a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801846e:	1052      	asrs	r2, r2, #1
 8018470:	b212      	sxth	r2, r2
 8018472:	4053      	eors	r3, r2
}
 8018474:	4618      	mov	r0, r3
 8018476:	3714      	adds	r7, #20
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr

08018480 <get_cache_item_size>:

static size_t get_cache_item_size(lv_grad_t * c)
{
 8018480:	b480      	push	{r7}
 8018482:	b085      	sub	sp, #20
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801848e:	3303      	adds	r3, #3
 8018490:	f023 0303 	bic.w	r3, r3, #3
 8018494:	3310      	adds	r3, #16
 8018496:	60fb      	str	r3, [r7, #12]
    s += ALIGN(c->size * sizeof(lv_color32_t));
#if LV_DITHER_ERROR_DIFFUSION == 1
    s += ALIGN(c->w * sizeof(lv_scolor24_t));
#endif
#endif
    return s;
 8018498:	68fb      	ldr	r3, [r7, #12]
}
 801849a:	4618      	mov	r0, r3
 801849c:	3714      	adds	r7, #20
 801849e:	46bd      	mov	sp, r7
 80184a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a4:	4770      	bx	lr
	...

080184a8 <next_in_cache>:

static lv_grad_t * next_in_cache(lv_grad_t * item)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b084      	sub	sp, #16
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	6078      	str	r0, [r7, #4]
    if(grad_cache_size == 0) return NULL;
 80184b0:	4b0f      	ldr	r3, [pc, #60]	; (80184f0 <next_in_cache+0x48>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d101      	bne.n	80184bc <next_in_cache+0x14>
 80184b8:	2300      	movs	r3, #0
 80184ba:	e015      	b.n	80184e8 <next_in_cache+0x40>

    if(item == NULL)
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d102      	bne.n	80184c8 <next_in_cache+0x20>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 80184c2:	4b0c      	ldr	r3, [pc, #48]	; (80184f4 <next_in_cache+0x4c>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	e00f      	b.n	80184e8 <next_in_cache+0x40>

    size_t s = get_cache_item_size(item);
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	f7ff ffd9 	bl	8018480 <get_cache_item_size>
 80184ce:	60f8      	str	r0, [r7, #12]
    /*Compute the size for this cache item*/
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	441a      	add	r2, r3
 80184d6:	4b08      	ldr	r3, [pc, #32]	; (80184f8 <next_in_cache+0x50>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	429a      	cmp	r2, r3
 80184dc:	d301      	bcc.n	80184e2 <next_in_cache+0x3a>
 80184de:	2300      	movs	r3, #0
 80184e0:	e002      	b.n	80184e8 <next_in_cache+0x40>
    else return (lv_grad_t *)((uint8_t *)item + s);
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	4413      	add	r3, r2
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3710      	adds	r7, #16
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}
 80184f0:	20000714 	.word	0x20000714
 80184f4:	20000a50 	.word	0x20000a50
 80184f8:	20000718 	.word	0x20000718

080184fc <iterate_cache>:

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b086      	sub	sp, #24
 8018500:	af00      	add	r7, sp, #0
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
    lv_grad_t * first = next_in_cache(NULL);
 8018508:	2000      	movs	r0, #0
 801850a:	f7ff ffcd 	bl	80184a8 <next_in_cache>
 801850e:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 8018510:	e012      	b.n	8018538 <iterate_cache+0x3c>
        if((*func)(first, ctx) == LV_RES_OK) {
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	68b9      	ldr	r1, [r7, #8]
 8018516:	6978      	ldr	r0, [r7, #20]
 8018518:	4798      	blx	r3
 801851a:	4603      	mov	r3, r0
 801851c:	2b01      	cmp	r3, #1
 801851e:	d107      	bne.n	8018530 <iterate_cache+0x34>
            if(out != NULL) *out = first;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d002      	beq.n	801852c <iterate_cache+0x30>
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	697a      	ldr	r2, [r7, #20]
 801852a:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 801852c:	2301      	movs	r3, #1
 801852e:	e00d      	b.n	801854c <iterate_cache+0x50>
        }
        first = next_in_cache(first);
 8018530:	6978      	ldr	r0, [r7, #20]
 8018532:	f7ff ffb9 	bl	80184a8 <next_in_cache>
 8018536:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d005      	beq.n	801854a <iterate_cache+0x4e>
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8018546:	2b00      	cmp	r3, #0
 8018548:	d1e3      	bne.n	8018512 <iterate_cache+0x16>
    }
    return LV_RES_INV;
 801854a:	2300      	movs	r3, #0
}
 801854c:	4618      	mov	r0, r3
 801854e:	3718      	adds	r7, #24
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}

08018554 <find_oldest_item_life>:

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
 8018554:	b480      	push	{r7}
 8018556:	b085      	sub	sp, #20
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 801855e:	683b      	ldr	r3, [r7, #0]
 8018560:	60fb      	str	r3, [r7, #12]
    if(c->life < *min_life) *min_life = c->life;
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	685b      	ldr	r3, [r3, #4]
 8018566:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801856a:	461a      	mov	r2, r3
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	429a      	cmp	r2, r3
 8018572:	d206      	bcs.n	8018582 <find_oldest_item_life+0x2e>
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	685b      	ldr	r3, [r3, #4]
 8018578:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801857c:	461a      	mov	r2, r3
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	601a      	str	r2, [r3, #0]
    return LV_RES_INV;
 8018582:	2300      	movs	r3, #0
}
 8018584:	4618      	mov	r0, r3
 8018586:	3714      	adds	r7, #20
 8018588:	46bd      	mov	sp, r7
 801858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858e:	4770      	bx	lr

08018590 <free_item>:

static void free_item(lv_grad_t * c)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b086      	sub	sp, #24
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
    size_t size = get_cache_item_size(c);
 8018598:	6878      	ldr	r0, [r7, #4]
 801859a:	f7ff ff71 	bl	8018480 <get_cache_item_size>
 801859e:	6178      	str	r0, [r7, #20]
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 80185a0:	4b1d      	ldr	r3, [pc, #116]	; (8018618 <free_item+0x88>)
 80185a2:	681a      	ldr	r2, [r3, #0]
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	1ad3      	subs	r3, r2, r3
 80185a8:	461a      	mov	r2, r3
 80185aa:	697b      	ldr	r3, [r7, #20]
 80185ac:	1ad3      	subs	r3, r2, r3
 80185ae:	613b      	str	r3, [r7, #16]
    grad_cache_end -= size;
 80185b0:	4b19      	ldr	r3, [pc, #100]	; (8018618 <free_item+0x88>)
 80185b2:	681a      	ldr	r2, [r3, #0]
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	425b      	negs	r3, r3
 80185b8:	4413      	add	r3, r2
 80185ba:	4a17      	ldr	r2, [pc, #92]	; (8018618 <free_item+0x88>)
 80185bc:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 80185be:	693b      	ldr	r3, [r7, #16]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d024      	beq.n	801860e <free_item+0x7e>
        uint8_t * old = (uint8_t *)c;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	60fb      	str	r3, [r7, #12]
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 80185c8:	687a      	ldr	r2, [r7, #4]
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	4413      	add	r3, r2
 80185ce:	693a      	ldr	r2, [r7, #16]
 80185d0:	4619      	mov	r1, r3
 80185d2:	6878      	ldr	r0, [r7, #4]
 80185d4:	f009 fd22 	bl	802201c <lv_memcpy>
        /* Then need to fix all internal pointers too */
        while((uint8_t *)c != grad_cache_end) {
 80185d8:	e00d      	b.n	80185f6 <free_item+0x66>
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	689a      	ldr	r2, [r3, #8]
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	425b      	negs	r3, r3
 80185e2:	441a      	add	r2, r3
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	609a      	str	r2, [r3, #8]
            c->hmap = (lv_color32_t *)(((uint8_t *)c->hmap) - size);
#if LV_DITHER_ERROR_DIFFUSION == 1
            c->error_acc = (lv_scolor24_t *)(((uint8_t *)c->error_acc) - size);
#endif
#endif
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 80185e8:	6878      	ldr	r0, [r7, #4]
 80185ea:	f7ff ff49 	bl	8018480 <get_cache_item_size>
 80185ee:	4602      	mov	r2, r0
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	4413      	add	r3, r2
 80185f4:	607b      	str	r3, [r7, #4]
        while((uint8_t *)c != grad_cache_end) {
 80185f6:	4b08      	ldr	r3, [pc, #32]	; (8018618 <free_item+0x88>)
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	687a      	ldr	r2, [r7, #4]
 80185fc:	429a      	cmp	r2, r3
 80185fe:	d1ec      	bne.n	80185da <free_item+0x4a>
        }
        lv_memset_00(old + next_items_size, size);
 8018600:	68fa      	ldr	r2, [r7, #12]
 8018602:	693b      	ldr	r3, [r7, #16]
 8018604:	4413      	add	r3, r2
 8018606:	6979      	ldr	r1, [r7, #20]
 8018608:	4618      	mov	r0, r3
 801860a:	f009 ffad 	bl	8022568 <lv_memset_00>
    }
}
 801860e:	bf00      	nop
 8018610:	3718      	adds	r7, #24
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	20000718 	.word	0x20000718

0801861c <kill_oldest_item>:

static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b084      	sub	sp, #16
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 8018626:	683b      	ldr	r3, [r7, #0]
 8018628:	60fb      	str	r3, [r7, #12]
    if(c->life == *min_life) {
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	685b      	ldr	r3, [r3, #4]
 801862e:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8018632:	461a      	mov	r2, r3
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	429a      	cmp	r2, r3
 801863a:	d104      	bne.n	8018646 <kill_oldest_item+0x2a>
        /*Found, let's kill it*/
        free_item(c);
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7ff ffa7 	bl	8018590 <free_item>
        return LV_RES_OK;
 8018642:	2301      	movs	r3, #1
 8018644:	e000      	b.n	8018648 <kill_oldest_item+0x2c>
    }
    return LV_RES_INV;
 8018646:	2300      	movs	r3, #0
}
 8018648:	4618      	mov	r0, r3
 801864a:	3710      	adds	r7, #16
 801864c:	46bd      	mov	sp, r7
 801864e:	bd80      	pop	{r7, pc}

08018650 <find_item>:

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
 8018650:	b480      	push	{r7}
 8018652:	b085      	sub	sp, #20
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
 8018658:	6039      	str	r1, [r7, #0]
    uint32_t * k = (uint32_t *)ctx;
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	60fb      	str	r3, [r7, #12]
    if(c->key == *k) return LV_RES_OK;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	429a      	cmp	r2, r3
 8018668:	d101      	bne.n	801866e <find_item+0x1e>
 801866a:	2301      	movs	r3, #1
 801866c:	e000      	b.n	8018670 <find_item+0x20>
    return LV_RES_INV;
 801866e:	2300      	movs	r3, #0
}
 8018670:	4618      	mov	r0, r3
 8018672:	3714      	adds	r7, #20
 8018674:	46bd      	mov	sp, r7
 8018676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867a:	4770      	bx	lr

0801867c <allocate_item>:

static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b088      	sub	sp, #32
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	460b      	mov	r3, r1
 8018686:	807b      	strh	r3, [r7, #2]
 8018688:	4613      	mov	r3, r2
 801868a:	803b      	strh	r3, [r7, #0]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	795b      	ldrb	r3, [r3, #5]
 8018690:	f003 0307 	and.w	r3, r3, #7
 8018694:	b2db      	uxtb	r3, r3
 8018696:	2b02      	cmp	r3, #2
 8018698:	d102      	bne.n	80186a0 <allocate_item+0x24>
 801869a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801869e:	e001      	b.n	80186a4 <allocate_item+0x28>
 80186a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80186a4:	82fb      	strh	r3, [r7, #22]
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 80186a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80186aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80186ae:	4293      	cmp	r3, r2
 80186b0:	bfb8      	it	lt
 80186b2:	4613      	movlt	r3, r2
 80186b4:	82bb      	strh	r3, [r7, #20]
                                           no dithering is selected where it's used vertically */

    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 80186b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80186ba:	3303      	adds	r3, #3
 80186bc:	f023 0303 	bic.w	r3, r3, #3
 80186c0:	3310      	adds	r3, #16
 80186c2:	613b      	str	r3, [r7, #16]
#if LV_DITHER_ERROR_DIFFUSION == 1
    req_size += ALIGN(w * sizeof(lv_scolor24_t));
#endif
#endif

    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 80186c4:	4b49      	ldr	r3, [pc, #292]	; (80187ec <allocate_item+0x170>)
 80186c6:	681a      	ldr	r2, [r3, #0]
 80186c8:	4b49      	ldr	r3, [pc, #292]	; (80187f0 <allocate_item+0x174>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	1ad3      	subs	r3, r2, r3
 80186ce:	61fb      	str	r3, [r7, #28]
    lv_grad_t * item = NULL;
 80186d0:	2300      	movs	r3, #0
 80186d2:	61bb      	str	r3, [r7, #24]
    if(req_size + act_size < grad_cache_size) {
 80186d4:	693a      	ldr	r2, [r7, #16]
 80186d6:	69fb      	ldr	r3, [r7, #28]
 80186d8:	441a      	add	r2, r3
 80186da:	4b46      	ldr	r3, [pc, #280]	; (80187f4 <allocate_item+0x178>)
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	429a      	cmp	r2, r3
 80186e0:	d208      	bcs.n	80186f4 <allocate_item+0x78>
        item = (lv_grad_t *)grad_cache_end;
 80186e2:	4b42      	ldr	r3, [pc, #264]	; (80187ec <allocate_item+0x170>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	61bb      	str	r3, [r7, #24]
        item->not_cached = 0;
 80186e8:	69ba      	ldr	r2, [r7, #24]
 80186ea:	79d3      	ldrb	r3, [r2, #7]
 80186ec:	f36f 13c7 	bfc	r3, #7, #1
 80186f0:	71d3      	strb	r3, [r2, #7]
 80186f2:	e03e      	b.n	8018772 <allocate_item+0xf6>
    }
    else {
        /*Need to evict items from cache until we find enough space to allocate this one */
        if(req_size <= grad_cache_size) {
 80186f4:	4b3f      	ldr	r3, [pc, #252]	; (80187f4 <allocate_item+0x178>)
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	693a      	ldr	r2, [r7, #16]
 80186fa:	429a      	cmp	r2, r3
 80186fc:	d827      	bhi.n	801874e <allocate_item+0xd2>
            while(act_size + req_size > grad_cache_size) {
 80186fe:	e016      	b.n	801872e <allocate_item+0xb2>
                uint32_t oldest_life = UINT32_MAX;
 8018700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018704:	60bb      	str	r3, [r7, #8]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8018706:	f107 0308 	add.w	r3, r7, #8
 801870a:	2200      	movs	r2, #0
 801870c:	4619      	mov	r1, r3
 801870e:	483a      	ldr	r0, [pc, #232]	; (80187f8 <allocate_item+0x17c>)
 8018710:	f7ff fef4 	bl	80184fc <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8018714:	f107 0308 	add.w	r3, r7, #8
 8018718:	2200      	movs	r2, #0
 801871a:	4619      	mov	r1, r3
 801871c:	4837      	ldr	r0, [pc, #220]	; (80187fc <allocate_item+0x180>)
 801871e:	f7ff feed 	bl	80184fc <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8018722:	4b32      	ldr	r3, [pc, #200]	; (80187ec <allocate_item+0x170>)
 8018724:	681a      	ldr	r2, [r3, #0]
 8018726:	4b32      	ldr	r3, [pc, #200]	; (80187f0 <allocate_item+0x174>)
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	1ad3      	subs	r3, r2, r3
 801872c:	61fb      	str	r3, [r7, #28]
            while(act_size + req_size > grad_cache_size) {
 801872e:	69fa      	ldr	r2, [r7, #28]
 8018730:	693b      	ldr	r3, [r7, #16]
 8018732:	441a      	add	r2, r3
 8018734:	4b2f      	ldr	r3, [pc, #188]	; (80187f4 <allocate_item+0x178>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	429a      	cmp	r2, r3
 801873a:	d8e1      	bhi.n	8018700 <allocate_item+0x84>
            }
            item = (lv_grad_t *)grad_cache_end;
 801873c:	4b2b      	ldr	r3, [pc, #172]	; (80187ec <allocate_item+0x170>)
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	61bb      	str	r3, [r7, #24]
            item->not_cached = 0;
 8018742:	69ba      	ldr	r2, [r7, #24]
 8018744:	79d3      	ldrb	r3, [r2, #7]
 8018746:	f36f 13c7 	bfc	r3, #7, #1
 801874a:	71d3      	strb	r3, [r2, #7]
 801874c:	e011      	b.n	8018772 <allocate_item+0xf6>
        }
        else {
            /*The cache is too small. Allocate the item manually and free it later.*/
            item = lv_mem_alloc(req_size);
 801874e:	6938      	ldr	r0, [r7, #16]
 8018750:	f009 fad6 	bl	8021d00 <lv_mem_alloc>
 8018754:	61b8      	str	r0, [r7, #24]
            LV_ASSERT_MALLOC(item);
 8018756:	69bb      	ldr	r3, [r7, #24]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d100      	bne.n	801875e <allocate_item+0xe2>
 801875c:	e7fe      	b.n	801875c <allocate_item+0xe0>
            if(item == NULL) return NULL;
 801875e:	69bb      	ldr	r3, [r7, #24]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d101      	bne.n	8018768 <allocate_item+0xec>
 8018764:	2300      	movs	r3, #0
 8018766:	e03c      	b.n	80187e2 <allocate_item+0x166>
            item->not_cached = 1;
 8018768:	69ba      	ldr	r2, [r7, #24]
 801876a:	79d3      	ldrb	r3, [r2, #7]
 801876c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018770:	71d3      	strb	r3, [r2, #7]
        }
    }

    item->key = compute_key(g, size, w);
 8018772:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018776:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801877a:	4619      	mov	r1, r3
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	f7ff fe66 	bl	801844e <compute_key>
 8018782:	4602      	mov	r2, r0
 8018784:	69bb      	ldr	r3, [r7, #24]
 8018786:	601a      	str	r2, [r3, #0]
    item->life = 1;
 8018788:	69ba      	ldr	r2, [r7, #24]
 801878a:	6853      	ldr	r3, [r2, #4]
 801878c:	2101      	movs	r1, #1
 801878e:	f361 031d 	bfi	r3, r1, #0, #30
 8018792:	6053      	str	r3, [r2, #4]
    item->filled = 0;
 8018794:	69ba      	ldr	r2, [r7, #24]
 8018796:	79d3      	ldrb	r3, [r2, #7]
 8018798:	f36f 1386 	bfc	r3, #6, #1
 801879c:	71d3      	strb	r3, [r2, #7]
    item->alloc_size = map_size;
 801879e:	69bb      	ldr	r3, [r7, #24]
 80187a0:	8aba      	ldrh	r2, [r7, #20]
 80187a2:	819a      	strh	r2, [r3, #12]
    item->size = size;
 80187a4:	69bb      	ldr	r3, [r7, #24]
 80187a6:	8afa      	ldrh	r2, [r7, #22]
 80187a8:	81da      	strh	r2, [r3, #14]
    if(item->not_cached) {
 80187aa:	69bb      	ldr	r3, [r7, #24]
 80187ac:	79db      	ldrb	r3, [r3, #7]
 80187ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80187b2:	b2db      	uxtb	r3, r3
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d007      	beq.n	80187c8 <allocate_item+0x14c>
        uint8_t * p = (uint8_t *)item;
 80187b8:	69bb      	ldr	r3, [r7, #24]
 80187ba:	60fb      	str	r3, [r7, #12]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	f103 0210 	add.w	r2, r3, #16
 80187c2:	69bb      	ldr	r3, [r7, #24]
 80187c4:	609a      	str	r2, [r3, #8]
 80187c6:	e00b      	b.n	80187e0 <allocate_item+0x164>
        item->w = w;
#endif
#endif
    }
    else {
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 80187c8:	4b08      	ldr	r3, [pc, #32]	; (80187ec <allocate_item+0x170>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	f103 0210 	add.w	r2, r3, #16
 80187d0:	69bb      	ldr	r3, [r7, #24]
 80187d2:	609a      	str	r2, [r3, #8]
        item->error_acc = (lv_scolor24_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_grad_color_t)) +
                                            ALIGN(map_size * sizeof(lv_color_t)));
        item->w = w;
#endif
#endif
        grad_cache_end += req_size;
 80187d4:	4b05      	ldr	r3, [pc, #20]	; (80187ec <allocate_item+0x170>)
 80187d6:	681a      	ldr	r2, [r3, #0]
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	4413      	add	r3, r2
 80187dc:	4a03      	ldr	r2, [pc, #12]	; (80187ec <allocate_item+0x170>)
 80187de:	6013      	str	r3, [r2, #0]
    }
    return item;
 80187e0:	69bb      	ldr	r3, [r7, #24]
}
 80187e2:	4618      	mov	r0, r3
 80187e4:	3720      	adds	r7, #32
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bd80      	pop	{r7, pc}
 80187ea:	bf00      	nop
 80187ec:	20000718 	.word	0x20000718
 80187f0:	20000a50 	.word	0x20000a50
 80187f4:	20000714 	.word	0x20000714
 80187f8:	08018555 	.word	0x08018555
 80187fc:	0801861d 	.word	0x0801861d

08018800 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b082      	sub	sp, #8
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8018808:	4b10      	ldr	r3, [pc, #64]	; (801884c <lv_gradient_set_cache_size+0x4c>)
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	4618      	mov	r0, r3
 801880e:	f009 faa7 	bl	8021d60 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f009 fa74 	bl	8021d00 <lv_mem_alloc>
 8018818:	4603      	mov	r3, r0
 801881a:	4a0c      	ldr	r2, [pc, #48]	; (801884c <lv_gradient_set_cache_size+0x4c>)
 801881c:	6013      	str	r3, [r2, #0]
 801881e:	4b0b      	ldr	r3, [pc, #44]	; (801884c <lv_gradient_set_cache_size+0x4c>)
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	4a0b      	ldr	r2, [pc, #44]	; (8018850 <lv_gradient_set_cache_size+0x50>)
 8018824:	6013      	str	r3, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8018826:	4b09      	ldr	r3, [pc, #36]	; (801884c <lv_gradient_set_cache_size+0x4c>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d100      	bne.n	8018830 <lv_gradient_set_cache_size+0x30>
 801882e:	e7fe      	b.n	801882e <lv_gradient_set_cache_size+0x2e>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 8018830:	4b06      	ldr	r3, [pc, #24]	; (801884c <lv_gradient_set_cache_size+0x4c>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	6879      	ldr	r1, [r7, #4]
 8018836:	4618      	mov	r0, r3
 8018838:	f009 fe96 	bl	8022568 <lv_memset_00>
    grad_cache_size = max_bytes;
 801883c:	4a05      	ldr	r2, [pc, #20]	; (8018854 <lv_gradient_set_cache_size+0x54>)
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	6013      	str	r3, [r2, #0]
}
 8018842:	bf00      	nop
 8018844:	3708      	adds	r7, #8
 8018846:	46bd      	mov	sp, r7
 8018848:	bd80      	pop	{r7, pc}
 801884a:	bf00      	nop
 801884c:	20000a50 	.word	0x20000a50
 8018850:	20000718 	.word	0x20000718
 8018854:	20000714 	.word	0x20000714

08018858 <lv_gradient_get>:

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 8018858:	b590      	push	{r4, r7, lr}
 801885a:	b087      	sub	sp, #28
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
 8018860:	460b      	mov	r3, r1
 8018862:	807b      	strh	r3, [r7, #2]
 8018864:	4613      	mov	r3, r2
 8018866:	803b      	strh	r3, [r7, #0]
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	795b      	ldrb	r3, [r3, #5]
 801886c:	f003 0307 	and.w	r3, r3, #7
 8018870:	b2db      	uxtb	r3, r3
 8018872:	2b00      	cmp	r3, #0
 8018874:	d101      	bne.n	801887a <lv_gradient_get+0x22>
 8018876:	2300      	movs	r3, #0
 8018878:	e06d      	b.n	8018956 <lv_gradient_get+0xfe>

    /* Step 0: Check if the cache exist (else create it) */
    static bool inited = false;
    if(!inited) {
 801887a:	4b39      	ldr	r3, [pc, #228]	; (8018960 <lv_gradient_get+0x108>)
 801887c:	781b      	ldrb	r3, [r3, #0]
 801887e:	f083 0301 	eor.w	r3, r3, #1
 8018882:	b2db      	uxtb	r3, r3
 8018884:	2b00      	cmp	r3, #0
 8018886:	d005      	beq.n	8018894 <lv_gradient_get+0x3c>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 8018888:	2000      	movs	r0, #0
 801888a:	f7ff ffb9 	bl	8018800 <lv_gradient_set_cache_size>
        inited = true;
 801888e:	4b34      	ldr	r3, [pc, #208]	; (8018960 <lv_gradient_get+0x108>)
 8018890:	2201      	movs	r2, #1
 8018892:	701a      	strb	r2, [r3, #0]
    }

    /* Step 1: Search cache for the given key */
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	795b      	ldrb	r3, [r3, #5]
 8018898:	f003 0307 	and.w	r3, r3, #7
 801889c:	b2db      	uxtb	r3, r3
 801889e:	2b02      	cmp	r3, #2
 80188a0:	d102      	bne.n	80188a8 <lv_gradient_get+0x50>
 80188a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80188a6:	e001      	b.n	80188ac <lv_gradient_get+0x54>
 80188a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80188ac:	82bb      	strh	r3, [r7, #20]
    uint32_t key = compute_key(g, size, w);
 80188ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80188b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80188b6:	4619      	mov	r1, r3
 80188b8:	6878      	ldr	r0, [r7, #4]
 80188ba:	f7ff fdc8 	bl	801844e <compute_key>
 80188be:	4603      	mov	r3, r0
 80188c0:	613b      	str	r3, [r7, #16]
    lv_grad_t * item = NULL;
 80188c2:	2300      	movs	r3, #0
 80188c4:	60fb      	str	r3, [r7, #12]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 80188c6:	f107 020c 	add.w	r2, r7, #12
 80188ca:	f107 0310 	add.w	r3, r7, #16
 80188ce:	4619      	mov	r1, r3
 80188d0:	4824      	ldr	r0, [pc, #144]	; (8018964 <lv_gradient_get+0x10c>)
 80188d2:	f7ff fe13 	bl	80184fc <iterate_cache>
 80188d6:	4603      	mov	r3, r0
 80188d8:	2b01      	cmp	r3, #1
 80188da:	d10c      	bne.n	80188f6 <lv_gradient_get+0x9e>
        item->life++; /* Don't forget to bump the counter */
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	685a      	ldr	r2, [r3, #4]
 80188e0:	f3c2 021d 	ubfx	r2, r2, #0, #30
 80188e4:	1c51      	adds	r1, r2, #1
 80188e6:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80188ea:	685a      	ldr	r2, [r3, #4]
 80188ec:	f361 021d 	bfi	r2, r1, #0, #30
 80188f0:	605a      	str	r2, [r3, #4]
        return item;
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	e02f      	b.n	8018956 <lv_gradient_get+0xfe>
    }

    /* Step 2: Need to allocate an item for it */
    item = allocate_item(g, w, h);
 80188f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80188fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80188fe:	4619      	mov	r1, r3
 8018900:	6878      	ldr	r0, [r7, #4]
 8018902:	f7ff febb 	bl	801867c <allocate_item>
 8018906:	4603      	mov	r3, r0
 8018908:	60fb      	str	r3, [r7, #12]
    if(item == NULL) {
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d101      	bne.n	8018914 <lv_gradient_get+0xbc>
        LV_LOG_WARN("Faild to allcoate item for teh gradient");
        return item;
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	e020      	b.n	8018956 <lv_gradient_get+0xfe>
    }
#if LV_DITHER_ERROR_DIFFUSION == 1
    lv_memset_00(item->error_acc, w * sizeof(lv_scolor24_t));
#endif
#else
    for(lv_coord_t i = 0; i < item->size; i++) {
 8018914:	2300      	movs	r3, #0
 8018916:	82fb      	strh	r3, [r7, #22]
 8018918:	e015      	b.n	8018946 <lv_gradient_get+0xee>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	689a      	ldr	r2, [r3, #8]
 8018924:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018928:	18d4      	adds	r4, r2, r3
 801892a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801892e:	461a      	mov	r2, r3
 8018930:	6878      	ldr	r0, [r7, #4]
 8018932:	f000 f819 	bl	8018968 <lv_gradient_calculate>
 8018936:	4603      	mov	r3, r0
 8018938:	7023      	strb	r3, [r4, #0]
    for(lv_coord_t i = 0; i < item->size; i++) {
 801893a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801893e:	b29b      	uxth	r3, r3
 8018940:	3301      	adds	r3, #1
 8018942:	b29b      	uxth	r3, r3
 8018944:	82fb      	strh	r3, [r7, #22]
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801894c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018950:	429a      	cmp	r2, r3
 8018952:	dbe2      	blt.n	801891a <lv_gradient_get+0xc2>
    }
#endif

    return item;
 8018954:	68fb      	ldr	r3, [r7, #12]
}
 8018956:	4618      	mov	r0, r3
 8018958:	371c      	adds	r7, #28
 801895a:	46bd      	mov	sp, r7
 801895c:	bd90      	pop	{r4, r7, pc}
 801895e:	bf00      	nop
 8018960:	2000071c 	.word	0x2000071c
 8018964:	08018651 	.word	0x08018651

08018968 <lv_gradient_calculate>:

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b08c      	sub	sp, #48	; 0x30
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
 8018970:	460b      	mov	r3, r1
 8018972:	807b      	strh	r3, [r7, #2]
 8018974:	4613      	mov	r3, r2
 8018976:	803b      	strh	r3, [r7, #0]
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	785b      	ldrb	r3, [r3, #1]
 801897c:	461a      	mov	r2, r3
 801897e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018982:	fb02 f303 	mul.w	r3, r2, r3
 8018986:	121b      	asrs	r3, r3, #8
 8018988:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(frac <= min) {
 801898a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801898e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018990:	429a      	cmp	r2, r3
 8018992:	db04      	blt.n	801899e <lv_gradient_calculate+0x36>
        GRAD_CONV(tmp, dsc->stops[0].color);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	781b      	ldrb	r3, [r3, #0]
 8018998:	763b      	strb	r3, [r7, #24]
        return tmp;
 801899a:	7e3b      	ldrb	r3, [r7, #24]
 801899c:	e0c6      	b.n	8018b2c <lv_gradient_calculate+0x1c4>
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	791b      	ldrb	r3, [r3, #4]
 80189a2:	3b01      	subs	r3, #1
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	005b      	lsls	r3, r3, #1
 80189a8:	4413      	add	r3, r2
 80189aa:	785b      	ldrb	r3, [r3, #1]
 80189ac:	461a      	mov	r2, r3
 80189ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80189b2:	fb02 f303 	mul.w	r3, r2, r3
 80189b6:	121b      	asrs	r3, r3, #8
 80189b8:	623b      	str	r3, [r7, #32]
    if(frac >= max) {
 80189ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80189be:	6a3a      	ldr	r2, [r7, #32]
 80189c0:	429a      	cmp	r2, r3
 80189c2:	dc08      	bgt.n	80189d6 <lv_gradient_calculate+0x6e>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	791b      	ldrb	r3, [r3, #4]
 80189c8:	1e5a      	subs	r2, r3, #1
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80189d0:	763b      	strb	r3, [r7, #24]
        return tmp;
 80189d2:	7e3b      	ldrb	r3, [r7, #24]
 80189d4:	e0aa      	b.n	8018b2c <lv_gradient_calculate+0x1c4>
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
 80189d6:	2300      	movs	r3, #0
 80189d8:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 80189da:	2301      	movs	r3, #1
 80189dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80189e0:	e049      	b.n	8018a76 <lv_gradient_calculate+0x10e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 80189e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189e6:	687a      	ldr	r2, [r7, #4]
 80189e8:	005b      	lsls	r3, r3, #1
 80189ea:	4413      	add	r3, r2
 80189ec:	785b      	ldrb	r3, [r3, #1]
 80189ee:	461a      	mov	r2, r3
 80189f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80189f4:	fb02 f303 	mul.w	r3, r2, r3
 80189f8:	121b      	asrs	r3, r3, #8
 80189fa:	61fb      	str	r3, [r7, #28]
        if(frac <= cur) {
 80189fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018a00:	69fa      	ldr	r2, [r7, #28]
 8018a02:	429a      	cmp	r2, r3
 8018a04:	db32      	blt.n	8018a6c <lv_gradient_calculate+0x104>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 8018a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a0a:	1e5a      	subs	r2, r3, #1
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018a12:	f7ff fd0a 	bl	801842a <lv_color_to32>
 8018a16:	4603      	mov	r3, r0
 8018a18:	617b      	str	r3, [r7, #20]
            two.full = lv_color_to32(dsc->stops[i].color);
 8018a1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018a24:	f7ff fd01 	bl	801842a <lv_color_to32>
 8018a28:	4603      	mov	r3, r0
 8018a2a:	613b      	str	r3, [r7, #16]
            min = (dsc->stops[i - 1].frac * range) >> 8;
 8018a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a30:	3b01      	subs	r3, #1
 8018a32:	687a      	ldr	r2, [r7, #4]
 8018a34:	005b      	lsls	r3, r3, #1
 8018a36:	4413      	add	r3, r2
 8018a38:	785b      	ldrb	r3, [r3, #1]
 8018a3a:	461a      	mov	r2, r3
 8018a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a40:	fb02 f303 	mul.w	r3, r2, r3
 8018a44:	121b      	asrs	r3, r3, #8
 8018a46:	62fb      	str	r3, [r7, #44]	; 0x2c
            max = (dsc->stops[i].frac * range) >> 8;
 8018a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a4c:	687a      	ldr	r2, [r7, #4]
 8018a4e:	005b      	lsls	r3, r3, #1
 8018a50:	4413      	add	r3, r2
 8018a52:	785b      	ldrb	r3, [r3, #1]
 8018a54:	461a      	mov	r2, r3
 8018a56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a5a:	fb02 f303 	mul.w	r3, r2, r3
 8018a5e:	121b      	asrs	r3, r3, #8
 8018a60:	623b      	str	r3, [r7, #32]
            d = max - min;
 8018a62:	6a3a      	ldr	r2, [r7, #32]
 8018a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a66:	1ad3      	subs	r3, r2, r3
 8018a68:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8018a6a:	e00a      	b.n	8018a82 <lv_gradient_calculate+0x11a>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8018a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a70:	3301      	adds	r3, #1
 8018a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	791b      	ldrb	r3, [r3, #4]
 8018a7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018a7e:	429a      	cmp	r2, r3
 8018a80:	d3af      	bcc.n	80189e2 <lv_gradient_calculate+0x7a>
        }
    }

    LV_ASSERT(d != 0);
 8018a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d100      	bne.n	8018a8a <lv_gradient_calculate+0x122>
 8018a88:	e7fe      	b.n	8018a88 <lv_gradient_calculate+0x120>

    /*Then interpolate*/
    frac -= min;
 8018a8a:	883a      	ldrh	r2, [r7, #0]
 8018a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a8e:	b29b      	uxth	r3, r3
 8018a90:	1ad3      	subs	r3, r2, r3
 8018a92:	b29b      	uxth	r3, r3
 8018a94:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (frac * 255) / d;
 8018a96:	f9b7 2000 	ldrsh.w	r2, [r7]
 8018a9a:	4613      	mov	r3, r2
 8018a9c:	021b      	lsls	r3, r3, #8
 8018a9e:	1a9a      	subs	r2, r3, r2
 8018aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8018aa6:	76fb      	strb	r3, [r7, #27]
    lv_opa_t imix = 255 - mix;
 8018aa8:	7efb      	ldrb	r3, [r7, #27]
 8018aaa:	43db      	mvns	r3, r3
 8018aac:	76bb      	strb	r3, [r7, #26]

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8018aae:	7c3b      	ldrb	r3, [r7, #16]
 8018ab0:	461a      	mov	r2, r3
 8018ab2:	7efb      	ldrb	r3, [r7, #27]
 8018ab4:	fb03 f202 	mul.w	r2, r3, r2
 8018ab8:	7d3b      	ldrb	r3, [r7, #20]
 8018aba:	4619      	mov	r1, r3
 8018abc:	7ebb      	ldrb	r3, [r7, #26]
 8018abe:	fb01 f303 	mul.w	r3, r1, r3
 8018ac2:	4413      	add	r3, r2
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	4613      	mov	r3, r2
 8018ac8:	021b      	lsls	r3, r3, #8
 8018aca:	4413      	add	r3, r2
 8018acc:	01db      	lsls	r3, r3, #7
 8018ace:	4413      	add	r3, r2
 8018ad0:	0f9b      	lsrs	r3, r3, #30
 8018ad2:	b2d9      	uxtb	r1, r3
 8018ad4:	7c7b      	ldrb	r3, [r7, #17]
 8018ad6:	461a      	mov	r2, r3
 8018ad8:	7efb      	ldrb	r3, [r7, #27]
 8018ada:	fb03 f202 	mul.w	r2, r3, r2
 8018ade:	7d7b      	ldrb	r3, [r7, #21]
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	7ebb      	ldrb	r3, [r7, #26]
 8018ae4:	fb00 f303 	mul.w	r3, r0, r3
 8018ae8:	4413      	add	r3, r2
 8018aea:	461a      	mov	r2, r3
 8018aec:	4613      	mov	r3, r2
 8018aee:	021b      	lsls	r3, r3, #8
 8018af0:	4413      	add	r3, r2
 8018af2:	01db      	lsls	r3, r3, #7
 8018af4:	4413      	add	r3, r2
 8018af6:	0f9b      	lsrs	r3, r3, #30
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	430b      	orrs	r3, r1
 8018afc:	b2d9      	uxtb	r1, r3
 8018afe:	7cbb      	ldrb	r3, [r7, #18]
 8018b00:	461a      	mov	r2, r3
 8018b02:	7efb      	ldrb	r3, [r7, #27]
 8018b04:	fb03 f202 	mul.w	r2, r3, r2
 8018b08:	7dbb      	ldrb	r3, [r7, #22]
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	7ebb      	ldrb	r3, [r7, #26]
 8018b0e:	fb00 f303 	mul.w	r3, r0, r3
 8018b12:	4413      	add	r3, r2
 8018b14:	461a      	mov	r2, r3
 8018b16:	4613      	mov	r3, r2
 8018b18:	021b      	lsls	r3, r3, #8
 8018b1a:	4413      	add	r3, r2
 8018b1c:	01db      	lsls	r3, r3, #7
 8018b1e:	4413      	add	r3, r2
 8018b20:	0f9b      	lsrs	r3, r3, #30
 8018b22:	b2db      	uxtb	r3, r3
 8018b24:	430b      	orrs	r3, r1
 8018b26:	b2db      	uxtb	r3, r3
 8018b28:	733b      	strb	r3, [r7, #12]
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
 8018b2a:	7b3b      	ldrb	r3, [r7, #12]
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	3730      	adds	r7, #48	; 0x30
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}

08018b34 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b082      	sub	sp, #8
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
    if(grad->not_cached) {
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	79db      	ldrb	r3, [r3, #7]
 8018b40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d002      	beq.n	8018b50 <lv_gradient_cleanup+0x1c>
        lv_mem_free(grad);
 8018b4a:	6878      	ldr	r0, [r7, #4]
 8018b4c:	f009 f908 	bl	8021d60 <lv_mem_free>
    }
}
 8018b50:	bf00      	nop
 8018b52:	3708      	adds	r7, #8
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}

08018b58 <lv_color_premult>:
{
 8018b58:	b480      	push	{r7}
 8018b5a:	b083      	sub	sp, #12
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	7138      	strb	r0, [r7, #4]
 8018b60:	460b      	mov	r3, r1
 8018b62:	603a      	str	r2, [r7, #0]
 8018b64:	71fb      	strb	r3, [r7, #7]
    out[0] = LV_COLOR_GET_R(c);
 8018b66:	793b      	ldrb	r3, [r7, #4]
 8018b68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018b6c:	b2db      	uxtb	r3, r3
 8018b6e:	b29a      	uxth	r2, r3
 8018b70:	683b      	ldr	r3, [r7, #0]
 8018b72:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 8018b74:	793b      	ldrb	r3, [r7, #4]
 8018b76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018b7a:	b2da      	uxtb	r2, r3
 8018b7c:	683b      	ldr	r3, [r7, #0]
 8018b7e:	3302      	adds	r3, #2
 8018b80:	b292      	uxth	r2, r2
 8018b82:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 8018b84:	793b      	ldrb	r3, [r7, #4]
 8018b86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018b8a:	b2da      	uxtb	r2, r3
 8018b8c:	683b      	ldr	r3, [r7, #0]
 8018b8e:	3304      	adds	r3, #4
 8018b90:	b292      	uxth	r2, r2
 8018b92:	801a      	strh	r2, [r3, #0]
}
 8018b94:	bf00      	nop
 8018b96:	370c      	adds	r7, #12
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9e:	4770      	bx	lr

08018ba0 <lv_color_mix_premult>:
{
 8018ba0:	b480      	push	{r7}
 8018ba2:	b085      	sub	sp, #20
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
 8018ba8:	7039      	strb	r1, [r7, #0]
 8018baa:	4613      	mov	r3, r2
 8018bac:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_R(c1, premult_c1[0]);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	881b      	ldrh	r3, [r3, #0]
 8018bb2:	f003 0301 	and.w	r3, r3, #1
 8018bb6:	b2da      	uxtb	r2, r3
 8018bb8:	7a3b      	ldrb	r3, [r7, #8]
 8018bba:	f362 0300 	bfi	r3, r2, #0, #1
 8018bbe:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	3302      	adds	r3, #2
 8018bc4:	881b      	ldrh	r3, [r3, #0]
 8018bc6:	f003 0301 	and.w	r3, r3, #1
 8018bca:	b2da      	uxtb	r2, r3
 8018bcc:	7a3b      	ldrb	r3, [r7, #8]
 8018bce:	f362 0300 	bfi	r3, r2, #0, #1
 8018bd2:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	3304      	adds	r3, #4
 8018bd8:	881b      	ldrh	r3, [r3, #0]
 8018bda:	f003 0301 	and.w	r3, r3, #1
 8018bde:	b2da      	uxtb	r2, r3
 8018be0:	7a3b      	ldrb	r3, [r7, #8]
 8018be2:	f362 0300 	bfi	r3, r2, #0, #1
 8018be6:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8018be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	da01      	bge.n	8018bf4 <lv_color_mix_premult+0x54>
 8018bf0:	783b      	ldrb	r3, [r7, #0]
 8018bf2:	e000      	b.n	8018bf6 <lv_color_mix_premult+0x56>
 8018bf4:	7a3b      	ldrb	r3, [r7, #8]
 8018bf6:	733b      	strb	r3, [r7, #12]
    return ret;
 8018bf8:	7b3b      	ldrb	r3, [r7, #12]
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	3714      	adds	r7, #20
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c04:	4770      	bx	lr

08018c06 <lv_color_make>:
{
 8018c06:	b480      	push	{r7}
 8018c08:	b083      	sub	sp, #12
 8018c0a:	af00      	add	r7, sp, #0
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	71fb      	strb	r3, [r7, #7]
 8018c10:	460b      	mov	r3, r1
 8018c12:	71bb      	strb	r3, [r7, #6]
 8018c14:	4613      	mov	r3, r2
 8018c16:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8018c18:	797b      	ldrb	r3, [r7, #5]
 8018c1a:	09db      	lsrs	r3, r3, #7
 8018c1c:	b2da      	uxtb	r2, r3
 8018c1e:	79bb      	ldrb	r3, [r7, #6]
 8018c20:	09db      	lsrs	r3, r3, #7
 8018c22:	b2db      	uxtb	r3, r3
 8018c24:	4313      	orrs	r3, r2
 8018c26:	b2da      	uxtb	r2, r3
 8018c28:	79fb      	ldrb	r3, [r7, #7]
 8018c2a:	09db      	lsrs	r3, r3, #7
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	4313      	orrs	r3, r2
 8018c30:	b2db      	uxtb	r3, r3
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	370c      	adds	r7, #12
 8018c36:	46bd      	mov	sp, r7
 8018c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3c:	4770      	bx	lr

08018c3e <lv_color_hex>:
{
 8018c3e:	b580      	push	{r7, lr}
 8018c40:	b082      	sub	sp, #8
 8018c42:	af00      	add	r7, sp, #0
 8018c44:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	0c1b      	lsrs	r3, r3, #16
 8018c4a:	b2d8      	uxtb	r0, r3
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	0a1b      	lsrs	r3, r3, #8
 8018c50:	b2db      	uxtb	r3, r3
 8018c52:	687a      	ldr	r2, [r7, #4]
 8018c54:	b2d2      	uxtb	r2, r2
 8018c56:	4619      	mov	r1, r3
 8018c58:	f7ff ffd5 	bl	8018c06 <lv_color_make>
 8018c5c:	4603      	mov	r3, r0
}
 8018c5e:	4618      	mov	r0, r3
 8018c60:	3708      	adds	r7, #8
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}

08018c66 <lv_area_copy>:
{
 8018c66:	b480      	push	{r7}
 8018c68:	b083      	sub	sp, #12
 8018c6a:	af00      	add	r7, sp, #0
 8018c6c:	6078      	str	r0, [r7, #4]
 8018c6e:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8018c70:	683b      	ldr	r3, [r7, #0]
 8018c72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	80da      	strh	r2, [r3, #6]
}
 8018c98:	bf00      	nop
 8018c9a:	370c      	adds	r7, #12
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca2:	4770      	bx	lr

08018ca4 <lv_area_get_width>:
{
 8018ca4:	b480      	push	{r7}
 8018ca6:	b083      	sub	sp, #12
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018cb2:	b29a      	uxth	r2, r3
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018cba:	b29b      	uxth	r3, r3
 8018cbc:	1ad3      	subs	r3, r2, r3
 8018cbe:	b29b      	uxth	r3, r3
 8018cc0:	3301      	adds	r3, #1
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	b21b      	sxth	r3, r3
}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	370c      	adds	r7, #12
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd0:	4770      	bx	lr

08018cd2 <lv_area_get_height>:
{
 8018cd2:	b480      	push	{r7}
 8018cd4:	b083      	sub	sp, #12
 8018cd6:	af00      	add	r7, sp, #0
 8018cd8:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018ce0:	b29a      	uxth	r2, r3
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018ce8:	b29b      	uxth	r3, r3
 8018cea:	1ad3      	subs	r3, r2, r3
 8018cec:	b29b      	uxth	r3, r3
 8018cee:	3301      	adds	r3, #1
 8018cf0:	b29b      	uxth	r3, r3
 8018cf2:	b21b      	sxth	r3, r3
}
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	370c      	adds	r7, #12
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfe:	4770      	bx	lr

08018d00 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 8018d00:	b590      	push	{r4, r7, lr}
 8018d02:	b0ad      	sub	sp, #180	; 0xb4
 8018d04:	af06      	add	r7, sp, #24
 8018d06:	60f8      	str	r0, [r7, #12]
 8018d08:	60b9      	str	r1, [r7, #8]
 8018d0a:	607a      	str	r2, [r7, #4]
 8018d0c:	603b      	str	r3, [r7, #0]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	689a      	ldr	r2, [r3, #8]
 8018d12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018d16:	4611      	mov	r1, r2
 8018d18:	4618      	mov	r0, r3
 8018d1a:	f7ff ffa4 	bl	8018c66 <lv_area_copy>

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 8018d1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018d22:	4618      	mov	r0, r3
 8018d24:	f7f8 feb8 	bl	8011a98 <lv_draw_mask_is_any>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8018d2e:	68bb      	ldr	r3, [r7, #8]
 8018d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d104      	bne.n	8018d42 <lv_draw_sw_img_decoded+0x42>
 8018d38:	68bb      	ldr	r3, [r7, #8]
 8018d3a:	885b      	ldrh	r3, [r3, #2]
 8018d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018d40:	d001      	beq.n	8018d46 <lv_draw_sw_img_decoded+0x46>
 8018d42:	2301      	movs	r3, #1
 8018d44:	e000      	b.n	8018d48 <lv_draw_sw_img_decoded+0x48>
 8018d46:	2300      	movs	r3, #0
 8018d48:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8018d4c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018d50:	f003 0301 	and.w	r3, r3, #1
 8018d54:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 8018d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018d5c:	211c      	movs	r1, #28
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f009 fc02 	bl	8022568 <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	7a9b      	ldrb	r3, [r3, #10]
 8018d68:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	7adb      	ldrb	r3, [r3, #11]
 8018d70:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018d74:	b2db      	uxtb	r3, r3
 8018d76:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    blend_dsc.blend_area = &blend_area;
 8018d7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018d7e:	633b      	str	r3, [r7, #48]	; 0x30

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8018d80:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8018d84:	f083 0301 	eor.w	r3, r3, #1
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d019      	beq.n	8018dc2 <lv_draw_sw_img_decoded+0xc2>
 8018d8e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018d92:	f083 0301 	eor.w	r3, r3, #1
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d012      	beq.n	8018dc2 <lv_draw_sw_img_decoded+0xc2>
 8018d9c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8018da0:	2b04      	cmp	r3, #4
 8018da2:	d10e      	bne.n	8018dc2 <lv_draw_sw_img_decoded+0xc2>
 8018da4:	68bb      	ldr	r3, [r7, #8]
 8018da6:	7a5b      	ldrb	r3, [r3, #9]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d10a      	bne.n	8018dc2 <lv_draw_sw_img_decoded+0xc2>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8018dac:	683b      	ldr	r3, [r7, #0]
 8018dae:	637b      	str	r3, [r7, #52]	; 0x34

        blend_dsc.blend_area = coords;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018db8:	4619      	mov	r1, r3
 8018dba:	68f8      	ldr	r0, [r7, #12]
 8018dbc:	f7fe f93c 	bl	8017038 <lv_draw_sw_blend>
 8018dc0:	e1c6      	b.n	8019150 <lv_draw_sw_img_decoded+0x450>
    }
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8018dc2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8018dc6:	f083 0301 	eor.w	r3, r3, #1
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d02f      	beq.n	8018e30 <lv_draw_sw_img_decoded+0x130>
 8018dd0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018dd4:	f083 0301 	eor.w	r3, r3, #1
 8018dd8:	b2db      	uxtb	r3, r3
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d028      	beq.n	8018e30 <lv_draw_sw_img_decoded+0x130>
 8018dde:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8018de2:	2b0e      	cmp	r3, #14
 8018de4:	d124      	bne.n	8018e30 <lv_draw_sw_img_decoded+0x130>
        lv_area_t clipped_coords;
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	689a      	ldr	r2, [r3, #8]
 8018dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018dee:	6879      	ldr	r1, [r7, #4]
 8018df0:	4618      	mov	r0, r3
 8018df2:	f007 fc65 	bl	80206c0 <_lv_area_intersect>
 8018df6:	4603      	mov	r3, r0
 8018df8:	f083 0301 	eor.w	r3, r3, #1
 8018dfc:	b2db      	uxtb	r3, r3
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	f040 81a6 	bne.w	8019150 <lv_draw_sw_img_decoded+0x450>

        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8018e04:	683b      	ldr	r3, [r7, #0]
 8018e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = coords;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.src_buf = NULL;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	637b      	str	r3, [r7, #52]	; 0x34
        blend_dsc.color = draw_dsc->recolor;
 8018e10:	68bb      	ldr	r3, [r7, #8]
 8018e12:	7a1b      	ldrb	r3, [r3, #8]
 8018e14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8018e18:	2302      	movs	r3, #2
 8018e1a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        blend_dsc.blend_area = coords;
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018e22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e26:	4619      	mov	r1, r3
 8018e28:	68f8      	ldr	r0, [r7, #12]
 8018e2a:	f7fe f905 	bl	8017038 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8018e2e:	e18f      	b.n	8019150 <lv_draw_sw_img_decoded+0x450>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	689b      	ldr	r3, [r3, #8]
 8018e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        blend_area.x2 = draw_ctx->clip_area->x2;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	689b      	ldr	r3, [r3, #8]
 8018e40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018e44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        blend_area.y1 = draw_ctx->clip_area->y1;
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	689b      	ldr	r3, [r3, #8]
 8018e4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018e50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        blend_area.y2 = draw_ctx->clip_area->y2;
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	689b      	ldr	r3, [r3, #8]
 8018e58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018e5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_coord_t src_w = lv_area_get_width(coords);
 8018e60:	6878      	ldr	r0, [r7, #4]
 8018e62:	f7ff ff1f 	bl	8018ca4 <lv_area_get_width>
 8018e66:	4603      	mov	r3, r0
 8018e68:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t src_h = lv_area_get_height(coords);
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f7ff ff30 	bl	8018cd2 <lv_area_get_height>
 8018e72:	4603      	mov	r3, r0
 8018e74:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
 8018e78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f7ff ff28 	bl	8018cd2 <lv_area_get_height>
 8018e82:	4603      	mov	r3, r0
 8018e84:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        lv_coord_t blend_w = lv_area_get_width(&blend_area);
 8018e88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f7ff ff09 	bl	8018ca4 <lv_area_get_width>
 8018e92:	4603      	mov	r3, r0
 8018e94:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        uint32_t max_buf_size = MAX_BUF_SIZE;
 8018e98:	f7f5 fbf4 	bl	800e684 <_lv_refr_get_disp_refreshing>
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f006 ff1a 	bl	801fcd8 <lv_disp_get_hor_res>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	67bb      	str	r3, [r7, #120]	; 0x78
        uint32_t blend_size = lv_area_get_size(&blend_area);
 8018ea8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018eac:	4618      	mov	r0, r3
 8018eae:	f007 fb7a 	bl	80205a6 <lv_area_get_size>
 8018eb2:	6778      	str	r0, [r7, #116]	; 0x74
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
 8018eb4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8018eb8:	673b      	str	r3, [r7, #112]	; 0x70
        if(blend_size <= max_buf_size) {
 8018eba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018ebe:	429a      	cmp	r2, r3
 8018ec0:	d804      	bhi.n	8018ecc <lv_draw_sw_img_decoded+0x1cc>
            buf_h = blend_h;
 8018ec2:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8018ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8018eca:	e006      	b.n	8018eda <lv_draw_sw_img_decoded+0x1da>
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 8018ecc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8018ed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 8018eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018edc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018ee0:	fb02 f303 	mul.w	r3, r2, r3
 8018ee4:	66fb      	str	r3, [r7, #108]	; 0x6c

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 8018ee6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018ee8:	f008 ff94 	bl	8021e14 <lv_mem_buf_get>
 8018eec:	66b8      	str	r0, [r7, #104]	; 0x68
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 8018eee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018ef0:	f008 ff90 	bl	8021e14 <lv_mem_buf_get>
 8018ef4:	6678      	str	r0, [r7, #100]	; 0x64
        blend_dsc.mask_buf = mask_buf;
 8018ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = &blend_area;
 8018efa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018efe:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8018f00:	2302      	movs	r3, #2
 8018f02:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        blend_dsc.src_buf = rgb_buf;
 8018f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018f08:	637b      	str	r3, [r7, #52]	; 0x34
        lv_coord_t y_last = blend_area.y2;
 8018f0a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8018f0e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 8018f12:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018f16:	b29a      	uxth	r2, r3
 8018f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018f1c:	b29b      	uxth	r3, r3
 8018f1e:	4413      	add	r3, r2
 8018f20:	b29b      	uxth	r3, r3
 8018f22:	3b01      	subs	r3, #1
 8018f24:	b29b      	uxth	r3, r3
 8018f26:	b21b      	sxth	r3, r3
 8018f28:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8018f2c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8018f30:	2b04      	cmp	r3, #4
 8018f32:	d109      	bne.n	8018f48 <lv_draw_sw_img_decoded+0x248>
 8018f34:	68bb      	ldr	r3, [r7, #8]
 8018f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d104      	bne.n	8018f48 <lv_draw_sw_img_decoded+0x248>
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 8018f3e:	68bb      	ldr	r3, [r7, #8]
 8018f40:	885b      	ldrh	r3, [r3, #2]
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8018f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018f46:	d001      	beq.n	8018f4c <lv_draw_sw_img_decoded+0x24c>
 8018f48:	2302      	movs	r3, #2
 8018f4a:	e000      	b.n	8018f4e <lv_draw_sw_img_decoded+0x24e>
 8018f4c:	2301      	movs	r3, #1
 8018f4e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 8018f52:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8018f56:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        while(blend_area.y1 <= y_last) {
 8018f5a:	e0ec      	b.n	8019136 <lv_draw_sw_img_decoded+0x436>
            /*Apply transformations if any or separate the channels*/
            lv_area_t transform_area;
            lv_area_copy(&transform_area, &blend_area);
 8018f5c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018f60:	f107 0320 	add.w	r3, r7, #32
 8018f64:	4611      	mov	r1, r2
 8018f66:	4618      	mov	r0, r3
 8018f68:	f7ff fe7d 	bl	8018c66 <lv_area_copy>
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f72:	b29b      	uxth	r3, r3
 8018f74:	425b      	negs	r3, r3
 8018f76:	b29b      	uxth	r3, r3
 8018f78:	b219      	sxth	r1, r3
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018f80:	b29b      	uxth	r3, r3
 8018f82:	425b      	negs	r3, r3
 8018f84:	b29b      	uxth	r3, r3
 8018f86:	b21a      	sxth	r2, r3
 8018f88:	f107 0320 	add.w	r3, r7, #32
 8018f8c:	4618      	mov	r0, r3
 8018f8e:	f007 fb61 	bl	8020654 <lv_area_move>
            if(transform) {
 8018f92:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d018      	beq.n	8018fcc <lv_draw_sw_img_decoded+0x2cc>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 8018f9a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8018f9e:	f107 0120 	add.w	r1, r7, #32
 8018fa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018fa4:	9305      	str	r3, [sp, #20]
 8018fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018fa8:	9304      	str	r3, [sp, #16]
 8018faa:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8018fae:	9303      	str	r3, [sp, #12]
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	9302      	str	r3, [sp, #8]
 8018fb4:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8018fb8:	9301      	str	r3, [sp, #4]
 8018fba:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8018fbe:	9300      	str	r3, [sp, #0]
 8018fc0:	4613      	mov	r3, r2
 8018fc2:	683a      	ldr	r2, [r7, #0]
 8018fc4:	68f8      	ldr	r0, [r7, #12]
 8018fc6:	f7fb f860 	bl	801408a <lv_draw_transform>
 8018fca:	e015      	b.n	8018ff8 <lv_draw_sw_img_decoded+0x2f8>
                                  draw_dsc, cf, rgb_buf, mask_buf);
            }
            else {
                convert_cb(&transform_area, src_buf, src_w, src_h, src_w, draw_dsc, cf, rgb_buf, mask_buf);
 8018fcc:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8018fd0:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8018fd4:	f107 0020 	add.w	r0, r7, #32
 8018fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018fda:	9304      	str	r3, [sp, #16]
 8018fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018fde:	9303      	str	r3, [sp, #12]
 8018fe0:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8018fe4:	9302      	str	r3, [sp, #8]
 8018fe6:	68bb      	ldr	r3, [r7, #8]
 8018fe8:	9301      	str	r3, [sp, #4]
 8018fea:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8018fee:	9300      	str	r3, [sp, #0]
 8018ff0:	460b      	mov	r3, r1
 8018ff2:	6839      	ldr	r1, [r7, #0]
 8018ff4:	f000 f8af 	bl	8019156 <convert_cb>
            }

            /*Apply recolor*/
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 8018ff8:	68bb      	ldr	r3, [r7, #8]
 8018ffa:	7a5b      	ldrb	r3, [r3, #9]
 8018ffc:	2b02      	cmp	r3, #2
 8018ffe:	d932      	bls.n	8019066 <lv_draw_sw_img_decoded+0x366>
                uint16_t premult_v[3];
                lv_opa_t recolor_opa = draw_dsc->recolor_opa;
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	7a5b      	ldrb	r3, [r3, #9]
 8019004:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                lv_color_t recolor = draw_dsc->recolor;
 8019008:	68bb      	ldr	r3, [r7, #8]
 801900a:	7a1b      	ldrb	r3, [r3, #8]
 801900c:	753b      	strb	r3, [r7, #20]
                lv_color_premult(recolor, recolor_opa, premult_v);
 801900e:	f107 0218 	add.w	r2, r7, #24
 8019012:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019016:	4619      	mov	r1, r3
 8019018:	7d38      	ldrb	r0, [r7, #20]
 801901a:	f7ff fd9d 	bl	8018b58 <lv_color_premult>
                recolor_opa = 255 - recolor_opa;
 801901e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019022:	43db      	mvns	r3, r3
 8019024:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                uint32_t i;
                for(i = 0; i < buf_size; i++) {
 8019028:	2300      	movs	r3, #0
 801902a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801902e:	e015      	b.n	801905c <lv_draw_sw_img_decoded+0x35c>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8019030:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019032:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019036:	4413      	add	r3, r2
 8019038:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801903a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801903e:	188c      	adds	r4, r1, r2
 8019040:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8019044:	f107 0018 	add.w	r0, r7, #24
 8019048:	7819      	ldrb	r1, [r3, #0]
 801904a:	f7ff fda9 	bl	8018ba0 <lv_color_mix_premult>
 801904e:	4603      	mov	r3, r0
 8019050:	7023      	strb	r3, [r4, #0]
                for(i = 0; i < buf_size; i++) {
 8019052:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019056:	3301      	adds	r3, #1
 8019058:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801905c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019062:	429a      	cmp	r2, r3
 8019064:	d3e4      	bcc.n	8019030 <lv_draw_sw_img_decoded+0x330>
                }
            }
#if LV_DRAW_COMPLEX
            /*Apply the masks if any*/
            if(mask_any) {
 8019066:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801906a:	2b00      	cmp	r3, #0
 801906c:	d03e      	beq.n	80190ec <lv_draw_sw_img_decoded+0x3ec>
                lv_coord_t y;
                lv_opa_t * mask_buf_tmp = mask_buf;
 801906e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8019074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019078:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801907c:	e030      	b.n	80190e0 <lv_draw_sw_img_decoded+0x3e0>
                    lv_draw_mask_res_t mask_res_line;
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 801907e:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 8019082:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8019086:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801908a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801908e:	f7f8 fc05 	bl	801189c <lv_draw_mask_apply>
 8019092:	4603      	mov	r3, r0
 8019094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 8019098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801909c:	2b00      	cmp	r3, #0
 801909e:	d10a      	bne.n	80190b6 <lv_draw_sw_img_decoded+0x3b6>
                        lv_memset_00(mask_buf_tmp, blend_w);
 80190a0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80190a4:	4619      	mov	r1, r3
 80190a6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80190aa:	f009 fa5d 	bl	8022568 <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80190ae:	2302      	movs	r3, #2
 80190b0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80190b4:	e006      	b.n	80190c4 <lv_draw_sw_img_decoded+0x3c4>
                    }
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 80190b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80190ba:	2b02      	cmp	r3, #2
 80190bc:	d102      	bne.n	80190c4 <lv_draw_sw_img_decoded+0x3c4>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80190be:	2302      	movs	r3, #2
 80190c0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                    }
                    mask_buf_tmp += blend_w;
 80190c4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80190c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80190cc:	4413      	add	r3, r2
 80190ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 80190d2:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 80190d6:	b29b      	uxth	r3, r3
 80190d8:	3301      	adds	r3, #1
 80190da:	b29b      	uxth	r3, r3
 80190dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80190e0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80190e4:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 80190e8:	429a      	cmp	r2, r3
 80190ea:	ddc8      	ble.n	801907e <lv_draw_sw_img_decoded+0x37e>
                }
            }
#endif

            /*Blend*/
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80190ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80190f0:	4619      	mov	r1, r3
 80190f2:	68f8      	ldr	r0, [r7, #12]
 80190f4:	f7fd ffa0 	bl	8017038 <lv_draw_sw_blend>

            /*Go the the next lines*/
            blend_area.y1 = blend_area.y2 + 1;
 80190f8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80190fc:	b29b      	uxth	r3, r3
 80190fe:	3301      	adds	r3, #1
 8019100:	b29b      	uxth	r3, r3
 8019102:	b21b      	sxth	r3, r3
 8019104:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 8019108:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801910c:	b29a      	uxth	r2, r3
 801910e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019112:	b29b      	uxth	r3, r3
 8019114:	4413      	add	r3, r2
 8019116:	b29b      	uxth	r3, r3
 8019118:	3b01      	subs	r3, #1
 801911a:	b29b      	uxth	r3, r3
 801911c:	b21b      	sxth	r3, r3
 801911e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 8019122:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019126:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801912a:	429a      	cmp	r2, r3
 801912c:	da03      	bge.n	8019136 <lv_draw_sw_img_decoded+0x436>
 801912e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8019132:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        while(blend_area.y1 <= y_last) {
 8019136:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801913a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801913e:	429a      	cmp	r2, r3
 8019140:	f6bf af0c 	bge.w	8018f5c <lv_draw_sw_img_decoded+0x25c>
        }

        lv_mem_buf_release(mask_buf);
 8019144:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8019146:	f008 ff11 	bl	8021f6c <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 801914a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801914c:	f008 ff0e 	bl	8021f6c <lv_mem_buf_release>
    }
}
 8019150:	379c      	adds	r7, #156	; 0x9c
 8019152:	46bd      	mov	sp, r7
 8019154:	bd90      	pop	{r4, r7, pc}

08019156 <convert_cb>:
 **********************/

/* Separate the image channels to RGB and Alpha to match LV_COLOR_DEPTH settings*/
static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 8019156:	b590      	push	{r4, r7, lr}
 8019158:	b093      	sub	sp, #76	; 0x4c
 801915a:	af00      	add	r7, sp, #0
 801915c:	60f8      	str	r0, [r7, #12]
 801915e:	60b9      	str	r1, [r7, #8]
 8019160:	4611      	mov	r1, r2
 8019162:	461a      	mov	r2, r3
 8019164:	460b      	mov	r3, r1
 8019166:	80fb      	strh	r3, [r7, #6]
 8019168:	4613      	mov	r3, r2
 801916a:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(draw_dsc);
    LV_UNUSED(src_h);
    LV_UNUSED(src_w);

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
 801916c:	68bb      	ldr	r3, [r7, #8]
 801916e:	647b      	str	r3, [r7, #68]	; 0x44
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8019170:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019174:	2b04      	cmp	r3, #4
 8019176:	d003      	beq.n	8019180 <convert_cb+0x2a>
 8019178:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801917c:	2b06      	cmp	r3, #6
 801917e:	d169      	bne.n	8019254 <convert_cb+0xfe>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 8019180:	68f8      	ldr	r0, [r7, #12]
 8019182:	f007 fa10 	bl	80205a6 <lv_area_get_size>
 8019186:	6278      	str	r0, [r7, #36]	; 0x24
        lv_memset_ff(abuf, px_cnt);
 8019188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801918a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801918c:	f009 fa6d 	bl	802266a <lv_memset_ff>

        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8019190:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019194:	68fa      	ldr	r2, [r7, #12]
 8019196:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801919a:	fb02 f303 	mul.w	r3, r2, r3
 801919e:	461a      	mov	r2, r3
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80191a6:	4413      	add	r3, r2
 80191a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80191aa:	4413      	add	r3, r2
 80191ac:	647b      	str	r3, [r7, #68]	; 0x44
        uint32_t dest_w = lv_area_get_width(dest_area);
 80191ae:	68f8      	ldr	r0, [r7, #12]
 80191b0:	f7ff fd78 	bl	8018ca4 <lv_area_get_width>
 80191b4:	4603      	mov	r3, r0
 80191b6:	623b      	str	r3, [r7, #32]
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 80191b8:	6a3b      	ldr	r3, [r7, #32]
 80191ba:	61fb      	str	r3, [r7, #28]

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80191bc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80191c0:	837b      	strh	r3, [r7, #26]
        lv_color_t * cbuf_tmp = cbuf;
 80191c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	885b      	ldrh	r3, [r3, #2]
 80191ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80191ce:	e014      	b.n	80191fa <convert_cb+0xa4>
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 80191d0:	69fa      	ldr	r2, [r7, #28]
 80191d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80191d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80191d6:	f008 ff21 	bl	802201c <lv_memcpy>
            src_tmp8 += src_stride_byte;
 80191da:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80191de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80191e0:	4413      	add	r3, r2
 80191e2:	647b      	str	r3, [r7, #68]	; 0x44
            cbuf_tmp += dest_w;
 80191e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80191e6:	6a3b      	ldr	r3, [r7, #32]
 80191e8:	4413      	add	r3, r2
 80191ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80191ec:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80191f0:	b29b      	uxth	r3, r3
 80191f2:	3301      	adds	r3, #1
 80191f4:	b29b      	uxth	r3, r3
 80191f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019200:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8019204:	429a      	cmp	r2, r3
 8019206:	dde3      	ble.n	80191d0 <convert_cb+0x7a>
        }

        /*Make "holes" for with Chroma keying*/
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8019208:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801920c:	2b06      	cmp	r3, #6
 801920e:	f040 810f 	bne.w	8019430 <convert_cb+0x2da>
            uint32_t i;
            lv_color_t chk = LV_COLOR_CHROMA_KEY;
 8019212:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8019216:	f7ff fd12 	bl	8018c3e <lv_color_hex>
 801921a:	4603      	mov	r3, r0
 801921c:	743b      	strb	r3, [r7, #16]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
            uint8_t * cbuf_uint = (uint8_t *)cbuf;
 801921e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019220:	617b      	str	r3, [r7, #20]
            uint8_t chk_v = chk.full;
 8019222:	7c3b      	ldrb	r3, [r7, #16]
 8019224:	74fb      	strb	r3, [r7, #19]
            uint16_t chk_v = chk.full;
#elif LV_COLOR_DEPTH == 32
            uint32_t * cbuf_uint = (uint32_t *)cbuf;
            uint32_t chk_v = chk.full;
#endif
            for(i = 0; i < px_cnt; i++) {
 8019226:	2300      	movs	r3, #0
 8019228:	63bb      	str	r3, [r7, #56]	; 0x38
 801922a:	e00e      	b.n	801924a <convert_cb+0xf4>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 801922c:	697a      	ldr	r2, [r7, #20]
 801922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019230:	4413      	add	r3, r2
 8019232:	781b      	ldrb	r3, [r3, #0]
 8019234:	7cfa      	ldrb	r2, [r7, #19]
 8019236:	429a      	cmp	r2, r3
 8019238:	d104      	bne.n	8019244 <convert_cb+0xee>
 801923a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801923e:	4413      	add	r3, r2
 8019240:	2200      	movs	r2, #0
 8019242:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < px_cnt; i++) {
 8019244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019246:	3301      	adds	r3, #1
 8019248:	63bb      	str	r3, [r7, #56]	; 0x38
 801924a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801924e:	429a      	cmp	r2, r3
 8019250:	d3ec      	bcc.n	801922c <convert_cb+0xd6>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8019252:	e0ed      	b.n	8019430 <convert_cb+0x2da>
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8019254:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019258:	2b05      	cmp	r3, #5
 801925a:	d16a      	bne.n	8019332 <convert_cb+0x1dc>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801925c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019260:	68fa      	ldr	r2, [r7, #12]
 8019262:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019266:	fb02 f303 	mul.w	r3, r2, r3
 801926a:	68fa      	ldr	r2, [r7, #12]
 801926c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019270:	4413      	add	r3, r2
 8019272:	005b      	lsls	r3, r3, #1
 8019274:	461a      	mov	r2, r3
 8019276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019278:	4413      	add	r3, r2
 801927a:	647b      	str	r3, [r7, #68]	; 0x44

        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 801927c:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8019280:	68f8      	ldr	r0, [r7, #12]
 8019282:	f7ff fd0f 	bl	8018ca4 <lv_area_get_width>
 8019286:	4603      	mov	r3, r0
 8019288:	b29b      	uxth	r3, r3
 801928a:	1ae3      	subs	r3, r4, r3
 801928c:	b29b      	uxth	r3, r3
 801928e:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8019290:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019292:	005b      	lsls	r3, r3, #1
 8019294:	b29b      	uxth	r3, r3
 8019296:	85fb      	strh	r3, [r7, #46]	; 0x2e

        lv_coord_t dest_h = lv_area_get_height(dest_area);
 8019298:	68f8      	ldr	r0, [r7, #12]
 801929a:	f7ff fd1a 	bl	8018cd2 <lv_area_get_height>
 801929e:	4603      	mov	r3, r0
 80192a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 80192a2:	68f8      	ldr	r0, [r7, #12]
 80192a4:	f7ff fcfe 	bl	8018ca4 <lv_area_get_width>
 80192a8:	4603      	mov	r3, r0
 80192aa:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(y = 0; y < dest_h; y++) {
 80192ac:	2300      	movs	r3, #0
 80192ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80192b2:	e037      	b.n	8019324 <convert_cb+0x1ce>
            for(x = 0; x < dest_w; x++) {
 80192b4:	2300      	movs	r3, #0
 80192b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80192ba:	e017      	b.n	80192ec <convert_cb+0x196>
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 80192bc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80192c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80192c2:	4413      	add	r3, r2
 80192c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80192c6:	7852      	ldrb	r2, [r2, #1]
 80192c8:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                cbuf[x].full = *src_tmp8;
 80192ca:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80192ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80192d0:	4413      	add	r3, r2
 80192d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80192d4:	7812      	ldrb	r2, [r2, #0]
 80192d6:	701a      	strb	r2, [r3, #0]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
#elif LV_COLOR_DEPTH == 32
                cbuf[x] = *((lv_color_t *) src_tmp8);
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 80192d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192da:	3302      	adds	r3, #2
 80192dc:	647b      	str	r3, [r7, #68]	; 0x44
            for(x = 0; x < dest_w; x++) {
 80192de:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80192e2:	b29b      	uxth	r3, r3
 80192e4:	3301      	adds	r3, #1
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80192ec:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80192f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80192f4:	429a      	cmp	r2, r3
 80192f6:	dbe1      	blt.n	80192bc <convert_cb+0x166>

            }
            cbuf += dest_w;
 80192f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80192fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80192fe:	4413      	add	r3, r2
 8019300:	667b      	str	r3, [r7, #100]	; 0x64
            abuf += dest_w;
 8019302:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019306:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019308:	4413      	add	r3, r2
 801930a:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_new_line_step_byte;
 801930c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8019310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019312:	4413      	add	r3, r2
 8019314:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8019316:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801931a:	b29b      	uxth	r3, r3
 801931c:	3301      	adds	r3, #1
 801931e:	b29b      	uxth	r3, r3
 8019320:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019324:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8019328:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801932c:	429a      	cmp	r2, r3
 801932e:	dbc1      	blt.n	80192b4 <convert_cb+0x15e>
            lv_memcpy(abuf, src_tmp8, dest_w);
            abuf += dest_w;
            src_tmp8 += src_stride;
        }
    }
}
 8019330:	e07f      	b.n	8019432 <convert_cb+0x2dc>
    else if(cf == LV_IMG_CF_RGB565A8) {
 8019332:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019336:	2b14      	cmp	r3, #20
 8019338:	d17b      	bne.n	8019432 <convert_cb+0x2dc>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 801933a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801933e:	68fa      	ldr	r2, [r7, #12]
 8019340:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019344:	fb02 f303 	mul.w	r3, r2, r3
 8019348:	461a      	mov	r2, r3
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019350:	4413      	add	r3, r2
 8019352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019354:	4413      	add	r3, r2
 8019356:	647b      	str	r3, [r7, #68]	; 0x44
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8019358:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801935c:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t dest_h = lv_area_get_height(dest_area);
 801935e:	68f8      	ldr	r0, [r7, #12]
 8019360:	f7ff fcb7 	bl	8018cd2 <lv_area_get_height>
 8019364:	4603      	mov	r3, r0
 8019366:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 8019368:	68f8      	ldr	r0, [r7, #12]
 801936a:	f7ff fc9b 	bl	8018ca4 <lv_area_get_width>
 801936e:	4603      	mov	r3, r0
 8019370:	867b      	strh	r3, [r7, #50]	; 0x32
        for(y = 0; y < dest_h; y++) {
 8019372:	2300      	movs	r3, #0
 8019374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019378:	e017      	b.n	80193aa <convert_cb+0x254>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 801937a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801937e:	461a      	mov	r2, r3
 8019380:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019382:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8019384:	f008 fe4a 	bl	802201c <lv_memcpy>
            cbuf += dest_w;
 8019388:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801938c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801938e:	4413      	add	r3, r2
 8019390:	667b      	str	r3, [r7, #100]	; 0x64
            src_tmp8 += src_stride_byte;
 8019392:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019398:	4413      	add	r3, r2
 801939a:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801939c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80193a0:	b29b      	uxth	r3, r3
 80193a2:	3301      	adds	r3, #1
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80193aa:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80193ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80193b2:	429a      	cmp	r2, r3
 80193b4:	dbe1      	blt.n	801937a <convert_cb+0x224>
        src_tmp8 = (const uint8_t *)src_buf;
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 80193ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80193be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80193c2:	fb02 f303 	mul.w	r3, r2, r3
 80193c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80193c8:	4413      	add	r3, r2
 80193ca:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 80193cc:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80193d0:	68fa      	ldr	r2, [r7, #12]
 80193d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80193d6:	fb02 f303 	mul.w	r3, r2, r3
 80193da:	68fa      	ldr	r2, [r7, #12]
 80193dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80193e0:	4413      	add	r3, r2
 80193e2:	461a      	mov	r2, r3
 80193e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193e6:	4413      	add	r3, r2
 80193e8:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 80193ea:	2300      	movs	r3, #0
 80193ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80193f0:	e017      	b.n	8019422 <convert_cb+0x2cc>
            lv_memcpy(abuf, src_tmp8, dest_w);
 80193f2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80193f6:	461a      	mov	r2, r3
 80193f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80193fa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80193fc:	f008 fe0e 	bl	802201c <lv_memcpy>
            abuf += dest_w;
 8019400:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8019404:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019406:	4413      	add	r3, r2
 8019408:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_stride;
 801940a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801940e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019410:	4413      	add	r3, r2
 8019412:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8019414:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8019418:	b29b      	uxth	r3, r3
 801941a:	3301      	adds	r3, #1
 801941c:	b29b      	uxth	r3, r3
 801941e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019422:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8019426:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801942a:	429a      	cmp	r2, r3
 801942c:	dbe1      	blt.n	80193f2 <convert_cb+0x29c>
}
 801942e:	e000      	b.n	8019432 <convert_cb+0x2dc>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8019430:	bf00      	nop
}
 8019432:	bf00      	nop
 8019434:	374c      	adds	r7, #76	; 0x4c
 8019436:	46bd      	mov	sp, r7
 8019438:	bd90      	pop	{r4, r7, pc}

0801943a <lv_area_get_width>:
{
 801943a:	b480      	push	{r7}
 801943c:	b083      	sub	sp, #12
 801943e:	af00      	add	r7, sp, #0
 8019440:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019448:	b29a      	uxth	r2, r3
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019450:	b29b      	uxth	r3, r3
 8019452:	1ad3      	subs	r3, r2, r3
 8019454:	b29b      	uxth	r3, r3
 8019456:	3301      	adds	r3, #1
 8019458:	b29b      	uxth	r3, r3
 801945a:	b21b      	sxth	r3, r3
}
 801945c:	4618      	mov	r0, r3
 801945e:	370c      	adds	r7, #12
 8019460:	46bd      	mov	sp, r7
 8019462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019466:	4770      	bx	lr

08019468 <lv_area_get_height>:
{
 8019468:	b480      	push	{r7}
 801946a:	b083      	sub	sp, #12
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019476:	b29a      	uxth	r2, r3
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801947e:	b29b      	uxth	r3, r3
 8019480:	1ad3      	subs	r3, r2, r3
 8019482:	b29b      	uxth	r3, r3
 8019484:	3301      	adds	r3, #1
 8019486:	b29b      	uxth	r3, r3
 8019488:	b21b      	sxth	r3, r3
}
 801948a:	4618      	mov	r0, r3
 801948c:	370c      	adds	r7, #12
 801948e:	46bd      	mov	sp, r7
 8019490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019494:	4770      	bx	lr

08019496 <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 8019496:	b580      	push	{r7, lr}
 8019498:	b08a      	sub	sp, #40	; 0x28
 801949a:	af00      	add	r7, sp, #0
 801949c:	60f8      	str	r0, [r7, #12]
 801949e:	60b9      	str	r1, [r7, #8]
 80194a0:	4613      	mov	r3, r2
 80194a2:	71fb      	strb	r3, [r7, #7]
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 80194a4:	79fb      	ldrb	r3, [r7, #7]
 80194a6:	f003 0301 	and.w	r3, r3, #1
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d001      	beq.n	80194b2 <lv_draw_sw_layer_create+0x1c>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 80194ae:	2300      	movs	r3, #0
 80194b0:	e0df      	b.n	8019672 <lv_draw_sw_layer_create+0x1dc>
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 80194b2:	68bb      	ldr	r3, [r7, #8]
 80194b4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 80194b6:	79fb      	ldrb	r3, [r7, #7]
 80194b8:	f003 0301 	and.w	r3, r3, #1
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d001      	beq.n	80194c4 <lv_draw_sw_layer_create+0x2e>
 80194c0:	2302      	movs	r3, #2
 80194c2:	e000      	b.n	80194c6 <lv_draw_sw_layer_create+0x30>
 80194c4:	2301      	movs	r3, #1
 80194c6:	623b      	str	r3, [r7, #32]
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 80194c8:	79fb      	ldrb	r3, [r7, #7]
 80194ca:	f003 0302 	and.w	r3, r3, #2
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d074      	beq.n	80195bc <lv_draw_sw_layer_create+0x126>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 80194d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80194d6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80194da:	f361 031e 	bfi	r3, r1, #0, #31
 80194de:	6293      	str	r3, [r2, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 80194e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e2:	4618      	mov	r0, r3
 80194e4:	f007 f85f 	bl	80205a6 <lv_area_get_size>
 80194e8:	4602      	mov	r2, r0
 80194ea:	6a3b      	ldr	r3, [r7, #32]
 80194ec:	fb02 f303 	mul.w	r3, r2, r3
 80194f0:	61bb      	str	r3, [r7, #24]
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 80194f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194f6:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80194fa:	461a      	mov	r2, r3
 80194fc:	69bb      	ldr	r3, [r7, #24]
 80194fe:	4293      	cmp	r3, r2
 8019500:	d207      	bcs.n	8019512 <lv_draw_sw_layer_create+0x7c>
 8019502:	69bb      	ldr	r3, [r7, #24]
 8019504:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801950a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801950c:	f361 031e 	bfi	r3, r1, #0, #31
 8019510:	6293      	str	r3, [r2, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8019512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019516:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801951a:	4618      	mov	r0, r3
 801951c:	f008 fbf0 	bl	8021d00 <lv_mem_alloc>
 8019520:	4602      	mov	r2, r0
 8019522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019524:	615a      	str	r2, [r3, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8019526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019528:	695b      	ldr	r3, [r3, #20]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d116      	bne.n	801955c <lv_draw_sw_layer_create+0xc6>
            LV_LOG_WARN("Cannot allocate %"LV_PRIu32" bytes for layer buffer. Allocating %"LV_PRIu32" bytes instead. (Reduced performance)",
                        (uint32_t)layer_sw_ctx->buf_size_bytes, (uint32_t)LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE * px_size);
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 801952e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019530:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8019532:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8019536:	f361 031e 	bfi	r3, r1, #0, #31
 801953a:	6293      	str	r3, [r2, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 801953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019540:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8019544:	4618      	mov	r0, r3
 8019546:	f008 fbdb 	bl	8021d00 <lv_mem_alloc>
 801954a:	4602      	mov	r2, r0
 801954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801954e:	615a      	str	r2, [r3, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 8019550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019552:	695b      	ldr	r3, [r3, #20]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d101      	bne.n	801955c <lv_draw_sw_layer_create+0xc6>
                return NULL;
 8019558:	2300      	movs	r3, #0
 801955a:	e08a      	b.n	8019672 <lv_draw_sw_layer_create+0x1dc>
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 801955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801955e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019560:	3308      	adds	r3, #8
 8019562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019566:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 801956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801956c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019572:	81da      	strh	r2, [r3, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
 8019574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019576:	3308      	adds	r3, #8
 8019578:	4618      	mov	r0, r3
 801957a:	f7ff ff5e 	bl	801943a <lv_area_get_width>
 801957e:	4603      	mov	r3, r0
 8019580:	82fb      	strh	r3, [r7, #22]
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8019582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019586:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801958a:	461a      	mov	r2, r3
 801958c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019590:	fb92 f3f3 	sdiv	r3, r2, r3
 8019594:	2b00      	cmp	r3, #0
 8019596:	da00      	bge.n	801959a <lv_draw_sw_layer_create+0x104>
 8019598:	3301      	adds	r3, #1
 801959a:	105b      	asrs	r3, r3, #1
 801959c:	b21a      	sxth	r2, r3
 801959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195a0:	821a      	strh	r2, [r3, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 80195a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195a6:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80195aa:	461a      	mov	r2, r3
 80195ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80195b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80195b4:	b21a      	sxth	r2, r3
 80195b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195b8:	825a      	strh	r2, [r3, #18]
 80195ba:	e059      	b.n	8019670 <lv_draw_sw_layer_create+0x1da>
    }
    else {
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 80195bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195c0:	3308      	adds	r3, #8
 80195c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80195c6:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 80195ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195cc:	4618      	mov	r0, r3
 80195ce:	f006 ffea 	bl	80205a6 <lv_area_get_size>
 80195d2:	4603      	mov	r3, r0
 80195d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80195d8:	6a3a      	ldr	r2, [r7, #32]
 80195da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80195de:	fb03 f202 	mul.w	r2, r3, r2
 80195e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80195e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80195e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80195ea:	f362 031e 	bfi	r3, r2, #0, #31
 80195ee:	628b      	str	r3, [r1, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 80195f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195f4:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80195f8:	4618      	mov	r0, r3
 80195fa:	f008 fb81 	bl	8021d00 <lv_mem_alloc>
 80195fe:	4602      	mov	r2, r0
 8019600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019602:	615a      	str	r2, [r3, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8019604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019606:	695a      	ldr	r2, [r3, #20]
 8019608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801960c:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8019610:	4619      	mov	r1, r3
 8019612:	4610      	mov	r0, r2
 8019614:	f008 ffa8 	bl	8022568 <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8019618:	79fb      	ldrb	r3, [r7, #7]
 801961a:	f003 0301 	and.w	r3, r3, #1
 801961e:	b2d9      	uxtb	r1, r3
 8019620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019622:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8019626:	f361 13c7 	bfi	r3, r1, #7, #1
 801962a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 801962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019630:	695b      	ldr	r3, [r3, #20]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d101      	bne.n	801963a <lv_draw_sw_layer_create+0x1a4>
            return NULL;
 8019636:	2300      	movs	r3, #0
 8019638:	e01b      	b.n	8019672 <lv_draw_sw_layer_create+0x1dc>
        }

        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 801963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801963c:	695a      	ldr	r2, [r3, #20]
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	601a      	str	r2, [r3, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 8019642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019644:	f103 0208 	add.w	r2, r3, #8
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 801964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801964e:	f103 0208 	add.w	r2, r3, #8
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	609a      	str	r2, [r3, #8]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8019656:	f7f5 f815 	bl	800e684 <_lv_refr_get_disp_refreshing>
 801965a:	61f8      	str	r0, [r7, #28]
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 801965c:	69fb      	ldr	r3, [r7, #28]
 801965e:	681a      	ldr	r2, [r3, #0]
 8019660:	79fb      	ldrb	r3, [r7, #7]
 8019662:	f003 0301 	and.w	r3, r3, #1
 8019666:	b2d9      	uxtb	r1, r3
 8019668:	7c13      	ldrb	r3, [r2, #16]
 801966a:	f361 1386 	bfi	r3, r1, #6, #1
 801966e:	7413      	strb	r3, [r2, #16]
    }

    return layer_ctx;
 8019670:	68bb      	ldr	r3, [r7, #8]
}
 8019672:	4618      	mov	r0, r3
 8019674:	3728      	adds	r7, #40	; 0x28
 8019676:	46bd      	mov	sp, r7
 8019678:	bd80      	pop	{r7, pc}

0801967a <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 801967a:	b580      	push	{r7, lr}
 801967c:	b086      	sub	sp, #24
 801967e:	af00      	add	r7, sp, #0
 8019680:	60f8      	str	r0, [r7, #12]
 8019682:	60b9      	str	r1, [r7, #8]
 8019684:	4613      	mov	r3, r2
 8019686:	71fb      	strb	r3, [r7, #7]

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 8019688:	68bb      	ldr	r3, [r7, #8]
 801968a:	617b      	str	r3, [r7, #20]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801968c:	f7f4 fffa 	bl	800e684 <_lv_refr_get_disp_refreshing>
 8019690:	6138      	str	r0, [r7, #16]
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8019692:	79fb      	ldrb	r3, [r7, #7]
 8019694:	f003 0301 	and.w	r3, r3, #1
 8019698:	2b00      	cmp	r3, #0
 801969a:	d017      	beq.n	80196cc <lv_draw_sw_layer_adjust+0x52>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 801969c:	68bb      	ldr	r3, [r7, #8]
 801969e:	695a      	ldr	r2, [r3, #20]
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196a4:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80196a8:	4619      	mov	r1, r3
 80196aa:	4610      	mov	r0, r2
 80196ac:	f008 ff5c 	bl	8022568 <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 80196b0:	697a      	ldr	r2, [r7, #20]
 80196b2:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 80196b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196ba:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 80196be:	693b      	ldr	r3, [r7, #16]
 80196c0:	681a      	ldr	r2, [r3, #0]
 80196c2:	7c13      	ldrb	r3, [r2, #16]
 80196c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196c8:	7413      	strb	r3, [r2, #16]
 80196ca:	e00c      	b.n	80196e6 <lv_draw_sw_layer_adjust+0x6c>
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 80196cc:	697a      	ldr	r2, [r7, #20]
 80196ce:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 80196d2:	f36f 13c7 	bfc	r3, #7, #1
 80196d6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 80196da:	693b      	ldr	r3, [r7, #16]
 80196dc:	681a      	ldr	r2, [r3, #0]
 80196de:	7c13      	ldrb	r3, [r2, #16]
 80196e0:	f36f 1386 	bfc	r3, #6, #1
 80196e4:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 80196e6:	68bb      	ldr	r3, [r7, #8]
 80196e8:	695a      	ldr	r2, [r3, #20]
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 80196ee:	68bb      	ldr	r3, [r7, #8]
 80196f0:	f103 0208 	add.w	r2, r3, #8
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 80196f8:	68bb      	ldr	r3, [r7, #8]
 80196fa:	f103 0208 	add.w	r2, r3, #8
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	609a      	str	r2, [r3, #8]
}
 8019702:	bf00      	nop
 8019704:	3718      	adds	r7, #24
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}

0801970a <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 801970a:	b580      	push	{r7, lr}
 801970c:	b08a      	sub	sp, #40	; 0x28
 801970e:	af00      	add	r7, sp, #0
 8019710:	60f8      	str	r0, [r7, #12]
 8019712:	60b9      	str	r1, [r7, #8]
 8019714:	607a      	str	r2, [r7, #4]
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 8019716:	68bb      	ldr	r3, [r7, #8]
 8019718:	627b      	str	r3, [r7, #36]	; 0x24

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	61fb      	str	r3, [r7, #28]
    img.header.always_zero = 0;
 8019720:	7d3b      	ldrb	r3, [r7, #20]
 8019722:	f36f 1347 	bfc	r3, #5, #3
 8019726:	753b      	strb	r3, [r7, #20]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	685b      	ldr	r3, [r3, #4]
 801972c:	4618      	mov	r0, r3
 801972e:	f7ff fe84 	bl	801943a <lv_area_get_width>
 8019732:	4603      	mov	r3, r0
 8019734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019738:	b29a      	uxth	r2, r3
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	f362 2394 	bfi	r3, r2, #10, #11
 8019740:	617b      	str	r3, [r7, #20]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	685b      	ldr	r3, [r3, #4]
 8019746:	4618      	mov	r0, r3
 8019748:	f7ff fe8e 	bl	8019468 <lv_area_get_height>
 801974c:	4603      	mov	r3, r0
 801974e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019752:	b29a      	uxth	r2, r3
 8019754:	8afb      	ldrh	r3, [r7, #22]
 8019756:	f362 134f 	bfi	r3, r2, #5, #11
 801975a:	82fb      	strh	r3, [r7, #22]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 801975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801975e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8019762:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019766:	b2db      	uxtb	r3, r3
 8019768:	2b00      	cmp	r3, #0
 801976a:	d001      	beq.n	8019770 <lv_draw_sw_layer_blend+0x66>
 801976c:	2205      	movs	r2, #5
 801976e:	e000      	b.n	8019772 <lv_draw_sw_layer_blend+0x68>
 8019770:	2204      	movs	r2, #4
 8019772:	7d3b      	ldrb	r3, [r7, #20]
 8019774:	f362 0304 	bfi	r3, r2, #0, #5
 8019778:	753b      	strb	r3, [r7, #20]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	6a1a      	ldr	r2, [r3, #32]
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8019782:	68bb      	ldr	r3, [r7, #8]
 8019784:	69da      	ldr	r2, [r3, #28]
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 801978a:	68bb      	ldr	r3, [r7, #8]
 801978c:	699a      	ldr	r2, [r3, #24]
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8019792:	f7f4 ff77 	bl	800e684 <_lv_refr_get_disp_refreshing>
 8019796:	6238      	str	r0, [r7, #32]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8019798:	6a3b      	ldr	r3, [r7, #32]
 801979a:	681a      	ldr	r2, [r3, #0]
 801979c:	68bb      	ldr	r3, [r7, #8]
 801979e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 80197a2:	7c13      	ldrb	r3, [r2, #16]
 80197a4:	f361 1386 	bfi	r3, r1, #6, #1
 80197a8:	7413      	strb	r3, [r2, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 80197aa:	68bb      	ldr	r3, [r7, #8]
 80197ac:	f103 0208 	add.w	r2, r3, #8
 80197b0:	f107 0314 	add.w	r3, r7, #20
 80197b4:	6879      	ldr	r1, [r7, #4]
 80197b6:	68f8      	ldr	r0, [r7, #12]
 80197b8:	f7f6 fcd2 	bl	8010160 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 80197bc:	68f8      	ldr	r0, [r7, #12]
 80197be:	f7f6 fc25 	bl	801000c <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 80197c2:	f107 0314 	add.w	r3, r7, #20
 80197c6:	4618      	mov	r0, r3
 80197c8:	f7fa fd92 	bl	80142f0 <lv_img_cache_invalidate_src>
}
 80197cc:	bf00      	nop
 80197ce:	3728      	adds	r7, #40	; 0x28
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}

080197d4 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b082      	sub	sp, #8
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
 80197dc:	6039      	str	r1, [r7, #0]
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	695b      	ldr	r3, [r3, #20]
 80197e2:	4618      	mov	r0, r3
 80197e4:	f008 fabc 	bl	8021d60 <lv_mem_free>
}
 80197e8:	bf00      	nop
 80197ea:	3708      	adds	r7, #8
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd80      	pop	{r7, pc}

080197f0 <lv_area_copy>:
{
 80197f0:	b480      	push	{r7}
 80197f2:	b083      	sub	sp, #12
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8019804:	683b      	ldr	r3, [r7, #0]
 8019806:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801980e:	683b      	ldr	r3, [r7, #0]
 8019810:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	80da      	strh	r2, [r3, #6]
}
 8019822:	bf00      	nop
 8019824:	370c      	adds	r7, #12
 8019826:	46bd      	mov	sp, r7
 8019828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982c:	4770      	bx	lr

0801982e <lv_area_get_width>:
{
 801982e:	b480      	push	{r7}
 8019830:	b083      	sub	sp, #12
 8019832:	af00      	add	r7, sp, #0
 8019834:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801983c:	b29a      	uxth	r2, r3
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019844:	b29b      	uxth	r3, r3
 8019846:	1ad3      	subs	r3, r2, r3
 8019848:	b29b      	uxth	r3, r3
 801984a:	3301      	adds	r3, #1
 801984c:	b29b      	uxth	r3, r3
 801984e:	b21b      	sxth	r3, r3
}
 8019850:	4618      	mov	r0, r3
 8019852:	370c      	adds	r7, #12
 8019854:	46bd      	mov	sp, r7
 8019856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985a:	4770      	bx	lr

0801985c <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 801985c:	b590      	push	{r4, r7, lr}
 801985e:	b09d      	sub	sp, #116	; 0x74
 8019860:	af02      	add	r7, sp, #8
 8019862:	60f8      	str	r0, [r7, #12]
 8019864:	60b9      	str	r1, [r7, #8]
 8019866:	607a      	str	r2, [r7, #4]
 8019868:	603b      	str	r3, [r7, #0]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 801986a:	68bb      	ldr	r3, [r7, #8]
 801986c:	6818      	ldr	r0, [r3, #0]
 801986e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8019872:	2300      	movs	r3, #0
 8019874:	683a      	ldr	r2, [r7, #0]
 8019876:	f005 fcfc 	bl	801f272 <lv_font_get_glyph_dsc>
 801987a:	4603      	mov	r3, r0
 801987c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(g_ret == false) {
 8019880:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019884:	f083 0301 	eor.w	r3, r3, #1
 8019888:	b2db      	uxtb	r3, r3
 801988a:	2b00      	cmp	r3, #0
 801988c:	d05c      	beq.n	8019948 <lv_draw_sw_letter+0xec>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 801988e:	683b      	ldr	r3, [r7, #0]
 8019890:	2b1f      	cmp	r3, #31
 8019892:	f240 80cf 	bls.w	8019a34 <lv_draw_sw_letter+0x1d8>
 8019896:	683b      	ldr	r3, [r7, #0]
 8019898:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801989c:	4293      	cmp	r3, r2
 801989e:	f000 80c9 	beq.w	8019a34 <lv_draw_sw_letter+0x1d8>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	f242 020c 	movw	r2, #8204	; 0x200c
 80198a8:	4293      	cmp	r3, r2
 80198aa:	f000 80c3 	beq.w	8019a34 <lv_draw_sw_letter+0x1d8>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198b4:	b29a      	uxth	r2, r3
 80198b6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80198ba:	b29b      	uxth	r3, r3
 80198bc:	4413      	add	r3, r2
 80198be:	b29b      	uxth	r3, r3
 80198c0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80198ca:	b29a      	uxth	r2, r3
 80198cc:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80198d0:	b29b      	uxth	r3, r3
 80198d2:	4413      	add	r3, r2
 80198d4:	b29b      	uxth	r3, r3
 80198d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 80198da:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80198de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80198e2:	4413      	add	r3, r2
 80198e4:	b29b      	uxth	r3, r3
 80198e6:	b21c      	sxth	r4, r3
 80198e8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80198ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80198f0:	4413      	add	r3, r2
 80198f2:	b29b      	uxth	r3, r3
 80198f4:	b21b      	sxth	r3, r3
 80198f6:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 80198fa:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 80198fe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8019902:	9300      	str	r3, [sp, #0]
 8019904:	4623      	mov	r3, r4
 8019906:	f006 fe17 	bl	8020538 <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 801990a:	f107 0310 	add.w	r3, r7, #16
 801990e:	4618      	mov	r0, r3
 8019910:	f7fa fb5a 	bl	8013fc8 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8019914:	2302      	movs	r3, #2
 8019916:	74fb      	strb	r3, [r7, #19]
            glyph_dsc.outline_opa = LV_OPA_MIN;
 8019918:	2302      	movs	r3, #2
 801991a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 801991e:	2302      	movs	r3, #2
 8019920:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8019924:	2302      	movs	r3, #2
 8019926:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            glyph_dsc.border_color = dsc->color;
 801992a:	68bb      	ldr	r3, [r7, #8]
 801992c:	7b1b      	ldrb	r3, [r3, #12]
 801992e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            glyph_dsc.border_width = 1;
 8019932:	2301      	movs	r3, #1
 8019934:	857b      	strh	r3, [r7, #42]	; 0x2a
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	68db      	ldr	r3, [r3, #12]
 801993a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801993e:	f107 0110 	add.w	r1, r7, #16
 8019942:	68f8      	ldr	r0, [r7, #12]
 8019944:	4798      	blx	r3
#endif
        }
        return;
 8019946:	e075      	b.n	8019a34 <lv_draw_sw_letter+0x1d8>
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8019948:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801994c:	2b00      	cmp	r3, #0
 801994e:	d073      	beq.n	8019a38 <lv_draw_sw_letter+0x1dc>
 8019950:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8019954:	2b00      	cmp	r3, #0
 8019956:	d06f      	beq.n	8019a38 <lv_draw_sw_letter+0x1dc>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801995e:	b29a      	uxth	r2, r3
 8019960:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8019964:	b29b      	uxth	r3, r3
 8019966:	4413      	add	r3, r2
 8019968:	b29b      	uxth	r3, r3
 801996a:	b21b      	sxth	r3, r3
 801996c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019976:	b29a      	uxth	r2, r3
 8019978:	68bb      	ldr	r3, [r7, #8]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019980:	b299      	uxth	r1, r3
 8019982:	68bb      	ldr	r3, [r7, #8]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801998a:	b29b      	uxth	r3, r3
 801998c:	1acb      	subs	r3, r1, r3
 801998e:	b29b      	uxth	r3, r3
 8019990:	4413      	add	r3, r2
 8019992:	b29a      	uxth	r2, r3
 8019994:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8019998:	1ad3      	subs	r3, r2, r3
 801999a:	b29a      	uxth	r2, r3
 801999c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80199a0:	b29b      	uxth	r3, r3
 80199a2:	1ad3      	subs	r3, r2, r3
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	b21b      	sxth	r3, r3
 80199a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 80199ac:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80199b0:	461a      	mov	r2, r3
 80199b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80199b6:	4413      	add	r3, r2
 80199b8:	68fa      	ldr	r2, [r7, #12]
 80199ba:	6892      	ldr	r2, [r2, #8]
 80199bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80199c0:	4293      	cmp	r3, r2
 80199c2:	db3b      	blt.n	8019a3c <lv_draw_sw_letter+0x1e0>
       gpos.x > draw_ctx->clip_area->x2 ||
 80199c4:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	689b      	ldr	r3, [r3, #8]
 80199cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 80199d0:	429a      	cmp	r2, r3
 80199d2:	dc33      	bgt.n	8019a3c <lv_draw_sw_letter+0x1e0>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 80199d4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80199d8:	461a      	mov	r2, r3
 80199da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80199de:	4413      	add	r3, r2
 80199e0:	68fa      	ldr	r2, [r7, #12]
 80199e2:	6892      	ldr	r2, [r2, #8]
 80199e4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 80199e8:	4293      	cmp	r3, r2
 80199ea:	db27      	blt.n	8019a3c <lv_draw_sw_letter+0x1e0>
       gpos.y > draw_ctx->clip_area->y2)  {
 80199ec:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	689b      	ldr	r3, [r3, #8]
 80199f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 80199f8:	429a      	cmp	r2, r3
 80199fa:	dc1f      	bgt.n	8019a3c <lv_draw_sw_letter+0x1e0>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 80199fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199fe:	6839      	ldr	r1, [r7, #0]
 8019a00:	4618      	mov	r0, r3
 8019a02:	f005 fc23 	bl	801f24c <lv_font_get_glyph_bitmap>
 8019a06:	6638      	str	r0, [r7, #96]	; 0x60
    if(map_p == NULL) {
 8019a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d018      	beq.n	8019a40 <lv_draw_sw_letter+0x1e4>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 8019a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a10:	7b1b      	ldrb	r3, [r3, #12]
 8019a12:	f003 0303 	and.w	r3, r3, #3
 8019a16:	b2db      	uxtb	r3, r3
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d112      	bne.n	8019a42 <lv_draw_sw_letter+0x1e6>
#else
        LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
 8019a1c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8019a20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019a26:	9300      	str	r3, [sp, #0]
 8019a28:	460b      	mov	r3, r1
 8019a2a:	68b9      	ldr	r1, [r7, #8]
 8019a2c:	68f8      	ldr	r0, [r7, #12]
 8019a2e:	f000 f80b 	bl	8019a48 <draw_letter_normal>
 8019a32:	e006      	b.n	8019a42 <lv_draw_sw_letter+0x1e6>
        return;
 8019a34:	bf00      	nop
 8019a36:	e004      	b.n	8019a42 <lv_draw_sw_letter+0x1e6>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8019a38:	bf00      	nop
 8019a3a:	e002      	b.n	8019a42 <lv_draw_sw_letter+0x1e6>
        return;
 8019a3c:	bf00      	nop
 8019a3e:	e000      	b.n	8019a42 <lv_draw_sw_letter+0x1e6>
        return;
 8019a40:	bf00      	nop
    }
}
 8019a42:	376c      	adds	r7, #108	; 0x6c
 8019a44:	46bd      	mov	sp, r7
 8019a46:	bd90      	pop	{r4, r7, pc}

08019a48 <draw_letter_normal>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                                     const lv_point_t * pos, lv_font_glyph_dsc_t * g, const uint8_t * map_p)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b0aa      	sub	sp, #168	; 0xa8
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	60f8      	str	r0, [r7, #12]
 8019a50:	60b9      	str	r1, [r7, #8]
 8019a52:	607a      	str	r2, [r7, #4]
 8019a54:	603b      	str	r3, [r7, #0]

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	7b9b      	ldrb	r3, [r3, #14]
 8019a5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019a5e:	b2db      	uxtb	r3, r3
 8019a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    lv_opa_t opa = dsc->opa;
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	7e1b      	ldrb	r3, [r3, #24]
 8019a68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 8019a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019a70:	2b03      	cmp	r3, #3
 8019a72:	d102      	bne.n	8019a7a <draw_letter_normal+0x32>
 8019a74:	2304      	movs	r3, #4
 8019a76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 8019a7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019a7e:	3b01      	subs	r3, #1
 8019a80:	2b07      	cmp	r3, #7
 8019a82:	f200 8287 	bhi.w	8019f94 <draw_letter_normal+0x54c>
 8019a86:	a201      	add	r2, pc, #4	; (adr r2, 8019a8c <draw_letter_normal+0x44>)
 8019a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a8c:	08019aad 	.word	0x08019aad
 8019a90:	08019ac1 	.word	0x08019ac1
 8019a94:	08019f95 	.word	0x08019f95
 8019a98:	08019ad5 	.word	0x08019ad5
 8019a9c:	08019f95 	.word	0x08019f95
 8019aa0:	08019f95 	.word	0x08019f95
 8019aa4:	08019f95 	.word	0x08019f95
 8019aa8:	08019ae9 	.word	0x08019ae9
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8019aac:	4b6a      	ldr	r3, [pc, #424]	; (8019c58 <draw_letter_normal+0x210>)
 8019aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0x80;
 8019ab2:	2380      	movs	r3, #128	; 0x80
 8019ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 2;
 8019ab8:	2302      	movs	r3, #2
 8019aba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019abe:	e01e      	b.n	8019afe <draw_letter_normal+0xb6>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 8019ac0:	4b66      	ldr	r3, [pc, #408]	; (8019c5c <draw_letter_normal+0x214>)
 8019ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xC0;
 8019ac6:	23c0      	movs	r3, #192	; 0xc0
 8019ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 4;
 8019acc:	2304      	movs	r3, #4
 8019ace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019ad2:	e014      	b.n	8019afe <draw_letter_normal+0xb6>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8019ad4:	4b62      	ldr	r3, [pc, #392]	; (8019c60 <draw_letter_normal+0x218>)
 8019ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xF0;
 8019ada:	23f0      	movs	r3, #240	; 0xf0
 8019adc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 16;
 8019ae0:	2310      	movs	r3, #16
 8019ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019ae6:	e00a      	b.n	8019afe <draw_letter_normal+0xb6>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 8019ae8:	4b5e      	ldr	r3, [pc, #376]	; (8019c64 <draw_letter_normal+0x21c>)
 8019aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xFF;
 8019aee:	23ff      	movs	r3, #255	; 0xff
 8019af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 256;
 8019af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;       /*No opa table, pixel value will be used directly*/
 8019afc:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 8019afe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019b02:	2bfc      	cmp	r3, #252	; 0xfc
 8019b04:	d842      	bhi.n	8019b8c <draw_letter_normal+0x144>
        if(prev_opa != opa || prev_bpp != bpp) {
 8019b06:	4b58      	ldr	r3, [pc, #352]	; (8019c68 <draw_letter_normal+0x220>)
 8019b08:	781b      	ldrb	r3, [r3, #0]
 8019b0a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8019b0e:	429a      	cmp	r2, r3
 8019b10:	d105      	bne.n	8019b1e <draw_letter_normal+0xd6>
 8019b12:	4b56      	ldr	r3, [pc, #344]	; (8019c6c <draw_letter_normal+0x224>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019b1a:	429a      	cmp	r2, r3
 8019b1c:	d02b      	beq.n	8019b76 <draw_letter_normal+0x12e>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 8019b1e:	2300      	movs	r3, #0
 8019b20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019b24:	e021      	b.n	8019b6a <draw_letter_normal+0x122>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 8019b26:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b2e:	4413      	add	r3, r2
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	2bff      	cmp	r3, #255	; 0xff
 8019b34:	d00d      	beq.n	8019b52 <draw_letter_normal+0x10a>
 8019b36:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b3e:	4413      	add	r3, r2
 8019b40:	781b      	ldrb	r3, [r3, #0]
 8019b42:	461a      	mov	r2, r3
 8019b44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019b48:	fb02 f303 	mul.w	r3, r2, r3
 8019b4c:	121b      	asrs	r3, r3, #8
 8019b4e:	b2db      	uxtb	r3, r3
 8019b50:	e001      	b.n	8019b56 <draw_letter_normal+0x10e>
 8019b52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019b56:	4946      	ldr	r1, [pc, #280]	; (8019c70 <draw_letter_normal+0x228>)
 8019b58:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019b5c:	440a      	add	r2, r1
 8019b5e:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 8019b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b64:	3301      	adds	r3, #1
 8019b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019b6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019b72:	429a      	cmp	r2, r3
 8019b74:	d3d7      	bcc.n	8019b26 <draw_letter_normal+0xde>
            }
        }
        bpp_opa_table_p = opa_table;
 8019b76:	4b3e      	ldr	r3, [pc, #248]	; (8019c70 <draw_letter_normal+0x228>)
 8019b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        prev_opa = opa;
 8019b7c:	4a3a      	ldr	r2, [pc, #232]	; (8019c68 <draw_letter_normal+0x220>)
 8019b7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019b82:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 8019b84:	4a39      	ldr	r2, [pc, #228]	; (8019c6c <draw_letter_normal+0x224>)
 8019b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019b8a:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	88db      	ldrh	r3, [r3, #6]
 8019b90:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t box_h = g->box_h;
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	891b      	ldrh	r3, [r3, #8]
 8019b96:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8019b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019b9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019b9e:	fb02 f303 	mul.w	r3, r2, r3
 8019ba2:	673b      	str	r3, [r7, #112]	; 0x70

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	689b      	ldr	r3, [r3, #8]
 8019bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bb2:	429a      	cmp	r2, r3
 8019bb4:	da09      	bge.n	8019bca <draw_letter_normal+0x182>
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	689b      	ldr	r3, [r3, #8]
 8019bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bbe:	461a      	mov	r2, r3
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bc6:	1ad3      	subs	r3, r2, r3
 8019bc8:	e000      	b.n	8019bcc <draw_letter_normal+0x184>
 8019bca:	2300      	movs	r3, #0
 8019bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bd4:	461a      	mov	r2, r3
 8019bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019bd8:	4413      	add	r3, r2
 8019bda:	68fa      	ldr	r2, [r7, #12]
 8019bdc:	6892      	ldr	r2, [r2, #8]
 8019bde:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019be2:	4293      	cmp	r3, r2
 8019be4:	dd0a      	ble.n	8019bfc <draw_letter_normal+0x1b4>
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	689b      	ldr	r3, [r3, #8]
 8019bea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019bee:	461a      	mov	r2, r3
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bf6:	1ad3      	subs	r3, r2, r3
 8019bf8:	3301      	adds	r3, #1
 8019bfa:	e000      	b.n	8019bfe <draw_letter_normal+0x1b6>
 8019bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019bfe:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	689b      	ldr	r3, [r3, #8]
 8019c0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	da09      	bge.n	8019c26 <draw_letter_normal+0x1de>
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	689b      	ldr	r3, [r3, #8]
 8019c16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c1a:	461a      	mov	r2, r3
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c22:	1ad3      	subs	r3, r2, r3
 8019c24:	e000      	b.n	8019c28 <draw_letter_normal+0x1e0>
 8019c26:	2300      	movs	r3, #0
 8019c28:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c30:	461a      	mov	r2, r3
 8019c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c34:	4413      	add	r3, r2
 8019c36:	68fa      	ldr	r2, [r7, #12]
 8019c38:	6892      	ldr	r2, [r2, #8]
 8019c3a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8019c3e:	4293      	cmp	r3, r2
 8019c40:	dd18      	ble.n	8019c74 <draw_letter_normal+0x22c>
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	689b      	ldr	r3, [r3, #8]
 8019c46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019c4a:	461a      	mov	r2, r3
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c52:	1ad3      	subs	r3, r2, r3
 8019c54:	3301      	adds	r3, #1
 8019c56:	e00e      	b.n	8019c76 <draw_letter_normal+0x22e>
 8019c58:	08026774 	.word	0x08026774
 8019c5c:	08026778 	.word	0x08026778
 8019c60:	0802677c 	.word	0x0802677c
 8019c64:	0802678c 	.word	0x0802678c
 8019c68:	2000071d 	.word	0x2000071d
 8019c6c:	20000720 	.word	0x20000720
 8019c70:	20000724 	.word	0x20000724
 8019c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c76:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8019c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019c7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019c7c:	fb02 f303 	mul.w	r3, r2, r3
 8019c80:	4619      	mov	r1, r3
 8019c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c84:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019c88:	fb02 f303 	mul.w	r3, r2, r3
 8019c8c:	440b      	add	r3, r1
 8019c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    map_p += bit_ofs >> 3;
 8019c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c92:	08db      	lsrs	r3, r3, #3
 8019c94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8019c98:	4413      	add	r3, r2
 8019c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 8019c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019ca0:	f003 0307 	and.w	r3, r3, #7
 8019ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8019ca8:	f107 0320 	add.w	r3, r7, #32
 8019cac:	211c      	movs	r1, #28
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f008 fc5a 	bl	8022568 <lv_memset_00>
    blend_dsc.color = dsc->color;
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	7b1b      	ldrb	r3, [r3, #12]
 8019cb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    blend_dsc.opa = dsc->opa;
 8019cbc:	68bb      	ldr	r3, [r7, #8]
 8019cbe:	7e1b      	ldrb	r3, [r3, #24]
 8019cc0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    blend_dsc.blend_mode = dsc->blend_mode;
 8019cc4:	68bb      	ldr	r3, [r7, #8]
 8019cc6:	7f1b      	ldrb	r3, [r3, #28]
 8019cc8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8019ccc:	b2db      	uxtb	r3, r3
 8019cce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8019cd2:	f7f4 fcd7 	bl	800e684 <_lv_refr_get_disp_refreshing>
 8019cd6:	4603      	mov	r3, r0
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f005 fffd 	bl	801fcd8 <lv_disp_get_hor_res>
 8019cde:	4603      	mov	r3, r0
 8019ce0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8019ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019ce6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019ce8:	fb03 f202 	mul.w	r2, r3, r2
 8019cec:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019cf0:	4293      	cmp	r3, r2
 8019cf2:	bfa8      	it	ge
 8019cf4:	4613      	movge	r3, r2
 8019cf6:	657b      	str	r3, [r7, #84]	; 0x54
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8019cf8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019cfa:	f008 f88b 	bl	8021e14 <lv_mem_buf_get>
 8019cfe:	6538      	str	r0, [r7, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 8019d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 8019d04:	2300      	movs	r3, #0
 8019d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d10:	b29a      	uxth	r2, r3
 8019d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019d14:	b29b      	uxth	r3, r3
 8019d16:	4413      	add	r3, r2
 8019d18:	b29b      	uxth	r3, r3
 8019d1a:	b21b      	sxth	r3, r3
 8019d1c:	833b      	strh	r3, [r7, #24]
    fill_area.x2 = col_end  + pos->x - 1;
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d24:	b29a      	uxth	r2, r3
 8019d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019d28:	b29b      	uxth	r3, r3
 8019d2a:	4413      	add	r3, r2
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	3b01      	subs	r3, #1
 8019d30:	b29b      	uxth	r3, r3
 8019d32:	b21b      	sxth	r3, r3
 8019d34:	83bb      	strh	r3, [r7, #28]
    fill_area.y1 = row_start + pos->y;
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019d3c:	b29a      	uxth	r2, r3
 8019d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019d40:	b29b      	uxth	r3, r3
 8019d42:	4413      	add	r3, r2
 8019d44:	b29b      	uxth	r3, r3
 8019d46:	b21b      	sxth	r3, r3
 8019d48:	837b      	strh	r3, [r7, #26]
    fill_area.y2 = fill_area.y1;
 8019d4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019d4e:	83fb      	strh	r3, [r7, #30]
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
 8019d50:	f107 0318 	add.w	r3, r7, #24
 8019d54:	4618      	mov	r0, r3
 8019d56:	f7ff fd6a 	bl	801982e <lv_area_get_width>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
 8019d60:	f107 0218 	add.w	r2, r7, #24
 8019d64:	f107 0310 	add.w	r3, r7, #16
 8019d68:	4611      	mov	r1, r2
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f7ff fd40 	bl	80197f0 <lv_area_copy>
    mask_area.y2 = mask_area.y1 + row_end;
 8019d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019d74:	b29a      	uxth	r2, r3
 8019d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019d78:	b29b      	uxth	r3, r3
 8019d7a:	4413      	add	r3, r2
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	b21b      	sxth	r3, r3
 8019d80:	82fb      	strh	r3, [r7, #22]
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 8019d82:	f107 0310 	add.w	r3, r7, #16
 8019d86:	4618      	mov	r0, r3
 8019d88:	f7f7 fe86 	bl	8011a98 <lv_draw_mask_is_any>
 8019d8c:	4603      	mov	r3, r0
 8019d8e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
#endif
    blend_dsc.blend_area = &fill_area;
 8019d92:	f107 0318 	add.w	r3, r7, #24
 8019d96:	623b      	str	r3, [r7, #32]
    blend_dsc.mask_area = &fill_area;
 8019d98:	f107 0318 	add.w	r3, r7, #24
 8019d9c:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t col_bit_max = 8 - bpp;
 8019d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019da2:	f1c3 0308 	rsb	r3, r3, #8
 8019da6:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8019da8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019dac:	441a      	add	r2, r3
 8019dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019db0:	1ad3      	subs	r3, r2, r3
 8019db2:	461a      	mov	r2, r3
 8019db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019db8:	fb02 f303 	mul.w	r3, r2, r3
 8019dbc:	647b      	str	r3, [r7, #68]	; 0x44

    for(row = row_start ; row < row_end; row++) {
 8019dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019dc4:	e0c3      	b.n	8019f4e <draw_letter_normal+0x506>
#if LV_DRAW_COMPLEX
        int32_t mask_p_start = mask_p;
 8019dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019dca:	643b      	str	r3, [r7, #64]	; 0x40
#endif
        bitmask = bitmask_init >> col_bit;
 8019dcc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8019dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8019dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        for(col = col_start; col < col_end; col++) {
 8019ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019de2:	e04f      	b.n	8019e84 <draw_letter_normal+0x43c>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 8019de4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019de8:	781b      	ldrb	r3, [r3, #0]
 8019dea:	461a      	mov	r2, r3
 8019dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019df0:	401a      	ands	r2, r3
 8019df2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019df8:	1acb      	subs	r3, r1, r3
 8019dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8019dfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(letter_px) {
 8019e02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d00b      	beq.n	8019e22 <draw_letter_normal+0x3da>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8019e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019e0e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019e12:	441a      	add	r2, r3
 8019e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019e18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019e1a:	440b      	add	r3, r1
 8019e1c:	7812      	ldrb	r2, [r2, #0]
 8019e1e:	701a      	strb	r2, [r3, #0]
 8019e20:	e005      	b.n	8019e2e <draw_letter_normal+0x3e6>
            }
            else {
                mask_buf[mask_p] = 0;
 8019e22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019e26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019e28:	4413      	add	r3, r2
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 8019e2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d20f      	bcs.n	8019e58 <draw_letter_normal+0x410>
                col_bit += bpp;
 8019e38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e40:	4413      	add	r3, r2
 8019e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask >> bpp;
 8019e46:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8019e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8019e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019e56:	e00b      	b.n	8019e70 <draw_letter_normal+0x428>
            }
            else {
                col_bit = 0;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask_init;
 8019e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                map_p++;
 8019e66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019e6a:	3301      	adds	r3, #1
 8019e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            }

            /*Next mask byte*/
            mask_p++;
 8019e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019e74:	3301      	adds	r3, #1
 8019e76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        for(col = col_start; col < col_end; col++) {
 8019e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019e7e:	3301      	adds	r3, #1
 8019e80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019e84:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019e8a:	429a      	cmp	r2, r3
 8019e8c:	dbaa      	blt.n	8019de4 <draw_letter_normal+0x39c>
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 8019e8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d01a      	beq.n	8019ecc <draw_letter_normal+0x484>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 8019e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019e9a:	18d0      	adds	r0, r2, r3
 8019e9c:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8019ea0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8019ea4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019ea8:	f7f7 fcf8 	bl	801189c <lv_draw_mask_apply>
 8019eac:	4603      	mov	r3, r0
 8019eae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                                    fill_w);
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8019eb2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d108      	bne.n	8019ecc <draw_letter_normal+0x484>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 8019eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ebc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019ebe:	4413      	add	r3, r2
 8019ec0:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8019ec4:	4611      	mov	r1, r2
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f008 fb4e 	bl	8022568 <lv_memset_00>
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8019ecc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ed0:	1ad3      	subs	r3, r2, r3
 8019ed2:	461a      	mov	r2, r3
 8019ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019ed8:	4413      	add	r3, r2
 8019eda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019edc:	429a      	cmp	r2, r3
 8019ede:	d907      	bls.n	8019ef0 <draw_letter_normal+0x4a8>
            fill_area.y2 ++;
 8019ee0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019ee4:	b29b      	uxth	r3, r3
 8019ee6:	3301      	adds	r3, #1
 8019ee8:	b29b      	uxth	r3, r3
 8019eea:	b21b      	sxth	r3, r3
 8019eec:	83fb      	strh	r3, [r7, #30]
 8019eee:	e015      	b.n	8019f1c <draw_letter_normal+0x4d4>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019ef0:	2302      	movs	r3, #2
 8019ef2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019ef6:	f107 0320 	add.w	r3, r7, #32
 8019efa:	4619      	mov	r1, r3
 8019efc:	68f8      	ldr	r0, [r7, #12]
 8019efe:	f7fd f89b 	bl	8017038 <lv_draw_sw_blend>

            fill_area.y1 = fill_area.y2 + 1;
 8019f02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f06:	b29b      	uxth	r3, r3
 8019f08:	3301      	adds	r3, #1
 8019f0a:	b29b      	uxth	r3, r3
 8019f0c:	b21b      	sxth	r3, r3
 8019f0e:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = fill_area.y1;
 8019f10:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019f14:	83fb      	strh	r3, [r7, #30]
            mask_p = 0;
 8019f16:	2300      	movs	r3, #0
 8019f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }

        col_bit += col_bit_row_ofs;
 8019f1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f22:	4413      	add	r3, r2
 8019f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        map_p += (col_bit >> 3);
 8019f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019f2c:	08db      	lsrs	r3, r3, #3
 8019f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8019f32:	4413      	add	r3, r2
 8019f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 8019f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019f3c:	f003 0307 	and.w	r3, r3, #7
 8019f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
 8019f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019f48:	3301      	adds	r3, #1
 8019f4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019f4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019f54:	429a      	cmp	r2, r3
 8019f56:	f6ff af36 	blt.w	8019dc6 <draw_letter_normal+0x37e>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8019f5a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8019f5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f62:	429a      	cmp	r2, r3
 8019f64:	d012      	beq.n	8019f8c <draw_letter_normal+0x544>
        fill_area.y2--;
 8019f66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	3b01      	subs	r3, #1
 8019f6e:	b29b      	uxth	r3, r3
 8019f70:	b21b      	sxth	r3, r3
 8019f72:	83fb      	strh	r3, [r7, #30]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019f74:	2302      	movs	r3, #2
 8019f76:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019f7a:	f107 0320 	add.w	r3, r7, #32
 8019f7e:	4619      	mov	r1, r3
 8019f80:	68f8      	ldr	r0, [r7, #12]
 8019f82:	f7fd f859 	bl	8017038 <lv_draw_sw_blend>
        mask_p = 0;
 8019f86:	2300      	movs	r3, #0
 8019f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    lv_mem_buf_release(mask_buf);
 8019f8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8019f8e:	f007 ffed 	bl	8021f6c <lv_mem_buf_release>
 8019f92:	e000      	b.n	8019f96 <draw_letter_normal+0x54e>
            return; /*Invalid bpp. Can't render the letter*/
 8019f94:	bf00      	nop
}
 8019f96:	37a8      	adds	r7, #168	; 0xa8
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bd80      	pop	{r7, pc}

08019f9c <lv_area_get_width>:
{
 8019f9c:	b480      	push	{r7}
 8019f9e:	b083      	sub	sp, #12
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019faa:	b29a      	uxth	r2, r3
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019fb2:	b29b      	uxth	r3, r3
 8019fb4:	1ad3      	subs	r3, r2, r3
 8019fb6:	b29b      	uxth	r3, r3
 8019fb8:	3301      	adds	r3, #1
 8019fba:	b29b      	uxth	r3, r3
 8019fbc:	b21b      	sxth	r3, r3
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	370c      	adds	r7, #12
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc8:	4770      	bx	lr

08019fca <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 8019fca:	b580      	push	{r7, lr}
 8019fcc:	b098      	sub	sp, #96	; 0x60
 8019fce:	af00      	add	r7, sp, #0
 8019fd0:	60f8      	str	r0, [r7, #12]
 8019fd2:	60b9      	str	r1, [r7, #8]
 8019fd4:	607a      	str	r2, [r7, #4]
 8019fd6:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 8019fd8:	68bb      	ldr	r3, [r7, #8]
 8019fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	f000 8172 	beq.w	801a2c8 <lv_draw_sw_line+0x2fe>
    if(dsc->opa <= LV_OPA_MIN) return;
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	7a1b      	ldrb	r3, [r3, #8]
 8019fe8:	2b02      	cmp	r3, #2
 8019fea:	f240 816f 	bls.w	801a2cc <lv_draw_sw_line+0x302>

    if(point1->x == point2->x && point1->y == point2->y) return;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ff4:	683b      	ldr	r3, [r7, #0]
 8019ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ffa:	429a      	cmp	r2, r3
 8019ffc:	d108      	bne.n	801a010 <lv_draw_sw_line+0x46>
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a004:	683b      	ldr	r3, [r7, #0]
 801a006:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a00a:	429a      	cmp	r2, r3
 801a00c:	f000 8160 	beq.w	801a2d0 <lv_draw_sw_line+0x306>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 801a010:	683b      	ldr	r3, [r7, #0]
 801a012:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a01c:	4293      	cmp	r3, r2
 801a01e:	bfa8      	it	ge
 801a020:	4613      	movge	r3, r2
 801a022:	b21b      	sxth	r3, r3
 801a024:	b29a      	uxth	r2, r3
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	da00      	bge.n	801a032 <lv_draw_sw_line+0x68>
 801a030:	3301      	adds	r3, #1
 801a032:	105b      	asrs	r3, r3, #1
 801a034:	b21b      	sxth	r3, r3
 801a036:	b29b      	uxth	r3, r3
 801a038:	1ad3      	subs	r3, r2, r3
 801a03a:	b29b      	uxth	r3, r3
 801a03c:	b21b      	sxth	r3, r3
 801a03e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 801a042:	683b      	ldr	r3, [r7, #0]
 801a044:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a04e:	4293      	cmp	r3, r2
 801a050:	bfb8      	it	lt
 801a052:	4613      	movlt	r3, r2
 801a054:	b21b      	sxth	r3, r3
 801a056:	b29a      	uxth	r2, r3
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	da00      	bge.n	801a064 <lv_draw_sw_line+0x9a>
 801a062:	3301      	adds	r3, #1
 801a064:	105b      	asrs	r3, r3, #1
 801a066:	b21b      	sxth	r3, r3
 801a068:	b29b      	uxth	r3, r3
 801a06a:	4413      	add	r3, r2
 801a06c:	b29b      	uxth	r3, r3
 801a06e:	b21b      	sxth	r3, r3
 801a070:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a080:	4293      	cmp	r3, r2
 801a082:	bfa8      	it	ge
 801a084:	4613      	movge	r3, r2
 801a086:	b21b      	sxth	r3, r3
 801a088:	b29a      	uxth	r2, r3
 801a08a:	68bb      	ldr	r3, [r7, #8]
 801a08c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a090:	2b00      	cmp	r3, #0
 801a092:	da00      	bge.n	801a096 <lv_draw_sw_line+0xcc>
 801a094:	3301      	adds	r3, #1
 801a096:	105b      	asrs	r3, r3, #1
 801a098:	b21b      	sxth	r3, r3
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	1ad3      	subs	r3, r2, r3
 801a09e:	b29b      	uxth	r3, r3
 801a0a0:	b21b      	sxth	r3, r3
 801a0a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 801a0a6:	683b      	ldr	r3, [r7, #0]
 801a0a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0b2:	4293      	cmp	r3, r2
 801a0b4:	bfb8      	it	lt
 801a0b6:	4613      	movlt	r3, r2
 801a0b8:	b21b      	sxth	r3, r3
 801a0ba:	b29a      	uxth	r2, r3
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	da00      	bge.n	801a0c8 <lv_draw_sw_line+0xfe>
 801a0c6:	3301      	adds	r3, #1
 801a0c8:	105b      	asrs	r3, r3, #1
 801a0ca:	b21b      	sxth	r3, r3
 801a0cc:	b29b      	uxth	r3, r3
 801a0ce:	4413      	add	r3, r2
 801a0d0:	b29b      	uxth	r3, r3
 801a0d2:	b21b      	sxth	r3, r3
 801a0d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	689a      	ldr	r2, [r3, #8]
 801a0dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801a0e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	f006 faeb 	bl	80206c0 <_lv_area_intersect>
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(!is_common) return;
 801a0f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a0f4:	f083 0301 	eor.w	r3, r3, #1
 801a0f8:	b2db      	uxtb	r3, r3
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	f040 80ea 	bne.w	801a2d4 <lv_draw_sw_line+0x30a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	689b      	ldr	r3, [r3, #8]
 801a104:	65bb      	str	r3, [r7, #88]	; 0x58
    draw_ctx->clip_area = &clip_line;
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a10c:	609a      	str	r2, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d106      	bne.n	801a12c <lv_draw_sw_line+0x162>
 801a11e:	683b      	ldr	r3, [r7, #0]
 801a120:	687a      	ldr	r2, [r7, #4]
 801a122:	68b9      	ldr	r1, [r7, #8]
 801a124:	68f8      	ldr	r0, [r7, #12]
 801a126:	f000 f8d9 	bl	801a2dc <draw_line_hor>
 801a12a:	e014      	b.n	801a156 <lv_draw_sw_line+0x18c>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a132:	683b      	ldr	r3, [r7, #0]
 801a134:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a138:	429a      	cmp	r2, r3
 801a13a:	d106      	bne.n	801a14a <lv_draw_sw_line+0x180>
 801a13c:	683b      	ldr	r3, [r7, #0]
 801a13e:	687a      	ldr	r2, [r7, #4]
 801a140:	68b9      	ldr	r1, [r7, #8]
 801a142:	68f8      	ldr	r0, [r7, #12]
 801a144:	f000 fa2b 	bl	801a59e <draw_line_ver>
 801a148:	e005      	b.n	801a156 <lv_draw_sw_line+0x18c>
    else draw_line_skew(draw_ctx, dsc, point1, point2);
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	687a      	ldr	r2, [r7, #4]
 801a14e:	68b9      	ldr	r1, [r7, #8]
 801a150:	68f8      	ldr	r0, [r7, #12]
 801a152:	f000 fb55 	bl	801a800 <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 801a156:	68bb      	ldr	r3, [r7, #8]
 801a158:	7a5b      	ldrb	r3, [r3, #9]
 801a15a:	f003 0308 	and.w	r3, r3, #8
 801a15e:	b2db      	uxtb	r3, r3
 801a160:	2b00      	cmp	r3, #0
 801a162:	d107      	bne.n	801a174 <lv_draw_sw_line+0x1aa>
 801a164:	68bb      	ldr	r3, [r7, #8]
 801a166:	7a5b      	ldrb	r3, [r3, #9]
 801a168:	f003 0304 	and.w	r3, r3, #4
 801a16c:	b2db      	uxtb	r3, r3
 801a16e:	2b00      	cmp	r3, #0
 801a170:	f000 80a6 	beq.w	801a2c0 <lv_draw_sw_line+0x2f6>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 801a174:	f107 0310 	add.w	r3, r7, #16
 801a178:	4618      	mov	r0, r3
 801a17a:	f7f9 ff25 	bl	8013fc8 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 801a17e:	68bb      	ldr	r3, [r7, #8]
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	753b      	strb	r3, [r7, #20]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801a184:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a188:	823b      	strh	r3, [r7, #16]
        cir_dsc.bg_opa = dsc->opa;
 801a18a:	68bb      	ldr	r3, [r7, #8]
 801a18c:	7a1b      	ldrb	r3, [r3, #8]
 801a18e:	74fb      	strb	r3, [r7, #19]

        int32_t r = (dsc->width >> 1);
 801a190:	68bb      	ldr	r3, [r7, #8]
 801a192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a196:	105b      	asrs	r3, r3, #1
 801a198:	b21b      	sxth	r3, r3
 801a19a:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a1a2:	b29b      	uxth	r3, r3
 801a1a4:	f003 0301 	and.w	r3, r3, #1
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	bf0c      	ite	eq
 801a1ac:	2301      	moveq	r3, #1
 801a1ae:	2300      	movne	r3, #0
 801a1b0:	b2db      	uxtb	r3, r3
 801a1b2:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t cir_area;

        if(dsc->round_start) {
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	7a5b      	ldrb	r3, [r3, #9]
 801a1b8:	f003 0304 	and.w	r3, r3, #4
 801a1bc:	b2db      	uxtb	r3, r3
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d03b      	beq.n	801a23a <lv_draw_sw_line+0x270>
            cir_area.x1 = point1->x - r;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a1c8:	b29a      	uxth	r2, r3
 801a1ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1cc:	b29b      	uxth	r3, r3
 801a1ce:	1ad3      	subs	r3, r2, r3
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	b21b      	sxth	r3, r3
 801a1d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point1->y - r;
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a1de:	b29a      	uxth	r2, r3
 801a1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1e2:	b29b      	uxth	r3, r3
 801a1e4:	1ad3      	subs	r3, r2, r3
 801a1e6:	b29b      	uxth	r3, r3
 801a1e8:	b21b      	sxth	r3, r3
 801a1ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point1->x + r - r_corr;
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a1f4:	b29a      	uxth	r2, r3
 801a1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1f8:	b29b      	uxth	r3, r3
 801a1fa:	4413      	add	r3, r2
 801a1fc:	b29a      	uxth	r2, r3
 801a1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a200:	b29b      	uxth	r3, r3
 801a202:	1ad3      	subs	r3, r2, r3
 801a204:	b29b      	uxth	r3, r3
 801a206:	b21b      	sxth	r3, r3
 801a208:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point1->y + r - r_corr ;
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a212:	b29a      	uxth	r2, r3
 801a214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a216:	b29b      	uxth	r3, r3
 801a218:	4413      	add	r3, r2
 801a21a:	b29a      	uxth	r2, r3
 801a21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a21e:	b29b      	uxth	r3, r3
 801a220:	1ad3      	subs	r3, r2, r3
 801a222:	b29b      	uxth	r3, r3
 801a224:	b21b      	sxth	r3, r3
 801a226:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 801a22a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a22e:	f107 0310 	add.w	r3, r7, #16
 801a232:	4619      	mov	r1, r3
 801a234:	68f8      	ldr	r0, [r7, #12]
 801a236:	f7f9 ff0b 	bl	8014050 <lv_draw_rect>
        }

        if(dsc->round_end) {
 801a23a:	68bb      	ldr	r3, [r7, #8]
 801a23c:	7a5b      	ldrb	r3, [r3, #9]
 801a23e:	f003 0308 	and.w	r3, r3, #8
 801a242:	b2db      	uxtb	r3, r3
 801a244:	2b00      	cmp	r3, #0
 801a246:	d03b      	beq.n	801a2c0 <lv_draw_sw_line+0x2f6>
            cir_area.x1 = point2->x - r;
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a24e:	b29a      	uxth	r2, r3
 801a250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a252:	b29b      	uxth	r3, r3
 801a254:	1ad3      	subs	r3, r2, r3
 801a256:	b29b      	uxth	r3, r3
 801a258:	b21b      	sxth	r3, r3
 801a25a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point2->y - r;
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a264:	b29a      	uxth	r2, r3
 801a266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a268:	b29b      	uxth	r3, r3
 801a26a:	1ad3      	subs	r3, r2, r3
 801a26c:	b29b      	uxth	r3, r3
 801a26e:	b21b      	sxth	r3, r3
 801a270:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point2->x + r - r_corr;
 801a274:	683b      	ldr	r3, [r7, #0]
 801a276:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a27a:	b29a      	uxth	r2, r3
 801a27c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a27e:	b29b      	uxth	r3, r3
 801a280:	4413      	add	r3, r2
 801a282:	b29a      	uxth	r2, r3
 801a284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a286:	b29b      	uxth	r3, r3
 801a288:	1ad3      	subs	r3, r2, r3
 801a28a:	b29b      	uxth	r3, r3
 801a28c:	b21b      	sxth	r3, r3
 801a28e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point2->y + r - r_corr ;
 801a292:	683b      	ldr	r3, [r7, #0]
 801a294:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a298:	b29a      	uxth	r2, r3
 801a29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a29c:	b29b      	uxth	r3, r3
 801a29e:	4413      	add	r3, r2
 801a2a0:	b29a      	uxth	r2, r3
 801a2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2a4:	b29b      	uxth	r3, r3
 801a2a6:	1ad3      	subs	r3, r2, r3
 801a2a8:	b29b      	uxth	r3, r3
 801a2aa:	b21b      	sxth	r3, r3
 801a2ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 801a2b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a2b4:	f107 0310 	add.w	r3, r7, #16
 801a2b8:	4619      	mov	r1, r3
 801a2ba:	68f8      	ldr	r0, [r7, #12]
 801a2bc:	f7f9 fec8 	bl	8014050 <lv_draw_rect>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a2c4:	609a      	str	r2, [r3, #8]
 801a2c6:	e006      	b.n	801a2d6 <lv_draw_sw_line+0x30c>
    if(dsc->width == 0) return;
 801a2c8:	bf00      	nop
 801a2ca:	e004      	b.n	801a2d6 <lv_draw_sw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 801a2cc:	bf00      	nop
 801a2ce:	e002      	b.n	801a2d6 <lv_draw_sw_line+0x30c>
    if(point1->x == point2->x && point1->y == point2->y) return;
 801a2d0:	bf00      	nop
 801a2d2:	e000      	b.n	801a2d6 <lv_draw_sw_line+0x30c>
    if(!is_common) return;
 801a2d4:	bf00      	nop
}
 801a2d6:	3760      	adds	r7, #96	; 0x60
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	bd80      	pop	{r7, pc}

0801a2dc <draw_line_hor>:
 **********************/


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b098      	sub	sp, #96	; 0x60
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	60f8      	str	r0, [r7, #12]
 801a2e4:	60b9      	str	r1, [r7, #8]
 801a2e6:	607a      	str	r2, [r7, #4]
 801a2e8:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801a2ea:	68bb      	ldr	r3, [r7, #8]
 801a2ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a2f0:	3b01      	subs	r3, #1
 801a2f2:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 801a2f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2f6:	105b      	asrs	r3, r3, #1
 801a2f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801a2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2fc:	f003 0301 	and.w	r3, r3, #1
 801a300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a302:	4413      	add	r3, r2
 801a304:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 801a306:	683b      	ldr	r3, [r7, #0]
 801a308:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a312:	4293      	cmp	r3, r2
 801a314:	bfa8      	it	ge
 801a316:	4613      	movge	r3, r2
 801a318:	b21b      	sxth	r3, r3
 801a31a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 801a31c:	683b      	ldr	r3, [r7, #0]
 801a31e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a328:	4293      	cmp	r3, r2
 801a32a:	bfb8      	it	lt
 801a32c:	4613      	movlt	r3, r2
 801a32e:	b21b      	sxth	r3, r3
 801a330:	b29b      	uxth	r3, r3
 801a332:	3b01      	subs	r3, #1
 801a334:	b29b      	uxth	r3, r3
 801a336:	b21b      	sxth	r3, r3
 801a338:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.y1 = point1->y - w_half1;
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a340:	b29a      	uxth	r2, r3
 801a342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a344:	b29b      	uxth	r3, r3
 801a346:	1ad3      	subs	r3, r2, r3
 801a348:	b29b      	uxth	r3, r3
 801a34a:	b21b      	sxth	r3, r3
 801a34c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    blend_area.y2 = point1->y + w_half0;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a354:	b29a      	uxth	r2, r3
 801a356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a358:	b29b      	uxth	r3, r3
 801a35a:	4413      	add	r3, r2
 801a35c:	b29b      	uxth	r3, r3
 801a35e:	b21b      	sxth	r3, r3
 801a360:	867b      	strh	r3, [r7, #50]	; 0x32

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	689a      	ldr	r2, [r3, #8]
 801a366:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801a36a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a36e:	4618      	mov	r0, r3
 801a370:	f006 f9a6 	bl	80206c0 <_lv_area_intersect>
 801a374:	4603      	mov	r3, r0
 801a376:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 801a37a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a37e:	f083 0301 	eor.w	r3, r3, #1
 801a382:	b2db      	uxtb	r3, r3
 801a384:	2b00      	cmp	r3, #0
 801a386:	f040 8106 	bne.w	801a596 <draw_line_hor+0x2ba>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801a38a:	68bb      	ldr	r3, [r7, #8]
 801a38c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d006      	beq.n	801a3a2 <draw_line_hor+0xc6>
 801a394:	68bb      	ldr	r3, [r7, #8]
 801a396:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d001      	beq.n	801a3a2 <draw_line_hor+0xc6>
 801a39e:	2301      	movs	r3, #1
 801a3a0:	e000      	b.n	801a3a4 <draw_line_hor+0xc8>
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801a3a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a3ac:	f003 0301 	and.w	r3, r3, #1
 801a3b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 801a3ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a3be:	4618      	mov	r0, r3
 801a3c0:	f7f7 fb6a 	bl	8011a98 <lv_draw_mask_is_any>
 801a3c4:	4603      	mov	r3, r0
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d003      	beq.n	801a3d2 <draw_line_hor+0xf6>
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801a3d0:	e006      	b.n	801a3e0 <draw_line_hor+0x104>
    else if(dashed) simple_mode = false;
 801a3d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d002      	beq.n	801a3e0 <draw_line_hor+0x104>
 801a3da:	2300      	movs	r3, #0
 801a3dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801a3e0:	f107 0310 	add.w	r3, r7, #16
 801a3e4:	211c      	movs	r1, #28
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f008 f8be 	bl	8022568 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801a3ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a3f0:	613b      	str	r3, [r7, #16]
    blend_dsc.color = dsc->color;
 801a3f2:	68bb      	ldr	r3, [r7, #8]
 801a3f4:	781b      	ldrb	r3, [r3, #0]
 801a3f6:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = dsc->opa;
 801a3f8:	68bb      	ldr	r3, [r7, #8]
 801a3fa:	7a1b      	ldrb	r3, [r3, #8]
 801a3fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801a400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a404:	2b00      	cmp	r3, #0
 801a406:	d006      	beq.n	801a416 <draw_line_hor+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a408:	f107 0310 	add.w	r3, r7, #16
 801a40c:	4619      	mov	r1, r3
 801a40e:	68f8      	ldr	r0, [r7, #12]
 801a410:	f7fc fe12 	bl	8017038 <lv_draw_sw_blend>
 801a414:	e0c0      	b.n	801a598 <draw_line_hor+0x2bc>
    }
#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {

        int32_t blend_area_w = lv_area_get_width(&blend_area);
 801a416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a41a:	4618      	mov	r0, r3
 801a41c:	f7ff fdbe 	bl	8019f9c <lv_area_get_width>
 801a420:	4603      	mov	r3, r0
 801a422:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 801a424:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a426:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801a428:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a42c:	867b      	strh	r3, [r7, #50]	; 0x32

        lv_coord_t dash_start = 0;
 801a42e:	2300      	movs	r3, #0
 801a430:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801a434:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d011      	beq.n	801a460 <draw_line_hor+0x184>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 801a43c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801a440:	461a      	mov	r2, r3
 801a442:	68bb      	ldr	r3, [r7, #8]
 801a444:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a448:	4619      	mov	r1, r3
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a450:	440b      	add	r3, r1
 801a452:	fb92 f1f3 	sdiv	r1, r2, r3
 801a456:	fb01 f303 	mul.w	r3, r1, r3
 801a45a:	1ad3      	subs	r3, r2, r3
 801a45c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 801a460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a462:	4618      	mov	r0, r3
 801a464:	f007 fcd6 	bl	8021e14 <lv_mem_buf_get>
 801a468:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a46c:	61fb      	str	r3, [r7, #28]
        blend_dsc.mask_area = &blend_area;
 801a46e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a472:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 801a474:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a478:	65bb      	str	r3, [r7, #88]	; 0x58
 801a47a:	e082      	b.n	801a582 <draw_line_hor+0x2a6>
            lv_memset_ff(mask_buf, blend_area_w);
 801a47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a47e:	4619      	mov	r1, r3
 801a480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a482:	f008 f8f2 	bl	802266a <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 801a486:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801a48a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a48c:	b21a      	sxth	r2, r3
 801a48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a490:	b21b      	sxth	r3, r3
 801a492:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a494:	f7f7 fa02 	bl	801189c <lv_draw_mask_apply>
 801a498:	4603      	mov	r3, r0
 801a49a:	f887 3020 	strb.w	r3, [r7, #32]

            if(dashed) {
 801a49e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d056      	beq.n	801a554 <draw_line_hor+0x278>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 801a4a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d052      	beq.n	801a554 <draw_line_hor+0x278>
                    lv_coord_t dash_cnt = dash_start;
 801a4ae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801a4b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    lv_coord_t i;
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801a4bc:	e042      	b.n	801a544 <draw_line_hor+0x268>
                        if(dash_cnt <= dsc->dash_width) {
 801a4be:	68bb      	ldr	r3, [r7, #8]
 801a4c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a4c4:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801a4c8:	429a      	cmp	r2, r3
 801a4ca:	dc17      	bgt.n	801a4fc <draw_line_hor+0x220>
                            int16_t diff = dsc->dash_width - dash_cnt;
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a4d2:	b29a      	uxth	r2, r3
 801a4d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801a4d8:	1ad3      	subs	r3, r2, r3
 801a4da:	b29b      	uxth	r3, r3
 801a4dc:	86fb      	strh	r3, [r7, #54]	; 0x36
                            i += diff;
 801a4de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801a4e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a4e4:	4413      	add	r3, r2
 801a4e6:	b29b      	uxth	r3, r3
 801a4e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                            dash_cnt += diff;
 801a4ec:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 801a4f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a4f2:	4413      	add	r3, r2
 801a4f4:	b29b      	uxth	r3, r3
 801a4f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a4fa:	e015      	b.n	801a528 <draw_line_hor+0x24c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801a4fc:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a506:	4619      	mov	r1, r3
 801a508:	68bb      	ldr	r3, [r7, #8]
 801a50a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a50e:	440b      	add	r3, r1
 801a510:	429a      	cmp	r2, r3
 801a512:	db03      	blt.n	801a51c <draw_line_hor+0x240>
                            dash_cnt = 0;
 801a514:	2300      	movs	r3, #0
 801a516:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a51a:	e005      	b.n	801a528 <draw_line_hor+0x24c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 801a51c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a522:	4413      	add	r3, r2
 801a524:	2200      	movs	r2, #0
 801a526:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801a528:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a52c:	b29b      	uxth	r3, r3
 801a52e:	3301      	adds	r3, #1
 801a530:	b29b      	uxth	r3, r3
 801a532:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801a536:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801a53a:	b29b      	uxth	r3, r3
 801a53c:	3301      	adds	r3, #1
 801a53e:	b29b      	uxth	r3, r3
 801a540:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a544:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a54a:	429a      	cmp	r2, r3
 801a54c:	dcb7      	bgt.n	801a4be <draw_line_hor+0x1e2>
                        }
                    }

                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801a54e:	2302      	movs	r3, #2
 801a550:	f887 3020 	strb.w	r3, [r7, #32]
                }
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a554:	f107 0310 	add.w	r3, r7, #16
 801a558:	4619      	mov	r1, r3
 801a55a:	68f8      	ldr	r0, [r7, #12]
 801a55c:	f7fc fd6c 	bl	8017038 <lv_draw_sw_blend>

            blend_area.y1++;
 801a560:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a564:	b29b      	uxth	r3, r3
 801a566:	3301      	adds	r3, #1
 801a568:	b29b      	uxth	r3, r3
 801a56a:	b21b      	sxth	r3, r3
 801a56c:	85fb      	strh	r3, [r7, #46]	; 0x2e
            blend_area.y2++;
 801a56e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a572:	b29b      	uxth	r3, r3
 801a574:	3301      	adds	r3, #1
 801a576:	b29b      	uxth	r3, r3
 801a578:	b21b      	sxth	r3, r3
 801a57a:	867b      	strh	r3, [r7, #50]	; 0x32
        for(h = blend_area.y1; h <= y2; h++) {
 801a57c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a57e:	3301      	adds	r3, #1
 801a580:	65bb      	str	r3, [r7, #88]	; 0x58
 801a582:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801a586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a588:	429a      	cmp	r2, r3
 801a58a:	f77f af77 	ble.w	801a47c <draw_line_hor+0x1a0>
        }
        lv_mem_buf_release(mask_buf);
 801a58e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a590:	f007 fcec 	bl	8021f6c <lv_mem_buf_release>
 801a594:	e000      	b.n	801a598 <draw_line_hor+0x2bc>
    if(!is_common) return;
 801a596:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801a598:	3760      	adds	r7, #96	; 0x60
 801a59a:	46bd      	mov	sp, r7
 801a59c:	bd80      	pop	{r7, pc}

0801a59e <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801a59e:	b580      	push	{r7, lr}
 801a5a0:	b098      	sub	sp, #96	; 0x60
 801a5a2:	af00      	add	r7, sp, #0
 801a5a4:	60f8      	str	r0, [r7, #12]
 801a5a6:	60b9      	str	r1, [r7, #8]
 801a5a8:	607a      	str	r2, [r7, #4]
 801a5aa:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a5b2:	3b01      	subs	r3, #1
 801a5b4:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 801a5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5b8:	105b      	asrs	r3, r3, #1
 801a5ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801a5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5be:	f003 0301 	and.w	r3, r3, #1
 801a5c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a5c4:	4413      	add	r3, r2
 801a5c6:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = point1->x - w_half1;
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5ce:	b29a      	uxth	r2, r3
 801a5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	1ad3      	subs	r3, r2, r3
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	b21b      	sxth	r3, r3
 801a5da:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.x2 = point1->x + w_half0;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5e2:	b29a      	uxth	r2, r3
 801a5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5e6:	b29b      	uxth	r3, r3
 801a5e8:	4413      	add	r3, r2
 801a5ea:	b29b      	uxth	r3, r3
 801a5ec:	b21b      	sxth	r3, r3
 801a5ee:	86bb      	strh	r3, [r7, #52]	; 0x34
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a5fc:	4293      	cmp	r3, r2
 801a5fe:	bfa8      	it	ge
 801a600:	4613      	movge	r3, r2
 801a602:	b21b      	sxth	r3, r3
 801a604:	867b      	strh	r3, [r7, #50]	; 0x32
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 801a606:	683b      	ldr	r3, [r7, #0]
 801a608:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a612:	4293      	cmp	r3, r2
 801a614:	bfb8      	it	lt
 801a616:	4613      	movlt	r3, r2
 801a618:	b21b      	sxth	r3, r3
 801a61a:	b29b      	uxth	r3, r3
 801a61c:	3b01      	subs	r3, #1
 801a61e:	b29b      	uxth	r3, r3
 801a620:	b21b      	sxth	r3, r3
 801a622:	86fb      	strh	r3, [r7, #54]	; 0x36

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	689a      	ldr	r2, [r3, #8]
 801a628:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a62c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a630:	4618      	mov	r0, r3
 801a632:	f006 f845 	bl	80206c0 <_lv_area_intersect>
 801a636:	4603      	mov	r3, r0
 801a638:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 801a63c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a640:	f083 0301 	eor.w	r3, r3, #1
 801a644:	b2db      	uxtb	r3, r3
 801a646:	2b00      	cmp	r3, #0
 801a648:	f040 80d6 	bne.w	801a7f8 <draw_line_ver+0x25a>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801a64c:	68bb      	ldr	r3, [r7, #8]
 801a64e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d006      	beq.n	801a664 <draw_line_ver+0xc6>
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d001      	beq.n	801a664 <draw_line_ver+0xc6>
 801a660:	2301      	movs	r3, #1
 801a662:	e000      	b.n	801a666 <draw_line_ver+0xc8>
 801a664:	2300      	movs	r3, #0
 801a666:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801a66a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a66e:	f003 0301 	and.w	r3, r3, #1
 801a672:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 801a676:	2301      	movs	r3, #1
 801a678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 801a67c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a680:	4618      	mov	r0, r3
 801a682:	f7f7 fa09 	bl	8011a98 <lv_draw_mask_is_any>
 801a686:	4603      	mov	r3, r0
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d003      	beq.n	801a694 <draw_line_ver+0xf6>
 801a68c:	2300      	movs	r3, #0
 801a68e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801a692:	e006      	b.n	801a6a2 <draw_line_ver+0x104>
    else if(dashed) simple_mode = false;
 801a694:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d002      	beq.n	801a6a2 <draw_line_ver+0x104>
 801a69c:	2300      	movs	r3, #0
 801a69e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801a6a2:	f107 0314 	add.w	r3, r7, #20
 801a6a6:	211c      	movs	r1, #28
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	f007 ff5d 	bl	8022568 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801a6ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a6b2:	617b      	str	r3, [r7, #20]
    blend_dsc.color = dsc->color;
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->opa;
 801a6ba:	68bb      	ldr	r3, [r7, #8]
 801a6bc:	7a1b      	ldrb	r3, [r3, #8]
 801a6be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801a6c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d006      	beq.n	801a6d8 <draw_line_ver+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a6ca:	f107 0314 	add.w	r3, r7, #20
 801a6ce:	4619      	mov	r1, r3
 801a6d0:	68f8      	ldr	r0, [r7, #12]
 801a6d2:	f7fc fcb1 	bl	8017038 <lv_draw_sw_blend>
 801a6d6:	e090      	b.n	801a7fa <draw_line_ver+0x25c>
    }

#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {
        int32_t draw_area_w = lv_area_get_width(&blend_area);
 801a6d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f7ff fc5d 	bl	8019f9c <lv_area_get_width>
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 801a6e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a6e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801a6ea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a6ee:	86fb      	strh	r3, [r7, #54]	; 0x36

        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 801a6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f007 fb8e 	bl	8021e14 <lv_mem_buf_get>
 801a6f8:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6fc:	623b      	str	r3, [r7, #32]
        blend_dsc.mask_area = &blend_area;
 801a6fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a702:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_coord_t dash_start = 0;
 801a704:	2300      	movs	r3, #0
 801a706:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801a70a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d011      	beq.n	801a736 <draw_line_ver+0x198>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 801a712:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a716:	461a      	mov	r2, r3
 801a718:	68bb      	ldr	r3, [r7, #8]
 801a71a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a71e:	4619      	mov	r1, r3
 801a720:	68bb      	ldr	r3, [r7, #8]
 801a722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a726:	440b      	add	r3, r1
 801a728:	fb92 f1f3 	sdiv	r1, r2, r3
 801a72c:	fb01 f303 	mul.w	r3, r1, r3
 801a730:	1ad3      	subs	r3, r2, r3
 801a732:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_coord_t dash_cnt = dash_start;
 801a736:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801a73a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 801a73e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a742:	657b      	str	r3, [r7, #84]	; 0x54
 801a744:	e04f      	b.n	801a7e6 <draw_line_ver+0x248>
            lv_memset_ff(mask_buf, draw_area_w);
 801a746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a748:	4619      	mov	r1, r3
 801a74a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a74c:	f007 ff8d 	bl	802266a <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 801a750:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801a754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a756:	b21a      	sxth	r2, r3
 801a758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a75a:	b21b      	sxth	r3, r3
 801a75c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a75e:	f7f7 f89d 	bl	801189c <lv_draw_mask_apply>
 801a762:	4603      	mov	r3, r0
 801a764:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if(dashed) {
 801a768:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d023      	beq.n	801a7b8 <draw_line_ver+0x21a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 801a770:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a774:	2b00      	cmp	r3, #0
 801a776:	d018      	beq.n	801a7aa <draw_line_ver+0x20c>
                    if(dash_cnt > dsc->dash_width) {
 801a778:	68bb      	ldr	r3, [r7, #8]
 801a77a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a77e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801a782:	429a      	cmp	r2, r3
 801a784:	dd02      	ble.n	801a78c <draw_line_ver+0x1ee>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 801a786:	2300      	movs	r3, #0
 801a788:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801a78c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a796:	4619      	mov	r1, r3
 801a798:	68bb      	ldr	r3, [r7, #8]
 801a79a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a79e:	440b      	add	r3, r1
 801a7a0:	429a      	cmp	r2, r3
 801a7a2:	db02      	blt.n	801a7aa <draw_line_ver+0x20c>
                        dash_cnt = 0;
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    }
                }
                dash_cnt ++;
 801a7aa:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801a7ae:	b29b      	uxth	r3, r3
 801a7b0:	3301      	adds	r3, #1
 801a7b2:	b29b      	uxth	r3, r3
 801a7b4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a7b8:	f107 0314 	add.w	r3, r7, #20
 801a7bc:	4619      	mov	r1, r3
 801a7be:	68f8      	ldr	r0, [r7, #12]
 801a7c0:	f7fc fc3a 	bl	8017038 <lv_draw_sw_blend>

            blend_area.y1++;
 801a7c4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a7c8:	b29b      	uxth	r3, r3
 801a7ca:	3301      	adds	r3, #1
 801a7cc:	b29b      	uxth	r3, r3
 801a7ce:	b21b      	sxth	r3, r3
 801a7d0:	867b      	strh	r3, [r7, #50]	; 0x32
            blend_area.y2++;
 801a7d2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a7d6:	b29b      	uxth	r3, r3
 801a7d8:	3301      	adds	r3, #1
 801a7da:	b29b      	uxth	r3, r3
 801a7dc:	b21b      	sxth	r3, r3
 801a7de:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(h = blend_area.y1; h <= y2; h++) {
 801a7e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7e2:	3301      	adds	r3, #1
 801a7e4:	657b      	str	r3, [r7, #84]	; 0x54
 801a7e6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801a7ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a7ec:	429a      	cmp	r2, r3
 801a7ee:	ddaa      	ble.n	801a746 <draw_line_ver+0x1a8>
        }
        lv_mem_buf_release(mask_buf);
 801a7f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a7f2:	f007 fbbb 	bl	8021f6c <lv_mem_buf_release>
 801a7f6:	e000      	b.n	801a7fa <draw_line_ver+0x25c>
    if(!is_common) return;
 801a7f8:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801a7fa:	3760      	adds	r7, #96	; 0x60
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	bd80      	pop	{r7, pc}

0801a800 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                 const lv_point_t * point1, const lv_point_t * point2)
{
 801a800:	b5b0      	push	{r4, r5, r7, lr}
 801a802:	b0ce      	sub	sp, #312	; 0x138
 801a804:	af02      	add	r7, sp, #8
 801a806:	f507 7498 	add.w	r4, r7, #304	; 0x130
 801a80a:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 801a80e:	6020      	str	r0, [r4, #0]
 801a810:	f507 7098 	add.w	r0, r7, #304	; 0x130
 801a814:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 801a818:	6001      	str	r1, [r0, #0]
 801a81a:	f507 7198 	add.w	r1, r7, #304	; 0x130
 801a81e:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 801a822:	600a      	str	r2, [r1, #0]
 801a824:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801a828:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 801a82c:	6013      	str	r3, [r2, #0]
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 801a82e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a83c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a84a:	429a      	cmp	r2, r3
 801a84c:	da24      	bge.n	801a898 <draw_line_skew+0x98>
        p1.y = point1->y;
 801a84e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a85c:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point2->y;
 801a860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a86e:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point1->x;
 801a872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a880:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point2->x;
 801a884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a892:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 801a896:	e023      	b.n	801a8e0 <draw_line_skew+0xe0>
    }
    else {
        p1.y = point2->y;
 801a898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a89c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a8a6:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point1->y;
 801a8aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a8ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a8b8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point2->x;
 801a8bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a8c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8ca:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point1->x;
 801a8ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a8d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8dc:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    }

    int32_t xdiff = p2.x - p1.x;
 801a8e0:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801a8e4:	461a      	mov	r2, r3
 801a8e6:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801a8ea:	1ad3      	subs	r3, r2, r3
 801a8ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 801a8f0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801a8f4:	461a      	mov	r2, r3
 801a8f6:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801a8fa:	1ad3      	subs	r3, r2, r3
 801a8fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 801a900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a904:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801a908:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801a90c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a910:	2b00      	cmp	r3, #0
 801a912:	bfb8      	it	lt
 801a914:	425b      	neglt	r3, r3
 801a916:	429a      	cmp	r2, r3
 801a918:	bfcc      	ite	gt
 801a91a:	2301      	movgt	r3, #1
 801a91c:	2300      	movle	r3, #0
 801a91e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 801a922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801a926:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a930:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 801a934:	2300      	movs	r3, #0
 801a936:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 801a93a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d00f      	beq.n	801a962 <draw_line_skew+0x162>
 801a942:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a946:	2b00      	cmp	r3, #0
 801a948:	bfb8      	it	lt
 801a94a:	425b      	neglt	r3, r3
 801a94c:	015a      	lsls	r2, r3, #5
 801a94e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a952:	2b00      	cmp	r3, #0
 801a954:	bfb8      	it	lt
 801a956:	425b      	neglt	r3, r3
 801a958:	fb92 f3f3 	sdiv	r3, r2, r3
 801a95c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a960:	e00e      	b.n	801a980 <draw_line_skew+0x180>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 801a962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a966:	2b00      	cmp	r3, #0
 801a968:	bfb8      	it	lt
 801a96a:	425b      	neglt	r3, r3
 801a96c:	015a      	lsls	r2, r3, #5
 801a96e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a972:	2b00      	cmp	r3, #0
 801a974:	bfb8      	it	lt
 801a976:	425b      	neglt	r3, r3
 801a978:	fb92 f3f3 	sdiv	r3, r2, r3
 801a97c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 801a980:	4a7f      	ldr	r2, [pc, #508]	; (801ab80 <draw_line_skew+0x380>)
 801a982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a986:	4413      	add	r3, r2
 801a988:	781b      	ldrb	r3, [r3, #0]
 801a98a:	461a      	mov	r2, r3
 801a98c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a990:	fb02 f303 	mul.w	r3, r2, r3
 801a994:	333f      	adds	r3, #63	; 0x3f
 801a996:	11db      	asrs	r3, r3, #7
 801a998:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 801a99c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a9a0:	105b      	asrs	r3, r3, #1
 801a9a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801a9a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a9aa:	f003 0301 	and.w	r3, r3, #1
 801a9ae:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a9b2:	4413      	add	r3, r2
 801a9b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 801a9b8:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801a9bc:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801a9c0:	4293      	cmp	r3, r2
 801a9c2:	bfa8      	it	ge
 801a9c4:	4613      	movge	r3, r2
 801a9c6:	b21b      	sxth	r3, r3
 801a9c8:	b29a      	uxth	r2, r3
 801a9ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	1ad3      	subs	r3, r2, r3
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	b21b      	sxth	r3, r3
 801a9d6:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 801a9da:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801a9de:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801a9e2:	4293      	cmp	r3, r2
 801a9e4:	bfb8      	it	lt
 801a9e6:	4613      	movlt	r3, r2
 801a9e8:	b21b      	sxth	r3, r3
 801a9ea:	b29a      	uxth	r2, r3
 801a9ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a9f0:	b29b      	uxth	r3, r3
 801a9f2:	4413      	add	r3, r2
 801a9f4:	b29b      	uxth	r3, r3
 801a9f6:	b21b      	sxth	r3, r3
 801a9f8:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 801a9fc:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 801aa00:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801aa04:	4293      	cmp	r3, r2
 801aa06:	bfa8      	it	ge
 801aa08:	4613      	movge	r3, r2
 801aa0a:	b21b      	sxth	r3, r3
 801aa0c:	b29a      	uxth	r2, r3
 801aa0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aa12:	b29b      	uxth	r3, r3
 801aa14:	1ad3      	subs	r3, r2, r3
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	b21b      	sxth	r3, r3
 801aa1a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 801aa1e:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 801aa22:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801aa26:	4293      	cmp	r3, r2
 801aa28:	bfb8      	it	lt
 801aa2a:	4613      	movlt	r3, r2
 801aa2c:	b21b      	sxth	r3, r3
 801aa2e:	b29a      	uxth	r2, r3
 801aa30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aa34:	b29b      	uxth	r3, r3
 801aa36:	4413      	add	r3, r2
 801aa38:	b29b      	uxth	r3, r3
 801aa3a:	b21b      	sxth	r3, r3
 801aa3c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801aa40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aa44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	689a      	ldr	r2, [r3, #8]
 801aa4c:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801aa50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801aa54:	4618      	mov	r0, r3
 801aa56:	f005 fe33 	bl	80206c0 <_lv_area_intersect>
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 801aa60:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801aa64:	f083 0301 	eor.w	r3, r3, #1
 801aa68:	b2db      	uxtb	r3, r3
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	f040 8276 	bne.w	801af5c <draw_line_skew+0x75c>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 801aa70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	f000 8085 	beq.w	801ab84 <draw_line_skew+0x384>
        if(xdiff > 0) {
 801aa7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	dd3e      	ble.n	801ab00 <draw_line_skew+0x300>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801aa82:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801aa86:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801aa90:	b29b      	uxth	r3, r3
 801aa92:	1ad3      	subs	r3, r2, r3
 801aa94:	b29b      	uxth	r3, r3
 801aa96:	b21c      	sxth	r4, r3
 801aa98:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801aa9c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801aaa0:	b29a      	uxth	r2, r3
 801aaa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801aaa6:	b29b      	uxth	r3, r3
 801aaa8:	1ad3      	subs	r3, r2, r3
 801aaaa:	b29b      	uxth	r3, r3
 801aaac:	b21b      	sxth	r3, r3
 801aaae:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801aab2:	2200      	movs	r2, #0
 801aab4:	9201      	str	r2, [sp, #4]
 801aab6:	9300      	str	r3, [sp, #0]
 801aab8:	462b      	mov	r3, r5
 801aaba:	4622      	mov	r2, r4
 801aabc:	f7f7 f84a 	bl	8011b54 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801aac0:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801aac4:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801aac8:	b29a      	uxth	r2, r3
 801aaca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801aace:	b29b      	uxth	r3, r3
 801aad0:	4413      	add	r3, r2
 801aad2:	b29b      	uxth	r3, r3
 801aad4:	b21c      	sxth	r4, r3
 801aad6:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801aada:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801aade:	b29a      	uxth	r2, r3
 801aae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801aae4:	b29b      	uxth	r3, r3
 801aae6:	4413      	add	r3, r2
 801aae8:	b29b      	uxth	r3, r3
 801aaea:	b21b      	sxth	r3, r3
 801aaec:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801aaf0:	2201      	movs	r2, #1
 801aaf2:	9201      	str	r2, [sp, #4]
 801aaf4:	9300      	str	r3, [sp, #0]
 801aaf6:	462b      	mov	r3, r5
 801aaf8:	4622      	mov	r2, r4
 801aafa:	f7f7 f82b 	bl	8011b54 <lv_draw_mask_line_points_init>
 801aafe:	e07f      	b.n	801ac00 <draw_line_skew+0x400>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801ab00:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ab04:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ab08:	b29a      	uxth	r2, r3
 801ab0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ab0e:	b29b      	uxth	r3, r3
 801ab10:	4413      	add	r3, r2
 801ab12:	b29b      	uxth	r3, r3
 801ab14:	b21c      	sxth	r4, r3
 801ab16:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ab1a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ab1e:	b29a      	uxth	r2, r3
 801ab20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ab24:	b29b      	uxth	r3, r3
 801ab26:	4413      	add	r3, r2
 801ab28:	b29b      	uxth	r3, r3
 801ab2a:	b21b      	sxth	r3, r3
 801ab2c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ab30:	2200      	movs	r2, #0
 801ab32:	9201      	str	r2, [sp, #4]
 801ab34:	9300      	str	r3, [sp, #0]
 801ab36:	462b      	mov	r3, r5
 801ab38:	4622      	mov	r2, r4
 801ab3a:	f7f7 f80b 	bl	8011b54 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801ab3e:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ab42:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ab46:	b29a      	uxth	r2, r3
 801ab48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ab4c:	b29b      	uxth	r3, r3
 801ab4e:	1ad3      	subs	r3, r2, r3
 801ab50:	b29b      	uxth	r3, r3
 801ab52:	b21c      	sxth	r4, r3
 801ab54:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ab58:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ab5c:	b29a      	uxth	r2, r3
 801ab5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ab62:	b29b      	uxth	r3, r3
 801ab64:	1ad3      	subs	r3, r2, r3
 801ab66:	b29b      	uxth	r3, r3
 801ab68:	b21b      	sxth	r3, r3
 801ab6a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801ab6e:	2201      	movs	r2, #1
 801ab70:	9201      	str	r2, [sp, #4]
 801ab72:	9300      	str	r3, [sp, #0]
 801ab74:	462b      	mov	r3, r5
 801ab76:	4622      	mov	r2, r4
 801ab78:	f7f6 ffec 	bl	8011b54 <lv_draw_mask_line_points_init>
 801ab7c:	e040      	b.n	801ac00 <draw_line_skew+0x400>
 801ab7e:	bf00      	nop
 801ab80:	0802688c 	.word	0x0802688c
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 801ab84:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ab88:	b29a      	uxth	r2, r3
 801ab8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ab8e:	b29b      	uxth	r3, r3
 801ab90:	4413      	add	r3, r2
 801ab92:	b29b      	uxth	r3, r3
 801ab94:	b219      	sxth	r1, r3
 801ab96:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801ab9a:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ab9e:	b29a      	uxth	r2, r3
 801aba0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801aba4:	b29b      	uxth	r3, r3
 801aba6:	4413      	add	r3, r2
 801aba8:	b29b      	uxth	r3, r3
 801abaa:	b21a      	sxth	r2, r3
 801abac:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801abb0:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801abb4:	2500      	movs	r5, #0
 801abb6:	9501      	str	r5, [sp, #4]
 801abb8:	9300      	str	r3, [sp, #0]
 801abba:	4613      	mov	r3, r2
 801abbc:	4622      	mov	r2, r4
 801abbe:	f7f6 ffc9 	bl	8011b54 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 801abc2:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801abc6:	b29a      	uxth	r2, r3
 801abc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801abcc:	b29b      	uxth	r3, r3
 801abce:	1ad3      	subs	r3, r2, r3
 801abd0:	b29b      	uxth	r3, r3
 801abd2:	b219      	sxth	r1, r3
 801abd4:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801abd8:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801abdc:	b29a      	uxth	r2, r3
 801abde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801abe2:	b29b      	uxth	r3, r3
 801abe4:	1ad3      	subs	r3, r2, r3
 801abe6:	b29b      	uxth	r3, r3
 801abe8:	b21a      	sxth	r2, r3
 801abea:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801abee:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801abf2:	2501      	movs	r5, #1
 801abf4:	9501      	str	r5, [sp, #4]
 801abf6:	9300      	str	r3, [sp, #0]
 801abf8:	4613      	mov	r3, r2
 801abfa:	4622      	mov	r2, r4
 801abfc:	f7f6 ffaa 	bl	8011b54 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 801ac00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ac04:	2100      	movs	r1, #0
 801ac06:	4618      	mov	r0, r3
 801ac08:	f7f6 fe16 	bl	8011838 <lv_draw_mask_add>
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 801ac12:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801ac16:	2100      	movs	r1, #0
 801ac18:	4618      	mov	r0, r3
 801ac1a:	f7f6 fe0d 	bl	8011838 <lv_draw_mask_add>
 801ac1e:	4603      	mov	r3, r0
 801ac20:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 801ac24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac28:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 801ac2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac30:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 801ac34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ac38:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	7a5b      	ldrb	r3, [r3, #9]
 801ac40:	f003 0310 	and.w	r3, r3, #16
 801ac44:	b2db      	uxtb	r3, r3
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d14f      	bne.n	801acea <draw_line_skew+0x4ea>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 801ac4a:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ac4e:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801ac52:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ac56:	b29a      	uxth	r2, r3
 801ac58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801ac5c:	b29b      	uxth	r3, r3
 801ac5e:	1ad3      	subs	r3, r2, r3
 801ac60:	b29b      	uxth	r3, r3
 801ac62:	b21d      	sxth	r5, r3
 801ac64:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ac68:	b29a      	uxth	r2, r3
 801ac6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ac6e:	b29b      	uxth	r3, r3
 801ac70:	4413      	add	r3, r2
 801ac72:	b29b      	uxth	r3, r3
 801ac74:	b21b      	sxth	r3, r3
 801ac76:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801ac7a:	2203      	movs	r2, #3
 801ac7c:	9201      	str	r2, [sp, #4]
 801ac7e:	9300      	str	r3, [sp, #0]
 801ac80:	462b      	mov	r3, r5
 801ac82:	4622      	mov	r2, r4
 801ac84:	f7f6 ff66 	bl	8011b54 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 801ac88:	f9b7 10e4 	ldrsh.w	r1, [r7, #228]	; 0xe4
 801ac8c:	f9b7 40e6 	ldrsh.w	r4, [r7, #230]	; 0xe6
 801ac90:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ac94:	b29a      	uxth	r2, r3
 801ac96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801ac9a:	b29b      	uxth	r3, r3
 801ac9c:	1ad3      	subs	r3, r2, r3
 801ac9e:	b29b      	uxth	r3, r3
 801aca0:	b21d      	sxth	r5, r3
 801aca2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801aca6:	b29a      	uxth	r2, r3
 801aca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801acac:	b29b      	uxth	r3, r3
 801acae:	4413      	add	r3, r2
 801acb0:	b29b      	uxth	r3, r3
 801acb2:	b21b      	sxth	r3, r3
 801acb4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801acb8:	2202      	movs	r2, #2
 801acba:	9201      	str	r2, [sp, #4]
 801acbc:	9300      	str	r3, [sp, #0]
 801acbe:	462b      	mov	r3, r5
 801acc0:	4622      	mov	r2, r4
 801acc2:	f7f6 ff47 	bl	8011b54 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 801acc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801acca:	2100      	movs	r1, #0
 801accc:	4618      	mov	r0, r3
 801acce:	f7f6 fdb3 	bl	8011838 <lv_draw_mask_add>
 801acd2:	4603      	mov	r3, r0
 801acd4:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 801acd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801acdc:	2100      	movs	r1, #0
 801acde:	4618      	mov	r0, r3
 801ace0:	f7f6 fdaa 	bl	8011838 <lv_draw_mask_add>
 801ace4:	4603      	mov	r3, r0
 801ace6:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    /*The real draw area is around the line.
     *It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);
 801acea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801acee:	4618      	mov	r0, r3
 801acf0:	f7ff f954 	bl	8019f9c <lv_area_get_width>
 801acf4:	4603      	mov	r3, r0
 801acf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 801acfa:	f7f3 fcc3 	bl	800e684 <_lv_refr_get_disp_refreshing>
 801acfe:	4603      	mov	r3, r0
 801ad00:	4618      	mov	r0, r3
 801ad02:	f004 ffe9 	bl	801fcd8 <lv_disp_get_hor_res>
 801ad06:	4603      	mov	r3, r0
 801ad08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 801ad0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ad10:	4618      	mov	r0, r3
 801ad12:	f005 fc48 	bl	80205a6 <lv_area_get_size>
 801ad16:	4602      	mov	r2, r0
 801ad18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ad1c:	4293      	cmp	r3, r2
 801ad1e:	d906      	bls.n	801ad2e <draw_line_skew+0x52e>
 801ad20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ad24:	4618      	mov	r0, r3
 801ad26:	f005 fc3e 	bl	80205a6 <lv_area_get_size>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	e001      	b.n	801ad32 <draw_line_skew+0x532>
 801ad2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ad32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 801ad36:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801ad3a:	f007 f86b 	bl	8021e14 <lv_mem_buf_get>
 801ad3e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

    lv_coord_t y2 = blend_area.y2;
 801ad42:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 801ad46:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    blend_area.y2 = blend_area.y1;
 801ad4a:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801ad4e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    uint32_t mask_p = 0;
 801ad52:	2300      	movs	r3, #0
 801ad54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    lv_memset_ff(mask_buf, mask_buf_size);
 801ad58:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801ad5c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801ad60:	f007 fc83 	bl	802266a <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801ad64:	f107 0310 	add.w	r3, r7, #16
 801ad68:	211c      	movs	r1, #28
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	f007 fbfc 	bl	8022568 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801ad70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ad74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ad78:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801ad7c:	601a      	str	r2, [r3, #0]
    blend_dsc.color = dsc->color;
 801ad7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ad82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ad86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801ad8a:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 801ad8e:	6812      	ldr	r2, [r2, #0]
 801ad90:	7812      	ldrb	r2, [r2, #0]
 801ad92:	721a      	strb	r2, [r3, #8]
    blend_dsc.opa = dsc->opa;
 801ad94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ad98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	7a1a      	ldrb	r2, [r3, #8]
 801ada0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ada4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ada8:	761a      	strb	r2, [r3, #24]
    blend_dsc.mask_buf = mask_buf;
 801adaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801adae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801adb2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801adb6:	60da      	str	r2, [r3, #12]
    blend_dsc.mask_area = &blend_area;
 801adb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801adbc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801adc0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801adc4:	615a      	str	r2, [r3, #20]

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 801adc6:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801adca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801adce:	e06a      	b.n	801aea6 <draw_line_skew+0x6a6>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 801add0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801add4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801add8:	18d0      	adds	r0, r2, r3
 801adda:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 801adde:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ade2:	b21a      	sxth	r2, r3
 801ade4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ade8:	b21b      	sxth	r3, r3
 801adea:	f7f6 fd57 	bl	801189c <lv_draw_mask_apply>
 801adee:	4603      	mov	r3, r0
 801adf0:	461a      	mov	r2, r3
 801adf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801adf6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801adfa:	741a      	strb	r2, [r3, #16]
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801adfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ae00:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ae04:	7c1b      	ldrb	r3, [r3, #16]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d10a      	bne.n	801ae20 <draw_line_skew+0x620>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 801ae0a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801ae0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ae12:	4413      	add	r3, r2
 801ae14:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801ae18:	4611      	mov	r1, r2
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	f007 fba4 	bl	8022568 <lv_memset_00>
        }

        mask_p += draw_area_w;
 801ae20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ae24:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801ae28:	4413      	add	r3, r2
 801ae2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 801ae2e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801ae32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ae36:	4413      	add	r3, r2
 801ae38:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d908      	bls.n	801ae52 <draw_line_skew+0x652>
            blend_area.y2 ++;
 801ae40:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801ae44:	b29b      	uxth	r3, r3
 801ae46:	3301      	adds	r3, #1
 801ae48:	b29b      	uxth	r3, r3
 801ae4a:	b21b      	sxth	r3, r3
 801ae4c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 801ae50:	e024      	b.n	801ae9c <draw_line_skew+0x69c>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ae52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ae56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801ae5a:	2202      	movs	r2, #2
 801ae5c:	741a      	strb	r2, [r3, #16]
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ae5e:	f107 0210 	add.w	r2, r7, #16
 801ae62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ae66:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801ae6a:	4611      	mov	r1, r2
 801ae6c:	6818      	ldr	r0, [r3, #0]
 801ae6e:	f7fc f8e3 	bl	8017038 <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 801ae72:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	3301      	adds	r3, #1
 801ae7a:	b29b      	uxth	r3, r3
 801ae7c:	b21b      	sxth	r3, r3
 801ae7e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
            blend_area.y2 = blend_area.y1;
 801ae82:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801ae86:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
            mask_p = 0;
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            lv_memset_ff(mask_buf, mask_buf_size);
 801ae90:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801ae94:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801ae98:	f007 fbe7 	bl	802266a <lv_memset_ff>
    for(h = blend_area.y1; h <= y2; h++) {
 801ae9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801aea0:	3301      	adds	r3, #1
 801aea2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801aea6:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 801aeaa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801aeae:	429a      	cmp	r2, r3
 801aeb0:	dd8e      	ble.n	801add0 <draw_line_skew+0x5d0>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 801aeb2:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
 801aeb6:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801aeba:	429a      	cmp	r2, r3
 801aebc:	d017      	beq.n	801aeee <draw_line_skew+0x6ee>
        blend_area.y2--;
 801aebe:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801aec2:	b29b      	uxth	r3, r3
 801aec4:	3b01      	subs	r3, #1
 801aec6:	b29b      	uxth	r3, r3
 801aec8:	b21b      	sxth	r3, r3
 801aeca:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801aece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aed2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801aed6:	2202      	movs	r2, #2
 801aed8:	741a      	strb	r2, [r3, #16]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801aeda:	f107 0210 	add.w	r2, r7, #16
 801aede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aee2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801aee6:	4611      	mov	r1, r2
 801aee8:	6818      	ldr	r0, [r3, #0]
 801aeea:	f7fc f8a5 	bl	8017038 <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 801aeee:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801aef2:	f007 f83b 	bl	8021f6c <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 801aef6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7f6 fd62 	bl	80119c4 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 801af00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801af04:	4618      	mov	r0, r3
 801af06:	f7f6 fd5d 	bl	80119c4 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 801af0a:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801af0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801af12:	d004      	beq.n	801af1e <draw_line_skew+0x71e>
 801af14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801af18:	4618      	mov	r0, r3
 801af1a:	f7f6 fd53 	bl	80119c4 <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 801af1e:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801af22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801af26:	d004      	beq.n	801af32 <draw_line_skew+0x732>
 801af28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af2c:	4618      	mov	r0, r3
 801af2e:	f7f6 fd49 	bl	80119c4 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 801af32:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 801af36:	4618      	mov	r0, r3
 801af38:	f7f6 fcf4 	bl	8011924 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 801af3c:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 801af40:	4618      	mov	r0, r3
 801af42:	f7f6 fcef 	bl	8011924 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 801af46:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801af4a:	4618      	mov	r0, r3
 801af4c:	f7f6 fcea 	bl	8011924 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 801af50:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801af54:	4618      	mov	r0, r3
 801af56:	f7f6 fce5 	bl	8011924 <lv_draw_mask_remove_id>
 801af5a:	e000      	b.n	801af5e <draw_line_skew+0x75e>
    if(is_common == false) return;
 801af5c:	bf00      	nop
    LV_UNUSED(point2);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw skewed line with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801af5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801af62:	46bd      	mov	sp, r7
 801af64:	bdb0      	pop	{r4, r5, r7, pc}
 801af66:	bf00      	nop

0801af68 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 801af68:	b590      	push	{r4, r7, lr}
 801af6a:	b09b      	sub	sp, #108	; 0x6c
 801af6c:	af02      	add	r7, sp, #8
 801af6e:	60f8      	str	r0, [r7, #12]
 801af70:	60b9      	str	r1, [r7, #8]
 801af72:	607a      	str	r2, [r7, #4]
 801af74:	807b      	strh	r3, [r7, #2]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 801af76:	887b      	ldrh	r3, [r7, #2]
 801af78:	2b02      	cmp	r3, #2
 801af7a:	f240 82a9 	bls.w	801b4d0 <lv_draw_sw_polygon+0x568>
    if(points == NULL) return;
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	2b00      	cmp	r3, #0
 801af82:	f000 82a7 	beq.w	801b4d4 <lv_draw_sw_polygon+0x56c>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 801af86:	887b      	ldrh	r3, [r7, #2]
 801af88:	009b      	lsls	r3, r3, #2
 801af8a:	4618      	mov	r0, r3
 801af8c:	f006 ff42 	bl	8021e14 <lv_mem_buf_get>
 801af90:	63b8      	str	r0, [r7, #56]	; 0x38
    if(p == NULL) return;
 801af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af94:	2b00      	cmp	r3, #0
 801af96:	f000 829f 	beq.w	801b4d8 <lv_draw_sw_polygon+0x570>
    uint16_t i;
    uint16_t pcnt = 0;
 801af9a:	2300      	movs	r3, #0
 801af9c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    p[0] = points[0];
 801afa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	6013      	str	r3, [r2, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 801afa8:	2300      	movs	r3, #0
 801afaa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801afae:	e039      	b.n	801b024 <lv_draw_sw_polygon+0xbc>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 801afb0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801afb4:	009b      	lsls	r3, r3, #2
 801afb6:	687a      	ldr	r2, [r7, #4]
 801afb8:	4413      	add	r3, r2
 801afba:	f9b3 2000 	ldrsh.w	r2, [r3]
 801afbe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801afc2:	3301      	adds	r3, #1
 801afc4:	009b      	lsls	r3, r3, #2
 801afc6:	6879      	ldr	r1, [r7, #4]
 801afc8:	440b      	add	r3, r1
 801afca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afce:	429a      	cmp	r2, r3
 801afd0:	d110      	bne.n	801aff4 <lv_draw_sw_polygon+0x8c>
 801afd2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801afd6:	009b      	lsls	r3, r3, #2
 801afd8:	687a      	ldr	r2, [r7, #4]
 801afda:	4413      	add	r3, r2
 801afdc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801afe0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801afe4:	3301      	adds	r3, #1
 801afe6:	009b      	lsls	r3, r3, #2
 801afe8:	6879      	ldr	r1, [r7, #4]
 801afea:	440b      	add	r3, r1
 801afec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aff0:	429a      	cmp	r2, r3
 801aff2:	d012      	beq.n	801b01a <lv_draw_sw_polygon+0xb2>
            p[pcnt] = points[i];
 801aff4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801aff8:	009b      	lsls	r3, r3, #2
 801affa:	687a      	ldr	r2, [r7, #4]
 801affc:	18d1      	adds	r1, r2, r3
 801affe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b002:	009b      	lsls	r3, r3, #2
 801b004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b006:	4413      	add	r3, r2
 801b008:	461a      	mov	r2, r3
 801b00a:	460b      	mov	r3, r1
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	6013      	str	r3, [r2, #0]
            pcnt++;
 801b010:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b014:	3301      	adds	r3, #1
 801b016:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    for(i = 0; i < point_cnt - 1; i++) {
 801b01a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b01e:	3301      	adds	r3, #1
 801b020:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b024:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b028:	887b      	ldrh	r3, [r7, #2]
 801b02a:	3b01      	subs	r3, #1
 801b02c:	429a      	cmp	r2, r3
 801b02e:	dbbf      	blt.n	801afb0 <lv_draw_sw_polygon+0x48>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b036:	8879      	ldrh	r1, [r7, #2]
 801b038:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b03c:	440b      	add	r3, r1
 801b03e:	009b      	lsls	r3, r3, #2
 801b040:	6879      	ldr	r1, [r7, #4]
 801b042:	440b      	add	r3, r1
 801b044:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b048:	429a      	cmp	r2, r3
 801b04a:	d10d      	bne.n	801b068 <lv_draw_sw_polygon+0x100>
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b052:	8879      	ldrh	r1, [r7, #2]
 801b054:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b058:	440b      	add	r3, r1
 801b05a:	009b      	lsls	r3, r3, #2
 801b05c:	6879      	ldr	r1, [r7, #4]
 801b05e:	440b      	add	r3, r1
 801b060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b064:	429a      	cmp	r2, r3
 801b066:	d014      	beq.n	801b092 <lv_draw_sw_polygon+0x12a>
        p[pcnt] = points[point_cnt - 1];
 801b068:	887a      	ldrh	r2, [r7, #2]
 801b06a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b06e:	4413      	add	r3, r2
 801b070:	009b      	lsls	r3, r3, #2
 801b072:	687a      	ldr	r2, [r7, #4]
 801b074:	18d1      	adds	r1, r2, r3
 801b076:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b07a:	009b      	lsls	r3, r3, #2
 801b07c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b07e:	4413      	add	r3, r2
 801b080:	461a      	mov	r2, r3
 801b082:	460b      	mov	r3, r1
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	6013      	str	r3, [r2, #0]
        pcnt++;
 801b088:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b08c:	3301      	adds	r3, #1
 801b08e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    point_cnt = pcnt;
 801b092:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b096:	807b      	strh	r3, [r7, #2]
    if(point_cnt < 3) {
 801b098:	887b      	ldrh	r3, [r7, #2]
 801b09a:	2b02      	cmp	r3, #2
 801b09c:	d803      	bhi.n	801b0a6 <lv_draw_sw_polygon+0x13e>
        lv_mem_buf_release(p);
 801b09e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b0a0:	f006 ff64 	bl	8021f6c <lv_mem_buf_release>
        return;
 801b0a4:	e219      	b.n	801b4da <lv_draw_sw_polygon+0x572>
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 801b0a6:	4a9a      	ldr	r2, [pc, #616]	; (801b310 <lv_draw_sw_polygon+0x3a8>)
 801b0a8:	f107 031c 	add.w	r3, r7, #28
 801b0ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b0b0:	e883 0003 	stmia.w	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b0ba:	e03c      	b.n	801b136 <lv_draw_sw_polygon+0x1ce>
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 801b0bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b0c0:	009b      	lsls	r3, r3, #2
 801b0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b0c4:	4413      	add	r3, r2
 801b0c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b0ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801b0ce:	4293      	cmp	r3, r2
 801b0d0:	bfa8      	it	ge
 801b0d2:	4613      	movge	r3, r2
 801b0d4:	b21b      	sxth	r3, r3
 801b0d6:	83bb      	strh	r3, [r7, #28]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 801b0d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b0dc:	009b      	lsls	r3, r3, #2
 801b0de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b0e0:	4413      	add	r3, r2
 801b0e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b0e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b0ea:	4293      	cmp	r3, r2
 801b0ec:	bfa8      	it	ge
 801b0ee:	4613      	movge	r3, r2
 801b0f0:	b21b      	sxth	r3, r3
 801b0f2:	83fb      	strh	r3, [r7, #30]
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 801b0f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b0f8:	009b      	lsls	r3, r3, #2
 801b0fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b0fc:	4413      	add	r3, r2
 801b0fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b102:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b106:	4293      	cmp	r3, r2
 801b108:	bfb8      	it	lt
 801b10a:	4613      	movlt	r3, r2
 801b10c:	b21b      	sxth	r3, r3
 801b10e:	843b      	strh	r3, [r7, #32]
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 801b110:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b114:	009b      	lsls	r3, r3, #2
 801b116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b118:	4413      	add	r3, r2
 801b11a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b11e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b122:	4293      	cmp	r3, r2
 801b124:	bfb8      	it	lt
 801b126:	4613      	movlt	r3, r2
 801b128:	b21b      	sxth	r3, r3
 801b12a:	847b      	strh	r3, [r7, #34]	; 0x22
    for(i = 0; i < point_cnt; i++) {
 801b12c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b130:	3301      	adds	r3, #1
 801b132:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b136:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b13a:	887b      	ldrh	r3, [r7, #2]
 801b13c:	429a      	cmp	r2, r3
 801b13e:	d3bd      	bcc.n	801b0bc <lv_draw_sw_polygon+0x154>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	689a      	ldr	r2, [r3, #8]
 801b144:	f107 011c 	add.w	r1, r7, #28
 801b148:	f107 0314 	add.w	r3, r7, #20
 801b14c:	4618      	mov	r0, r3
 801b14e:	f005 fab7 	bl	80206c0 <_lv_area_intersect>
 801b152:	4603      	mov	r3, r0
 801b154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(!is_common) {
 801b158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b15c:	f083 0301 	eor.w	r3, r3, #1
 801b160:	b2db      	uxtb	r3, r3
 801b162:	2b00      	cmp	r3, #0
 801b164:	d003      	beq.n	801b16e <lv_draw_sw_polygon+0x206>
        lv_mem_buf_release(p);
 801b166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b168:	f006 ff00 	bl	8021f6c <lv_mem_buf_release>
        return;
 801b16c:	e1b5      	b.n	801b4da <lv_draw_sw_polygon+0x572>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	689b      	ldr	r3, [r3, #8]
 801b172:	633b      	str	r3, [r7, #48]	; 0x30
    draw_ctx->clip_area = &clip_area;
 801b174:	68fb      	ldr	r3, [r7, #12]
 801b176:	f107 0214 	add.w	r2, r7, #20
 801b17a:	609a      	str	r2, [r3, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 801b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b17e:	885b      	ldrh	r3, [r3, #2]
 801b180:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    int16_t y_min_i = 0;
 801b184:	2300      	movs	r3, #0
 801b186:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    for(i = 1; i < point_cnt; i++) {
 801b18a:	2301      	movs	r3, #1
 801b18c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b190:	e01b      	b.n	801b1ca <lv_draw_sw_polygon+0x262>
        if(p[i].y < y_min) {
 801b192:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b196:	009b      	lsls	r3, r3, #2
 801b198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b19a:	4413      	add	r3, r2
 801b19c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b1a0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	dd0b      	ble.n	801b1c0 <lv_draw_sw_polygon+0x258>
            y_min = p[i].y;
 801b1a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b1ac:	009b      	lsls	r3, r3, #2
 801b1ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b1b0:	4413      	add	r3, r2
 801b1b2:	885b      	ldrh	r3, [r3, #2]
 801b1b4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            y_min_i = i;
 801b1b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b1bc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    for(i = 1; i < point_cnt; i++) {
 801b1c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b1c4:	3301      	adds	r3, #1
 801b1c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b1ca:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b1ce:	887b      	ldrh	r3, [r7, #2]
 801b1d0:	429a      	cmp	r2, r3
 801b1d2:	d3de      	bcc.n	801b192 <lv_draw_sw_polygon+0x22a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 801b1d4:	887b      	ldrh	r3, [r7, #2]
 801b1d6:	222c      	movs	r2, #44	; 0x2c
 801b1d8:	fb02 f303 	mul.w	r3, r2, r3
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f006 fe19 	bl	8021e14 <lv_mem_buf_get>
 801b1e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_draw_mask_line_param_t * mp_next = mp;
 801b1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1e6:	657b      	str	r3, [r7, #84]	; 0x54

    int32_t i_prev_left = y_min_i;
 801b1e8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b1ec:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t i_prev_right = y_min_i;
 801b1ee:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b1f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t i_next_left;
    int32_t i_next_right;
    uint32_t mask_cnt = 0;
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	643b      	str	r3, [r7, #64]	; 0x40

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
 801b1f8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b1fc:	3b01      	subs	r3, #1
 801b1fe:	64bb      	str	r3, [r7, #72]	; 0x48
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801b200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b202:	2b00      	cmp	r3, #0
 801b204:	da03      	bge.n	801b20e <lv_draw_sw_polygon+0x2a6>
 801b206:	887b      	ldrh	r3, [r7, #2]
 801b208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b20a:	4413      	add	r3, r2
 801b20c:	64bb      	str	r3, [r7, #72]	; 0x48

    i_next_right = y_min_i + 1;
 801b20e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b212:	3301      	adds	r3, #1
 801b214:	647b      	str	r3, [r7, #68]	; 0x44
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 801b216:	887b      	ldrh	r3, [r7, #2]
 801b218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b21a:	429a      	cmp	r2, r3
 801b21c:	db01      	blt.n	801b222 <lv_draw_sw_polygon+0x2ba>
 801b21e:	2300      	movs	r3, #0
 801b220:	647b      	str	r3, [r7, #68]	; 0x44
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 801b222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b224:	009b      	lsls	r3, r3, #2
 801b226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b228:	4413      	add	r3, r2
 801b22a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b22e:	b29a      	uxth	r2, r3
 801b230:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b234:	009b      	lsls	r3, r3, #2
 801b236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b238:	440b      	add	r3, r1
 801b23a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b23e:	b29b      	uxth	r3, r3
 801b240:	1ad3      	subs	r3, r2, r3
 801b242:	b29b      	uxth	r3, r3
 801b244:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 801b246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b248:	009b      	lsls	r3, r3, #2
 801b24a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b24c:	4413      	add	r3, r2
 801b24e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b252:	b29a      	uxth	r2, r3
 801b254:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b258:	009b      	lsls	r3, r3, #2
 801b25a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b25c:	440b      	add	r3, r1
 801b25e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b262:	b29b      	uxth	r3, r3
 801b264:	1ad3      	subs	r3, r2, r3
 801b266:	b29b      	uxth	r3, r3
 801b268:	853b      	strh	r3, [r7, #40]	; 0x28
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 801b26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b26c:	009b      	lsls	r3, r3, #2
 801b26e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b270:	4413      	add	r3, r2
 801b272:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b276:	b29a      	uxth	r2, r3
 801b278:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b27c:	009b      	lsls	r3, r3, #2
 801b27e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b280:	440b      	add	r3, r1
 801b282:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b286:	b29b      	uxth	r3, r3
 801b288:	1ad3      	subs	r3, r2, r3
 801b28a:	b29b      	uxth	r3, r3
 801b28c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 801b28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b290:	009b      	lsls	r3, r3, #2
 801b292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b294:	4413      	add	r3, r2
 801b296:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b29a:	b29a      	uxth	r2, r3
 801b29c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b2a0:	009b      	lsls	r3, r3, #2
 801b2a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b2a4:	440b      	add	r3, r1
 801b2a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b2aa:	b29b      	uxth	r3, r3
 801b2ac:	1ad3      	subs	r3, r2, r3
 801b2ae:	b29b      	uxth	r3, r3
 801b2b0:	84bb      	strh	r3, [r7, #36]	; 0x24

    bool inv = false;
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(dyl * dxr < dyr * dxl) inv = true;
 801b2b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b2bc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 801b2c0:	fb03 f202 	mul.w	r2, r3, r2
 801b2c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b2c8:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 801b2cc:	fb01 f303 	mul.w	r3, r1, r3
 801b2d0:	429a      	cmp	r2, r3
 801b2d2:	da02      	bge.n	801b2da <lv_draw_sw_polygon+0x372>
 801b2d4:	2301      	movs	r3, #1
 801b2d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    do {
        if(!inv) {
 801b2da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801b2de:	f083 0301 	eor.w	r3, r3, #1
 801b2e2:	b2db      	uxtb	r3, r3
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d015      	beq.n	801b314 <lv_draw_sw_polygon+0x3ac>
            i_next_left = i_prev_left - 1;
 801b2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2ea:	3b01      	subs	r3, #1
 801b2ec:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801b2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	da03      	bge.n	801b2fc <lv_draw_sw_polygon+0x394>
 801b2f4:	887b      	ldrh	r3, [r7, #2]
 801b2f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b2f8:	4413      	add	r3, r2
 801b2fa:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right + 1;
 801b2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2fe:	3301      	adds	r3, #1
 801b300:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 801b302:	887b      	ldrh	r3, [r7, #2]
 801b304:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b306:	429a      	cmp	r2, r3
 801b308:	db17      	blt.n	801b33a <lv_draw_sw_polygon+0x3d2>
 801b30a:	2300      	movs	r3, #0
 801b30c:	647b      	str	r3, [r7, #68]	; 0x44
 801b30e:	e014      	b.n	801b33a <lv_draw_sw_polygon+0x3d2>
 801b310:	0802670c 	.word	0x0802670c
        }
        else {
            i_next_left = i_prev_left + 1;
 801b314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b316:	3301      	adds	r3, #1
 801b318:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 801b31a:	887b      	ldrh	r3, [r7, #2]
 801b31c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b31e:	429a      	cmp	r2, r3
 801b320:	db01      	blt.n	801b326 <lv_draw_sw_polygon+0x3be>
 801b322:	2300      	movs	r3, #0
 801b324:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right - 1;
 801b326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b328:	3b01      	subs	r3, #1
 801b32a:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 801b32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b32e:	2b00      	cmp	r3, #0
 801b330:	da03      	bge.n	801b33a <lv_draw_sw_polygon+0x3d2>
 801b332:	887b      	ldrh	r3, [r7, #2]
 801b334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b336:	4413      	add	r3, r2
 801b338:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
 801b33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b33c:	009b      	lsls	r3, r3, #2
 801b33e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b340:	4413      	add	r3, r2
 801b342:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b348:	009b      	lsls	r3, r3, #2
 801b34a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b34c:	440b      	add	r3, r1
 801b34e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b352:	429a      	cmp	r2, r3
 801b354:	db47      	blt.n	801b3e6 <lv_draw_sw_polygon+0x47e>
            if(p[i_next_left].y != p[i_prev_left].y &&
 801b356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b358:	009b      	lsls	r3, r3, #2
 801b35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b35c:	4413      	add	r3, r2
 801b35e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b364:	009b      	lsls	r3, r3, #2
 801b366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b368:	440b      	add	r3, r1
 801b36a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b36e:	429a      	cmp	r2, r3
 801b370:	d034      	beq.n	801b3dc <lv_draw_sw_polygon+0x474>
               p[i_next_left].x != p[i_prev_left].x) {
 801b372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b374:	009b      	lsls	r3, r3, #2
 801b376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b378:	4413      	add	r3, r2
 801b37a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b380:	009b      	lsls	r3, r3, #2
 801b382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b384:	440b      	add	r3, r1
 801b386:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_left].y != p[i_prev_left].y &&
 801b38a:	429a      	cmp	r2, r3
 801b38c:	d026      	beq.n	801b3dc <lv_draw_sw_polygon+0x474>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b390:	009b      	lsls	r3, r3, #2
 801b392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b394:	4413      	add	r3, r2
 801b396:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b39a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b39c:	009b      	lsls	r3, r3, #2
 801b39e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3a0:	4413      	add	r3, r2
 801b3a2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_left].x, p[i_next_left].y,
 801b3a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b3a8:	009b      	lsls	r3, r3, #2
 801b3aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3ac:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b3ae:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_left].x, p[i_next_left].y,
 801b3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b3b4:	009b      	lsls	r3, r3, #2
 801b3b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3b8:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b3ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b3be:	2201      	movs	r2, #1
 801b3c0:	9201      	str	r2, [sp, #4]
 801b3c2:	9300      	str	r3, [sp, #0]
 801b3c4:	4623      	mov	r3, r4
 801b3c6:	4602      	mov	r2, r0
 801b3c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b3ca:	f7f6 fbc3 	bl	8011b54 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
 801b3ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b3d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b3d2:	f7f6 fa31 	bl	8011838 <lv_draw_mask_add>
                mp_next++;
 801b3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b3d8:	332c      	adds	r3, #44	; 0x2c
 801b3da:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801b3dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b3de:	3301      	adds	r3, #1
 801b3e0:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_left = i_next_left;
 801b3e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b3e4:	653b      	str	r3, [r7, #80]	; 0x50
        }

        if(mask_cnt == point_cnt) break;
 801b3e6:	887b      	ldrh	r3, [r7, #2]
 801b3e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b3ea:	429a      	cmp	r2, r3
 801b3ec:	d05b      	beq.n	801b4a6 <lv_draw_sw_polygon+0x53e>

        if(p[i_next_right].y >= p[i_prev_right].y) {
 801b3ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b3f0:	009b      	lsls	r3, r3, #2
 801b3f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3f4:	4413      	add	r3, r2
 801b3f6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3fc:	009b      	lsls	r3, r3, #2
 801b3fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b400:	440b      	add	r3, r1
 801b402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b406:	429a      	cmp	r2, r3
 801b408:	db47      	blt.n	801b49a <lv_draw_sw_polygon+0x532>
            if(p[i_next_right].y != p[i_prev_right].y &&
 801b40a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b40c:	009b      	lsls	r3, r3, #2
 801b40e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b410:	4413      	add	r3, r2
 801b412:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b418:	009b      	lsls	r3, r3, #2
 801b41a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b41c:	440b      	add	r3, r1
 801b41e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b422:	429a      	cmp	r2, r3
 801b424:	d034      	beq.n	801b490 <lv_draw_sw_polygon+0x528>
               p[i_next_right].x != p[i_prev_right].x) {
 801b426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b428:	009b      	lsls	r3, r3, #2
 801b42a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b42c:	4413      	add	r3, r2
 801b42e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b434:	009b      	lsls	r3, r3, #2
 801b436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b438:	440b      	add	r3, r1
 801b43a:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_right].y != p[i_prev_right].y &&
 801b43e:	429a      	cmp	r2, r3
 801b440:	d026      	beq.n	801b490 <lv_draw_sw_polygon+0x528>

                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b444:	009b      	lsls	r3, r3, #2
 801b446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b448:	4413      	add	r3, r2
 801b44a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b44e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b450:	009b      	lsls	r3, r3, #2
 801b452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b454:	4413      	add	r3, r2
 801b456:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_right].x, p[i_next_right].y,
 801b45a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b45c:	009b      	lsls	r3, r3, #2
 801b45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b460:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b462:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_right].x, p[i_next_right].y,
 801b466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b468:	009b      	lsls	r3, r3, #2
 801b46a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b46c:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b46e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b472:	2200      	movs	r2, #0
 801b474:	9201      	str	r2, [sp, #4]
 801b476:	9300      	str	r3, [sp, #0]
 801b478:	4623      	mov	r3, r4
 801b47a:	4602      	mov	r2, r0
 801b47c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b47e:	f7f6 fb69 	bl	8011b54 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
 801b482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b484:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b486:	f7f6 f9d7 	bl	8011838 <lv_draw_mask_add>
                mp_next++;
 801b48a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b48c:	332c      	adds	r3, #44	; 0x2c
 801b48e:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801b490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b492:	3301      	adds	r3, #1
 801b494:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_right = i_next_right;
 801b496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b498:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

    } while(mask_cnt < point_cnt);
 801b49a:	887b      	ldrh	r3, [r7, #2]
 801b49c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	f4ff af1b 	bcc.w	801b2da <lv_draw_sw_polygon+0x372>
 801b4a4:	e000      	b.n	801b4a8 <lv_draw_sw_polygon+0x540>
        if(mask_cnt == point_cnt) break;
 801b4a6:	bf00      	nop

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 801b4a8:	f107 031c 	add.w	r3, r7, #28
 801b4ac:	461a      	mov	r2, r3
 801b4ae:	68b9      	ldr	r1, [r7, #8]
 801b4b0:	68f8      	ldr	r0, [r7, #12]
 801b4b2:	f7f8 fdcd 	bl	8014050 <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 801b4b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b4b8:	f7f6 fa5c 	bl	8011974 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 801b4bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b4be:	f006 fd55 	bl	8021f6c <lv_mem_buf_release>
    lv_mem_buf_release(p);
 801b4c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b4c4:	f006 fd52 	bl	8021f6c <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b4cc:	609a      	str	r2, [r3, #8]
 801b4ce:	e004      	b.n	801b4da <lv_draw_sw_polygon+0x572>
    if(point_cnt < 3) return;
 801b4d0:	bf00      	nop
 801b4d2:	e002      	b.n	801b4da <lv_draw_sw_polygon+0x572>
    if(points == NULL) return;
 801b4d4:	bf00      	nop
 801b4d6:	e000      	b.n	801b4da <lv_draw_sw_polygon+0x572>
    if(p == NULL) return;
 801b4d8:	bf00      	nop
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801b4da:	3764      	adds	r7, #100	; 0x64
 801b4dc:	46bd      	mov	sp, r7
 801b4de:	bd90      	pop	{r4, r7, pc}

0801b4e0 <lv_area_copy>:
{
 801b4e0:	b480      	push	{r7}
 801b4e2:	b083      	sub	sp, #12
 801b4e4:	af00      	add	r7, sp, #0
 801b4e6:	6078      	str	r0, [r7, #4]
 801b4e8:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801b4ea:	683b      	ldr	r3, [r7, #0]
 801b4ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 801b4f4:	683b      	ldr	r3, [r7, #0]
 801b4f6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801b4fe:	683b      	ldr	r3, [r7, #0]
 801b500:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	80da      	strh	r2, [r3, #6]
}
 801b512:	bf00      	nop
 801b514:	370c      	adds	r7, #12
 801b516:	46bd      	mov	sp, r7
 801b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b51c:	4770      	bx	lr

0801b51e <lv_area_get_width>:
{
 801b51e:	b480      	push	{r7}
 801b520:	b083      	sub	sp, #12
 801b522:	af00      	add	r7, sp, #0
 801b524:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b52c:	b29a      	uxth	r2, r3
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b534:	b29b      	uxth	r3, r3
 801b536:	1ad3      	subs	r3, r2, r3
 801b538:	b29b      	uxth	r3, r3
 801b53a:	3301      	adds	r3, #1
 801b53c:	b29b      	uxth	r3, r3
 801b53e:	b21b      	sxth	r3, r3
}
 801b540:	4618      	mov	r0, r3
 801b542:	370c      	adds	r7, #12
 801b544:	46bd      	mov	sp, r7
 801b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b54a:	4770      	bx	lr

0801b54c <lv_area_get_height>:
{
 801b54c:	b480      	push	{r7}
 801b54e:	b083      	sub	sp, #12
 801b550:	af00      	add	r7, sp, #0
 801b552:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b55a:	b29a      	uxth	r2, r3
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b562:	b29b      	uxth	r3, r3
 801b564:	1ad3      	subs	r3, r2, r3
 801b566:	b29b      	uxth	r3, r3
 801b568:	3301      	adds	r3, #1
 801b56a:	b29b      	uxth	r3, r3
 801b56c:	b21b      	sxth	r3, r3
}
 801b56e:	4618      	mov	r0, r3
 801b570:	370c      	adds	r7, #12
 801b572:	46bd      	mov	sp, r7
 801b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b578:	4770      	bx	lr

0801b57a <lv_draw_sw_rect>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b57a:	b580      	push	{r7, lr}
 801b57c:	b084      	sub	sp, #16
 801b57e:	af00      	add	r7, sp, #0
 801b580:	60f8      	str	r0, [r7, #12]
 801b582:	60b9      	str	r1, [r7, #8]
 801b584:	607a      	str	r2, [r7, #4]
#if LV_DRAW_COMPLEX
    draw_shadow(draw_ctx, dsc, coords);
 801b586:	687a      	ldr	r2, [r7, #4]
 801b588:	68b9      	ldr	r1, [r7, #8]
 801b58a:	68f8      	ldr	r0, [r7, #12]
 801b58c:	f000 fdd1 	bl	801c132 <draw_shadow>
#endif

    draw_bg(draw_ctx, dsc, coords);
 801b590:	687a      	ldr	r2, [r7, #4]
 801b592:	68b9      	ldr	r1, [r7, #8]
 801b594:	68f8      	ldr	r0, [r7, #12]
 801b596:	f000 f827 	bl	801b5e8 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801b59a:	687a      	ldr	r2, [r7, #4]
 801b59c:	68b9      	ldr	r1, [r7, #8]
 801b59e:	68f8      	ldr	r0, [r7, #12]
 801b5a0:	f000 fb1b 	bl	801bbda <draw_bg_img>

    draw_border(draw_ctx, dsc, coords);
 801b5a4:	687a      	ldr	r2, [r7, #4]
 801b5a6:	68b9      	ldr	r1, [r7, #8]
 801b5a8:	68f8      	ldr	r0, [r7, #12]
 801b5aa:	f000 fcd2 	bl	801bf52 <draw_border>

    draw_outline(draw_ctx, dsc, coords);
 801b5ae:	687a      	ldr	r2, [r7, #4]
 801b5b0:	68b9      	ldr	r1, [r7, #8]
 801b5b2:	68f8      	ldr	r0, [r7, #12]
 801b5b4:	f002 fb61 	bl	801dc7a <draw_outline>

    LV_ASSERT_MEM_INTEGRITY();
}
 801b5b8:	bf00      	nop
 801b5ba:	3710      	adds	r7, #16
 801b5bc:	46bd      	mov	sp, r7
 801b5be:	bd80      	pop	{r7, pc}

0801b5c0 <lv_draw_sw_bg>:

void lv_draw_sw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b084      	sub	sp, #16
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	60f8      	str	r0, [r7, #12]
 801b5c8:	60b9      	str	r1, [r7, #8]
 801b5ca:	607a      	str	r2, [r7, #4]
#if LV_COLOR_SCREEN_TRANSP && LV_COLOR_DEPTH == 32
    lv_memset_00(draw_ctx->buf, lv_area_get_size(draw_ctx->buf_area) * sizeof(lv_color_t));
#endif

    draw_bg(draw_ctx, dsc, coords);
 801b5cc:	687a      	ldr	r2, [r7, #4]
 801b5ce:	68b9      	ldr	r1, [r7, #8]
 801b5d0:	68f8      	ldr	r0, [r7, #12]
 801b5d2:	f000 f809 	bl	801b5e8 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801b5d6:	687a      	ldr	r2, [r7, #4]
 801b5d8:	68b9      	ldr	r1, [r7, #8]
 801b5da:	68f8      	ldr	r0, [r7, #12]
 801b5dc:	f000 fafd 	bl	801bbda <draw_bg_img>
}
 801b5e0:	bf00      	nop
 801b5e2:	3710      	adds	r7, #16
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	bd80      	pop	{r7, pc}

0801b5e8 <draw_bg>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void draw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b0a6      	sub	sp, #152	; 0x98
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	60f8      	str	r0, [r7, #12]
 801b5f0:	60b9      	str	r1, [r7, #8]
 801b5f2:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801b5f4:	68bb      	ldr	r3, [r7, #8]
 801b5f6:	78db      	ldrb	r3, [r3, #3]
 801b5f8:	2b02      	cmp	r3, #2
 801b5fa:	f240 82e8 	bls.w	801bbce <draw_bg+0x5e6>

    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 801b5fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b602:	6879      	ldr	r1, [r7, #4]
 801b604:	4618      	mov	r0, r3
 801b606:	f7ff ff6b 	bl	801b4e0 <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 801b60a:	68bb      	ldr	r3, [r7, #8]
 801b60c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801b610:	2b01      	cmp	r3, #1
 801b612:	dd4f      	ble.n	801b6b4 <draw_bg+0xcc>
 801b614:	68bb      	ldr	r3, [r7, #8]
 801b616:	7f1b      	ldrb	r3, [r3, #28]
 801b618:	2bfc      	cmp	r3, #252	; 0xfc
 801b61a:	d94b      	bls.n	801b6b4 <draw_bg+0xcc>
 801b61c:	68bb      	ldr	r3, [r7, #8]
 801b61e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d046      	beq.n	801b6b4 <draw_bg+0xcc>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 801b626:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801b62a:	b29a      	uxth	r2, r3
 801b62c:	68bb      	ldr	r3, [r7, #8]
 801b62e:	7f5b      	ldrb	r3, [r3, #29]
 801b630:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b634:	b2db      	uxtb	r3, r3
 801b636:	109b      	asrs	r3, r3, #2
 801b638:	b29b      	uxth	r3, r3
 801b63a:	f003 0301 	and.w	r3, r3, #1
 801b63e:	b29b      	uxth	r3, r3
 801b640:	4413      	add	r3, r2
 801b642:	b29b      	uxth	r3, r3
 801b644:	b21b      	sxth	r3, r3
 801b646:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 801b64a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801b64e:	b29a      	uxth	r2, r3
 801b650:	68bb      	ldr	r3, [r7, #8]
 801b652:	7f5b      	ldrb	r3, [r3, #29]
 801b654:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b658:	b2db      	uxtb	r3, r3
 801b65a:	105b      	asrs	r3, r3, #1
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	f003 0301 	and.w	r3, r3, #1
 801b662:	b29b      	uxth	r3, r3
 801b664:	4413      	add	r3, r2
 801b666:	b29b      	uxth	r3, r3
 801b668:	b21b      	sxth	r3, r3
 801b66a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 801b66e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801b672:	b29a      	uxth	r2, r3
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	7f5b      	ldrb	r3, [r3, #29]
 801b678:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b67c:	b2db      	uxtb	r3, r3
 801b67e:	10db      	asrs	r3, r3, #3
 801b680:	b29b      	uxth	r3, r3
 801b682:	f003 0301 	and.w	r3, r3, #1
 801b686:	b29b      	uxth	r3, r3
 801b688:	1ad3      	subs	r3, r2, r3
 801b68a:	b29b      	uxth	r3, r3
 801b68c:	b21b      	sxth	r3, r3
 801b68e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 801b692:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801b696:	b29a      	uxth	r2, r3
 801b698:	68bb      	ldr	r3, [r7, #8]
 801b69a:	7f5b      	ldrb	r3, [r3, #29]
 801b69c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b6a0:	b2db      	uxtb	r3, r3
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	f003 0301 	and.w	r3, r3, #1
 801b6a8:	b29b      	uxth	r3, r3
 801b6aa:	1ad3      	subs	r3, r2, r3
 801b6ac:	b29b      	uxth	r3, r3
 801b6ae:	b21b      	sxth	r3, r3
 801b6b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    }

    lv_area_t clipped_coords;
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	689a      	ldr	r2, [r3, #8]
 801b6b8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801b6bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	f004 fffd 	bl	80206c0 <_lv_area_intersect>
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	f083 0301 	eor.w	r3, r3, #1
 801b6cc:	b2db      	uxtb	r3, r3
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	f040 827f 	bne.w	801bbd2 <draw_bg+0x5ea>

    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 801b6d4:	68bb      	ldr	r3, [r7, #8]
 801b6d6:	7a9b      	ldrb	r3, [r3, #10]
 801b6d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801b6dc:	b2db      	uxtb	r3, r3
 801b6de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 801b6e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d104      	bne.n	801b6f4 <draw_bg+0x10c>
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	791b      	ldrb	r3, [r3, #4]
 801b6ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b6f2:	e003      	b.n	801b6fc <draw_bg+0x114>
 801b6f4:	68bb      	ldr	r3, [r7, #8]
 801b6f6:	795b      	ldrb	r3, [r3, #5]
 801b6f8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 801b6fc:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801b700:	68bb      	ldr	r3, [r7, #8]
 801b702:	79db      	ldrb	r3, [r3, #7]
 801b704:	429a      	cmp	r2, r3
 801b706:	d102      	bne.n	801b70e <draw_bg+0x126>
 801b708:	2300      	movs	r3, #0
 801b70a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 801b70e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b712:	4618      	mov	r0, r3
 801b714:	f7f6 f9c0 	bl	8011a98 <lv_draw_mask_is_any>
 801b718:	4603      	mov	r3, r0
 801b71a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 801b71e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b722:	2200      	movs	r2, #0
 801b724:	601a      	str	r2, [r3, #0]
 801b726:	605a      	str	r2, [r3, #4]
 801b728:	609a      	str	r2, [r3, #8]
 801b72a:	60da      	str	r2, [r3, #12]
 801b72c:	611a      	str	r2, [r3, #16]
 801b72e:	615a      	str	r2, [r3, #20]
 801b730:	619a      	str	r2, [r3, #24]
    blend_dsc.blend_mode = dsc->blend_mode;
 801b732:	68bb      	ldr	r3, [r7, #8]
 801b734:	789b      	ldrb	r3, [r3, #2]
 801b736:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    blend_dsc.color = bg_color;
 801b73a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b73e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    /*Most simple case: just a plain rectangle*/
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 801b742:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801b746:	f083 0301 	eor.w	r3, r3, #1
 801b74a:	b2db      	uxtb	r3, r3
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d016      	beq.n	801b77e <draw_bg+0x196>
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b756:	2b00      	cmp	r3, #0
 801b758:	d111      	bne.n	801b77e <draw_bg+0x196>
 801b75a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d10d      	bne.n	801b77e <draw_bg+0x196>
        blend_dsc.blend_area = &bg_coords;
 801b762:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b766:	63bb      	str	r3, [r7, #56]	; 0x38
        blend_dsc.opa = dsc->bg_opa;
 801b768:	68bb      	ldr	r3, [r7, #8]
 801b76a:	78db      	ldrb	r3, [r3, #3]
 801b76c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b770:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b774:	4619      	mov	r1, r3
 801b776:	68f8      	ldr	r0, [r7, #12]
 801b778:	f7fb fc5e 	bl	8017038 <lv_draw_sw_blend>
        return;
 801b77c:	e22a      	b.n	801bbd4 <draw_bg+0x5ec>

    /*Complex case: there is gradient, mask, or radius*/
#if LV_DRAW_COMPLEX == 0
    LV_LOG_WARN("Can't draw complex rectangle because LV_DRAW_COMPLEX = 0");
#else
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 801b77e:	68bb      	ldr	r3, [r7, #8]
 801b780:	78db      	ldrb	r3, [r3, #3]
 801b782:	2bfc      	cmp	r3, #252	; 0xfc
 801b784:	d802      	bhi.n	801b78c <draw_bg+0x1a4>
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	78db      	ldrb	r3, [r3, #3]
 801b78a:	e000      	b.n	801b78e <draw_bg+0x1a6>
 801b78c:	23ff      	movs	r3, #255	; 0xff
 801b78e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius. Can't be larger than the half of the shortest side */
    lv_coord_t coords_bg_w = lv_area_get_width(&bg_coords);
 801b792:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b796:	4618      	mov	r0, r3
 801b798:	f7ff fec1 	bl	801b51e <lv_area_get_width>
 801b79c:	4603      	mov	r3, r0
 801b79e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    lv_coord_t coords_bg_h = lv_area_get_height(&bg_coords);
 801b7a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	f7ff fed0 	bl	801b54c <lv_area_get_height>
 801b7ac:	4603      	mov	r3, r0
 801b7ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 801b7b2:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801b7b6:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801b7ba:	4293      	cmp	r3, r2
 801b7bc:	bfa8      	it	ge
 801b7be:	4613      	movge	r3, r2
 801b7c0:	b21b      	sxth	r3, r3
 801b7c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 801b7c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b7ca:	105b      	asrs	r3, r3, #1
 801b7cc:	68ba      	ldr	r2, [r7, #8]
 801b7ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b7d2:	4293      	cmp	r3, r2
 801b7d4:	bfa8      	it	ge
 801b7d6:	4613      	movge	r3, r2
 801b7d8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /*Add a radius mask if there is radius*/
    int32_t clipped_w = lv_area_get_width(&clipped_coords);
 801b7da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b7de:	4618      	mov	r0, r3
 801b7e0:	f7ff fe9d 	bl	801b51e <lv_area_get_width>
 801b7e4:	4603      	mov	r3, r0
 801b7e6:	67bb      	str	r3, [r7, #120]	; 0x78
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801b7e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    lv_opa_t * mask_buf = NULL;
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0 || mask_any) {
 801b7f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	dc03      	bgt.n	801b804 <draw_bg+0x21c>
 801b7fc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801b800:	2b00      	cmp	r3, #0
 801b802:	d017      	beq.n	801b834 <draw_bg+0x24c>
        mask_buf = lv_mem_buf_get(clipped_w);
 801b804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b806:	4618      	mov	r0, r3
 801b808:	f006 fb04 	bl	8021e14 <lv_mem_buf_get>
 801b80c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 801b810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b812:	b21a      	sxth	r2, r3
 801b814:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801b818:	f107 0020 	add.w	r0, r7, #32
 801b81c:	2300      	movs	r3, #0
 801b81e:	f7f6 fbd7 	bl	8011fd0 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801b822:	f107 0320 	add.w	r3, r7, #32
 801b826:	2100      	movs	r1, #0
 801b828:	4618      	mov	r0, r3
 801b82a:	f7f6 f805 	bl	8011838 <lv_draw_mask_add>
 801b82e:	4603      	mov	r3, r0
 801b830:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    }

    int32_t h;

    lv_area_t blend_area;
    blend_area.x1 = clipped_coords.x1;
 801b834:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b838:	833b      	strh	r3, [r7, #24]
    blend_area.x2 = clipped_coords.x2;
 801b83a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801b83e:	83bb      	strh	r3, [r7, #28]

    blend_dsc.mask_buf = mask_buf;
 801b840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b844:	647b      	str	r3, [r7, #68]	; 0x44
    blend_dsc.blend_area = &blend_area;
 801b846:	f107 0318 	add.w	r3, r7, #24
 801b84a:	63bb      	str	r3, [r7, #56]	; 0x38
    blend_dsc.mask_area = &blend_area;
 801b84c:	f107 0318 	add.w	r3, r7, #24
 801b850:	64fb      	str	r3, [r7, #76]	; 0x4c
    blend_dsc.opa = LV_OPA_COVER;
 801b852:	23ff      	movs	r3, #255	; 0xff
 801b854:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50


    /*Get gradient if appropriate*/
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 801b858:	68bb      	ldr	r3, [r7, #8]
 801b85a:	3305      	adds	r3, #5
 801b85c:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801b860:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801b864:	4618      	mov	r0, r3
 801b866:	f7fc fff7 	bl	8018858 <lv_gradient_get>
 801b86a:	6778      	str	r0, [r7, #116]	; 0x74
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 801b86c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d00d      	beq.n	801b88e <draw_bg+0x2a6>
 801b872:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b876:	2b02      	cmp	r3, #2
 801b878:	d109      	bne.n	801b88e <draw_bg+0x2a6>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 801b87a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b87c:	689a      	ldr	r2, [r3, #8]
 801b87e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b882:	4619      	mov	r1, r3
 801b884:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801b888:	1acb      	subs	r3, r1, r3
 801b88a:	4413      	add	r3, r2
 801b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
#endif
#endif

    /*There is another mask too. Draw line by line. */
    if(mask_any) {
 801b88e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801b892:	2b00      	cmp	r3, #0
 801b894:	d04c      	beq.n	801b930 <draw_bg+0x348>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801b896:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801b89a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b89e:	e03f      	b.n	801b920 <draw_bg+0x338>
            blend_area.y1 = h;
 801b8a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b8a4:	b21b      	sxth	r3, r3
 801b8a6:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801b8a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b8ac:	b21b      	sxth	r3, r3
 801b8ae:	83fb      	strh	r3, [r7, #30]

            /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
             * It saves calculating the final opa in lv_draw_sw_blend*/
            lv_memset(mask_buf, opa, clipped_w);
 801b8b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b8b2:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801b8b6:	4619      	mov	r1, r3
 801b8b8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b8bc:	f006 fdc6 	bl	802244c <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801b8c0:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801b8c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b8c8:	b21a      	sxth	r2, r3
 801b8ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b8cc:	b21b      	sxth	r3, r3
 801b8ce:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b8d2:	f7f5 ffe3 	bl	801189c <lv_draw_mask_apply>
 801b8d6:	4603      	mov	r3, r0
 801b8d8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b8dc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801b8e0:	2b01      	cmp	r3, #1
 801b8e2:	d102      	bne.n	801b8ea <draw_bg+0x302>
 801b8e4:	2302      	movs	r3, #2
 801b8e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801b8ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b8ee:	2b01      	cmp	r3, #1
 801b8f0:	d10b      	bne.n	801b90a <draw_bg+0x322>
 801b8f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b8f4:	689b      	ldr	r3, [r3, #8]
 801b8f6:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801b8fa:	4611      	mov	r1, r2
 801b8fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801b900:	1a52      	subs	r2, r2, r1
 801b902:	4413      	add	r3, r2
 801b904:	781b      	ldrb	r3, [r3, #0]
 801b906:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b90a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b90e:	4619      	mov	r1, r3
 801b910:	68f8      	ldr	r0, [r7, #12]
 801b912:	f7fb fb91 	bl	8017038 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801b916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b91a:	3301      	adds	r3, #1
 801b91c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b920:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801b924:	461a      	mov	r2, r3
 801b926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b92a:	4293      	cmp	r3, r2
 801b92c:	ddb8      	ble.n	801b8a0 <draw_bg+0x2b8>
        }
        goto bg_clean_up;
 801b92e:	e130      	b.n	801bb92 <draw_bg+0x5aa>
    }


    /* Draw the top of the rectangle line by line and mirror it to the bottom. */
    for(h = 0; h < rout; h++) {
 801b930:	2300      	movs	r3, #0
 801b932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b936:	e084      	b.n	801ba42 <draw_bg+0x45a>
        lv_coord_t top_y = bg_coords.y1 + h;
 801b938:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801b93c:	b29a      	uxth	r2, r3
 801b93e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b942:	b29b      	uxth	r3, r3
 801b944:	4413      	add	r3, r2
 801b946:	b29b      	uxth	r3, r3
 801b948:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t bottom_y = bg_coords.y2 - h;
 801b94c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801b950:	b29a      	uxth	r2, r3
 801b952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b956:	b29b      	uxth	r3, r3
 801b958:	1ad3      	subs	r3, r2, r3
 801b95a:	b29b      	uxth	r3, r3
 801b95c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801b960:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801b964:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801b968:	429a      	cmp	r2, r3
 801b96a:	da05      	bge.n	801b978 <draw_bg+0x390>
 801b96c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801b970:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801b974:	429a      	cmp	r2, r3
 801b976:	dc5e      	bgt.n	801ba36 <draw_bg+0x44e>

        /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
         * It saves calculating the final opa in lv_draw_sw_blend*/
        lv_memset(mask_buf, opa, clipped_w);
 801b978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b97a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801b97e:	4619      	mov	r1, r3
 801b980:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b984:	f006 fd62 	bl	802244c <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 801b988:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801b98c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b98e:	b21b      	sxth	r3, r3
 801b990:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801b994:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b998:	f7f5 ff80 	bl	801189c <lv_draw_mask_apply>
 801b99c:	4603      	mov	r3, r0
 801b99e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b9a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801b9a6:	2b01      	cmp	r3, #1
 801b9a8:	d102      	bne.n	801b9b0 <draw_bg+0x3c8>
 801b9aa:	2302      	movs	r3, #2
 801b9ac:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(top_y >= clipped_coords.y1) {
 801b9b0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801b9b4:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	db1a      	blt.n	801b9f2 <draw_bg+0x40a>
            blend_area.y1 = top_y;
 801b9bc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801b9c0:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = top_y;
 801b9c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801b9c6:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  top_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 801b9c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b9cc:	2b01      	cmp	r3, #1
 801b9ce:	d10a      	bne.n	801b9e6 <draw_bg+0x3fe>
 801b9d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9d2:	689b      	ldr	r3, [r3, #8]
 801b9d4:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801b9d8:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801b9dc:	1a52      	subs	r2, r2, r1
 801b9de:	4413      	add	r3, r2
 801b9e0:	781b      	ldrb	r3, [r3, #0]
 801b9e2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b9e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b9ea:	4619      	mov	r1, r3
 801b9ec:	68f8      	ldr	r0, [r7, #12]
 801b9ee:	f7fb fb23 	bl	8017038 <lv_draw_sw_blend>
        }

        if(bottom_y <= clipped_coords.y2) {
 801b9f2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801b9f6:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801b9fa:	429a      	cmp	r2, r3
 801b9fc:	dc1c      	bgt.n	801ba38 <draw_bg+0x450>
            blend_area.y1 = bottom_y;
 801b9fe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801ba02:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = bottom_y;
 801ba04:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801ba08:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  bottom_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 801ba0a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ba0e:	2b01      	cmp	r3, #1
 801ba10:	d10a      	bne.n	801ba28 <draw_bg+0x440>
 801ba12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba14:	689b      	ldr	r3, [r3, #8]
 801ba16:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801ba1a:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801ba1e:	1a52      	subs	r2, r2, r1
 801ba20:	4413      	add	r3, r2
 801ba22:	781b      	ldrb	r3, [r3, #0]
 801ba24:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ba28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba2c:	4619      	mov	r1, r3
 801ba2e:	68f8      	ldr	r0, [r7, #12]
 801ba30:	f7fb fb02 	bl	8017038 <lv_draw_sw_blend>
 801ba34:	e000      	b.n	801ba38 <draw_bg+0x450>
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801ba36:	bf00      	nop
    for(h = 0; h < rout; h++) {
 801ba38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ba3c:	3301      	adds	r3, #1
 801ba3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801ba42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801ba46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba48:	429a      	cmp	r2, r3
 801ba4a:	f6ff af75 	blt.w	801b938 <draw_bg+0x350>

    /* Draw the center of the rectangle.*/

    /*If no other masks and no gradient, the center is a simple rectangle*/
    lv_area_t center_coords;
    center_coords.x1 = bg_coords.x1;
 801ba4e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801ba52:	823b      	strh	r3, [r7, #16]
    center_coords.x2 = bg_coords.x2;
 801ba54:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801ba58:	82bb      	strh	r3, [r7, #20]
    center_coords.y1 = bg_coords.y1 + rout;
 801ba5a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801ba5e:	b29a      	uxth	r2, r3
 801ba60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba62:	b29b      	uxth	r3, r3
 801ba64:	4413      	add	r3, r2
 801ba66:	b29b      	uxth	r3, r3
 801ba68:	b21b      	sxth	r3, r3
 801ba6a:	827b      	strh	r3, [r7, #18]
    center_coords.y2 = bg_coords.y2 - rout;
 801ba6c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801ba70:	b29a      	uxth	r2, r3
 801ba72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba74:	b29b      	uxth	r3, r3
 801ba76:	1ad3      	subs	r3, r2, r3
 801ba78:	b29b      	uxth	r3, r3
 801ba7a:	b21b      	sxth	r3, r3
 801ba7c:	82fb      	strh	r3, [r7, #22]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 801ba7e:	f107 0310 	add.w	r3, r7, #16
 801ba82:	4618      	mov	r0, r3
 801ba84:	f7f6 f808 	bl	8011a98 <lv_draw_mask_is_any>
 801ba88:	4603      	mov	r3, r0
 801ba8a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 801ba8e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801ba92:	f083 0301 	eor.w	r3, r3, #1
 801ba96:	b2db      	uxtb	r3, r3
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d022      	beq.n	801bae2 <draw_bg+0x4fa>
 801ba9c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d11e      	bne.n	801bae2 <draw_bg+0x4fa>
        blend_area.y1 = bg_coords.y1 + rout;
 801baa4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801baa8:	b29a      	uxth	r2, r3
 801baaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801baac:	b29b      	uxth	r3, r3
 801baae:	4413      	add	r3, r2
 801bab0:	b29b      	uxth	r3, r3
 801bab2:	b21b      	sxth	r3, r3
 801bab4:	837b      	strh	r3, [r7, #26]
        blend_area.y2 = bg_coords.y2 - rout;
 801bab6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801baba:	b29a      	uxth	r2, r3
 801babc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801babe:	b29b      	uxth	r3, r3
 801bac0:	1ad3      	subs	r3, r2, r3
 801bac2:	b29b      	uxth	r3, r3
 801bac4:	b21b      	sxth	r3, r3
 801bac6:	83fb      	strh	r3, [r7, #30]
        blend_dsc.opa = opa;
 801bac8:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bacc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_buf = NULL;
 801bad0:	2300      	movs	r3, #0
 801bad2:	647b      	str	r3, [r7, #68]	; 0x44
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bad4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bad8:	4619      	mov	r1, r3
 801bada:	68f8      	ldr	r0, [r7, #12]
 801badc:	f7fb faac 	bl	8017038 <lv_draw_sw_blend>
 801bae0:	e057      	b.n	801bb92 <draw_bg+0x5aa>
    }
    /*With gradient and/or mask draw line by line*/
    else {
        blend_dsc.opa = opa;
 801bae2:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bae6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801baea:	2301      	movs	r3, #1
 801baec:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        int32_t h_end = bg_coords.y2 - rout;
 801baf0:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801baf4:	461a      	mov	r2, r3
 801baf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801baf8:	1ad3      	subs	r3, r2, r3
 801bafa:	66fb      	str	r3, [r7, #108]	; 0x6c
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801bafc:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801bb00:	461a      	mov	r2, r3
 801bb02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bb04:	4413      	add	r3, r2
 801bb06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bb0a:	e03c      	b.n	801bb86 <draw_bg+0x59e>
            /*If there is no other mask do not apply mask as in the center there is no radius to mask*/
            if(mask_any_center) {
 801bb0c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d015      	beq.n	801bb40 <draw_bg+0x558>
                lv_memset(mask_buf, opa, clipped_w);
 801bb14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bb16:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bb20:	f006 fc94 	bl	802244c <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801bb24:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801bb28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb2c:	b21a      	sxth	r2, r3
 801bb2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bb30:	b21b      	sxth	r3, r3
 801bb32:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bb36:	f7f5 feb1 	bl	801189c <lv_draw_mask_apply>
 801bb3a:	4603      	mov	r3, r0
 801bb3c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            blend_area.y1 = h;
 801bb40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb44:	b21b      	sxth	r3, r3
 801bb46:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801bb48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb4c:	b21b      	sxth	r3, r3
 801bb4e:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801bb50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bb54:	2b01      	cmp	r3, #1
 801bb56:	d10b      	bne.n	801bb70 <draw_bg+0x588>
 801bb58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bb5a:	689b      	ldr	r3, [r3, #8]
 801bb5c:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801bb60:	4611      	mov	r1, r2
 801bb62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801bb66:	1a52      	subs	r2, r2, r1
 801bb68:	4413      	add	r3, r2
 801bb6a:	781b      	ldrb	r3, [r3, #0]
 801bb6c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bb70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb74:	4619      	mov	r1, r3
 801bb76:	68f8      	ldr	r0, [r7, #12]
 801bb78:	f7fb fa5e 	bl	8017038 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801bb7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb80:	3301      	adds	r3, #1
 801bb82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bb86:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801bb8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bb8c:	429a      	cmp	r2, r3
 801bb8e:	ddbd      	ble.n	801bb0c <draw_bg+0x524>
        }
    }


bg_clean_up:
 801bb90:	bf00      	nop
    if(mask_buf) lv_mem_buf_release(mask_buf);
 801bb92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d003      	beq.n	801bba2 <draw_bg+0x5ba>
 801bb9a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bb9e:	f006 f9e5 	bl	8021f6c <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 801bba2:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801bba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bbaa:	d009      	beq.n	801bbc0 <draw_bg+0x5d8>
        lv_draw_mask_remove_id(mask_rout_id);
 801bbac:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	f7f5 feb7 	bl	8011924 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 801bbb6:	f107 0320 	add.w	r3, r7, #32
 801bbba:	4618      	mov	r0, r3
 801bbbc:	f7f5 ff02 	bl	80119c4 <lv_draw_mask_free_param>
    }
    if(grad) {
 801bbc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d006      	beq.n	801bbd4 <draw_bg+0x5ec>
        lv_gradient_cleanup(grad);
 801bbc6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801bbc8:	f7fc ffb4 	bl	8018b34 <lv_gradient_cleanup>
 801bbcc:	e002      	b.n	801bbd4 <draw_bg+0x5ec>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801bbce:	bf00      	nop
 801bbd0:	e000      	b.n	801bbd4 <draw_bg+0x5ec>
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801bbd2:	bf00      	nop
    }

#endif
}
 801bbd4:	3798      	adds	r7, #152	; 0x98
 801bbd6:	46bd      	mov	sp, r7
 801bbd8:	bd80      	pop	{r7, pc}

0801bbda <draw_bg_img>:

static void draw_bg_img(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801bbda:	b590      	push	{r4, r7, lr}
 801bbdc:	b0a3      	sub	sp, #140	; 0x8c
 801bbde:	af04      	add	r7, sp, #16
 801bbe0:	60f8      	str	r0, [r7, #12]
 801bbe2:	60b9      	str	r1, [r7, #8]
 801bbe4:	607a      	str	r2, [r7, #4]
    if(dsc->bg_img_src == NULL) return;
 801bbe6:	68bb      	ldr	r3, [r7, #8]
 801bbe8:	68db      	ldr	r3, [r3, #12]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	f000 81a9 	beq.w	801bf42 <draw_bg_img+0x368>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801bbf0:	68bb      	ldr	r3, [r7, #8]
 801bbf2:	7d5b      	ldrb	r3, [r3, #21]
 801bbf4:	2b02      	cmp	r3, #2
 801bbf6:	f240 81a6 	bls.w	801bf46 <draw_bg_img+0x36c>

    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	689a      	ldr	r2, [r3, #8]
 801bbfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bc02:	6879      	ldr	r1, [r7, #4]
 801bc04:	4618      	mov	r0, r3
 801bc06:	f004 fd5b 	bl	80206c0 <_lv_area_intersect>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	f083 0301 	eor.w	r3, r3, #1
 801bc10:	b2db      	uxtb	r3, r3
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	f040 8199 	bne.w	801bf4a <draw_bg_img+0x370>
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	689b      	ldr	r3, [r3, #8]
 801bc1c:	677b      	str	r3, [r7, #116]	; 0x74
    draw_ctx->clip_area = &clip_area;
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801bc24:	609a      	str	r2, [r3, #8]

    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 801bc26:	68bb      	ldr	r3, [r7, #8]
 801bc28:	68db      	ldr	r3, [r3, #12]
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	f7f4 fb5f 	bl	80102ee <lv_img_src_get_type>
 801bc30:	4603      	mov	r3, r0
 801bc32:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(src_type == LV_IMG_SRC_SYMBOL) {
 801bc36:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801bc3a:	2b02      	cmp	r3, #2
 801bc3c:	d17f      	bne.n	801bd3e <draw_bg_img+0x164>
        lv_point_t size;
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bc3e:	68bb      	ldr	r3, [r7, #8]
 801bc40:	68d9      	ldr	r1, [r3, #12]
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	691a      	ldr	r2, [r3, #16]
 801bc46:	f107 0064 	add.w	r0, r7, #100	; 0x64
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	9302      	str	r3, [sp, #8]
 801bc4e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801bc52:	9301      	str	r3, [sp, #4]
 801bc54:	2300      	movs	r3, #0
 801bc56:	9300      	str	r3, [sp, #0]
 801bc58:	2300      	movs	r3, #0
 801bc5a:	f008 fac3 	bl	80241e4 <lv_txt_get_size>
        lv_area_t a;
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc64:	b29c      	uxth	r4, r3
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	f7ff fc59 	bl	801b51e <lv_area_get_width>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	da00      	bge.n	801bc74 <draw_bg_img+0x9a>
 801bc72:	3301      	adds	r3, #1
 801bc74:	105b      	asrs	r3, r3, #1
 801bc76:	b21b      	sxth	r3, r3
 801bc78:	b29b      	uxth	r3, r3
 801bc7a:	4423      	add	r3, r4
 801bc7c:	b29a      	uxth	r2, r3
 801bc7e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	da00      	bge.n	801bc88 <draw_bg_img+0xae>
 801bc86:	3301      	adds	r3, #1
 801bc88:	105b      	asrs	r3, r3, #1
 801bc8a:	b21b      	sxth	r3, r3
 801bc8c:	b29b      	uxth	r3, r3
 801bc8e:	1ad3      	subs	r3, r2, r3
 801bc90:	b29b      	uxth	r3, r3
 801bc92:	b21b      	sxth	r3, r3
 801bc94:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        a.x2 = a.x1 + size.x - 1;
 801bc98:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801bc9c:	b29a      	uxth	r2, r3
 801bc9e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801bca2:	b29b      	uxth	r3, r3
 801bca4:	4413      	add	r3, r2
 801bca6:	b29b      	uxth	r3, r3
 801bca8:	3b01      	subs	r3, #1
 801bcaa:	b29b      	uxth	r3, r3
 801bcac:	b21b      	sxth	r3, r3
 801bcae:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bcb8:	b29c      	uxth	r4, r3
 801bcba:	6878      	ldr	r0, [r7, #4]
 801bcbc:	f7ff fc46 	bl	801b54c <lv_area_get_height>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	da00      	bge.n	801bcc8 <draw_bg_img+0xee>
 801bcc6:	3301      	adds	r3, #1
 801bcc8:	105b      	asrs	r3, r3, #1
 801bcca:	b21b      	sxth	r3, r3
 801bccc:	b29b      	uxth	r3, r3
 801bcce:	4423      	add	r3, r4
 801bcd0:	b29a      	uxth	r2, r3
 801bcd2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	da00      	bge.n	801bcdc <draw_bg_img+0x102>
 801bcda:	3301      	adds	r3, #1
 801bcdc:	105b      	asrs	r3, r3, #1
 801bcde:	b21b      	sxth	r3, r3
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	1ad3      	subs	r3, r2, r3
 801bce4:	b29b      	uxth	r3, r3
 801bce6:	b21b      	sxth	r3, r3
 801bce8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        a.y2 = a.y1 + size.y - 1;
 801bcec:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801bcf0:	b29a      	uxth	r2, r3
 801bcf2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bcf6:	b29b      	uxth	r3, r3
 801bcf8:	4413      	add	r3, r2
 801bcfa:	b29b      	uxth	r3, r3
 801bcfc:	3b01      	subs	r3, #1
 801bcfe:	b29b      	uxth	r3, r3
 801bd00:	b21b      	sxth	r3, r3
 801bd02:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        lv_draw_label_dsc_t label_draw_dsc;
        lv_draw_label_dsc_init(&label_draw_dsc);
 801bd06:	f107 0314 	add.w	r3, r7, #20
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	f7f4 fd9e 	bl	801084c <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 801bd10:	68bb      	ldr	r3, [r7, #8]
 801bd12:	691b      	ldr	r3, [r3, #16]
 801bd14:	617b      	str	r3, [r7, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 801bd16:	68bb      	ldr	r3, [r7, #8]
 801bd18:	7d1b      	ldrb	r3, [r3, #20]
 801bd1a:	f887 3020 	strb.w	r3, [r7, #32]
        label_draw_dsc.opa = dsc->bg_img_opa;
 801bd1e:	68bb      	ldr	r3, [r7, #8]
 801bd20:	7d5b      	ldrb	r3, [r3, #21]
 801bd22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 801bd26:	68bb      	ldr	r3, [r7, #8]
 801bd28:	68db      	ldr	r3, [r3, #12]
 801bd2a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801bd2e:	f107 0114 	add.w	r1, r7, #20
 801bd32:	2000      	movs	r0, #0
 801bd34:	9000      	str	r0, [sp, #0]
 801bd36:	68f8      	ldr	r0, [r7, #12]
 801bd38:	f7f4 fdb4 	bl	80108a4 <lv_draw_label>
 801bd3c:	e0fd      	b.n	801bf3a <draw_bg_img+0x360>
    }
    else {
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 801bd3e:	68bb      	ldr	r3, [r7, #8]
 801bd40:	68db      	ldr	r3, [r3, #12]
 801bd42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801bd46:	4611      	mov	r1, r2
 801bd48:	4618      	mov	r0, r3
 801bd4a:	f7f8 fb49 	bl	80143e0 <lv_img_decoder_get_info>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if(res == LV_RES_OK) {
 801bd54:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801bd58:	2b01      	cmp	r3, #1
 801bd5a:	f040 80ee 	bne.w	801bf3a <draw_bg_img+0x360>
            lv_draw_img_dsc_t img_dsc;
            lv_draw_img_dsc_init(&img_dsc);
 801bd5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801bd62:	4618      	mov	r0, r3
 801bd64:	f7f4 f9df 	bl	8010126 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	789b      	ldrb	r3, [r3, #2]
 801bd6c:	f003 030f 	and.w	r3, r3, #15
 801bd70:	b2da      	uxtb	r2, r3
 801bd72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801bd76:	f362 0303 	bfi	r3, r2, #0, #4
 801bd7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            img_dsc.recolor = dsc->bg_img_recolor;
 801bd7e:	68bb      	ldr	r3, [r7, #8]
 801bd80:	7d1b      	ldrb	r3, [r3, #20]
 801bd82:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 801bd86:	68bb      	ldr	r3, [r7, #8]
 801bd88:	7d9b      	ldrb	r3, [r3, #22]
 801bd8a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            img_dsc.opa = dsc->bg_img_opa;
 801bd8e:	68bb      	ldr	r3, [r7, #8]
 801bd90:	7d5b      	ldrb	r3, [r3, #21]
 801bd92:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

            /*Center align*/
            if(dsc->bg_img_tiled == false) {
 801bd96:	68bb      	ldr	r3, [r7, #8]
 801bd98:	7ddb      	ldrb	r3, [r3, #23]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d163      	bne.n	801be66 <draw_bg_img+0x28c>
                lv_area_t area;
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bda4:	b29c      	uxth	r4, r3
 801bda6:	6878      	ldr	r0, [r7, #4]
 801bda8:	f7ff fbb9 	bl	801b51e <lv_area_get_width>
 801bdac:	4603      	mov	r3, r0
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	da00      	bge.n	801bdb4 <draw_bg_img+0x1da>
 801bdb2:	3301      	adds	r3, #1
 801bdb4:	105b      	asrs	r3, r3, #1
 801bdb6:	b21b      	sxth	r3, r3
 801bdb8:	b29b      	uxth	r3, r3
 801bdba:	4423      	add	r3, r4
 801bdbc:	b29a      	uxth	r2, r3
 801bdbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bdc0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801bdc4:	b29b      	uxth	r3, r3
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	da00      	bge.n	801bdcc <draw_bg_img+0x1f2>
 801bdca:	3301      	adds	r3, #1
 801bdcc:	105b      	asrs	r3, r3, #1
 801bdce:	425b      	negs	r3, r3
 801bdd0:	b29b      	uxth	r3, r3
 801bdd2:	4413      	add	r3, r2
 801bdd4:	b29b      	uxth	r3, r3
 801bdd6:	b21b      	sxth	r3, r3
 801bdd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bde0:	b29c      	uxth	r4, r3
 801bde2:	6878      	ldr	r0, [r7, #4]
 801bde4:	f7ff fbb2 	bl	801b54c <lv_area_get_height>
 801bde8:	4603      	mov	r3, r0
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	da00      	bge.n	801bdf0 <draw_bg_img+0x216>
 801bdee:	3301      	adds	r3, #1
 801bdf0:	105b      	asrs	r3, r3, #1
 801bdf2:	b21b      	sxth	r3, r3
 801bdf4:	b29b      	uxth	r3, r3
 801bdf6:	4423      	add	r3, r4
 801bdf8:	b29a      	uxth	r2, r3
 801bdfa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bdfe:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801be02:	b29b      	uxth	r3, r3
 801be04:	2b00      	cmp	r3, #0
 801be06:	da00      	bge.n	801be0a <draw_bg_img+0x230>
 801be08:	3301      	adds	r3, #1
 801be0a:	105b      	asrs	r3, r3, #1
 801be0c:	425b      	negs	r3, r3
 801be0e:	b29b      	uxth	r3, r3
 801be10:	4413      	add	r3, r2
 801be12:	b29b      	uxth	r3, r3
 801be14:	b21b      	sxth	r3, r3
 801be16:	87fb      	strh	r3, [r7, #62]	; 0x3e
                area.x2 = area.x1 + header.w - 1;
 801be18:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801be1c:	b29b      	uxth	r3, r3
 801be1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801be20:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801be24:	b292      	uxth	r2, r2
 801be26:	4413      	add	r3, r2
 801be28:	b29b      	uxth	r3, r3
 801be2a:	3b01      	subs	r3, #1
 801be2c:	b29b      	uxth	r3, r3
 801be2e:	b21b      	sxth	r3, r3
 801be30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                area.y2 = area.y1 + header.h - 1;
 801be34:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801be38:	b29b      	uxth	r3, r3
 801be3a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801be3e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801be42:	b292      	uxth	r2, r2
 801be44:	4413      	add	r3, r2
 801be46:	b29b      	uxth	r3, r3
 801be48:	3b01      	subs	r3, #1
 801be4a:	b29b      	uxth	r3, r3
 801be4c:	b21b      	sxth	r3, r3
 801be4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	68db      	ldr	r3, [r3, #12]
 801be56:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801be5a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801be5e:	68f8      	ldr	r0, [r7, #12]
 801be60:	f7f4 f97e 	bl	8010160 <lv_draw_img>
 801be64:	e069      	b.n	801bf3a <draw_bg_img+0x360>
            }
            else {
                lv_area_t area;
                area.y1 = coords->y1;
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801be6c:	86fb      	strh	r3, [r7, #54]	; 0x36
                area.y2 = area.y1 + header.h - 1;
 801be6e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801be72:	b29b      	uxth	r3, r3
 801be74:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801be78:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801be7c:	b292      	uxth	r2, r2
 801be7e:	4413      	add	r3, r2
 801be80:	b29b      	uxth	r3, r3
 801be82:	3b01      	subs	r3, #1
 801be84:	b29b      	uxth	r3, r3
 801be86:	b21b      	sxth	r3, r3
 801be88:	877b      	strh	r3, [r7, #58]	; 0x3a

                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801be8a:	e04f      	b.n	801bf2c <draw_bg_img+0x352>

                    area.x1 = coords->x1;
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be92:	86bb      	strh	r3, [r7, #52]	; 0x34
                    area.x2 = area.x1 + header.w - 1;
 801be94:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801be98:	b29b      	uxth	r3, r3
 801be9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801be9c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801bea0:	b292      	uxth	r2, r2
 801bea2:	4413      	add	r3, r2
 801bea4:	b29b      	uxth	r3, r3
 801bea6:	3b01      	subs	r3, #1
 801bea8:	b29b      	uxth	r3, r3
 801beaa:	b21b      	sxth	r3, r3
 801beac:	873b      	strh	r3, [r7, #56]	; 0x38
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801beae:	e01e      	b.n	801beee <draw_bg_img+0x314>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801beb0:	68bb      	ldr	r3, [r7, #8]
 801beb2:	68db      	ldr	r3, [r3, #12]
 801beb4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801beb8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801bebc:	68f8      	ldr	r0, [r7, #12]
 801bebe:	f7f4 f94f 	bl	8010160 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801bec2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801bec6:	b29b      	uxth	r3, r3
 801bec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801beca:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801bece:	b292      	uxth	r2, r2
 801bed0:	4413      	add	r3, r2
 801bed2:	b29b      	uxth	r3, r3
 801bed4:	b21b      	sxth	r3, r3
 801bed6:	86bb      	strh	r3, [r7, #52]	; 0x34
 801bed8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801bedc:	b29b      	uxth	r3, r3
 801bede:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bee0:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801bee4:	b292      	uxth	r2, r2
 801bee6:	4413      	add	r3, r2
 801bee8:	b29b      	uxth	r3, r3
 801beea:	b21b      	sxth	r3, r3
 801beec:	873b      	strh	r3, [r7, #56]	; 0x38
 801beee:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bef8:	429a      	cmp	r2, r3
 801befa:	ddd9      	ble.n	801beb0 <draw_bg_img+0x2d6>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801befc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801bf00:	b29b      	uxth	r3, r3
 801bf02:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801bf06:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801bf0a:	b292      	uxth	r2, r2
 801bf0c:	4413      	add	r3, r2
 801bf0e:	b29b      	uxth	r3, r3
 801bf10:	b21b      	sxth	r3, r3
 801bf12:	86fb      	strh	r3, [r7, #54]	; 0x36
 801bf14:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801bf18:	b29b      	uxth	r3, r3
 801bf1a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801bf1e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801bf22:	b292      	uxth	r2, r2
 801bf24:	4413      	add	r3, r2
 801bf26:	b29b      	uxth	r3, r3
 801bf28:	b21b      	sxth	r3, r3
 801bf2a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801bf2c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bf36:	429a      	cmp	r2, r3
 801bf38:	dda8      	ble.n	801be8c <draw_bg_img+0x2b2>
        else {
            LV_LOG_WARN("Couldn't read the background image");
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801bf3a:	68fb      	ldr	r3, [r7, #12]
 801bf3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801bf3e:	609a      	str	r2, [r3, #8]
 801bf40:	e004      	b.n	801bf4c <draw_bg_img+0x372>
    if(dsc->bg_img_src == NULL) return;
 801bf42:	bf00      	nop
 801bf44:	e002      	b.n	801bf4c <draw_bg_img+0x372>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801bf46:	bf00      	nop
 801bf48:	e000      	b.n	801bf4c <draw_bg_img+0x372>
        return;
 801bf4a:	bf00      	nop
}
 801bf4c:	377c      	adds	r7, #124	; 0x7c
 801bf4e:	46bd      	mov	sp, r7
 801bf50:	bd90      	pop	{r4, r7, pc}

0801bf52 <draw_border>:

static void draw_border(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801bf52:	b580      	push	{r7, lr}
 801bf54:	b090      	sub	sp, #64	; 0x40
 801bf56:	af04      	add	r7, sp, #16
 801bf58:	60f8      	str	r0, [r7, #12]
 801bf5a:	60b9      	str	r1, [r7, #8]
 801bf5c:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801bf5e:	68bb      	ldr	r3, [r7, #8]
 801bf60:	7f1b      	ldrb	r3, [r3, #28]
 801bf62:	2b02      	cmp	r3, #2
 801bf64:	f240 80db 	bls.w	801c11e <draw_border+0x1cc>
    if(dsc->border_width == 0) return;
 801bf68:	68bb      	ldr	r3, [r7, #8]
 801bf6a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	f000 80d7 	beq.w	801c122 <draw_border+0x1d0>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801bf74:	68bb      	ldr	r3, [r7, #8]
 801bf76:	7f5b      	ldrb	r3, [r3, #29]
 801bf78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801bf7c:	b2db      	uxtb	r3, r3
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	f000 80d1 	beq.w	801c126 <draw_border+0x1d4>
    if(dsc->border_post) return;
 801bf84:	68bb      	ldr	r3, [r7, #8]
 801bf86:	7f5b      	ldrb	r3, [r3, #29]
 801bf88:	f003 0301 	and.w	r3, r3, #1
 801bf8c:	b2db      	uxtb	r3, r3
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	f040 80cb 	bne.w	801c12a <draw_border+0x1d8>

    int32_t coords_w = lv_area_get_width(coords);
 801bf94:	6878      	ldr	r0, [r7, #4]
 801bf96:	f7ff fac2 	bl	801b51e <lv_area_get_width>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t coords_h = lv_area_get_height(coords);
 801bf9e:	6878      	ldr	r0, [r7, #4]
 801bfa0:	f7ff fad4 	bl	801b54c <lv_area_get_height>
 801bfa4:	4603      	mov	r3, r0
 801bfa6:	623b      	str	r3, [r7, #32]
    int32_t rout = dsc->radius;
 801bfa8:	68bb      	ldr	r3, [r7, #8]
 801bfaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bfae:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t short_side = LV_MIN(coords_w, coords_h);
 801bfb0:	6a3a      	ldr	r2, [r7, #32]
 801bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfb4:	4293      	cmp	r3, r2
 801bfb6:	bfa8      	it	ge
 801bfb8:	4613      	movge	r3, r2
 801bfba:	61fb      	str	r3, [r7, #28]
    if(rout > short_side >> 1) rout = short_side >> 1;
 801bfbc:	69fb      	ldr	r3, [r7, #28]
 801bfbe:	105b      	asrs	r3, r3, #1
 801bfc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bfc2:	429a      	cmp	r2, r3
 801bfc4:	dd02      	ble.n	801bfcc <draw_border+0x7a>
 801bfc6:	69fb      	ldr	r3, [r7, #28]
 801bfc8:	105b      	asrs	r3, r3, #1
 801bfca:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801bfcc:	f107 0314 	add.w	r3, r7, #20
 801bfd0:	6879      	ldr	r1, [r7, #4]
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	f7ff fa84 	bl	801b4e0 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801bfd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bfdc:	b29a      	uxth	r2, r3
 801bfde:	68bb      	ldr	r3, [r7, #8]
 801bfe0:	7f5b      	ldrb	r3, [r3, #29]
 801bfe2:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801bfe6:	b2db      	uxtb	r3, r3
 801bfe8:	f003 0304 	and.w	r3, r3, #4
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d004      	beq.n	801bffa <draw_border+0xa8>
 801bff0:	68bb      	ldr	r3, [r7, #8]
 801bff2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801bff6:	b29b      	uxth	r3, r3
 801bff8:	e009      	b.n	801c00e <draw_border+0xbc>
 801bffa:	68bb      	ldr	r3, [r7, #8]
 801bffc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c000:	b299      	uxth	r1, r3
 801c002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c004:	b29b      	uxth	r3, r3
 801c006:	440b      	add	r3, r1
 801c008:	b29b      	uxth	r3, r3
 801c00a:	425b      	negs	r3, r3
 801c00c:	b29b      	uxth	r3, r3
 801c00e:	4413      	add	r3, r2
 801c010:	b29b      	uxth	r3, r3
 801c012:	b21b      	sxth	r3, r3
 801c014:	82bb      	strh	r3, [r7, #20]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 801c016:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801c01a:	b29a      	uxth	r2, r3
 801c01c:	68bb      	ldr	r3, [r7, #8]
 801c01e:	7f5b      	ldrb	r3, [r3, #29]
 801c020:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c024:	b2db      	uxtb	r3, r3
 801c026:	f003 0308 	and.w	r3, r3, #8
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d004      	beq.n	801c038 <draw_border+0xe6>
 801c02e:	68bb      	ldr	r3, [r7, #8]
 801c030:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c034:	b29b      	uxth	r3, r3
 801c036:	e009      	b.n	801c04c <draw_border+0xfa>
 801c038:	68bb      	ldr	r3, [r7, #8]
 801c03a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c03e:	b299      	uxth	r1, r3
 801c040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c042:	b29b      	uxth	r3, r3
 801c044:	440b      	add	r3, r1
 801c046:	b29b      	uxth	r3, r3
 801c048:	425b      	negs	r3, r3
 801c04a:	b29b      	uxth	r3, r3
 801c04c:	1ad3      	subs	r3, r2, r3
 801c04e:	b29b      	uxth	r3, r3
 801c050:	b21b      	sxth	r3, r3
 801c052:	833b      	strh	r3, [r7, #24]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 801c054:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c058:	b29a      	uxth	r2, r3
 801c05a:	68bb      	ldr	r3, [r7, #8]
 801c05c:	7f5b      	ldrb	r3, [r3, #29]
 801c05e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c062:	b2db      	uxtb	r3, r3
 801c064:	f003 0302 	and.w	r3, r3, #2
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d004      	beq.n	801c076 <draw_border+0x124>
 801c06c:	68bb      	ldr	r3, [r7, #8]
 801c06e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c072:	b29b      	uxth	r3, r3
 801c074:	e009      	b.n	801c08a <draw_border+0x138>
 801c076:	68bb      	ldr	r3, [r7, #8]
 801c078:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c07c:	b299      	uxth	r1, r3
 801c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c080:	b29b      	uxth	r3, r3
 801c082:	440b      	add	r3, r1
 801c084:	b29b      	uxth	r3, r3
 801c086:	425b      	negs	r3, r3
 801c088:	b29b      	uxth	r3, r3
 801c08a:	4413      	add	r3, r2
 801c08c:	b29b      	uxth	r3, r3
 801c08e:	b21b      	sxth	r3, r3
 801c090:	82fb      	strh	r3, [r7, #22]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 801c092:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c096:	b29a      	uxth	r2, r3
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	7f5b      	ldrb	r3, [r3, #29]
 801c09c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c0a0:	b2db      	uxtb	r3, r3
 801c0a2:	f003 0301 	and.w	r3, r3, #1
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d004      	beq.n	801c0b4 <draw_border+0x162>
 801c0aa:	68bb      	ldr	r3, [r7, #8]
 801c0ac:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c0b0:	b29b      	uxth	r3, r3
 801c0b2:	e009      	b.n	801c0c8 <draw_border+0x176>
 801c0b4:	68bb      	ldr	r3, [r7, #8]
 801c0b6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c0ba:	b299      	uxth	r1, r3
 801c0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0be:	b29b      	uxth	r3, r3
 801c0c0:	440b      	add	r3, r1
 801c0c2:	b29b      	uxth	r3, r3
 801c0c4:	425b      	negs	r3, r3
 801c0c6:	b29b      	uxth	r3, r3
 801c0c8:	1ad3      	subs	r3, r2, r3
 801c0ca:	b29b      	uxth	r3, r3
 801c0cc:	b21b      	sxth	r3, r3
 801c0ce:	837b      	strh	r3, [r7, #26]

    lv_coord_t rin = rout - dsc->border_width;
 801c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0d2:	b29a      	uxth	r2, r3
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c0da:	b29b      	uxth	r3, r3
 801c0dc:	1ad3      	subs	r3, r2, r3
 801c0de:	b29b      	uxth	r3, r3
 801c0e0:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(rin < 0) rin = 0;
 801c0e2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	da01      	bge.n	801c0ee <draw_border+0x19c>
 801c0ea:	2300      	movs	r3, #0
 801c0ec:	857b      	strh	r3, [r7, #42]	; 0x2a

    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 801c0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0f0:	b218      	sxth	r0, r3
 801c0f2:	68bb      	ldr	r3, [r7, #8]
 801c0f4:	7f1b      	ldrb	r3, [r3, #28]
 801c0f6:	68ba      	ldr	r2, [r7, #8]
 801c0f8:	7892      	ldrb	r2, [r2, #2]
 801c0fa:	f107 0114 	add.w	r1, r7, #20
 801c0fe:	9203      	str	r2, [sp, #12]
 801c100:	9302      	str	r3, [sp, #8]
 801c102:	68bb      	ldr	r3, [r7, #8]
 801c104:	7e1b      	ldrb	r3, [r3, #24]
 801c106:	f88d 3004 	strb.w	r3, [sp, #4]
 801c10a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801c10e:	9300      	str	r3, [sp, #0]
 801c110:	4603      	mov	r3, r0
 801c112:	460a      	mov	r2, r1
 801c114:	6879      	ldr	r1, [r7, #4]
 801c116:	68f8      	ldr	r0, [r7, #12]
 801c118:	f001 fe78 	bl	801de0c <draw_border_generic>
 801c11c:	e006      	b.n	801c12c <draw_border+0x1da>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801c11e:	bf00      	nop
 801c120:	e004      	b.n	801c12c <draw_border+0x1da>
    if(dsc->border_width == 0) return;
 801c122:	bf00      	nop
 801c124:	e002      	b.n	801c12c <draw_border+0x1da>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801c126:	bf00      	nop
 801c128:	e000      	b.n	801c12c <draw_border+0x1da>
    if(dsc->border_post) return;
 801c12a:	bf00      	nop

}
 801c12c:	3730      	adds	r7, #48	; 0x30
 801c12e:	46bd      	mov	sp, r7
 801c130:	bd80      	pop	{r7, pc}

0801c132 <draw_shadow>:

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc,
                                              const lv_area_t * coords)
{
 801c132:	b590      	push	{r4, r7, lr}
 801c134:	b0b3      	sub	sp, #204	; 0xcc
 801c136:	af00      	add	r7, sp, #0
 801c138:	60f8      	str	r0, [r7, #12]
 801c13a:	60b9      	str	r1, [r7, #8]
 801c13c:	607a      	str	r2, [r7, #4]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 801c13e:	68bb      	ldr	r3, [r7, #8]
 801c140:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c144:	2b00      	cmp	r3, #0
 801c146:	f001 82ab 	beq.w	801d6a0 <draw_shadow+0x156e>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801c14a:	68bb      	ldr	r3, [r7, #8]
 801c14c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c150:	2b02      	cmp	r3, #2
 801c152:	f241 82a7 	bls.w	801d6a4 <draw_shadow+0x1572>

    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801c156:	68bb      	ldr	r3, [r7, #8]
 801c158:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c15c:	2b01      	cmp	r3, #1
 801c15e:	d10f      	bne.n	801c180 <draw_shadow+0x4e>
 801c160:	68bb      	ldr	r3, [r7, #8]
 801c162:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c166:	2b00      	cmp	r3, #0
 801c168:	dc0a      	bgt.n	801c180 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801c16a:	68bb      	ldr	r3, [r7, #8]
 801c16c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801c170:	2b00      	cmp	r3, #0
 801c172:	d105      	bne.n	801c180 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801c174:	68bb      	ldr	r3, [r7, #8]
 801c176:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	f001 8294 	beq.w	801d6a8 <draw_shadow+0x1576>
        return;
    }

    /*Calculate the rectangle which is blurred to get the shadow in `shadow_area`*/
    lv_area_t core_area;
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c186:	b29a      	uxth	r2, r3
 801c188:	68bb      	ldr	r3, [r7, #8]
 801c18a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801c18e:	b29b      	uxth	r3, r3
 801c190:	4413      	add	r3, r2
 801c192:	b29a      	uxth	r2, r3
 801c194:	68bb      	ldr	r3, [r7, #8]
 801c196:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c19a:	b29b      	uxth	r3, r3
 801c19c:	1ad3      	subs	r3, r2, r3
 801c19e:	b29b      	uxth	r3, r3
 801c1a0:	b21b      	sxth	r3, r3
 801c1a2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c1ac:	b29a      	uxth	r2, r3
 801c1ae:	68bb      	ldr	r3, [r7, #8]
 801c1b0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801c1b4:	b29b      	uxth	r3, r3
 801c1b6:	4413      	add	r3, r2
 801c1b8:	b29a      	uxth	r2, r3
 801c1ba:	68bb      	ldr	r3, [r7, #8]
 801c1bc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c1c0:	b29b      	uxth	r3, r3
 801c1c2:	4413      	add	r3, r2
 801c1c4:	b29b      	uxth	r3, r3
 801c1c6:	b21b      	sxth	r3, r3
 801c1c8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c1d2:	b29a      	uxth	r2, r3
 801c1d4:	68bb      	ldr	r3, [r7, #8]
 801c1d6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c1da:	b29b      	uxth	r3, r3
 801c1dc:	4413      	add	r3, r2
 801c1de:	b29a      	uxth	r2, r3
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c1e6:	b29b      	uxth	r3, r3
 801c1e8:	1ad3      	subs	r3, r2, r3
 801c1ea:	b29b      	uxth	r3, r3
 801c1ec:	b21b      	sxth	r3, r3
 801c1ee:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c1f8:	b29a      	uxth	r2, r3
 801c1fa:	68bb      	ldr	r3, [r7, #8]
 801c1fc:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c200:	b29b      	uxth	r3, r3
 801c202:	4413      	add	r3, r2
 801c204:	b29a      	uxth	r2, r3
 801c206:	68bb      	ldr	r3, [r7, #8]
 801c208:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c20c:	b29b      	uxth	r3, r3
 801c20e:	4413      	add	r3, r2
 801c210:	b29b      	uxth	r3, r3
 801c212:	b21b      	sxth	r3, r3
 801c214:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    /*Calculate the bounding box of the shadow*/
    lv_area_t shadow_area;
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 801c218:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c21c:	b29a      	uxth	r2, r3
 801c21e:	68bb      	ldr	r3, [r7, #8]
 801c220:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c224:	2b00      	cmp	r3, #0
 801c226:	da00      	bge.n	801c22a <draw_shadow+0xf8>
 801c228:	3301      	adds	r3, #1
 801c22a:	105b      	asrs	r3, r3, #1
 801c22c:	b21b      	sxth	r3, r3
 801c22e:	b29b      	uxth	r3, r3
 801c230:	1ad3      	subs	r3, r2, r3
 801c232:	b29b      	uxth	r3, r3
 801c234:	3b01      	subs	r3, #1
 801c236:	b29b      	uxth	r3, r3
 801c238:	b21b      	sxth	r3, r3
 801c23a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 801c23e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801c242:	b29a      	uxth	r2, r3
 801c244:	68bb      	ldr	r3, [r7, #8]
 801c246:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	da00      	bge.n	801c250 <draw_shadow+0x11e>
 801c24e:	3301      	adds	r3, #1
 801c250:	105b      	asrs	r3, r3, #1
 801c252:	b21b      	sxth	r3, r3
 801c254:	b29b      	uxth	r3, r3
 801c256:	4413      	add	r3, r2
 801c258:	b29b      	uxth	r3, r3
 801c25a:	3301      	adds	r3, #1
 801c25c:	b29b      	uxth	r3, r3
 801c25e:	b21b      	sxth	r3, r3
 801c260:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 801c264:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c268:	b29a      	uxth	r2, r3
 801c26a:	68bb      	ldr	r3, [r7, #8]
 801c26c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c270:	2b00      	cmp	r3, #0
 801c272:	da00      	bge.n	801c276 <draw_shadow+0x144>
 801c274:	3301      	adds	r3, #1
 801c276:	105b      	asrs	r3, r3, #1
 801c278:	b21b      	sxth	r3, r3
 801c27a:	b29b      	uxth	r3, r3
 801c27c:	1ad3      	subs	r3, r2, r3
 801c27e:	b29b      	uxth	r3, r3
 801c280:	3b01      	subs	r3, #1
 801c282:	b29b      	uxth	r3, r3
 801c284:	b21b      	sxth	r3, r3
 801c286:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 801c28a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801c28e:	b29a      	uxth	r2, r3
 801c290:	68bb      	ldr	r3, [r7, #8]
 801c292:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c296:	2b00      	cmp	r3, #0
 801c298:	da00      	bge.n	801c29c <draw_shadow+0x16a>
 801c29a:	3301      	adds	r3, #1
 801c29c:	105b      	asrs	r3, r3, #1
 801c29e:	b21b      	sxth	r3, r3
 801c2a0:	b29b      	uxth	r3, r3
 801c2a2:	4413      	add	r3, r2
 801c2a4:	b29b      	uxth	r3, r3
 801c2a6:	3301      	adds	r3, #1
 801c2a8:	b29b      	uxth	r3, r3
 801c2aa:	b21b      	sxth	r3, r3
 801c2ac:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_opa_t opa = dsc->shadow_opa;
 801c2b0:	68bb      	ldr	r3, [r7, #8]
 801c2b2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c2b6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801c2ba:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801c2be:	2bfd      	cmp	r3, #253	; 0xfd
 801c2c0:	d902      	bls.n	801c2c8 <draw_shadow+0x196>
 801c2c2:	23ff      	movs	r3, #255	; 0xff
 801c2c4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `shadow_area`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	689a      	ldr	r2, [r3, #8]
 801c2cc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801c2d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	f004 f9f3 	bl	80206c0 <_lv_area_intersect>
 801c2da:	4603      	mov	r3, r0
 801c2dc:	f083 0301 	eor.w	r3, r3, #1
 801c2e0:	b2db      	uxtb	r3, r3
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	f041 81e2 	bne.w	801d6ac <draw_shadow+0x157a>

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_area;
    lv_area_copy(&bg_area, coords);
 801c2e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c2ec:	6879      	ldr	r1, [r7, #4]
 801c2ee:	4618      	mov	r0, r3
 801c2f0:	f7ff f8f6 	bl	801b4e0 <lv_area_copy>
    lv_area_increase(&bg_area, -1, -1);
 801c2f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c2f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c2fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c300:	4618      	mov	r0, r3
 801c302:	f004 f971 	bl	80205e8 <lv_area_increase>

    /*Get the clamped radius*/
    int32_t r_bg = dsc->radius;
 801c306:	68bb      	ldr	r3, [r7, #8]
 801c308:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c30c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    lv_coord_t short_side = LV_MIN(lv_area_get_width(&bg_area), lv_area_get_height(&bg_area));
 801c310:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c314:	4618      	mov	r0, r3
 801c316:	f7ff f902 	bl	801b51e <lv_area_get_width>
 801c31a:	4603      	mov	r3, r0
 801c31c:	461c      	mov	r4, r3
 801c31e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c322:	4618      	mov	r0, r3
 801c324:	f7ff f912 	bl	801b54c <lv_area_get_height>
 801c328:	4603      	mov	r3, r0
 801c32a:	429c      	cmp	r4, r3
 801c32c:	da06      	bge.n	801c33c <draw_shadow+0x20a>
 801c32e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c332:	4618      	mov	r0, r3
 801c334:	f7ff f8f3 	bl	801b51e <lv_area_get_width>
 801c338:	4603      	mov	r3, r0
 801c33a:	e005      	b.n	801c348 <draw_shadow+0x216>
 801c33c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c340:	4618      	mov	r0, r3
 801c342:	f7ff f903 	bl	801b54c <lv_area_get_height>
 801c346:	4603      	mov	r3, r0
 801c348:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 801c34c:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c350:	105b      	asrs	r3, r3, #1
 801c352:	b21b      	sxth	r3, r3
 801c354:	461a      	mov	r2, r3
 801c356:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c35a:	4293      	cmp	r3, r2
 801c35c:	dd05      	ble.n	801c36a <draw_shadow+0x238>
 801c35e:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c362:	105b      	asrs	r3, r3, #1
 801c364:	b21b      	sxth	r3, r3
 801c366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /*Get the clamped radius*/
    int32_t r_sh = dsc->radius;
 801c36a:	68bb      	ldr	r3, [r7, #8]
 801c36c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    short_side = LV_MIN(lv_area_get_width(&core_area), lv_area_get_height(&core_area));
 801c374:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c378:	4618      	mov	r0, r3
 801c37a:	f7ff f8d0 	bl	801b51e <lv_area_get_width>
 801c37e:	4603      	mov	r3, r0
 801c380:	461c      	mov	r4, r3
 801c382:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c386:	4618      	mov	r0, r3
 801c388:	f7ff f8e0 	bl	801b54c <lv_area_get_height>
 801c38c:	4603      	mov	r3, r0
 801c38e:	429c      	cmp	r4, r3
 801c390:	da06      	bge.n	801c3a0 <draw_shadow+0x26e>
 801c392:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c396:	4618      	mov	r0, r3
 801c398:	f7ff f8c1 	bl	801b51e <lv_area_get_width>
 801c39c:	4603      	mov	r3, r0
 801c39e:	e005      	b.n	801c3ac <draw_shadow+0x27a>
 801c3a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c3a4:	4618      	mov	r0, r3
 801c3a6:	f7ff f8d1 	bl	801b54c <lv_area_get_height>
 801c3aa:	4603      	mov	r3, r0
 801c3ac:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 801c3b0:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c3b4:	105b      	asrs	r3, r3, #1
 801c3b6:	b21b      	sxth	r3, r3
 801c3b8:	461a      	mov	r2, r3
 801c3ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c3be:	4293      	cmp	r3, r2
 801c3c0:	dd05      	ble.n	801c3ce <draw_shadow+0x29c>
 801c3c2:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c3c6:	105b      	asrs	r3, r3, #1
 801c3c8:	b21b      	sxth	r3, r3
 801c3ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


    /*Get how many pixels are affected by the blur on the corners*/
    int32_t corner_size = dsc->shadow_width  + r_sh;
 801c3ce:	68bb      	ldr	r3, [r7, #8]
 801c3d0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c3d4:	461a      	mov	r2, r3
 801c3d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c3da:	4413      	add	r3, r2
 801c3dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 801c3e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c3e4:	fb03 f303 	mul.w	r3, r3, r3
 801c3e8:	005b      	lsls	r3, r3, #1
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f005 fd12 	bl	8021e14 <lv_mem_buf_get>
 801c3f0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 801c3f4:	68bb      	ldr	r3, [r7, #8]
 801c3f6:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 801c3fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c3fe:	b21b      	sxth	r3, r3
 801c400:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801c404:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801c408:	f001 f954 	bl	801d6b4 <shadow_draw_corner_buf>
#endif

    /*Skip a lot of masking if the background will cover the shadow that would be masked out*/
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 801c40c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c410:	4618      	mov	r0, r3
 801c412:	f7f5 fb41 	bl	8011a98 <lv_draw_mask_is_any>
 801c416:	4603      	mov	r3, r0
 801c418:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool simple = true;
 801c41c:	2301      	movs	r3, #1
 801c41e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 801c422:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801c426:	2b00      	cmp	r3, #0
 801c428:	d107      	bne.n	801c43a <draw_shadow+0x308>
 801c42a:	68bb      	ldr	r3, [r7, #8]
 801c42c:	78db      	ldrb	r3, [r3, #3]
 801c42e:	2bff      	cmp	r3, #255	; 0xff
 801c430:	d103      	bne.n	801c43a <draw_shadow+0x308>
 801c432:	68bb      	ldr	r3, [r7, #8]
 801c434:	789b      	ldrb	r3, [r3, #2]
 801c436:	2b00      	cmp	r3, #0
 801c438:	d002      	beq.n	801c440 <draw_shadow+0x30e>
 801c43a:	2300      	movs	r3, #0
 801c43c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

    /*Create a radius mask to clip remove shadow on the bg area*/

    lv_draw_mask_radius_param_t mask_rout_param;
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801c440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c444:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    if(!simple) {
 801c448:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c44c:	f083 0301 	eor.w	r3, r3, #1
 801c450:	b2db      	uxtb	r3, r3
 801c452:	2b00      	cmp	r3, #0
 801c454:	d012      	beq.n	801c47c <draw_shadow+0x34a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 801c456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c45a:	b21a      	sxth	r2, r3
 801c45c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c460:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801c464:	2301      	movs	r3, #1
 801c466:	f7f5 fdb3 	bl	8011fd0 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801c46a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c46e:	2100      	movs	r1, #0
 801c470:	4618      	mov	r0, r3
 801c472:	f7f5 f9e1 	bl	8011838 <lv_draw_mask_add>
 801c476:	4603      	mov	r3, r0
 801c478:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    }
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 801c47c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c480:	4618      	mov	r0, r3
 801c482:	f7ff f84c 	bl	801b51e <lv_area_get_width>
 801c486:	4603      	mov	r3, r0
 801c488:	4618      	mov	r0, r3
 801c48a:	f005 fcc3 	bl	8021e14 <lv_mem_buf_get>
 801c48e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_opa_t * sh_buf_tmp;
    lv_coord_t y;
    bool simple_sub;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801c492:	f107 0314 	add.w	r3, r7, #20
 801c496:	211c      	movs	r1, #28
 801c498:	4618      	mov	r0, r3
 801c49a:	f006 f865 	bl	8022568 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801c49e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c4a2:	617b      	str	r3, [r7, #20]
    blend_dsc.mask_area = &blend_area;
 801c4a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c4a8:	62bb      	str	r3, [r7, #40]	; 0x28
    blend_dsc.mask_buf = mask_buf;
 801c4aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c4ae:	623b      	str	r3, [r7, #32]
    blend_dsc.color = dsc->shadow_color;
 801c4b0:	68bb      	ldr	r3, [r7, #8]
 801c4b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801c4b6:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->shadow_opa;
 801c4b8:	68bb      	ldr	r3, [r7, #8]
 801c4ba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c4be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    blend_dsc.blend_mode = dsc->blend_mode;
 801c4c2:	68bb      	ldr	r3, [r7, #8]
 801c4c4:	789b      	ldrb	r3, [r3, #2]
 801c4c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 801c4ca:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801c4ce:	b29c      	uxth	r4, r3
 801c4d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f7ff f822 	bl	801b51e <lv_area_get_width>
 801c4da:	4603      	mov	r3, r0
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	da00      	bge.n	801c4e2 <draw_shadow+0x3b0>
 801c4e0:	3301      	adds	r3, #1
 801c4e2:	105b      	asrs	r3, r3, #1
 801c4e4:	b21b      	sxth	r3, r3
 801c4e6:	b29b      	uxth	r3, r3
 801c4e8:	4423      	add	r3, r4
 801c4ea:	b29b      	uxth	r3, r3
 801c4ec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 801c4f0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c4f4:	b29c      	uxth	r4, r3
 801c4f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c4fa:	4618      	mov	r0, r3
 801c4fc:	f7ff f826 	bl	801b54c <lv_area_get_height>
 801c500:	4603      	mov	r3, r0
 801c502:	2b00      	cmp	r3, #0
 801c504:	da00      	bge.n	801c508 <draw_shadow+0x3d6>
 801c506:	3301      	adds	r3, #1
 801c508:	105b      	asrs	r3, r3, #1
 801c50a:	b21b      	sxth	r3, r3
 801c50c:	b29b      	uxth	r3, r3
 801c50e:	4423      	add	r3, r4
 801c510:	b29b      	uxth	r3, r3
 801c512:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    /*Draw the corners if they are on the current clip area and not fully covered by the bg*/

    /*Top right corner*/
    blend_area.x2 = shadow_area.x2;
 801c516:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c51a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801c51c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c520:	b29a      	uxth	r2, r3
 801c522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c526:	b29b      	uxth	r3, r3
 801c528:	1ad3      	subs	r3, r2, r3
 801c52a:	b29b      	uxth	r3, r3
 801c52c:	3301      	adds	r3, #1
 801c52e:	b29b      	uxth	r3, r3
 801c530:	b21b      	sxth	r3, r3
 801c532:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y1;
 801c534:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c538:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801c53a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c53e:	b29a      	uxth	r2, r3
 801c540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c544:	b29b      	uxth	r3, r3
 801c546:	4413      	add	r3, r2
 801c548:	b29b      	uxth	r3, r3
 801c54a:	3b01      	subs	r3, #1
 801c54c:	b29b      	uxth	r3, r3
 801c54e:	b21b      	sxth	r3, r3
 801c550:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other top corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801c552:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801c556:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801c55a:	4293      	cmp	r3, r2
 801c55c:	bfb8      	it	lt
 801c55e:	4613      	movlt	r3, r2
 801c560:	b21b      	sxth	r3, r3
 801c562:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801c564:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c568:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801c56c:	4293      	cmp	r3, r2
 801c56e:	bfa8      	it	ge
 801c570:	4613      	movge	r3, r2
 801c572:	b21b      	sxth	r3, r3
 801c574:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	689a      	ldr	r2, [r3, #8]
 801c57a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c57e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c582:	4618      	mov	r0, r3
 801c584:	f004 f89c 	bl	80206c0 <_lv_area_intersect>
 801c588:	4603      	mov	r3, r0
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	f000 80b3 	beq.w	801c6f6 <draw_shadow+0x5c4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801c590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c594:	b21a      	sxth	r2, r3
 801c596:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c59a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c59e:	4618      	mov	r0, r3
 801c5a0:	f004 fa72 	bl	8020a88 <_lv_area_is_in>
 801c5a4:	4603      	mov	r3, r0
 801c5a6:	f083 0301 	eor.w	r3, r3, #1
 801c5aa:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	f000 80a2 	beq.w	801c6f6 <draw_shadow+0x5c4>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801c5b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f7fe ffb1 	bl	801b51e <lv_area_get_width>
 801c5bc:	4603      	mov	r3, r0
 801c5be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        sh_buf_tmp = sh_buf;
 801c5c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c5c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 801c5ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c5ce:	461a      	mov	r2, r3
 801c5d0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c5d4:	1ad3      	subs	r3, r2, r3
 801c5d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801c5da:	fb02 f303 	mul.w	r3, r2, r3
 801c5de:	461a      	mov	r2, r3
 801c5e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c5e4:	4413      	add	r3, r2
 801c5e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801c5ea:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c5ee:	461a      	mov	r2, r3
 801c5f0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c5f4:	4619      	mov	r1, r3
 801c5f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c5fa:	1acb      	subs	r3, r1, r3
 801c5fc:	3301      	adds	r3, #1
 801c5fe:	1ad3      	subs	r3, r2, r3
 801c600:	461a      	mov	r2, r3
 801c602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c606:	4413      	add	r3, r2
 801c608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801c60c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c610:	2b00      	cmp	r3, #0
 801c612:	d010      	beq.n	801c636 <draw_shadow+0x504>
 801c614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c618:	b21a      	sxth	r2, r3
 801c61a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c61e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c622:	4618      	mov	r0, r3
 801c624:	f004 face 	bl	8020bc4 <_lv_area_is_out>
 801c628:	4603      	mov	r3, r0
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d003      	beq.n	801c636 <draw_shadow+0x504>
 801c62e:	2301      	movs	r3, #1
 801c630:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801c634:	e003      	b.n	801c63e <draw_shadow+0x50c>
        else simple_sub = simple;
 801c636:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c63a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        if(w > 0) {
 801c63e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801c642:	2b00      	cmp	r3, #0
 801c644:	dd57      	ble.n	801c6f6 <draw_shadow+0x5c4>
            blend_dsc.mask_buf = mask_buf;
 801c646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c64a:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801c64c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c650:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801c652:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c656:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801c658:	2302      	movs	r3, #2
 801c65a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801c65e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801c660:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c664:	e041      	b.n	801c6ea <draw_shadow+0x5b8>
                blend_area.y1 = y;
 801c666:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c66a:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801c66c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c670:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801c672:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801c676:	f083 0301 	eor.w	r3, r3, #1
 801c67a:	b2db      	uxtb	r3, r3
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d01d      	beq.n	801c6bc <draw_shadow+0x58a>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801c680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c684:	461a      	mov	r2, r3
 801c686:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801c68a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c68e:	f005 fcc5 	bl	802201c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801c692:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801c696:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801c69a:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c69e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c6a2:	f7f5 f8fb 	bl	801189c <lv_draw_mask_apply>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c6ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c6b0:	2b01      	cmp	r3, #1
 801c6b2:	d106      	bne.n	801c6c2 <draw_shadow+0x590>
 801c6b4:	2302      	movs	r3, #2
 801c6b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801c6ba:	e002      	b.n	801c6c2 <draw_shadow+0x590>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801c6bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c6c0:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c6c2:	f107 0314 	add.w	r3, r7, #20
 801c6c6:	4619      	mov	r1, r3
 801c6c8:	68f8      	ldr	r0, [r7, #12]
 801c6ca:	f7fa fcb5 	bl	8017038 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801c6ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c6d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c6d6:	4413      	add	r3, r2
 801c6d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801c6dc:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801c6e0:	b29b      	uxth	r3, r3
 801c6e2:	3301      	adds	r3, #1
 801c6e4:	b29b      	uxth	r3, r3
 801c6e6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c6ea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c6ee:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c6f2:	429a      	cmp	r2, r3
 801c6f4:	ddb7      	ble.n	801c666 <draw_shadow+0x534>
        }
    }

    /*Bottom right corner.
     *Almost the same as top right just read the lines of `sh_buf` from then end*/
    blend_area.x2 = shadow_area.x2;
 801c6f6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c6fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801c6fc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c700:	b29a      	uxth	r2, r3
 801c702:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c706:	b29b      	uxth	r3, r3
 801c708:	1ad3      	subs	r3, r2, r3
 801c70a:	b29b      	uxth	r3, r3
 801c70c:	3301      	adds	r3, #1
 801c70e:	b29b      	uxth	r3, r3
 801c710:	b21b      	sxth	r3, r3
 801c712:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801c714:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801c718:	b29a      	uxth	r2, r3
 801c71a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c71e:	b29b      	uxth	r3, r3
 801c720:	1ad3      	subs	r3, r2, r3
 801c722:	b29b      	uxth	r3, r3
 801c724:	3301      	adds	r3, #1
 801c726:	b29b      	uxth	r3, r3
 801c728:	b21b      	sxth	r3, r3
 801c72a:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801c72c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801c730:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801c732:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801c736:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801c73a:	4293      	cmp	r3, r2
 801c73c:	bfb8      	it	lt
 801c73e:	4613      	movlt	r3, r2
 801c740:	b21b      	sxth	r3, r3
 801c742:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801c744:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801c748:	3301      	adds	r3, #1
 801c74a:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801c74e:	4293      	cmp	r3, r2
 801c750:	bfb8      	it	lt
 801c752:	4613      	movlt	r3, r2
 801c754:	b21b      	sxth	r3, r3
 801c756:	877b      	strh	r3, [r7, #58]	; 0x3a

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	689a      	ldr	r2, [r3, #8]
 801c75c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c764:	4618      	mov	r0, r3
 801c766:	f003 ffab 	bl	80206c0 <_lv_area_intersect>
 801c76a:	4603      	mov	r3, r0
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	f000 80b3 	beq.w	801c8d8 <draw_shadow+0x7a6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801c772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c776:	b21a      	sxth	r2, r3
 801c778:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c77c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c780:	4618      	mov	r0, r3
 801c782:	f004 f981 	bl	8020a88 <_lv_area_is_in>
 801c786:	4603      	mov	r3, r0
 801c788:	f083 0301 	eor.w	r3, r3, #1
 801c78c:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c78e:	2b00      	cmp	r3, #0
 801c790:	f000 80a2 	beq.w	801c8d8 <draw_shadow+0x7a6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801c794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c798:	4618      	mov	r0, r3
 801c79a:	f7fe fec0 	bl	801b51e <lv_area_get_width>
 801c79e:	4603      	mov	r3, r0
 801c7a0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        sh_buf_tmp = sh_buf;
 801c7a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c7a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801c7ac:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c7b0:	461a      	mov	r2, r3
 801c7b2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c7b6:	1ad3      	subs	r3, r2, r3
 801c7b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801c7bc:	fb02 f303 	mul.w	r3, r2, r3
 801c7c0:	461a      	mov	r2, r3
 801c7c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c7c6:	4413      	add	r3, r2
 801c7c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801c7cc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c7d0:	461a      	mov	r2, r3
 801c7d2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c7d6:	4619      	mov	r1, r3
 801c7d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c7dc:	1acb      	subs	r3, r1, r3
 801c7de:	3301      	adds	r3, #1
 801c7e0:	1ad3      	subs	r3, r2, r3
 801c7e2:	461a      	mov	r2, r3
 801c7e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c7e8:	4413      	add	r3, r2
 801c7ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801c7ee:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d010      	beq.n	801c818 <draw_shadow+0x6e6>
 801c7f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c7fa:	b21a      	sxth	r2, r3
 801c7fc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c804:	4618      	mov	r0, r3
 801c806:	f004 f9dd 	bl	8020bc4 <_lv_area_is_out>
 801c80a:	4603      	mov	r3, r0
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d003      	beq.n	801c818 <draw_shadow+0x6e6>
 801c810:	2301      	movs	r3, #1
 801c812:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801c816:	e003      	b.n	801c820 <draw_shadow+0x6ee>
        else simple_sub = simple;
 801c818:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c81c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801c820:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801c824:	2b00      	cmp	r3, #0
 801c826:	dd57      	ble.n	801c8d8 <draw_shadow+0x7a6>
            blend_dsc.mask_buf = mask_buf;
 801c828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c82c:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801c82e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c832:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801c834:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c838:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801c83a:	2302      	movs	r3, #2
 801c83c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801c840:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c842:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c846:	e041      	b.n	801c8cc <draw_shadow+0x79a>
                blend_area.y1 = y;
 801c848:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c84c:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801c84e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c852:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801c854:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801c858:	f083 0301 	eor.w	r3, r3, #1
 801c85c:	b2db      	uxtb	r3, r3
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d01d      	beq.n	801c89e <draw_shadow+0x76c>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801c862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c866:	461a      	mov	r2, r3
 801c868:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801c86c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c870:	f005 fbd4 	bl	802201c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801c874:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801c878:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801c87c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c880:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c884:	f7f5 f80a 	bl	801189c <lv_draw_mask_apply>
 801c888:	4603      	mov	r3, r0
 801c88a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c88e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c892:	2b01      	cmp	r3, #1
 801c894:	d106      	bne.n	801c8a4 <draw_shadow+0x772>
 801c896:	2302      	movs	r3, #2
 801c898:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801c89c:	e002      	b.n	801c8a4 <draw_shadow+0x772>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801c89e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c8a2:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c8a4:	f107 0314 	add.w	r3, r7, #20
 801c8a8:	4619      	mov	r1, r3
 801c8aa:	68f8      	ldr	r0, [r7, #12]
 801c8ac:	f7fa fbc4 	bl	8017038 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801c8b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c8b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c8b8:	4413      	add	r3, r2
 801c8ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801c8be:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801c8c2:	b29b      	uxth	r3, r3
 801c8c4:	3b01      	subs	r3, #1
 801c8c6:	b29b      	uxth	r3, r3
 801c8c8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c8cc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c8d0:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c8d4:	429a      	cmp	r2, r3
 801c8d6:	dab7      	bge.n	801c848 <draw_shadow+0x716>
            }
        }
    }

    /*Top side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801c8d8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801c8dc:	b29a      	uxth	r2, r3
 801c8de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c8e2:	b29b      	uxth	r3, r3
 801c8e4:	4413      	add	r3, r2
 801c8e6:	b29b      	uxth	r3, r3
 801c8e8:	b21b      	sxth	r3, r3
 801c8ea:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801c8ec:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c8f0:	b29a      	uxth	r2, r3
 801c8f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c8f6:	b29b      	uxth	r3, r3
 801c8f8:	1ad3      	subs	r3, r2, r3
 801c8fa:	b29b      	uxth	r3, r3
 801c8fc:	b21b      	sxth	r3, r3
 801c8fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801c900:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c904:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801c906:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c90a:	b29a      	uxth	r2, r3
 801c90c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c910:	b29b      	uxth	r3, r3
 801c912:	4413      	add	r3, r2
 801c914:	b29b      	uxth	r3, r3
 801c916:	3b01      	subs	r3, #1
 801c918:	b29b      	uxth	r3, r3
 801c91a:	b21b      	sxth	r3, r3
 801c91c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801c91e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c922:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801c926:	4293      	cmp	r3, r2
 801c928:	bfa8      	it	ge
 801c92a:	4613      	movge	r3, r2
 801c92c:	b21b      	sxth	r3, r3
 801c92e:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	689a      	ldr	r2, [r3, #8]
 801c934:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c93c:	4618      	mov	r0, r3
 801c93e:	f003 febf 	bl	80206c0 <_lv_area_intersect>
 801c942:	4603      	mov	r3, r0
 801c944:	2b00      	cmp	r3, #0
 801c946:	f000 80c2 	beq.w	801cace <draw_shadow+0x99c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801c94a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c94e:	b21a      	sxth	r2, r3
 801c950:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c954:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c958:	4618      	mov	r0, r3
 801c95a:	f004 f895 	bl	8020a88 <_lv_area_is_in>
 801c95e:	4603      	mov	r3, r0
 801c960:	f083 0301 	eor.w	r3, r3, #1
 801c964:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c966:	2b00      	cmp	r3, #0
 801c968:	f000 80b1 	beq.w	801cace <draw_shadow+0x99c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801c96c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c970:	4618      	mov	r0, r3
 801c972:	f7fe fdd4 	bl	801b51e <lv_area_get_width>
 801c976:	4603      	mov	r3, r0
 801c978:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        sh_buf_tmp = sh_buf;
 801c97c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801c984:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c988:	461a      	mov	r2, r3
 801c98a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801c98e:	1ad3      	subs	r3, r2, r3
 801c990:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801c994:	fb02 f303 	mul.w	r3, r2, r3
 801c998:	461a      	mov	r2, r3
 801c99a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c99e:	4413      	add	r3, r2
 801c9a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801c9a4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d010      	beq.n	801c9ce <draw_shadow+0x89c>
 801c9ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c9b0:	b21a      	sxth	r2, r3
 801c9b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c9b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c9ba:	4618      	mov	r0, r3
 801c9bc:	f004 f902 	bl	8020bc4 <_lv_area_is_out>
 801c9c0:	4603      	mov	r3, r0
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d003      	beq.n	801c9ce <draw_shadow+0x89c>
 801c9c6:	2301      	movs	r3, #1
 801c9c8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801c9cc:	e003      	b.n	801c9d6 <draw_shadow+0x8a4>
        else simple_sub = simple;
 801c9ce:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c9d2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801c9d6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	dd77      	ble.n	801cace <draw_shadow+0x99c>
            if(!simple_sub) {
 801c9de:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801c9e2:	f083 0301 	eor.w	r3, r3, #1
 801c9e6:	b2db      	uxtb	r3, r3
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d003      	beq.n	801c9f4 <draw_shadow+0x8c2>
                blend_dsc.mask_buf = mask_buf;
 801c9ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c9f0:	623b      	str	r3, [r7, #32]
 801c9f2:	e001      	b.n	801c9f8 <draw_shadow+0x8c6>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801c9f4:	2300      	movs	r3, #0
 801c9f6:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801c9f8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c9fc:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801c9fe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ca02:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801ca04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801ca06:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ca0a:	e05a      	b.n	801cac2 <draw_shadow+0x990>
                blend_area.y1 = y;
 801ca0c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ca10:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801ca12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ca16:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801ca18:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ca1c:	f083 0301 	eor.w	r3, r3, #1
 801ca20:	b2db      	uxtb	r3, r3
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d024      	beq.n	801ca70 <draw_shadow+0x93e>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801ca26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801ca30:	4619      	mov	r1, r3
 801ca32:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ca36:	f005 fd09 	bl	802244c <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ca3a:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ca3e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ca42:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ca46:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ca4a:	f7f4 ff27 	bl	801189c <lv_draw_mask_apply>
 801ca4e:	4603      	mov	r3, r0
 801ca50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ca54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ca58:	2b01      	cmp	r3, #1
 801ca5a:	d102      	bne.n	801ca62 <draw_shadow+0x930>
 801ca5c:	2302      	movs	r3, #2
 801ca5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ca62:	f107 0314 	add.w	r3, r7, #20
 801ca66:	4619      	mov	r1, r3
 801ca68:	68f8      	ldr	r0, [r7, #12]
 801ca6a:	f7fa fae5 	bl	8017038 <lv_draw_sw_blend>
 801ca6e:	e01a      	b.n	801caa6 <draw_shadow+0x974>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801ca70:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801ca74:	2bff      	cmp	r3, #255	; 0xff
 801ca76:	d103      	bne.n	801ca80 <draw_shadow+0x94e>
 801ca78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ca7c:	781b      	ldrb	r3, [r3, #0]
 801ca7e:	e00a      	b.n	801ca96 <draw_shadow+0x964>
 801ca80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ca84:	781b      	ldrb	r3, [r3, #0]
 801ca86:	461a      	mov	r2, r3
 801ca88:	68bb      	ldr	r3, [r7, #8]
 801ca8a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ca8e:	fb02 f303 	mul.w	r3, r2, r3
 801ca92:	121b      	asrs	r3, r3, #8
 801ca94:	b2db      	uxtb	r3, r3
 801ca96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ca9a:	f107 0314 	add.w	r3, r7, #20
 801ca9e:	4619      	mov	r1, r3
 801caa0:	68f8      	ldr	r0, [r7, #12]
 801caa2:	f7fa fac9 	bl	8017038 <lv_draw_sw_blend>
                }
                sh_buf_tmp += corner_size;
 801caa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801caaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801caae:	4413      	add	r3, r2
 801cab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801cab4:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cab8:	b29b      	uxth	r3, r3
 801caba:	3301      	adds	r3, #1
 801cabc:	b29b      	uxth	r3, r3
 801cabe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cac2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cac6:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801caca:	429a      	cmp	r2, r3
 801cacc:	dd9e      	ble.n	801ca0c <draw_shadow+0x8da>
            }
        }
    }
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801cace:	68bb      	ldr	r3, [r7, #8]
 801cad0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cad4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Bottom side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801cad8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801cadc:	b29a      	uxth	r2, r3
 801cade:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cae2:	b29b      	uxth	r3, r3
 801cae4:	4413      	add	r3, r2
 801cae6:	b29b      	uxth	r3, r3
 801cae8:	b21b      	sxth	r3, r3
 801caea:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801caec:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801caf0:	b29a      	uxth	r2, r3
 801caf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801caf6:	b29b      	uxth	r3, r3
 801caf8:	1ad3      	subs	r3, r2, r3
 801cafa:	b29b      	uxth	r3, r3
 801cafc:	b21b      	sxth	r3, r3
 801cafe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801cb00:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cb04:	b29a      	uxth	r2, r3
 801cb06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cb0a:	b29b      	uxth	r3, r3
 801cb0c:	1ad3      	subs	r3, r2, r3
 801cb0e:	b29b      	uxth	r3, r3
 801cb10:	3301      	adds	r3, #1
 801cb12:	b29b      	uxth	r3, r3
 801cb14:	b21b      	sxth	r3, r3
 801cb16:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801cb18:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cb1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801cb1e:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801cb22:	3301      	adds	r3, #1
 801cb24:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801cb28:	4293      	cmp	r3, r2
 801cb2a:	bfb8      	it	lt
 801cb2c:	4613      	movlt	r3, r2
 801cb2e:	b21b      	sxth	r3, r3
 801cb30:	877b      	strh	r3, [r7, #58]	; 0x3a


    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	689a      	ldr	r2, [r3, #8]
 801cb36:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801cb3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb3e:	4618      	mov	r0, r3
 801cb40:	f003 fdbe 	bl	80206c0 <_lv_area_intersect>
 801cb44:	4603      	mov	r3, r0
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	f000 80dc 	beq.w	801cd04 <draw_shadow+0xbd2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801cb4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cb50:	b21a      	sxth	r2, r3
 801cb52:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cb56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	f003 ff94 	bl	8020a88 <_lv_area_is_in>
 801cb60:	4603      	mov	r3, r0
 801cb62:	f083 0301 	eor.w	r3, r3, #1
 801cb66:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	f000 80cb 	beq.w	801cd04 <draw_shadow+0xbd2>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801cb6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7fe fcd3 	bl	801b51e <lv_area_get_width>
 801cb78:	4603      	mov	r3, r0
 801cb7a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        sh_buf_tmp = sh_buf;
 801cb7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801cb82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801cb86:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801cb8a:	461a      	mov	r2, r3
 801cb8c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cb90:	1ad3      	subs	r3, r2, r3
 801cb92:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801cb96:	fb02 f303 	mul.w	r3, r2, r3
 801cb9a:	461a      	mov	r2, r3
 801cb9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cba0:	4413      	add	r3, r2
 801cba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        if(w > 0) {
 801cba6:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	f340 80aa 	ble.w	801cd04 <draw_shadow+0xbd2>
            /*Do not mask if out of the bg*/
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801cbb0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d010      	beq.n	801cbda <draw_shadow+0xaa8>
 801cbb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cbbc:	b21a      	sxth	r2, r3
 801cbbe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cbc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cbc6:	4618      	mov	r0, r3
 801cbc8:	f003 fffc 	bl	8020bc4 <_lv_area_is_out>
 801cbcc:	4603      	mov	r3, r0
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d003      	beq.n	801cbda <draw_shadow+0xaa8>
 801cbd2:	2301      	movs	r3, #1
 801cbd4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801cbd8:	e003      	b.n	801cbe2 <draw_shadow+0xab0>
            else simple_sub = simple;
 801cbda:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cbde:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

            if(!simple_sub) {
 801cbe2:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801cbe6:	f083 0301 	eor.w	r3, r3, #1
 801cbea:	b2db      	uxtb	r3, r3
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d003      	beq.n	801cbf8 <draw_shadow+0xac6>
                blend_dsc.mask_buf = mask_buf;
 801cbf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cbf4:	623b      	str	r3, [r7, #32]
 801cbf6:	e001      	b.n	801cbfc <draw_shadow+0xaca>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801cbfc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801cc00:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801cc02:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801cc06:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801cc08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801cc0a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cc0e:	e073      	b.n	801ccf8 <draw_shadow+0xbc6>
                blend_area.y1 = y;
 801cc10:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cc14:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801cc16:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cc1a:	87fb      	strh	r3, [r7, #62]	; 0x3e

                /*Do not mask if out of the bg*/
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801cc1c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d010      	beq.n	801cc46 <draw_shadow+0xb14>
 801cc24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cc28:	b21a      	sxth	r2, r3
 801cc2a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cc2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cc32:	4618      	mov	r0, r3
 801cc34:	f003 ffc6 	bl	8020bc4 <_lv_area_is_out>
 801cc38:	4603      	mov	r3, r0
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d003      	beq.n	801cc46 <draw_shadow+0xb14>
 801cc3e:	2301      	movs	r3, #1
 801cc40:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801cc44:	e003      	b.n	801cc4e <draw_shadow+0xb1c>
                else simple_sub = simple;
 801cc46:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cc4a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

                if(!simple_sub) {
 801cc4e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801cc52:	f083 0301 	eor.w	r3, r3, #1
 801cc56:	b2db      	uxtb	r3, r3
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d024      	beq.n	801cca6 <draw_shadow+0xb74>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801cc5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cc60:	781b      	ldrb	r3, [r3, #0]
 801cc62:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801cc66:	4619      	mov	r1, r3
 801cc68:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cc6c:	f005 fbee 	bl	802244c <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801cc70:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801cc74:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801cc78:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cc7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cc80:	f7f4 fe0c 	bl	801189c <lv_draw_mask_apply>
 801cc84:	4603      	mov	r3, r0
 801cc86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801cc8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cc8e:	2b01      	cmp	r3, #1
 801cc90:	d102      	bne.n	801cc98 <draw_shadow+0xb66>
 801cc92:	2302      	movs	r3, #2
 801cc94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cc98:	f107 0314 	add.w	r3, r7, #20
 801cc9c:	4619      	mov	r1, r3
 801cc9e:	68f8      	ldr	r0, [r7, #12]
 801cca0:	f7fa f9ca 	bl	8017038 <lv_draw_sw_blend>
 801cca4:	e01a      	b.n	801ccdc <draw_shadow+0xbaa>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801cca6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801ccaa:	2bff      	cmp	r3, #255	; 0xff
 801ccac:	d103      	bne.n	801ccb6 <draw_shadow+0xb84>
 801ccae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ccb2:	781b      	ldrb	r3, [r3, #0]
 801ccb4:	e00a      	b.n	801cccc <draw_shadow+0xb9a>
 801ccb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	461a      	mov	r2, r3
 801ccbe:	68bb      	ldr	r3, [r7, #8]
 801ccc0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ccc4:	fb02 f303 	mul.w	r3, r2, r3
 801ccc8:	121b      	asrs	r3, r3, #8
 801ccca:	b2db      	uxtb	r3, r3
 801cccc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ccd0:	f107 0314 	add.w	r3, r7, #20
 801ccd4:	4619      	mov	r1, r3
 801ccd6:	68f8      	ldr	r0, [r7, #12]
 801ccd8:	f7fa f9ae 	bl	8017038 <lv_draw_sw_blend>

                }
                sh_buf_tmp += corner_size;
 801ccdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cce0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cce4:	4413      	add	r3, r2
 801cce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801ccea:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801ccee:	b29b      	uxth	r3, r3
 801ccf0:	3b01      	subs	r3, #1
 801ccf2:	b29b      	uxth	r3, r3
 801ccf4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ccf8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801ccfc:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cd00:	429a      	cmp	r2, r3
 801cd02:	da85      	bge.n	801cc10 <draw_shadow+0xade>
            }
        }
    }

    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801cd04:	68bb      	ldr	r3, [r7, #8]
 801cd06:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cd0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Right side*/
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801cd0e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cd12:	b29a      	uxth	r2, r3
 801cd14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd18:	b29b      	uxth	r3, r3
 801cd1a:	1ad3      	subs	r3, r2, r3
 801cd1c:	b29b      	uxth	r3, r3
 801cd1e:	3301      	adds	r3, #1
 801cd20:	b29b      	uxth	r3, r3
 801cd22:	b21b      	sxth	r3, r3
 801cd24:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2;
 801cd26:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cd2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801cd2c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801cd30:	b29a      	uxth	r2, r3
 801cd32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd36:	b29b      	uxth	r3, r3
 801cd38:	4413      	add	r3, r2
 801cd3a:	b29b      	uxth	r3, r3
 801cd3c:	b21b      	sxth	r3, r3
 801cd3e:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801cd40:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cd44:	b29a      	uxth	r2, r3
 801cd46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd4a:	b29b      	uxth	r3, r3
 801cd4c:	1ad3      	subs	r3, r2, r3
 801cd4e:	b29b      	uxth	r3, r3
 801cd50:	b21b      	sxth	r3, r3
 801cd52:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801cd54:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801cd58:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801cd5c:	429a      	cmp	r2, r3
 801cd5e:	db02      	blt.n	801cd66 <draw_shadow+0xc34>
 801cd60:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801cd64:	e004      	b.n	801cd70 <draw_shadow+0xc3e>
 801cd66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801cd6a:	3301      	adds	r3, #1
 801cd6c:	b29b      	uxth	r3, r3
 801cd6e:	b21b      	sxth	r3, r3
 801cd70:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801cd72:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801cd76:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801cd7a:	4293      	cmp	r3, r2
 801cd7c:	bfb8      	it	lt
 801cd7e:	4613      	movlt	r3, r2
 801cd80:	b21b      	sxth	r3, r3
 801cd82:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801cd84:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801cd88:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801cd8c:	4293      	cmp	r3, r2
 801cd8e:	bfb8      	it	lt
 801cd90:	4613      	movlt	r3, r2
 801cd92:	b21b      	sxth	r3, r3
 801cd94:	873b      	strh	r3, [r7, #56]	; 0x38

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	689a      	ldr	r2, [r3, #8]
 801cd9a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801cd9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cda2:	4618      	mov	r0, r3
 801cda4:	f003 fc8c 	bl	80206c0 <_lv_area_intersect>
 801cda8:	4603      	mov	r3, r0
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	f000 80ac 	beq.w	801cf08 <draw_shadow+0xdd6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801cdb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cdb4:	b21a      	sxth	r2, r3
 801cdb6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cdba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f003 fe62 	bl	8020a88 <_lv_area_is_in>
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	f083 0301 	eor.w	r3, r3, #1
 801cdca:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	f000 809b 	beq.w	801cf08 <draw_shadow+0xdd6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801cdd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	f7fe fba1 	bl	801b51e <lv_area_get_width>
 801cddc:	4603      	mov	r3, r0
 801cdde:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        sh_buf_tmp = sh_buf;
 801cde2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801cde6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801cdea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cdee:	3b01      	subs	r3, #1
 801cdf0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801cdf4:	fb02 f303 	mul.w	r3, r2, r3
 801cdf8:	461a      	mov	r2, r3
 801cdfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cdfe:	4413      	add	r3, r2
 801ce00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801ce04:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ce08:	461a      	mov	r2, r3
 801ce0a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ce0e:	4619      	mov	r1, r3
 801ce10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ce14:	1acb      	subs	r3, r1, r3
 801ce16:	3301      	adds	r3, #1
 801ce18:	1ad3      	subs	r3, r2, r3
 801ce1a:	461a      	mov	r2, r3
 801ce1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ce20:	4413      	add	r3, r2
 801ce22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801ce26:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d010      	beq.n	801ce50 <draw_shadow+0xd1e>
 801ce2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ce32:	b21a      	sxth	r2, r3
 801ce34:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ce38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	f003 fec1 	bl	8020bc4 <_lv_area_is_out>
 801ce42:	4603      	mov	r3, r0
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d003      	beq.n	801ce50 <draw_shadow+0xd1e>
 801ce48:	2301      	movs	r3, #1
 801ce4a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801ce4e:	e003      	b.n	801ce58 <draw_shadow+0xd26>
        else simple_sub = simple;
 801ce50:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ce54:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801ce58:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d002      	beq.n	801ce66 <draw_shadow+0xd34>
 801ce60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ce64:	e001      	b.n	801ce6a <draw_shadow+0xd38>
 801ce66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ce6a:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801ce6c:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	dd49      	ble.n	801cf08 <draw_shadow+0xdd6>
            blend_area.x1 = clip_area_sub.x1;
 801ce74:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ce78:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801ce7a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ce7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801ce80:	2302      	movs	r3, #2
 801ce82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801ce86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801ce88:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ce8c:	e036      	b.n	801cefc <draw_shadow+0xdca>
                blend_area.y1 = y;
 801ce8e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ce92:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801ce94:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ce98:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801ce9a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ce9e:	f083 0301 	eor.w	r3, r3, #1
 801cea2:	b2db      	uxtb	r3, r3
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d01c      	beq.n	801cee2 <draw_shadow+0xdb0>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801cea8:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801ceac:	461a      	mov	r2, r3
 801ceae:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801ceb2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ceb6:	f005 f8b1 	bl	802201c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ceba:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801cebe:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801cec2:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cec6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ceca:	f7f4 fce7 	bl	801189c <lv_draw_mask_apply>
 801cece:	4603      	mov	r3, r0
 801ced0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ced4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ced8:	2b01      	cmp	r3, #1
 801ceda:	d102      	bne.n	801cee2 <draw_shadow+0xdb0>
 801cedc:	2302      	movs	r3, #2
 801cede:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cee2:	f107 0314 	add.w	r3, r7, #20
 801cee6:	4619      	mov	r1, r3
 801cee8:	68f8      	ldr	r0, [r7, #12]
 801ceea:	f7fa f8a5 	bl	8017038 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801ceee:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cef2:	b29b      	uxth	r3, r3
 801cef4:	3301      	adds	r3, #1
 801cef6:	b29b      	uxth	r3, r3
 801cef8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cefc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cf00:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cf04:	429a      	cmp	r2, r3
 801cf06:	ddc2      	ble.n	801ce8e <draw_shadow+0xd5c>
            }
        }
    }

    /*Mirror the shadow corner buffer horizontally*/
    sh_buf_tmp = sh_buf ;
 801cf08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801cf0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801cf10:	2300      	movs	r3, #0
 801cf12:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cf16:	e047      	b.n	801cfa8 <draw_shadow+0xe76>
        int32_t x;
        lv_opa_t * start = sh_buf_tmp;
 801cf18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cf1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 801cf20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cf24:	3b01      	subs	r3, #1
 801cf26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cf2a:	4413      	add	r3, r2
 801cf2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801cf30:	2300      	movs	r3, #0
 801cf32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801cf36:	e01e      	b.n	801cf76 <draw_shadow+0xe44>
            lv_opa_t tmp = *start;
 801cf38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801cf3c:	781b      	ldrb	r3, [r3, #0]
 801cf3e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
            *start = *end;
 801cf42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf46:	781a      	ldrb	r2, [r3, #0]
 801cf48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801cf4c:	701a      	strb	r2, [r3, #0]
            *end = tmp;
 801cf4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf52:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 801cf56:	701a      	strb	r2, [r3, #0]

            start++;
 801cf58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801cf5c:	3301      	adds	r3, #1
 801cf5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            end--;
 801cf62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf66:	3b01      	subs	r3, #1
 801cf68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801cf6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cf70:	3301      	adds	r3, #1
 801cf72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801cf76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	da00      	bge.n	801cf80 <draw_shadow+0xe4e>
 801cf7e:	3301      	adds	r3, #1
 801cf80:	105b      	asrs	r3, r3, #1
 801cf82:	461a      	mov	r2, r3
 801cf84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cf88:	4293      	cmp	r3, r2
 801cf8a:	dbd5      	blt.n	801cf38 <draw_shadow+0xe06>
        }
        sh_buf_tmp += corner_size;
 801cf8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cf90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cf94:	4413      	add	r3, r2
 801cf96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801cf9a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cf9e:	b29b      	uxth	r3, r3
 801cfa0:	3301      	adds	r3, #1
 801cfa2:	b29b      	uxth	r3, r3
 801cfa4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cfa8:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cfac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801cfb0:	429a      	cmp	r2, r3
 801cfb2:	dcb1      	bgt.n	801cf18 <draw_shadow+0xde6>
    }

    /*Left side*/
    blend_area.x1 = shadow_area.x1;
 801cfb4:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801cfb8:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801cfba:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801cfbe:	b29a      	uxth	r2, r3
 801cfc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cfc4:	b29b      	uxth	r3, r3
 801cfc6:	4413      	add	r3, r2
 801cfc8:	b29b      	uxth	r3, r3
 801cfca:	3b01      	subs	r3, #1
 801cfcc:	b29b      	uxth	r3, r3
 801cfce:	b21b      	sxth	r3, r3
 801cfd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801cfd2:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801cfd6:	b29a      	uxth	r2, r3
 801cfd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cfdc:	b29b      	uxth	r3, r3
 801cfde:	4413      	add	r3, r2
 801cfe0:	b29b      	uxth	r3, r3
 801cfe2:	b21b      	sxth	r3, r3
 801cfe4:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801cfe6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cfea:	b29a      	uxth	r2, r3
 801cfec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cff0:	b29b      	uxth	r3, r3
 801cff2:	1ad3      	subs	r3, r2, r3
 801cff4:	b29b      	uxth	r3, r3
 801cff6:	b21b      	sxth	r3, r3
 801cff8:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801cffa:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801cffe:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d002:	429a      	cmp	r2, r3
 801d004:	db02      	blt.n	801d00c <draw_shadow+0xeda>
 801d006:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d00a:	e004      	b.n	801d016 <draw_shadow+0xee4>
 801d00c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801d010:	3301      	adds	r3, #1
 801d012:	b29b      	uxth	r3, r3
 801d014:	b21b      	sxth	r3, r3
 801d016:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801d018:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d01c:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d020:	4293      	cmp	r3, r2
 801d022:	bfb8      	it	lt
 801d024:	4613      	movlt	r3, r2
 801d026:	b21b      	sxth	r3, r3
 801d028:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d02a:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d02e:	3b01      	subs	r3, #1
 801d030:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d034:	4293      	cmp	r3, r2
 801d036:	bfa8      	it	ge
 801d038:	4613      	movge	r3, r2
 801d03a:	b21b      	sxth	r3, r3
 801d03c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	689a      	ldr	r2, [r3, #8]
 801d042:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d04a:	4618      	mov	r0, r3
 801d04c:	f003 fb38 	bl	80206c0 <_lv_area_intersect>
 801d050:	4603      	mov	r3, r0
 801d052:	2b00      	cmp	r3, #0
 801d054:	f000 80a7 	beq.w	801d1a6 <draw_shadow+0x1074>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d05c:	b21a      	sxth	r2, r3
 801d05e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d066:	4618      	mov	r0, r3
 801d068:	f003 fd0e 	bl	8020a88 <_lv_area_is_in>
 801d06c:	4603      	mov	r3, r0
 801d06e:	f083 0301 	eor.w	r3, r3, #1
 801d072:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d074:	2b00      	cmp	r3, #0
 801d076:	f000 8096 	beq.w	801d1a6 <draw_shadow+0x1074>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d07a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d07e:	4618      	mov	r0, r3
 801d080:	f7fe fa4d 	bl	801b51e <lv_area_get_width>
 801d084:	4603      	mov	r3, r0
 801d086:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        sh_buf_tmp = sh_buf;
 801d08a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d08e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801d092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d096:	3b01      	subs	r3, #1
 801d098:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d09c:	fb02 f303 	mul.w	r3, r2, r3
 801d0a0:	461a      	mov	r2, r3
 801d0a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d0a6:	4413      	add	r3, r2
 801d0a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d0ac:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d0b0:	461a      	mov	r2, r3
 801d0b2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d0b6:	1ad3      	subs	r3, r2, r3
 801d0b8:	461a      	mov	r2, r3
 801d0ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d0be:	4413      	add	r3, r2
 801d0c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d0c4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d010      	beq.n	801d0ee <draw_shadow+0xfbc>
 801d0cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d0d0:	b21a      	sxth	r2, r3
 801d0d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d0d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f003 fd72 	bl	8020bc4 <_lv_area_is_out>
 801d0e0:	4603      	mov	r3, r0
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d003      	beq.n	801d0ee <draw_shadow+0xfbc>
 801d0e6:	2301      	movs	r3, #1
 801d0e8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d0ec:	e003      	b.n	801d0f6 <draw_shadow+0xfc4>
        else simple_sub = simple;
 801d0ee:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d0f2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801d0f6:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d002      	beq.n	801d104 <draw_shadow+0xfd2>
 801d0fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d102:	e001      	b.n	801d108 <draw_shadow+0xfd6>
 801d104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d108:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801d10a:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d10e:	2b00      	cmp	r3, #0
 801d110:	dd49      	ble.n	801d1a6 <draw_shadow+0x1074>
            blend_area.x1 = clip_area_sub.x1;
 801d112:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d116:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d118:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d11c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d11e:	2302      	movs	r3, #2
 801d120:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d124:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d126:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d12a:	e036      	b.n	801d19a <draw_shadow+0x1068>
                blend_area.y1 = y;
 801d12c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d130:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d132:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d136:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d138:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d13c:	f083 0301 	eor.w	r3, r3, #1
 801d140:	b2db      	uxtb	r3, r3
 801d142:	2b00      	cmp	r3, #0
 801d144:	d01c      	beq.n	801d180 <draw_shadow+0x104e>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801d146:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d14a:	461a      	mov	r2, r3
 801d14c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d150:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d154:	f004 ff62 	bl	802201c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d158:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d15c:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d160:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d164:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d168:	f7f4 fb98 	bl	801189c <lv_draw_mask_apply>
 801d16c:	4603      	mov	r3, r0
 801d16e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d176:	2b01      	cmp	r3, #1
 801d178:	d102      	bne.n	801d180 <draw_shadow+0x104e>
 801d17a:	2302      	movs	r3, #2
 801d17c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d180:	f107 0314 	add.w	r3, r7, #20
 801d184:	4619      	mov	r1, r3
 801d186:	68f8      	ldr	r0, [r7, #12]
 801d188:	f7f9 ff56 	bl	8017038 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d18c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d190:	b29b      	uxth	r3, r3
 801d192:	3301      	adds	r3, #1
 801d194:	b29b      	uxth	r3, r3
 801d196:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d19a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d19e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d1a2:	429a      	cmp	r2, r3
 801d1a4:	ddc2      	ble.n	801d12c <draw_shadow+0xffa>
            }
        }
    }

    /*Top left corner*/
    blend_area.x1 = shadow_area.x1;
 801d1a6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d1aa:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801d1ac:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d1b0:	b29a      	uxth	r2, r3
 801d1b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d1b6:	b29b      	uxth	r3, r3
 801d1b8:	4413      	add	r3, r2
 801d1ba:	b29b      	uxth	r3, r3
 801d1bc:	3b01      	subs	r3, #1
 801d1be:	b29b      	uxth	r3, r3
 801d1c0:	b21b      	sxth	r3, r3
 801d1c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801d1c4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d1c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801d1ca:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d1ce:	b29a      	uxth	r2, r3
 801d1d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d1d4:	b29b      	uxth	r3, r3
 801d1d6:	4413      	add	r3, r2
 801d1d8:	b29b      	uxth	r3, r3
 801d1da:	3b01      	subs	r3, #1
 801d1dc:	b29b      	uxth	r3, r3
 801d1de:	b21b      	sxth	r3, r3
 801d1e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d1e2:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d1e6:	3b01      	subs	r3, #1
 801d1e8:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d1ec:	4293      	cmp	r3, r2
 801d1ee:	bfa8      	it	ge
 801d1f0:	4613      	movge	r3, r2
 801d1f2:	b21b      	sxth	r3, r3
 801d1f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801d1f6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d1fa:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d1fe:	4293      	cmp	r3, r2
 801d200:	bfa8      	it	ge
 801d202:	4613      	movge	r3, r2
 801d204:	b21b      	sxth	r3, r3
 801d206:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	689a      	ldr	r2, [r3, #8]
 801d20c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d214:	4618      	mov	r0, r3
 801d216:	f003 fa53 	bl	80206c0 <_lv_area_intersect>
 801d21a:	4603      	mov	r3, r0
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	f000 80ae 	beq.w	801d37e <draw_shadow+0x124c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d226:	b21a      	sxth	r2, r3
 801d228:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d22c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d230:	4618      	mov	r0, r3
 801d232:	f003 fc29 	bl	8020a88 <_lv_area_is_in>
 801d236:	4603      	mov	r3, r0
 801d238:	f083 0301 	eor.w	r3, r3, #1
 801d23c:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d23e:	2b00      	cmp	r3, #0
 801d240:	f000 809d 	beq.w	801d37e <draw_shadow+0x124c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d248:	4618      	mov	r0, r3
 801d24a:	f7fe f968 	bl	801b51e <lv_area_get_width>
 801d24e:	4603      	mov	r3, r0
 801d250:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        sh_buf_tmp = sh_buf;
 801d254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801d25c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d260:	461a      	mov	r2, r3
 801d262:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d266:	1ad3      	subs	r3, r2, r3
 801d268:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d26c:	fb02 f303 	mul.w	r3, r2, r3
 801d270:	461a      	mov	r2, r3
 801d272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d276:	4413      	add	r3, r2
 801d278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d27c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d280:	461a      	mov	r2, r3
 801d282:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d286:	1ad3      	subs	r3, r2, r3
 801d288:	461a      	mov	r2, r3
 801d28a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d28e:	4413      	add	r3, r2
 801d290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d294:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d010      	beq.n	801d2be <draw_shadow+0x118c>
 801d29c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d2a0:	b21a      	sxth	r2, r3
 801d2a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d2a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2aa:	4618      	mov	r0, r3
 801d2ac:	f003 fc8a 	bl	8020bc4 <_lv_area_is_out>
 801d2b0:	4603      	mov	r3, r0
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d003      	beq.n	801d2be <draw_shadow+0x118c>
 801d2b6:	2301      	movs	r3, #1
 801d2b8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d2bc:	e003      	b.n	801d2c6 <draw_shadow+0x1194>
        else simple_sub = simple;
 801d2be:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d2c2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801d2c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d2ca:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801d2cc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	dd54      	ble.n	801d37e <draw_shadow+0x124c>
            blend_area.x1 = clip_area_sub.x1;
 801d2d4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d2d8:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d2da:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d2de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d2e0:	2302      	movs	r3, #2
 801d2e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d2e6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d2e8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d2ec:	e041      	b.n	801d372 <draw_shadow+0x1240>
                blend_area.y1 = y;
 801d2ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d2f2:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d2f4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d2f8:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d2fa:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d2fe:	f083 0301 	eor.w	r3, r3, #1
 801d302:	b2db      	uxtb	r3, r3
 801d304:	2b00      	cmp	r3, #0
 801d306:	d01d      	beq.n	801d344 <draw_shadow+0x1212>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801d308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d30c:	461a      	mov	r2, r3
 801d30e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d312:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d316:	f004 fe81 	bl	802201c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d31a:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d31e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d322:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d326:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d32a:	f7f4 fab7 	bl	801189c <lv_draw_mask_apply>
 801d32e:	4603      	mov	r3, r0
 801d330:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d334:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d338:	2b01      	cmp	r3, #1
 801d33a:	d106      	bne.n	801d34a <draw_shadow+0x1218>
 801d33c:	2302      	movs	r3, #2
 801d33e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801d342:	e002      	b.n	801d34a <draw_shadow+0x1218>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801d344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d348:	623b      	str	r3, [r7, #32]
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d34a:	f107 0314 	add.w	r3, r7, #20
 801d34e:	4619      	mov	r1, r3
 801d350:	68f8      	ldr	r0, [r7, #12]
 801d352:	f7f9 fe71 	bl	8017038 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801d356:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d35a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d35e:	4413      	add	r3, r2
 801d360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d364:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d368:	b29b      	uxth	r3, r3
 801d36a:	3301      	adds	r3, #1
 801d36c:	b29b      	uxth	r3, r3
 801d36e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d372:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d376:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d37a:	429a      	cmp	r2, r3
 801d37c:	ddb7      	ble.n	801d2ee <draw_shadow+0x11bc>
        }
    }

    /*Bottom left corner.
     *Almost the same as bottom right just read the lines of `sh_buf` from then end*/
    blend_area.x1 = shadow_area.x1 ;
 801d37e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d382:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801d384:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d388:	b29a      	uxth	r2, r3
 801d38a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d38e:	b29b      	uxth	r3, r3
 801d390:	4413      	add	r3, r2
 801d392:	b29b      	uxth	r3, r3
 801d394:	3b01      	subs	r3, #1
 801d396:	b29b      	uxth	r3, r3
 801d398:	b21b      	sxth	r3, r3
 801d39a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801d39c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d3a0:	b29a      	uxth	r2, r3
 801d3a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d3a6:	b29b      	uxth	r3, r3
 801d3a8:	1ad3      	subs	r3, r2, r3
 801d3aa:	b29b      	uxth	r3, r3
 801d3ac:	3301      	adds	r3, #1
 801d3ae:	b29b      	uxth	r3, r3
 801d3b0:	b21b      	sxth	r3, r3
 801d3b2:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801d3b4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d3b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801d3ba:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801d3be:	3301      	adds	r3, #1
 801d3c0:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801d3c4:	4293      	cmp	r3, r2
 801d3c6:	bfb8      	it	lt
 801d3c8:	4613      	movlt	r3, r2
 801d3ca:	b21b      	sxth	r3, r3
 801d3cc:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d3ce:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d3d2:	3b01      	subs	r3, #1
 801d3d4:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d3d8:	4293      	cmp	r3, r2
 801d3da:	bfa8      	it	ge
 801d3dc:	4613      	movge	r3, r2
 801d3de:	b21b      	sxth	r3, r3
 801d3e0:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	689a      	ldr	r2, [r3, #8]
 801d3e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d3ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	f003 f966 	bl	80206c0 <_lv_area_intersect>
 801d3f4:	4603      	mov	r3, r0
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	f000 80ae 	beq.w	801d558 <draw_shadow+0x1426>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d3fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d400:	b21a      	sxth	r2, r3
 801d402:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d40a:	4618      	mov	r0, r3
 801d40c:	f003 fb3c 	bl	8020a88 <_lv_area_is_in>
 801d410:	4603      	mov	r3, r0
 801d412:	f083 0301 	eor.w	r3, r3, #1
 801d416:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d418:	2b00      	cmp	r3, #0
 801d41a:	f000 809d 	beq.w	801d558 <draw_shadow+0x1426>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d41e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d422:	4618      	mov	r0, r3
 801d424:	f7fe f87b 	bl	801b51e <lv_area_get_width>
 801d428:	4603      	mov	r3, r0
 801d42a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        sh_buf_tmp = sh_buf;
 801d42e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801d436:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d43a:	461a      	mov	r2, r3
 801d43c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d440:	1ad3      	subs	r3, r2, r3
 801d442:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d446:	fb02 f303 	mul.w	r3, r2, r3
 801d44a:	461a      	mov	r2, r3
 801d44c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d450:	4413      	add	r3, r2
 801d452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d456:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d45a:	461a      	mov	r2, r3
 801d45c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d460:	1ad3      	subs	r3, r2, r3
 801d462:	461a      	mov	r2, r3
 801d464:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d468:	4413      	add	r3, r2
 801d46a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d46e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d472:	2b00      	cmp	r3, #0
 801d474:	d010      	beq.n	801d498 <draw_shadow+0x1366>
 801d476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d47a:	b21a      	sxth	r2, r3
 801d47c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d484:	4618      	mov	r0, r3
 801d486:	f003 fb9d 	bl	8020bc4 <_lv_area_is_out>
 801d48a:	4603      	mov	r3, r0
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d003      	beq.n	801d498 <draw_shadow+0x1366>
 801d490:	2301      	movs	r3, #1
 801d492:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d496:	e003      	b.n	801d4a0 <draw_shadow+0x136e>
        else simple_sub = simple;
 801d498:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d49c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801d4a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d4a4:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801d4a6:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	dd54      	ble.n	801d558 <draw_shadow+0x1426>
            blend_area.x1 = clip_area_sub.x1;
 801d4ae:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d4b2:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d4b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d4b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d4ba:	2302      	movs	r3, #2
 801d4bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801d4c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d4c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d4c6:	e041      	b.n	801d54c <draw_shadow+0x141a>
                blend_area.y1 = y;
 801d4c8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d4cc:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d4ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d4d2:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d4d4:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d4d8:	f083 0301 	eor.w	r3, r3, #1
 801d4dc:	b2db      	uxtb	r3, r3
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d01d      	beq.n	801d51e <draw_shadow+0x13ec>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801d4e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d4e6:	461a      	mov	r2, r3
 801d4e8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d4ec:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d4f0:	f004 fd94 	bl	802201c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d4f4:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d4f8:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801d4fc:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d500:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d504:	f7f4 f9ca 	bl	801189c <lv_draw_mask_apply>
 801d508:	4603      	mov	r3, r0
 801d50a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d50e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d512:	2b01      	cmp	r3, #1
 801d514:	d106      	bne.n	801d524 <draw_shadow+0x13f2>
 801d516:	2302      	movs	r3, #2
 801d518:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801d51c:	e002      	b.n	801d524 <draw_shadow+0x13f2>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801d51e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d522:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d524:	f107 0314 	add.w	r3, r7, #20
 801d528:	4619      	mov	r1, r3
 801d52a:	68f8      	ldr	r0, [r7, #12]
 801d52c:	f7f9 fd84 	bl	8017038 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801d530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d534:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d538:	4413      	add	r3, r2
 801d53a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801d53e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d542:	b29b      	uxth	r3, r3
 801d544:	3b01      	subs	r3, #1
 801d546:	b29b      	uxth	r3, r3
 801d548:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d54c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d550:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d554:	429a      	cmp	r2, r3
 801d556:	dab7      	bge.n	801d4c8 <draw_shadow+0x1396>
            }
        }
    }

    /*Draw the center rectangle.*/
    blend_area.x1 = shadow_area.x1 + corner_size ;
 801d558:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d55c:	b29a      	uxth	r2, r3
 801d55e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d562:	b29b      	uxth	r3, r3
 801d564:	4413      	add	r3, r2
 801d566:	b29b      	uxth	r3, r3
 801d568:	b21b      	sxth	r3, r3
 801d56a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801d56c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801d570:	b29a      	uxth	r2, r3
 801d572:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d576:	b29b      	uxth	r3, r3
 801d578:	1ad3      	subs	r3, r2, r3
 801d57a:	b29b      	uxth	r3, r3
 801d57c:	b21b      	sxth	r3, r3
 801d57e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801d580:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d584:	b29a      	uxth	r2, r3
 801d586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d58a:	b29b      	uxth	r3, r3
 801d58c:	4413      	add	r3, r2
 801d58e:	b29b      	uxth	r3, r3
 801d590:	b21b      	sxth	r3, r3
 801d592:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801d594:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d598:	b29a      	uxth	r2, r3
 801d59a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d59e:	b29b      	uxth	r3, r3
 801d5a0:	1ad3      	subs	r3, r2, r3
 801d5a2:	b29b      	uxth	r3, r3
 801d5a4:	b21b      	sxth	r3, r3
 801d5a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_dsc.mask_buf = mask_buf;
 801d5a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d5ac:	623b      	str	r3, [r7, #32]

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	689a      	ldr	r2, [r3, #8]
 801d5b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d5b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d5ba:	4618      	mov	r0, r3
 801d5bc:	f003 f880 	bl	80206c0 <_lv_area_intersect>
 801d5c0:	4603      	mov	r3, r0
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d052      	beq.n	801d66c <draw_shadow+0x153a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d5c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d5ca:	b21a      	sxth	r2, r3
 801d5cc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d5d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	f003 fa57 	bl	8020a88 <_lv_area_is_in>
 801d5da:	4603      	mov	r3, r0
 801d5dc:	f083 0301 	eor.w	r3, r3, #1
 801d5e0:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d042      	beq.n	801d66c <draw_shadow+0x153a>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d5e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	f7fd ff97 	bl	801b51e <lv_area_get_width>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        if(w > 0) {
 801d5f6:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	dd36      	ble.n	801d66c <draw_shadow+0x153a>
            blend_area.x1 = clip_area_sub.x1;
 801d5fe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d602:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d604:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d608:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d60a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d60c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d610:	e026      	b.n	801d660 <draw_shadow+0x152e>
                blend_area.y1 = y;
 801d612:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d616:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d618:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d61c:	87fb      	strh	r3, [r7, #62]	; 0x3e

                lv_memset_ff(mask_buf, w);
 801d61e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d622:	4619      	mov	r1, r3
 801d624:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d628:	f005 f81f 	bl	802266a <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d62c:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d630:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d634:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d638:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d63c:	f7f4 f92e 	bl	801189c <lv_draw_mask_apply>
 801d640:	4603      	mov	r3, r0
 801d642:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d646:	f107 0314 	add.w	r3, r7, #20
 801d64a:	4619      	mov	r1, r3
 801d64c:	68f8      	ldr	r0, [r7, #12]
 801d64e:	f7f9 fcf3 	bl	8017038 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d652:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d656:	b29b      	uxth	r3, r3
 801d658:	3301      	adds	r3, #1
 801d65a:	b29b      	uxth	r3, r3
 801d65c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d660:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d664:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d668:	429a      	cmp	r2, r3
 801d66a:	ddd2      	ble.n	801d612 <draw_shadow+0x14e0>
            }
        }
    }

    if(!simple) {
 801d66c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d670:	f083 0301 	eor.w	r3, r3, #1
 801d674:	b2db      	uxtb	r3, r3
 801d676:	2b00      	cmp	r3, #0
 801d678:	d009      	beq.n	801d68e <draw_shadow+0x155c>
        lv_draw_mask_free_param(&mask_rout_param);
 801d67a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d67e:	4618      	mov	r0, r3
 801d680:	f7f4 f9a0 	bl	80119c4 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 801d684:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 801d688:	4618      	mov	r0, r3
 801d68a:	f7f4 f94b 	bl	8011924 <lv_draw_mask_remove_id>
    }
    lv_mem_buf_release(sh_buf);
 801d68e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801d692:	f004 fc6b 	bl	8021f6c <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 801d696:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d69a:	f004 fc67 	bl	8021f6c <lv_mem_buf_release>
 801d69e:	e006      	b.n	801d6ae <draw_shadow+0x157c>
    if(dsc->shadow_width == 0) return;
 801d6a0:	bf00      	nop
 801d6a2:	e004      	b.n	801d6ae <draw_shadow+0x157c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801d6a4:	bf00      	nop
 801d6a6:	e002      	b.n	801d6ae <draw_shadow+0x157c>
        return;
 801d6a8:	bf00      	nop
 801d6aa:	e000      	b.n	801d6ae <draw_shadow+0x157c>
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801d6ac:	bf00      	nop
}
 801d6ae:	37cc      	adds	r7, #204	; 0xcc
 801d6b0:	46bd      	mov	sp, r7
 801d6b2:	bd90      	pop	{r4, r7, pc}

0801d6b4 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 801d6b4:	b590      	push	{r4, r7, lr}
 801d6b6:	b09d      	sub	sp, #116	; 0x74
 801d6b8:	af02      	add	r7, sp, #8
 801d6ba:	60f8      	str	r0, [r7, #12]
 801d6bc:	60b9      	str	r1, [r7, #8]
 801d6be:	4611      	mov	r1, r2
 801d6c0:	461a      	mov	r2, r3
 801d6c2:	460b      	mov	r3, r1
 801d6c4:	80fb      	strh	r3, [r7, #6]
 801d6c6:	4613      	mov	r3, r2
 801d6c8:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 801d6ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 801d6d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d6d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d6d6:	4413      	add	r3, r2
 801d6d8:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 801d6da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d6de:	68f9      	ldr	r1, [r7, #12]
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f7fd fefd 	bl	801b4e0 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 801d6e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	da00      	bge.n	801d6f0 <shadow_draw_corner_buf+0x3c>
 801d6ee:	3301      	adds	r3, #1
 801d6f0:	105b      	asrs	r3, r3, #1
 801d6f2:	b21b      	sxth	r3, r3
 801d6f4:	b29a      	uxth	r2, r3
 801d6f6:	88bb      	ldrh	r3, [r7, #4]
 801d6f8:	4413      	add	r3, r2
 801d6fa:	b29a      	uxth	r2, r3
 801d6fc:	88fb      	ldrh	r3, [r7, #6]
 801d6fe:	f003 0301 	and.w	r3, r3, #1
 801d702:	2b00      	cmp	r3, #0
 801d704:	bf0c      	ite	eq
 801d706:	2301      	moveq	r3, #1
 801d708:	2300      	movne	r3, #0
 801d70a:	b2db      	uxtb	r3, r3
 801d70c:	b29b      	uxth	r3, r3
 801d70e:	1ad3      	subs	r3, r2, r3
 801d710:	b29b      	uxth	r3, r3
 801d712:	3b01      	subs	r3, #1
 801d714:	b29b      	uxth	r3, r3
 801d716:	b21b      	sxth	r3, r3
 801d718:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y1 = sw / 2 + 1;
 801d71a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d71e:	2b00      	cmp	r3, #0
 801d720:	da00      	bge.n	801d724 <shadow_draw_corner_buf+0x70>
 801d722:	3301      	adds	r3, #1
 801d724:	105b      	asrs	r3, r3, #1
 801d726:	b21b      	sxth	r3, r3
 801d728:	b29b      	uxth	r3, r3
 801d72a:	3301      	adds	r3, #1
 801d72c:	b29b      	uxth	r3, r3
 801d72e:	b21b      	sxth	r3, r3
 801d730:	85fb      	strh	r3, [r7, #46]	; 0x2e

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 801d732:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d736:	b29c      	uxth	r4, r3
 801d738:	68f8      	ldr	r0, [r7, #12]
 801d73a:	f7fd fef0 	bl	801b51e <lv_area_get_width>
 801d73e:	4603      	mov	r3, r0
 801d740:	b29b      	uxth	r3, r3
 801d742:	1ae3      	subs	r3, r4, r3
 801d744:	b29b      	uxth	r3, r3
 801d746:	b21b      	sxth	r3, r3
 801d748:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 801d74a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d74e:	b29c      	uxth	r4, r3
 801d750:	68f8      	ldr	r0, [r7, #12]
 801d752:	f7fd fefb 	bl	801b54c <lv_area_get_height>
 801d756:	4603      	mov	r3, r0
 801d758:	b29b      	uxth	r3, r3
 801d75a:	4423      	add	r3, r4
 801d75c:	b29b      	uxth	r3, r3
 801d75e:	b21b      	sxth	r3, r3
 801d760:	867b      	strh	r3, [r7, #50]	; 0x32

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 801d762:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801d766:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801d76a:	f107 0014 	add.w	r0, r7, #20
 801d76e:	2300      	movs	r3, #0
 801d770:	f7f4 fc2e 	bl	8011fd0 <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 801d774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d776:	2b01      	cmp	r3, #1
 801d778:	d102      	bne.n	801d780 <shadow_draw_corner_buf+0xcc>
 801d77a:	2301      	movs	r3, #1
 801d77c:	80fb      	strh	r3, [r7, #6]
 801d77e:	e002      	b.n	801d786 <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 801d780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d782:	105b      	asrs	r3, r3, #1
 801d784:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 801d786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d788:	4618      	mov	r0, r3
 801d78a:	f004 fb43 	bl	8021e14 <lv_mem_buf_get>
 801d78e:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 801d790:	68bb      	ldr	r3, [r7, #8]
 801d792:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801d794:	2300      	movs	r3, #0
 801d796:	667b      	str	r3, [r7, #100]	; 0x64
 801d798:	e062      	b.n	801d860 <shadow_draw_corner_buf+0x1ac>
        lv_memset_ff(mask_line, size);
 801d79a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d79c:	4619      	mov	r1, r3
 801d79e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d7a0:	f004 ff63 	bl	802266a <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 801d7a4:	697c      	ldr	r4, [r7, #20]
 801d7a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d7a8:	b21a      	sxth	r2, r3
 801d7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d7ac:	b219      	sxth	r1, r3
 801d7ae:	f107 0314 	add.w	r3, r7, #20
 801d7b2:	9300      	str	r3, [sp, #0]
 801d7b4:	460b      	mov	r3, r1
 801d7b6:	2100      	movs	r1, #0
 801d7b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d7ba:	47a0      	blx	r4
 801d7bc:	4603      	mov	r3, r0
 801d7be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801d7c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d106      	bne.n	801d7d8 <shadow_draw_corner_buf+0x124>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 801d7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d7cc:	005b      	lsls	r3, r3, #1
 801d7ce:	4619      	mov	r1, r3
 801d7d0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d7d2:	f004 fec9 	bl	8022568 <lv_memset_00>
 801d7d6:	e03b      	b.n	801d850 <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 801d7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d7da:	781b      	ldrb	r3, [r3, #0]
 801d7dc:	019a      	lsls	r2, r3, #6
 801d7de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d7e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7e6:	b29a      	uxth	r2, r3
 801d7e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d7ea:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801d7ec:	2301      	movs	r3, #1
 801d7ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d7f0:	e02a      	b.n	801d848 <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 801d7f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d7f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d7f6:	4413      	add	r3, r2
 801d7f8:	781a      	ldrb	r2, [r3, #0]
 801d7fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d7fc:	3b01      	subs	r3, #1
 801d7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d800:	440b      	add	r3, r1
 801d802:	781b      	ldrb	r3, [r3, #0]
 801d804:	429a      	cmp	r2, r3
 801d806:	d10d      	bne.n	801d824 <shadow_draw_corner_buf+0x170>
 801d808:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d80a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801d80e:	4413      	add	r3, r2
 801d810:	005b      	lsls	r3, r3, #1
 801d812:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d814:	441a      	add	r2, r3
 801d816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d818:	005b      	lsls	r3, r3, #1
 801d81a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d81c:	440b      	add	r3, r1
 801d81e:	8812      	ldrh	r2, [r2, #0]
 801d820:	801a      	strh	r2, [r3, #0]
 801d822:	e00e      	b.n	801d842 <shadow_draw_corner_buf+0x18e>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801d824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d828:	4413      	add	r3, r2
 801d82a:	781b      	ldrb	r3, [r3, #0]
 801d82c:	019a      	lsls	r2, r3, #6
 801d82e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d832:	fb92 f1f3 	sdiv	r1, r2, r3
 801d836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d838:	005b      	lsls	r3, r3, #1
 801d83a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d83c:	4413      	add	r3, r2
 801d83e:	b28a      	uxth	r2, r1
 801d840:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801d842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d844:	3301      	adds	r3, #1
 801d846:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d84c:	429a      	cmp	r2, r3
 801d84e:	dbd0      	blt.n	801d7f2 <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 801d850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d852:	005b      	lsls	r3, r3, #1
 801d854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d856:	4413      	add	r3, r2
 801d858:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801d85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d85c:	3301      	adds	r3, #1
 801d85e:	667b      	str	r3, [r7, #100]	; 0x64
 801d860:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d864:	429a      	cmp	r2, r3
 801d866:	db98      	blt.n	801d79a <shadow_draw_corner_buf+0xe6>
    }
    lv_mem_buf_release(mask_line);
 801d868:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d86a:	f004 fb7f 	bl	8021f6c <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_param);
 801d86e:	f107 0314 	add.w	r3, r7, #20
 801d872:	4618      	mov	r0, r3
 801d874:	f7f4 f8a6 	bl	80119c4 <lv_draw_mask_free_param>

    if(sw == 1) {
 801d878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d87c:	2b01      	cmp	r3, #1
 801d87e:	d11a      	bne.n	801d8b6 <shadow_draw_corner_buf+0x202>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801d880:	68bb      	ldr	r3, [r7, #8]
 801d882:	63bb      	str	r3, [r7, #56]	; 0x38
        for(i = 0; i < size * size; i++) {
 801d884:	2300      	movs	r3, #0
 801d886:	65bb      	str	r3, [r7, #88]	; 0x58
 801d888:	e00e      	b.n	801d8a8 <shadow_draw_corner_buf+0x1f4>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 801d88a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d88c:	005b      	lsls	r3, r3, #1
 801d88e:	68ba      	ldr	r2, [r7, #8]
 801d890:	4413      	add	r3, r2
 801d892:	881b      	ldrh	r3, [r3, #0]
 801d894:	099b      	lsrs	r3, r3, #6
 801d896:	b299      	uxth	r1, r3
 801d898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d89a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d89c:	4413      	add	r3, r2
 801d89e:	b2ca      	uxtb	r2, r1
 801d8a0:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 801d8a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d8a4:	3301      	adds	r3, #1
 801d8a6:	65bb      	str	r3, [r7, #88]	; 0x58
 801d8a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d8aa:	fb03 f303 	mul.w	r3, r3, r3
 801d8ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d8b0:	429a      	cmp	r2, r3
 801d8b2:	dbea      	blt.n	801d88a <shadow_draw_corner_buf+0x1d6>
        }
        return;
 801d8b4:	e070      	b.n	801d998 <shadow_draw_corner_buf+0x2e4>
    }

    shadow_blur_corner(size, sw, sh_buf);
 801d8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d8b8:	b21b      	sxth	r3, r3
 801d8ba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801d8be:	68ba      	ldr	r2, [r7, #8]
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	f000 f86c 	bl	801d99e <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 801d8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d8c8:	b29b      	uxth	r3, r3
 801d8ca:	f003 0301 	and.w	r3, r3, #1
 801d8ce:	b29a      	uxth	r2, r3
 801d8d0:	88fb      	ldrh	r3, [r7, #6]
 801d8d2:	4413      	add	r3, r2
 801d8d4:	b29b      	uxth	r3, r3
 801d8d6:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 801d8d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d8dc:	2b01      	cmp	r3, #1
 801d8de:	dd43      	ble.n	801d968 <shadow_draw_corner_buf+0x2b4>
        uint32_t i;
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 801d8e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d8e4:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801d8e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d8ec:	643b      	str	r3, [r7, #64]	; 0x40
        for(i = 0; i < (uint32_t)size * size; i++) {
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	657b      	str	r3, [r7, #84]	; 0x54
 801d8f2:	e02a      	b.n	801d94a <shadow_draw_corner_buf+0x296>
            if(sh_buf[i] == 0) continue;
 801d8f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8f6:	005b      	lsls	r3, r3, #1
 801d8f8:	68ba      	ldr	r2, [r7, #8]
 801d8fa:	4413      	add	r3, r2
 801d8fc:	881b      	ldrh	r3, [r3, #0]
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d01f      	beq.n	801d942 <shadow_draw_corner_buf+0x28e>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 801d902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d904:	005b      	lsls	r3, r3, #1
 801d906:	68ba      	ldr	r2, [r7, #8]
 801d908:	4413      	add	r3, r2
 801d90a:	881b      	ldrh	r3, [r3, #0]
 801d90c:	2bff      	cmp	r3, #255	; 0xff
 801d90e:	d107      	bne.n	801d920 <shadow_draw_corner_buf+0x26c>
 801d910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d912:	005b      	lsls	r3, r3, #1
 801d914:	68ba      	ldr	r2, [r7, #8]
 801d916:	4413      	add	r3, r2
 801d918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d91a:	b292      	uxth	r2, r2
 801d91c:	801a      	strh	r2, [r3, #0]
 801d91e:	e011      	b.n	801d944 <shadow_draw_corner_buf+0x290>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801d920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d922:	005b      	lsls	r3, r3, #1
 801d924:	68ba      	ldr	r2, [r7, #8]
 801d926:	4413      	add	r3, r2
 801d928:	881b      	ldrh	r3, [r3, #0]
 801d92a:	019a      	lsls	r2, r3, #6
 801d92c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d930:	fb92 f1f3 	sdiv	r1, r2, r3
 801d934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d936:	005b      	lsls	r3, r3, #1
 801d938:	68ba      	ldr	r2, [r7, #8]
 801d93a:	4413      	add	r3, r2
 801d93c:	b28a      	uxth	r2, r1
 801d93e:	801a      	strh	r2, [r3, #0]
 801d940:	e000      	b.n	801d944 <shadow_draw_corner_buf+0x290>
            if(sh_buf[i] == 0) continue;
 801d942:	bf00      	nop
        for(i = 0; i < (uint32_t)size * size; i++) {
 801d944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d946:	3301      	adds	r3, #1
 801d948:	657b      	str	r3, [r7, #84]	; 0x54
 801d94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d94c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d94e:	fb02 f303 	mul.w	r3, r2, r3
 801d952:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d954:	429a      	cmp	r2, r3
 801d956:	d3cd      	bcc.n	801d8f4 <shadow_draw_corner_buf+0x240>
        }

        shadow_blur_corner(size, sw, sh_buf);
 801d958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d95a:	b21b      	sxth	r3, r3
 801d95c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801d960:	68ba      	ldr	r2, [r7, #8]
 801d962:	4618      	mov	r0, r3
 801d964:	f000 f81b 	bl	801d99e <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801d968:	68bb      	ldr	r3, [r7, #8]
 801d96a:	63fb      	str	r3, [r7, #60]	; 0x3c
    for(x = 0; x < size * size; x++) {
 801d96c:	2300      	movs	r3, #0
 801d96e:	653b      	str	r3, [r7, #80]	; 0x50
 801d970:	e00c      	b.n	801d98c <shadow_draw_corner_buf+0x2d8>
        res_buf[x] = sh_buf[x];
 801d972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d974:	005b      	lsls	r3, r3, #1
 801d976:	68ba      	ldr	r2, [r7, #8]
 801d978:	4413      	add	r3, r2
 801d97a:	8819      	ldrh	r1, [r3, #0]
 801d97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d97e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d980:	4413      	add	r3, r2
 801d982:	b2ca      	uxtb	r2, r1
 801d984:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 801d986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d988:	3301      	adds	r3, #1
 801d98a:	653b      	str	r3, [r7, #80]	; 0x50
 801d98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d98e:	fb03 f303 	mul.w	r3, r3, r3
 801d992:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d994:	429a      	cmp	r2, r3
 801d996:	dbec      	blt.n	801d972 <shadow_draw_corner_buf+0x2be>
    }
#endif

}
 801d998:	376c      	adds	r7, #108	; 0x6c
 801d99a:	46bd      	mov	sp, r7
 801d99c:	bd90      	pop	{r4, r7, pc}

0801d99e <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 801d99e:	b580      	push	{r7, lr}
 801d9a0:	b092      	sub	sp, #72	; 0x48
 801d9a2:	af00      	add	r7, sp, #0
 801d9a4:	4603      	mov	r3, r0
 801d9a6:	603a      	str	r2, [r7, #0]
 801d9a8:	80fb      	strh	r3, [r7, #6]
 801d9aa:	460b      	mov	r3, r1
 801d9ac:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 801d9ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d9b2:	105b      	asrs	r3, r3, #1
 801d9b4:	b21b      	sxth	r3, r3
 801d9b6:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t s_right = (sw >> 1);
 801d9b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d9bc:	105b      	asrs	r3, r3, #1
 801d9be:	b21b      	sxth	r3, r3
 801d9c0:	61bb      	str	r3, [r7, #24]
    if((sw & 1) == 0) s_left--;
 801d9c2:	88bb      	ldrh	r3, [r7, #4]
 801d9c4:	f003 0301 	and.w	r3, r3, #1
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d102      	bne.n	801d9d2 <shadow_blur_corner+0x34>
 801d9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9ce:	3b01      	subs	r3, #1
 801d9d0:	647b      	str	r3, [r7, #68]	; 0x44

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 801d9d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d9d6:	005b      	lsls	r3, r3, #1
 801d9d8:	4618      	mov	r0, r3
 801d9da:	f004 fa1b 	bl	8021e14 <lv_mem_buf_get>
 801d9de:	6178      	str	r0, [r7, #20]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 801d9e0:	683b      	ldr	r3, [r7, #0]
 801d9e2:	63bb      	str	r3, [r7, #56]	; 0x38

    for(y = 0; y < size; y++) {
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d9e8:	e05f      	b.n	801daaa <shadow_blur_corner+0x10c>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 801d9ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801d9ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801d9f2:	4413      	add	r3, r2
 801d9f4:	005b      	lsls	r3, r3, #1
 801d9f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d9f8:	4413      	add	r3, r2
 801d9fa:	881b      	ldrh	r3, [r3, #0]
 801d9fc:	461a      	mov	r2, r3
 801d9fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801da02:	fb02 f303 	mul.w	r3, r2, r3
 801da06:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801da08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801da0c:	3b01      	subs	r3, #1
 801da0e:	643b      	str	r3, [r7, #64]	; 0x40
 801da10:	e037      	b.n	801da82 <shadow_blur_corner+0xe4>
            sh_ups_blur_buf[x] = v;
 801da12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801da14:	005b      	lsls	r3, r3, #1
 801da16:	697a      	ldr	r2, [r7, #20]
 801da18:	4413      	add	r3, r2
 801da1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801da1c:	b292      	uxth	r2, r2
 801da1e:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 801da20:	2300      	movs	r3, #0
 801da22:	633b      	str	r3, [r7, #48]	; 0x30
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 801da24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801da26:	69bb      	ldr	r3, [r7, #24]
 801da28:	441a      	add	r2, r3
 801da2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801da2e:	429a      	cmp	r2, r3
 801da30:	da07      	bge.n	801da42 <shadow_blur_corner+0xa4>
 801da32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801da34:	69bb      	ldr	r3, [r7, #24]
 801da36:	4413      	add	r3, r2
 801da38:	005b      	lsls	r3, r3, #1
 801da3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801da3c:	4413      	add	r3, r2
 801da3e:	881b      	ldrh	r3, [r3, #0]
 801da40:	633b      	str	r3, [r7, #48]	; 0x30
            v -= right_val;
 801da42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801da44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da46:	1ad3      	subs	r3, r2, r3
 801da48:	637b      	str	r3, [r7, #52]	; 0x34

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 801da4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801da4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da4e:	1ad3      	subs	r3, r2, r3
 801da50:	2b00      	cmp	r3, #0
 801da52:	dc03      	bgt.n	801da5c <shadow_blur_corner+0xbe>
 801da54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da56:	881b      	ldrh	r3, [r3, #0]
 801da58:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da5a:	e00b      	b.n	801da74 <shadow_blur_corner+0xd6>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 801da5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801da5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da60:	1ad3      	subs	r3, r2, r3
 801da62:	461a      	mov	r2, r3
 801da64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801da68:	4413      	add	r3, r2
 801da6a:	005b      	lsls	r3, r3, #1
 801da6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801da6e:	4413      	add	r3, r2
 801da70:	881b      	ldrh	r3, [r3, #0]
 801da72:	62fb      	str	r3, [r7, #44]	; 0x2c
            v += left_val;
 801da74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da78:	4413      	add	r3, r2
 801da7a:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801da7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801da7e:	3b01      	subs	r3, #1
 801da80:	643b      	str	r3, [r7, #64]	; 0x40
 801da82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801da84:	2b00      	cmp	r3, #0
 801da86:	dac4      	bge.n	801da12 <shadow_blur_corner+0x74>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 801da88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801da8c:	005b      	lsls	r3, r3, #1
 801da8e:	461a      	mov	r2, r3
 801da90:	6979      	ldr	r1, [r7, #20]
 801da92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801da94:	f004 fac2 	bl	802201c <lv_memcpy>
        sh_ups_tmp_buf += size;
 801da98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801da9c:	005b      	lsls	r3, r3, #1
 801da9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801daa0:	4413      	add	r3, r2
 801daa2:	63bb      	str	r3, [r7, #56]	; 0x38
    for(y = 0; y < size; y++) {
 801daa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801daa6:	3301      	adds	r3, #1
 801daa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801daaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801daae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dab0:	429a      	cmp	r2, r3
 801dab2:	db9a      	blt.n	801d9ea <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
 801dab4:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801dab8:	613b      	str	r3, [r7, #16]
    uint32_t max_v_div = max_v / sw;
 801daba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dabe:	693a      	ldr	r2, [r7, #16]
 801dac0:	fbb2 f3f3 	udiv	r3, r2, r3
 801dac4:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (uint32_t)size * size; i++) {
 801dac6:	2300      	movs	r3, #0
 801dac8:	62bb      	str	r3, [r7, #40]	; 0x28
 801daca:	e02c      	b.n	801db26 <shadow_blur_corner+0x188>
        if(sh_ups_buf[i] == 0) continue;
 801dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dace:	005b      	lsls	r3, r3, #1
 801dad0:	683a      	ldr	r2, [r7, #0]
 801dad2:	4413      	add	r3, r2
 801dad4:	881b      	ldrh	r3, [r3, #0]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d021      	beq.n	801db1e <shadow_blur_corner+0x180>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 801dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dadc:	005b      	lsls	r3, r3, #1
 801dade:	683a      	ldr	r2, [r7, #0]
 801dae0:	4413      	add	r3, r2
 801dae2:	881b      	ldrh	r3, [r3, #0]
 801dae4:	461a      	mov	r2, r3
 801dae6:	693b      	ldr	r3, [r7, #16]
 801dae8:	4293      	cmp	r3, r2
 801daea:	d107      	bne.n	801dafc <shadow_blur_corner+0x15e>
 801daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daee:	005b      	lsls	r3, r3, #1
 801daf0:	683a      	ldr	r2, [r7, #0]
 801daf2:	4413      	add	r3, r2
 801daf4:	68fa      	ldr	r2, [r7, #12]
 801daf6:	b292      	uxth	r2, r2
 801daf8:	801a      	strh	r2, [r3, #0]
 801dafa:	e011      	b.n	801db20 <shadow_blur_corner+0x182>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 801dafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dafe:	005b      	lsls	r3, r3, #1
 801db00:	683a      	ldr	r2, [r7, #0]
 801db02:	4413      	add	r3, r2
 801db04:	881b      	ldrh	r3, [r3, #0]
 801db06:	461a      	mov	r2, r3
 801db08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801db0c:	fb92 f1f3 	sdiv	r1, r2, r3
 801db10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db12:	005b      	lsls	r3, r3, #1
 801db14:	683a      	ldr	r2, [r7, #0]
 801db16:	4413      	add	r3, r2
 801db18:	b28a      	uxth	r2, r1
 801db1a:	801a      	strh	r2, [r3, #0]
 801db1c:	e000      	b.n	801db20 <shadow_blur_corner+0x182>
        if(sh_ups_buf[i] == 0) continue;
 801db1e:	bf00      	nop
    for(i = 0; i < (uint32_t)size * size; i++) {
 801db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db22:	3301      	adds	r3, #1
 801db24:	62bb      	str	r3, [r7, #40]	; 0x28
 801db26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801db2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801db2e:	fb02 f303 	mul.w	r3, r2, r3
 801db32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801db34:	429a      	cmp	r2, r3
 801db36:	d3c9      	bcc.n	801dacc <shadow_blur_corner+0x12e>
    }

    for(x = 0; x < size; x++) {
 801db38:	2300      	movs	r3, #0
 801db3a:	643b      	str	r3, [r7, #64]	; 0x40
 801db3c:	e090      	b.n	801dc60 <shadow_blur_corner+0x2c2>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801db3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db40:	005b      	lsls	r3, r3, #1
 801db42:	683a      	ldr	r2, [r7, #0]
 801db44:	4413      	add	r3, r2
 801db46:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t v = sh_ups_tmp_buf[0] * sw;
 801db48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db4a:	881b      	ldrh	r3, [r3, #0]
 801db4c:	461a      	mov	r2, r3
 801db4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801db52:	fb02 f303 	mul.w	r3, r2, r3
 801db56:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801db58:	2300      	movs	r3, #0
 801db5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801db5c:	e05b      	b.n	801dc16 <shadow_blur_corner+0x278>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 801db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db60:	2b00      	cmp	r3, #0
 801db62:	db03      	blt.n	801db6c <shadow_blur_corner+0x1ce>
 801db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db66:	119b      	asrs	r3, r3, #6
 801db68:	b299      	uxth	r1, r3
 801db6a:	e000      	b.n	801db6e <shadow_blur_corner+0x1d0>
 801db6c:	2100      	movs	r1, #0
 801db6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801db70:	005b      	lsls	r3, r3, #1
 801db72:	697a      	ldr	r2, [r7, #20]
 801db74:	4413      	add	r3, r2
 801db76:	460a      	mov	r2, r1
 801db78:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 801db7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801db7c:	69bb      	ldr	r3, [r7, #24]
 801db7e:	1ad3      	subs	r3, r2, r3
 801db80:	2b00      	cmp	r3, #0
 801db82:	dc03      	bgt.n	801db8c <shadow_blur_corner+0x1ee>
 801db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db86:	881b      	ldrh	r3, [r3, #0]
 801db88:	623b      	str	r3, [r7, #32]
 801db8a:	e00d      	b.n	801dba8 <shadow_blur_corner+0x20a>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 801db8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801db8e:	69bb      	ldr	r3, [r7, #24]
 801db90:	1ad3      	subs	r3, r2, r3
 801db92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801db96:	fb03 f202 	mul.w	r2, r3, r2
 801db9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db9c:	4413      	add	r3, r2
 801db9e:	005b      	lsls	r3, r3, #1
 801dba0:	683a      	ldr	r2, [r7, #0]
 801dba2:	4413      	add	r3, r2
 801dba4:	881b      	ldrh	r3, [r3, #0]
 801dba6:	623b      	str	r3, [r7, #32]
            v -= top_val;
 801dba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbaa:	6a3b      	ldr	r3, [r7, #32]
 801dbac:	1ad3      	subs	r3, r2, r3
 801dbae:	627b      	str	r3, [r7, #36]	; 0x24

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 801dbb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dbb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbb4:	4413      	add	r3, r2
 801dbb6:	1c5a      	adds	r2, r3, #1
 801dbb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dbbc:	429a      	cmp	r2, r3
 801dbbe:	da0f      	bge.n	801dbe0 <shadow_blur_corner+0x242>
 801dbc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbc4:	4413      	add	r3, r2
 801dbc6:	3301      	adds	r3, #1
 801dbc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801dbcc:	fb03 f202 	mul.w	r2, r3, r2
 801dbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dbd2:	4413      	add	r3, r2
 801dbd4:	005b      	lsls	r3, r3, #1
 801dbd6:	683a      	ldr	r2, [r7, #0]
 801dbd8:	4413      	add	r3, r2
 801dbda:	881b      	ldrh	r3, [r3, #0]
 801dbdc:	61fb      	str	r3, [r7, #28]
 801dbde:	e00d      	b.n	801dbfc <shadow_blur_corner+0x25e>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 801dbe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dbe4:	3b01      	subs	r3, #1
 801dbe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801dbea:	fb03 f202 	mul.w	r2, r3, r2
 801dbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dbf0:	4413      	add	r3, r2
 801dbf2:	005b      	lsls	r3, r3, #1
 801dbf4:	683a      	ldr	r2, [r7, #0]
 801dbf6:	4413      	add	r3, r2
 801dbf8:	881b      	ldrh	r3, [r3, #0]
 801dbfa:	61fb      	str	r3, [r7, #28]
            v += bottom_val;
 801dbfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbfe:	69fb      	ldr	r3, [r7, #28]
 801dc00:	4413      	add	r3, r2
 801dc02:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801dc04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc06:	3301      	adds	r3, #1
 801dc08:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc0e:	005b      	lsls	r3, r3, #1
 801dc10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dc12:	4413      	add	r3, r2
 801dc14:	63bb      	str	r3, [r7, #56]	; 0x38
 801dc16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dc1c:	429a      	cmp	r2, r3
 801dc1e:	db9e      	blt.n	801db5e <shadow_blur_corner+0x1c0>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801dc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc22:	005b      	lsls	r3, r3, #1
 801dc24:	683a      	ldr	r2, [r7, #0]
 801dc26:	4413      	add	r3, r2
 801dc28:	63bb      	str	r3, [r7, #56]	; 0x38
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc2e:	e00f      	b.n	801dc50 <shadow_blur_corner+0x2b2>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 801dc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc32:	005b      	lsls	r3, r3, #1
 801dc34:	697a      	ldr	r2, [r7, #20]
 801dc36:	4413      	add	r3, r2
 801dc38:	881a      	ldrh	r2, [r3, #0]
 801dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc3c:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801dc3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc40:	3301      	adds	r3, #1
 801dc42:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc48:	005b      	lsls	r3, r3, #1
 801dc4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dc4c:	4413      	add	r3, r2
 801dc4e:	63bb      	str	r3, [r7, #56]	; 0x38
 801dc50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dc56:	429a      	cmp	r2, r3
 801dc58:	dbea      	blt.n	801dc30 <shadow_blur_corner+0x292>
    for(x = 0; x < size; x++) {
 801dc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc5c:	3301      	adds	r3, #1
 801dc5e:	643b      	str	r3, [r7, #64]	; 0x40
 801dc60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dc66:	429a      	cmp	r2, r3
 801dc68:	f6ff af69 	blt.w	801db3e <shadow_blur_corner+0x1a0>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 801dc6c:	6978      	ldr	r0, [r7, #20]
 801dc6e:	f004 f97d 	bl	8021f6c <lv_mem_buf_release>
}
 801dc72:	bf00      	nop
 801dc74:	3748      	adds	r7, #72	; 0x48
 801dc76:	46bd      	mov	sp, r7
 801dc78:	bd80      	pop	{r7, pc}

0801dc7a <draw_outline>:
#endif

static void draw_outline(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801dc7a:	b5b0      	push	{r4, r5, r7, lr}
 801dc7c:	b092      	sub	sp, #72	; 0x48
 801dc7e:	af04      	add	r7, sp, #16
 801dc80:	60f8      	str	r0, [r7, #12]
 801dc82:	60b9      	str	r1, [r7, #8]
 801dc84:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801dc86:	68bb      	ldr	r3, [r7, #8]
 801dc88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801dc8c:	2b02      	cmp	r3, #2
 801dc8e:	f240 80b7 	bls.w	801de00 <draw_outline+0x186>
    if(dsc->outline_width == 0) return;
 801dc92:	68bb      	ldr	r3, [r7, #8]
 801dc94:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	f000 80b3 	beq.w	801de04 <draw_outline+0x18a>

    lv_opa_t opa = dsc->outline_opa;
 801dc9e:	68bb      	ldr	r3, [r7, #8]
 801dca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801dca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801dca8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801dcac:	2bfd      	cmp	r3, #253	; 0xfd
 801dcae:	d902      	bls.n	801dcb6 <draw_outline+0x3c>
 801dcb0:	23ff      	movs	r3, #255	; 0xff
 801dcb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801dcb6:	f107 0318 	add.w	r3, r7, #24
 801dcba:	6879      	ldr	r1, [r7, #4]
 801dcbc:	4618      	mov	r0, r3
 801dcbe:	f7fd fc0f 	bl	801b4e0 <lv_area_copy>

    /*Bring the outline closer to make sure there is no color bleeding with pad=0*/
    lv_coord_t pad = dsc->outline_pad - 1;
 801dcc2:	68bb      	ldr	r3, [r7, #8]
 801dcc4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801dcc8:	b29b      	uxth	r3, r3
 801dcca:	3b01      	subs	r3, #1
 801dccc:	b29b      	uxth	r3, r3
 801dcce:	863b      	strh	r3, [r7, #48]	; 0x30
    area_inner.x1 -= pad;
 801dcd0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801dcd4:	b29a      	uxth	r2, r3
 801dcd6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dcd8:	1ad3      	subs	r3, r2, r3
 801dcda:	b29b      	uxth	r3, r3
 801dcdc:	b21b      	sxth	r3, r3
 801dcde:	833b      	strh	r3, [r7, #24]
    area_inner.y1 -= pad;
 801dce0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801dce4:	b29a      	uxth	r2, r3
 801dce6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dce8:	1ad3      	subs	r3, r2, r3
 801dcea:	b29b      	uxth	r3, r3
 801dcec:	b21b      	sxth	r3, r3
 801dcee:	837b      	strh	r3, [r7, #26]
    area_inner.x2 += pad;
 801dcf0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801dcf4:	b29a      	uxth	r2, r3
 801dcf6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dcf8:	4413      	add	r3, r2
 801dcfa:	b29b      	uxth	r3, r3
 801dcfc:	b21b      	sxth	r3, r3
 801dcfe:	83bb      	strh	r3, [r7, #28]
    area_inner.y2 += pad;
 801dd00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801dd04:	b29a      	uxth	r2, r3
 801dd06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dd08:	4413      	add	r3, r2
 801dd0a:	b29b      	uxth	r3, r3
 801dd0c:	b21b      	sxth	r3, r3
 801dd0e:	83fb      	strh	r3, [r7, #30]

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 801dd10:	f107 0218 	add.w	r2, r7, #24
 801dd14:	f107 0310 	add.w	r3, r7, #16
 801dd18:	4611      	mov	r1, r2
 801dd1a:	4618      	mov	r0, r3
 801dd1c:	f7fd fbe0 	bl	801b4e0 <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 801dd20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801dd24:	b29a      	uxth	r2, r3
 801dd26:	68bb      	ldr	r3, [r7, #8]
 801dd28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dd2c:	b29b      	uxth	r3, r3
 801dd2e:	1ad3      	subs	r3, r2, r3
 801dd30:	b29b      	uxth	r3, r3
 801dd32:	b21b      	sxth	r3, r3
 801dd34:	823b      	strh	r3, [r7, #16]
    area_outer.x2 += dsc->outline_width;
 801dd36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801dd3a:	b29a      	uxth	r2, r3
 801dd3c:	68bb      	ldr	r3, [r7, #8]
 801dd3e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dd42:	b29b      	uxth	r3, r3
 801dd44:	4413      	add	r3, r2
 801dd46:	b29b      	uxth	r3, r3
 801dd48:	b21b      	sxth	r3, r3
 801dd4a:	82bb      	strh	r3, [r7, #20]
    area_outer.y1 -= dsc->outline_width;
 801dd4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801dd50:	b29a      	uxth	r2, r3
 801dd52:	68bb      	ldr	r3, [r7, #8]
 801dd54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dd58:	b29b      	uxth	r3, r3
 801dd5a:	1ad3      	subs	r3, r2, r3
 801dd5c:	b29b      	uxth	r3, r3
 801dd5e:	b21b      	sxth	r3, r3
 801dd60:	827b      	strh	r3, [r7, #18]
    area_outer.y2 += dsc->outline_width;
 801dd62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801dd66:	b29a      	uxth	r2, r3
 801dd68:	68bb      	ldr	r3, [r7, #8]
 801dd6a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dd6e:	b29b      	uxth	r3, r3
 801dd70:	4413      	add	r3, r2
 801dd72:	b29b      	uxth	r3, r3
 801dd74:	b21b      	sxth	r3, r3
 801dd76:	82fb      	strh	r3, [r7, #22]


    int32_t inner_w = lv_area_get_width(&area_inner);
 801dd78:	f107 0318 	add.w	r3, r7, #24
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	f7fd fbce 	bl	801b51e <lv_area_get_width>
 801dd82:	4603      	mov	r3, r0
 801dd84:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t inner_h = lv_area_get_height(&area_inner);
 801dd86:	f107 0318 	add.w	r3, r7, #24
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	f7fd fbde 	bl	801b54c <lv_area_get_height>
 801dd90:	4603      	mov	r3, r0
 801dd92:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t rin = dsc->radius;
 801dd94:	68bb      	ldr	r3, [r7, #8]
 801dd96:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dd9a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t short_side = LV_MIN(inner_w, inner_h);
 801dd9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dda0:	4293      	cmp	r3, r2
 801dda2:	bfa8      	it	ge
 801dda4:	4613      	movge	r3, r2
 801dda6:	627b      	str	r3, [r7, #36]	; 0x24
    if(rin > short_side >> 1) rin = short_side >> 1;
 801dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddaa:	105b      	asrs	r3, r3, #1
 801ddac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ddae:	429a      	cmp	r2, r3
 801ddb0:	dd02      	ble.n	801ddb8 <draw_outline+0x13e>
 801ddb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddb4:	105b      	asrs	r3, r3, #1
 801ddb6:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t rout = rin + dsc->outline_width;
 801ddb8:	68bb      	ldr	r3, [r7, #8]
 801ddba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ddbe:	b29a      	uxth	r2, r3
 801ddc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddc2:	b29b      	uxth	r3, r3
 801ddc4:	4413      	add	r3, r2
 801ddc6:	b29b      	uxth	r3, r3
 801ddc8:	847b      	strh	r3, [r7, #34]	; 0x22

    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 801ddca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddcc:	b21b      	sxth	r3, r3
 801ddce:	68ba      	ldr	r2, [r7, #8]
 801ddd0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801ddd4:	68b9      	ldr	r1, [r7, #8]
 801ddd6:	7889      	ldrb	r1, [r1, #2]
 801ddd8:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 801dddc:	f107 0418 	add.w	r4, r7, #24
 801dde0:	f107 0010 	add.w	r0, r7, #16
 801dde4:	9103      	str	r1, [sp, #12]
 801dde6:	9202      	str	r2, [sp, #8]
 801dde8:	68ba      	ldr	r2, [r7, #8]
 801ddea:	7f92      	ldrb	r2, [r2, #30]
 801ddec:	f88d 2004 	strb.w	r2, [sp, #4]
 801ddf0:	9300      	str	r3, [sp, #0]
 801ddf2:	462b      	mov	r3, r5
 801ddf4:	4622      	mov	r2, r4
 801ddf6:	4601      	mov	r1, r0
 801ddf8:	68f8      	ldr	r0, [r7, #12]
 801ddfa:	f000 f807 	bl	801de0c <draw_border_generic>
 801ddfe:	e002      	b.n	801de06 <draw_outline+0x18c>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801de00:	bf00      	nop
 801de02:	e000      	b.n	801de06 <draw_outline+0x18c>
    if(dsc->outline_width == 0) return;
 801de04:	bf00      	nop
                        dsc->blend_mode);
}
 801de06:	3738      	adds	r7, #56	; 0x38
 801de08:	46bd      	mov	sp, r7
 801de0a:	bdb0      	pop	{r4, r5, r7, pc}

0801de0c <draw_border_generic>:

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 801de0c:	b580      	push	{r7, lr}
 801de0e:	b0a8      	sub	sp, #160	; 0xa0
 801de10:	af02      	add	r7, sp, #8
 801de12:	60f8      	str	r0, [r7, #12]
 801de14:	60b9      	str	r1, [r7, #8]
 801de16:	607a      	str	r2, [r7, #4]
 801de18:	807b      	strh	r3, [r7, #2]
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 801de1a:	68b8      	ldr	r0, [r7, #8]
 801de1c:	f7f3 fe3c 	bl	8011a98 <lv_draw_mask_is_any>
 801de20:	4603      	mov	r3, r0
 801de22:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 801de26:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801de2a:	f083 0301 	eor.w	r3, r3, #1
 801de2e:	b2db      	uxtb	r3, r3
 801de30:	2b00      	cmp	r3, #0
 801de32:	d012      	beq.n	801de5a <draw_border_generic+0x4e>
 801de34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801de38:	2b00      	cmp	r3, #0
 801de3a:	d10e      	bne.n	801de5a <draw_border_generic+0x4e>
 801de3c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 801de40:	2b00      	cmp	r3, #0
 801de42:	d10a      	bne.n	801de5a <draw_border_generic+0x4e>
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 801de44:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801de48:	9300      	str	r3, [sp, #0]
 801de4a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801de4e:	687a      	ldr	r2, [r7, #4]
 801de50:	68b9      	ldr	r1, [r7, #8]
 801de52:	68f8      	ldr	r0, [r7, #12]
 801de54:	f000 fbb0 	bl	801e5b8 <draw_border_simple>
        return;
 801de58:	e3ab      	b.n	801e5b2 <draw_border_generic+0x7a6>
    }

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `coords`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	689a      	ldr	r2, [r3, #8]
 801de5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801de62:	68b9      	ldr	r1, [r7, #8]
 801de64:	4618      	mov	r0, r3
 801de66:	f002 fc2b 	bl	80206c0 <_lv_area_intersect>
 801de6a:	4603      	mov	r3, r0
 801de6c:	f083 0301 	eor.w	r3, r3, #1
 801de70:	b2db      	uxtb	r3, r3
 801de72:	2b00      	cmp	r3, #0
 801de74:	f040 839c 	bne.w	801e5b0 <draw_border_generic+0x7a4>
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 801de78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801de7c:	4618      	mov	r0, r3
 801de7e:	f7fd fb4e 	bl	801b51e <lv_area_get_width>
 801de82:	4603      	mov	r3, r0
 801de84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801de88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801de8c:	211c      	movs	r1, #28
 801de8e:	4618      	mov	r0, r3
 801de90:	f004 fb6a 	bl	8022568 <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 801de94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801de98:	4618      	mov	r0, r3
 801de9a:	f003 ffbb 	bl	8021e14 <lv_mem_buf_get>
 801de9e:	4603      	mov	r3, r0
 801dea0:	663b      	str	r3, [r7, #96]	; 0x60


    /*Create mask for the outer area*/
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801dea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dea6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0) {
 801deaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801deae:	2b00      	cmp	r3, #0
 801deb0:	dd10      	ble.n	801ded4 <draw_border_generic+0xc8>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 801deb2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801deb6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801deba:	2300      	movs	r3, #0
 801debc:	68b9      	ldr	r1, [r7, #8]
 801debe:	f7f4 f887 	bl	8011fd0 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801dec2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801dec6:	2100      	movs	r1, #0
 801dec8:	4618      	mov	r0, r3
 801deca:	f7f3 fcb5 	bl	8011838 <lv_draw_mask_add>
 801dece:	4603      	mov	r3, r0
 801ded0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    }

    /*Create mask for the inner mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 801ded4:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	; 0xa0
 801ded8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801dedc:	2301      	movs	r3, #1
 801dede:	6879      	ldr	r1, [r7, #4]
 801dee0:	f7f4 f876 	bl	8011fd0 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 801dee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dee8:	2100      	movs	r1, #0
 801deea:	4618      	mov	r0, r3
 801deec:	f7f3 fca4 	bl	8011838 <lv_draw_mask_add>
 801def0:	4603      	mov	r3, r0
 801def2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t h;
    lv_area_t blend_area;
    blend_dsc.blend_area = &blend_area;
 801def6:	f107 031c 	add.w	r3, r7, #28
 801defa:	657b      	str	r3, [r7, #84]	; 0x54
    blend_dsc.mask_area = &blend_area;
 801defc:	f107 031c 	add.w	r3, r7, #28
 801df00:	66bb      	str	r3, [r7, #104]	; 0x68
    blend_dsc.color = color;
 801df02:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801df06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    blend_dsc.opa = opa;
 801df0a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801df0e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    blend_dsc.blend_mode = blend_mode;
 801df12:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 801df16:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

    /*Calculate the x and y coordinates where the straight parts area*/
    lv_area_t core_area;
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df20:	461a      	mov	r2, r3
 801df22:	68bb      	ldr	r3, [r7, #8]
 801df24:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df28:	4619      	mov	r1, r3
 801df2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801df2e:	440b      	add	r3, r1
 801df30:	4293      	cmp	r3, r2
 801df32:	bfb8      	it	lt
 801df34:	4613      	movlt	r3, r2
 801df36:	b21b      	sxth	r3, r3
 801df38:	82bb      	strh	r3, [r7, #20]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801df40:	461a      	mov	r2, r3
 801df42:	68bb      	ldr	r3, [r7, #8]
 801df44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801df48:	4619      	mov	r1, r3
 801df4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801df4e:	1acb      	subs	r3, r1, r3
 801df50:	4293      	cmp	r3, r2
 801df52:	bfa8      	it	ge
 801df54:	4613      	movge	r3, r2
 801df56:	b21b      	sxth	r3, r3
 801df58:	833b      	strh	r3, [r7, #24]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801df60:	461a      	mov	r2, r3
 801df62:	68bb      	ldr	r3, [r7, #8]
 801df64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801df68:	4619      	mov	r1, r3
 801df6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801df6e:	440b      	add	r3, r1
 801df70:	4293      	cmp	r3, r2
 801df72:	bfb8      	it	lt
 801df74:	4613      	movlt	r3, r2
 801df76:	b21b      	sxth	r3, r3
 801df78:	82fb      	strh	r3, [r7, #22]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801df80:	461a      	mov	r2, r3
 801df82:	68bb      	ldr	r3, [r7, #8]
 801df84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801df88:	4619      	mov	r1, r3
 801df8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801df8e:	1acb      	subs	r3, r1, r3
 801df90:	4293      	cmp	r3, r2
 801df92:	bfa8      	it	ge
 801df94:	4613      	movge	r3, r2
 801df96:	b21b      	sxth	r3, r3
 801df98:	837b      	strh	r3, [r7, #26]
    lv_coord_t core_w = lv_area_get_width(&core_area);
 801df9a:	f107 0314 	add.w	r3, r7, #20
 801df9e:	4618      	mov	r0, r3
 801dfa0:	f7fd fabd 	bl	801b51e <lv_area_get_width>
 801dfa4:	4603      	mov	r3, r0
 801dfa6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801dfaa:	68bb      	ldr	r3, [r7, #8]
 801dfac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dfb6:	429a      	cmp	r2, r3
 801dfb8:	bfd4      	ite	le
 801dfba:	2301      	movle	r3, #1
 801dfbc:	2300      	movgt	r3, #0
 801dfbe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801dfc2:	68bb      	ldr	r3, [r7, #8]
 801dfc4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801dfce:	429a      	cmp	r2, r3
 801dfd0:	bfac      	ite	ge
 801dfd2:	2301      	movge	r3, #1
 801dfd4:	2300      	movlt	r3, #0
 801dfd6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

    /*If there is other masks, need to draw line by line*/
    if(mask_any) {
 801dfda:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d077      	beq.n	801e0d2 <draw_border_generic+0x2c6>
        blend_area.x1 = draw_area.x1;
 801dfe2:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801dfe6:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801dfe8:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801dfec:	843b      	strh	r3, [r7, #32]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801dfee:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801dff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801dff6:	e045      	b.n	801e084 <draw_border_generic+0x278>
            if(!top_side && h < core_area.y1) continue;
 801dff8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801dffc:	f083 0301 	eor.w	r3, r3, #1
 801e000:	b2db      	uxtb	r3, r3
 801e002:	2b00      	cmp	r3, #0
 801e004:	d006      	beq.n	801e014 <draw_border_generic+0x208>
 801e006:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e00a:	461a      	mov	r2, r3
 801e00c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e010:	4293      	cmp	r3, r2
 801e012:	db31      	blt.n	801e078 <draw_border_generic+0x26c>
            if(!bottom_side && h > core_area.y2) break;
 801e014:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e018:	f083 0301 	eor.w	r3, r3, #1
 801e01c:	b2db      	uxtb	r3, r3
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d006      	beq.n	801e030 <draw_border_generic+0x224>
 801e022:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e026:	461a      	mov	r2, r3
 801e028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e02c:	4293      	cmp	r3, r2
 801e02e:	dc31      	bgt.n	801e094 <draw_border_generic+0x288>

            blend_area.y1 = h;
 801e030:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e034:	b21b      	sxth	r3, r3
 801e036:	83fb      	strh	r3, [r7, #30]
            blend_area.y2 = h;
 801e038:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e03c:	b21b      	sxth	r3, r3
 801e03e:	847b      	strh	r3, [r7, #34]	; 0x22

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801e040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e042:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801e046:	4611      	mov	r1, r2
 801e048:	4618      	mov	r0, r3
 801e04a:	f004 fb0e 	bl	802266a <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 801e04e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e050:	f9b7 1070 	ldrsh.w	r1, [r7, #112]	; 0x70
 801e054:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e058:	b21a      	sxth	r2, r3
 801e05a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e05e:	b21b      	sxth	r3, r3
 801e060:	f7f3 fc1c 	bl	801189c <lv_draw_mask_apply>
 801e064:	4603      	mov	r3, r0
 801e066:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e06a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e06e:	4619      	mov	r1, r3
 801e070:	68f8      	ldr	r0, [r7, #12]
 801e072:	f7f8 ffe1 	bl	8017038 <lv_draw_sw_blend>
 801e076:	e000      	b.n	801e07a <draw_border_generic+0x26e>
            if(!top_side && h < core_area.y1) continue;
 801e078:	bf00      	nop
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801e07a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e07e:	3301      	adds	r3, #1
 801e080:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e084:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e088:	461a      	mov	r2, r3
 801e08a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e08e:	4293      	cmp	r3, r2
 801e090:	ddb2      	ble.n	801dff8 <draw_border_generic+0x1ec>
 801e092:	e000      	b.n	801e096 <draw_border_generic+0x28a>
            if(!bottom_side && h > core_area.y2) break;
 801e094:	bf00      	nop
        }

        lv_draw_mask_free_param(&mask_rin_param);
 801e096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e09a:	4618      	mov	r0, r3
 801e09c:	f7f3 fc92 	bl	80119c4 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 801e0a0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e0a4:	4618      	mov	r0, r3
 801e0a6:	f7f3 fc3d 	bl	8011924 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 801e0aa:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e0ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e0b2:	d009      	beq.n	801e0c8 <draw_border_generic+0x2bc>
            lv_draw_mask_free_param(&mask_rout_param);
 801e0b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	f7f3 fc83 	bl	80119c4 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 801e0be:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e0c2:	4618      	mov	r0, r3
 801e0c4:	f7f3 fc2e 	bl	8011924 <lv_draw_mask_remove_id>
        }
        lv_mem_buf_release(blend_dsc.mask_buf);
 801e0c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e0ca:	4618      	mov	r0, r3
 801e0cc:	f003 ff4e 	bl	8021f6c <lv_mem_buf_release>
        return;
 801e0d0:	e26f      	b.n	801e5b2 <draw_border_generic+0x7a6>
    }

    /*No masks*/
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801e0d2:	68bb      	ldr	r3, [r7, #8]
 801e0d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e0de:	429a      	cmp	r2, r3
 801e0e0:	bfd4      	ite	le
 801e0e2:	2301      	movle	r3, #1
 801e0e4:	2300      	movgt	r3, #0
 801e0e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801e0ea:	68bb      	ldr	r3, [r7, #8]
 801e0ec:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e0f6:	429a      	cmp	r2, r3
 801e0f8:	bfac      	ite	ge
 801e0fa:	2301      	movge	r3, #1
 801e0fc:	2300      	movlt	r3, #0
 801e0fe:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    bool split_hor = true;
 801e102:	2301      	movs	r3, #1
 801e104:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    if(left_side && right_side && top_side && bottom_side &&
 801e108:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d012      	beq.n	801e136 <draw_border_generic+0x32a>
 801e110:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e114:	2b00      	cmp	r3, #0
 801e116:	d00e      	beq.n	801e136 <draw_border_generic+0x32a>
 801e118:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d00a      	beq.n	801e136 <draw_border_generic+0x32a>
 801e120:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e124:	2b00      	cmp	r3, #0
 801e126:	d006      	beq.n	801e136 <draw_border_generic+0x32a>
 801e128:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e12c:	2b31      	cmp	r3, #49	; 0x31
 801e12e:	dc02      	bgt.n	801e136 <draw_border_generic+0x32a>
       core_w < SPLIT_LIMIT) {
        split_hor = false;
 801e130:	2300      	movs	r3, #0
 801e132:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801e136:	2301      	movs	r3, #1
 801e138:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    /*Draw the straight lines first if they are long enough*/
    if(top_side && split_hor) {
 801e13c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e140:	2b00      	cmp	r3, #0
 801e142:	d01b      	beq.n	801e17c <draw_border_generic+0x370>
 801e144:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d017      	beq.n	801e17c <draw_border_generic+0x370>
        blend_area.x1 = core_area.x1;
 801e14c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e150:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801e152:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e156:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = outer_area->y1;
 801e158:	68bb      	ldr	r3, [r7, #8]
 801e15a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e15e:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = inner_area->y1 - 1;
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e166:	b29b      	uxth	r3, r3
 801e168:	3b01      	subs	r3, #1
 801e16a:	b29b      	uxth	r3, r3
 801e16c:	b21b      	sxth	r3, r3
 801e16e:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e170:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e174:	4619      	mov	r1, r3
 801e176:	68f8      	ldr	r0, [r7, #12]
 801e178:	f7f8 ff5e 	bl	8017038 <lv_draw_sw_blend>
    }

    if(bottom_side && split_hor) {
 801e17c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e180:	2b00      	cmp	r3, #0
 801e182:	d01b      	beq.n	801e1bc <draw_border_generic+0x3b0>
 801e184:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d017      	beq.n	801e1bc <draw_border_generic+0x3b0>
        blend_area.x1 = core_area.x1;
 801e18c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e190:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801e192:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e196:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = inner_area->y2 + 1;
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e19e:	b29b      	uxth	r3, r3
 801e1a0:	3301      	adds	r3, #1
 801e1a2:	b29b      	uxth	r3, r3
 801e1a4:	b21b      	sxth	r3, r3
 801e1a6:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = outer_area->y2;
 801e1a8:	68bb      	ldr	r3, [r7, #8]
 801e1aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e1ae:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e1b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e1b4:	4619      	mov	r1, r3
 801e1b6:	68f8      	ldr	r0, [r7, #12]
 801e1b8:	f7f8 ff3e 	bl	8017038 <lv_draw_sw_blend>
    }

    if(left_side) {
 801e1bc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d017      	beq.n	801e1f4 <draw_border_generic+0x3e8>
        blend_area.x1 = outer_area->x1;
 801e1c4:	68bb      	ldr	r3, [r7, #8]
 801e1c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e1ca:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = inner_area->x1 - 1;
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e1d2:	b29b      	uxth	r3, r3
 801e1d4:	3b01      	subs	r3, #1
 801e1d6:	b29b      	uxth	r3, r3
 801e1d8:	b21b      	sxth	r3, r3
 801e1da:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801e1dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e1e0:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801e1e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e1e6:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e1e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e1ec:	4619      	mov	r1, r3
 801e1ee:	68f8      	ldr	r0, [r7, #12]
 801e1f0:	f7f8 ff22 	bl	8017038 <lv_draw_sw_blend>
    }

    if(right_side) {
 801e1f4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d017      	beq.n	801e22c <draw_border_generic+0x420>
        blend_area.x1 = inner_area->x2 + 1;
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e202:	b29b      	uxth	r3, r3
 801e204:	3301      	adds	r3, #1
 801e206:	b29b      	uxth	r3, r3
 801e208:	b21b      	sxth	r3, r3
 801e20a:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = outer_area->x2;
 801e20c:	68bb      	ldr	r3, [r7, #8]
 801e20e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e212:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801e214:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e218:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801e21a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e21e:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e224:	4619      	mov	r1, r3
 801e226:	68f8      	ldr	r0, [r7, #12]
 801e228:	f7f8 ff06 	bl	8017038 <lv_draw_sw_blend>

    /*Draw the corners*/
    lv_coord_t blend_w;

    /*Left and right corner together if they are close to each other*/
    if(!split_hor) {
 801e22c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e230:	f083 0301 	eor.w	r3, r3, #1
 801e234:	b2db      	uxtb	r3, r3
 801e236:	2b00      	cmp	r3, #0
 801e238:	f000 8081 	beq.w	801e33e <draw_border_generic+0x532>
        /*Calculate the top corner and mirror it to the bottom*/
        blend_area.x1 = draw_area.x1;
 801e23c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e240:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801e242:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e246:	843b      	strh	r3, [r7, #32]
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e24e:	461a      	mov	r2, r3
 801e250:	68bb      	ldr	r3, [r7, #8]
 801e252:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e256:	1ad2      	subs	r2, r2, r3
 801e258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e25c:	4293      	cmp	r3, r2
 801e25e:	bfb8      	it	lt
 801e260:	4613      	movlt	r3, r2
 801e262:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        for(h = 0; h < max_h; h++) {
 801e266:	2300      	movs	r3, #0
 801e268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e26c:	e060      	b.n	801e330 <draw_border_generic+0x524>
            lv_coord_t top_y = outer_area->y1 + h;
 801e26e:	68bb      	ldr	r3, [r7, #8]
 801e270:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e274:	b29a      	uxth	r2, r3
 801e276:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e27a:	b29b      	uxth	r3, r3
 801e27c:	4413      	add	r3, r2
 801e27e:	b29b      	uxth	r3, r3
 801e280:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            lv_coord_t bottom_y = outer_area->y2 - h;
 801e284:	68bb      	ldr	r3, [r7, #8]
 801e286:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e28a:	b29a      	uxth	r2, r3
 801e28c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e290:	b29b      	uxth	r3, r3
 801e292:	1ad3      	subs	r3, r2, r3
 801e294:	b29b      	uxth	r3, r3
 801e296:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801e29a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e29e:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e2a2:	429a      	cmp	r2, r3
 801e2a4:	da05      	bge.n	801e2b2 <draw_border_generic+0x4a6>
 801e2a6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e2aa:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801e2ae:	429a      	cmp	r2, r3
 801e2b0:	dc38      	bgt.n	801e324 <draw_border_generic+0x518>

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801e2b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e2b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801e2b8:	4611      	mov	r1, r2
 801e2ba:	4618      	mov	r0, r3
 801e2bc:	f004 f9d5 	bl	802266a <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 801e2c0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e2c2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e2c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e2ca:	b21b      	sxth	r3, r3
 801e2cc:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e2d0:	f7f3 fae4 	bl	801189c <lv_draw_mask_apply>
 801e2d4:	4603      	mov	r3, r0
 801e2d6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if(top_y >= draw_area.y1) {
 801e2da:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e2de:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e2e2:	429a      	cmp	r2, r3
 801e2e4:	db0b      	blt.n	801e2fe <draw_border_generic+0x4f2>
                blend_area.y1 = top_y;
 801e2e6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801e2ea:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = top_y;
 801e2ec:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801e2f0:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e2f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e2f6:	4619      	mov	r1, r3
 801e2f8:	68f8      	ldr	r0, [r7, #12]
 801e2fa:	f7f8 fe9d 	bl	8017038 <lv_draw_sw_blend>
            }

            if(bottom_y <= draw_area.y2) {
 801e2fe:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e302:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801e306:	429a      	cmp	r2, r3
 801e308:	dc0d      	bgt.n	801e326 <draw_border_generic+0x51a>
                blend_area.y1 = bottom_y;
 801e30a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801e30e:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = bottom_y;
 801e310:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801e314:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e316:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e31a:	4619      	mov	r1, r3
 801e31c:	68f8      	ldr	r0, [r7, #12]
 801e31e:	f7f8 fe8b 	bl	8017038 <lv_draw_sw_blend>
 801e322:	e000      	b.n	801e326 <draw_border_generic+0x51a>
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801e324:	bf00      	nop
        for(h = 0; h < max_h; h++) {
 801e326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e32a:	3301      	adds	r3, #1
 801e32c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e330:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801e334:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801e338:	429a      	cmp	r2, r3
 801e33a:	db98      	blt.n	801e26e <draw_border_generic+0x462>
 801e33c:	e11f      	b.n	801e57e <draw_border_generic+0x772>
            }
        }
    }
    else {
        /*Left corners*/
        blend_area.x1 = draw_area.x1;
 801e33e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e342:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 801e344:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e348:	3b01      	subs	r3, #1
 801e34a:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 801e34e:	4293      	cmp	r3, r2
 801e350:	bfa8      	it	ge
 801e352:	4613      	movge	r3, r2
 801e354:	b21b      	sxth	r3, r3
 801e356:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801e358:	f107 031c 	add.w	r3, r7, #28
 801e35c:	4618      	mov	r0, r3
 801e35e:	f7fd f8de 	bl	801b51e <lv_area_get_width>
 801e362:	4603      	mov	r3, r0
 801e364:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(blend_w > 0) {
 801e368:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	dd76      	ble.n	801e45e <draw_border_generic+0x652>
            if(left_side || top_side) {
 801e370:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e374:	2b00      	cmp	r3, #0
 801e376:	d103      	bne.n	801e380 <draw_border_generic+0x574>
 801e378:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	d032      	beq.n	801e3e6 <draw_border_generic+0x5da>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e380:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e388:	e026      	b.n	801e3d8 <draw_border_generic+0x5cc>
                    blend_area.y1 = h;
 801e38a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e38e:	b21b      	sxth	r3, r3
 801e390:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e396:	b21b      	sxth	r3, r3
 801e398:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e39a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e39c:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e3a0:	4611      	mov	r1, r2
 801e3a2:	4618      	mov	r0, r3
 801e3a4:	f004 f961 	bl	802266a <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e3a8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e3aa:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e3ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e3b2:	b21a      	sxth	r2, r3
 801e3b4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e3b8:	f7f3 fa70 	bl	801189c <lv_draw_mask_apply>
 801e3bc:	4603      	mov	r3, r0
 801e3be:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e3c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e3c6:	4619      	mov	r1, r3
 801e3c8:	68f8      	ldr	r0, [r7, #12]
 801e3ca:	f7f8 fe35 	bl	8017038 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e3ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e3d2:	3301      	adds	r3, #1
 801e3d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e3d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e3dc:	461a      	mov	r2, r3
 801e3de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e3e2:	4293      	cmp	r3, r2
 801e3e4:	dbd1      	blt.n	801e38a <draw_border_generic+0x57e>
                }
            }

            if(left_side || bottom_side) {
 801e3e6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	d103      	bne.n	801e3f6 <draw_border_generic+0x5ea>
 801e3ee:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d033      	beq.n	801e45e <draw_border_generic+0x652>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e3f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e3fa:	3301      	adds	r3, #1
 801e3fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e400:	e026      	b.n	801e450 <draw_border_generic+0x644>
                    blend_area.y1 = h;
 801e402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e406:	b21b      	sxth	r3, r3
 801e408:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e40a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e40e:	b21b      	sxth	r3, r3
 801e410:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e414:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e418:	4611      	mov	r1, r2
 801e41a:	4618      	mov	r0, r3
 801e41c:	f004 f925 	bl	802266a <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e420:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e422:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e42a:	b21a      	sxth	r2, r3
 801e42c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e430:	f7f3 fa34 	bl	801189c <lv_draw_mask_apply>
 801e434:	4603      	mov	r3, r0
 801e436:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e43a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e43e:	4619      	mov	r1, r3
 801e440:	68f8      	ldr	r0, [r7, #12]
 801e442:	f7f8 fdf9 	bl	8017038 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e44a:	3301      	adds	r3, #1
 801e44c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e450:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e454:	461a      	mov	r2, r3
 801e456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e45a:	4293      	cmp	r3, r2
 801e45c:	ddd1      	ble.n	801e402 <draw_border_generic+0x5f6>
                }
            }
        }

        /*Right corners*/
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 801e45e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e462:	3301      	adds	r3, #1
 801e464:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 801e468:	4293      	cmp	r3, r2
 801e46a:	bfb8      	it	lt
 801e46c:	4613      	movlt	r3, r2
 801e46e:	b21b      	sxth	r3, r3
 801e470:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801e472:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e476:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801e478:	f107 031c 	add.w	r3, r7, #28
 801e47c:	4618      	mov	r0, r3
 801e47e:	f7fd f84e 	bl	801b51e <lv_area_get_width>
 801e482:	4603      	mov	r3, r0
 801e484:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if(blend_w > 0) {
 801e488:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e48c:	2b00      	cmp	r3, #0
 801e48e:	dd76      	ble.n	801e57e <draw_border_generic+0x772>
            if(right_side || top_side) {
 801e490:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e494:	2b00      	cmp	r3, #0
 801e496:	d103      	bne.n	801e4a0 <draw_border_generic+0x694>
 801e498:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d032      	beq.n	801e506 <draw_border_generic+0x6fa>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e4a0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e4a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e4a8:	e026      	b.n	801e4f8 <draw_border_generic+0x6ec>
                    blend_area.y1 = h;
 801e4aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e4ae:	b21b      	sxth	r3, r3
 801e4b0:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e4b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e4b6:	b21b      	sxth	r3, r3
 801e4b8:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e4ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e4bc:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e4c0:	4611      	mov	r1, r2
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f004 f8d1 	bl	802266a <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e4c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e4ca:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e4ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e4d2:	b21a      	sxth	r2, r3
 801e4d4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e4d8:	f7f3 f9e0 	bl	801189c <lv_draw_mask_apply>
 801e4dc:	4603      	mov	r3, r0
 801e4de:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e4e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e4e6:	4619      	mov	r1, r3
 801e4e8:	68f8      	ldr	r0, [r7, #12]
 801e4ea:	f7f8 fda5 	bl	8017038 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e4ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e4f2:	3301      	adds	r3, #1
 801e4f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e4f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e4fc:	461a      	mov	r2, r3
 801e4fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e502:	4293      	cmp	r3, r2
 801e504:	dbd1      	blt.n	801e4aa <draw_border_generic+0x69e>
                }
            }

            if(right_side || bottom_side) {
 801e506:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d103      	bne.n	801e516 <draw_border_generic+0x70a>
 801e50e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e512:	2b00      	cmp	r3, #0
 801e514:	d033      	beq.n	801e57e <draw_border_generic+0x772>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e516:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e51a:	3301      	adds	r3, #1
 801e51c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e520:	e026      	b.n	801e570 <draw_border_generic+0x764>
                    blend_area.y1 = h;
 801e522:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e526:	b21b      	sxth	r3, r3
 801e528:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e52a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e52e:	b21b      	sxth	r3, r3
 801e530:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e534:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e538:	4611      	mov	r1, r2
 801e53a:	4618      	mov	r0, r3
 801e53c:	f004 f895 	bl	802266a <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e540:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e542:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e546:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e54a:	b21a      	sxth	r2, r3
 801e54c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e550:	f7f3 f9a4 	bl	801189c <lv_draw_mask_apply>
 801e554:	4603      	mov	r3, r0
 801e556:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e55a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e55e:	4619      	mov	r1, r3
 801e560:	68f8      	ldr	r0, [r7, #12]
 801e562:	f7f8 fd69 	bl	8017038 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e566:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e56a:	3301      	adds	r3, #1
 801e56c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e570:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e574:	461a      	mov	r2, r3
 801e576:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e57a:	4293      	cmp	r3, r2
 801e57c:	ddd1      	ble.n	801e522 <draw_border_generic+0x716>
                }
            }
        }
    }

    lv_draw_mask_free_param(&mask_rin_param);
 801e57e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e582:	4618      	mov	r0, r3
 801e584:	f7f3 fa1e 	bl	80119c4 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 801e588:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e58c:	4618      	mov	r0, r3
 801e58e:	f7f3 f9c9 	bl	8011924 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 801e592:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e596:	4618      	mov	r0, r3
 801e598:	f7f3 fa14 	bl	80119c4 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 801e59c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	f7f3 f9bf 	bl	8011924 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 801e5a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	f003 fcdf 	bl	8021f6c <lv_mem_buf_release>
 801e5ae:	e000      	b.n	801e5b2 <draw_border_generic+0x7a6>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801e5b0:	bf00      	nop
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
        return;
    }

#endif /*LV_DRAW_COMPLEX*/
}
 801e5b2:	3798      	adds	r7, #152	; 0x98
 801e5b4:	46bd      	mov	sp, r7
 801e5b6:	bd80      	pop	{r7, pc}

0801e5b8 <draw_border_simple>:
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 801e5b8:	b580      	push	{r7, lr}
 801e5ba:	b08e      	sub	sp, #56	; 0x38
 801e5bc:	af00      	add	r7, sp, #0
 801e5be:	60f8      	str	r0, [r7, #12]
 801e5c0:	60b9      	str	r1, [r7, #8]
 801e5c2:	607a      	str	r2, [r7, #4]
 801e5c4:	703b      	strb	r3, [r7, #0]
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 801e5c6:	f107 0310 	add.w	r3, r7, #16
 801e5ca:	211c      	movs	r1, #28
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	f003 ffcb 	bl	8022568 <lv_memset_00>
    blend_dsc.blend_area = &a;
 801e5d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e5d6:	613b      	str	r3, [r7, #16]
    blend_dsc.color = color;
 801e5d8:	783b      	ldrb	r3, [r7, #0]
 801e5da:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = opa;
 801e5dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801e5e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801e5e4:	68bb      	ldr	r3, [r7, #8]
 801e5e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e5f0:	429a      	cmp	r2, r3
 801e5f2:	bfd4      	ite	le
 801e5f4:	2301      	movle	r3, #1
 801e5f6:	2300      	movgt	r3, #0
 801e5f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801e5fc:	68bb      	ldr	r3, [r7, #8]
 801e5fe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e608:	429a      	cmp	r2, r3
 801e60a:	bfac      	ite	ge
 801e60c:	2301      	movge	r3, #1
 801e60e:	2300      	movlt	r3, #0
 801e610:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801e614:	68bb      	ldr	r3, [r7, #8]
 801e616:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e620:	429a      	cmp	r2, r3
 801e622:	bfd4      	ite	le
 801e624:	2301      	movle	r3, #1
 801e626:	2300      	movgt	r3, #0
 801e628:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801e62c:	68bb      	ldr	r3, [r7, #8]
 801e62e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e638:	429a      	cmp	r2, r3
 801e63a:	bfac      	ite	ge
 801e63c:	2301      	movge	r3, #1
 801e63e:	2300      	movlt	r3, #0
 801e640:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34


    /*Top*/
    a.x1 = outer_area->x1;
 801e644:	68bb      	ldr	r3, [r7, #8]
 801e646:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e64a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801e64c:	68bb      	ldr	r3, [r7, #8]
 801e64e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e652:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = outer_area->y1;
 801e654:	68bb      	ldr	r3, [r7, #8]
 801e656:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e65a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = inner_area->y1 - 1;
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e662:	b29b      	uxth	r3, r3
 801e664:	3b01      	subs	r3, #1
 801e666:	b29b      	uxth	r3, r3
 801e668:	b21b      	sxth	r3, r3
 801e66a:	867b      	strh	r3, [r7, #50]	; 0x32
    if(top_side) {
 801e66c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801e670:	2b00      	cmp	r3, #0
 801e672:	d005      	beq.n	801e680 <draw_border_simple+0xc8>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e674:	f107 0310 	add.w	r3, r7, #16
 801e678:	4619      	mov	r1, r3
 801e67a:	68f8      	ldr	r0, [r7, #12]
 801e67c:	f7f8 fcdc 	bl	8017038 <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e686:	b29b      	uxth	r3, r3
 801e688:	3301      	adds	r3, #1
 801e68a:	b29b      	uxth	r3, r3
 801e68c:	b21b      	sxth	r3, r3
 801e68e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = outer_area->y2;
 801e690:	68bb      	ldr	r3, [r7, #8]
 801e692:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e696:	867b      	strh	r3, [r7, #50]	; 0x32
    if(bottom_side) {
 801e698:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d005      	beq.n	801e6ac <draw_border_simple+0xf4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e6a0:	f107 0310 	add.w	r3, r7, #16
 801e6a4:	4619      	mov	r1, r3
 801e6a6:	68f8      	ldr	r0, [r7, #12]
 801e6a8:	f7f8 fcc6 	bl	8017038 <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
 801e6ac:	68bb      	ldr	r3, [r7, #8]
 801e6ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = inner_area->x1 - 1;
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6ba:	b29b      	uxth	r3, r3
 801e6bc:	3b01      	subs	r3, #1
 801e6be:	b29b      	uxth	r3, r3
 801e6c0:	b21b      	sxth	r3, r3
 801e6c2:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 801e6c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d003      	beq.n	801e6d4 <draw_border_simple+0x11c>
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e6d2:	e002      	b.n	801e6da <draw_border_simple+0x122>
 801e6d4:	68bb      	ldr	r3, [r7, #8]
 801e6d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e6da:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 801e6dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	d003      	beq.n	801e6ec <draw_border_simple+0x134>
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e6ea:	e002      	b.n	801e6f2 <draw_border_simple+0x13a>
 801e6ec:	68bb      	ldr	r3, [r7, #8]
 801e6ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e6f2:	867b      	strh	r3, [r7, #50]	; 0x32
    if(left_side) {
 801e6f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d005      	beq.n	801e708 <draw_border_simple+0x150>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e6fc:	f107 0310 	add.w	r3, r7, #16
 801e700:	4619      	mov	r1, r3
 801e702:	68f8      	ldr	r0, [r7, #12]
 801e704:	f7f8 fc98 	bl	8017038 <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e70e:	b29b      	uxth	r3, r3
 801e710:	3301      	adds	r3, #1
 801e712:	b29b      	uxth	r3, r3
 801e714:	b21b      	sxth	r3, r3
 801e716:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801e718:	68bb      	ldr	r3, [r7, #8]
 801e71a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e71e:	863b      	strh	r3, [r7, #48]	; 0x30
    if(right_side) {
 801e720:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801e724:	2b00      	cmp	r3, #0
 801e726:	d005      	beq.n	801e734 <draw_border_simple+0x17c>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e728:	f107 0310 	add.w	r3, r7, #16
 801e72c:	4619      	mov	r1, r3
 801e72e:	68f8      	ldr	r0, [r7, #12]
 801e730:	f7f8 fc82 	bl	8017038 <lv_draw_sw_blend>
    }
}
 801e734:	bf00      	nop
 801e736:	3738      	adds	r7, #56	; 0x38
 801e738:	46bd      	mov	sp, r7
 801e73a:	bd80      	pop	{r7, pc}

0801e73c <lv_color_mix>:
{
 801e73c:	b480      	push	{r7}
 801e73e:	b085      	sub	sp, #20
 801e740:	af00      	add	r7, sp, #0
 801e742:	7138      	strb	r0, [r7, #4]
 801e744:	7039      	strb	r1, [r7, #0]
 801e746:	4613      	mov	r3, r2
 801e748:	70fb      	strb	r3, [r7, #3]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 801e74a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	da01      	bge.n	801e756 <lv_color_mix+0x1a>
 801e752:	793b      	ldrb	r3, [r7, #4]
 801e754:	e000      	b.n	801e758 <lv_color_mix+0x1c>
 801e756:	783b      	ldrb	r3, [r7, #0]
 801e758:	733b      	strb	r3, [r7, #12]
    return ret;
 801e75a:	7b3b      	ldrb	r3, [r7, #12]
}
 801e75c:	4618      	mov	r0, r3
 801e75e:	3714      	adds	r7, #20
 801e760:	46bd      	mov	sp, r7
 801e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e766:	4770      	bx	lr

0801e768 <lv_area_get_width>:
{
 801e768:	b480      	push	{r7}
 801e76a:	b083      	sub	sp, #12
 801e76c:	af00      	add	r7, sp, #0
 801e76e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e776:	b29a      	uxth	r2, r3
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e77e:	b29b      	uxth	r3, r3
 801e780:	1ad3      	subs	r3, r2, r3
 801e782:	b29b      	uxth	r3, r3
 801e784:	3301      	adds	r3, #1
 801e786:	b29b      	uxth	r3, r3
 801e788:	b21b      	sxth	r3, r3
}
 801e78a:	4618      	mov	r0, r3
 801e78c:	370c      	adds	r7, #12
 801e78e:	46bd      	mov	sp, r7
 801e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e794:	4770      	bx	lr

0801e796 <lv_area_get_height>:
{
 801e796:	b480      	push	{r7}
 801e798:	b083      	sub	sp, #12
 801e79a:	af00      	add	r7, sp, #0
 801e79c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e7a4:	b29a      	uxth	r2, r3
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e7ac:	b29b      	uxth	r3, r3
 801e7ae:	1ad3      	subs	r3, r2, r3
 801e7b0:	b29b      	uxth	r3, r3
 801e7b2:	3301      	adds	r3, #1
 801e7b4:	b29b      	uxth	r3, r3
 801e7b6:	b21b      	sxth	r3, r3
}
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	370c      	adds	r7, #12
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7c2:	4770      	bx	lr

0801e7c4 <lv_draw_sw_transform>:
 **********************/

void lv_draw_sw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf,
                          lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                          const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801e7c4:	b590      	push	{r4, r7, lr}
 801e7c6:	b0ab      	sub	sp, #172	; 0xac
 801e7c8:	af08      	add	r7, sp, #32
 801e7ca:	60f8      	str	r0, [r7, #12]
 801e7cc:	60b9      	str	r1, [r7, #8]
 801e7ce:	607a      	str	r2, [r7, #4]
 801e7d0:	807b      	strh	r3, [r7, #2]
    LV_UNUSED(draw_ctx);

    point_transform_dsc_t tr_dsc;
    tr_dsc.angle = -draw_dsc->angle;
 801e7d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e7da:	425b      	negs	r3, r3
 801e7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 801e7de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e7e2:	885b      	ldrh	r3, [r3, #2]
 801e7e4:	461a      	mov	r2, r3
 801e7e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e7ea:	fb93 f3f2 	sdiv	r3, r3, r2
 801e7ee:	63bb      	str	r3, [r7, #56]	; 0x38
    tr_dsc.pivot = draw_dsc->pivot;
 801e7f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e7f4:	685b      	ldr	r3, [r3, #4]
 801e7f6:	64bb      	str	r3, [r7, #72]	; 0x48

    int32_t angle_low = tr_dsc.angle / 10;
 801e7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e7fa:	4aaf      	ldr	r2, [pc, #700]	; (801eab8 <lv_draw_sw_transform+0x2f4>)
 801e7fc:	fb82 1203 	smull	r1, r2, r2, r3
 801e800:	1092      	asrs	r2, r2, #2
 801e802:	17db      	asrs	r3, r3, #31
 801e804:	1ad3      	subs	r3, r2, r3
 801e806:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t angle_high = angle_low + 1;
 801e808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e80a:	3301      	adds	r3, #1
 801e80c:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 801e80e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e812:	f06f 0109 	mvn.w	r1, #9
 801e816:	fb01 f303 	mul.w	r3, r1, r3
 801e81a:	4413      	add	r3, r2
 801e81c:	673b      	str	r3, [r7, #112]	; 0x70

    int32_t s1 = lv_trigo_sin(angle_low);
 801e81e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e820:	b21b      	sxth	r3, r3
 801e822:	4618      	mov	r0, r3
 801e824:	f003 f952 	bl	8021acc <lv_trigo_sin>
 801e828:	4603      	mov	r3, r0
 801e82a:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t s2 = lv_trigo_sin(angle_high);
 801e82c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e82e:	b21b      	sxth	r3, r3
 801e830:	4618      	mov	r0, r3
 801e832:	f003 f94b 	bl	8021acc <lv_trigo_sin>
 801e836:	4603      	mov	r3, r0
 801e838:	66bb      	str	r3, [r7, #104]	; 0x68

    int32_t c1 = lv_trigo_sin(angle_low + 90);
 801e83a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e83c:	b29b      	uxth	r3, r3
 801e83e:	335a      	adds	r3, #90	; 0x5a
 801e840:	b29b      	uxth	r3, r3
 801e842:	b21b      	sxth	r3, r3
 801e844:	4618      	mov	r0, r3
 801e846:	f003 f941 	bl	8021acc <lv_trigo_sin>
 801e84a:	4603      	mov	r3, r0
 801e84c:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 801e84e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e850:	b29b      	uxth	r3, r3
 801e852:	335a      	adds	r3, #90	; 0x5a
 801e854:	b29b      	uxth	r3, r3
 801e856:	b21b      	sxth	r3, r3
 801e858:	4618      	mov	r0, r3
 801e85a:	f003 f937 	bl	8021acc <lv_trigo_sin>
 801e85e:	4603      	mov	r3, r0
 801e860:	663b      	str	r3, [r7, #96]	; 0x60

    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801e862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e864:	f1c3 030a 	rsb	r3, r3, #10
 801e868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801e86a:	fb03 f202 	mul.w	r2, r3, r2
 801e86e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e870:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801e872:	fb01 f303 	mul.w	r3, r1, r3
 801e876:	4413      	add	r3, r2
 801e878:	4a8f      	ldr	r2, [pc, #572]	; (801eab8 <lv_draw_sw_transform+0x2f4>)
 801e87a:	fb82 1203 	smull	r1, r2, r2, r3
 801e87e:	1092      	asrs	r2, r2, #2
 801e880:	17db      	asrs	r3, r3, #31
 801e882:	1ad3      	subs	r3, r2, r3
 801e884:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801e886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e888:	f1c3 030a 	rsb	r3, r3, #10
 801e88c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801e88e:	fb03 f202 	mul.w	r2, r3, r2
 801e892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e894:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801e896:	fb01 f303 	mul.w	r3, r1, r3
 801e89a:	4413      	add	r3, r2
 801e89c:	4a86      	ldr	r2, [pc, #536]	; (801eab8 <lv_draw_sw_transform+0x2f4>)
 801e89e:	fb82 1203 	smull	r1, r2, r2, r3
 801e8a2:	1092      	asrs	r2, r2, #2
 801e8a4:	17db      	asrs	r3, r3, #31
 801e8a6:	1ad3      	subs	r3, r2, r3
 801e8a8:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 801e8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8ac:	115b      	asrs	r3, r3, #5
 801e8ae:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 801e8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e8b2:	115b      	asrs	r3, r3, #5
 801e8b4:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 801e8b6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801e8ba:	021b      	lsls	r3, r3, #8
 801e8bc:	643b      	str	r3, [r7, #64]	; 0x40
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 801e8be:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801e8c2:	021b      	lsls	r3, r3, #8
 801e8c4:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t dest_w = lv_area_get_width(dest_area);
 801e8c6:	68b8      	ldr	r0, [r7, #8]
 801e8c8:	f7ff ff4e 	bl	801e768 <lv_area_get_width>
 801e8cc:	4603      	mov	r3, r0
 801e8ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_coord_t dest_h = lv_area_get_height(dest_area);
 801e8d2:	68b8      	ldr	r0, [r7, #8]
 801e8d4:	f7ff ff5f 	bl	801e796 <lv_area_get_height>
 801e8d8:	4603      	mov	r3, r0
 801e8da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_coord_t y;
    for(y = 0; y < dest_h; y++) {
 801e8de:	2300      	movs	r3, #0
 801e8e0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801e8e4:	e0db      	b.n	801ea9e <lv_draw_sw_transform+0x2da>
        int32_t xs1_ups, ys1_ups, xs2_ups, ys2_ups;

        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 801e8e6:	68bb      	ldr	r3, [r7, #8]
 801e8e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e8ec:	461c      	mov	r4, r3
 801e8ee:	68bb      	ldr	r3, [r7, #8]
 801e8f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e8f4:	461a      	mov	r2, r3
 801e8f6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e8fa:	441a      	add	r2, r3
 801e8fc:	f107 011c 	add.w	r1, r7, #28
 801e900:	f107 0020 	add.w	r0, r7, #32
 801e904:	f107 0318 	add.w	r3, r7, #24
 801e908:	9300      	str	r3, [sp, #0]
 801e90a:	460b      	mov	r3, r1
 801e90c:	4621      	mov	r1, r4
 801e90e:	f000 fbff 	bl	801f110 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 801e912:	68bb      	ldr	r3, [r7, #8]
 801e914:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e918:	461c      	mov	r4, r3
 801e91a:	68bb      	ldr	r3, [r7, #8]
 801e91c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e920:	461a      	mov	r2, r3
 801e922:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e926:	441a      	add	r2, r3
 801e928:	f107 0114 	add.w	r1, r7, #20
 801e92c:	f107 0020 	add.w	r0, r7, #32
 801e930:	f107 0310 	add.w	r3, r7, #16
 801e934:	9300      	str	r3, [sp, #0]
 801e936:	460b      	mov	r3, r1
 801e938:	4621      	mov	r1, r4
 801e93a:	f000 fbe9 	bl	801f110 <transform_point_upscaled>

        int32_t xs_diff = xs2_ups - xs1_ups;
 801e93e:	697a      	ldr	r2, [r7, #20]
 801e940:	69fb      	ldr	r3, [r7, #28]
 801e942:	1ad3      	subs	r3, r2, r3
 801e944:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_diff = ys2_ups - ys1_ups;
 801e946:	693a      	ldr	r2, [r7, #16]
 801e948:	69bb      	ldr	r3, [r7, #24]
 801e94a:	1ad3      	subs	r3, r2, r3
 801e94c:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t xs_step_256 = 0;
 801e94e:	2300      	movs	r3, #0
 801e950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ys_step_256 = 0;
 801e954:	2300      	movs	r3, #0
 801e956:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(dest_w > 1) {
 801e958:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e95c:	2b01      	cmp	r3, #1
 801e95e:	dd10      	ble.n	801e982 <lv_draw_sw_transform+0x1be>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 801e960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e962:	021a      	lsls	r2, r3, #8
 801e964:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e968:	3b01      	subs	r3, #1
 801e96a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e96e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 801e972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e974:	021a      	lsls	r2, r3, #8
 801e976:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e97a:	3b01      	subs	r3, #1
 801e97c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e980:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        int32_t xs_ups = xs1_ups + 0x80;
 801e982:	69fb      	ldr	r3, [r7, #28]
 801e984:	3380      	adds	r3, #128	; 0x80
 801e986:	653b      	str	r3, [r7, #80]	; 0x50
        int32_t ys_ups = ys1_ups + 0x80;
 801e988:	69bb      	ldr	r3, [r7, #24]
 801e98a:	3380      	adds	r3, #128	; 0x80
 801e98c:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(draw_dsc->antialias == 0) {
 801e98e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e992:	7c1b      	ldrb	r3, [r3, #16]
 801e994:	f003 0301 	and.w	r3, r3, #1
 801e998:	b2db      	uxtb	r3, r3
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d148      	bne.n	801ea30 <lv_draw_sw_transform+0x26c>
            switch(cf) {
 801e99e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801e9a2:	2b06      	cmp	r3, #6
 801e9a4:	d023      	beq.n	801e9ee <lv_draw_sw_transform+0x22a>
 801e9a6:	2b06      	cmp	r3, #6
 801e9a8:	dc63      	bgt.n	801ea72 <lv_draw_sw_transform+0x2ae>
 801e9aa:	2b04      	cmp	r3, #4
 801e9ac:	d01f      	beq.n	801e9ee <lv_draw_sw_transform+0x22a>
 801e9ae:	2b05      	cmp	r3, #5
 801e9b0:	d15f      	bne.n	801ea72 <lv_draw_sw_transform+0x2ae>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    argb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf);
 801e9b2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e9b6:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801e9ba:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801e9be:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801e9c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801e9c6:	9206      	str	r2, [sp, #24]
 801e9c8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e9cc:	9205      	str	r2, [sp, #20]
 801e9ce:	9304      	str	r3, [sp, #16]
 801e9d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e9d2:	9303      	str	r3, [sp, #12]
 801e9d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e9d8:	9302      	str	r3, [sp, #8]
 801e9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e9dc:	9301      	str	r3, [sp, #4]
 801e9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e9e0:	9300      	str	r3, [sp, #0]
 801e9e2:	4623      	mov	r3, r4
 801e9e4:	4602      	mov	r2, r0
 801e9e6:	6878      	ldr	r0, [r7, #4]
 801e9e8:	f000 f8ee 	bl	801ebc8 <argb_no_aa>
                    break;
 801e9ec:	e042      	b.n	801ea74 <lv_draw_sw_transform+0x2b0>
                case LV_IMG_CF_TRUE_COLOR:
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    rgb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801e9ee:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801e9f2:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801e9f6:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801e9fa:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801e9fe:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801ea02:	9207      	str	r2, [sp, #28]
 801ea04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ea08:	9206      	str	r2, [sp, #24]
 801ea0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ea0e:	9205      	str	r2, [sp, #20]
 801ea10:	9304      	str	r3, [sp, #16]
 801ea12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ea14:	9303      	str	r3, [sp, #12]
 801ea16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ea1a:	9302      	str	r3, [sp, #8]
 801ea1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea1e:	9301      	str	r3, [sp, #4]
 801ea20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea22:	9300      	str	r3, [sp, #0]
 801ea24:	4623      	mov	r3, r4
 801ea26:	4602      	mov	r2, r0
 801ea28:	6878      	ldr	r0, [r7, #4]
 801ea2a:	f000 f847 	bl	801eabc <rgb_no_aa>
                    break;
 801ea2e:	e021      	b.n	801ea74 <lv_draw_sw_transform+0x2b0>
                default:
                    break;
            }
        }
        else {
            argb_and_rgb_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801ea30:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ea34:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801ea38:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801ea3c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801ea40:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801ea44:	9207      	str	r2, [sp, #28]
 801ea46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ea4a:	9206      	str	r2, [sp, #24]
 801ea4c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ea50:	9205      	str	r2, [sp, #20]
 801ea52:	9304      	str	r3, [sp, #16]
 801ea54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ea56:	9303      	str	r3, [sp, #12]
 801ea58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ea5c:	9302      	str	r3, [sp, #8]
 801ea5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea60:	9301      	str	r3, [sp, #4]
 801ea62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea64:	9300      	str	r3, [sp, #0]
 801ea66:	4623      	mov	r3, r4
 801ea68:	4602      	mov	r2, r0
 801ea6a:	6878      	ldr	r0, [r7, #4]
 801ea6c:	f000 f91d 	bl	801ecaa <argb_and_rgb_aa>
 801ea70:	e000      	b.n	801ea74 <lv_draw_sw_transform+0x2b0>
                    break;
 801ea72:	bf00      	nop
        }

        cbuf += dest_w;
 801ea74:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ea78:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ea7c:	4413      	add	r3, r2
 801ea7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        abuf += dest_w;
 801ea82:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ea86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ea8a:	4413      	add	r3, r2
 801ea8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for(y = 0; y < dest_h; y++) {
 801ea90:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ea94:	b29b      	uxth	r3, r3
 801ea96:	3301      	adds	r3, #1
 801ea98:	b29b      	uxth	r3, r3
 801ea9a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801ea9e:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801eaa2:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801eaa6:	429a      	cmp	r2, r3
 801eaa8:	f6ff af1d 	blt.w	801e8e6 <lv_draw_sw_transform+0x122>
    }
}
 801eaac:	bf00      	nop
 801eaae:	bf00      	nop
 801eab0:	378c      	adds	r7, #140	; 0x8c
 801eab2:	46bd      	mov	sp, r7
 801eab4:	bd90      	pop	{r4, r7, pc}
 801eab6:	bf00      	nop
 801eab8:	66666667 	.word	0x66666667

0801eabc <rgb_no_aa>:
 **********************/

static void rgb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                      int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                      int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801eabc:	b580      	push	{r7, lr}
 801eabe:	b08c      	sub	sp, #48	; 0x30
 801eac0:	af00      	add	r7, sp, #0
 801eac2:	60f8      	str	r0, [r7, #12]
 801eac4:	4608      	mov	r0, r1
 801eac6:	4611      	mov	r1, r2
 801eac8:	461a      	mov	r2, r3
 801eaca:	4603      	mov	r3, r0
 801eacc:	817b      	strh	r3, [r7, #10]
 801eace:	460b      	mov	r3, r1
 801ead0:	813b      	strh	r3, [r7, #8]
 801ead2:	4613      	mov	r3, r2
 801ead4:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801ead6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ead8:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t ys_ups_start = ys_ups;
 801eada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eadc:	627b      	str	r3, [r7, #36]	; 0x24
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801eade:	f7ef fdd1 	bl	800e684 <_lv_refr_get_disp_refreshing>
 801eae2:	6238      	str	r0, [r7, #32]
    lv_color_t ck = d->driver->color_chroma_key;
 801eae4:	6a3b      	ldr	r3, [r7, #32]
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801eaec:	743b      	strb	r3, [r7, #16]

    lv_memset_ff(abuf, x_end);
 801eaee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801eaf0:	4619      	mov	r1, r3
 801eaf2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801eaf4:	f003 fdb9 	bl	802266a <lv_memset_ff>

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801eaf8:	2300      	movs	r3, #0
 801eafa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801eafc:	e05a      	b.n	801ebb4 <rgb_no_aa+0xf8>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801eafe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eb02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801eb04:	fb02 f303 	mul.w	r3, r2, r3
 801eb08:	121b      	asrs	r3, r3, #8
 801eb0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eb0c:	4413      	add	r3, r2
 801eb0e:	63bb      	str	r3, [r7, #56]	; 0x38
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801eb10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eb14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eb16:	fb02 f303 	mul.w	r3, r2, r3
 801eb1a:	121b      	asrs	r3, r3, #8
 801eb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb1e:	4413      	add	r3, r2
 801eb20:	63fb      	str	r3, [r7, #60]	; 0x3c

        int32_t xs_int = xs_ups >> 8;
 801eb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb24:	121b      	asrs	r3, r3, #8
 801eb26:	61fb      	str	r3, [r7, #28]
        int32_t ys_int = ys_ups >> 8;
 801eb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb2a:	121b      	asrs	r3, r3, #8
 801eb2c:	61bb      	str	r3, [r7, #24]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801eb2e:	69fb      	ldr	r3, [r7, #28]
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	db0c      	blt.n	801eb4e <rgb_no_aa+0x92>
 801eb34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801eb38:	69fa      	ldr	r2, [r7, #28]
 801eb3a:	429a      	cmp	r2, r3
 801eb3c:	da07      	bge.n	801eb4e <rgb_no_aa+0x92>
 801eb3e:	69bb      	ldr	r3, [r7, #24]
 801eb40:	2b00      	cmp	r3, #0
 801eb42:	db04      	blt.n	801eb4e <rgb_no_aa+0x92>
 801eb44:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801eb48:	69ba      	ldr	r2, [r7, #24]
 801eb4a:	429a      	cmp	r2, r3
 801eb4c:	db06      	blt.n	801eb5c <rgb_no_aa+0xa0>
            abuf[x] = 0x00;
 801eb4e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eb52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801eb54:	4413      	add	r3, r2
 801eb56:	2200      	movs	r2, #0
 801eb58:	701a      	strb	r2, [r3, #0]
 801eb5a:	e013      	b.n	801eb84 <rgb_no_aa+0xc8>
        }
        else {

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            const uint8_t * src_tmp = src;
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	617b      	str	r3, [r7, #20]
            src_tmp += ys_int * src_stride + xs_int;
 801eb60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801eb64:	69ba      	ldr	r2, [r7, #24]
 801eb66:	fb03 f202 	mul.w	r2, r3, r2
 801eb6a:	69fb      	ldr	r3, [r7, #28]
 801eb6c:	4413      	add	r3, r2
 801eb6e:	461a      	mov	r2, r3
 801eb70:	697b      	ldr	r3, [r7, #20]
 801eb72:	4413      	add	r3, r2
 801eb74:	617b      	str	r3, [r7, #20]
            cbuf[x].full = src_tmp[0];
 801eb76:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eb7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801eb7c:	4413      	add	r3, r2
 801eb7e:	697a      	ldr	r2, [r7, #20]
 801eb80:	7812      	ldrb	r2, [r2, #0]
 801eb82:	701a      	strb	r2, [r3, #0]
            const uint8_t * src_tmp = src;
            src_tmp += (ys_int * src_stride * sizeof(lv_color_t)) + xs_int * sizeof(lv_color_t);
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
        }
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 801eb84:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801eb88:	2b06      	cmp	r3, #6
 801eb8a:	d10d      	bne.n	801eba8 <rgb_no_aa+0xec>
 801eb8c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eb90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801eb92:	4413      	add	r3, r2
 801eb94:	781a      	ldrb	r2, [r3, #0]
 801eb96:	7c3b      	ldrb	r3, [r7, #16]
 801eb98:	429a      	cmp	r2, r3
 801eb9a:	d105      	bne.n	801eba8 <rgb_no_aa+0xec>
            abuf[x] = 0x00;
 801eb9c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eba0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801eba2:	4413      	add	r3, r2
 801eba4:	2200      	movs	r2, #0
 801eba6:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801eba8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ebac:	b29b      	uxth	r3, r3
 801ebae:	3301      	adds	r3, #1
 801ebb0:	b29b      	uxth	r3, r3
 801ebb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ebb4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ebb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ebba:	429a      	cmp	r2, r3
 801ebbc:	dc9f      	bgt.n	801eafe <rgb_no_aa+0x42>
        }
    }
}
 801ebbe:	bf00      	nop
 801ebc0:	bf00      	nop
 801ebc2:	3730      	adds	r7, #48	; 0x30
 801ebc4:	46bd      	mov	sp, r7
 801ebc6:	bd80      	pop	{r7, pc}

0801ebc8 <argb_no_aa>:

static void argb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                       int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                       int32_t x_end, lv_color_t * cbuf, uint8_t * abuf)
{
 801ebc8:	b480      	push	{r7}
 801ebca:	b08b      	sub	sp, #44	; 0x2c
 801ebcc:	af00      	add	r7, sp, #0
 801ebce:	60f8      	str	r0, [r7, #12]
 801ebd0:	4608      	mov	r0, r1
 801ebd2:	4611      	mov	r1, r2
 801ebd4:	461a      	mov	r2, r3
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	817b      	strh	r3, [r7, #10]
 801ebda:	460b      	mov	r3, r1
 801ebdc:	813b      	strh	r3, [r7, #8]
 801ebde:	4613      	mov	r3, r2
 801ebe0:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ebe4:	623b      	str	r3, [r7, #32]
    int32_t ys_ups_start = ys_ups;
 801ebe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ebe8:	61fb      	str	r3, [r7, #28]

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801ebea:	2300      	movs	r3, #0
 801ebec:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ebee:	e050      	b.n	801ec92 <argb_no_aa+0xca>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801ebf0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ebf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ebf6:	fb02 f303 	mul.w	r3, r2, r3
 801ebfa:	121b      	asrs	r3, r3, #8
 801ebfc:	6a3a      	ldr	r2, [r7, #32]
 801ebfe:	4413      	add	r3, r2
 801ec00:	633b      	str	r3, [r7, #48]	; 0x30
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801ec02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ec06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ec08:	fb02 f303 	mul.w	r3, r2, r3
 801ec0c:	121b      	asrs	r3, r3, #8
 801ec0e:	69fa      	ldr	r2, [r7, #28]
 801ec10:	4413      	add	r3, r2
 801ec12:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t xs_int = xs_ups >> 8;
 801ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec16:	121b      	asrs	r3, r3, #8
 801ec18:	61bb      	str	r3, [r7, #24]
        int32_t ys_int = ys_ups >> 8;
 801ec1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec1c:	121b      	asrs	r3, r3, #8
 801ec1e:	617b      	str	r3, [r7, #20]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801ec20:	69bb      	ldr	r3, [r7, #24]
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	db0c      	blt.n	801ec40 <argb_no_aa+0x78>
 801ec26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ec2a:	69ba      	ldr	r2, [r7, #24]
 801ec2c:	429a      	cmp	r2, r3
 801ec2e:	da07      	bge.n	801ec40 <argb_no_aa+0x78>
 801ec30:	697b      	ldr	r3, [r7, #20]
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	db04      	blt.n	801ec40 <argb_no_aa+0x78>
 801ec36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ec3a:	697a      	ldr	r2, [r7, #20]
 801ec3c:	429a      	cmp	r2, r3
 801ec3e:	db06      	blt.n	801ec4e <argb_no_aa+0x86>
            abuf[x] = 0;
 801ec40:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ec44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ec46:	4413      	add	r3, r2
 801ec48:	2200      	movs	r2, #0
 801ec4a:	701a      	strb	r2, [r3, #0]
 801ec4c:	e01b      	b.n	801ec86 <argb_no_aa+0xbe>
        }
        else {
            const uint8_t * src_tmp = src;
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	613b      	str	r3, [r7, #16]
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801ec52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ec56:	697a      	ldr	r2, [r7, #20]
 801ec58:	fb03 f202 	mul.w	r2, r3, r2
 801ec5c:	69bb      	ldr	r3, [r7, #24]
 801ec5e:	4413      	add	r3, r2
 801ec60:	005b      	lsls	r3, r3, #1
 801ec62:	461a      	mov	r2, r3
 801ec64:	693b      	ldr	r3, [r7, #16]
 801ec66:	4413      	add	r3, r2
 801ec68:	613b      	str	r3, [r7, #16]

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801ec6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ec6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ec70:	4413      	add	r3, r2
 801ec72:	693a      	ldr	r2, [r7, #16]
 801ec74:	7812      	ldrb	r2, [r2, #0]
 801ec76:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 16
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801ec78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ec7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ec7e:	4413      	add	r3, r2
 801ec80:	693a      	ldr	r2, [r7, #16]
 801ec82:	7852      	ldrb	r2, [r2, #1]
 801ec84:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801ec86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ec8a:	b29b      	uxth	r3, r3
 801ec8c:	3301      	adds	r3, #1
 801ec8e:	b29b      	uxth	r3, r3
 801ec90:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ec92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ec96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ec98:	429a      	cmp	r2, r3
 801ec9a:	dca9      	bgt.n	801ebf0 <argb_no_aa+0x28>
        }
    }
}
 801ec9c:	bf00      	nop
 801ec9e:	bf00      	nop
 801eca0:	372c      	adds	r7, #44	; 0x2c
 801eca2:	46bd      	mov	sp, r7
 801eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca8:	4770      	bx	lr

0801ecaa <argb_and_rgb_aa>:


static void argb_and_rgb_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                            int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                            int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801ecaa:	b590      	push	{r4, r7, lr}
 801ecac:	b09b      	sub	sp, #108	; 0x6c
 801ecae:	af00      	add	r7, sp, #0
 801ecb0:	60f8      	str	r0, [r7, #12]
 801ecb2:	4608      	mov	r0, r1
 801ecb4:	4611      	mov	r1, r2
 801ecb6:	461a      	mov	r2, r3
 801ecb8:	4603      	mov	r3, r0
 801ecba:	817b      	strh	r3, [r7, #10]
 801ecbc:	460b      	mov	r3, r1
 801ecbe:	813b      	strh	r3, [r7, #8]
 801ecc0:	4613      	mov	r3, r2
 801ecc2:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801ecc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ecc6:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t ys_ups_start = ys_ups;
 801ecc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ecca:	643b      	str	r3, [r7, #64]	; 0x40
    bool has_alpha;
    int32_t px_size;
    lv_color_t ck = {0};
 801eccc:	2300      	movs	r3, #0
 801ecce:	f887 3020 	strb.w	r3, [r7, #32]
    switch(cf) {
 801ecd2:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801ecd6:	2b06      	cmp	r3, #6
 801ecd8:	d013      	beq.n	801ed02 <argb_and_rgb_aa+0x58>
 801ecda:	2b06      	cmp	r3, #6
 801ecdc:	f300 8214 	bgt.w	801f108 <argb_and_rgb_aa+0x45e>
 801ece0:	2b04      	cmp	r3, #4
 801ece2:	d002      	beq.n	801ecea <argb_and_rgb_aa+0x40>
 801ece4:	2b05      	cmp	r3, #5
 801ece6:	d006      	beq.n	801ecf6 <argb_and_rgb_aa+0x4c>
            has_alpha = true;
            px_size = sizeof(lv_color_t);
            break;
#endif
        default:
            return;
 801ece8:	e20e      	b.n	801f108 <argb_and_rgb_aa+0x45e>
            has_alpha = false;
 801ecea:	2300      	movs	r3, #0
 801ecec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = sizeof(lv_color_t);
 801ecf0:	2301      	movs	r3, #1
 801ecf2:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801ecf4:	e014      	b.n	801ed20 <argb_and_rgb_aa+0x76>
            has_alpha = true;
 801ecf6:	2301      	movs	r3, #1
 801ecf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 801ecfc:	2302      	movs	r3, #2
 801ecfe:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801ed00:	e00e      	b.n	801ed20 <argb_and_rgb_aa+0x76>
                has_alpha = true;
 801ed02:	2301      	movs	r3, #1
 801ed04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                px_size = sizeof(lv_color_t);
 801ed08:	2301      	movs	r3, #1
 801ed0a:	663b      	str	r3, [r7, #96]	; 0x60
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801ed0c:	f7ef fcba 	bl	800e684 <_lv_refr_get_disp_refreshing>
 801ed10:	63f8      	str	r0, [r7, #60]	; 0x3c
                ck = d->driver->color_chroma_key;
 801ed12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ed1a:	f887 3020 	strb.w	r3, [r7, #32]
                break;
 801ed1e:	bf00      	nop
    }

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801ed20:	2300      	movs	r3, #0
 801ed22:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801ed26:	e1e7      	b.n	801f0f8 <argb_and_rgb_aa+0x44e>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801ed28:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ed2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ed30:	fb02 f303 	mul.w	r3, r2, r3
 801ed34:	121b      	asrs	r3, r3, #8
 801ed36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed38:	4413      	add	r3, r2
 801ed3a:	67bb      	str	r3, [r7, #120]	; 0x78
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801ed3c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ed40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ed44:	fb02 f303 	mul.w	r3, r2, r3
 801ed48:	121b      	asrs	r3, r3, #8
 801ed4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ed4c:	4413      	add	r3, r2
 801ed4e:	67fb      	str	r3, [r7, #124]	; 0x7c

        int32_t xs_int = xs_ups >> 8;
 801ed50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ed52:	121b      	asrs	r3, r3, #8
 801ed54:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t ys_int = ys_ups >> 8;
 801ed56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ed58:	121b      	asrs	r3, r3, #8
 801ed5a:	637b      	str	r3, [r7, #52]	; 0x34

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801ed5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	db0c      	blt.n	801ed7c <argb_and_rgb_aa+0xd2>
 801ed62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ed66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ed68:	429a      	cmp	r2, r3
 801ed6a:	da07      	bge.n	801ed7c <argb_and_rgb_aa+0xd2>
 801ed6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	db04      	blt.n	801ed7c <argb_and_rgb_aa+0xd2>
 801ed72:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ed76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ed78:	429a      	cmp	r2, r3
 801ed7a:	db07      	blt.n	801ed8c <argb_and_rgb_aa+0xe2>
            abuf[x] = 0x00;
 801ed7c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ed80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801ed84:	4413      	add	r3, r2
 801ed86:	2200      	movs	r2, #0
 801ed88:	701a      	strb	r2, [r3, #0]
            continue;
 801ed8a:	e1ae      	b.n	801f0ea <argb_and_rgb_aa+0x440>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 801ed8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ed8e:	b2db      	uxtb	r3, r3
 801ed90:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_fract = ys_ups & 0xFF;
 801ed92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ed94:	b2db      	uxtb	r3, r3
 801ed96:	657b      	str	r3, [r7, #84]	; 0x54

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 801ed98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ed9a:	2b7f      	cmp	r3, #127	; 0x7f
 801ed9c:	dc08      	bgt.n	801edb0 <argb_and_rgb_aa+0x106>
            x_next = -1;
 801ed9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eda2:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (0x7F - xs_fract) * 2;
 801eda4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801eda6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801edaa:	005b      	lsls	r3, r3, #1
 801edac:	65bb      	str	r3, [r7, #88]	; 0x58
 801edae:	e005      	b.n	801edbc <argb_and_rgb_aa+0x112>
        }
        else {
            x_next = 1;
 801edb0:	2301      	movs	r3, #1
 801edb2:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (xs_fract - 0x80) * 2;
 801edb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801edb6:	3b80      	subs	r3, #128	; 0x80
 801edb8:	005b      	lsls	r3, r3, #1
 801edba:	65bb      	str	r3, [r7, #88]	; 0x58
        }
        if(ys_fract < 0x80) {
 801edbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801edbe:	2b7f      	cmp	r3, #127	; 0x7f
 801edc0:	dc08      	bgt.n	801edd4 <argb_and_rgb_aa+0x12a>
            y_next = -1;
 801edc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801edc6:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (0x7F - ys_fract) * 2;
 801edc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801edca:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801edce:	005b      	lsls	r3, r3, #1
 801edd0:	657b      	str	r3, [r7, #84]	; 0x54
 801edd2:	e005      	b.n	801ede0 <argb_and_rgb_aa+0x136>
        }
        else {
            y_next = 1;
 801edd4:	2301      	movs	r3, #1
 801edd6:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (ys_fract - 0x80) * 2;
 801edd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801edda:	3b80      	subs	r3, #128	; 0x80
 801eddc:	005b      	lsls	r3, r3, #1
 801edde:	657b      	str	r3, [r7, #84]	; 0x54
        }

        const uint8_t * src_tmp = src;
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	633b      	str	r3, [r7, #48]	; 0x30
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 801ede4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ede8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801edea:	fb02 f303 	mul.w	r3, r2, r3
 801edee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801edf0:	fb03 f202 	mul.w	r2, r3, r2
 801edf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801edf6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801edf8:	fb01 f303 	mul.w	r3, r1, r3
 801edfc:	4413      	add	r3, r2
 801edfe:	461a      	mov	r2, r3
 801ee00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee02:	4413      	add	r3, r2
 801ee04:	633b      	str	r3, [r7, #48]	; 0x30


        if(xs_int + x_next >= 0 &&
 801ee06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ee08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ee0a:	4413      	add	r3, r2
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	f2c0 80fe 	blt.w	801f00e <argb_and_rgb_aa+0x364>
           xs_int + x_next <= src_w - 1 &&
 801ee12:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801ee16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ee18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ee1a:	440b      	add	r3, r1
        if(xs_int + x_next >= 0 &&
 801ee1c:	429a      	cmp	r2, r3
 801ee1e:	f340 80f6 	ble.w	801f00e <argb_and_rgb_aa+0x364>
           ys_int + y_next >= 0 &&
 801ee22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ee24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee26:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	f2c0 80f0 	blt.w	801f00e <argb_and_rgb_aa+0x364>
           ys_int + y_next <= src_h - 1) {
 801ee2e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801ee32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ee34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee36:	440b      	add	r3, r1
           ys_int + y_next >= 0 &&
 801ee38:	429a      	cmp	r2, r3
 801ee3a:	f340 80e8 	ble.w	801f00e <argb_and_rgb_aa+0x364>

            const uint8_t * px_base = src_tmp;
 801ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee40:	62fb      	str	r3, [r7, #44]	; 0x2c
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 801ee42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ee44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ee46:	fb02 f303 	mul.w	r3, r2, r3
 801ee4a:	461a      	mov	r2, r3
 801ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee4e:	4413      	add	r3, r2
 801ee50:	62bb      	str	r3, [r7, #40]	; 0x28
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 801ee52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ee56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ee58:	fb02 f303 	mul.w	r3, r2, r3
 801ee5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ee5e:	fb02 f303 	mul.w	r3, r2, r3
 801ee62:	461a      	mov	r2, r3
 801ee64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee66:	4413      	add	r3, r2
 801ee68:	627b      	str	r3, [r7, #36]	; 0x24
            lv_color_t c_base;
            lv_color_t c_ver;
            lv_color_t c_hor;

            if(has_alpha) {
 801ee6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	f000 808e 	beq.w	801ef90 <argb_and_rgb_aa+0x2e6>
                lv_opa_t a_base;
                lv_opa_t a_ver;
                lv_opa_t a_hor;
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801ee74:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801ee78:	2b05      	cmp	r3, #5
 801ee7a:	d10c      	bne.n	801ee96 <argb_and_rgb_aa+0x1ec>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee7e:	785b      	ldrb	r3, [r3, #1]
 801ee80:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee86:	785b      	ldrb	r3, [r3, #1]
 801ee88:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee8e:	785b      	ldrb	r3, [r3, #1]
 801ee90:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801ee94:	e030      	b.n	801eef8 <argb_and_rgb_aa+0x24e>
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
                }
#endif
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801ee96:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801ee9a:	2b06      	cmp	r3, #6
 801ee9c:	d123      	bne.n	801eee6 <argb_and_rgb_aa+0x23c>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801ee9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eea0:	781a      	ldrb	r2, [r3, #0]
 801eea2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801eea6:	429a      	cmp	r2, r3
 801eea8:	d00b      	beq.n	801eec2 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801eeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eeac:	781a      	ldrb	r2, [r3, #0]
 801eeae:	f897 3020 	ldrb.w	r3, [r7, #32]
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801eeb2:	429a      	cmp	r2, r3
 801eeb4:	d005      	beq.n	801eec2 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_hor)->full == ck.full) {
 801eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eeb8:	781a      	ldrb	r2, [r3, #0]
 801eeba:	f897 3020 	ldrb.w	r3, [r7, #32]
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801eebe:	429a      	cmp	r2, r3
 801eec0:	d107      	bne.n	801eed2 <argb_and_rgb_aa+0x228>
                        abuf[x] = 0x00;
 801eec2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801eec6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801eeca:	4413      	add	r3, r2
 801eecc:	2200      	movs	r2, #0
 801eece:	701a      	strb	r2, [r3, #0]
                        continue;
 801eed0:	e10b      	b.n	801f0ea <argb_and_rgb_aa+0x440>
                    }
                    else {
                        a_base = 0xff;
 801eed2:	23ff      	movs	r3, #255	; 0xff
 801eed4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                        a_ver = 0xff;
 801eed8:	23ff      	movs	r3, #255	; 0xff
 801eeda:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                        a_hor = 0xff;
 801eede:	23ff      	movs	r3, #255	; 0xff
 801eee0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801eee4:	e008      	b.n	801eef8 <argb_and_rgb_aa+0x24e>
                    }
                }
                else {
                    a_base = 0xff;
 801eee6:	23ff      	movs	r3, #255	; 0xff
 801eee8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = 0xff;
 801eeec:	23ff      	movs	r3, #255	; 0xff
 801eeee:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = 0xff;
 801eef2:	23ff      	movs	r3, #255	; 0xff
 801eef4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                }

                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 801eef8:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801eefc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801ef00:	429a      	cmp	r2, r3
 801ef02:	d00f      	beq.n	801ef24 <argb_and_rgb_aa+0x27a>
 801ef04:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801ef08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef0a:	fb03 f202 	mul.w	r2, r3, r2
 801ef0e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801ef12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ef14:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801ef18:	fb01 f303 	mul.w	r3, r1, r3
 801ef1c:	4413      	add	r3, r2
 801ef1e:	121b      	asrs	r3, r3, #8
 801ef20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 801ef24:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 801ef28:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801ef2c:	429a      	cmp	r2, r3
 801ef2e:	d00f      	beq.n	801ef50 <argb_and_rgb_aa+0x2a6>
 801ef30:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801ef34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ef36:	fb03 f202 	mul.w	r2, r3, r2
 801ef3a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801ef3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ef40:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801ef44:	fb01 f303 	mul.w	r3, r1, r3
 801ef48:	4413      	add	r3, r2
 801ef4a:	121b      	asrs	r3, r3, #8
 801ef4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                abuf[x] = (a_ver + a_hor) >> 1;
 801ef50:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801ef54:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801ef58:	4413      	add	r3, r2
 801ef5a:	1059      	asrs	r1, r3, #1
 801ef5c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ef60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801ef64:	4413      	add	r3, r2
 801ef66:	b2ca      	uxtb	r2, r1
 801ef68:	701a      	strb	r2, [r3, #0]

                if(abuf[x] == 0x00) continue;
 801ef6a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ef6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801ef72:	4413      	add	r3, r2
 801ef74:	781b      	ldrb	r3, [r3, #0]
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	f000 80b6 	beq.w	801f0e8 <argb_and_rgb_aa+0x43e>

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
                c_base.full = px_base[0];
 801ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef7e:	781b      	ldrb	r3, [r3, #0]
 801ef80:	773b      	strb	r3, [r7, #28]
                c_ver.full = px_ver[0];
 801ef82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef84:	781b      	ldrb	r3, [r3, #0]
 801ef86:	763b      	strb	r3, [r7, #24]
                c_hor.full = px_hor[0];
 801ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef8a:	781b      	ldrb	r3, [r3, #0]
 801ef8c:	753b      	strb	r3, [r7, #20]
 801ef8e:	e00f      	b.n	801efb0 <argb_and_rgb_aa+0x306>
                c_hor.full = *((uint32_t *)px_hor);
#endif
            }
            /*No alpha channel -> RGB*/
            else {
                c_base = *((const lv_color_t *) px_base);
 801ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef92:	781b      	ldrb	r3, [r3, #0]
 801ef94:	773b      	strb	r3, [r7, #28]
                c_hor = *((const lv_color_t *) px_hor);
 801ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef98:	781b      	ldrb	r3, [r3, #0]
 801ef9a:	753b      	strb	r3, [r7, #20]
                c_ver = *((const lv_color_t *) px_ver);
 801ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef9e:	781b      	ldrb	r3, [r3, #0]
 801efa0:	763b      	strb	r3, [r7, #24]
                abuf[x] = 0xff;
 801efa2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801efa6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801efaa:	4413      	add	r3, r2
 801efac:	22ff      	movs	r2, #255	; 0xff
 801efae:	701a      	strb	r2, [r3, #0]
            }

            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 801efb0:	7f3a      	ldrb	r2, [r7, #28]
 801efb2:	7e3b      	ldrb	r3, [r7, #24]
 801efb4:	429a      	cmp	r2, r3
 801efb6:	d10b      	bne.n	801efd0 <argb_and_rgb_aa+0x326>
 801efb8:	7f3a      	ldrb	r2, [r7, #28]
 801efba:	7d3b      	ldrb	r3, [r7, #20]
 801efbc:	429a      	cmp	r2, r3
 801efbe:	d107      	bne.n	801efd0 <argb_and_rgb_aa+0x326>
                cbuf[x] = c_base;
 801efc0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801efc4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801efc8:	4413      	add	r3, r2
 801efca:	7f3a      	ldrb	r2, [r7, #28]
 801efcc:	701a      	strb	r2, [r3, #0]
           ys_int + y_next <= src_h - 1) {
 801efce:	e08c      	b.n	801f0ea <argb_and_rgb_aa+0x440>
            }
            else {
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 801efd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801efd2:	b2db      	uxtb	r3, r3
 801efd4:	461a      	mov	r2, r3
 801efd6:	7f39      	ldrb	r1, [r7, #28]
 801efd8:	7e38      	ldrb	r0, [r7, #24]
 801efda:	f7ff fbaf 	bl	801e73c <lv_color_mix>
 801efde:	4603      	mov	r3, r0
 801efe0:	763b      	strb	r3, [r7, #24]
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 801efe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801efe4:	b2db      	uxtb	r3, r3
 801efe6:	461a      	mov	r2, r3
 801efe8:	7f39      	ldrb	r1, [r7, #28]
 801efea:	7d38      	ldrb	r0, [r7, #20]
 801efec:	f7ff fba6 	bl	801e73c <lv_color_mix>
 801eff0:	4603      	mov	r3, r0
 801eff2:	753b      	strb	r3, [r7, #20]
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 801eff4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801eff8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801effc:	18d4      	adds	r4, r2, r3
 801effe:	227f      	movs	r2, #127	; 0x7f
 801f000:	7e39      	ldrb	r1, [r7, #24]
 801f002:	7d38      	ldrb	r0, [r7, #20]
 801f004:	f7ff fb9a 	bl	801e73c <lv_color_mix>
 801f008:	4603      	mov	r3, r0
 801f00a:	7023      	strb	r3, [r4, #0]
           ys_int + y_next <= src_h - 1) {
 801f00c:	e06d      	b.n	801f0ea <argb_and_rgb_aa+0x440>
            }
        }
        /*Partially out of the image*/
        else {
#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801f00e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f012:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f016:	4413      	add	r3, r2
 801f018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f01a:	7812      	ldrb	r2, [r2, #0]
 801f01c:	701a      	strb	r2, [r3, #0]
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            lv_opa_t a;
            switch(cf) {
 801f01e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801f022:	2b05      	cmp	r3, #5
 801f024:	d002      	beq.n	801f02c <argb_and_rgb_aa+0x382>
 801f026:	2b06      	cmp	r3, #6
 801f028:	d005      	beq.n	801f036 <argb_and_rgb_aa+0x38c>
 801f02a:	e014      	b.n	801f056 <argb_and_rgb_aa+0x3ac>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f02e:	785b      	ldrb	r3, [r3, #1]
 801f030:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801f034:	e012      	b.n	801f05c <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 801f036:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f03a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f03e:	4413      	add	r3, r2
 801f040:	781a      	ldrb	r2, [r3, #0]
 801f042:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f046:	429a      	cmp	r2, r3
 801f048:	d101      	bne.n	801f04e <argb_and_rgb_aa+0x3a4>
 801f04a:	2300      	movs	r3, #0
 801f04c:	e000      	b.n	801f050 <argb_and_rgb_aa+0x3a6>
 801f04e:	23ff      	movs	r3, #255	; 0xff
 801f050:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801f054:	e002      	b.n	801f05c <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_RGB565A8:
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
                    break;
#endif
                default:
                    a = 0xff;
 801f056:	23ff      	movs	r3, #255	; 0xff
 801f058:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801f05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d102      	bne.n	801f068 <argb_and_rgb_aa+0x3be>
 801f062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f064:	2b00      	cmp	r3, #0
 801f066:	db08      	blt.n	801f07a <argb_and_rgb_aa+0x3d0>
 801f068:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801f06c:	3b01      	subs	r3, #1
 801f06e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f070:	429a      	cmp	r2, r3
 801f072:	d112      	bne.n	801f09a <argb_and_rgb_aa+0x3f0>
 801f074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f076:	2b00      	cmp	r3, #0
 801f078:	dd0f      	ble.n	801f09a <argb_and_rgb_aa+0x3f0>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 801f07a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801f07e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f080:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f084:	fb02 f303 	mul.w	r3, r2, r3
 801f088:	1219      	asrs	r1, r3, #8
 801f08a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f08e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f092:	4413      	add	r3, r2
 801f094:	b2ca      	uxtb	r2, r1
 801f096:	701a      	strb	r2, [r3, #0]
 801f098:	e027      	b.n	801f0ea <argb_and_rgb_aa+0x440>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 801f09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d102      	bne.n	801f0a6 <argb_and_rgb_aa+0x3fc>
 801f0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	db08      	blt.n	801f0b8 <argb_and_rgb_aa+0x40e>
 801f0a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f0aa:	3b01      	subs	r3, #1
 801f0ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f0ae:	429a      	cmp	r2, r3
 801f0b0:	d112      	bne.n	801f0d8 <argb_and_rgb_aa+0x42e>
 801f0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	dd0f      	ble.n	801f0d8 <argb_and_rgb_aa+0x42e>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 801f0b8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801f0bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f0be:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f0c2:	fb02 f303 	mul.w	r3, r2, r3
 801f0c6:	1219      	asrs	r1, r3, #8
 801f0c8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f0cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f0d0:	4413      	add	r3, r2
 801f0d2:	b2ca      	uxtb	r2, r1
 801f0d4:	701a      	strb	r2, [r3, #0]
 801f0d6:	e008      	b.n	801f0ea <argb_and_rgb_aa+0x440>
            }
            else {
                abuf[x] = 0x00;
 801f0d8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f0dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f0e0:	4413      	add	r3, r2
 801f0e2:	2200      	movs	r2, #0
 801f0e4:	701a      	strb	r2, [r3, #0]
 801f0e6:	e000      	b.n	801f0ea <argb_and_rgb_aa+0x440>
                if(abuf[x] == 0x00) continue;
 801f0e8:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 801f0ea:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f0ee:	b29b      	uxth	r3, r3
 801f0f0:	3301      	adds	r3, #1
 801f0f2:	b29b      	uxth	r3, r3
 801f0f4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801f0f8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f0fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801f100:	429a      	cmp	r2, r3
 801f102:	f73f ae11 	bgt.w	801ed28 <argb_and_rgb_aa+0x7e>
 801f106:	e000      	b.n	801f10a <argb_and_rgb_aa+0x460>
            return;
 801f108:	bf00      	nop
            }
        }
    }
}
 801f10a:	376c      	adds	r7, #108	; 0x6c
 801f10c:	46bd      	mov	sp, r7
 801f10e:	bd90      	pop	{r4, r7, pc}

0801f110 <transform_point_upscaled>:

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 801f110:	b480      	push	{r7}
 801f112:	b085      	sub	sp, #20
 801f114:	af00      	add	r7, sp, #0
 801f116:	60f8      	str	r0, [r7, #12]
 801f118:	60b9      	str	r1, [r7, #8]
 801f11a:	607a      	str	r2, [r7, #4]
 801f11c:	603b      	str	r3, [r7, #0]
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 801f11e:	68fb      	ldr	r3, [r7, #12]
 801f120:	69db      	ldr	r3, [r3, #28]
 801f122:	2b00      	cmp	r3, #0
 801f124:	d10d      	bne.n	801f142 <transform_point_upscaled+0x32>
 801f126:	68fb      	ldr	r3, [r7, #12]
 801f128:	699b      	ldr	r3, [r3, #24]
 801f12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f12e:	d108      	bne.n	801f142 <transform_point_upscaled+0x32>
        *xout = xin * 256;
 801f130:	68bb      	ldr	r3, [r7, #8]
 801f132:	021a      	lsls	r2, r3, #8
 801f134:	683b      	ldr	r3, [r7, #0]
 801f136:	601a      	str	r2, [r3, #0]
        *yout = yin * 256;
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	021a      	lsls	r2, r3, #8
 801f13c:	69bb      	ldr	r3, [r7, #24]
 801f13e:	601a      	str	r2, [r3, #0]
        return;
 801f140:	e078      	b.n	801f234 <transform_point_upscaled+0x124>
    }

    xin -= t->pivot.x;
 801f142:	68fb      	ldr	r3, [r7, #12]
 801f144:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801f148:	461a      	mov	r2, r3
 801f14a:	68bb      	ldr	r3, [r7, #8]
 801f14c:	1a9b      	subs	r3, r3, r2
 801f14e:	60bb      	str	r3, [r7, #8]
    yin -= t->pivot.y;
 801f150:	68fb      	ldr	r3, [r7, #12]
 801f152:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801f156:	461a      	mov	r2, r3
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	1a9b      	subs	r3, r3, r2
 801f15c:	607b      	str	r3, [r7, #4]

    if(t->angle == 0) {
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	69db      	ldr	r3, [r3, #28]
 801f162:	2b00      	cmp	r3, #0
 801f164:	d114      	bne.n	801f190 <transform_point_upscaled+0x80>
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 801f166:	68fb      	ldr	r3, [r7, #12]
 801f168:	699b      	ldr	r3, [r3, #24]
 801f16a:	68ba      	ldr	r2, [r7, #8]
 801f16c:	fb03 f202 	mul.w	r2, r3, r2
 801f170:	68fb      	ldr	r3, [r7, #12]
 801f172:	6a1b      	ldr	r3, [r3, #32]
 801f174:	441a      	add	r2, r3
 801f176:	683b      	ldr	r3, [r7, #0]
 801f178:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 801f17a:	68fb      	ldr	r3, [r7, #12]
 801f17c:	699b      	ldr	r3, [r3, #24]
 801f17e:	687a      	ldr	r2, [r7, #4]
 801f180:	fb03 f202 	mul.w	r2, r3, r2
 801f184:	68fb      	ldr	r3, [r7, #12]
 801f186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f188:	441a      	add	r2, r3
 801f18a:	69bb      	ldr	r3, [r7, #24]
 801f18c:	601a      	str	r2, [r3, #0]
 801f18e:	e051      	b.n	801f234 <transform_point_upscaled+0x124>
    }
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 801f190:	68fb      	ldr	r3, [r7, #12]
 801f192:	699b      	ldr	r3, [r3, #24]
 801f194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f198:	d122      	bne.n	801f1e0 <transform_point_upscaled+0xd0>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 801f19a:	68fb      	ldr	r3, [r7, #12]
 801f19c:	695b      	ldr	r3, [r3, #20]
 801f19e:	68ba      	ldr	r2, [r7, #8]
 801f1a0:	fb03 f202 	mul.w	r2, r3, r2
 801f1a4:	68fb      	ldr	r3, [r7, #12]
 801f1a6:	691b      	ldr	r3, [r3, #16]
 801f1a8:	6879      	ldr	r1, [r7, #4]
 801f1aa:	fb01 f303 	mul.w	r3, r1, r3
 801f1ae:	1ad3      	subs	r3, r2, r3
 801f1b0:	109a      	asrs	r2, r3, #2
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	6a1b      	ldr	r3, [r3, #32]
 801f1b6:	441a      	add	r2, r3
 801f1b8:	683b      	ldr	r3, [r7, #0]
 801f1ba:	601a      	str	r2, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	691b      	ldr	r3, [r3, #16]
 801f1c0:	68ba      	ldr	r2, [r7, #8]
 801f1c2:	fb03 f202 	mul.w	r2, r3, r2
 801f1c6:	68fb      	ldr	r3, [r7, #12]
 801f1c8:	695b      	ldr	r3, [r3, #20]
 801f1ca:	6879      	ldr	r1, [r7, #4]
 801f1cc:	fb01 f303 	mul.w	r3, r1, r3
 801f1d0:	4413      	add	r3, r2
 801f1d2:	109a      	asrs	r2, r3, #2
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1d8:	441a      	add	r2, r3
 801f1da:	69bb      	ldr	r3, [r7, #24]
 801f1dc:	601a      	str	r2, [r3, #0]
 801f1de:	e029      	b.n	801f234 <transform_point_upscaled+0x124>
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 801f1e0:	68fb      	ldr	r3, [r7, #12]
 801f1e2:	695b      	ldr	r3, [r3, #20]
 801f1e4:	68ba      	ldr	r2, [r7, #8]
 801f1e6:	fb03 f202 	mul.w	r2, r3, r2
 801f1ea:	68fb      	ldr	r3, [r7, #12]
 801f1ec:	691b      	ldr	r3, [r3, #16]
 801f1ee:	6879      	ldr	r1, [r7, #4]
 801f1f0:	fb01 f303 	mul.w	r3, r1, r3
 801f1f4:	1ad3      	subs	r3, r2, r3
 801f1f6:	68fa      	ldr	r2, [r7, #12]
 801f1f8:	6992      	ldr	r2, [r2, #24]
 801f1fa:	fb02 f303 	mul.w	r3, r2, r3
 801f1fe:	129a      	asrs	r2, r3, #10
 801f200:	68fb      	ldr	r3, [r7, #12]
 801f202:	6a1b      	ldr	r3, [r3, #32]
 801f204:	441a      	add	r2, r3
 801f206:	683b      	ldr	r3, [r7, #0]
 801f208:	601a      	str	r2, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 801f20a:	68fb      	ldr	r3, [r7, #12]
 801f20c:	691b      	ldr	r3, [r3, #16]
 801f20e:	68ba      	ldr	r2, [r7, #8]
 801f210:	fb03 f202 	mul.w	r2, r3, r2
 801f214:	68fb      	ldr	r3, [r7, #12]
 801f216:	695b      	ldr	r3, [r3, #20]
 801f218:	6879      	ldr	r1, [r7, #4]
 801f21a:	fb01 f303 	mul.w	r3, r1, r3
 801f21e:	4413      	add	r3, r2
 801f220:	68fa      	ldr	r2, [r7, #12]
 801f222:	6992      	ldr	r2, [r2, #24]
 801f224:	fb02 f303 	mul.w	r3, r2, r3
 801f228:	129a      	asrs	r2, r3, #10
 801f22a:	68fb      	ldr	r3, [r7, #12]
 801f22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f22e:	441a      	add	r2, r3
 801f230:	69bb      	ldr	r3, [r7, #24]
 801f232:	601a      	str	r2, [r3, #0]
    }
}
 801f234:	3714      	adds	r7, #20
 801f236:	46bd      	mov	sp, r7
 801f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f23c:	4770      	bx	lr

0801f23e <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 801f23e:	b480      	push	{r7}
 801f240:	af00      	add	r7, sp, #0
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 801f242:	bf00      	nop
 801f244:	46bd      	mov	sp, r7
 801f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f24a:	4770      	bx	lr

0801f24c <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 801f24c:	b580      	push	{r7, lr}
 801f24e:	b082      	sub	sp, #8
 801f250:	af00      	add	r7, sp, #0
 801f252:	6078      	str	r0, [r7, #4]
 801f254:	6039      	str	r1, [r7, #0]
    LV_ASSERT_NULL(font_p);
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d100      	bne.n	801f25e <lv_font_get_glyph_bitmap+0x12>
 801f25c:	e7fe      	b.n	801f25c <lv_font_get_glyph_bitmap+0x10>
    return font_p->get_glyph_bitmap(font_p, letter);
 801f25e:	687b      	ldr	r3, [r7, #4]
 801f260:	685b      	ldr	r3, [r3, #4]
 801f262:	6839      	ldr	r1, [r7, #0]
 801f264:	6878      	ldr	r0, [r7, #4]
 801f266:	4798      	blx	r3
 801f268:	4603      	mov	r3, r0
}
 801f26a:	4618      	mov	r0, r3
 801f26c:	3708      	adds	r7, #8
 801f26e:	46bd      	mov	sp, r7
 801f270:	bd80      	pop	{r7, pc}

0801f272 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 801f272:	b590      	push	{r4, r7, lr}
 801f274:	b089      	sub	sp, #36	; 0x24
 801f276:	af00      	add	r7, sp, #0
 801f278:	60f8      	str	r0, [r7, #12]
 801f27a:	60b9      	str	r1, [r7, #8]
 801f27c:	607a      	str	r2, [r7, #4]
 801f27e:	603b      	str	r3, [r7, #0]

    LV_ASSERT_NULL(font_p);
 801f280:	68fb      	ldr	r3, [r7, #12]
 801f282:	2b00      	cmp	r3, #0
 801f284:	d100      	bne.n	801f288 <lv_font_get_glyph_dsc+0x16>
 801f286:	e7fe      	b.n	801f286 <lv_font_get_glyph_dsc+0x14>
    LV_ASSERT_NULL(dsc_out);
 801f288:	68bb      	ldr	r3, [r7, #8]
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d100      	bne.n	801f290 <lv_font_get_glyph_dsc+0x1e>
 801f28e:	e7fe      	b.n	801f28e <lv_font_get_glyph_dsc+0x1c>

#if LV_USE_FONT_PLACEHOLDER
    const lv_font_t * placeholder_font = NULL;
 801f290:	2300      	movs	r3, #0
 801f292:	61fb      	str	r3, [r7, #28]
#endif

    const lv_font_t * f = font_p;
 801f294:	68fb      	ldr	r3, [r7, #12]
 801f296:	61bb      	str	r3, [r7, #24]

    dsc_out->resolved_font = NULL;
 801f298:	68bb      	ldr	r3, [r7, #8]
 801f29a:	2200      	movs	r2, #0
 801f29c:	601a      	str	r2, [r3, #0]

    while(f) {
 801f29e:	e01f      	b.n	801f2e0 <lv_font_get_glyph_dsc+0x6e>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 801f2a0:	69bb      	ldr	r3, [r7, #24]
 801f2a2:	681c      	ldr	r4, [r3, #0]
 801f2a4:	683b      	ldr	r3, [r7, #0]
 801f2a6:	687a      	ldr	r2, [r7, #4]
 801f2a8:	68b9      	ldr	r1, [r7, #8]
 801f2aa:	69b8      	ldr	r0, [r7, #24]
 801f2ac:	47a0      	blx	r4
 801f2ae:	4603      	mov	r3, r0
 801f2b0:	75fb      	strb	r3, [r7, #23]
        if(found) {
 801f2b2:	7dfb      	ldrb	r3, [r7, #23]
 801f2b4:	2b00      	cmp	r3, #0
 801f2b6:	d010      	beq.n	801f2da <lv_font_get_glyph_dsc+0x68>
            if(!dsc_out->is_placeholder) {
 801f2b8:	68bb      	ldr	r3, [r7, #8]
 801f2ba:	7b9b      	ldrb	r3, [r3, #14]
 801f2bc:	f003 0310 	and.w	r3, r3, #16
 801f2c0:	b2db      	uxtb	r3, r3
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	d104      	bne.n	801f2d0 <lv_font_get_glyph_dsc+0x5e>
                dsc_out->resolved_font = f;
 801f2c6:	68bb      	ldr	r3, [r7, #8]
 801f2c8:	69ba      	ldr	r2, [r7, #24]
 801f2ca:	601a      	str	r2, [r3, #0]
                return true;
 801f2cc:	2301      	movs	r3, #1
 801f2ce:	e059      	b.n	801f384 <lv_font_get_glyph_dsc+0x112>
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 801f2d0:	69fb      	ldr	r3, [r7, #28]
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d101      	bne.n	801f2da <lv_font_get_glyph_dsc+0x68>
                placeholder_font = f;
 801f2d6:	69bb      	ldr	r3, [r7, #24]
 801f2d8:	61fb      	str	r3, [r7, #28]
            }
#endif
        }
        f = f->fallback;
 801f2da:	69bb      	ldr	r3, [r7, #24]
 801f2dc:	695b      	ldr	r3, [r3, #20]
 801f2de:	61bb      	str	r3, [r7, #24]
    while(f) {
 801f2e0:	69bb      	ldr	r3, [r7, #24]
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	d1dc      	bne.n	801f2a0 <lv_font_get_glyph_dsc+0x2e>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 801f2e6:	69fb      	ldr	r3, [r7, #28]
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	d00b      	beq.n	801f304 <lv_font_get_glyph_dsc+0x92>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 801f2ec:	69fb      	ldr	r3, [r7, #28]
 801f2ee:	681c      	ldr	r4, [r3, #0]
 801f2f0:	683b      	ldr	r3, [r7, #0]
 801f2f2:	687a      	ldr	r2, [r7, #4]
 801f2f4:	68b9      	ldr	r1, [r7, #8]
 801f2f6:	69f8      	ldr	r0, [r7, #28]
 801f2f8:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 801f2fa:	68bb      	ldr	r3, [r7, #8]
 801f2fc:	69fa      	ldr	r2, [r7, #28]
 801f2fe:	601a      	str	r2, [r3, #0]
        return true;
 801f300:	2301      	movs	r3, #1
 801f302:	e03f      	b.n	801f384 <lv_font_get_glyph_dsc+0x112>
    }
#endif

    if(letter < 0x20 ||
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	2b1f      	cmp	r3, #31
 801f308:	d909      	bls.n	801f31e <lv_font_get_glyph_dsc+0xac>
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801f310:	4293      	cmp	r3, r2
 801f312:	d004      	beq.n	801f31e <lv_font_get_glyph_dsc+0xac>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	f242 020c 	movw	r2, #8204	; 0x200c
 801f31a:	4293      	cmp	r3, r2
 801f31c:	d106      	bne.n	801f32c <lv_font_get_glyph_dsc+0xba>
       letter == 0x200c) { /*ZERO WIDTH NON-JOINER*/
        dsc_out->box_w = 0;
 801f31e:	68bb      	ldr	r3, [r7, #8]
 801f320:	2200      	movs	r2, #0
 801f322:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = 0;
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	2200      	movs	r2, #0
 801f328:	809a      	strh	r2, [r3, #4]
 801f32a:	e010      	b.n	801f34e <lv_font_get_glyph_dsc+0xdc>
    }
    else {
#if LV_USE_FONT_PLACEHOLDER
        dsc_out->box_w = font_p->line_height / 2;
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f332:	2b00      	cmp	r3, #0
 801f334:	da00      	bge.n	801f338 <lv_font_get_glyph_dsc+0xc6>
 801f336:	3301      	adds	r3, #1
 801f338:	105b      	asrs	r3, r3, #1
 801f33a:	b21b      	sxth	r3, r3
 801f33c:	b29a      	uxth	r2, r3
 801f33e:	68bb      	ldr	r3, [r7, #8]
 801f340:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 801f342:	68bb      	ldr	r3, [r7, #8]
 801f344:	88db      	ldrh	r3, [r3, #6]
 801f346:	3302      	adds	r3, #2
 801f348:	b29a      	uxth	r2, r3
 801f34a:	68bb      	ldr	r3, [r7, #8]
 801f34c:	809a      	strh	r2, [r3, #4]
        dsc_out->box_w = 0;
        dsc_out->adv_w = 0;
#endif
    }

    dsc_out->resolved_font = NULL;
 801f34e:	68bb      	ldr	r3, [r7, #8]
 801f350:	2200      	movs	r2, #0
 801f352:	601a      	str	r2, [r3, #0]
    dsc_out->box_h = font_p->line_height;
 801f354:	68fb      	ldr	r3, [r7, #12]
 801f356:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f35a:	b29a      	uxth	r2, r3
 801f35c:	68bb      	ldr	r3, [r7, #8]
 801f35e:	811a      	strh	r2, [r3, #8]
    dsc_out->ofs_x = 0;
 801f360:	68bb      	ldr	r3, [r7, #8]
 801f362:	2200      	movs	r2, #0
 801f364:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = 0;
 801f366:	68bb      	ldr	r3, [r7, #8]
 801f368:	2200      	movs	r2, #0
 801f36a:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = 1;
 801f36c:	68ba      	ldr	r2, [r7, #8]
 801f36e:	7b93      	ldrb	r3, [r2, #14]
 801f370:	2101      	movs	r1, #1
 801f372:	f361 0303 	bfi	r3, r1, #0, #4
 801f376:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = true;
 801f378:	68ba      	ldr	r2, [r7, #8]
 801f37a:	7b93      	ldrb	r3, [r2, #14]
 801f37c:	f043 0310 	orr.w	r3, r3, #16
 801f380:	7393      	strb	r3, [r2, #14]

    return false;
 801f382:	2300      	movs	r3, #0
}
 801f384:	4618      	mov	r0, r3
 801f386:	3724      	adds	r7, #36	; 0x24
 801f388:	46bd      	mov	sp, r7
 801f38a:	bd90      	pop	{r4, r7, pc}

0801f38c <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 801f38c:	b580      	push	{r7, lr}
 801f38e:	b088      	sub	sp, #32
 801f390:	af00      	add	r7, sp, #0
 801f392:	60f8      	str	r0, [r7, #12]
 801f394:	60b9      	str	r1, [r7, #8]
 801f396:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(font);
 801f398:	68fb      	ldr	r3, [r7, #12]
 801f39a:	2b00      	cmp	r3, #0
 801f39c:	d100      	bne.n	801f3a0 <lv_font_get_glyph_width+0x14>
 801f39e:	e7fe      	b.n	801f39e <lv_font_get_glyph_width+0x12>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 801f3a0:	f107 0110 	add.w	r1, r7, #16
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	68ba      	ldr	r2, [r7, #8]
 801f3a8:	68f8      	ldr	r0, [r7, #12]
 801f3aa:	f7ff ff62 	bl	801f272 <lv_font_get_glyph_dsc>
    return g.adv_w;
 801f3ae:	8abb      	ldrh	r3, [r7, #20]
}
 801f3b0:	4618      	mov	r0, r3
 801f3b2:	3720      	adds	r7, #32
 801f3b4:	46bd      	mov	sp, r7
 801f3b6:	bd80      	pop	{r7, pc}

0801f3b8 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter a unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b086      	sub	sp, #24
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	6078      	str	r0, [r7, #4]
 801f3c0:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 801f3c2:	683b      	ldr	r3, [r7, #0]
 801f3c4:	2b09      	cmp	r3, #9
 801f3c6:	d101      	bne.n	801f3cc <lv_font_get_bitmap_fmt_txt+0x14>
 801f3c8:	2320      	movs	r3, #32
 801f3ca:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	691b      	ldr	r3, [r3, #16]
 801f3d0:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801f3d2:	6839      	ldr	r1, [r7, #0]
 801f3d4:	6878      	ldr	r0, [r7, #4]
 801f3d6:	f000 f8b9 	bl	801f54c <get_glyph_dsc_id>
 801f3da:	6138      	str	r0, [r7, #16]
    if(!gid) return NULL;
 801f3dc:	693b      	ldr	r3, [r7, #16]
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d101      	bne.n	801f3e6 <lv_font_get_bitmap_fmt_txt+0x2e>
 801f3e2:	2300      	movs	r3, #0
 801f3e4:	e015      	b.n	801f412 <lv_font_get_bitmap_fmt_txt+0x5a>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801f3e6:	697b      	ldr	r3, [r7, #20]
 801f3e8:	685a      	ldr	r2, [r3, #4]
 801f3ea:	693b      	ldr	r3, [r7, #16]
 801f3ec:	00db      	lsls	r3, r3, #3
 801f3ee:	4413      	add	r3, r2
 801f3f0:	60fb      	str	r3, [r7, #12]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 801f3f2:	697b      	ldr	r3, [r7, #20]
 801f3f4:	7cdb      	ldrb	r3, [r3, #19]
 801f3f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801f3fa:	b2db      	uxtb	r3, r3
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d107      	bne.n	801f410 <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801f400:	697b      	ldr	r3, [r7, #20]
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	68fa      	ldr	r2, [r7, #12]
 801f406:	6812      	ldr	r2, [r2, #0]
 801f408:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801f40c:	4413      	add	r3, r2
 801f40e:	e000      	b.n	801f412 <lv_font_get_bitmap_fmt_txt+0x5a>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
                   (uint8_t)fdsc->bpp, prefilter);
        return LV_GC_ROOT(_lv_font_decompr_buf);
#else /*!LV_USE_FONT_COMPRESSED*/
        LV_LOG_WARN("Compressed fonts is used but LV_USE_FONT_COMPRESSED is not enabled in lv_conf.h");
        return NULL;
 801f410:	2300      	movs	r3, #0
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 801f412:	4618      	mov	r0, r3
 801f414:	3718      	adds	r7, #24
 801f416:	46bd      	mov	sp, r7
 801f418:	bd80      	pop	{r7, pc}

0801f41a <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 801f41a:	b580      	push	{r7, lr}
 801f41c:	b08c      	sub	sp, #48	; 0x30
 801f41e:	af00      	add	r7, sp, #0
 801f420:	60f8      	str	r0, [r7, #12]
 801f422:	60b9      	str	r1, [r7, #8]
 801f424:	607a      	str	r2, [r7, #4]
 801f426:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 801f428:	2300      	movs	r3, #0
 801f42a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	2b09      	cmp	r3, #9
 801f432:	d104      	bne.n	801f43e <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 801f434:	2320      	movs	r3, #32
 801f436:	607b      	str	r3, [r7, #4]
        is_tab = true;
 801f438:	2301      	movs	r3, #1
 801f43a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	691b      	ldr	r3, [r3, #16]
 801f442:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801f444:	6879      	ldr	r1, [r7, #4]
 801f446:	68f8      	ldr	r0, [r7, #12]
 801f448:	f000 f880 	bl	801f54c <get_glyph_dsc_id>
 801f44c:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 801f44e:	6a3b      	ldr	r3, [r7, #32]
 801f450:	2b00      	cmp	r3, #0
 801f452:	d101      	bne.n	801f458 <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 801f454:	2300      	movs	r3, #0
 801f456:	e06d      	b.n	801f534 <lv_font_get_glyph_dsc_fmt_txt+0x11a>

    int8_t kvalue = 0;
 801f458:	2300      	movs	r3, #0
 801f45a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 801f45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f460:	68db      	ldr	r3, [r3, #12]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d00f      	beq.n	801f486 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 801f466:	6839      	ldr	r1, [r7, #0]
 801f468:	68f8      	ldr	r0, [r7, #12]
 801f46a:	f000 f86f 	bl	801f54c <get_glyph_dsc_id>
 801f46e:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 801f470:	69fb      	ldr	r3, [r7, #28]
 801f472:	2b00      	cmp	r3, #0
 801f474:	d007      	beq.n	801f486 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 801f476:	69fa      	ldr	r2, [r7, #28]
 801f478:	6a39      	ldr	r1, [r7, #32]
 801f47a:	68f8      	ldr	r0, [r7, #12]
 801f47c:	f000 f9aa 	bl	801f7d4 <get_kern_value>
 801f480:	4603      	mov	r3, r0
 801f482:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801f486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f488:	685a      	ldr	r2, [r3, #4]
 801f48a:	6a3b      	ldr	r3, [r7, #32]
 801f48c:	00db      	lsls	r3, r3, #3
 801f48e:	4413      	add	r3, r2
 801f490:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801f492:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801f496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f498:	8a12      	ldrh	r2, [r2, #16]
 801f49a:	fb02 f303 	mul.w	r3, r2, r3
 801f49e:	111b      	asrs	r3, r3, #4
 801f4a0:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 801f4a2:	69bb      	ldr	r3, [r7, #24]
 801f4a4:	885b      	ldrh	r3, [r3, #2]
 801f4a6:	f3c3 130b 	ubfx	r3, r3, #4, #12
 801f4aa:	b29b      	uxth	r3, r3
 801f4ac:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 801f4ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d002      	beq.n	801f4bc <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 801f4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4b8:	005b      	lsls	r3, r3, #1
 801f4ba:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 801f4bc:	697b      	ldr	r3, [r7, #20]
 801f4be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f4c0:	4413      	add	r3, r2
 801f4c2:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4c6:	3308      	adds	r3, #8
 801f4c8:	091b      	lsrs	r3, r3, #4
 801f4ca:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 801f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4ce:	b29a      	uxth	r2, r3
 801f4d0:	68bb      	ldr	r3, [r7, #8]
 801f4d2:	809a      	strh	r2, [r3, #4]
    dsc_out->box_h = gdsc->box_h;
 801f4d4:	69bb      	ldr	r3, [r7, #24]
 801f4d6:	795b      	ldrb	r3, [r3, #5]
 801f4d8:	b29a      	uxth	r2, r3
 801f4da:	68bb      	ldr	r3, [r7, #8]
 801f4dc:	811a      	strh	r2, [r3, #8]
    dsc_out->box_w = gdsc->box_w;
 801f4de:	69bb      	ldr	r3, [r7, #24]
 801f4e0:	791b      	ldrb	r3, [r3, #4]
 801f4e2:	b29a      	uxth	r2, r3
 801f4e4:	68bb      	ldr	r3, [r7, #8]
 801f4e6:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 801f4e8:	69bb      	ldr	r3, [r7, #24]
 801f4ea:	f993 3006 	ldrsb.w	r3, [r3, #6]
 801f4ee:	b21a      	sxth	r2, r3
 801f4f0:	68bb      	ldr	r3, [r7, #8]
 801f4f2:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 801f4f4:	69bb      	ldr	r3, [r7, #24]
 801f4f6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801f4fa:	b21a      	sxth	r2, r3
 801f4fc:	68bb      	ldr	r3, [r7, #8]
 801f4fe:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f502:	7cdb      	ldrb	r3, [r3, #19]
 801f504:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801f508:	b2d9      	uxtb	r1, r3
 801f50a:	68ba      	ldr	r2, [r7, #8]
 801f50c:	7b93      	ldrb	r3, [r2, #14]
 801f50e:	f361 0303 	bfi	r3, r1, #0, #4
 801f512:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = false;
 801f514:	68ba      	ldr	r2, [r7, #8]
 801f516:	7b93      	ldrb	r3, [r2, #14]
 801f518:	f36f 1304 	bfc	r3, #4, #1
 801f51c:	7393      	strb	r3, [r2, #14]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 801f51e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f522:	2b00      	cmp	r3, #0
 801f524:	d005      	beq.n	801f532 <lv_font_get_glyph_dsc_fmt_txt+0x118>
 801f526:	68bb      	ldr	r3, [r7, #8]
 801f528:	88db      	ldrh	r3, [r3, #6]
 801f52a:	005b      	lsls	r3, r3, #1
 801f52c:	b29a      	uxth	r2, r3
 801f52e:	68bb      	ldr	r3, [r7, #8]
 801f530:	80da      	strh	r2, [r3, #6]

    return true;
 801f532:	2301      	movs	r3, #1
}
 801f534:	4618      	mov	r0, r3
 801f536:	3730      	adds	r7, #48	; 0x30
 801f538:	46bd      	mov	sp, r7
 801f53a:	bd80      	pop	{r7, pc}

0801f53c <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 801f53c:	b480      	push	{r7}
 801f53e:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
    }
#endif
}
 801f540:	bf00      	nop
 801f542:	46bd      	mov	sp, r7
 801f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f548:	4770      	bx	lr
	...

0801f54c <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 801f54c:	b590      	push	{r4, r7, lr}
 801f54e:	b091      	sub	sp, #68	; 0x44
 801f550:	af02      	add	r7, sp, #8
 801f552:	6078      	str	r0, [r7, #4]
 801f554:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 801f556:	683b      	ldr	r3, [r7, #0]
 801f558:	2b00      	cmp	r3, #0
 801f55a:	d101      	bne.n	801f560 <get_glyph_dsc_id+0x14>
 801f55c:	2300      	movs	r3, #0
 801f55e:	e133      	b.n	801f7c8 <get_glyph_dsc_id+0x27c>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	691b      	ldr	r3, [r3, #16]
 801f564:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801f566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f568:	695b      	ldr	r3, [r3, #20]
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	d009      	beq.n	801f582 <get_glyph_dsc_id+0x36>
 801f56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f570:	695b      	ldr	r3, [r3, #20]
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	683a      	ldr	r2, [r7, #0]
 801f576:	429a      	cmp	r2, r3
 801f578:	d103      	bne.n	801f582 <get_glyph_dsc_id+0x36>
 801f57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f57c:	695b      	ldr	r3, [r3, #20]
 801f57e:	685b      	ldr	r3, [r3, #4]
 801f580:	e122      	b.n	801f7c8 <get_glyph_dsc_id+0x27c>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 801f582:	2300      	movs	r3, #0
 801f584:	86fb      	strh	r3, [r7, #54]	; 0x36
 801f586:	e108      	b.n	801f79a <get_glyph_dsc_id+0x24e>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801f588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f58a:	6899      	ldr	r1, [r3, #8]
 801f58c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f58e:	4613      	mov	r3, r2
 801f590:	009b      	lsls	r3, r3, #2
 801f592:	4413      	add	r3, r2
 801f594:	009b      	lsls	r3, r3, #2
 801f596:	440b      	add	r3, r1
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	683a      	ldr	r2, [r7, #0]
 801f59c:	1ad3      	subs	r3, r2, r3
 801f59e:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801f5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5a2:	6899      	ldr	r1, [r3, #8]
 801f5a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f5a6:	4613      	mov	r3, r2
 801f5a8:	009b      	lsls	r3, r3, #2
 801f5aa:	4413      	add	r3, r2
 801f5ac:	009b      	lsls	r3, r3, #2
 801f5ae:	440b      	add	r3, r1
 801f5b0:	889b      	ldrh	r3, [r3, #4]
 801f5b2:	461a      	mov	r2, r3
 801f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5b6:	4293      	cmp	r3, r2
 801f5b8:	d903      	bls.n	801f5c2 <get_glyph_dsc_id+0x76>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801f5ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801f5bc:	3301      	adds	r3, #1
 801f5be:	86fb      	strh	r3, [r7, #54]	; 0x36
 801f5c0:	e0eb      	b.n	801f79a <get_glyph_dsc_id+0x24e>
        uint32_t glyph_id = 0;
 801f5c2:	2300      	movs	r3, #0
 801f5c4:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801f5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5c8:	6899      	ldr	r1, [r3, #8]
 801f5ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f5cc:	4613      	mov	r3, r2
 801f5ce:	009b      	lsls	r3, r3, #2
 801f5d0:	4413      	add	r3, r2
 801f5d2:	009b      	lsls	r3, r3, #2
 801f5d4:	440b      	add	r3, r1
 801f5d6:	7c9b      	ldrb	r3, [r3, #18]
 801f5d8:	2b02      	cmp	r3, #2
 801f5da:	d10d      	bne.n	801f5f8 <get_glyph_dsc_id+0xac>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801f5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5de:	6899      	ldr	r1, [r3, #8]
 801f5e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f5e2:	4613      	mov	r3, r2
 801f5e4:	009b      	lsls	r3, r3, #2
 801f5e6:	4413      	add	r3, r2
 801f5e8:	009b      	lsls	r3, r3, #2
 801f5ea:	440b      	add	r3, r1
 801f5ec:	88db      	ldrh	r3, [r3, #6]
 801f5ee:	461a      	mov	r2, r3
 801f5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5f2:	4413      	add	r3, r2
 801f5f4:	633b      	str	r3, [r7, #48]	; 0x30
 801f5f6:	e0c2      	b.n	801f77e <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5fa:	6899      	ldr	r1, [r3, #8]
 801f5fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f5fe:	4613      	mov	r3, r2
 801f600:	009b      	lsls	r3, r3, #2
 801f602:	4413      	add	r3, r2
 801f604:	009b      	lsls	r3, r3, #2
 801f606:	440b      	add	r3, r1
 801f608:	7c9b      	ldrb	r3, [r3, #18]
 801f60a:	2b00      	cmp	r3, #0
 801f60c:	d11a      	bne.n	801f644 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801f60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f610:	6899      	ldr	r1, [r3, #8]
 801f612:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f614:	4613      	mov	r3, r2
 801f616:	009b      	lsls	r3, r3, #2
 801f618:	4413      	add	r3, r2
 801f61a:	009b      	lsls	r3, r3, #2
 801f61c:	440b      	add	r3, r1
 801f61e:	68db      	ldr	r3, [r3, #12]
 801f620:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801f622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f624:	6899      	ldr	r1, [r3, #8]
 801f626:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f628:	4613      	mov	r3, r2
 801f62a:	009b      	lsls	r3, r3, #2
 801f62c:	4413      	add	r3, r2
 801f62e:	009b      	lsls	r3, r3, #2
 801f630:	440b      	add	r3, r1
 801f632:	88db      	ldrh	r3, [r3, #6]
 801f634:	4619      	mov	r1, r3
 801f636:	693a      	ldr	r2, [r7, #16]
 801f638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f63a:	4413      	add	r3, r2
 801f63c:	781b      	ldrb	r3, [r3, #0]
 801f63e:	440b      	add	r3, r1
 801f640:	633b      	str	r3, [r7, #48]	; 0x30
 801f642:	e09c      	b.n	801f77e <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f646:	6899      	ldr	r1, [r3, #8]
 801f648:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f64a:	4613      	mov	r3, r2
 801f64c:	009b      	lsls	r3, r3, #2
 801f64e:	4413      	add	r3, r2
 801f650:	009b      	lsls	r3, r3, #2
 801f652:	440b      	add	r3, r1
 801f654:	7c9b      	ldrb	r3, [r3, #18]
 801f656:	2b03      	cmp	r3, #3
 801f658:	d13c      	bne.n	801f6d4 <get_glyph_dsc_id+0x188>
            uint16_t key = rcp;
 801f65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f65c:	b29b      	uxth	r3, r3
 801f65e:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801f660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f662:	6899      	ldr	r1, [r3, #8]
 801f664:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f666:	4613      	mov	r3, r2
 801f668:	009b      	lsls	r3, r3, #2
 801f66a:	4413      	add	r3, r2
 801f66c:	009b      	lsls	r3, r3, #2
 801f66e:	440b      	add	r3, r1
 801f670:	689c      	ldr	r4, [r3, #8]
 801f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f674:	6899      	ldr	r1, [r3, #8]
 801f676:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f678:	4613      	mov	r3, r2
 801f67a:	009b      	lsls	r3, r3, #2
 801f67c:	4413      	add	r3, r2
 801f67e:	009b      	lsls	r3, r3, #2
 801f680:	440b      	add	r3, r1
 801f682:	8a1b      	ldrh	r3, [r3, #16]
 801f684:	461a      	mov	r2, r3
 801f686:	f107 000e 	add.w	r0, r7, #14
 801f68a:	4b51      	ldr	r3, [pc, #324]	; (801f7d0 <get_glyph_dsc_id+0x284>)
 801f68c:	9300      	str	r3, [sp, #0]
 801f68e:	2302      	movs	r3, #2
 801f690:	4621      	mov	r1, r4
 801f692:	f005 fadb 	bl	8024c4c <_lv_utils_bsearch>
 801f696:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801f698:	69bb      	ldr	r3, [r7, #24]
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	d06f      	beq.n	801f77e <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6a0:	6899      	ldr	r1, [r3, #8]
 801f6a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f6a4:	4613      	mov	r3, r2
 801f6a6:	009b      	lsls	r3, r3, #2
 801f6a8:	4413      	add	r3, r2
 801f6aa:	009b      	lsls	r3, r3, #2
 801f6ac:	440b      	add	r3, r1
 801f6ae:	689b      	ldr	r3, [r3, #8]
 801f6b0:	69ba      	ldr	r2, [r7, #24]
 801f6b2:	1ad3      	subs	r3, r2, r3
 801f6b4:	105b      	asrs	r3, r3, #1
 801f6b6:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6ba:	6899      	ldr	r1, [r3, #8]
 801f6bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f6be:	4613      	mov	r3, r2
 801f6c0:	009b      	lsls	r3, r3, #2
 801f6c2:	4413      	add	r3, r2
 801f6c4:	009b      	lsls	r3, r3, #2
 801f6c6:	440b      	add	r3, r1
 801f6c8:	88db      	ldrh	r3, [r3, #6]
 801f6ca:	461a      	mov	r2, r3
 801f6cc:	697b      	ldr	r3, [r7, #20]
 801f6ce:	4413      	add	r3, r2
 801f6d0:	633b      	str	r3, [r7, #48]	; 0x30
 801f6d2:	e054      	b.n	801f77e <get_glyph_dsc_id+0x232>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 801f6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6d6:	6899      	ldr	r1, [r3, #8]
 801f6d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f6da:	4613      	mov	r3, r2
 801f6dc:	009b      	lsls	r3, r3, #2
 801f6de:	4413      	add	r3, r2
 801f6e0:	009b      	lsls	r3, r3, #2
 801f6e2:	440b      	add	r3, r1
 801f6e4:	7c9b      	ldrb	r3, [r3, #18]
 801f6e6:	2b01      	cmp	r3, #1
 801f6e8:	d149      	bne.n	801f77e <get_glyph_dsc_id+0x232>
            uint16_t key = rcp;
 801f6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6ec:	b29b      	uxth	r3, r3
 801f6ee:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801f6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6f2:	6899      	ldr	r1, [r3, #8]
 801f6f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f6f6:	4613      	mov	r3, r2
 801f6f8:	009b      	lsls	r3, r3, #2
 801f6fa:	4413      	add	r3, r2
 801f6fc:	009b      	lsls	r3, r3, #2
 801f6fe:	440b      	add	r3, r1
 801f700:	689c      	ldr	r4, [r3, #8]
 801f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f704:	6899      	ldr	r1, [r3, #8]
 801f706:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f708:	4613      	mov	r3, r2
 801f70a:	009b      	lsls	r3, r3, #2
 801f70c:	4413      	add	r3, r2
 801f70e:	009b      	lsls	r3, r3, #2
 801f710:	440b      	add	r3, r1
 801f712:	8a1b      	ldrh	r3, [r3, #16]
 801f714:	461a      	mov	r2, r3
 801f716:	f107 000c 	add.w	r0, r7, #12
 801f71a:	4b2d      	ldr	r3, [pc, #180]	; (801f7d0 <get_glyph_dsc_id+0x284>)
 801f71c:	9300      	str	r3, [sp, #0]
 801f71e:	2302      	movs	r3, #2
 801f720:	4621      	mov	r1, r4
 801f722:	f005 fa93 	bl	8024c4c <_lv_utils_bsearch>
 801f726:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801f728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d027      	beq.n	801f77e <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801f72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f730:	6899      	ldr	r1, [r3, #8]
 801f732:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f734:	4613      	mov	r3, r2
 801f736:	009b      	lsls	r3, r3, #2
 801f738:	4413      	add	r3, r2
 801f73a:	009b      	lsls	r3, r3, #2
 801f73c:	440b      	add	r3, r1
 801f73e:	689b      	ldr	r3, [r3, #8]
 801f740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f742:	1ad3      	subs	r3, r2, r3
 801f744:	105b      	asrs	r3, r3, #1
 801f746:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 801f748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f74a:	6899      	ldr	r1, [r3, #8]
 801f74c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f74e:	4613      	mov	r3, r2
 801f750:	009b      	lsls	r3, r3, #2
 801f752:	4413      	add	r3, r2
 801f754:	009b      	lsls	r3, r3, #2
 801f756:	440b      	add	r3, r1
 801f758:	68db      	ldr	r3, [r3, #12]
 801f75a:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801f75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f75e:	6899      	ldr	r1, [r3, #8]
 801f760:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f762:	4613      	mov	r3, r2
 801f764:	009b      	lsls	r3, r3, #2
 801f766:	4413      	add	r3, r2
 801f768:	009b      	lsls	r3, r3, #2
 801f76a:	440b      	add	r3, r1
 801f76c:	88db      	ldrh	r3, [r3, #6]
 801f76e:	4619      	mov	r1, r3
 801f770:	6a3b      	ldr	r3, [r7, #32]
 801f772:	005b      	lsls	r3, r3, #1
 801f774:	69fa      	ldr	r2, [r7, #28]
 801f776:	4413      	add	r3, r2
 801f778:	881b      	ldrh	r3, [r3, #0]
 801f77a:	440b      	add	r3, r1
 801f77c:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        if(fdsc->cache) {
 801f77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f780:	695b      	ldr	r3, [r3, #20]
 801f782:	2b00      	cmp	r3, #0
 801f784:	d007      	beq.n	801f796 <get_glyph_dsc_id+0x24a>
            fdsc->cache->last_letter = letter;
 801f786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f788:	695b      	ldr	r3, [r3, #20]
 801f78a:	683a      	ldr	r2, [r7, #0]
 801f78c:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 801f78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f790:	695b      	ldr	r3, [r3, #20]
 801f792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f794:	605a      	str	r2, [r3, #4]
        }
        return glyph_id;
 801f796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f798:	e016      	b.n	801f7c8 <get_glyph_dsc_id+0x27c>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801f79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f79c:	8a5b      	ldrh	r3, [r3, #18]
 801f79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f7a2:	b29b      	uxth	r3, r3
 801f7a4:	461a      	mov	r2, r3
 801f7a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801f7a8:	4293      	cmp	r3, r2
 801f7aa:	f4ff aeed 	bcc.w	801f588 <get_glyph_dsc_id+0x3c>
    }

    if(fdsc->cache) {
 801f7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7b0:	695b      	ldr	r3, [r3, #20]
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	d007      	beq.n	801f7c6 <get_glyph_dsc_id+0x27a>
        fdsc->cache->last_letter = letter;
 801f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7b8:	695b      	ldr	r3, [r3, #20]
 801f7ba:	683a      	ldr	r2, [r7, #0]
 801f7bc:	601a      	str	r2, [r3, #0]
        fdsc->cache->last_glyph_id = 0;
 801f7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7c0:	695b      	ldr	r3, [r3, #20]
 801f7c2:	2200      	movs	r2, #0
 801f7c4:	605a      	str	r2, [r3, #4]
    }
    return 0;
 801f7c6:	2300      	movs	r3, #0

}
 801f7c8:	4618      	mov	r0, r3
 801f7ca:	373c      	adds	r7, #60	; 0x3c
 801f7cc:	46bd      	mov	sp, r7
 801f7ce:	bd90      	pop	{r4, r7, pc}
 801f7d0:	0801f9b5 	.word	0x0801f9b5

0801f7d4 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 801f7d4:	b580      	push	{r7, lr}
 801f7d6:	b094      	sub	sp, #80	; 0x50
 801f7d8:	af02      	add	r7, sp, #8
 801f7da:	60f8      	str	r0, [r7, #12]
 801f7dc:	60b9      	str	r1, [r7, #8]
 801f7de:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f7e0:	68fb      	ldr	r3, [r7, #12]
 801f7e2:	691b      	ldr	r3, [r3, #16]
 801f7e4:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 801f7e6:	2300      	movs	r3, #0
 801f7e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 801f7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f7ee:	7cdb      	ldrb	r3, [r3, #19]
 801f7f0:	f003 0320 	and.w	r3, r3, #32
 801f7f4:	b2db      	uxtb	r3, r3
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d160      	bne.n	801f8bc <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 801f7fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f7fc:	68db      	ldr	r3, [r3, #12]
 801f7fe:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 801f800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f802:	7adb      	ldrb	r3, [r3, #11]
 801f804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801f808:	b2db      	uxtb	r3, r3
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d129      	bne.n	801f862 <get_kern_value+0x8e>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
 801f80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	b29b      	uxth	r3, r3
 801f818:	021b      	lsls	r3, r3, #8
 801f81a:	b29a      	uxth	r2, r3
 801f81c:	68bb      	ldr	r3, [r7, #8]
 801f81e:	b29b      	uxth	r3, r3
 801f820:	4413      	add	r3, r2
 801f822:	b29b      	uxth	r3, r3
 801f824:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801f826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f828:	689b      	ldr	r3, [r3, #8]
 801f82a:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801f82e:	461a      	mov	r2, r3
 801f830:	f107 001a 	add.w	r0, r7, #26
 801f834:	4b39      	ldr	r3, [pc, #228]	; (801f91c <get_kern_value+0x148>)
 801f836:	9300      	str	r3, [sp, #0]
 801f838:	2302      	movs	r3, #2
 801f83a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f83c:	f005 fa06 	bl	8024c4c <_lv_utils_bsearch>
 801f840:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801f842:	6a3b      	ldr	r3, [r7, #32]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d063      	beq.n	801f910 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801f848:	6a3a      	ldr	r2, [r7, #32]
 801f84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f84c:	1ad3      	subs	r3, r2, r3
 801f84e:	105b      	asrs	r3, r3, #1
 801f850:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 801f852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f854:	685a      	ldr	r2, [r3, #4]
 801f856:	69fb      	ldr	r3, [r7, #28]
 801f858:	4413      	add	r3, r2
 801f85a:	781b      	ldrb	r3, [r3, #0]
 801f85c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801f860:	e056      	b.n	801f910 <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 801f862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f864:	7adb      	ldrb	r3, [r3, #11]
 801f866:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801f86a:	b2db      	uxtb	r3, r3
 801f86c:	2b40      	cmp	r3, #64	; 0x40
 801f86e:	d14f      	bne.n	801f910 <get_kern_value+0x13c>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint32_t * g_ids = kdsc->glyph_ids;
 801f870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	041a      	lsls	r2, r3, #16
 801f87a:	68bb      	ldr	r3, [r7, #8]
 801f87c:	4413      	add	r3, r2
 801f87e:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801f880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f882:	689b      	ldr	r3, [r3, #8]
 801f884:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801f888:	461a      	mov	r2, r3
 801f88a:	f107 0014 	add.w	r0, r7, #20
 801f88e:	4b24      	ldr	r3, [pc, #144]	; (801f920 <get_kern_value+0x14c>)
 801f890:	9300      	str	r3, [sp, #0]
 801f892:	2304      	movs	r3, #4
 801f894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f896:	f005 f9d9 	bl	8024c4c <_lv_utils_bsearch>
 801f89a:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d036      	beq.n	801f910 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801f8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8a6:	1ad3      	subs	r3, r2, r3
 801f8a8:	109b      	asrs	r3, r3, #2
 801f8aa:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 801f8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8ae:	685a      	ldr	r2, [r3, #4]
 801f8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8b2:	4413      	add	r3, r2
 801f8b4:	781b      	ldrb	r3, [r3, #0]
 801f8b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801f8ba:	e029      	b.n	801f910 <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 801f8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f8be:	68db      	ldr	r3, [r3, #12]
 801f8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 801f8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f8c4:	685a      	ldr	r2, [r3, #4]
 801f8c6:	68bb      	ldr	r3, [r7, #8]
 801f8c8:	4413      	add	r3, r2
 801f8ca:	781b      	ldrb	r3, [r3, #0]
 801f8cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801f8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f8d2:	689a      	ldr	r2, [r3, #8]
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	4413      	add	r3, r2
 801f8d8:	781b      	ldrb	r3, [r3, #0]
 801f8da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 801f8de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d014      	beq.n	801f910 <get_kern_value+0x13c>
 801f8e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d010      	beq.n	801f910 <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 801f8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f8f0:	681b      	ldr	r3, [r3, #0]
 801f8f2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801f8f6:	3a01      	subs	r2, #1
 801f8f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f8fa:	7b49      	ldrb	r1, [r1, #13]
 801f8fc:	fb02 f101 	mul.w	r1, r2, r1
 801f900:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801f904:	3a01      	subs	r2, #1
 801f906:	440a      	add	r2, r1
 801f908:	4413      	add	r3, r2
 801f90a:	781b      	ldrb	r3, [r3, #0]
 801f90c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 801f910:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801f914:	4618      	mov	r0, r3
 801f916:	3748      	adds	r7, #72	; 0x48
 801f918:	46bd      	mov	sp, r7
 801f91a:	bd80      	pop	{r7, pc}
 801f91c:	0801f925 	.word	0x0801f925
 801f920:	0801f96d 	.word	0x0801f96d

0801f924 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 801f924:	b480      	push	{r7}
 801f926:	b085      	sub	sp, #20
 801f928:	af00      	add	r7, sp, #0
 801f92a:	6078      	str	r0, [r7, #4]
 801f92c:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 801f932:	683b      	ldr	r3, [r7, #0]
 801f934:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801f936:	68fb      	ldr	r3, [r7, #12]
 801f938:	781a      	ldrb	r2, [r3, #0]
 801f93a:	68bb      	ldr	r3, [r7, #8]
 801f93c:	781b      	ldrb	r3, [r3, #0]
 801f93e:	429a      	cmp	r2, r3
 801f940:	d006      	beq.n	801f950 <kern_pair_8_compare+0x2c>
 801f942:	68fb      	ldr	r3, [r7, #12]
 801f944:	781b      	ldrb	r3, [r3, #0]
 801f946:	461a      	mov	r2, r3
 801f948:	68bb      	ldr	r3, [r7, #8]
 801f94a:	781b      	ldrb	r3, [r3, #0]
 801f94c:	1ad3      	subs	r3, r2, r3
 801f94e:	e007      	b.n	801f960 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	3301      	adds	r3, #1
 801f954:	781b      	ldrb	r3, [r3, #0]
 801f956:	461a      	mov	r2, r3
 801f958:	68bb      	ldr	r3, [r7, #8]
 801f95a:	3301      	adds	r3, #1
 801f95c:	781b      	ldrb	r3, [r3, #0]
 801f95e:	1ad3      	subs	r3, r2, r3

}
 801f960:	4618      	mov	r0, r3
 801f962:	3714      	adds	r7, #20
 801f964:	46bd      	mov	sp, r7
 801f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f96a:	4770      	bx	lr

0801f96c <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 801f96c:	b480      	push	{r7}
 801f96e:	b085      	sub	sp, #20
 801f970:	af00      	add	r7, sp, #0
 801f972:	6078      	str	r0, [r7, #4]
 801f974:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 801f97a:	683b      	ldr	r3, [r7, #0]
 801f97c:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801f97e:	68fb      	ldr	r3, [r7, #12]
 801f980:	881a      	ldrh	r2, [r3, #0]
 801f982:	68bb      	ldr	r3, [r7, #8]
 801f984:	881b      	ldrh	r3, [r3, #0]
 801f986:	429a      	cmp	r2, r3
 801f988:	d006      	beq.n	801f998 <kern_pair_16_compare+0x2c>
 801f98a:	68fb      	ldr	r3, [r7, #12]
 801f98c:	881b      	ldrh	r3, [r3, #0]
 801f98e:	461a      	mov	r2, r3
 801f990:	68bb      	ldr	r3, [r7, #8]
 801f992:	881b      	ldrh	r3, [r3, #0]
 801f994:	1ad3      	subs	r3, r2, r3
 801f996:	e007      	b.n	801f9a8 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 801f998:	68fb      	ldr	r3, [r7, #12]
 801f99a:	3302      	adds	r3, #2
 801f99c:	881b      	ldrh	r3, [r3, #0]
 801f99e:	461a      	mov	r2, r3
 801f9a0:	68bb      	ldr	r3, [r7, #8]
 801f9a2:	3302      	adds	r3, #2
 801f9a4:	881b      	ldrh	r3, [r3, #0]
 801f9a6:	1ad3      	subs	r3, r2, r3
}
 801f9a8:	4618      	mov	r0, r3
 801f9aa:	3714      	adds	r7, #20
 801f9ac:	46bd      	mov	sp, r7
 801f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9b2:	4770      	bx	lr

0801f9b4 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 801f9b4:	b480      	push	{r7}
 801f9b6:	b083      	sub	sp, #12
 801f9b8:	af00      	add	r7, sp, #0
 801f9ba:	6078      	str	r0, [r7, #4]
 801f9bc:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	881b      	ldrh	r3, [r3, #0]
 801f9c2:	461a      	mov	r2, r3
 801f9c4:	683b      	ldr	r3, [r7, #0]
 801f9c6:	881b      	ldrh	r3, [r3, #0]
 801f9c8:	1ad3      	subs	r3, r2, r3
}
 801f9ca:	4618      	mov	r0, r3
 801f9cc:	370c      	adds	r7, #12
 801f9ce:	46bd      	mov	sp, r7
 801f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9d4:	4770      	bx	lr

0801f9d6 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801f9d6:	b480      	push	{r7}
 801f9d8:	b083      	sub	sp, #12
 801f9da:	af00      	add	r7, sp, #0
 801f9dc:	4603      	mov	r3, r0
 801f9de:	71fb      	strb	r3, [r7, #7]
 801f9e0:	460b      	mov	r3, r1
 801f9e2:	71bb      	strb	r3, [r7, #6]
 801f9e4:	4613      	mov	r3, r2
 801f9e6:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801f9e8:	797b      	ldrb	r3, [r7, #5]
 801f9ea:	09db      	lsrs	r3, r3, #7
 801f9ec:	b2da      	uxtb	r2, r3
 801f9ee:	79bb      	ldrb	r3, [r7, #6]
 801f9f0:	09db      	lsrs	r3, r3, #7
 801f9f2:	b2db      	uxtb	r3, r3
 801f9f4:	4313      	orrs	r3, r2
 801f9f6:	b2da      	uxtb	r2, r3
 801f9f8:	79fb      	ldrb	r3, [r7, #7]
 801f9fa:	09db      	lsrs	r3, r3, #7
 801f9fc:	b2db      	uxtb	r3, r3
 801f9fe:	4313      	orrs	r3, r2
 801fa00:	b2db      	uxtb	r3, r3
}
 801fa02:	4618      	mov	r0, r3
 801fa04:	370c      	adds	r7, #12
 801fa06:	46bd      	mov	sp, r7
 801fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa0c:	4770      	bx	lr

0801fa0e <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 801fa0e:	b580      	push	{r7, lr}
 801fa10:	b082      	sub	sp, #8
 801fa12:	af00      	add	r7, sp, #0
 801fa14:	6078      	str	r0, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    lv_color_t r;
    r.full = c | 0xFF000000;
    return r;
#else /*LV_COLOR_DEPTH == 8*/
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	0c1b      	lsrs	r3, r3, #16
 801fa1a:	b2d8      	uxtb	r0, r3
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	0a1b      	lsrs	r3, r3, #8
 801fa20:	b2db      	uxtb	r3, r3
 801fa22:	687a      	ldr	r2, [r7, #4]
 801fa24:	b2d2      	uxtb	r2, r2
 801fa26:	4619      	mov	r1, r3
 801fa28:	f7ff ffd5 	bl	801f9d6 <lv_color_make>
 801fa2c:	4603      	mov	r3, r0
#endif
}
 801fa2e:	4618      	mov	r0, r3
 801fa30:	3708      	adds	r7, #8
 801fa32:	46bd      	mov	sp, r7
 801fa34:	bd80      	pop	{r7, pc}

0801fa36 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 801fa36:	b580      	push	{r7, lr}
 801fa38:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 801fa3a:	22ff      	movs	r2, #255	; 0xff
 801fa3c:	21ff      	movs	r1, #255	; 0xff
 801fa3e:	20ff      	movs	r0, #255	; 0xff
 801fa40:	f7ff ffc9 	bl	801f9d6 <lv_color_make>
 801fa44:	4603      	mov	r3, r0
}
 801fa46:	4618      	mov	r0, r3
 801fa48:	bd80      	pop	{r7, pc}
	...

0801fa4c <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 801fa4c:	b580      	push	{r7, lr}
 801fa4e:	b082      	sub	sp, #8
 801fa50:	af00      	add	r7, sp, #0
 801fa52:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 801fa54:	4a04      	ldr	r2, [pc, #16]	; (801fa68 <lv_obj_remove_style_all+0x1c>)
 801fa56:	2100      	movs	r1, #0
 801fa58:	6878      	ldr	r0, [r7, #4]
 801fa5a:	f7ec fd79 	bl	800c550 <lv_obj_remove_style>
}
 801fa5e:	bf00      	nop
 801fa60:	3708      	adds	r7, #8
 801fa62:	46bd      	mov	sp, r7
 801fa64:	bd80      	pop	{r7, pc}
 801fa66:	bf00      	nop
 801fa68:	000fffff 	.word	0x000fffff

0801fa6c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801fa6c:	b590      	push	{r4, r7, lr}
 801fa6e:	b083      	sub	sp, #12
 801fa70:	af00      	add	r7, sp, #0
 801fa72:	6078      	str	r0, [r7, #4]
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 801fa74:	2150      	movs	r1, #80	; 0x50
 801fa76:	6878      	ldr	r0, [r7, #4]
 801fa78:	f002 fd76 	bl	8022568 <lv_memset_00>

    driver->hor_res          = 320;
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801fa82:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = 240;
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	22f0      	movs	r2, #240	; 0xf0
 801fa88:	805a      	strh	r2, [r3, #2]
    driver->physical_hor_res = -1;
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fa90:	809a      	strh	r2, [r3, #4]
    driver->physical_ver_res = -1;
 801fa92:	687b      	ldr	r3, [r7, #4]
 801fa94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fa98:	80da      	strh	r2, [r3, #6]
    driver->offset_x         = 0;
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	2200      	movs	r2, #0
 801fa9e:	811a      	strh	r2, [r3, #8]
    driver->offset_y         = 0;
 801faa0:	687b      	ldr	r3, [r7, #4]
 801faa2:	2200      	movs	r2, #0
 801faa4:	815a      	strh	r2, [r3, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801faa6:	687a      	ldr	r2, [r7, #4]
 801faa8:	7c13      	ldrb	r3, [r2, #16]
 801faaa:	f36f 03c3 	bfc	r3, #3, #1
 801faae:	7413      	strb	r3, [r2, #16]
    driver->screen_transp    = 0;
 801fab0:	687a      	ldr	r2, [r7, #4]
 801fab2:	7c13      	ldrb	r3, [r2, #16]
 801fab4:	f36f 1386 	bfc	r3, #6, #1
 801fab8:	7413      	strb	r3, [r2, #16]
    driver->dpi              = LV_DPI_DEF;
 801faba:	687a      	ldr	r2, [r7, #4]
 801fabc:	6913      	ldr	r3, [r2, #16]
 801fabe:	2182      	movs	r1, #130	; 0x82
 801fac0:	f361 13d0 	bfi	r3, r1, #7, #10
 801fac4:	6113      	str	r3, [r2, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 801fac6:	687c      	ldr	r4, [r7, #4]
 801fac8:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 801facc:	f7ff ff9f 	bl	801fa0e <lv_color_hex>
 801fad0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	4a06      	ldr	r2, [pc, #24]	; (801faf0 <lv_disp_drv_init+0x84>)
 801fad8:	641a      	str	r2, [r3, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	4a04      	ldr	r2, [pc, #16]	; (801faf0 <lv_disp_drv_init+0x84>)
 801fade:	645a      	str	r2, [r3, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	2254      	movs	r2, #84	; 0x54
 801fae4:	649a      	str	r2, [r3, #72]	; 0x48
#endif

}
 801fae6:	bf00      	nop
 801fae8:	370c      	adds	r7, #12
 801faea:	46bd      	mov	sp, r7
 801faec:	bd90      	pop	{r4, r7, pc}
 801faee:	bf00      	nop
 801faf0:	08015309 	.word	0x08015309

0801faf4 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801faf4:	b580      	push	{r7, lr}
 801faf6:	b084      	sub	sp, #16
 801faf8:	af00      	add	r7, sp, #0
 801fafa:	60f8      	str	r0, [r7, #12]
 801fafc:	60b9      	str	r1, [r7, #8]
 801fafe:	607a      	str	r2, [r7, #4]
 801fb00:	603b      	str	r3, [r7, #0]
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 801fb02:	211c      	movs	r1, #28
 801fb04:	68f8      	ldr	r0, [r7, #12]
 801fb06:	f002 fd2f 	bl	8022568 <lv_memset_00>

    draw_buf->buf1    = buf1;
 801fb0a:	68fb      	ldr	r3, [r7, #12]
 801fb0c:	68ba      	ldr	r2, [r7, #8]
 801fb0e:	601a      	str	r2, [r3, #0]
    draw_buf->buf2    = buf2;
 801fb10:	68fb      	ldr	r3, [r7, #12]
 801fb12:	687a      	ldr	r2, [r7, #4]
 801fb14:	605a      	str	r2, [r3, #4]
    draw_buf->buf_act = draw_buf->buf1;
 801fb16:	68fb      	ldr	r3, [r7, #12]
 801fb18:	681a      	ldr	r2, [r3, #0]
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	609a      	str	r2, [r3, #8]
    draw_buf->size    = size_in_px_cnt;
 801fb1e:	68fb      	ldr	r3, [r7, #12]
 801fb20:	683a      	ldr	r2, [r7, #0]
 801fb22:	60da      	str	r2, [r3, #12]
}
 801fb24:	bf00      	nop
 801fb26:	3710      	adds	r7, #16
 801fb28:	46bd      	mov	sp, r7
 801fb2a:	bd80      	pop	{r7, pc}

0801fb2c <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 801fb2c:	b590      	push	{r4, r7, lr}
 801fb2e:	b087      	sub	sp, #28
 801fb30:	af00      	add	r7, sp, #0
 801fb32:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801fb34:	485f      	ldr	r0, [pc, #380]	; (801fcb4 <lv_disp_drv_register+0x188>)
 801fb36:	f001 fe5f 	bl	80217f8 <_lv_ll_ins_head>
 801fb3a:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(disp);
 801fb3c:	697b      	ldr	r3, [r7, #20]
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d100      	bne.n	801fb44 <lv_disp_drv_register+0x18>
 801fb42:	e7fe      	b.n	801fb42 <lv_disp_drv_register+0x16>
    if(!disp) {
 801fb44:	697b      	ldr	r3, [r7, #20]
 801fb46:	2b00      	cmp	r3, #0
 801fb48:	d101      	bne.n	801fb4e <lv_disp_drv_register+0x22>
        return NULL;
 801fb4a:	2300      	movs	r3, #0
 801fb4c:	e0ae      	b.n	801fcac <lv_disp_drv_register+0x180>
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d116      	bne.n	801fb84 <lv_disp_drv_register+0x58>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fb5a:	4618      	mov	r0, r3
 801fb5c:	f002 f8d0 	bl	8021d00 <lv_mem_alloc>
 801fb60:	6138      	str	r0, [r7, #16]
        LV_ASSERT_MALLOC(draw_ctx);
 801fb62:	693b      	ldr	r3, [r7, #16]
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	d100      	bne.n	801fb6a <lv_disp_drv_register+0x3e>
 801fb68:	e7fe      	b.n	801fb68 <lv_disp_drv_register+0x3c>
        if(draw_ctx == NULL) return NULL;
 801fb6a:	693b      	ldr	r3, [r7, #16]
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d101      	bne.n	801fb74 <lv_disp_drv_register+0x48>
 801fb70:	2300      	movs	r3, #0
 801fb72:	e09b      	b.n	801fcac <lv_disp_drv_register+0x180>
        driver->draw_ctx_init(driver, draw_ctx);
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fb78:	6939      	ldr	r1, [r7, #16]
 801fb7a:	6878      	ldr	r0, [r7, #4]
 801fb7c:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	693a      	ldr	r2, [r7, #16]
 801fb82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 801fb84:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801fb88:	6978      	ldr	r0, [r7, #20]
 801fb8a:	f002 fced 	bl	8022568 <lv_memset_00>

    disp->driver = driver;
 801fb8e:	697b      	ldr	r3, [r7, #20]
 801fb90:	687a      	ldr	r2, [r7, #4]
 801fb92:	601a      	str	r2, [r3, #0]

    disp->inv_en_cnt = 1;
 801fb94:	697b      	ldr	r3, [r7, #20]
 801fb96:	2201      	movs	r2, #1
 801fb98:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

    lv_disp_t * disp_def_tmp = disp_def;
 801fb9c:	4b46      	ldr	r3, [pc, #280]	; (801fcb8 <lv_disp_drv_register+0x18c>)
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	60fb      	str	r3, [r7, #12]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801fba2:	4a45      	ldr	r2, [pc, #276]	; (801fcb8 <lv_disp_drv_register+0x18c>)
 801fba4:	697b      	ldr	r3, [r7, #20]
 801fba6:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 801fba8:	697a      	ldr	r2, [r7, #20]
 801fbaa:	211e      	movs	r1, #30
 801fbac:	4843      	ldr	r0, [pc, #268]	; (801fcbc <lv_disp_drv_register+0x190>)
 801fbae:	f003 fb9f 	bl	80232f0 <lv_timer_create>
 801fbb2:	4602      	mov	r2, r0
 801fbb4:	697b      	ldr	r3, [r7, #20]
 801fbb6:	605a      	str	r2, [r3, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 801fbb8:	697b      	ldr	r3, [r7, #20]
 801fbba:	685b      	ldr	r3, [r3, #4]
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	d100      	bne.n	801fbc2 <lv_disp_drv_register+0x96>
 801fbc0:	e7fe      	b.n	801fbc0 <lv_disp_drv_register+0x94>
    if(disp->refr_timer == NULL) {
 801fbc2:	697b      	ldr	r3, [r7, #20]
 801fbc4:	685b      	ldr	r3, [r3, #4]
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	d104      	bne.n	801fbd4 <lv_disp_drv_register+0xa8>
        lv_mem_free(disp);
 801fbca:	6978      	ldr	r0, [r7, #20]
 801fbcc:	f002 f8c8 	bl	8021d60 <lv_mem_free>
        return NULL;
 801fbd0:	2300      	movs	r3, #0
 801fbd2:	e06b      	b.n	801fcac <lv_disp_drv_register+0x180>
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	7c1b      	ldrb	r3, [r3, #16]
 801fbd8:	f003 0302 	and.w	r3, r3, #2
 801fbdc:	b2db      	uxtb	r3, r3
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d012      	beq.n	801fc08 <lv_disp_drv_register+0xdc>
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	68db      	ldr	r3, [r3, #12]
 801fbe6:	68da      	ldr	r2, [r3, #12]
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fbee:	4619      	mov	r1, r3
 801fbf0:	687b      	ldr	r3, [r7, #4]
 801fbf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fbf6:	fb01 f303 	mul.w	r3, r1, r3
 801fbfa:	429a      	cmp	r2, r3
 801fbfc:	d204      	bcs.n	801fc08 <lv_disp_drv_register+0xdc>
        driver->full_refresh = 0;
 801fbfe:	687a      	ldr	r2, [r7, #4]
 801fc00:	7c13      	ldrb	r3, [r2, #16]
 801fc02:	f36f 0341 	bfc	r3, #1, #1
 801fc06:	7413      	strb	r3, [r2, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 801fc08:	697c      	ldr	r4, [r7, #20]
 801fc0a:	f7ff ff14 	bl	801fa36 <lv_color_white>
 801fc0e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801fc12:	697b      	ldr	r3, [r7, #20]
 801fc14:	22ff      	movs	r2, #255	; 0xff
 801fc16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 801fc1a:	2000      	movs	r0, #0
 801fc1c:	f7e6 f89e 	bl	8005d5c <lv_obj_create>
 801fc20:	4602      	mov	r2, r0
 801fc22:	697b      	ldr	r3, [r7, #20]
 801fc24:	611a      	str	r2, [r3, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 801fc26:	2000      	movs	r0, #0
 801fc28:	f7e6 f898 	bl	8005d5c <lv_obj_create>
 801fc2c:	4602      	mov	r2, r0
 801fc2e:	697b      	ldr	r3, [r7, #20]
 801fc30:	61da      	str	r2, [r3, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 801fc32:	2000      	movs	r0, #0
 801fc34:	f7e6 f892 	bl	8005d5c <lv_obj_create>
 801fc38:	4602      	mov	r2, r0
 801fc3a:	697b      	ldr	r3, [r7, #20]
 801fc3c:	621a      	str	r2, [r3, #32]
    lv_obj_remove_style_all(disp->top_layer);
 801fc3e:	697b      	ldr	r3, [r7, #20]
 801fc40:	69db      	ldr	r3, [r3, #28]
 801fc42:	4618      	mov	r0, r3
 801fc44:	f7ff ff02 	bl	801fa4c <lv_obj_remove_style_all>
    lv_obj_remove_style_all(disp->sys_layer);
 801fc48:	697b      	ldr	r3, [r7, #20]
 801fc4a:	6a1b      	ldr	r3, [r3, #32]
 801fc4c:	4618      	mov	r0, r3
 801fc4e:	f7ff fefd 	bl	801fa4c <lv_obj_remove_style_all>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 801fc52:	697b      	ldr	r3, [r7, #20]
 801fc54:	69db      	ldr	r3, [r3, #28]
 801fc56:	2102      	movs	r1, #2
 801fc58:	4618      	mov	r0, r3
 801fc5a:	f7e6 f893 	bl	8005d84 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 801fc5e:	697b      	ldr	r3, [r7, #20]
 801fc60:	6a1b      	ldr	r3, [r3, #32]
 801fc62:	2102      	movs	r1, #2
 801fc64:	4618      	mov	r0, r3
 801fc66:	f7e6 f88d 	bl	8005d84 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 801fc6a:	697b      	ldr	r3, [r7, #20]
 801fc6c:	69db      	ldr	r3, [r3, #28]
 801fc6e:	2100      	movs	r1, #0
 801fc70:	4618      	mov	r0, r3
 801fc72:	f7ea fb78 	bl	800a366 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 801fc76:	697b      	ldr	r3, [r7, #20]
 801fc78:	6a1b      	ldr	r3, [r3, #32]
 801fc7a:	2100      	movs	r1, #0
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	f7ea fb72 	bl	800a366 <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 801fc82:	697b      	ldr	r3, [r7, #20]
 801fc84:	691b      	ldr	r3, [r3, #16]
 801fc86:	4618      	mov	r0, r3
 801fc88:	f7e9 fce9 	bl	800965e <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801fc8c:	4a0a      	ldr	r2, [pc, #40]	; (801fcb8 <lv_disp_drv_register+0x18c>)
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	6013      	str	r3, [r2, #0]
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 801fc92:	4b09      	ldr	r3, [pc, #36]	; (801fcb8 <lv_disp_drv_register+0x18c>)
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d102      	bne.n	801fca0 <lv_disp_drv_register+0x174>
 801fc9a:	4a07      	ldr	r2, [pc, #28]	; (801fcb8 <lv_disp_drv_register+0x18c>)
 801fc9c:	697b      	ldr	r3, [r7, #20]
 801fc9e:	6013      	str	r3, [r2, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 801fca0:	697b      	ldr	r3, [r7, #20]
 801fca2:	685b      	ldr	r3, [r3, #4]
 801fca4:	4618      	mov	r0, r3
 801fca6:	f003 fb8f 	bl	80233c8 <lv_timer_ready>

    return disp;
 801fcaa:	697b      	ldr	r3, [r7, #20]
}
 801fcac:	4618      	mov	r0, r3
 801fcae:	371c      	adds	r7, #28
 801fcb0:	46bd      	mov	sp, r7
 801fcb2:	bd90      	pop	{r4, r7, pc}
 801fcb4:	20000858 	.word	0x20000858
 801fcb8:	2000082c 	.word	0x2000082c
 801fcbc:	0800e69d 	.word	0x0800e69d

0801fcc0 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 801fcc0:	b480      	push	{r7}
 801fcc2:	af00      	add	r7, sp, #0
    return disp_def;
 801fcc4:	4b03      	ldr	r3, [pc, #12]	; (801fcd4 <lv_disp_get_default+0x14>)
 801fcc6:	681b      	ldr	r3, [r3, #0]
}
 801fcc8:	4618      	mov	r0, r3
 801fcca:	46bd      	mov	sp, r7
 801fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcd0:	4770      	bx	lr
 801fcd2:	bf00      	nop
 801fcd4:	2000082c 	.word	0x2000082c

0801fcd8 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801fcd8:	b580      	push	{r7, lr}
 801fcda:	b082      	sub	sp, #8
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d102      	bne.n	801fcec <lv_disp_get_hor_res+0x14>
 801fce6:	f7ff ffeb 	bl	801fcc0 <lv_disp_get_default>
 801fcea:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d101      	bne.n	801fcf6 <lv_disp_get_hor_res+0x1e>
        return 0;
 801fcf2:	2300      	movs	r3, #0
 801fcf4:	e012      	b.n	801fd1c <lv_disp_get_hor_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	7c1b      	ldrb	r3, [r3, #16]
 801fcfc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fd00:	b2db      	uxtb	r3, r3
 801fd02:	2b01      	cmp	r3, #1
 801fd04:	d001      	beq.n	801fd0a <lv_disp_get_hor_res+0x32>
 801fd06:	2b03      	cmp	r3, #3
 801fd08:	d104      	bne.n	801fd14 <lv_disp_get_hor_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 801fd0a:	687b      	ldr	r3, [r7, #4]
 801fd0c:	681b      	ldr	r3, [r3, #0]
 801fd0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fd12:	e003      	b.n	801fd1c <lv_disp_get_hor_res+0x44>
            default:
                return disp->driver->hor_res;
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	f9b3 3000 	ldrsh.w	r3, [r3]
        }
    }
}
 801fd1c:	4618      	mov	r0, r3
 801fd1e:	3708      	adds	r7, #8
 801fd20:	46bd      	mov	sp, r7
 801fd22:	bd80      	pop	{r7, pc}

0801fd24 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801fd24:	b580      	push	{r7, lr}
 801fd26:	b082      	sub	sp, #8
 801fd28:	af00      	add	r7, sp, #0
 801fd2a:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d102      	bne.n	801fd38 <lv_disp_get_ver_res+0x14>
 801fd32:	f7ff ffc5 	bl	801fcc0 <lv_disp_get_default>
 801fd36:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d101      	bne.n	801fd42 <lv_disp_get_ver_res+0x1e>
        return 0;
 801fd3e:	2300      	movs	r3, #0
 801fd40:	e012      	b.n	801fd68 <lv_disp_get_ver_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	681b      	ldr	r3, [r3, #0]
 801fd46:	7c1b      	ldrb	r3, [r3, #16]
 801fd48:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801fd4c:	b2db      	uxtb	r3, r3
 801fd4e:	2b01      	cmp	r3, #1
 801fd50:	d001      	beq.n	801fd56 <lv_disp_get_ver_res+0x32>
 801fd52:	2b03      	cmp	r3, #3
 801fd54:	d104      	bne.n	801fd60 <lv_disp_get_ver_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	681b      	ldr	r3, [r3, #0]
 801fd5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fd5e:	e003      	b.n	801fd68 <lv_disp_get_ver_res+0x44>
            default:
                return disp->driver->ver_res;
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	681b      	ldr	r3, [r3, #0]
 801fd64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        }
    }
}
 801fd68:	4618      	mov	r0, r3
 801fd6a:	3708      	adds	r7, #8
 801fd6c:	46bd      	mov	sp, r7
 801fd6e:	bd80      	pop	{r7, pc}

0801fd70 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 801fd70:	b580      	push	{r7, lr}
 801fd72:	b082      	sub	sp, #8
 801fd74:	af00      	add	r7, sp, #0
 801fd76:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d102      	bne.n	801fd84 <lv_disp_get_dpi+0x14>
 801fd7e:	f7ff ff9f 	bl	801fcc0 <lv_disp_get_default>
 801fd82:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d101      	bne.n	801fd8e <lv_disp_get_dpi+0x1e>
 801fd8a:	2382      	movs	r3, #130	; 0x82
 801fd8c:	e006      	b.n	801fd9c <lv_disp_get_dpi+0x2c>
    return disp->driver->dpi;
 801fd8e:	687b      	ldr	r3, [r7, #4]
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	691b      	ldr	r3, [r3, #16]
 801fd94:	f3c3 13c9 	ubfx	r3, r3, #7, #10
 801fd98:	b29b      	uxth	r3, r3
 801fd9a:	b21b      	sxth	r3, r3
}
 801fd9c:	4618      	mov	r0, r3
 801fd9e:	3708      	adds	r7, #8
 801fda0:	46bd      	mov	sp, r7
 801fda2:	bd80      	pop	{r7, pc}

0801fda4 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 801fda4:	b480      	push	{r7}
 801fda6:	b083      	sub	sp, #12
 801fda8:	af00      	add	r7, sp, #0
 801fdaa:	6078      	str	r0, [r7, #4]
    disp_drv->draw_buf->flushing = 0;
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	68db      	ldr	r3, [r3, #12]
 801fdb0:	2200      	movs	r2, #0
 801fdb2:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	68db      	ldr	r3, [r3, #12]
 801fdb8:	2200      	movs	r2, #0
 801fdba:	615a      	str	r2, [r3, #20]
}
 801fdbc:	bf00      	nop
 801fdbe:	370c      	adds	r7, #12
 801fdc0:	46bd      	mov	sp, r7
 801fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdc6:	4770      	bx	lr

0801fdc8 <lv_disp_get_draw_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
 801fdc8:	b480      	push	{r7}
 801fdca:	b083      	sub	sp, #12
 801fdcc:	af00      	add	r7, sp, #0
 801fdce:	6078      	str	r0, [r7, #4]
    return disp->driver->draw_buf;
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	68db      	ldr	r3, [r3, #12]
}
 801fdd6:	4618      	mov	r0, r3
 801fdd8:	370c      	adds	r7, #12
 801fdda:	46bd      	mov	sp, r7
 801fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fde0:	4770      	bx	lr
	...

0801fde4 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 801fde4:	b580      	push	{r7, lr}
 801fde6:	b082      	sub	sp, #8
 801fde8:	af00      	add	r7, sp, #0
 801fdea:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	2b00      	cmp	r3, #0
 801fdf0:	d104      	bne.n	801fdfc <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801fdf2:	4807      	ldr	r0, [pc, #28]	; (801fe10 <lv_indev_get_next+0x2c>)
 801fdf4:	f001 fdc5 	bl	8021982 <_lv_ll_get_head>
 801fdf8:	4603      	mov	r3, r0
 801fdfa:	e004      	b.n	801fe06 <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801fdfc:	6879      	ldr	r1, [r7, #4]
 801fdfe:	4804      	ldr	r0, [pc, #16]	; (801fe10 <lv_indev_get_next+0x2c>)
 801fe00:	f001 fde1 	bl	80219c6 <_lv_ll_get_next>
 801fe04:	4603      	mov	r3, r0
}
 801fe06:	4618      	mov	r0, r3
 801fe08:	3708      	adds	r7, #8
 801fe0a:	46bd      	mov	sp, r7
 801fe0c:	bd80      	pop	{r7, pc}
 801fe0e:	bf00      	nop
 801fe10:	20000864 	.word	0x20000864

0801fe14 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 801fe14:	b480      	push	{r7}
 801fe16:	b083      	sub	sp, #12
 801fe18:	af00      	add	r7, sp, #0
 801fe1a:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 801fe1c:	4b07      	ldr	r3, [pc, #28]	; (801fe3c <lv_tick_inc+0x28>)
 801fe1e:	2200      	movs	r2, #0
 801fe20:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801fe22:	4b07      	ldr	r3, [pc, #28]	; (801fe40 <lv_tick_inc+0x2c>)
 801fe24:	681a      	ldr	r2, [r3, #0]
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	4413      	add	r3, r2
 801fe2a:	4a05      	ldr	r2, [pc, #20]	; (801fe40 <lv_tick_inc+0x2c>)
 801fe2c:	6013      	str	r3, [r2, #0]
}
 801fe2e:	bf00      	nop
 801fe30:	370c      	adds	r7, #12
 801fe32:	46bd      	mov	sp, r7
 801fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe38:	4770      	bx	lr
 801fe3a:	bf00      	nop
 801fe3c:	20000834 	.word	0x20000834
 801fe40:	20000830 	.word	0x20000830

0801fe44 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 801fe44:	b480      	push	{r7}
 801fe46:	b083      	sub	sp, #12
 801fe48:	af00      	add	r7, sp, #0
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801fe4a:	4b09      	ldr	r3, [pc, #36]	; (801fe70 <lv_tick_get+0x2c>)
 801fe4c:	2201      	movs	r2, #1
 801fe4e:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 801fe50:	4b08      	ldr	r3, [pc, #32]	; (801fe74 <lv_tick_get+0x30>)
 801fe52:	681b      	ldr	r3, [r3, #0]
 801fe54:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 801fe56:	4b06      	ldr	r3, [pc, #24]	; (801fe70 <lv_tick_get+0x2c>)
 801fe58:	781b      	ldrb	r3, [r3, #0]
 801fe5a:	b2db      	uxtb	r3, r3
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d0f4      	beq.n	801fe4a <lv_tick_get+0x6>

    return result;
 801fe60:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801fe62:	4618      	mov	r0, r3
 801fe64:	370c      	adds	r7, #12
 801fe66:	46bd      	mov	sp, r7
 801fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe6c:	4770      	bx	lr
 801fe6e:	bf00      	nop
 801fe70:	20000834 	.word	0x20000834
 801fe74:	20000830 	.word	0x20000830

0801fe78 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801fe78:	b580      	push	{r7, lr}
 801fe7a:	b084      	sub	sp, #16
 801fe7c:	af00      	add	r7, sp, #0
 801fe7e:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801fe80:	f7ff ffe0 	bl	801fe44 <lv_tick_get>
 801fe84:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 801fe86:	68fa      	ldr	r2, [r7, #12]
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	429a      	cmp	r2, r3
 801fe8c:	d304      	bcc.n	801fe98 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801fe8e:	68fa      	ldr	r2, [r7, #12]
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	1ad3      	subs	r3, r2, r3
 801fe94:	607b      	str	r3, [r7, #4]
 801fe96:	e006      	b.n	801fea6 <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	425b      	negs	r3, r3
 801fe9c:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801fe9e:	687a      	ldr	r2, [r7, #4]
 801fea0:	68fb      	ldr	r3, [r7, #12]
 801fea2:	4413      	add	r3, r2
 801fea4:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 801fea6:	687b      	ldr	r3, [r7, #4]
}
 801fea8:	4618      	mov	r0, r3
 801feaa:	3710      	adds	r7, #16
 801feac:	46bd      	mov	sp, r7
 801feae:	bd80      	pop	{r7, pc}

0801feb0 <_lv_anim_core_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_anim_core_init(void)
{
 801feb0:	b580      	push	{r7, lr}
 801feb2:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801feb4:	2144      	movs	r1, #68	; 0x44
 801feb6:	4809      	ldr	r0, [pc, #36]	; (801fedc <_lv_anim_core_init+0x2c>)
 801feb8:	f001 fc85 	bl	80217c6 <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 801febc:	2200      	movs	r2, #0
 801febe:	211e      	movs	r1, #30
 801fec0:	4807      	ldr	r0, [pc, #28]	; (801fee0 <_lv_anim_core_init+0x30>)
 801fec2:	f003 fa15 	bl	80232f0 <lv_timer_create>
 801fec6:	4603      	mov	r3, r0
 801fec8:	4a06      	ldr	r2, [pc, #24]	; (801fee4 <_lv_anim_core_init+0x34>)
 801feca:	6013      	str	r3, [r2, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 801fecc:	f000 fae8 	bl	80204a0 <anim_mark_list_change>
    anim_list_changed = false;
 801fed0:	4b05      	ldr	r3, [pc, #20]	; (801fee8 <_lv_anim_core_init+0x38>)
 801fed2:	2200      	movs	r2, #0
 801fed4:	701a      	strb	r2, [r3, #0]
}
 801fed6:	bf00      	nop
 801fed8:	bd80      	pop	{r7, pc}
 801feda:	bf00      	nop
 801fedc:	2000087c 	.word	0x2000087c
 801fee0:	080201f5 	.word	0x080201f5
 801fee4:	20000840 	.word	0x20000840
 801fee8:	2000083c 	.word	0x2000083c

0801feec <lv_anim_init>:

void lv_anim_init(lv_anim_t * a)
{
 801feec:	b580      	push	{r7, lr}
 801feee:	b082      	sub	sp, #8
 801fef0:	af00      	add	r7, sp, #0
 801fef2:	6078      	str	r0, [r7, #4]
    lv_memset_00(a, sizeof(lv_anim_t));
 801fef4:	2144      	movs	r1, #68	; 0x44
 801fef6:	6878      	ldr	r0, [r7, #4]
 801fef8:	f002 fb36 	bl	8022568 <lv_memset_00>
    a->time = 500;
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801ff02:	62da      	str	r2, [r3, #44]	; 0x2c
    a->start_value = 0;
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	2200      	movs	r2, #0
 801ff08:	621a      	str	r2, [r3, #32]
    a->end_value = 100;
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	2264      	movs	r2, #100	; 0x64
 801ff0e:	629a      	str	r2, [r3, #40]	; 0x28
    a->repeat_cnt = 1;
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	2201      	movs	r2, #1
 801ff14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	4a06      	ldr	r2, [pc, #24]	; (801ff34 <lv_anim_init+0x48>)
 801ff1c:	61da      	str	r2, [r3, #28]
    a->early_apply = 1;
 801ff1e:	687a      	ldr	r2, [r7, #4]
 801ff20:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801ff24:	f043 0301 	orr.w	r3, r3, #1
 801ff28:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 801ff2c:	bf00      	nop
 801ff2e:	3708      	adds	r7, #8
 801ff30:	46bd      	mov	sp, r7
 801ff32:	bd80      	pop	{r7, pc}
 801ff34:	0802013f 	.word	0x0802013f

0801ff38 <lv_anim_start>:

lv_anim_t * lv_anim_start(const lv_anim_t * a)
{
 801ff38:	b580      	push	{r7, lr}
 801ff3a:	b084      	sub	sp, #16
 801ff3c:	af00      	add	r7, sp, #0
 801ff3e:	6078      	str	r0, [r7, #4]
    TRACE_ANIM("begin");

    /*Do not let two animations for the same 'var' with the same 'exec_cb'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	685b      	ldr	r3, [r3, #4]
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d007      	beq.n	801ff58 <lv_anim_start+0x20>
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	681a      	ldr	r2, [r3, #0]
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	685b      	ldr	r3, [r3, #4]
 801ff50:	4619      	mov	r1, r3
 801ff52:	4610      	mov	r0, r2
 801ff54:	f000 f868 	bl	8020028 <lv_anim_del>

    /*If the list is empty the anim timer was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 801ff58:	4830      	ldr	r0, [pc, #192]	; (802001c <lv_anim_start+0xe4>)
 801ff5a:	f001 fd5d 	bl	8021a18 <_lv_ll_is_empty>
 801ff5e:	4603      	mov	r3, r0
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d004      	beq.n	801ff6e <lv_anim_start+0x36>
        last_timer_run = lv_tick_get();
 801ff64:	f7ff ff6e 	bl	801fe44 <lv_tick_get>
 801ff68:	4603      	mov	r3, r0
 801ff6a:	4a2d      	ldr	r2, [pc, #180]	; (8020020 <lv_anim_start+0xe8>)
 801ff6c:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801ff6e:	482b      	ldr	r0, [pc, #172]	; (802001c <lv_anim_start+0xe4>)
 801ff70:	f001 fc42 	bl	80217f8 <_lv_ll_ins_head>
 801ff74:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(new_anim);
 801ff76:	68fb      	ldr	r3, [r7, #12]
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	d100      	bne.n	801ff7e <lv_anim_start+0x46>
 801ff7c:	e7fe      	b.n	801ff7c <lv_anim_start+0x44>
    if(new_anim == NULL) return NULL;
 801ff7e:	68fb      	ldr	r3, [r7, #12]
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	d101      	bne.n	801ff88 <lv_anim_start+0x50>
 801ff84:	2300      	movs	r3, #0
 801ff86:	e045      	b.n	8020014 <lv_anim_start+0xdc>

    /*Initialize the animation descriptor*/
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 801ff88:	2244      	movs	r2, #68	; 0x44
 801ff8a:	6879      	ldr	r1, [r7, #4]
 801ff8c:	68f8      	ldr	r0, [r7, #12]
 801ff8e:	f002 f845 	bl	802201c <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	681b      	ldr	r3, [r3, #0]
 801ff96:	687a      	ldr	r2, [r7, #4]
 801ff98:	429a      	cmp	r2, r3
 801ff9a:	d102      	bne.n	801ffa2 <lv_anim_start+0x6a>
 801ff9c:	68fb      	ldr	r3, [r7, #12]
 801ff9e:	68fa      	ldr	r2, [r7, #12]
 801ffa0:	601a      	str	r2, [r3, #0]
    new_anim->run_round = anim_run_round;
 801ffa2:	4b20      	ldr	r3, [pc, #128]	; (8020024 <lv_anim_start+0xec>)
 801ffa4:	7819      	ldrb	r1, [r3, #0]
 801ffa6:	68fa      	ldr	r2, [r7, #12]
 801ffa8:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801ffac:	f361 0382 	bfi	r3, r1, #2, #1
 801ffb0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

    /*Set the start value*/
    if(new_anim->early_apply) {
 801ffb4:	68fb      	ldr	r3, [r7, #12]
 801ffb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ffba:	f003 0301 	and.w	r3, r3, #1
 801ffbe:	b2db      	uxtb	r3, r3
 801ffc0:	2b00      	cmp	r3, #0
 801ffc2:	d024      	beq.n	802000e <lv_anim_start+0xd6>
        if(new_anim->get_value_cb) {
 801ffc4:	68fb      	ldr	r3, [r7, #12]
 801ffc6:	695b      	ldr	r3, [r3, #20]
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d010      	beq.n	801ffee <lv_anim_start+0xb6>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 801ffcc:	68fb      	ldr	r3, [r7, #12]
 801ffce:	695b      	ldr	r3, [r3, #20]
 801ffd0:	68f8      	ldr	r0, [r7, #12]
 801ffd2:	4798      	blx	r3
 801ffd4:	60b8      	str	r0, [r7, #8]
            new_anim->start_value += v_ofs;
 801ffd6:	68fb      	ldr	r3, [r7, #12]
 801ffd8:	6a1a      	ldr	r2, [r3, #32]
 801ffda:	68bb      	ldr	r3, [r7, #8]
 801ffdc:	441a      	add	r2, r3
 801ffde:	68fb      	ldr	r3, [r7, #12]
 801ffe0:	621a      	str	r2, [r3, #32]
            new_anim->end_value += v_ofs;
 801ffe2:	68fb      	ldr	r3, [r7, #12]
 801ffe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ffe6:	68bb      	ldr	r3, [r7, #8]
 801ffe8:	441a      	add	r2, r3
 801ffea:	68fb      	ldr	r3, [r7, #12]
 801ffec:	629a      	str	r2, [r3, #40]	; 0x28
        }

        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 801ffee:	68fb      	ldr	r3, [r7, #12]
 801fff0:	685b      	ldr	r3, [r3, #4]
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	d00b      	beq.n	802000e <lv_anim_start+0xd6>
 801fff6:	68fb      	ldr	r3, [r7, #12]
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d007      	beq.n	802000e <lv_anim_start+0xd6>
 801fffe:	68fb      	ldr	r3, [r7, #12]
 8020000:	685b      	ldr	r3, [r3, #4]
 8020002:	68fa      	ldr	r2, [r7, #12]
 8020004:	6810      	ldr	r0, [r2, #0]
 8020006:	68fa      	ldr	r2, [r7, #12]
 8020008:	6a12      	ldr	r2, [r2, #32]
 802000a:	4611      	mov	r1, r2
 802000c:	4798      	blx	r3
    }

    /*Creating an animation changed the linked list.
     *It's important if it happens in a ready callback. (see `anim_timer`)*/
    anim_mark_list_change();
 802000e:	f000 fa47 	bl	80204a0 <anim_mark_list_change>

    TRACE_ANIM("finished");
    return new_anim;
 8020012:	68fb      	ldr	r3, [r7, #12]
}
 8020014:	4618      	mov	r0, r3
 8020016:	3710      	adds	r7, #16
 8020018:	46bd      	mov	sp, r7
 802001a:	bd80      	pop	{r7, pc}
 802001c:	2000087c 	.word	0x2000087c
 8020020:	20000838 	.word	0x20000838
 8020024:	2000083d 	.word	0x2000083d

08020028 <lv_anim_del>:

    return playtime;
}

bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 8020028:	b580      	push	{r7, lr}
 802002a:	b086      	sub	sp, #24
 802002c:	af00      	add	r7, sp, #0
 802002e:	6078      	str	r0, [r7, #4]
 8020030:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 8020032:	2300      	movs	r3, #0
 8020034:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8020036:	481b      	ldr	r0, [pc, #108]	; (80200a4 <lv_anim_del+0x7c>)
 8020038:	f001 fca3 	bl	8021982 <_lv_ll_get_head>
 802003c:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 802003e:	e029      	b.n	8020094 <lv_anim_del+0x6c>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8020040:	6979      	ldr	r1, [r7, #20]
 8020042:	4818      	ldr	r0, [pc, #96]	; (80200a4 <lv_anim_del+0x7c>)
 8020044:	f001 fcbf 	bl	80219c6 <_lv_ll_get_next>
 8020048:	60f8      	str	r0, [r7, #12]

        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 802004a:	697b      	ldr	r3, [r7, #20]
 802004c:	681b      	ldr	r3, [r3, #0]
 802004e:	687a      	ldr	r2, [r7, #4]
 8020050:	429a      	cmp	r2, r3
 8020052:	d002      	beq.n	802005a <lv_anim_del+0x32>
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	2b00      	cmp	r3, #0
 8020058:	d11a      	bne.n	8020090 <lv_anim_del+0x68>
 802005a:	697b      	ldr	r3, [r7, #20]
 802005c:	685b      	ldr	r3, [r3, #4]
 802005e:	683a      	ldr	r2, [r7, #0]
 8020060:	429a      	cmp	r2, r3
 8020062:	d002      	beq.n	802006a <lv_anim_del+0x42>
 8020064:	683b      	ldr	r3, [r7, #0]
 8020066:	2b00      	cmp	r3, #0
 8020068:	d112      	bne.n	8020090 <lv_anim_del+0x68>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 802006a:	6979      	ldr	r1, [r7, #20]
 802006c:	480d      	ldr	r0, [pc, #52]	; (80200a4 <lv_anim_del+0x7c>)
 802006e:	f001 fc2b 	bl	80218c8 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8020072:	697b      	ldr	r3, [r7, #20]
 8020074:	691b      	ldr	r3, [r3, #16]
 8020076:	2b00      	cmp	r3, #0
 8020078:	d003      	beq.n	8020082 <lv_anim_del+0x5a>
 802007a:	697b      	ldr	r3, [r7, #20]
 802007c:	691b      	ldr	r3, [r3, #16]
 802007e:	6978      	ldr	r0, [r7, #20]
 8020080:	4798      	blx	r3
            lv_mem_free(a);
 8020082:	6978      	ldr	r0, [r7, #20]
 8020084:	f001 fe6c 	bl	8021d60 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 8020088:	f000 fa0a 	bl	80204a0 <anim_mark_list_change>
                                       the linked list*/
            del = true;
 802008c:	2301      	movs	r3, #1
 802008e:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 8020090:	68fb      	ldr	r3, [r7, #12]
 8020092:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 8020094:	697b      	ldr	r3, [r7, #20]
 8020096:	2b00      	cmp	r3, #0
 8020098:	d1d2      	bne.n	8020040 <lv_anim_del+0x18>
    }

    return del;
 802009a:	7cfb      	ldrb	r3, [r7, #19]
}
 802009c:	4618      	mov	r0, r3
 802009e:	3718      	adds	r7, #24
 80200a0:	46bd      	mov	sp, r7
 80200a2:	bd80      	pop	{r7, pc}
 80200a4:	2000087c 	.word	0x2000087c

080200a8 <lv_anim_get>:
    _lv_ll_clear(&LV_GC_ROOT(_lv_anim_ll));
    anim_mark_list_change();
}

lv_anim_t * lv_anim_get(void * var, lv_anim_exec_xcb_t exec_cb)
{
 80200a8:	b580      	push	{r7, lr}
 80200aa:	b084      	sub	sp, #16
 80200ac:	af00      	add	r7, sp, #0
 80200ae:	6078      	str	r0, [r7, #4]
 80200b0:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 80200b2:	4810      	ldr	r0, [pc, #64]	; (80200f4 <lv_anim_get+0x4c>)
 80200b4:	f001 fc65 	bl	8021982 <_lv_ll_get_head>
 80200b8:	60f8      	str	r0, [r7, #12]
 80200ba:	e013      	b.n	80200e4 <lv_anim_get+0x3c>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80200bc:	68fb      	ldr	r3, [r7, #12]
 80200be:	681b      	ldr	r3, [r3, #0]
 80200c0:	687a      	ldr	r2, [r7, #4]
 80200c2:	429a      	cmp	r2, r3
 80200c4:	d109      	bne.n	80200da <lv_anim_get+0x32>
 80200c6:	68fb      	ldr	r3, [r7, #12]
 80200c8:	685b      	ldr	r3, [r3, #4]
 80200ca:	683a      	ldr	r2, [r7, #0]
 80200cc:	429a      	cmp	r2, r3
 80200ce:	d002      	beq.n	80200d6 <lv_anim_get+0x2e>
 80200d0:	683b      	ldr	r3, [r7, #0]
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d101      	bne.n	80200da <lv_anim_get+0x32>
            return a;
 80200d6:	68fb      	ldr	r3, [r7, #12]
 80200d8:	e008      	b.n	80200ec <lv_anim_get+0x44>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 80200da:	68f9      	ldr	r1, [r7, #12]
 80200dc:	4805      	ldr	r0, [pc, #20]	; (80200f4 <lv_anim_get+0x4c>)
 80200de:	f001 fc72 	bl	80219c6 <_lv_ll_get_next>
 80200e2:	60f8      	str	r0, [r7, #12]
 80200e4:	68fb      	ldr	r3, [r7, #12]
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	d1e8      	bne.n	80200bc <lv_anim_get+0x14>
        }
    }

    return NULL;
 80200ea:	2300      	movs	r3, #0
}
 80200ec:	4618      	mov	r0, r3
 80200ee:	3710      	adds	r7, #16
 80200f0:	46bd      	mov	sp, r7
 80200f2:	bd80      	pop	{r7, pc}
 80200f4:	2000087c 	.word	0x2000087c

080200f8 <lv_anim_speed_to_time>:

    return cnt;
}

uint32_t lv_anim_speed_to_time(uint32_t speed, int32_t start, int32_t end)
{
 80200f8:	b480      	push	{r7}
 80200fa:	b087      	sub	sp, #28
 80200fc:	af00      	add	r7, sp, #0
 80200fe:	60f8      	str	r0, [r7, #12]
 8020100:	60b9      	str	r1, [r7, #8]
 8020102:	607a      	str	r2, [r7, #4]
    uint32_t d    = LV_ABS(start - end);
 8020104:	68ba      	ldr	r2, [r7, #8]
 8020106:	687b      	ldr	r3, [r7, #4]
 8020108:	1ad3      	subs	r3, r2, r3
 802010a:	2b00      	cmp	r3, #0
 802010c:	bfb8      	it	lt
 802010e:	425b      	neglt	r3, r3
 8020110:	613b      	str	r3, [r7, #16]
    uint32_t time = (d * 1000) / speed;
 8020112:	693b      	ldr	r3, [r7, #16]
 8020114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8020118:	fb03 f202 	mul.w	r2, r3, r2
 802011c:	68fb      	ldr	r3, [r7, #12]
 802011e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020122:	617b      	str	r3, [r7, #20]

    if(time == 0) {
 8020124:	697b      	ldr	r3, [r7, #20]
 8020126:	2b00      	cmp	r3, #0
 8020128:	d102      	bne.n	8020130 <lv_anim_speed_to_time+0x38>
        time++;
 802012a:	697b      	ldr	r3, [r7, #20]
 802012c:	3301      	adds	r3, #1
 802012e:	617b      	str	r3, [r7, #20]
    }

    return time;
 8020130:	697b      	ldr	r3, [r7, #20]
}
 8020132:	4618      	mov	r0, r3
 8020134:	371c      	adds	r7, #28
 8020136:	46bd      	mov	sp, r7
 8020138:	f85d 7b04 	ldr.w	r7, [sp], #4
 802013c:	4770      	bx	lr

0802013e <lv_anim_path_linear>:
{
    anim_timer(NULL);
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
 802013e:	b580      	push	{r7, lr}
 8020140:	b086      	sub	sp, #24
 8020142:	af02      	add	r7, sp, #8
 8020144:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	6b18      	ldr	r0, [r3, #48]	; 0x30
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802014e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020152:	9300      	str	r3, [sp, #0]
 8020154:	2300      	movs	r3, #0
 8020156:	2100      	movs	r1, #0
 8020158:	f001 fd7a 	bl	8021c50 <lv_map>
 802015c:	60f8      	str	r0, [r7, #12]

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	6a1b      	ldr	r3, [r3, #32]
 8020166:	1ad2      	subs	r2, r2, r3
 8020168:	68fb      	ldr	r3, [r7, #12]
 802016a:	fb02 f303 	mul.w	r3, r2, r3
 802016e:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 8020170:	68bb      	ldr	r3, [r7, #8]
 8020172:	129b      	asrs	r3, r3, #10
 8020174:	60bb      	str	r3, [r7, #8]
    new_value += a->start_value;
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	6a1b      	ldr	r3, [r3, #32]
 802017a:	68ba      	ldr	r2, [r7, #8]
 802017c:	4413      	add	r3, r2
 802017e:	60bb      	str	r3, [r7, #8]

    return new_value;
 8020180:	68bb      	ldr	r3, [r7, #8]
}
 8020182:	4618      	mov	r0, r3
 8020184:	3710      	adds	r7, #16
 8020186:	46bd      	mov	sp, r7
 8020188:	bd80      	pop	{r7, pc}

0802018a <lv_anim_path_ease_out>:

    return new_value;
}

int32_t lv_anim_path_ease_out(const lv_anim_t * a)
{
 802018a:	b580      	push	{r7, lr}
 802018c:	b088      	sub	sp, #32
 802018e:	af02      	add	r7, sp, #8
 8020190:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802019a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802019e:	9300      	str	r3, [sp, #0]
 80201a0:	2300      	movs	r3, #0
 80201a2:	2100      	movs	r1, #0
 80201a4:	f001 fd54 	bl	8021c50 <lv_map>
 80201a8:	4603      	mov	r3, r0
 80201aa:	617b      	str	r3, [r7, #20]
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 80201ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80201b0:	9300      	str	r3, [sp, #0]
 80201b2:	f240 33b6 	movw	r3, #950	; 0x3b6
 80201b6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80201ba:	2100      	movs	r1, #0
 80201bc:	6978      	ldr	r0, [r7, #20]
 80201be:	f001 fcf5 	bl	8021bac <lv_bezier3>
 80201c2:	4603      	mov	r3, r0
 80201c4:	613b      	str	r3, [r7, #16]

    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	6a1b      	ldr	r3, [r3, #32]
 80201ce:	1ad2      	subs	r2, r2, r3
 80201d0:	693b      	ldr	r3, [r7, #16]
 80201d2:	fb02 f303 	mul.w	r3, r2, r3
 80201d6:	60fb      	str	r3, [r7, #12]
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 80201d8:	68fb      	ldr	r3, [r7, #12]
 80201da:	129b      	asrs	r3, r3, #10
 80201dc:	60fb      	str	r3, [r7, #12]
    new_value += a->start_value;
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	6a1b      	ldr	r3, [r3, #32]
 80201e2:	68fa      	ldr	r2, [r7, #12]
 80201e4:	4413      	add	r3, r2
 80201e6:	60fb      	str	r3, [r7, #12]

    return new_value;
 80201e8:	68fb      	ldr	r3, [r7, #12]
}
 80201ea:	4618      	mov	r0, r3
 80201ec:	3718      	adds	r7, #24
 80201ee:	46bd      	mov	sp, r7
 80201f0:	bd80      	pop	{r7, pc}
	...

080201f4 <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 80201f4:	b580      	push	{r7, lr}
 80201f6:	b088      	sub	sp, #32
 80201f8:	af00      	add	r7, sp, #0
 80201fa:	6078      	str	r0, [r7, #4]
    LV_UNUSED(param);

    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80201fc:	4b5d      	ldr	r3, [pc, #372]	; (8020374 <anim_timer+0x180>)
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	4618      	mov	r0, r3
 8020202:	f7ff fe39 	bl	801fe78 <lv_tick_elaps>
 8020206:	61b8      	str	r0, [r7, #24]

    /*Flip the run round*/
    anim_run_round = anim_run_round ? false : true;
 8020208:	4b5b      	ldr	r3, [pc, #364]	; (8020378 <anim_timer+0x184>)
 802020a:	781b      	ldrb	r3, [r3, #0]
 802020c:	f083 0301 	eor.w	r3, r3, #1
 8020210:	b2da      	uxtb	r2, r3
 8020212:	4b59      	ldr	r3, [pc, #356]	; (8020378 <anim_timer+0x184>)
 8020214:	701a      	strb	r2, [r3, #0]

    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8020216:	4859      	ldr	r0, [pc, #356]	; (802037c <anim_timer+0x188>)
 8020218:	f001 fbb3 	bl	8021982 <_lv_ll_get_head>
 802021c:	61f8      	str	r0, [r7, #28]

    while(a != NULL) {
 802021e:	e09c      	b.n	802035a <anim_timer+0x166>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8020220:	4b57      	ldr	r3, [pc, #348]	; (8020380 <anim_timer+0x18c>)
 8020222:	2200      	movs	r2, #0
 8020224:	701a      	strb	r2, [r3, #0]

        if(a->run_round != anim_run_round) {
 8020226:	69fb      	ldr	r3, [r7, #28]
 8020228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802022c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8020230:	b2da      	uxtb	r2, r3
 8020232:	4b51      	ldr	r3, [pc, #324]	; (8020378 <anim_timer+0x184>)
 8020234:	781b      	ldrb	r3, [r3, #0]
 8020236:	429a      	cmp	r2, r3
 8020238:	f000 8081 	beq.w	802033e <anim_timer+0x14a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 802023c:	4b4e      	ldr	r3, [pc, #312]	; (8020378 <anim_timer+0x184>)
 802023e:	7819      	ldrb	r1, [r3, #0]
 8020240:	69fa      	ldr	r2, [r7, #28]
 8020242:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8020246:	f361 0382 	bfi	r3, r1, #2, #1
 802024a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 802024e:	69fb      	ldr	r3, [r7, #28]
 8020250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020252:	461a      	mov	r2, r3
 8020254:	69bb      	ldr	r3, [r7, #24]
 8020256:	4413      	add	r3, r2
 8020258:	617b      	str	r3, [r7, #20]
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 802025a:	69fb      	ldr	r3, [r7, #28]
 802025c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020260:	f003 0308 	and.w	r3, r3, #8
 8020264:	b2db      	uxtb	r3, r3
 8020266:	2b00      	cmp	r3, #0
 8020268:	d132      	bne.n	80202d0 <anim_timer+0xdc>
 802026a:	69fb      	ldr	r3, [r7, #28]
 802026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802026e:	2b00      	cmp	r3, #0
 8020270:	dc2e      	bgt.n	80202d0 <anim_timer+0xdc>
 8020272:	697b      	ldr	r3, [r7, #20]
 8020274:	2b00      	cmp	r3, #0
 8020276:	db2b      	blt.n	80202d0 <anim_timer+0xdc>
                if(a->early_apply == 0 && a->get_value_cb) {
 8020278:	69fb      	ldr	r3, [r7, #28]
 802027a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802027e:	f003 0301 	and.w	r3, r3, #1
 8020282:	b2db      	uxtb	r3, r3
 8020284:	2b00      	cmp	r3, #0
 8020286:	d114      	bne.n	80202b2 <anim_timer+0xbe>
 8020288:	69fb      	ldr	r3, [r7, #28]
 802028a:	695b      	ldr	r3, [r3, #20]
 802028c:	2b00      	cmp	r3, #0
 802028e:	d010      	beq.n	80202b2 <anim_timer+0xbe>
                    int32_t v_ofs = a->get_value_cb(a);
 8020290:	69fb      	ldr	r3, [r7, #28]
 8020292:	695b      	ldr	r3, [r3, #20]
 8020294:	69f8      	ldr	r0, [r7, #28]
 8020296:	4798      	blx	r3
 8020298:	6138      	str	r0, [r7, #16]
                    a->start_value += v_ofs;
 802029a:	69fb      	ldr	r3, [r7, #28]
 802029c:	6a1a      	ldr	r2, [r3, #32]
 802029e:	693b      	ldr	r3, [r7, #16]
 80202a0:	441a      	add	r2, r3
 80202a2:	69fb      	ldr	r3, [r7, #28]
 80202a4:	621a      	str	r2, [r3, #32]
                    a->end_value += v_ofs;
 80202a6:	69fb      	ldr	r3, [r7, #28]
 80202a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80202aa:	693b      	ldr	r3, [r7, #16]
 80202ac:	441a      	add	r2, r3
 80202ae:	69fb      	ldr	r3, [r7, #28]
 80202b0:	629a      	str	r2, [r3, #40]	; 0x28
                }
                if(a->start_cb) a->start_cb(a);
 80202b2:	69fb      	ldr	r3, [r7, #28]
 80202b4:	689b      	ldr	r3, [r3, #8]
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d003      	beq.n	80202c2 <anim_timer+0xce>
 80202ba:	69fb      	ldr	r3, [r7, #28]
 80202bc:	689b      	ldr	r3, [r3, #8]
 80202be:	69f8      	ldr	r0, [r7, #28]
 80202c0:	4798      	blx	r3
                a->start_cb_called = 1;
 80202c2:	69fa      	ldr	r2, [r7, #28]
 80202c4:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80202c8:	f043 0308 	orr.w	r3, r3, #8
 80202cc:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
            a->act_time += elaps;
 80202d0:	69fb      	ldr	r3, [r7, #28]
 80202d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80202d4:	461a      	mov	r2, r3
 80202d6:	69bb      	ldr	r3, [r7, #24]
 80202d8:	4413      	add	r3, r2
 80202da:	461a      	mov	r2, r3
 80202dc:	69fb      	ldr	r3, [r7, #28]
 80202de:	631a      	str	r2, [r3, #48]	; 0x30
            if(a->act_time >= 0) {
 80202e0:	69fb      	ldr	r3, [r7, #28]
 80202e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	db2a      	blt.n	802033e <anim_timer+0x14a>
                if(a->act_time > a->time) a->act_time = a->time;
 80202e8:	69fb      	ldr	r3, [r7, #28]
 80202ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80202ec:	69fb      	ldr	r3, [r7, #28]
 80202ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80202f0:	429a      	cmp	r2, r3
 80202f2:	dd03      	ble.n	80202fc <anim_timer+0x108>
 80202f4:	69fb      	ldr	r3, [r7, #28]
 80202f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80202f8:	69fb      	ldr	r3, [r7, #28]
 80202fa:	631a      	str	r2, [r3, #48]	; 0x30

                int32_t new_value;
                new_value = a->path_cb(a);
 80202fc:	69fb      	ldr	r3, [r7, #28]
 80202fe:	69db      	ldr	r3, [r3, #28]
 8020300:	69f8      	ldr	r0, [r7, #28]
 8020302:	4798      	blx	r3
 8020304:	60f8      	str	r0, [r7, #12]

                if(new_value != a->current_value) {
 8020306:	69fb      	ldr	r3, [r7, #28]
 8020308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802030a:	68fa      	ldr	r2, [r7, #12]
 802030c:	429a      	cmp	r2, r3
 802030e:	d00d      	beq.n	802032c <anim_timer+0x138>
                    a->current_value = new_value;
 8020310:	69fb      	ldr	r3, [r7, #28]
 8020312:	68fa      	ldr	r2, [r7, #12]
 8020314:	625a      	str	r2, [r3, #36]	; 0x24
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8020316:	69fb      	ldr	r3, [r7, #28]
 8020318:	685b      	ldr	r3, [r3, #4]
 802031a:	2b00      	cmp	r3, #0
 802031c:	d006      	beq.n	802032c <anim_timer+0x138>
 802031e:	69fb      	ldr	r3, [r7, #28]
 8020320:	685b      	ldr	r3, [r3, #4]
 8020322:	69fa      	ldr	r2, [r7, #28]
 8020324:	6812      	ldr	r2, [r2, #0]
 8020326:	68f9      	ldr	r1, [r7, #12]
 8020328:	4610      	mov	r0, r2
 802032a:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 802032c:	69fb      	ldr	r3, [r7, #28]
 802032e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020330:	69fb      	ldr	r3, [r7, #28]
 8020332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020334:	429a      	cmp	r2, r3
 8020336:	db02      	blt.n	802033e <anim_timer+0x14a>
                    anim_ready_handler(a);
 8020338:	69f8      	ldr	r0, [r7, #28]
 802033a:	f000 f823 	bl	8020384 <anim_ready_handler>
            }
        }

        /*If the linked list changed due to anim. delete then it's not safe to continue
         *the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 802033e:	4b10      	ldr	r3, [pc, #64]	; (8020380 <anim_timer+0x18c>)
 8020340:	781b      	ldrb	r3, [r3, #0]
 8020342:	2b00      	cmp	r3, #0
 8020344:	d004      	beq.n	8020350 <anim_timer+0x15c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8020346:	480d      	ldr	r0, [pc, #52]	; (802037c <anim_timer+0x188>)
 8020348:	f001 fb1b 	bl	8021982 <_lv_ll_get_head>
 802034c:	61f8      	str	r0, [r7, #28]
 802034e:	e004      	b.n	802035a <anim_timer+0x166>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8020350:	69f9      	ldr	r1, [r7, #28]
 8020352:	480a      	ldr	r0, [pc, #40]	; (802037c <anim_timer+0x188>)
 8020354:	f001 fb37 	bl	80219c6 <_lv_ll_get_next>
 8020358:	61f8      	str	r0, [r7, #28]
    while(a != NULL) {
 802035a:	69fb      	ldr	r3, [r7, #28]
 802035c:	2b00      	cmp	r3, #0
 802035e:	f47f af5f 	bne.w	8020220 <anim_timer+0x2c>
    }

    last_timer_run = lv_tick_get();
 8020362:	f7ff fd6f 	bl	801fe44 <lv_tick_get>
 8020366:	4603      	mov	r3, r0
 8020368:	4a02      	ldr	r2, [pc, #8]	; (8020374 <anim_timer+0x180>)
 802036a:	6013      	str	r3, [r2, #0]
}
 802036c:	bf00      	nop
 802036e:	3720      	adds	r7, #32
 8020370:	46bd      	mov	sp, r7
 8020372:	bd80      	pop	{r7, pc}
 8020374:	20000838 	.word	0x20000838
 8020378:	2000083d 	.word	0x2000083d
 802037c:	2000087c 	.word	0x2000087c
 8020380:	2000083c 	.word	0x2000083c

08020384 <anim_ready_handler>:
 * Called when an animation is ready to do the necessary thinks
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 */
static void anim_ready_handler(lv_anim_t * a)
{
 8020384:	b580      	push	{r7, lr}
 8020386:	b084      	sub	sp, #16
 8020388:	af00      	add	r7, sp, #0
 802038a:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 802038c:	687b      	ldr	r3, [r7, #4]
 802038e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020392:	f003 0302 	and.w	r3, r3, #2
 8020396:	b2db      	uxtb	r3, r3
 8020398:	2b00      	cmp	r3, #0
 802039a:	d113      	bne.n	80203c4 <anim_ready_handler+0x40>
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	d00e      	beq.n	80203c4 <anim_ready_handler+0x40>
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80203ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80203b0:	4293      	cmp	r3, r2
 80203b2:	d007      	beq.n	80203c4 <anim_ready_handler+0x40>
        a->repeat_cnt--;
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80203ba:	3b01      	subs	r3, #1
 80203bc:	b29a      	uxth	r2, r3
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready*/
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d125      	bne.n	802041a <anim_ready_handler+0x96>
 80203ce:	687b      	ldr	r3, [r7, #4]
 80203d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	d007      	beq.n	80203e6 <anim_ready_handler+0x62>
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80203dc:	f003 0302 	and.w	r3, r3, #2
 80203e0:	b2db      	uxtb	r3, r3
 80203e2:	2b00      	cmp	r3, #0
 80203e4:	d019      	beq.n	802041a <anim_ready_handler+0x96>

        /*Delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80203e6:	6879      	ldr	r1, [r7, #4]
 80203e8:	482c      	ldr	r0, [pc, #176]	; (802049c <anim_ready_handler+0x118>)
 80203ea:	f001 fa6d 	bl	80218c8 <_lv_ll_remove>
        /*Flag that the list has changed*/
        anim_mark_list_change();
 80203ee:	f000 f857 	bl	80204a0 <anim_mark_list_change>

        /*Call the callback function at the end*/
        if(a->ready_cb != NULL) a->ready_cb(a);
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	68db      	ldr	r3, [r3, #12]
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d003      	beq.n	8020402 <anim_ready_handler+0x7e>
 80203fa:	687b      	ldr	r3, [r7, #4]
 80203fc:	68db      	ldr	r3, [r3, #12]
 80203fe:	6878      	ldr	r0, [r7, #4]
 8020400:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	691b      	ldr	r3, [r3, #16]
 8020406:	2b00      	cmp	r3, #0
 8020408:	d003      	beq.n	8020412 <anim_ready_handler+0x8e>
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	691b      	ldr	r3, [r3, #16]
 802040e:	6878      	ldr	r0, [r7, #4]
 8020410:	4798      	blx	r3
        lv_mem_free(a);
 8020412:	6878      	ldr	r0, [r7, #4]
 8020414:	f001 fca4 	bl	8021d60 <lv_mem_free>
            tmp = a->time;
            a->time = a->playback_time;
            a->playback_time = tmp;
        }
    }
}
 8020418:	e03c      	b.n	8020494 <anim_ready_handler+0x110>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802041e:	425a      	negs	r2, r3
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	631a      	str	r2, [r3, #48]	; 0x30
        if(a->playback_time != 0) {
 8020424:	687b      	ldr	r3, [r7, #4]
 8020426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020428:	2b00      	cmp	r3, #0
 802042a:	d033      	beq.n	8020494 <anim_ready_handler+0x110>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020432:	f003 0302 	and.w	r3, r3, #2
 8020436:	b2db      	uxtb	r3, r3
 8020438:	2b00      	cmp	r3, #0
 802043a:	d104      	bne.n	8020446 <anim_ready_handler+0xc2>
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020440:	425a      	negs	r2, r3
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	631a      	str	r2, [r3, #48]	; 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802044c:	f003 0302 	and.w	r3, r3, #2
 8020450:	b2db      	uxtb	r3, r3
 8020452:	2b00      	cmp	r3, #0
 8020454:	bf0c      	ite	eq
 8020456:	2301      	moveq	r3, #1
 8020458:	2300      	movne	r3, #0
 802045a:	b2d9      	uxtb	r1, r3
 802045c:	687a      	ldr	r2, [r7, #4]
 802045e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8020462:	f361 0341 	bfi	r3, r1, #1, #1
 8020466:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            int32_t tmp    = a->start_value;
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	6a1b      	ldr	r3, [r3, #32]
 802046e:	60fb      	str	r3, [r7, #12]
            a->start_value = a->end_value;
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	621a      	str	r2, [r3, #32]
            a->end_value   = tmp;
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	68fa      	ldr	r2, [r7, #12]
 802047c:	629a      	str	r2, [r3, #40]	; 0x28
            tmp = a->time;
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020482:	60fb      	str	r3, [r7, #12]
            a->time = a->playback_time;
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020488:	461a      	mov	r2, r3
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	62da      	str	r2, [r3, #44]	; 0x2c
            a->playback_time = tmp;
 802048e:	68fa      	ldr	r2, [r7, #12]
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	639a      	str	r2, [r3, #56]	; 0x38
}
 8020494:	bf00      	nop
 8020496:	3710      	adds	r7, #16
 8020498:	46bd      	mov	sp, r7
 802049a:	bd80      	pop	{r7, pc}
 802049c:	2000087c 	.word	0x2000087c

080204a0 <anim_mark_list_change>:

static void anim_mark_list_change(void)
{
 80204a0:	b580      	push	{r7, lr}
 80204a2:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 80204a4:	4b0a      	ldr	r3, [pc, #40]	; (80204d0 <anim_mark_list_change+0x30>)
 80204a6:	2201      	movs	r2, #1
 80204a8:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80204aa:	480a      	ldr	r0, [pc, #40]	; (80204d4 <anim_mark_list_change+0x34>)
 80204ac:	f001 fa69 	bl	8021982 <_lv_ll_get_head>
 80204b0:	4603      	mov	r3, r0
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d105      	bne.n	80204c2 <anim_mark_list_change+0x22>
        lv_timer_pause(_lv_anim_tmr);
 80204b6:	4b08      	ldr	r3, [pc, #32]	; (80204d8 <anim_mark_list_change+0x38>)
 80204b8:	681b      	ldr	r3, [r3, #0]
 80204ba:	4618      	mov	r0, r3
 80204bc:	f002 ff66 	bl	802338c <lv_timer_pause>
    else
        lv_timer_resume(_lv_anim_tmr);
}
 80204c0:	e004      	b.n	80204cc <anim_mark_list_change+0x2c>
        lv_timer_resume(_lv_anim_tmr);
 80204c2:	4b05      	ldr	r3, [pc, #20]	; (80204d8 <anim_mark_list_change+0x38>)
 80204c4:	681b      	ldr	r3, [r3, #0]
 80204c6:	4618      	mov	r0, r3
 80204c8:	f002 ff6f 	bl	80233aa <lv_timer_resume>
}
 80204cc:	bf00      	nop
 80204ce:	bd80      	pop	{r7, pc}
 80204d0:	2000083c 	.word	0x2000083c
 80204d4:	2000087c 	.word	0x2000087c
 80204d8:	20000840 	.word	0x20000840

080204dc <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80204dc:	b480      	push	{r7}
 80204de:	b083      	sub	sp, #12
 80204e0:	af00      	add	r7, sp, #0
 80204e2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80204ea:	b29a      	uxth	r2, r3
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80204f2:	b29b      	uxth	r3, r3
 80204f4:	1ad3      	subs	r3, r2, r3
 80204f6:	b29b      	uxth	r3, r3
 80204f8:	3301      	adds	r3, #1
 80204fa:	b29b      	uxth	r3, r3
 80204fc:	b21b      	sxth	r3, r3
}
 80204fe:	4618      	mov	r0, r3
 8020500:	370c      	adds	r7, #12
 8020502:	46bd      	mov	sp, r7
 8020504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020508:	4770      	bx	lr

0802050a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 802050a:	b480      	push	{r7}
 802050c:	b083      	sub	sp, #12
 802050e:	af00      	add	r7, sp, #0
 8020510:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020518:	b29a      	uxth	r2, r3
 802051a:	687b      	ldr	r3, [r7, #4]
 802051c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020520:	b29b      	uxth	r3, r3
 8020522:	1ad3      	subs	r3, r2, r3
 8020524:	b29b      	uxth	r3, r3
 8020526:	3301      	adds	r3, #1
 8020528:	b29b      	uxth	r3, r3
 802052a:	b21b      	sxth	r3, r3
}
 802052c:	4618      	mov	r0, r3
 802052e:	370c      	adds	r7, #12
 8020530:	46bd      	mov	sp, r7
 8020532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020536:	4770      	bx	lr

08020538 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 8020538:	b480      	push	{r7}
 802053a:	b085      	sub	sp, #20
 802053c:	af00      	add	r7, sp, #0
 802053e:	60f8      	str	r0, [r7, #12]
 8020540:	4608      	mov	r0, r1
 8020542:	4611      	mov	r1, r2
 8020544:	461a      	mov	r2, r3
 8020546:	4603      	mov	r3, r0
 8020548:	817b      	strh	r3, [r7, #10]
 802054a:	460b      	mov	r3, r1
 802054c:	813b      	strh	r3, [r7, #8]
 802054e:	4613      	mov	r3, r2
 8020550:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 8020552:	68fb      	ldr	r3, [r7, #12]
 8020554:	897a      	ldrh	r2, [r7, #10]
 8020556:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 8020558:	68fb      	ldr	r3, [r7, #12]
 802055a:	893a      	ldrh	r2, [r7, #8]
 802055c:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 802055e:	68fb      	ldr	r3, [r7, #12]
 8020560:	88fa      	ldrh	r2, [r7, #6]
 8020562:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 8020564:	68fb      	ldr	r3, [r7, #12]
 8020566:	8b3a      	ldrh	r2, [r7, #24]
 8020568:	80da      	strh	r2, [r3, #6]
}
 802056a:	bf00      	nop
 802056c:	3714      	adds	r7, #20
 802056e:	46bd      	mov	sp, r7
 8020570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020574:	4770      	bx	lr

08020576 <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 8020576:	b480      	push	{r7}
 8020578:	b083      	sub	sp, #12
 802057a:	af00      	add	r7, sp, #0
 802057c:	6078      	str	r0, [r7, #4]
 802057e:	460b      	mov	r3, r1
 8020580:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020588:	b29a      	uxth	r2, r3
 802058a:	887b      	ldrh	r3, [r7, #2]
 802058c:	4413      	add	r3, r2
 802058e:	b29b      	uxth	r3, r3
 8020590:	3b01      	subs	r3, #1
 8020592:	b29b      	uxth	r3, r3
 8020594:	b21a      	sxth	r2, r3
 8020596:	687b      	ldr	r3, [r7, #4]
 8020598:	80da      	strh	r2, [r3, #6]
}
 802059a:	bf00      	nop
 802059c:	370c      	adds	r7, #12
 802059e:	46bd      	mov	sp, r7
 80205a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a4:	4770      	bx	lr

080205a6 <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 80205a6:	b480      	push	{r7}
 80205a8:	b085      	sub	sp, #20
 80205aa:	af00      	add	r7, sp, #0
 80205ac:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80205b4:	461a      	mov	r2, r3
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80205bc:	1ad3      	subs	r3, r2, r3
 80205be:	3301      	adds	r3, #1
 80205c0:	461a      	mov	r2, r3
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80205c8:	4619      	mov	r1, r3
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80205d0:	1acb      	subs	r3, r1, r3
 80205d2:	3301      	adds	r3, #1
 80205d4:	fb02 f303 	mul.w	r3, r2, r3
 80205d8:	60fb      	str	r3, [r7, #12]

    return size;
 80205da:	68fb      	ldr	r3, [r7, #12]
}
 80205dc:	4618      	mov	r0, r3
 80205de:	3714      	adds	r7, #20
 80205e0:	46bd      	mov	sp, r7
 80205e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205e6:	4770      	bx	lr

080205e8 <lv_area_increase>:

void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra)
{
 80205e8:	b480      	push	{r7}
 80205ea:	b083      	sub	sp, #12
 80205ec:	af00      	add	r7, sp, #0
 80205ee:	6078      	str	r0, [r7, #4]
 80205f0:	460b      	mov	r3, r1
 80205f2:	807b      	strh	r3, [r7, #2]
 80205f4:	4613      	mov	r3, r2
 80205f6:	803b      	strh	r3, [r7, #0]
    area->x1 -= w_extra;
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80205fe:	b29a      	uxth	r2, r3
 8020600:	887b      	ldrh	r3, [r7, #2]
 8020602:	1ad3      	subs	r3, r2, r3
 8020604:	b29b      	uxth	r3, r3
 8020606:	b21a      	sxth	r2, r3
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	801a      	strh	r2, [r3, #0]
    area->x2 += w_extra;
 802060c:	687b      	ldr	r3, [r7, #4]
 802060e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020612:	b29a      	uxth	r2, r3
 8020614:	887b      	ldrh	r3, [r7, #2]
 8020616:	4413      	add	r3, r2
 8020618:	b29b      	uxth	r3, r3
 802061a:	b21a      	sxth	r2, r3
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	809a      	strh	r2, [r3, #4]
    area->y1 -= h_extra;
 8020620:	687b      	ldr	r3, [r7, #4]
 8020622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020626:	b29a      	uxth	r2, r3
 8020628:	883b      	ldrh	r3, [r7, #0]
 802062a:	1ad3      	subs	r3, r2, r3
 802062c:	b29b      	uxth	r3, r3
 802062e:	b21a      	sxth	r2, r3
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	805a      	strh	r2, [r3, #2]
    area->y2 += h_extra;
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802063a:	b29a      	uxth	r2, r3
 802063c:	883b      	ldrh	r3, [r7, #0]
 802063e:	4413      	add	r3, r2
 8020640:	b29b      	uxth	r3, r3
 8020642:	b21a      	sxth	r2, r3
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	80da      	strh	r2, [r3, #6]
}
 8020648:	bf00      	nop
 802064a:	370c      	adds	r7, #12
 802064c:	46bd      	mov	sp, r7
 802064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020652:	4770      	bx	lr

08020654 <lv_area_move>:

void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8020654:	b480      	push	{r7}
 8020656:	b083      	sub	sp, #12
 8020658:	af00      	add	r7, sp, #0
 802065a:	6078      	str	r0, [r7, #4]
 802065c:	460b      	mov	r3, r1
 802065e:	807b      	strh	r3, [r7, #2]
 8020660:	4613      	mov	r3, r2
 8020662:	803b      	strh	r3, [r7, #0]
    area->x1 += x_ofs;
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	f9b3 3000 	ldrsh.w	r3, [r3]
 802066a:	b29a      	uxth	r2, r3
 802066c:	887b      	ldrh	r3, [r7, #2]
 802066e:	4413      	add	r3, r2
 8020670:	b29b      	uxth	r3, r3
 8020672:	b21a      	sxth	r2, r3
 8020674:	687b      	ldr	r3, [r7, #4]
 8020676:	801a      	strh	r2, [r3, #0]
    area->x2 += x_ofs;
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802067e:	b29a      	uxth	r2, r3
 8020680:	887b      	ldrh	r3, [r7, #2]
 8020682:	4413      	add	r3, r2
 8020684:	b29b      	uxth	r3, r3
 8020686:	b21a      	sxth	r2, r3
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	809a      	strh	r2, [r3, #4]
    area->y1 += y_ofs;
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020692:	b29a      	uxth	r2, r3
 8020694:	883b      	ldrh	r3, [r7, #0]
 8020696:	4413      	add	r3, r2
 8020698:	b29b      	uxth	r3, r3
 802069a:	b21a      	sxth	r2, r3
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	805a      	strh	r2, [r3, #2]
    area->y2 += y_ofs;
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80206a6:	b29a      	uxth	r2, r3
 80206a8:	883b      	ldrh	r3, [r7, #0]
 80206aa:	4413      	add	r3, r2
 80206ac:	b29b      	uxth	r3, r3
 80206ae:	b21a      	sxth	r2, r3
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	80da      	strh	r2, [r3, #6]
}
 80206b4:	bf00      	nop
 80206b6:	370c      	adds	r7, #12
 80206b8:	46bd      	mov	sp, r7
 80206ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206be:	4770      	bx	lr

080206c0 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 80206c0:	b480      	push	{r7}
 80206c2:	b087      	sub	sp, #28
 80206c4:	af00      	add	r7, sp, #0
 80206c6:	60f8      	str	r0, [r7, #12]
 80206c8:	60b9      	str	r1, [r7, #8]
 80206ca:	607a      	str	r2, [r7, #4]
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 80206cc:	687b      	ldr	r3, [r7, #4]
 80206ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80206d2:	68bb      	ldr	r3, [r7, #8]
 80206d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80206d8:	4293      	cmp	r3, r2
 80206da:	bfb8      	it	lt
 80206dc:	4613      	movlt	r3, r2
 80206de:	b21a      	sxth	r2, r3
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80206ea:	68bb      	ldr	r3, [r7, #8]
 80206ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80206f0:	4293      	cmp	r3, r2
 80206f2:	bfb8      	it	lt
 80206f4:	4613      	movlt	r3, r2
 80206f6:	b21a      	sxth	r2, r3
 80206f8:	68fb      	ldr	r3, [r7, #12]
 80206fa:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020702:	68bb      	ldr	r3, [r7, #8]
 8020704:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020708:	4293      	cmp	r3, r2
 802070a:	bfa8      	it	ge
 802070c:	4613      	movge	r3, r2
 802070e:	b21a      	sxth	r2, r3
 8020710:	68fb      	ldr	r3, [r7, #12]
 8020712:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802071a:	68bb      	ldr	r3, [r7, #8]
 802071c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020720:	4293      	cmp	r3, r2
 8020722:	bfa8      	it	ge
 8020724:	4613      	movge	r3, r2
 8020726:	b21a      	sxth	r2, r3
 8020728:	68fb      	ldr	r3, [r7, #12]
 802072a:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 802072c:	2301      	movs	r3, #1
 802072e:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8020730:	68fb      	ldr	r3, [r7, #12]
 8020732:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020736:	68fb      	ldr	r3, [r7, #12]
 8020738:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802073c:	429a      	cmp	r2, r3
 802073e:	dc07      	bgt.n	8020750 <_lv_area_intersect+0x90>
 8020740:	68fb      	ldr	r3, [r7, #12]
 8020742:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020746:	68fb      	ldr	r3, [r7, #12]
 8020748:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802074c:	429a      	cmp	r2, r3
 802074e:	dd01      	ble.n	8020754 <_lv_area_intersect+0x94>
        union_ok = false;
 8020750:	2300      	movs	r3, #0
 8020752:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 8020754:	7dfb      	ldrb	r3, [r7, #23]
}
 8020756:	4618      	mov	r0, r3
 8020758:	371c      	adds	r7, #28
 802075a:	46bd      	mov	sp, r7
 802075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020760:	4770      	bx	lr

08020762 <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8020762:	b480      	push	{r7}
 8020764:	b085      	sub	sp, #20
 8020766:	af00      	add	r7, sp, #0
 8020768:	60f8      	str	r0, [r7, #12]
 802076a:	60b9      	str	r1, [r7, #8]
 802076c:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020774:	68bb      	ldr	r3, [r7, #8]
 8020776:	f9b3 3000 	ldrsh.w	r3, [r3]
 802077a:	4293      	cmp	r3, r2
 802077c:	bfa8      	it	ge
 802077e:	4613      	movge	r3, r2
 8020780:	b21a      	sxth	r2, r3
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802078c:	68bb      	ldr	r3, [r7, #8]
 802078e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020792:	4293      	cmp	r3, r2
 8020794:	bfa8      	it	ge
 8020796:	4613      	movge	r3, r2
 8020798:	b21a      	sxth	r2, r3
 802079a:	68fb      	ldr	r3, [r7, #12]
 802079c:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 802079e:	687b      	ldr	r3, [r7, #4]
 80207a0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80207a4:	68bb      	ldr	r3, [r7, #8]
 80207a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80207aa:	4293      	cmp	r3, r2
 80207ac:	bfb8      	it	lt
 80207ae:	4613      	movlt	r3, r2
 80207b0:	b21a      	sxth	r2, r3
 80207b2:	68fb      	ldr	r3, [r7, #12]
 80207b4:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 80207b6:	687b      	ldr	r3, [r7, #4]
 80207b8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80207bc:	68bb      	ldr	r3, [r7, #8]
 80207be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80207c2:	4293      	cmp	r3, r2
 80207c4:	bfb8      	it	lt
 80207c6:	4613      	movlt	r3, r2
 80207c8:	b21a      	sxth	r2, r3
 80207ca:	68fb      	ldr	r3, [r7, #12]
 80207cc:	80da      	strh	r2, [r3, #6]
}
 80207ce:	bf00      	nop
 80207d0:	3714      	adds	r7, #20
 80207d2:	46bd      	mov	sp, r7
 80207d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d8:	4770      	bx	lr

080207da <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 80207da:	b580      	push	{r7, lr}
 80207dc:	b088      	sub	sp, #32
 80207de:	af00      	add	r7, sp, #0
 80207e0:	60f8      	str	r0, [r7, #12]
 80207e2:	60b9      	str	r1, [r7, #8]
 80207e4:	4613      	mov	r3, r2
 80207e6:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 80207e8:	2300      	movs	r3, #0
 80207ea:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 80207ec:	68bb      	ldr	r3, [r7, #8]
 80207ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80207f2:	68fb      	ldr	r3, [r7, #12]
 80207f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80207f8:	429a      	cmp	r2, r3
 80207fa:	db19      	blt.n	8020830 <_lv_area_is_point_on+0x56>
 80207fc:	68bb      	ldr	r3, [r7, #8]
 80207fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020802:	68fb      	ldr	r3, [r7, #12]
 8020804:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020808:	429a      	cmp	r2, r3
 802080a:	dc11      	bgt.n	8020830 <_lv_area_is_point_on+0x56>
 802080c:	68bb      	ldr	r3, [r7, #8]
 802080e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020818:	429a      	cmp	r2, r3
 802081a:	db09      	blt.n	8020830 <_lv_area_is_point_on+0x56>
 802081c:	68bb      	ldr	r3, [r7, #8]
 802081e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020822:	68fb      	ldr	r3, [r7, #12]
 8020824:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020828:	429a      	cmp	r2, r3
 802082a:	dc01      	bgt.n	8020830 <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 802082c:	2301      	movs	r3, #1
 802082e:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 8020830:	7ffb      	ldrb	r3, [r7, #31]
 8020832:	f083 0301 	eor.w	r3, r3, #1
 8020836:	b2db      	uxtb	r3, r3
 8020838:	2b00      	cmp	r3, #0
 802083a:	d001      	beq.n	8020840 <_lv_area_is_point_on+0x66>
        return false;
 802083c:	2300      	movs	r3, #0
 802083e:	e0f1      	b.n	8020a24 <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 8020840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020844:	2b00      	cmp	r3, #0
 8020846:	dc01      	bgt.n	802084c <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 8020848:	2301      	movs	r3, #1
 802084a:	e0eb      	b.n	8020a24 <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 802084c:	68f8      	ldr	r0, [r7, #12]
 802084e:	f7ff fe45 	bl	80204dc <lv_area_get_width>
 8020852:	4603      	mov	r3, r0
 8020854:	2b00      	cmp	r3, #0
 8020856:	da00      	bge.n	802085a <_lv_area_is_point_on+0x80>
 8020858:	3301      	adds	r3, #1
 802085a:	105b      	asrs	r3, r3, #1
 802085c:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 802085e:	68f8      	ldr	r0, [r7, #12]
 8020860:	f7ff fe53 	bl	802050a <lv_area_get_height>
 8020864:	4603      	mov	r3, r0
 8020866:	2b00      	cmp	r3, #0
 8020868:	da00      	bge.n	802086c <_lv_area_is_point_on+0x92>
 802086a:	3301      	adds	r3, #1
 802086c:	105b      	asrs	r3, r3, #1
 802086e:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MIN(w, h);
 8020870:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020874:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8020878:	4293      	cmp	r3, r2
 802087a:	bfa8      	it	ge
 802087c:	4613      	movge	r3, r2
 802087e:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 8020880:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020884:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020888:	429a      	cmp	r2, r3
 802088a:	dd01      	ble.n	8020890 <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 802088c:	8b3b      	ldrh	r3, [r7, #24]
 802088e:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 8020890:	68fb      	ldr	r3, [r7, #12]
 8020892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020896:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 8020898:	68fb      	ldr	r3, [r7, #12]
 802089a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802089e:	b29a      	uxth	r2, r3
 80208a0:	88fb      	ldrh	r3, [r7, #6]
 80208a2:	4413      	add	r3, r2
 80208a4:	b29b      	uxth	r3, r3
 80208a6:	b21b      	sxth	r3, r3
 80208a8:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 80208aa:	68fb      	ldr	r3, [r7, #12]
 80208ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80208b0:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 80208b2:	68fb      	ldr	r3, [r7, #12]
 80208b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80208b8:	b29a      	uxth	r2, r3
 80208ba:	88fb      	ldrh	r3, [r7, #6]
 80208bc:	4413      	add	r3, r2
 80208be:	b29b      	uxth	r3, r3
 80208c0:	b21b      	sxth	r3, r3
 80208c2:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80208c4:	f107 0310 	add.w	r3, r7, #16
 80208c8:	2200      	movs	r2, #0
 80208ca:	68b9      	ldr	r1, [r7, #8]
 80208cc:	4618      	mov	r0, r3
 80208ce:	f7ff ff84 	bl	80207da <_lv_area_is_point_on>
 80208d2:	4603      	mov	r3, r0
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	d017      	beq.n	8020908 <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 80208d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80208dc:	b29a      	uxth	r2, r3
 80208de:	88fb      	ldrh	r3, [r7, #6]
 80208e0:	4413      	add	r3, r2
 80208e2:	b29b      	uxth	r3, r3
 80208e4:	b21b      	sxth	r3, r3
 80208e6:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 80208e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80208ec:	b29a      	uxth	r2, r3
 80208ee:	88fb      	ldrh	r3, [r7, #6]
 80208f0:	4413      	add	r3, r2
 80208f2:	b29b      	uxth	r3, r3
 80208f4:	b21b      	sxth	r3, r3
 80208f6:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 80208f8:	f107 0310 	add.w	r3, r7, #16
 80208fc:	68b9      	ldr	r1, [r7, #8]
 80208fe:	4618      	mov	r0, r3
 8020900:	f000 fb30 	bl	8020f64 <lv_point_within_circle>
 8020904:	4603      	mov	r3, r0
 8020906:	e08d      	b.n	8020a24 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 8020908:	68fb      	ldr	r3, [r7, #12]
 802090a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802090e:	b29a      	uxth	r2, r3
 8020910:	88fb      	ldrh	r3, [r7, #6]
 8020912:	1ad3      	subs	r3, r2, r3
 8020914:	b29b      	uxth	r3, r3
 8020916:	b21b      	sxth	r3, r3
 8020918:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 802091a:	68fb      	ldr	r3, [r7, #12]
 802091c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020920:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020922:	f107 0310 	add.w	r3, r7, #16
 8020926:	2200      	movs	r2, #0
 8020928:	68b9      	ldr	r1, [r7, #8]
 802092a:	4618      	mov	r0, r3
 802092c:	f7ff ff55 	bl	80207da <_lv_area_is_point_on>
 8020930:	4603      	mov	r3, r0
 8020932:	2b00      	cmp	r3, #0
 8020934:	d017      	beq.n	8020966 <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 8020936:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802093a:	b29a      	uxth	r2, r3
 802093c:	88fb      	ldrh	r3, [r7, #6]
 802093e:	4413      	add	r3, r2
 8020940:	b29b      	uxth	r3, r3
 8020942:	b21b      	sxth	r3, r3
 8020944:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 8020946:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802094a:	b29a      	uxth	r2, r3
 802094c:	88fb      	ldrh	r3, [r7, #6]
 802094e:	1ad3      	subs	r3, r2, r3
 8020950:	b29b      	uxth	r3, r3
 8020952:	b21b      	sxth	r3, r3
 8020954:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 8020956:	f107 0310 	add.w	r3, r7, #16
 802095a:	68b9      	ldr	r1, [r7, #8]
 802095c:	4618      	mov	r0, r3
 802095e:	f000 fb01 	bl	8020f64 <lv_point_within_circle>
 8020962:	4603      	mov	r3, r0
 8020964:	e05e      	b.n	8020a24 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 8020966:	68fb      	ldr	r3, [r7, #12]
 8020968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802096c:	b29a      	uxth	r2, r3
 802096e:	88fb      	ldrh	r3, [r7, #6]
 8020970:	1ad3      	subs	r3, r2, r3
 8020972:	b29b      	uxth	r3, r3
 8020974:	b21b      	sxth	r3, r3
 8020976:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 8020978:	68fb      	ldr	r3, [r7, #12]
 802097a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802097e:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020980:	f107 0310 	add.w	r3, r7, #16
 8020984:	2200      	movs	r2, #0
 8020986:	68b9      	ldr	r1, [r7, #8]
 8020988:	4618      	mov	r0, r3
 802098a:	f7ff ff26 	bl	80207da <_lv_area_is_point_on>
 802098e:	4603      	mov	r3, r0
 8020990:	2b00      	cmp	r3, #0
 8020992:	d017      	beq.n	80209c4 <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 8020994:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8020998:	b29a      	uxth	r2, r3
 802099a:	88fb      	ldrh	r3, [r7, #6]
 802099c:	1ad3      	subs	r3, r2, r3
 802099e:	b29b      	uxth	r3, r3
 80209a0:	b21b      	sxth	r3, r3
 80209a2:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 80209a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80209a8:	b29a      	uxth	r2, r3
 80209aa:	88fb      	ldrh	r3, [r7, #6]
 80209ac:	1ad3      	subs	r3, r2, r3
 80209ae:	b29b      	uxth	r3, r3
 80209b0:	b21b      	sxth	r3, r3
 80209b2:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 80209b4:	f107 0310 	add.w	r3, r7, #16
 80209b8:	68b9      	ldr	r1, [r7, #8]
 80209ba:	4618      	mov	r0, r3
 80209bc:	f000 fad2 	bl	8020f64 <lv_point_within_circle>
 80209c0:	4603      	mov	r3, r0
 80209c2:	e02f      	b.n	8020a24 <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 80209c4:	68fb      	ldr	r3, [r7, #12]
 80209c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80209ca:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 80209cc:	68fb      	ldr	r3, [r7, #12]
 80209ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80209d2:	b29a      	uxth	r2, r3
 80209d4:	88fb      	ldrh	r3, [r7, #6]
 80209d6:	4413      	add	r3, r2
 80209d8:	b29b      	uxth	r3, r3
 80209da:	b21b      	sxth	r3, r3
 80209dc:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80209de:	f107 0310 	add.w	r3, r7, #16
 80209e2:	2200      	movs	r2, #0
 80209e4:	68b9      	ldr	r1, [r7, #8]
 80209e6:	4618      	mov	r0, r3
 80209e8:	f7ff fef7 	bl	80207da <_lv_area_is_point_on>
 80209ec:	4603      	mov	r3, r0
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	d017      	beq.n	8020a22 <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 80209f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80209f6:	b29a      	uxth	r2, r3
 80209f8:	88fb      	ldrh	r3, [r7, #6]
 80209fa:	1ad3      	subs	r3, r2, r3
 80209fc:	b29b      	uxth	r3, r3
 80209fe:	b21b      	sxth	r3, r3
 8020a00:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 8020a02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020a06:	b29a      	uxth	r2, r3
 8020a08:	88fb      	ldrh	r3, [r7, #6]
 8020a0a:	4413      	add	r3, r2
 8020a0c:	b29b      	uxth	r3, r3
 8020a0e:	b21b      	sxth	r3, r3
 8020a10:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 8020a12:	f107 0310 	add.w	r3, r7, #16
 8020a16:	68b9      	ldr	r1, [r7, #8]
 8020a18:	4618      	mov	r0, r3
 8020a1a:	f000 faa3 	bl	8020f64 <lv_point_within_circle>
 8020a1e:	4603      	mov	r3, r0
 8020a20:	e000      	b.n	8020a24 <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 8020a22:	2301      	movs	r3, #1
}
 8020a24:	4618      	mov	r0, r3
 8020a26:	3720      	adds	r7, #32
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bd80      	pop	{r7, pc}

08020a2c <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8020a2c:	b480      	push	{r7}
 8020a2e:	b083      	sub	sp, #12
 8020a30:	af00      	add	r7, sp, #0
 8020a32:	6078      	str	r0, [r7, #4]
 8020a34:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8020a36:	687b      	ldr	r3, [r7, #4]
 8020a38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020a3c:	683b      	ldr	r3, [r7, #0]
 8020a3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020a42:	429a      	cmp	r2, r3
 8020a44:	dc19      	bgt.n	8020a7a <_lv_area_is_on+0x4e>
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020a4c:	683b      	ldr	r3, [r7, #0]
 8020a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020a52:	429a      	cmp	r2, r3
 8020a54:	db11      	blt.n	8020a7a <_lv_area_is_on+0x4e>
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020a5c:	683b      	ldr	r3, [r7, #0]
 8020a5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020a62:	429a      	cmp	r2, r3
 8020a64:	dc09      	bgt.n	8020a7a <_lv_area_is_on+0x4e>
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020a6c:	683b      	ldr	r3, [r7, #0]
 8020a6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020a72:	429a      	cmp	r2, r3
 8020a74:	db01      	blt.n	8020a7a <_lv_area_is_on+0x4e>
        return true;
 8020a76:	2301      	movs	r3, #1
 8020a78:	e000      	b.n	8020a7c <_lv_area_is_on+0x50>
    }
    else {
        return false;
 8020a7a:	2300      	movs	r3, #0
    }
}
 8020a7c:	4618      	mov	r0, r3
 8020a7e:	370c      	adds	r7, #12
 8020a80:	46bd      	mov	sp, r7
 8020a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a86:	4770      	bx	lr

08020a88 <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 8020a88:	b580      	push	{r7, lr}
 8020a8a:	b086      	sub	sp, #24
 8020a8c:	af00      	add	r7, sp, #0
 8020a8e:	60f8      	str	r0, [r7, #12]
 8020a90:	60b9      	str	r1, [r7, #8]
 8020a92:	4613      	mov	r3, r2
 8020a94:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 8020a96:	2300      	movs	r3, #0
 8020a98:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8020a9a:	68fb      	ldr	r3, [r7, #12]
 8020a9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020aa0:	68bb      	ldr	r3, [r7, #8]
 8020aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020aa6:	429a      	cmp	r2, r3
 8020aa8:	db19      	blt.n	8020ade <_lv_area_is_in+0x56>
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ab0:	68bb      	ldr	r3, [r7, #8]
 8020ab2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ab6:	429a      	cmp	r2, r3
 8020ab8:	db11      	blt.n	8020ade <_lv_area_is_in+0x56>
 8020aba:	68fb      	ldr	r3, [r7, #12]
 8020abc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020ac0:	68bb      	ldr	r3, [r7, #8]
 8020ac2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020ac6:	429a      	cmp	r2, r3
 8020ac8:	dc09      	bgt.n	8020ade <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 8020aca:	68fb      	ldr	r3, [r7, #12]
 8020acc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020ad0:	68bb      	ldr	r3, [r7, #8]
 8020ad2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8020ad6:	429a      	cmp	r2, r3
 8020ad8:	dc01      	bgt.n	8020ade <_lv_area_is_in+0x56>
        is_in = true;
 8020ada:	2301      	movs	r3, #1
 8020adc:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 8020ade:	7dfb      	ldrb	r3, [r7, #23]
 8020ae0:	f083 0301 	eor.w	r3, r3, #1
 8020ae4:	b2db      	uxtb	r3, r3
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d001      	beq.n	8020aee <_lv_area_is_in+0x66>
 8020aea:	2300      	movs	r3, #0
 8020aec:	e066      	b.n	8020bbc <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 8020aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d101      	bne.n	8020afa <_lv_area_is_in+0x72>
 8020af6:	2301      	movs	r3, #1
 8020af8:	e060      	b.n	8020bbc <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 8020afa:	68fb      	ldr	r3, [r7, #12]
 8020afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020b00:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 8020b02:	68fb      	ldr	r3, [r7, #12]
 8020b04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020b08:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020b0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020b0e:	f107 0310 	add.w	r3, r7, #16
 8020b12:	4619      	mov	r1, r3
 8020b14:	68b8      	ldr	r0, [r7, #8]
 8020b16:	f7ff fe60 	bl	80207da <_lv_area_is_point_on>
 8020b1a:	4603      	mov	r3, r0
 8020b1c:	f083 0301 	eor.w	r3, r3, #1
 8020b20:	b2db      	uxtb	r3, r3
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d001      	beq.n	8020b2a <_lv_area_is_in+0xa2>
 8020b26:	2300      	movs	r3, #0
 8020b28:	e048      	b.n	8020bbc <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 8020b2a:	68fb      	ldr	r3, [r7, #12]
 8020b2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020b30:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 8020b32:	68fb      	ldr	r3, [r7, #12]
 8020b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020b38:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020b3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020b3e:	f107 0310 	add.w	r3, r7, #16
 8020b42:	4619      	mov	r1, r3
 8020b44:	68b8      	ldr	r0, [r7, #8]
 8020b46:	f7ff fe48 	bl	80207da <_lv_area_is_point_on>
 8020b4a:	4603      	mov	r3, r0
 8020b4c:	f083 0301 	eor.w	r3, r3, #1
 8020b50:	b2db      	uxtb	r3, r3
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d001      	beq.n	8020b5a <_lv_area_is_in+0xd2>
 8020b56:	2300      	movs	r3, #0
 8020b58:	e030      	b.n	8020bbc <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 8020b5a:	68fb      	ldr	r3, [r7, #12]
 8020b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020b60:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 8020b62:	68fb      	ldr	r3, [r7, #12]
 8020b64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020b68:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020b6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020b6e:	f107 0310 	add.w	r3, r7, #16
 8020b72:	4619      	mov	r1, r3
 8020b74:	68b8      	ldr	r0, [r7, #8]
 8020b76:	f7ff fe30 	bl	80207da <_lv_area_is_point_on>
 8020b7a:	4603      	mov	r3, r0
 8020b7c:	f083 0301 	eor.w	r3, r3, #1
 8020b80:	b2db      	uxtb	r3, r3
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d001      	beq.n	8020b8a <_lv_area_is_in+0x102>
 8020b86:	2300      	movs	r3, #0
 8020b88:	e018      	b.n	8020bbc <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 8020b8a:	68fb      	ldr	r3, [r7, #12]
 8020b8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020b90:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 8020b92:	68fb      	ldr	r3, [r7, #12]
 8020b94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020b98:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020b9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020b9e:	f107 0310 	add.w	r3, r7, #16
 8020ba2:	4619      	mov	r1, r3
 8020ba4:	68b8      	ldr	r0, [r7, #8]
 8020ba6:	f7ff fe18 	bl	80207da <_lv_area_is_point_on>
 8020baa:	4603      	mov	r3, r0
 8020bac:	f083 0301 	eor.w	r3, r3, #1
 8020bb0:	b2db      	uxtb	r3, r3
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	d001      	beq.n	8020bba <_lv_area_is_in+0x132>
 8020bb6:	2300      	movs	r3, #0
 8020bb8:	e000      	b.n	8020bbc <_lv_area_is_in+0x134>

    return true;
 8020bba:	2301      	movs	r3, #1
}
 8020bbc:	4618      	mov	r0, r3
 8020bbe:	3718      	adds	r7, #24
 8020bc0:	46bd      	mov	sp, r7
 8020bc2:	bd80      	pop	{r7, pc}

08020bc4 <_lv_area_is_out>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `aout_p` is fully outside `aholder_p`
 */
bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 8020bc4:	b580      	push	{r7, lr}
 8020bc6:	b086      	sub	sp, #24
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	60f8      	str	r0, [r7, #12]
 8020bcc:	60b9      	str	r1, [r7, #8]
 8020bce:	4613      	mov	r3, r2
 8020bd0:	80fb      	strh	r3, [r7, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8020bd2:	68fb      	ldr	r3, [r7, #12]
 8020bd4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020bd8:	68bb      	ldr	r3, [r7, #8]
 8020bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020bde:	429a      	cmp	r2, r3
 8020be0:	db17      	blt.n	8020c12 <_lv_area_is_out+0x4e>
 8020be2:	68fb      	ldr	r3, [r7, #12]
 8020be4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020be8:	68bb      	ldr	r3, [r7, #8]
 8020bea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020bee:	429a      	cmp	r2, r3
 8020bf0:	db0f      	blt.n	8020c12 <_lv_area_is_out+0x4e>
 8020bf2:	68fb      	ldr	r3, [r7, #12]
 8020bf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020bf8:	68bb      	ldr	r3, [r7, #8]
 8020bfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020bfe:	429a      	cmp	r2, r3
 8020c00:	dc07      	bgt.n	8020c12 <_lv_area_is_out+0x4e>
       aout_p->y1 > aholder_p->y2) {
 8020c02:	68fb      	ldr	r3, [r7, #12]
 8020c04:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020c08:	68bb      	ldr	r3, [r7, #8]
 8020c0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8020c0e:	429a      	cmp	r2, r3
 8020c10:	dd01      	ble.n	8020c16 <_lv_area_is_out+0x52>
        return true;
 8020c12:	2301      	movs	r3, #1
 8020c14:	e05a      	b.n	8020ccc <_lv_area_is_out+0x108>
    }

    if(radius == 0) return false;
 8020c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020c1a:	2b00      	cmp	r3, #0
 8020c1c:	d101      	bne.n	8020c22 <_lv_area_is_out+0x5e>
 8020c1e:	2300      	movs	r3, #0
 8020c20:	e054      	b.n	8020ccc <_lv_area_is_out+0x108>

    /*Check if the corner points are outside the radius or not*/
    lv_point_t p;

    p.x = aout_p->x1;
 8020c22:	68fb      	ldr	r3, [r7, #12]
 8020c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020c28:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 8020c2a:	68fb      	ldr	r3, [r7, #12]
 8020c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020c30:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020c32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020c36:	f107 0314 	add.w	r3, r7, #20
 8020c3a:	4619      	mov	r1, r3
 8020c3c:	68b8      	ldr	r0, [r7, #8]
 8020c3e:	f7ff fdcc 	bl	80207da <_lv_area_is_point_on>
 8020c42:	4603      	mov	r3, r0
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	d001      	beq.n	8020c4c <_lv_area_is_out+0x88>
 8020c48:	2300      	movs	r3, #0
 8020c4a:	e03f      	b.n	8020ccc <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 8020c4c:	68fb      	ldr	r3, [r7, #12]
 8020c4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020c52:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 8020c54:	68fb      	ldr	r3, [r7, #12]
 8020c56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020c5a:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020c5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020c60:	f107 0314 	add.w	r3, r7, #20
 8020c64:	4619      	mov	r1, r3
 8020c66:	68b8      	ldr	r0, [r7, #8]
 8020c68:	f7ff fdb7 	bl	80207da <_lv_area_is_point_on>
 8020c6c:	4603      	mov	r3, r0
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d001      	beq.n	8020c76 <_lv_area_is_out+0xb2>
 8020c72:	2300      	movs	r3, #0
 8020c74:	e02a      	b.n	8020ccc <_lv_area_is_out+0x108>

    p.x = aout_p->x1;
 8020c76:	68fb      	ldr	r3, [r7, #12]
 8020c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020c7c:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 8020c7e:	68fb      	ldr	r3, [r7, #12]
 8020c80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020c84:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020c86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020c8a:	f107 0314 	add.w	r3, r7, #20
 8020c8e:	4619      	mov	r1, r3
 8020c90:	68b8      	ldr	r0, [r7, #8]
 8020c92:	f7ff fda2 	bl	80207da <_lv_area_is_point_on>
 8020c96:	4603      	mov	r3, r0
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	d001      	beq.n	8020ca0 <_lv_area_is_out+0xdc>
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	e015      	b.n	8020ccc <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 8020ca0:	68fb      	ldr	r3, [r7, #12]
 8020ca2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020ca6:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 8020ca8:	68fb      	ldr	r3, [r7, #12]
 8020caa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020cae:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020cb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020cb4:	f107 0314 	add.w	r3, r7, #20
 8020cb8:	4619      	mov	r1, r3
 8020cba:	68b8      	ldr	r0, [r7, #8]
 8020cbc:	f7ff fd8d 	bl	80207da <_lv_area_is_point_on>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	d001      	beq.n	8020cca <_lv_area_is_out+0x106>
 8020cc6:	2300      	movs	r3, #0
 8020cc8:	e000      	b.n	8020ccc <_lv_area_is_out+0x108>

    return true;
 8020cca:	2301      	movs	r3, #1
}
 8020ccc:	4618      	mov	r0, r3
 8020cce:	3718      	adds	r7, #24
 8020cd0:	46bd      	mov	sp, r7
 8020cd2:	bd80      	pop	{r7, pc}

08020cd4 <lv_point_transform>:
    to_align->y2 = to_align->y1 + h - 1;
}

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot)
{
 8020cd4:	b580      	push	{r7, lr}
 8020cd6:	b08e      	sub	sp, #56	; 0x38
 8020cd8:	af00      	add	r7, sp, #0
 8020cda:	60f8      	str	r0, [r7, #12]
 8020cdc:	60b9      	str	r1, [r7, #8]
 8020cde:	607a      	str	r2, [r7, #4]
 8020ce0:	603b      	str	r3, [r7, #0]
    if(angle == 0 && zoom == 256) {
 8020ce2:	68bb      	ldr	r3, [r7, #8]
 8020ce4:	2b00      	cmp	r3, #0
 8020ce6:	d104      	bne.n	8020cf2 <lv_point_transform+0x1e>
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020cee:	f000 812c 	beq.w	8020f4a <lv_point_transform+0x276>
        return;
    }

    p->x -= pivot->x;
 8020cf2:	68fb      	ldr	r3, [r7, #12]
 8020cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020cf8:	b29a      	uxth	r2, r3
 8020cfa:	683b      	ldr	r3, [r7, #0]
 8020cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d00:	b29b      	uxth	r3, r3
 8020d02:	1ad3      	subs	r3, r2, r3
 8020d04:	b29b      	uxth	r3, r3
 8020d06:	b21a      	sxth	r2, r3
 8020d08:	68fb      	ldr	r3, [r7, #12]
 8020d0a:	801a      	strh	r2, [r3, #0]
    p->y -= pivot->y;
 8020d0c:	68fb      	ldr	r3, [r7, #12]
 8020d0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020d12:	b29a      	uxth	r2, r3
 8020d14:	683b      	ldr	r3, [r7, #0]
 8020d16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020d1a:	b29b      	uxth	r3, r3
 8020d1c:	1ad3      	subs	r3, r2, r3
 8020d1e:	b29b      	uxth	r3, r3
 8020d20:	b21a      	sxth	r2, r3
 8020d22:	68fb      	ldr	r3, [r7, #12]
 8020d24:	805a      	strh	r2, [r3, #2]

    if(angle == 0) {
 8020d26:	68bb      	ldr	r3, [r7, #8]
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d124      	bne.n	8020d76 <lv_point_transform+0xa2>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8020d2c:	68fb      	ldr	r3, [r7, #12]
 8020d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d32:	461a      	mov	r2, r3
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	fb02 f303 	mul.w	r3, r2, r3
 8020d3a:	121b      	asrs	r3, r3, #8
 8020d3c:	b29a      	uxth	r2, r3
 8020d3e:	683b      	ldr	r3, [r7, #0]
 8020d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d44:	b29b      	uxth	r3, r3
 8020d46:	4413      	add	r3, r2
 8020d48:	b29b      	uxth	r3, r3
 8020d4a:	b21a      	sxth	r2, r3
 8020d4c:	68fb      	ldr	r3, [r7, #12]
 8020d4e:	801a      	strh	r2, [r3, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8020d50:	68fb      	ldr	r3, [r7, #12]
 8020d52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020d56:	461a      	mov	r2, r3
 8020d58:	687b      	ldr	r3, [r7, #4]
 8020d5a:	fb02 f303 	mul.w	r3, r2, r3
 8020d5e:	121b      	asrs	r3, r3, #8
 8020d60:	b29a      	uxth	r2, r3
 8020d62:	683b      	ldr	r3, [r7, #0]
 8020d64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020d68:	b29b      	uxth	r3, r3
 8020d6a:	4413      	add	r3, r2
 8020d6c:	b29b      	uxth	r3, r3
 8020d6e:	b21a      	sxth	r2, r3
 8020d70:	68fb      	ldr	r3, [r7, #12]
 8020d72:	805a      	strh	r2, [r3, #2]
        return;
 8020d74:	e0ea      	b.n	8020f4c <lv_point_transform+0x278>
    }

    static int32_t angle_prev = INT32_MIN;
    static int32_t sinma;
    static int32_t cosma;
    if(angle_prev != angle) {
 8020d76:	4b77      	ldr	r3, [pc, #476]	; (8020f54 <lv_point_transform+0x280>)
 8020d78:	681b      	ldr	r3, [r3, #0]
 8020d7a:	68ba      	ldr	r2, [r7, #8]
 8020d7c:	429a      	cmp	r2, r3
 8020d7e:	d078      	beq.n	8020e72 <lv_point_transform+0x19e>
        int32_t angle_limited = angle;
 8020d80:	68bb      	ldr	r3, [r7, #8]
 8020d82:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited > 3600) angle_limited -= 3600;
 8020d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020d86:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8020d8a:	dd03      	ble.n	8020d94 <lv_point_transform+0xc0>
 8020d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020d8e:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8020d92:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited < 0) angle_limited += 3600;
 8020d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	da03      	bge.n	8020da2 <lv_point_transform+0xce>
 8020d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020d9c:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8020da0:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t angle_low = angle_limited / 10;
 8020da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020da4:	4a6c      	ldr	r2, [pc, #432]	; (8020f58 <lv_point_transform+0x284>)
 8020da6:	fb82 1203 	smull	r1, r2, r2, r3
 8020daa:	1092      	asrs	r2, r2, #2
 8020dac:	17db      	asrs	r3, r3, #31
 8020dae:	1ad3      	subs	r3, r2, r3
 8020db0:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t angle_high = angle_low + 1;
 8020db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020db4:	3301      	adds	r3, #1
 8020db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8020db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020dba:	f06f 0209 	mvn.w	r2, #9
 8020dbe:	fb02 f303 	mul.w	r3, r2, r3
 8020dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020dc4:	4413      	add	r3, r2
 8020dc6:	62bb      	str	r3, [r7, #40]	; 0x28

        int32_t s1 = lv_trigo_sin(angle_low);
 8020dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020dca:	b21b      	sxth	r3, r3
 8020dcc:	4618      	mov	r0, r3
 8020dce:	f000 fe7d 	bl	8021acc <lv_trigo_sin>
 8020dd2:	4603      	mov	r3, r0
 8020dd4:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t s2 = lv_trigo_sin(angle_high);
 8020dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dd8:	b21b      	sxth	r3, r3
 8020dda:	4618      	mov	r0, r3
 8020ddc:	f000 fe76 	bl	8021acc <lv_trigo_sin>
 8020de0:	4603      	mov	r3, r0
 8020de2:	623b      	str	r3, [r7, #32]

        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8020de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020de6:	b29b      	uxth	r3, r3
 8020de8:	335a      	adds	r3, #90	; 0x5a
 8020dea:	b29b      	uxth	r3, r3
 8020dec:	b21b      	sxth	r3, r3
 8020dee:	4618      	mov	r0, r3
 8020df0:	f000 fe6c 	bl	8021acc <lv_trigo_sin>
 8020df4:	4603      	mov	r3, r0
 8020df6:	61fb      	str	r3, [r7, #28]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 8020df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dfa:	b29b      	uxth	r3, r3
 8020dfc:	335a      	adds	r3, #90	; 0x5a
 8020dfe:	b29b      	uxth	r3, r3
 8020e00:	b21b      	sxth	r3, r3
 8020e02:	4618      	mov	r0, r3
 8020e04:	f000 fe62 	bl	8021acc <lv_trigo_sin>
 8020e08:	4603      	mov	r3, r0
 8020e0a:	61bb      	str	r3, [r7, #24]

        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8020e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e0e:	f1c3 030a 	rsb	r3, r3, #10
 8020e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020e14:	fb03 f202 	mul.w	r2, r3, r2
 8020e18:	6a3b      	ldr	r3, [r7, #32]
 8020e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020e1c:	fb01 f303 	mul.w	r3, r1, r3
 8020e20:	4413      	add	r3, r2
 8020e22:	4a4d      	ldr	r2, [pc, #308]	; (8020f58 <lv_point_transform+0x284>)
 8020e24:	fb82 1203 	smull	r1, r2, r2, r3
 8020e28:	1092      	asrs	r2, r2, #2
 8020e2a:	17db      	asrs	r3, r3, #31
 8020e2c:	1ad3      	subs	r3, r2, r3
 8020e2e:	4a4b      	ldr	r2, [pc, #300]	; (8020f5c <lv_point_transform+0x288>)
 8020e30:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8020e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e34:	f1c3 030a 	rsb	r3, r3, #10
 8020e38:	69fa      	ldr	r2, [r7, #28]
 8020e3a:	fb03 f202 	mul.w	r2, r3, r2
 8020e3e:	69bb      	ldr	r3, [r7, #24]
 8020e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020e42:	fb01 f303 	mul.w	r3, r1, r3
 8020e46:	4413      	add	r3, r2
 8020e48:	4a43      	ldr	r2, [pc, #268]	; (8020f58 <lv_point_transform+0x284>)
 8020e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8020e4e:	1092      	asrs	r2, r2, #2
 8020e50:	17db      	asrs	r3, r3, #31
 8020e52:	1ad3      	subs	r3, r2, r3
 8020e54:	4a42      	ldr	r2, [pc, #264]	; (8020f60 <lv_point_transform+0x28c>)
 8020e56:	6013      	str	r3, [r2, #0]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8020e58:	4b40      	ldr	r3, [pc, #256]	; (8020f5c <lv_point_transform+0x288>)
 8020e5a:	681b      	ldr	r3, [r3, #0]
 8020e5c:	115b      	asrs	r3, r3, #5
 8020e5e:	4a3f      	ldr	r2, [pc, #252]	; (8020f5c <lv_point_transform+0x288>)
 8020e60:	6013      	str	r3, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8020e62:	4b3f      	ldr	r3, [pc, #252]	; (8020f60 <lv_point_transform+0x28c>)
 8020e64:	681b      	ldr	r3, [r3, #0]
 8020e66:	115b      	asrs	r3, r3, #5
 8020e68:	4a3d      	ldr	r2, [pc, #244]	; (8020f60 <lv_point_transform+0x28c>)
 8020e6a:	6013      	str	r3, [r2, #0]
        angle_prev = angle;
 8020e6c:	4a39      	ldr	r2, [pc, #228]	; (8020f54 <lv_point_transform+0x280>)
 8020e6e:	68bb      	ldr	r3, [r7, #8]
 8020e70:	6013      	str	r3, [r2, #0]
    }
    int32_t x = p->x;
 8020e72:	68fb      	ldr	r3, [r7, #12]
 8020e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020e78:	617b      	str	r3, [r7, #20]
    int32_t y = p->y;
 8020e7a:	68fb      	ldr	r3, [r7, #12]
 8020e7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020e80:	613b      	str	r3, [r7, #16]
    if(zoom == 256) {
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020e88:	d12c      	bne.n	8020ee4 <lv_point_transform+0x210>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8020e8a:	4b35      	ldr	r3, [pc, #212]	; (8020f60 <lv_point_transform+0x28c>)
 8020e8c:	681b      	ldr	r3, [r3, #0]
 8020e8e:	697a      	ldr	r2, [r7, #20]
 8020e90:	fb03 f202 	mul.w	r2, r3, r2
 8020e94:	4b31      	ldr	r3, [pc, #196]	; (8020f5c <lv_point_transform+0x288>)
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	6939      	ldr	r1, [r7, #16]
 8020e9a:	fb01 f303 	mul.w	r3, r1, r3
 8020e9e:	1ad3      	subs	r3, r2, r3
 8020ea0:	129b      	asrs	r3, r3, #10
 8020ea2:	b29a      	uxth	r2, r3
 8020ea4:	683b      	ldr	r3, [r7, #0]
 8020ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020eaa:	b29b      	uxth	r3, r3
 8020eac:	4413      	add	r3, r2
 8020eae:	b29b      	uxth	r3, r3
 8020eb0:	b21a      	sxth	r2, r3
 8020eb2:	68fb      	ldr	r3, [r7, #12]
 8020eb4:	801a      	strh	r2, [r3, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8020eb6:	4b29      	ldr	r3, [pc, #164]	; (8020f5c <lv_point_transform+0x288>)
 8020eb8:	681b      	ldr	r3, [r3, #0]
 8020eba:	697a      	ldr	r2, [r7, #20]
 8020ebc:	fb03 f202 	mul.w	r2, r3, r2
 8020ec0:	4b27      	ldr	r3, [pc, #156]	; (8020f60 <lv_point_transform+0x28c>)
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	6939      	ldr	r1, [r7, #16]
 8020ec6:	fb01 f303 	mul.w	r3, r1, r3
 8020eca:	4413      	add	r3, r2
 8020ecc:	129b      	asrs	r3, r3, #10
 8020ece:	b29a      	uxth	r2, r3
 8020ed0:	683b      	ldr	r3, [r7, #0]
 8020ed2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ed6:	b29b      	uxth	r3, r3
 8020ed8:	4413      	add	r3, r2
 8020eda:	b29b      	uxth	r3, r3
 8020edc:	b21a      	sxth	r2, r3
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	805a      	strh	r2, [r3, #2]
 8020ee2:	e033      	b.n	8020f4c <lv_point_transform+0x278>
    }
    else {
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8020ee4:	4b1e      	ldr	r3, [pc, #120]	; (8020f60 <lv_point_transform+0x28c>)
 8020ee6:	681b      	ldr	r3, [r3, #0]
 8020ee8:	697a      	ldr	r2, [r7, #20]
 8020eea:	fb03 f202 	mul.w	r2, r3, r2
 8020eee:	4b1b      	ldr	r3, [pc, #108]	; (8020f5c <lv_point_transform+0x288>)
 8020ef0:	681b      	ldr	r3, [r3, #0]
 8020ef2:	6939      	ldr	r1, [r7, #16]
 8020ef4:	fb01 f303 	mul.w	r3, r1, r3
 8020ef8:	1ad3      	subs	r3, r2, r3
 8020efa:	687a      	ldr	r2, [r7, #4]
 8020efc:	fb02 f303 	mul.w	r3, r2, r3
 8020f00:	149b      	asrs	r3, r3, #18
 8020f02:	b29a      	uxth	r2, r3
 8020f04:	683b      	ldr	r3, [r7, #0]
 8020f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f0a:	b29b      	uxth	r3, r3
 8020f0c:	4413      	add	r3, r2
 8020f0e:	b29b      	uxth	r3, r3
 8020f10:	b21a      	sxth	r2, r3
 8020f12:	68fb      	ldr	r3, [r7, #12]
 8020f14:	801a      	strh	r2, [r3, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8020f16:	4b11      	ldr	r3, [pc, #68]	; (8020f5c <lv_point_transform+0x288>)
 8020f18:	681b      	ldr	r3, [r3, #0]
 8020f1a:	697a      	ldr	r2, [r7, #20]
 8020f1c:	fb03 f202 	mul.w	r2, r3, r2
 8020f20:	4b0f      	ldr	r3, [pc, #60]	; (8020f60 <lv_point_transform+0x28c>)
 8020f22:	681b      	ldr	r3, [r3, #0]
 8020f24:	6939      	ldr	r1, [r7, #16]
 8020f26:	fb01 f303 	mul.w	r3, r1, r3
 8020f2a:	4413      	add	r3, r2
 8020f2c:	687a      	ldr	r2, [r7, #4]
 8020f2e:	fb02 f303 	mul.w	r3, r2, r3
 8020f32:	149b      	asrs	r3, r3, #18
 8020f34:	b29a      	uxth	r2, r3
 8020f36:	683b      	ldr	r3, [r7, #0]
 8020f38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020f3c:	b29b      	uxth	r3, r3
 8020f3e:	4413      	add	r3, r2
 8020f40:	b29b      	uxth	r3, r3
 8020f42:	b21a      	sxth	r2, r3
 8020f44:	68fb      	ldr	r3, [r7, #12]
 8020f46:	805a      	strh	r2, [r3, #2]
 8020f48:	e000      	b.n	8020f4c <lv_point_transform+0x278>
        return;
 8020f4a:	bf00      	nop
    }
}
 8020f4c:	3738      	adds	r7, #56	; 0x38
 8020f4e:	46bd      	mov	sp, r7
 8020f50:	bd80      	pop	{r7, pc}
 8020f52:	bf00      	nop
 8020f54:	20000010 	.word	0x20000010
 8020f58:	66666667 	.word	0x66666667
 8020f5c:	20000844 	.word	0x20000844
 8020f60:	20000848 	.word	0x20000848

08020f64 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 8020f64:	b480      	push	{r7}
 8020f66:	b089      	sub	sp, #36	; 0x24
 8020f68:	af00      	add	r7, sp, #0
 8020f6a:	6078      	str	r0, [r7, #4]
 8020f6c:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8020f6e:	687b      	ldr	r3, [r7, #4]
 8020f70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020f74:	461a      	mov	r2, r3
 8020f76:	687b      	ldr	r3, [r7, #4]
 8020f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f7c:	1ad3      	subs	r3, r2, r3
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	da00      	bge.n	8020f84 <lv_point_within_circle+0x20>
 8020f82:	3301      	adds	r3, #1
 8020f84:	105b      	asrs	r3, r3, #1
 8020f86:	83fb      	strh	r3, [r7, #30]

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f8e:	b29a      	uxth	r2, r3
 8020f90:	8bfb      	ldrh	r3, [r7, #30]
 8020f92:	4413      	add	r3, r2
 8020f94:	b29b      	uxth	r3, r3
 8020f96:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020f9e:	b29a      	uxth	r2, r3
 8020fa0:	8bfb      	ldrh	r3, [r7, #30]
 8020fa2:	4413      	add	r3, r2
 8020fa4:	b29b      	uxth	r3, r3
 8020fa6:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 8020fa8:	683b      	ldr	r3, [r7, #0]
 8020faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020fae:	b29a      	uxth	r2, r3
 8020fb0:	8bbb      	ldrh	r3, [r7, #28]
 8020fb2:	1ad3      	subs	r3, r2, r3
 8020fb4:	b29b      	uxth	r3, r3
 8020fb6:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 8020fb8:	683b      	ldr	r3, [r7, #0]
 8020fba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020fbe:	b29a      	uxth	r2, r3
 8020fc0:	8b7b      	ldrh	r3, [r7, #26]
 8020fc2:	1ad3      	subs	r3, r2, r3
 8020fc4:	b29b      	uxth	r3, r3
 8020fc6:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 8020fc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020fcc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8020fd0:	fb02 f303 	mul.w	r3, r2, r3
 8020fd4:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 8020fd6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020fda:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020fde:	fb03 f202 	mul.w	r2, r3, r2
 8020fe2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020fe6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8020fea:	fb01 f303 	mul.w	r3, r1, r3
 8020fee:	4413      	add	r3, r2
 8020ff0:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 8020ff2:	68fa      	ldr	r2, [r7, #12]
 8020ff4:	693b      	ldr	r3, [r7, #16]
 8020ff6:	429a      	cmp	r2, r3
 8020ff8:	d801      	bhi.n	8020ffe <lv_point_within_circle+0x9a>
        return true;
 8020ffa:	2301      	movs	r3, #1
 8020ffc:	e000      	b.n	8021000 <lv_point_within_circle+0x9c>
    else
        return false;
 8020ffe:	2300      	movs	r3, #0
}
 8021000:	4618      	mov	r0, r3
 8021002:	3724      	adds	r7, #36	; 0x24
 8021004:	46bd      	mov	sp, r7
 8021006:	f85d 7b04 	ldr.w	r7, [sp], #4
 802100a:	4770      	bx	lr

0802100c <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 802100c:	b480      	push	{r7}
 802100e:	b083      	sub	sp, #12
 8021010:	af00      	add	r7, sp, #0
 8021012:	4603      	mov	r3, r0
 8021014:	71fb      	strb	r3, [r7, #7]
 8021016:	460b      	mov	r3, r1
 8021018:	71bb      	strb	r3, [r7, #6]
 802101a:	4613      	mov	r3, r2
 802101c:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 802101e:	797b      	ldrb	r3, [r7, #5]
 8021020:	09db      	lsrs	r3, r3, #7
 8021022:	b2da      	uxtb	r2, r3
 8021024:	79bb      	ldrb	r3, [r7, #6]
 8021026:	09db      	lsrs	r3, r3, #7
 8021028:	b2db      	uxtb	r3, r3
 802102a:	4313      	orrs	r3, r2
 802102c:	b2da      	uxtb	r2, r3
 802102e:	79fb      	ldrb	r3, [r7, #7]
 8021030:	09db      	lsrs	r3, r3, #7
 8021032:	b2db      	uxtb	r3, r3
 8021034:	4313      	orrs	r3, r2
 8021036:	b2db      	uxtb	r3, r3
}
 8021038:	4618      	mov	r0, r3
 802103a:	370c      	adds	r7, #12
 802103c:	46bd      	mov	sp, r7
 802103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021042:	4770      	bx	lr

08021044 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8021044:	b580      	push	{r7, lr}
 8021046:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8021048:	2200      	movs	r2, #0
 802104a:	2100      	movs	r1, #0
 802104c:	2000      	movs	r0, #0
 802104e:	f7ff ffdd 	bl	802100c <lv_color_make>
 8021052:	4603      	mov	r3, r0
}
 8021054:	4618      	mov	r0, r3
 8021056:	bd80      	pop	{r7, pc}

08021058 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 8021058:	b480      	push	{r7}
 802105a:	b085      	sub	sp, #20
 802105c:	af00      	add	r7, sp, #0
 802105e:	60f8      	str	r0, [r7, #12]
 8021060:	7239      	strb	r1, [r7, #8]
 8021062:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num--;
    }
#else
    while(px_num > 16) {
 8021064:	e062      	b.n	802112c <lv_color_fill+0xd4>
        *buf = color;
 8021066:	68fb      	ldr	r3, [r7, #12]
 8021068:	7a3a      	ldrb	r2, [r7, #8]
 802106a:	701a      	strb	r2, [r3, #0]
        buf++;
 802106c:	68fb      	ldr	r3, [r7, #12]
 802106e:	3301      	adds	r3, #1
 8021070:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021072:	68fb      	ldr	r3, [r7, #12]
 8021074:	7a3a      	ldrb	r2, [r7, #8]
 8021076:	701a      	strb	r2, [r3, #0]
        buf++;
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	3301      	adds	r3, #1
 802107c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802107e:	68fb      	ldr	r3, [r7, #12]
 8021080:	7a3a      	ldrb	r2, [r7, #8]
 8021082:	701a      	strb	r2, [r3, #0]
        buf++;
 8021084:	68fb      	ldr	r3, [r7, #12]
 8021086:	3301      	adds	r3, #1
 8021088:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	7a3a      	ldrb	r2, [r7, #8]
 802108e:	701a      	strb	r2, [r3, #0]
        buf++;
 8021090:	68fb      	ldr	r3, [r7, #12]
 8021092:	3301      	adds	r3, #1
 8021094:	60fb      	str	r3, [r7, #12]

        *buf = color;
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	7a3a      	ldrb	r2, [r7, #8]
 802109a:	701a      	strb	r2, [r3, #0]
        buf++;
 802109c:	68fb      	ldr	r3, [r7, #12]
 802109e:	3301      	adds	r3, #1
 80210a0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210a2:	68fb      	ldr	r3, [r7, #12]
 80210a4:	7a3a      	ldrb	r2, [r7, #8]
 80210a6:	701a      	strb	r2, [r3, #0]
        buf++;
 80210a8:	68fb      	ldr	r3, [r7, #12]
 80210aa:	3301      	adds	r3, #1
 80210ac:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210ae:	68fb      	ldr	r3, [r7, #12]
 80210b0:	7a3a      	ldrb	r2, [r7, #8]
 80210b2:	701a      	strb	r2, [r3, #0]
        buf++;
 80210b4:	68fb      	ldr	r3, [r7, #12]
 80210b6:	3301      	adds	r3, #1
 80210b8:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210ba:	68fb      	ldr	r3, [r7, #12]
 80210bc:	7a3a      	ldrb	r2, [r7, #8]
 80210be:	701a      	strb	r2, [r3, #0]
        buf++;
 80210c0:	68fb      	ldr	r3, [r7, #12]
 80210c2:	3301      	adds	r3, #1
 80210c4:	60fb      	str	r3, [r7, #12]

        *buf = color;
 80210c6:	68fb      	ldr	r3, [r7, #12]
 80210c8:	7a3a      	ldrb	r2, [r7, #8]
 80210ca:	701a      	strb	r2, [r3, #0]
        buf++;
 80210cc:	68fb      	ldr	r3, [r7, #12]
 80210ce:	3301      	adds	r3, #1
 80210d0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210d2:	68fb      	ldr	r3, [r7, #12]
 80210d4:	7a3a      	ldrb	r2, [r7, #8]
 80210d6:	701a      	strb	r2, [r3, #0]
        buf++;
 80210d8:	68fb      	ldr	r3, [r7, #12]
 80210da:	3301      	adds	r3, #1
 80210dc:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210de:	68fb      	ldr	r3, [r7, #12]
 80210e0:	7a3a      	ldrb	r2, [r7, #8]
 80210e2:	701a      	strb	r2, [r3, #0]
        buf++;
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	3301      	adds	r3, #1
 80210e8:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80210ea:	68fb      	ldr	r3, [r7, #12]
 80210ec:	7a3a      	ldrb	r2, [r7, #8]
 80210ee:	701a      	strb	r2, [r3, #0]
        buf++;
 80210f0:	68fb      	ldr	r3, [r7, #12]
 80210f2:	3301      	adds	r3, #1
 80210f4:	60fb      	str	r3, [r7, #12]

        *buf = color;
 80210f6:	68fb      	ldr	r3, [r7, #12]
 80210f8:	7a3a      	ldrb	r2, [r7, #8]
 80210fa:	701a      	strb	r2, [r3, #0]
        buf++;
 80210fc:	68fb      	ldr	r3, [r7, #12]
 80210fe:	3301      	adds	r3, #1
 8021100:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021102:	68fb      	ldr	r3, [r7, #12]
 8021104:	7a3a      	ldrb	r2, [r7, #8]
 8021106:	701a      	strb	r2, [r3, #0]
        buf++;
 8021108:	68fb      	ldr	r3, [r7, #12]
 802110a:	3301      	adds	r3, #1
 802110c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802110e:	68fb      	ldr	r3, [r7, #12]
 8021110:	7a3a      	ldrb	r2, [r7, #8]
 8021112:	701a      	strb	r2, [r3, #0]
        buf++;
 8021114:	68fb      	ldr	r3, [r7, #12]
 8021116:	3301      	adds	r3, #1
 8021118:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802111a:	68fb      	ldr	r3, [r7, #12]
 802111c:	7a3a      	ldrb	r2, [r7, #8]
 802111e:	701a      	strb	r2, [r3, #0]
        buf++;
 8021120:	68fb      	ldr	r3, [r7, #12]
 8021122:	3301      	adds	r3, #1
 8021124:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	3b10      	subs	r3, #16
 802112a:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	2b10      	cmp	r3, #16
 8021130:	d899      	bhi.n	8021066 <lv_color_fill+0xe>
    }
    while(px_num) {
 8021132:	e008      	b.n	8021146 <lv_color_fill+0xee>
        *buf = color;
 8021134:	68fb      	ldr	r3, [r7, #12]
 8021136:	7a3a      	ldrb	r2, [r7, #8]
 8021138:	701a      	strb	r2, [r3, #0]
        buf++;
 802113a:	68fb      	ldr	r3, [r7, #12]
 802113c:	3301      	adds	r3, #1
 802113e:	60fb      	str	r3, [r7, #12]
        px_num--;
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	3b01      	subs	r3, #1
 8021144:	607b      	str	r3, [r7, #4]
    while(px_num) {
 8021146:	687b      	ldr	r3, [r7, #4]
 8021148:	2b00      	cmp	r3, #0
 802114a:	d1f3      	bne.n	8021134 <lv_color_fill+0xdc>
    }
#endif
}
 802114c:	bf00      	nop
 802114e:	bf00      	nop
 8021150:	3714      	adds	r7, #20
 8021152:	46bd      	mov	sp, r7
 8021154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021158:	4770      	bx	lr
	...

0802115c <lv_palette_main>:
    color32.full = lv_color_to32(color);
    return lv_color_rgb_to_hsv(color32.ch.red, color32.ch.green, color32.ch.blue);
}

lv_color_t lv_palette_main(lv_palette_t p)
{
 802115c:	b580      	push	{r7, lr}
 802115e:	b082      	sub	sp, #8
 8021160:	af00      	add	r7, sp, #0
 8021162:	4603      	mov	r3, r0
 8021164:	71fb      	strb	r3, [r7, #7]
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 8021166:	79fb      	ldrb	r3, [r7, #7]
 8021168:	2b12      	cmp	r3, #18
 802116a:	d903      	bls.n	8021174 <lv_palette_main+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
 802116c:	f7ff ff6a 	bl	8021044 <lv_color_black>
 8021170:	4603      	mov	r3, r0
 8021172:	e002      	b.n	802117a <lv_palette_main+0x1e>
    }

    return colors[p];
 8021174:	79fb      	ldrb	r3, [r7, #7]
 8021176:	4a03      	ldr	r2, [pc, #12]	; (8021184 <lv_palette_main+0x28>)
 8021178:	5cd3      	ldrb	r3, [r2, r3]

}
 802117a:	4618      	mov	r0, r3
 802117c:	3708      	adds	r7, #8
 802117e:	46bd      	mov	sp, r7
 8021180:	bd80      	pop	{r7, pc}
 8021182:	bf00      	nop
 8021184:	08029df8 	.word	0x08029df8

08021188 <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 8021188:	b580      	push	{r7, lr}
 802118a:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 802118c:	2104      	movs	r1, #4
 802118e:	4802      	ldr	r0, [pc, #8]	; (8021198 <_lv_fs_init+0x10>)
 8021190:	f000 fb19 	bl	80217c6 <_lv_ll_init>
}
 8021194:	bf00      	nop
 8021196:	bd80      	pop	{r7, pc}
 8021198:	20000870 	.word	0x20000870

0802119c <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 802119c:	b580      	push	{r7, lr}
 802119e:	b088      	sub	sp, #32
 80211a0:	af00      	add	r7, sp, #0
 80211a2:	60f8      	str	r0, [r7, #12]
 80211a4:	60b9      	str	r1, [r7, #8]
 80211a6:	4613      	mov	r3, r2
 80211a8:	71fb      	strb	r3, [r7, #7]
    if(path == NULL) {
 80211aa:	68bb      	ldr	r3, [r7, #8]
 80211ac:	2b00      	cmp	r3, #0
 80211ae:	d101      	bne.n	80211b4 <lv_fs_open+0x18>
        LV_LOG_WARN("Can't open file: path is NULL");
        return LV_FS_RES_INV_PARAM;
 80211b0:	230b      	movs	r3, #11
 80211b2:	e05c      	b.n	802126e <lv_fs_open+0xd2>
    }

    char letter = path[0];
 80211b4:	68bb      	ldr	r3, [r7, #8]
 80211b6:	781b      	ldrb	r3, [r3, #0]
 80211b8:	77fb      	strb	r3, [r7, #31]
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 80211ba:	7ffb      	ldrb	r3, [r7, #31]
 80211bc:	4618      	mov	r0, r3
 80211be:	f000 fa9b 	bl	80216f8 <lv_fs_get_drv>
 80211c2:	61b8      	str	r0, [r7, #24]

    if(drv == NULL) {
 80211c4:	69bb      	ldr	r3, [r7, #24]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d101      	bne.n	80211ce <lv_fs_open+0x32>
        LV_LOG_WARN("Can't open file (%s): unknown driver letter", path);
        return LV_FS_RES_NOT_EX;
 80211ca:	2303      	movs	r3, #3
 80211cc:	e04f      	b.n	802126e <lv_fs_open+0xd2>
    }

    if(drv->ready_cb) {
 80211ce:	69bb      	ldr	r3, [r7, #24]
 80211d0:	685b      	ldr	r3, [r3, #4]
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	d00b      	beq.n	80211ee <lv_fs_open+0x52>
        if(drv->ready_cb(drv) == false) {
 80211d6:	69bb      	ldr	r3, [r7, #24]
 80211d8:	685b      	ldr	r3, [r3, #4]
 80211da:	69b8      	ldr	r0, [r7, #24]
 80211dc:	4798      	blx	r3
 80211de:	4603      	mov	r3, r0
 80211e0:	f083 0301 	eor.w	r3, r3, #1
 80211e4:	b2db      	uxtb	r3, r3
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d001      	beq.n	80211ee <lv_fs_open+0x52>
            LV_LOG_WARN("Can't open file (%s): driver not ready", path);
            return LV_FS_RES_HW_ERR;
 80211ea:	2301      	movs	r3, #1
 80211ec:	e03f      	b.n	802126e <lv_fs_open+0xd2>
        }
    }

    if(drv->open_cb == NULL) {
 80211ee:	69bb      	ldr	r3, [r7, #24]
 80211f0:	689b      	ldr	r3, [r3, #8]
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	d101      	bne.n	80211fa <lv_fs_open+0x5e>
        LV_LOG_WARN("Can't open file (%s): open function not exists", path);
        return LV_FS_RES_NOT_IMP;
 80211f6:	2309      	movs	r3, #9
 80211f8:	e039      	b.n	802126e <lv_fs_open+0xd2>
    }

    const char * real_path = lv_fs_get_real_path(path);
 80211fa:	68b8      	ldr	r0, [r7, #8]
 80211fc:	f000 face 	bl	802179c <lv_fs_get_real_path>
 8021200:	6178      	str	r0, [r7, #20]
    void * file_d = drv->open_cb(drv, real_path, mode);
 8021202:	69bb      	ldr	r3, [r7, #24]
 8021204:	689b      	ldr	r3, [r3, #8]
 8021206:	79fa      	ldrb	r2, [r7, #7]
 8021208:	6979      	ldr	r1, [r7, #20]
 802120a:	69b8      	ldr	r0, [r7, #24]
 802120c:	4798      	blx	r3
 802120e:	6138      	str	r0, [r7, #16]

    if(file_d == NULL || file_d == (void *)(-1)) {
 8021210:	693b      	ldr	r3, [r7, #16]
 8021212:	2b00      	cmp	r3, #0
 8021214:	d003      	beq.n	802121e <lv_fs_open+0x82>
 8021216:	693b      	ldr	r3, [r7, #16]
 8021218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802121c:	d101      	bne.n	8021222 <lv_fs_open+0x86>
        return LV_FS_RES_UNKNOWN;
 802121e:	230c      	movs	r3, #12
 8021220:	e025      	b.n	802126e <lv_fs_open+0xd2>
    }

    file_p->drv = drv;
 8021222:	68fb      	ldr	r3, [r7, #12]
 8021224:	69ba      	ldr	r2, [r7, #24]
 8021226:	605a      	str	r2, [r3, #4]
    file_p->file_d = file_d;
 8021228:	68fb      	ldr	r3, [r7, #12]
 802122a:	693a      	ldr	r2, [r7, #16]
 802122c:	601a      	str	r2, [r3, #0]

    if(drv->cache_size) {
 802122e:	69bb      	ldr	r3, [r7, #24]
 8021230:	885b      	ldrh	r3, [r3, #2]
 8021232:	2b00      	cmp	r3, #0
 8021234:	d01a      	beq.n	802126c <lv_fs_open+0xd0>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 8021236:	2010      	movs	r0, #16
 8021238:	f000 fd62 	bl	8021d00 <lv_mem_alloc>
 802123c:	4602      	mov	r2, r0
 802123e:	68fb      	ldr	r3, [r7, #12]
 8021240:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8021242:	68fb      	ldr	r3, [r7, #12]
 8021244:	689b      	ldr	r3, [r3, #8]
 8021246:	2b00      	cmp	r3, #0
 8021248:	d100      	bne.n	802124c <lv_fs_open+0xb0>
 802124a:	e7fe      	b.n	802124a <lv_fs_open+0xae>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 802124c:	68fb      	ldr	r3, [r7, #12]
 802124e:	689b      	ldr	r3, [r3, #8]
 8021250:	2110      	movs	r1, #16
 8021252:	4618      	mov	r0, r3
 8021254:	f001 f988 	bl	8022568 <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 8021258:	68fb      	ldr	r3, [r7, #12]
 802125a:	689b      	ldr	r3, [r3, #8]
 802125c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021260:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 8021262:	68fb      	ldr	r3, [r7, #12]
 8021264:	689b      	ldr	r3, [r3, #8]
 8021266:	f06f 0201 	mvn.w	r2, #1
 802126a:	605a      	str	r2, [r3, #4]
    }

    return LV_FS_RES_OK;
 802126c:	2300      	movs	r3, #0
}
 802126e:	4618      	mov	r0, r3
 8021270:	3720      	adds	r7, #32
 8021272:	46bd      	mov	sp, r7
 8021274:	bd80      	pop	{r7, pc}

08021276 <lv_fs_close>:

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 8021276:	b580      	push	{r7, lr}
 8021278:	b084      	sub	sp, #16
 802127a:	af00      	add	r7, sp, #0
 802127c:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	685b      	ldr	r3, [r3, #4]
 8021282:	2b00      	cmp	r3, #0
 8021284:	d101      	bne.n	802128a <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 8021286:	230b      	movs	r3, #11
 8021288:	e034      	b.n	80212f4 <lv_fs_close+0x7e>
    }

    if(file_p->drv->close_cb == NULL) {
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	685b      	ldr	r3, [r3, #4]
 802128e:	68db      	ldr	r3, [r3, #12]
 8021290:	2b00      	cmp	r3, #0
 8021292:	d101      	bne.n	8021298 <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 8021294:	2309      	movs	r3, #9
 8021296:	e02d      	b.n	80212f4 <lv_fs_close+0x7e>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	685b      	ldr	r3, [r3, #4]
 802129c:	68db      	ldr	r3, [r3, #12]
 802129e:	687a      	ldr	r2, [r7, #4]
 80212a0:	6850      	ldr	r0, [r2, #4]
 80212a2:	687a      	ldr	r2, [r7, #4]
 80212a4:	6812      	ldr	r2, [r2, #0]
 80212a6:	4611      	mov	r1, r2
 80212a8:	4798      	blx	r3
 80212aa:	4603      	mov	r3, r0
 80212ac:	73fb      	strb	r3, [r7, #15]

    if(file_p->drv->cache_size && file_p->cache) {
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	685b      	ldr	r3, [r3, #4]
 80212b2:	885b      	ldrh	r3, [r3, #2]
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d013      	beq.n	80212e0 <lv_fs_close+0x6a>
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	689b      	ldr	r3, [r3, #8]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d00f      	beq.n	80212e0 <lv_fs_close+0x6a>
        if(file_p->cache->buffer) {
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	689b      	ldr	r3, [r3, #8]
 80212c4:	68db      	ldr	r3, [r3, #12]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d005      	beq.n	80212d6 <lv_fs_close+0x60>
            lv_mem_free(file_p->cache->buffer);
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	689b      	ldr	r3, [r3, #8]
 80212ce:	68db      	ldr	r3, [r3, #12]
 80212d0:	4618      	mov	r0, r3
 80212d2:	f000 fd45 	bl	8021d60 <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	689b      	ldr	r3, [r3, #8]
 80212da:	4618      	mov	r0, r3
 80212dc:	f000 fd40 	bl	8021d60 <lv_mem_free>
    }

    file_p->file_d = NULL;
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	2200      	movs	r2, #0
 80212e4:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	2200      	movs	r2, #0
 80212ea:	605a      	str	r2, [r3, #4]
    file_p->cache  = NULL;
 80212ec:	687b      	ldr	r3, [r7, #4]
 80212ee:	2200      	movs	r2, #0
 80212f0:	609a      	str	r2, [r3, #8]

    return res;
 80212f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80212f4:	4618      	mov	r0, r3
 80212f6:	3710      	adds	r7, #16
 80212f8:	46bd      	mov	sp, r7
 80212fa:	bd80      	pop	{r7, pc}

080212fc <lv_fs_read_cached>:

static lv_fs_res_t lv_fs_read_cached(lv_fs_file_t * file_p, char * buf, uint32_t btr, uint32_t * br)
{
 80212fc:	b5b0      	push	{r4, r5, r7, lr}
 80212fe:	b090      	sub	sp, #64	; 0x40
 8021300:	af02      	add	r7, sp, #8
 8021302:	60f8      	str	r0, [r7, #12]
 8021304:	60b9      	str	r1, [r7, #8]
 8021306:	607a      	str	r2, [r7, #4]
 8021308:	603b      	str	r3, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 802130a:	2300      	movs	r3, #0
 802130c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t file_position = file_p->cache->file_position;
 8021310:	68fb      	ldr	r3, [r7, #12]
 8021312:	689b      	ldr	r3, [r3, #8]
 8021314:	689b      	ldr	r3, [r3, #8]
 8021316:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t start = file_p->cache->start;
 8021318:	68fb      	ldr	r3, [r7, #12]
 802131a:	689b      	ldr	r3, [r3, #8]
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t end = file_p->cache->end;
 8021320:	68fb      	ldr	r3, [r7, #12]
 8021322:	689b      	ldr	r3, [r3, #8]
 8021324:	685b      	ldr	r3, [r3, #4]
 8021326:	627b      	str	r3, [r7, #36]	; 0x24
    char * buffer = file_p->cache->buffer;
 8021328:	68fb      	ldr	r3, [r7, #12]
 802132a:	689b      	ldr	r3, [r3, #8]
 802132c:	68db      	ldr	r3, [r3, #12]
 802132e:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t buffer_size = file_p->drv->cache_size;
 8021330:	68fb      	ldr	r3, [r7, #12]
 8021332:	685b      	ldr	r3, [r3, #4]
 8021334:	885b      	ldrh	r3, [r3, #2]
 8021336:	847b      	strh	r3, [r7, #34]	; 0x22

    if(start <= file_position && file_position < end) {
 8021338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802133c:	429a      	cmp	r2, r3
 802133e:	f200 8082 	bhi.w	8021446 <lv_fs_read_cached+0x14a>
 8021342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021346:	429a      	cmp	r2, r3
 8021348:	d27d      	bcs.n	8021446 <lv_fs_read_cached+0x14a>
        /* Data can be read from cache buffer */
        uint16_t buffer_offset = file_position - start;
 802134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802134c:	b29a      	uxth	r2, r3
 802134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021350:	b29b      	uxth	r3, r3
 8021352:	1ad3      	subs	r3, r2, r3
 8021354:	843b      	strh	r3, [r7, #32]
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8021356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802135a:	1ad2      	subs	r2, r2, r3
 802135c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 802135e:	8c3b      	ldrh	r3, [r7, #32]
 8021360:	1acb      	subs	r3, r1, r3
 8021362:	4293      	cmp	r3, r2
 8021364:	bf28      	it	cs
 8021366:	4613      	movcs	r3, r2
 8021368:	61fb      	str	r3, [r7, #28]

        if(btr <= buffer_remaining_length) {
 802136a:	687a      	ldr	r2, [r7, #4]
 802136c:	69fb      	ldr	r3, [r7, #28]
 802136e:	429a      	cmp	r2, r3
 8021370:	d80b      	bhi.n	802138a <lv_fs_read_cached+0x8e>
            /*Data is in cache buffer, and buffer end not reached, no need to read from FS*/
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8021372:	8c3b      	ldrh	r3, [r7, #32]
 8021374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021376:	4413      	add	r3, r2
 8021378:	687a      	ldr	r2, [r7, #4]
 802137a:	4619      	mov	r1, r3
 802137c:	68b8      	ldr	r0, [r7, #8]
 802137e:	f000 fe4d 	bl	802201c <lv_memcpy>
            *br = btr;
 8021382:	683b      	ldr	r3, [r7, #0]
 8021384:	687a      	ldr	r2, [r7, #4]
 8021386:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 8021388:	e0b3      	b.n	80214f2 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*First part of data is in cache buffer, but we need to read rest of data from FS*/
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 802138a:	8c3b      	ldrh	r3, [r7, #32]
 802138c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802138e:	4413      	add	r3, r2
 8021390:	69fa      	ldr	r2, [r7, #28]
 8021392:	4619      	mov	r1, r3
 8021394:	68b8      	ldr	r0, [r7, #8]
 8021396:	f000 fe41 	bl	802201c <lv_memcpy>

            uint32_t bytes_read_to_buffer = 0;
 802139a:	2300      	movs	r3, #0
 802139c:	617b      	str	r3, [r7, #20]
            if(btr > buffer_size) {
 802139e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80213a0:	687a      	ldr	r2, [r7, #4]
 80213a2:	429a      	cmp	r2, r3
 80213a4:	d916      	bls.n	80213d4 <lv_fs_read_cached+0xd8>
                /*If remaining data chuck is bigger than buffer size, then do not use cache, instead read it directly from FS*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 80213a6:	68fb      	ldr	r3, [r7, #12]
 80213a8:	685b      	ldr	r3, [r3, #4]
 80213aa:	691c      	ldr	r4, [r3, #16]
 80213ac:	68fb      	ldr	r3, [r7, #12]
 80213ae:	6858      	ldr	r0, [r3, #4]
 80213b0:	68fb      	ldr	r3, [r7, #12]
 80213b2:	6819      	ldr	r1, [r3, #0]
 80213b4:	68ba      	ldr	r2, [r7, #8]
 80213b6:	69fb      	ldr	r3, [r7, #28]
 80213b8:	18d5      	adds	r5, r2, r3
 80213ba:	687a      	ldr	r2, [r7, #4]
 80213bc:	69fb      	ldr	r3, [r7, #28]
 80213be:	1ad2      	subs	r2, r2, r3
 80213c0:	f107 0314 	add.w	r3, r7, #20
 80213c4:	9300      	str	r3, [sp, #0]
 80213c6:	4613      	mov	r3, r2
 80213c8:	462a      	mov	r2, r5
 80213ca:	47a0      	blx	r4
 80213cc:	4603      	mov	r3, r0
 80213ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80213d2:	e02e      	b.n	8021432 <lv_fs_read_cached+0x136>
                                           btr - buffer_remaining_length, &bytes_read_to_buffer);
            }
            else {
                /*If remaining data chunk is smaller than buffer size, then read into cache buffer*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 80213d4:	68fb      	ldr	r3, [r7, #12]
 80213d6:	685b      	ldr	r3, [r3, #4]
 80213d8:	691c      	ldr	r4, [r3, #16]
 80213da:	68fb      	ldr	r3, [r7, #12]
 80213dc:	6858      	ldr	r0, [r3, #4]
 80213de:	68fb      	ldr	r3, [r7, #12]
 80213e0:	6819      	ldr	r1, [r3, #0]
 80213e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80213e4:	f107 0314 	add.w	r3, r7, #20
 80213e8:	9300      	str	r3, [sp, #0]
 80213ea:	4613      	mov	r3, r2
 80213ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80213ee:	47a0      	blx	r4
 80213f0:	4603      	mov	r3, r0
 80213f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                file_p->cache->start = file_p->cache->end;
 80213f6:	68fb      	ldr	r3, [r7, #12]
 80213f8:	689a      	ldr	r2, [r3, #8]
 80213fa:	68fb      	ldr	r3, [r7, #12]
 80213fc:	689b      	ldr	r3, [r3, #8]
 80213fe:	6852      	ldr	r2, [r2, #4]
 8021400:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8021402:	68fb      	ldr	r3, [r7, #12]
 8021404:	689b      	ldr	r3, [r3, #8]
 8021406:	6819      	ldr	r1, [r3, #0]
 8021408:	697a      	ldr	r2, [r7, #20]
 802140a:	68fb      	ldr	r3, [r7, #12]
 802140c:	689b      	ldr	r3, [r3, #8]
 802140e:	440a      	add	r2, r1
 8021410:	605a      	str	r2, [r3, #4]

                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8021412:	687a      	ldr	r2, [r7, #4]
 8021414:	69fb      	ldr	r3, [r7, #28]
 8021416:	1ad2      	subs	r2, r2, r3
 8021418:	697b      	ldr	r3, [r7, #20]
 802141a:	4293      	cmp	r3, r2
 802141c:	bf28      	it	cs
 802141e:	4613      	movcs	r3, r2
 8021420:	837b      	strh	r3, [r7, #26]
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 8021422:	68ba      	ldr	r2, [r7, #8]
 8021424:	69fb      	ldr	r3, [r7, #28]
 8021426:	4413      	add	r3, r2
 8021428:	8b7a      	ldrh	r2, [r7, #26]
 802142a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802142c:	4618      	mov	r0, r3
 802142e:	f000 fdf5 	bl	802201c <lv_memcpy>
            }
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8021432:	697a      	ldr	r2, [r7, #20]
 8021434:	69fb      	ldr	r3, [r7, #28]
 8021436:	441a      	add	r2, r3
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	429a      	cmp	r2, r3
 802143c:	bf28      	it	cs
 802143e:	461a      	movcs	r2, r3
 8021440:	683b      	ldr	r3, [r7, #0]
 8021442:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 8021444:	e055      	b.n	80214f2 <lv_fs_read_cached+0x1f6>
        }
    }
    else {
        /*Data is not in cache buffer*/
        if(btr > buffer_size) {
 8021446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021448:	687a      	ldr	r2, [r7, #4]
 802144a:	429a      	cmp	r2, r3
 802144c:	d90f      	bls.n	802146e <lv_fs_read_cached+0x172>
            /*If bigger data is requested, then do not use cache, instead read it directly*/
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 802144e:	68fb      	ldr	r3, [r7, #12]
 8021450:	685b      	ldr	r3, [r3, #4]
 8021452:	691c      	ldr	r4, [r3, #16]
 8021454:	68fb      	ldr	r3, [r7, #12]
 8021456:	6858      	ldr	r0, [r3, #4]
 8021458:	68fb      	ldr	r3, [r7, #12]
 802145a:	6819      	ldr	r1, [r3, #0]
 802145c:	683b      	ldr	r3, [r7, #0]
 802145e:	9300      	str	r3, [sp, #0]
 8021460:	687b      	ldr	r3, [r7, #4]
 8021462:	68ba      	ldr	r2, [r7, #8]
 8021464:	47a0      	blx	r4
 8021466:	4603      	mov	r3, r0
 8021468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802146c:	e041      	b.n	80214f2 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*If small data is requested, then read from FS into cache buffer*/
            if(buffer == NULL) {
 802146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021470:	2b00      	cmp	r3, #0
 8021472:	d111      	bne.n	8021498 <lv_fs_read_cached+0x19c>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8021474:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021476:	68fb      	ldr	r3, [r7, #12]
 8021478:	689c      	ldr	r4, [r3, #8]
 802147a:	4610      	mov	r0, r2
 802147c:	f000 fc40 	bl	8021d00 <lv_mem_alloc>
 8021480:	4603      	mov	r3, r0
 8021482:	60e3      	str	r3, [r4, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8021484:	68fb      	ldr	r3, [r7, #12]
 8021486:	689b      	ldr	r3, [r3, #8]
 8021488:	68db      	ldr	r3, [r3, #12]
 802148a:	2b00      	cmp	r3, #0
 802148c:	d100      	bne.n	8021490 <lv_fs_read_cached+0x194>
 802148e:	e7fe      	b.n	802148e <lv_fs_read_cached+0x192>
                buffer = file_p->cache->buffer;
 8021490:	68fb      	ldr	r3, [r7, #12]
 8021492:	689b      	ldr	r3, [r3, #8]
 8021494:	68db      	ldr	r3, [r3, #12]
 8021496:	633b      	str	r3, [r7, #48]	; 0x30
            }

            uint32_t bytes_read_to_buffer = 0;
 8021498:	2300      	movs	r3, #0
 802149a:	613b      	str	r3, [r7, #16]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 802149c:	68fb      	ldr	r3, [r7, #12]
 802149e:	685b      	ldr	r3, [r3, #4]
 80214a0:	691c      	ldr	r4, [r3, #16]
 80214a2:	68fb      	ldr	r3, [r7, #12]
 80214a4:	6858      	ldr	r0, [r3, #4]
 80214a6:	68fb      	ldr	r3, [r7, #12]
 80214a8:	6819      	ldr	r1, [r3, #0]
 80214aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80214ac:	f107 0310 	add.w	r3, r7, #16
 80214b0:	9300      	str	r3, [sp, #0]
 80214b2:	4613      	mov	r3, r2
 80214b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80214b6:	47a0      	blx	r4
 80214b8:	4603      	mov	r3, r0
 80214ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            file_p->cache->start = file_position;
 80214be:	68fb      	ldr	r3, [r7, #12]
 80214c0:	689b      	ldr	r3, [r3, #8]
 80214c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80214c4:	601a      	str	r2, [r3, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 80214c6:	68fb      	ldr	r3, [r7, #12]
 80214c8:	689b      	ldr	r3, [r3, #8]
 80214ca:	6819      	ldr	r1, [r3, #0]
 80214cc:	693a      	ldr	r2, [r7, #16]
 80214ce:	68fb      	ldr	r3, [r7, #12]
 80214d0:	689b      	ldr	r3, [r3, #8]
 80214d2:	440a      	add	r2, r1
 80214d4:	605a      	str	r2, [r3, #4]

            *br = LV_MIN(btr, bytes_read_to_buffer);
 80214d6:	693a      	ldr	r2, [r7, #16]
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	429a      	cmp	r2, r3
 80214dc:	bf28      	it	cs
 80214de:	461a      	movcs	r2, r3
 80214e0:	683b      	ldr	r3, [r7, #0]
 80214e2:	601a      	str	r2, [r3, #0]
            lv_memcpy(buf, buffer, *br);
 80214e4:	683b      	ldr	r3, [r7, #0]
 80214e6:	681b      	ldr	r3, [r3, #0]
 80214e8:	461a      	mov	r2, r3
 80214ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80214ec:	68b8      	ldr	r0, [r7, #8]
 80214ee:	f000 fd95 	bl	802201c <lv_memcpy>

        }
    }

    if(res == LV_FS_RES_OK) {
 80214f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	d108      	bne.n	802150c <lv_fs_read_cached+0x210>
        file_p->cache->file_position += *br;
 80214fa:	68fb      	ldr	r3, [r7, #12]
 80214fc:	689b      	ldr	r3, [r3, #8]
 80214fe:	6899      	ldr	r1, [r3, #8]
 8021500:	683b      	ldr	r3, [r7, #0]
 8021502:	681a      	ldr	r2, [r3, #0]
 8021504:	68fb      	ldr	r3, [r7, #12]
 8021506:	689b      	ldr	r3, [r3, #8]
 8021508:	440a      	add	r2, r1
 802150a:	609a      	str	r2, [r3, #8]
    }

    return res;
 802150c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8021510:	4618      	mov	r0, r3
 8021512:	3738      	adds	r7, #56	; 0x38
 8021514:	46bd      	mov	sp, r7
 8021516:	bdb0      	pop	{r4, r5, r7, pc}

08021518 <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8021518:	b590      	push	{r4, r7, lr}
 802151a:	b089      	sub	sp, #36	; 0x24
 802151c:	af02      	add	r7, sp, #8
 802151e:	60f8      	str	r0, [r7, #12]
 8021520:	60b9      	str	r1, [r7, #8]
 8021522:	607a      	str	r2, [r7, #4]
 8021524:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 8021526:	683b      	ldr	r3, [r7, #0]
 8021528:	2b00      	cmp	r3, #0
 802152a:	d002      	beq.n	8021532 <lv_fs_read+0x1a>
 802152c:	683b      	ldr	r3, [r7, #0]
 802152e:	2200      	movs	r2, #0
 8021530:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8021532:	68fb      	ldr	r3, [r7, #12]
 8021534:	685b      	ldr	r3, [r3, #4]
 8021536:	2b00      	cmp	r3, #0
 8021538:	d101      	bne.n	802153e <lv_fs_read+0x26>
 802153a:	230b      	movs	r3, #11
 802153c:	e02d      	b.n	802159a <lv_fs_read+0x82>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 802153e:	68fb      	ldr	r3, [r7, #12]
 8021540:	685b      	ldr	r3, [r3, #4]
 8021542:	691b      	ldr	r3, [r3, #16]
 8021544:	2b00      	cmp	r3, #0
 8021546:	d101      	bne.n	802154c <lv_fs_read+0x34>
 8021548:	2309      	movs	r3, #9
 802154a:	e026      	b.n	802159a <lv_fs_read+0x82>

    uint32_t br_tmp = 0;
 802154c:	2300      	movs	r3, #0
 802154e:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 8021550:	68fb      	ldr	r3, [r7, #12]
 8021552:	685b      	ldr	r3, [r3, #4]
 8021554:	885b      	ldrh	r3, [r3, #2]
 8021556:	2b00      	cmp	r3, #0
 8021558:	d009      	beq.n	802156e <lv_fs_read+0x56>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 802155a:	f107 0310 	add.w	r3, r7, #16
 802155e:	687a      	ldr	r2, [r7, #4]
 8021560:	68b9      	ldr	r1, [r7, #8]
 8021562:	68f8      	ldr	r0, [r7, #12]
 8021564:	f7ff feca 	bl	80212fc <lv_fs_read_cached>
 8021568:	4603      	mov	r3, r0
 802156a:	75fb      	strb	r3, [r7, #23]
 802156c:	e00e      	b.n	802158c <lv_fs_read+0x74>
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 802156e:	68fb      	ldr	r3, [r7, #12]
 8021570:	685b      	ldr	r3, [r3, #4]
 8021572:	691c      	ldr	r4, [r3, #16]
 8021574:	68fb      	ldr	r3, [r7, #12]
 8021576:	6858      	ldr	r0, [r3, #4]
 8021578:	68fb      	ldr	r3, [r7, #12]
 802157a:	6819      	ldr	r1, [r3, #0]
 802157c:	f107 0310 	add.w	r3, r7, #16
 8021580:	9300      	str	r3, [sp, #0]
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	68ba      	ldr	r2, [r7, #8]
 8021586:	47a0      	blx	r4
 8021588:	4603      	mov	r3, r0
 802158a:	75fb      	strb	r3, [r7, #23]
    }

    if(br != NULL) *br = br_tmp;
 802158c:	683b      	ldr	r3, [r7, #0]
 802158e:	2b00      	cmp	r3, #0
 8021590:	d002      	beq.n	8021598 <lv_fs_read+0x80>
 8021592:	693a      	ldr	r2, [r7, #16]
 8021594:	683b      	ldr	r3, [r7, #0]
 8021596:	601a      	str	r2, [r3, #0]

    return res;
 8021598:	7dfb      	ldrb	r3, [r7, #23]
}
 802159a:	4618      	mov	r0, r3
 802159c:	371c      	adds	r7, #28
 802159e:	46bd      	mov	sp, r7
 80215a0:	bd90      	pop	{r4, r7, pc}

080215a2 <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 80215a2:	b590      	push	{r4, r7, lr}
 80215a4:	b087      	sub	sp, #28
 80215a6:	af00      	add	r7, sp, #0
 80215a8:	60f8      	str	r0, [r7, #12]
 80215aa:	60b9      	str	r1, [r7, #8]
 80215ac:	4613      	mov	r3, r2
 80215ae:	71fb      	strb	r3, [r7, #7]
    if(file_p->drv == NULL) {
 80215b0:	68fb      	ldr	r3, [r7, #12]
 80215b2:	685b      	ldr	r3, [r3, #4]
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	d101      	bne.n	80215bc <lv_fs_seek+0x1a>
        return LV_FS_RES_INV_PARAM;
 80215b8:	230b      	movs	r3, #11
 80215ba:	e098      	b.n	80216ee <lv_fs_seek+0x14c>
    }

    if(file_p->drv->seek_cb == NULL) {
 80215bc:	68fb      	ldr	r3, [r7, #12]
 80215be:	685b      	ldr	r3, [r3, #4]
 80215c0:	699b      	ldr	r3, [r3, #24]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d101      	bne.n	80215ca <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 80215c6:	2309      	movs	r3, #9
 80215c8:	e091      	b.n	80216ee <lv_fs_seek+0x14c>
    }

    lv_fs_res_t res = LV_FS_RES_OK;
 80215ca:	2300      	movs	r3, #0
 80215cc:	75fb      	strb	r3, [r7, #23]
    if(file_p->drv->cache_size) {
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	685b      	ldr	r3, [r3, #4]
 80215d2:	885b      	ldrh	r3, [r3, #2]
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	d077      	beq.n	80216c8 <lv_fs_seek+0x126>
        switch(whence) {
 80215d8:	79fb      	ldrb	r3, [r7, #7]
 80215da:	2b02      	cmp	r3, #2
 80215dc:	d051      	beq.n	8021682 <lv_fs_seek+0xe0>
 80215de:	2b02      	cmp	r3, #2
 80215e0:	f300 8084 	bgt.w	80216ec <lv_fs_seek+0x14a>
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d002      	beq.n	80215ee <lv_fs_seek+0x4c>
 80215e8:	2b01      	cmp	r3, #1
 80215ea:	d023      	beq.n	8021634 <lv_fs_seek+0x92>
 80215ec:	e07e      	b.n	80216ec <lv_fs_seek+0x14a>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 80215ee:	68fb      	ldr	r3, [r7, #12]
 80215f0:	689b      	ldr	r3, [r3, #8]
 80215f2:	68ba      	ldr	r2, [r7, #8]
 80215f4:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 80215f6:	68fb      	ldr	r3, [r7, #12]
 80215f8:	689b      	ldr	r3, [r3, #8]
 80215fa:	689a      	ldr	r2, [r3, #8]
 80215fc:	68fb      	ldr	r3, [r7, #12]
 80215fe:	689b      	ldr	r3, [r3, #8]
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	429a      	cmp	r2, r3
 8021604:	d307      	bcc.n	8021616 <lv_fs_seek+0x74>
 8021606:	68fb      	ldr	r3, [r7, #12]
 8021608:	689b      	ldr	r3, [r3, #8]
 802160a:	689a      	ldr	r2, [r3, #8]
 802160c:	68fb      	ldr	r3, [r7, #12]
 802160e:	689b      	ldr	r3, [r3, #8]
 8021610:	685b      	ldr	r3, [r3, #4]
 8021612:	429a      	cmp	r2, r3
 8021614:	d965      	bls.n	80216e2 <lv_fs_seek+0x140>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8021616:	68fb      	ldr	r3, [r7, #12]
 8021618:	685b      	ldr	r3, [r3, #4]
 802161a:	699c      	ldr	r4, [r3, #24]
 802161c:	68fb      	ldr	r3, [r7, #12]
 802161e:	6858      	ldr	r0, [r3, #4]
 8021620:	68fb      	ldr	r3, [r7, #12]
 8021622:	6819      	ldr	r1, [r3, #0]
 8021624:	68fb      	ldr	r3, [r7, #12]
 8021626:	689b      	ldr	r3, [r3, #8]
 8021628:	689a      	ldr	r2, [r3, #8]
 802162a:	2300      	movs	r3, #0
 802162c:	47a0      	blx	r4
 802162e:	4603      	mov	r3, r0
 8021630:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 8021632:	e056      	b.n	80216e2 <lv_fs_seek+0x140>
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 8021634:	68fb      	ldr	r3, [r7, #12]
 8021636:	689b      	ldr	r3, [r3, #8]
 8021638:	6899      	ldr	r1, [r3, #8]
 802163a:	68fb      	ldr	r3, [r7, #12]
 802163c:	689b      	ldr	r3, [r3, #8]
 802163e:	68ba      	ldr	r2, [r7, #8]
 8021640:	440a      	add	r2, r1
 8021642:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8021644:	68fb      	ldr	r3, [r7, #12]
 8021646:	689b      	ldr	r3, [r3, #8]
 8021648:	689a      	ldr	r2, [r3, #8]
 802164a:	68fb      	ldr	r3, [r7, #12]
 802164c:	689b      	ldr	r3, [r3, #8]
 802164e:	681b      	ldr	r3, [r3, #0]
 8021650:	429a      	cmp	r2, r3
 8021652:	d307      	bcc.n	8021664 <lv_fs_seek+0xc2>
 8021654:	68fb      	ldr	r3, [r7, #12]
 8021656:	689b      	ldr	r3, [r3, #8]
 8021658:	689a      	ldr	r2, [r3, #8]
 802165a:	68fb      	ldr	r3, [r7, #12]
 802165c:	689b      	ldr	r3, [r3, #8]
 802165e:	685b      	ldr	r3, [r3, #4]
 8021660:	429a      	cmp	r2, r3
 8021662:	d940      	bls.n	80216e6 <lv_fs_seek+0x144>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8021664:	68fb      	ldr	r3, [r7, #12]
 8021666:	685b      	ldr	r3, [r3, #4]
 8021668:	699c      	ldr	r4, [r3, #24]
 802166a:	68fb      	ldr	r3, [r7, #12]
 802166c:	6858      	ldr	r0, [r3, #4]
 802166e:	68fb      	ldr	r3, [r7, #12]
 8021670:	6819      	ldr	r1, [r3, #0]
 8021672:	68fb      	ldr	r3, [r7, #12]
 8021674:	689b      	ldr	r3, [r3, #8]
 8021676:	689a      	ldr	r2, [r3, #8]
 8021678:	2300      	movs	r3, #0
 802167a:	47a0      	blx	r4
 802167c:	4603      	mov	r3, r0
 802167e:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 8021680:	e031      	b.n	80216e6 <lv_fs_seek+0x144>
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	685b      	ldr	r3, [r3, #4]
 8021686:	699c      	ldr	r4, [r3, #24]
 8021688:	68fb      	ldr	r3, [r7, #12]
 802168a:	6858      	ldr	r0, [r3, #4]
 802168c:	68fb      	ldr	r3, [r7, #12]
 802168e:	6819      	ldr	r1, [r3, #0]
 8021690:	79fb      	ldrb	r3, [r7, #7]
 8021692:	68ba      	ldr	r2, [r7, #8]
 8021694:	47a0      	blx	r4
 8021696:	4603      	mov	r3, r0
 8021698:	75fb      	strb	r3, [r7, #23]
                    if(res == LV_FS_RES_OK) {
 802169a:	7dfb      	ldrb	r3, [r7, #23]
 802169c:	2b00      	cmp	r3, #0
 802169e:	d124      	bne.n	80216ea <lv_fs_seek+0x148>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 80216a0:	68fb      	ldr	r3, [r7, #12]
 80216a2:	685b      	ldr	r3, [r3, #4]
 80216a4:	69db      	ldr	r3, [r3, #28]
 80216a6:	68fa      	ldr	r2, [r7, #12]
 80216a8:	6850      	ldr	r0, [r2, #4]
 80216aa:	68fa      	ldr	r2, [r7, #12]
 80216ac:	6811      	ldr	r1, [r2, #0]
 80216ae:	f107 0210 	add.w	r2, r7, #16
 80216b2:	4798      	blx	r3
 80216b4:	4603      	mov	r3, r0
 80216b6:	75fb      	strb	r3, [r7, #23]

                        if(res == LV_FS_RES_OK) {
 80216b8:	7dfb      	ldrb	r3, [r7, #23]
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d115      	bne.n	80216ea <lv_fs_seek+0x148>
                            file_p->cache->file_position = tmp_position;
 80216be:	68fb      	ldr	r3, [r7, #12]
 80216c0:	689b      	ldr	r3, [r3, #8]
 80216c2:	693a      	ldr	r2, [r7, #16]
 80216c4:	609a      	str	r2, [r3, #8]
                        }
                    }
                    break;
 80216c6:	e010      	b.n	80216ea <lv_fs_seek+0x148>
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80216c8:	68fb      	ldr	r3, [r7, #12]
 80216ca:	685b      	ldr	r3, [r3, #4]
 80216cc:	699c      	ldr	r4, [r3, #24]
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	6858      	ldr	r0, [r3, #4]
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	6819      	ldr	r1, [r3, #0]
 80216d6:	79fb      	ldrb	r3, [r7, #7]
 80216d8:	68ba      	ldr	r2, [r7, #8]
 80216da:	47a0      	blx	r4
 80216dc:	4603      	mov	r3, r0
 80216de:	75fb      	strb	r3, [r7, #23]
 80216e0:	e004      	b.n	80216ec <lv_fs_seek+0x14a>
                    break;
 80216e2:	bf00      	nop
 80216e4:	e002      	b.n	80216ec <lv_fs_seek+0x14a>
                    break;
 80216e6:	bf00      	nop
 80216e8:	e000      	b.n	80216ec <lv_fs_seek+0x14a>
                    break;
 80216ea:	bf00      	nop
    }

    return res;
 80216ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80216ee:	4618      	mov	r0, r3
 80216f0:	371c      	adds	r7, #28
 80216f2:	46bd      	mov	sp, r7
 80216f4:	bd90      	pop	{r4, r7, pc}
	...

080216f8 <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 80216f8:	b580      	push	{r7, lr}
 80216fa:	b084      	sub	sp, #16
 80216fc:	af00      	add	r7, sp, #0
 80216fe:	4603      	mov	r3, r0
 8021700:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8021702:	480d      	ldr	r0, [pc, #52]	; (8021738 <lv_fs_get_drv+0x40>)
 8021704:	f000 f93d 	bl	8021982 <_lv_ll_get_head>
 8021708:	60f8      	str	r0, [r7, #12]
 802170a:	e00d      	b.n	8021728 <lv_fs_get_drv+0x30>
        if((*drv)->letter == letter) {
 802170c:	68fb      	ldr	r3, [r7, #12]
 802170e:	681b      	ldr	r3, [r3, #0]
 8021710:	781b      	ldrb	r3, [r3, #0]
 8021712:	79fa      	ldrb	r2, [r7, #7]
 8021714:	429a      	cmp	r2, r3
 8021716:	d102      	bne.n	802171e <lv_fs_get_drv+0x26>
            return *drv;
 8021718:	68fb      	ldr	r3, [r7, #12]
 802171a:	681b      	ldr	r3, [r3, #0]
 802171c:	e008      	b.n	8021730 <lv_fs_get_drv+0x38>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 802171e:	68f9      	ldr	r1, [r7, #12]
 8021720:	4805      	ldr	r0, [pc, #20]	; (8021738 <lv_fs_get_drv+0x40>)
 8021722:	f000 f950 	bl	80219c6 <_lv_ll_get_next>
 8021726:	60f8      	str	r0, [r7, #12]
 8021728:	68fb      	ldr	r3, [r7, #12]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d1ee      	bne.n	802170c <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 802172e:	2300      	movs	r3, #0
}
 8021730:	4618      	mov	r0, r3
 8021732:	3710      	adds	r7, #16
 8021734:	46bd      	mov	sp, r7
 8021736:	bd80      	pop	{r7, pc}
 8021738:	20000870 	.word	0x20000870

0802173c <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 802173c:	b580      	push	{r7, lr}
 802173e:	b084      	sub	sp, #16
 8021740:	af00      	add	r7, sp, #0
 8021742:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 8021744:	6878      	ldr	r0, [r7, #4]
 8021746:	f7de fd81 	bl	800024c <strlen>
 802174a:	60f8      	str	r0, [r7, #12]
 802174c:	e01b      	b.n	8021786 <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 802174e:	687a      	ldr	r2, [r7, #4]
 8021750:	68fb      	ldr	r3, [r7, #12]
 8021752:	4413      	add	r3, r2
 8021754:	781b      	ldrb	r3, [r3, #0]
 8021756:	2b2e      	cmp	r3, #46	; 0x2e
 8021758:	d104      	bne.n	8021764 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 802175a:	68fb      	ldr	r3, [r7, #12]
 802175c:	3301      	adds	r3, #1
 802175e:	687a      	ldr	r2, [r7, #4]
 8021760:	4413      	add	r3, r2
 8021762:	e014      	b.n	802178e <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 8021764:	687a      	ldr	r2, [r7, #4]
 8021766:	68fb      	ldr	r3, [r7, #12]
 8021768:	4413      	add	r3, r2
 802176a:	781b      	ldrb	r3, [r3, #0]
 802176c:	2b2f      	cmp	r3, #47	; 0x2f
 802176e:	d005      	beq.n	802177c <lv_fs_get_ext+0x40>
 8021770:	687a      	ldr	r2, [r7, #4]
 8021772:	68fb      	ldr	r3, [r7, #12]
 8021774:	4413      	add	r3, r2
 8021776:	781b      	ldrb	r3, [r3, #0]
 8021778:	2b5c      	cmp	r3, #92	; 0x5c
 802177a:	d101      	bne.n	8021780 <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 802177c:	4b06      	ldr	r3, [pc, #24]	; (8021798 <lv_fs_get_ext+0x5c>)
 802177e:	e006      	b.n	802178e <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 8021780:	68fb      	ldr	r3, [r7, #12]
 8021782:	3b01      	subs	r3, #1
 8021784:	60fb      	str	r3, [r7, #12]
 8021786:	68fb      	ldr	r3, [r7, #12]
 8021788:	2b00      	cmp	r3, #0
 802178a:	d1e0      	bne.n	802174e <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
 802178c:	4b02      	ldr	r3, [pc, #8]	; (8021798 <lv_fs_get_ext+0x5c>)
}
 802178e:	4618      	mov	r0, r3
 8021790:	3710      	adds	r7, #16
 8021792:	46bd      	mov	sp, r7
 8021794:	bd80      	pop	{r7, pc}
 8021796:	bf00      	nop
 8021798:	08026714 	.word	0x08026714

0802179c <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 802179c:	b480      	push	{r7}
 802179e:	b083      	sub	sp, #12
 80217a0:	af00      	add	r7, sp, #0
 80217a2:	6078      	str	r0, [r7, #4]
    path++; /*Ignore the driver letter*/
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	3301      	adds	r3, #1
 80217a8:	607b      	str	r3, [r7, #4]
    if(*path == ':') path++;
 80217aa:	687b      	ldr	r3, [r7, #4]
 80217ac:	781b      	ldrb	r3, [r3, #0]
 80217ae:	2b3a      	cmp	r3, #58	; 0x3a
 80217b0:	d102      	bne.n	80217b8 <lv_fs_get_real_path+0x1c>
 80217b2:	687b      	ldr	r3, [r7, #4]
 80217b4:	3301      	adds	r3, #1
 80217b6:	607b      	str	r3, [r7, #4]

    return path;
 80217b8:	687b      	ldr	r3, [r7, #4]
}
 80217ba:	4618      	mov	r0, r3
 80217bc:	370c      	adds	r7, #12
 80217be:	46bd      	mov	sp, r7
 80217c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217c4:	4770      	bx	lr

080217c6 <_lv_ll_init>:
 * Initialize linked list
 * @param ll_p pointer to lv_ll_t variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 80217c6:	b480      	push	{r7}
 80217c8:	b083      	sub	sp, #12
 80217ca:	af00      	add	r7, sp, #0
 80217cc:	6078      	str	r0, [r7, #4]
 80217ce:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 80217d0:	687b      	ldr	r3, [r7, #4]
 80217d2:	2200      	movs	r2, #0
 80217d4:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	2200      	movs	r2, #0
 80217da:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 80217dc:	683b      	ldr	r3, [r7, #0]
 80217de:	3303      	adds	r3, #3
 80217e0:	f023 0303 	bic.w	r3, r3, #3
 80217e4:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 80217e6:	687b      	ldr	r3, [r7, #4]
 80217e8:	683a      	ldr	r2, [r7, #0]
 80217ea:	601a      	str	r2, [r3, #0]
}
 80217ec:	bf00      	nop
 80217ee:	370c      	adds	r7, #12
 80217f0:	46bd      	mov	sp, r7
 80217f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217f6:	4770      	bx	lr

080217f8 <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 80217f8:	b580      	push	{r7, lr}
 80217fa:	b084      	sub	sp, #16
 80217fc:	af00      	add	r7, sp, #0
 80217fe:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	681b      	ldr	r3, [r3, #0]
 8021804:	3308      	adds	r3, #8
 8021806:	4618      	mov	r0, r3
 8021808:	f000 fa7a 	bl	8021d00 <lv_mem_alloc>
 802180c:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 802180e:	68fb      	ldr	r3, [r7, #12]
 8021810:	2b00      	cmp	r3, #0
 8021812:	d020      	beq.n	8021856 <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8021814:	2200      	movs	r2, #0
 8021816:	68f9      	ldr	r1, [r7, #12]
 8021818:	6878      	ldr	r0, [r7, #4]
 802181a:	f000 f917 	bl	8021a4c <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	685b      	ldr	r3, [r3, #4]
 8021822:	461a      	mov	r2, r3
 8021824:	68f9      	ldr	r1, [r7, #12]
 8021826:	6878      	ldr	r0, [r7, #4]
 8021828:	f000 f92f 	bl	8021a8a <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 802182c:	687b      	ldr	r3, [r7, #4]
 802182e:	685b      	ldr	r3, [r3, #4]
 8021830:	2b00      	cmp	r3, #0
 8021832:	d006      	beq.n	8021842 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8021834:	687b      	ldr	r3, [r7, #4]
 8021836:	685b      	ldr	r3, [r3, #4]
 8021838:	68fa      	ldr	r2, [r7, #12]
 802183a:	4619      	mov	r1, r3
 802183c:	6878      	ldr	r0, [r7, #4]
 802183e:	f000 f905 	bl	8021a4c <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8021842:	687b      	ldr	r3, [r7, #4]
 8021844:	68fa      	ldr	r2, [r7, #12]
 8021846:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	689b      	ldr	r3, [r3, #8]
 802184c:	2b00      	cmp	r3, #0
 802184e:	d102      	bne.n	8021856 <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	68fa      	ldr	r2, [r7, #12]
 8021854:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 8021856:	68fb      	ldr	r3, [r7, #12]
}
 8021858:	4618      	mov	r0, r3
 802185a:	3710      	adds	r7, #16
 802185c:	46bd      	mov	sp, r7
 802185e:	bd80      	pop	{r7, pc}

08021860 <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 8021860:	b580      	push	{r7, lr}
 8021862:	b084      	sub	sp, #16
 8021864:	af00      	add	r7, sp, #0
 8021866:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8021868:	687b      	ldr	r3, [r7, #4]
 802186a:	681b      	ldr	r3, [r3, #0]
 802186c:	3308      	adds	r3, #8
 802186e:	4618      	mov	r0, r3
 8021870:	f000 fa46 	bl	8021d00 <lv_mem_alloc>
 8021874:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8021876:	68fb      	ldr	r3, [r7, #12]
 8021878:	2b00      	cmp	r3, #0
 802187a:	d020      	beq.n	80218be <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 802187c:	2200      	movs	r2, #0
 802187e:	68f9      	ldr	r1, [r7, #12]
 8021880:	6878      	ldr	r0, [r7, #4]
 8021882:	f000 f902 	bl	8021a8a <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8021886:	687b      	ldr	r3, [r7, #4]
 8021888:	689b      	ldr	r3, [r3, #8]
 802188a:	461a      	mov	r2, r3
 802188c:	68f9      	ldr	r1, [r7, #12]
 802188e:	6878      	ldr	r0, [r7, #4]
 8021890:	f000 f8dc 	bl	8021a4c <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	689b      	ldr	r3, [r3, #8]
 8021898:	2b00      	cmp	r3, #0
 802189a:	d006      	beq.n	80218aa <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 802189c:	687b      	ldr	r3, [r7, #4]
 802189e:	689b      	ldr	r3, [r3, #8]
 80218a0:	68fa      	ldr	r2, [r7, #12]
 80218a2:	4619      	mov	r1, r3
 80218a4:	6878      	ldr	r0, [r7, #4]
 80218a6:	f000 f8f0 	bl	8021a8a <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 80218aa:	687b      	ldr	r3, [r7, #4]
 80218ac:	68fa      	ldr	r2, [r7, #12]
 80218ae:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	685b      	ldr	r3, [r3, #4]
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	d102      	bne.n	80218be <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 80218b8:	687b      	ldr	r3, [r7, #4]
 80218ba:	68fa      	ldr	r2, [r7, #12]
 80218bc:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 80218be:	68fb      	ldr	r3, [r7, #12]
}
 80218c0:	4618      	mov	r0, r3
 80218c2:	3710      	adds	r7, #16
 80218c4:	46bd      	mov	sp, r7
 80218c6:	bd80      	pop	{r7, pc}

080218c8 <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 80218c8:	b580      	push	{r7, lr}
 80218ca:	b084      	sub	sp, #16
 80218cc:	af00      	add	r7, sp, #0
 80218ce:	6078      	str	r0, [r7, #4]
 80218d0:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return;
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d050      	beq.n	802197a <_lv_ll_remove+0xb2>

    if(_lv_ll_get_head(ll_p) == node_p) {
 80218d8:	6878      	ldr	r0, [r7, #4]
 80218da:	f000 f852 	bl	8021982 <_lv_ll_get_head>
 80218de:	4602      	mov	r2, r0
 80218e0:	683b      	ldr	r3, [r7, #0]
 80218e2:	4293      	cmp	r3, r2
 80218e4:	d116      	bne.n	8021914 <_lv_ll_remove+0x4c>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 80218e6:	6839      	ldr	r1, [r7, #0]
 80218e8:	6878      	ldr	r0, [r7, #4]
 80218ea:	f000 f86c 	bl	80219c6 <_lv_ll_get_next>
 80218ee:	4602      	mov	r2, r0
 80218f0:	687b      	ldr	r3, [r7, #4]
 80218f2:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 80218f4:	687b      	ldr	r3, [r7, #4]
 80218f6:	685b      	ldr	r3, [r3, #4]
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	d103      	bne.n	8021904 <_lv_ll_remove+0x3c>
            ll_p->tail = NULL;
 80218fc:	687b      	ldr	r3, [r7, #4]
 80218fe:	2200      	movs	r2, #0
 8021900:	609a      	str	r2, [r3, #8]
 8021902:	e03b      	b.n	802197c <_lv_ll_remove+0xb4>
        }
        else {
            node_set_prev(ll_p, ll_p->head, NULL);
 8021904:	687b      	ldr	r3, [r7, #4]
 8021906:	685b      	ldr	r3, [r3, #4]
 8021908:	2200      	movs	r2, #0
 802190a:	4619      	mov	r1, r3
 802190c:	6878      	ldr	r0, [r7, #4]
 802190e:	f000 f89d 	bl	8021a4c <node_set_prev>
 8021912:	e033      	b.n	802197c <_lv_ll_remove+0xb4>
        }
    }
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8021914:	6878      	ldr	r0, [r7, #4]
 8021916:	f000 f845 	bl	80219a4 <_lv_ll_get_tail>
 802191a:	4602      	mov	r2, r0
 802191c:	683b      	ldr	r3, [r7, #0]
 802191e:	4293      	cmp	r3, r2
 8021920:	d116      	bne.n	8021950 <_lv_ll_remove+0x88>
        /*The new tail will be the node before 'n_act'*/
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8021922:	6839      	ldr	r1, [r7, #0]
 8021924:	6878      	ldr	r0, [r7, #4]
 8021926:	f000 f863 	bl	80219f0 <_lv_ll_get_prev>
 802192a:	4602      	mov	r2, r0
 802192c:	687b      	ldr	r3, [r7, #4]
 802192e:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 8021930:	687b      	ldr	r3, [r7, #4]
 8021932:	689b      	ldr	r3, [r3, #8]
 8021934:	2b00      	cmp	r3, #0
 8021936:	d103      	bne.n	8021940 <_lv_ll_remove+0x78>
            ll_p->head = NULL;
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	2200      	movs	r2, #0
 802193c:	605a      	str	r2, [r3, #4]
 802193e:	e01d      	b.n	802197c <_lv_ll_remove+0xb4>
        }
        else {
            node_set_next(ll_p, ll_p->tail, NULL);
 8021940:	687b      	ldr	r3, [r7, #4]
 8021942:	689b      	ldr	r3, [r3, #8]
 8021944:	2200      	movs	r2, #0
 8021946:	4619      	mov	r1, r3
 8021948:	6878      	ldr	r0, [r7, #4]
 802194a:	f000 f89e 	bl	8021a8a <node_set_next>
 802194e:	e015      	b.n	802197c <_lv_ll_remove+0xb4>
        }
    }
    else {
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 8021950:	6839      	ldr	r1, [r7, #0]
 8021952:	6878      	ldr	r0, [r7, #4]
 8021954:	f000 f84c 	bl	80219f0 <_lv_ll_get_prev>
 8021958:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 802195a:	6839      	ldr	r1, [r7, #0]
 802195c:	6878      	ldr	r0, [r7, #4]
 802195e:	f000 f832 	bl	80219c6 <_lv_ll_get_next>
 8021962:	60b8      	str	r0, [r7, #8]

        node_set_next(ll_p, n_prev, n_next);
 8021964:	68ba      	ldr	r2, [r7, #8]
 8021966:	68f9      	ldr	r1, [r7, #12]
 8021968:	6878      	ldr	r0, [r7, #4]
 802196a:	f000 f88e 	bl	8021a8a <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 802196e:	68fa      	ldr	r2, [r7, #12]
 8021970:	68b9      	ldr	r1, [r7, #8]
 8021972:	6878      	ldr	r0, [r7, #4]
 8021974:	f000 f86a 	bl	8021a4c <node_set_prev>
 8021978:	e000      	b.n	802197c <_lv_ll_remove+0xb4>
    if(ll_p == NULL) return;
 802197a:	bf00      	nop
    }
}
 802197c:	3710      	adds	r7, #16
 802197e:	46bd      	mov	sp, r7
 8021980:	bd80      	pop	{r7, pc}

08021982 <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 8021982:	b480      	push	{r7}
 8021984:	b083      	sub	sp, #12
 8021986:	af00      	add	r7, sp, #0
 8021988:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 802198a:	687b      	ldr	r3, [r7, #4]
 802198c:	2b00      	cmp	r3, #0
 802198e:	d101      	bne.n	8021994 <_lv_ll_get_head+0x12>
 8021990:	2300      	movs	r3, #0
 8021992:	e001      	b.n	8021998 <_lv_ll_get_head+0x16>
    return ll_p->head;
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	685b      	ldr	r3, [r3, #4]
}
 8021998:	4618      	mov	r0, r3
 802199a:	370c      	adds	r7, #12
 802199c:	46bd      	mov	sp, r7
 802199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219a2:	4770      	bx	lr

080219a4 <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the tail of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 80219a4:	b480      	push	{r7}
 80219a6:	b083      	sub	sp, #12
 80219a8:	af00      	add	r7, sp, #0
 80219aa:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	d101      	bne.n	80219b6 <_lv_ll_get_tail+0x12>
 80219b2:	2300      	movs	r3, #0
 80219b4:	e001      	b.n	80219ba <_lv_ll_get_tail+0x16>
    return ll_p->tail;
 80219b6:	687b      	ldr	r3, [r7, #4]
 80219b8:	689b      	ldr	r3, [r3, #8]
}
 80219ba:	4618      	mov	r0, r3
 80219bc:	370c      	adds	r7, #12
 80219be:	46bd      	mov	sp, r7
 80219c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219c4:	4770      	bx	lr

080219c6 <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 80219c6:	b480      	push	{r7}
 80219c8:	b085      	sub	sp, #20
 80219ca:	af00      	add	r7, sp, #0
 80219cc:	6078      	str	r0, [r7, #4]
 80219ce:	6039      	str	r1, [r7, #0]
    /*Pointer to the next node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 80219d0:	683b      	ldr	r3, [r7, #0]
 80219d2:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	681b      	ldr	r3, [r3, #0]
 80219d8:	3304      	adds	r3, #4
 80219da:	68fa      	ldr	r2, [r7, #12]
 80219dc:	4413      	add	r3, r2
 80219de:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 80219e0:	68fb      	ldr	r3, [r7, #12]
 80219e2:	681b      	ldr	r3, [r3, #0]
}
 80219e4:	4618      	mov	r0, r3
 80219e6:	3714      	adds	r7, #20
 80219e8:	46bd      	mov	sp, r7
 80219ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219ee:	4770      	bx	lr

080219f0 <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 80219f0:	b480      	push	{r7}
 80219f2:	b085      	sub	sp, #20
 80219f4:	af00      	add	r7, sp, #0
 80219f6:	6078      	str	r0, [r7, #4]
 80219f8:	6039      	str	r1, [r7, #0]
    /*Pointer to the prev. node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 80219fa:	683b      	ldr	r3, [r7, #0]
 80219fc:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	68fa      	ldr	r2, [r7, #12]
 8021a04:	4413      	add	r3, r2
 8021a06:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8021a08:	68fb      	ldr	r3, [r7, #12]
 8021a0a:	681b      	ldr	r3, [r3, #0]
}
 8021a0c:	4618      	mov	r0, r3
 8021a0e:	3714      	adds	r7, #20
 8021a10:	46bd      	mov	sp, r7
 8021a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a16:	4770      	bx	lr

08021a18 <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 8021a18:	b480      	push	{r7}
 8021a1a:	b083      	sub	sp, #12
 8021a1c:	af00      	add	r7, sp, #0
 8021a1e:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 8021a20:	687b      	ldr	r3, [r7, #4]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d101      	bne.n	8021a2a <_lv_ll_is_empty+0x12>
 8021a26:	2301      	movs	r3, #1
 8021a28:	e00a      	b.n	8021a40 <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	685b      	ldr	r3, [r3, #4]
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d105      	bne.n	8021a3e <_lv_ll_is_empty+0x26>
 8021a32:	687b      	ldr	r3, [r7, #4]
 8021a34:	689b      	ldr	r3, [r3, #8]
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d101      	bne.n	8021a3e <_lv_ll_is_empty+0x26>
 8021a3a:	2301      	movs	r3, #1
 8021a3c:	e000      	b.n	8021a40 <_lv_ll_is_empty+0x28>

    return false;
 8021a3e:	2300      	movs	r3, #0
}
 8021a40:	4618      	mov	r0, r3
 8021a42:	370c      	adds	r7, #12
 8021a44:	46bd      	mov	sp, r7
 8021a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a4a:	4770      	bx	lr

08021a4c <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 8021a4c:	b480      	push	{r7}
 8021a4e:	b089      	sub	sp, #36	; 0x24
 8021a50:	af00      	add	r7, sp, #0
 8021a52:	60f8      	str	r0, [r7, #12]
 8021a54:	60b9      	str	r1, [r7, #8]
 8021a56:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8021a58:	68bb      	ldr	r3, [r7, #8]
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d00f      	beq.n	8021a7e <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *)act;
 8021a5e:	68bb      	ldr	r3, [r7, #8]
 8021a60:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 8021a62:	68fb      	ldr	r3, [r7, #12]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	69fa      	ldr	r2, [r7, #28]
 8021a68:	4413      	add	r3, r2
 8021a6a:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 8021a6c:	69fb      	ldr	r3, [r7, #28]
 8021a6e:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 8021a70:	1d3b      	adds	r3, r7, #4
 8021a72:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 8021a74:	697b      	ldr	r3, [r7, #20]
 8021a76:	681a      	ldr	r2, [r3, #0]
 8021a78:	69bb      	ldr	r3, [r7, #24]
 8021a7a:	601a      	str	r2, [r3, #0]
 8021a7c:	e000      	b.n	8021a80 <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8021a7e:	bf00      	nop
}
 8021a80:	3724      	adds	r7, #36	; 0x24
 8021a82:	46bd      	mov	sp, r7
 8021a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a88:	4770      	bx	lr

08021a8a <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 8021a8a:	b480      	push	{r7}
 8021a8c:	b089      	sub	sp, #36	; 0x24
 8021a8e:	af00      	add	r7, sp, #0
 8021a90:	60f8      	str	r0, [r7, #12]
 8021a92:	60b9      	str	r1, [r7, #8]
 8021a94:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8021a96:	68bb      	ldr	r3, [r7, #8]
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	d010      	beq.n	8021abe <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *)act;
 8021a9c:	68bb      	ldr	r3, [r7, #8]
 8021a9e:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 8021aa0:	68fb      	ldr	r3, [r7, #12]
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	3304      	adds	r3, #4
 8021aa6:	69fa      	ldr	r2, [r7, #28]
 8021aa8:	4413      	add	r3, r2
 8021aaa:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 8021aac:	69fb      	ldr	r3, [r7, #28]
 8021aae:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 8021ab0:	1d3b      	adds	r3, r7, #4
 8021ab2:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 8021ab4:	697b      	ldr	r3, [r7, #20]
 8021ab6:	681a      	ldr	r2, [r3, #0]
 8021ab8:	69bb      	ldr	r3, [r7, #24]
 8021aba:	601a      	str	r2, [r3, #0]
 8021abc:	e000      	b.n	8021ac0 <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8021abe:	bf00      	nop
}
 8021ac0:	3724      	adds	r7, #36	; 0x24
 8021ac2:	46bd      	mov	sp, r7
 8021ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ac8:	4770      	bx	lr
	...

08021acc <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
 8021acc:	b480      	push	{r7}
 8021ace:	b085      	sub	sp, #20
 8021ad0:	af00      	add	r7, sp, #0
 8021ad2:	4603      	mov	r3, r0
 8021ad4:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 8021ad6:	2300      	movs	r3, #0
 8021ad8:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 8021ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021ade:	4a31      	ldr	r2, [pc, #196]	; (8021ba4 <lv_trigo_sin+0xd8>)
 8021ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8021ae4:	441a      	add	r2, r3
 8021ae6:	1211      	asrs	r1, r2, #8
 8021ae8:	17da      	asrs	r2, r3, #31
 8021aea:	1a8a      	subs	r2, r1, r2
 8021aec:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8021af0:	fb01 f202 	mul.w	r2, r1, r2
 8021af4:	1a9b      	subs	r3, r3, r2
 8021af6:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 8021af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	da04      	bge.n	8021b0a <lv_trigo_sin+0x3e>
 8021b00:	88fb      	ldrh	r3, [r7, #6]
 8021b02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8021b06:	b29b      	uxth	r3, r3
 8021b08:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 8021b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b0e:	2b59      	cmp	r3, #89	; 0x59
 8021b10:	dc06      	bgt.n	8021b20 <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 8021b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b16:	4a24      	ldr	r2, [pc, #144]	; (8021ba8 <lv_trigo_sin+0xdc>)
 8021b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021b1c:	81fb      	strh	r3, [r7, #14]
 8021b1e:	e038      	b.n	8021b92 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 8021b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b24:	2b59      	cmp	r3, #89	; 0x59
 8021b26:	dd0f      	ble.n	8021b48 <lv_trigo_sin+0x7c>
 8021b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b2c:	2bb3      	cmp	r3, #179	; 0xb3
 8021b2e:	dc0b      	bgt.n	8021b48 <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 8021b30:	88fb      	ldrh	r3, [r7, #6]
 8021b32:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8021b36:	b29b      	uxth	r3, r3
 8021b38:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 8021b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b3e:	4a1a      	ldr	r2, [pc, #104]	; (8021ba8 <lv_trigo_sin+0xdc>)
 8021b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021b44:	81fb      	strh	r3, [r7, #14]
 8021b46:	e024      	b.n	8021b92 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 8021b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b4c:	2bb3      	cmp	r3, #179	; 0xb3
 8021b4e:	dd12      	ble.n	8021b76 <lv_trigo_sin+0xaa>
 8021b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b54:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8021b58:	da0d      	bge.n	8021b76 <lv_trigo_sin+0xaa>
        angle = angle - 180;
 8021b5a:	88fb      	ldrh	r3, [r7, #6]
 8021b5c:	3bb4      	subs	r3, #180	; 0xb4
 8021b5e:	b29b      	uxth	r3, r3
 8021b60:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8021b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b66:	4a10      	ldr	r2, [pc, #64]	; (8021ba8 <lv_trigo_sin+0xdc>)
 8021b68:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8021b6c:	b29b      	uxth	r3, r3
 8021b6e:	425b      	negs	r3, r3
 8021b70:	b29b      	uxth	r3, r3
 8021b72:	81fb      	strh	r3, [r7, #14]
 8021b74:	e00d      	b.n	8021b92 <lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8021b76:	88fb      	ldrh	r3, [r7, #6]
 8021b78:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8021b7c:	b29b      	uxth	r3, r3
 8021b7e:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8021b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021b84:	4a08      	ldr	r2, [pc, #32]	; (8021ba8 <lv_trigo_sin+0xdc>)
 8021b86:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8021b8a:	b29b      	uxth	r3, r3
 8021b8c:	425b      	negs	r3, r3
 8021b8e:	b29b      	uxth	r3, r3
 8021b90:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8021b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8021b96:	4618      	mov	r0, r3
 8021b98:	3714      	adds	r7, #20
 8021b9a:	46bd      	mov	sp, r7
 8021b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ba0:	4770      	bx	lr
 8021ba2:	bf00      	nop
 8021ba4:	b60b60b7 	.word	0xb60b60b7
 8021ba8:	08029e0c 	.word	0x08029e0c

08021bac <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8021bac:	b480      	push	{r7}
 8021bae:	b08f      	sub	sp, #60	; 0x3c
 8021bb0:	af00      	add	r7, sp, #0
 8021bb2:	60f8      	str	r0, [r7, #12]
 8021bb4:	60b9      	str	r1, [r7, #8]
 8021bb6:	607a      	str	r2, [r7, #4]
 8021bb8:	603b      	str	r3, [r7, #0]
    uint32_t t_rem  = 1024 - t;
 8021bba:	68fb      	ldr	r3, [r7, #12]
 8021bbc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8021bc0:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8021bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021bc4:	fb03 f303 	mul.w	r3, r3, r3
 8021bc8:	0a9b      	lsrs	r3, r3, #10
 8021bca:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8021bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021bd0:	fb02 f303 	mul.w	r3, r2, r3
 8021bd4:	0a9b      	lsrs	r3, r3, #10
 8021bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t t2     = (t * t) >> 10;
 8021bd8:	68fb      	ldr	r3, [r7, #12]
 8021bda:	fb03 f303 	mul.w	r3, r3, r3
 8021bde:	0a9b      	lsrs	r3, r3, #10
 8021be0:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t t3     = (t2 * t) >> 10;
 8021be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021be4:	68fa      	ldr	r2, [r7, #12]
 8021be6:	fb02 f303 	mul.w	r3, r2, r3
 8021bea:	0a9b      	lsrs	r3, r3, #10
 8021bec:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t v1 = (t_rem3 * u0) >> 10;
 8021bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bf0:	68ba      	ldr	r2, [r7, #8]
 8021bf2:	fb02 f303 	mul.w	r3, r2, r3
 8021bf6:	0a9b      	lsrs	r3, r3, #10
 8021bf8:	623b      	str	r3, [r7, #32]
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8021bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bfc:	68fa      	ldr	r2, [r7, #12]
 8021bfe:	fb02 f303 	mul.w	r3, r2, r3
 8021c02:	687a      	ldr	r2, [r7, #4]
 8021c04:	fb03 f202 	mul.w	r2, r3, r2
 8021c08:	4613      	mov	r3, r2
 8021c0a:	005b      	lsls	r3, r3, #1
 8021c0c:	4413      	add	r3, r2
 8021c0e:	0d1b      	lsrs	r3, r3, #20
 8021c10:	61fb      	str	r3, [r7, #28]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8021c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021c16:	fb02 f303 	mul.w	r3, r2, r3
 8021c1a:	683a      	ldr	r2, [r7, #0]
 8021c1c:	fb03 f202 	mul.w	r2, r3, r2
 8021c20:	4613      	mov	r3, r2
 8021c22:	005b      	lsls	r3, r3, #1
 8021c24:	4413      	add	r3, r2
 8021c26:	0d1b      	lsrs	r3, r3, #20
 8021c28:	61bb      	str	r3, [r7, #24]
    uint32_t v4 = (t3 * u3) >> 10;
 8021c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021c2e:	fb02 f303 	mul.w	r3, r2, r3
 8021c32:	0a9b      	lsrs	r3, r3, #10
 8021c34:	617b      	str	r3, [r7, #20]

    return v1 + v2 + v3 + v4;
 8021c36:	6a3a      	ldr	r2, [r7, #32]
 8021c38:	69fb      	ldr	r3, [r7, #28]
 8021c3a:	441a      	add	r2, r3
 8021c3c:	69bb      	ldr	r3, [r7, #24]
 8021c3e:	441a      	add	r2, r3
 8021c40:	697b      	ldr	r3, [r7, #20]
 8021c42:	4413      	add	r3, r2
}
 8021c44:	4618      	mov	r0, r3
 8021c46:	373c      	adds	r7, #60	; 0x3c
 8021c48:	46bd      	mov	sp, r7
 8021c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c4e:	4770      	bx	lr

08021c50 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8021c50:	b480      	push	{r7}
 8021c52:	b087      	sub	sp, #28
 8021c54:	af00      	add	r7, sp, #0
 8021c56:	60f8      	str	r0, [r7, #12]
 8021c58:	60b9      	str	r1, [r7, #8]
 8021c5a:	607a      	str	r2, [r7, #4]
 8021c5c:	603b      	str	r3, [r7, #0]
    if(max_in >= min_in && x >= max_in) return max_out;
 8021c5e:	687a      	ldr	r2, [r7, #4]
 8021c60:	68bb      	ldr	r3, [r7, #8]
 8021c62:	429a      	cmp	r2, r3
 8021c64:	db05      	blt.n	8021c72 <lv_map+0x22>
 8021c66:	68fa      	ldr	r2, [r7, #12]
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	429a      	cmp	r2, r3
 8021c6c:	db01      	blt.n	8021c72 <lv_map+0x22>
 8021c6e:	6a3b      	ldr	r3, [r7, #32]
 8021c70:	e030      	b.n	8021cd4 <lv_map+0x84>
    if(max_in >= min_in && x <= min_in) return min_out;
 8021c72:	687a      	ldr	r2, [r7, #4]
 8021c74:	68bb      	ldr	r3, [r7, #8]
 8021c76:	429a      	cmp	r2, r3
 8021c78:	db05      	blt.n	8021c86 <lv_map+0x36>
 8021c7a:	68fa      	ldr	r2, [r7, #12]
 8021c7c:	68bb      	ldr	r3, [r7, #8]
 8021c7e:	429a      	cmp	r2, r3
 8021c80:	dc01      	bgt.n	8021c86 <lv_map+0x36>
 8021c82:	683b      	ldr	r3, [r7, #0]
 8021c84:	e026      	b.n	8021cd4 <lv_map+0x84>

    if(max_in <= min_in && x <= max_in) return max_out;
 8021c86:	687a      	ldr	r2, [r7, #4]
 8021c88:	68bb      	ldr	r3, [r7, #8]
 8021c8a:	429a      	cmp	r2, r3
 8021c8c:	dc05      	bgt.n	8021c9a <lv_map+0x4a>
 8021c8e:	68fa      	ldr	r2, [r7, #12]
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	429a      	cmp	r2, r3
 8021c94:	dc01      	bgt.n	8021c9a <lv_map+0x4a>
 8021c96:	6a3b      	ldr	r3, [r7, #32]
 8021c98:	e01c      	b.n	8021cd4 <lv_map+0x84>
    if(max_in <= min_in && x >= min_in) return min_out;
 8021c9a:	687a      	ldr	r2, [r7, #4]
 8021c9c:	68bb      	ldr	r3, [r7, #8]
 8021c9e:	429a      	cmp	r2, r3
 8021ca0:	dc05      	bgt.n	8021cae <lv_map+0x5e>
 8021ca2:	68fa      	ldr	r2, [r7, #12]
 8021ca4:	68bb      	ldr	r3, [r7, #8]
 8021ca6:	429a      	cmp	r2, r3
 8021ca8:	db01      	blt.n	8021cae <lv_map+0x5e>
 8021caa:	683b      	ldr	r3, [r7, #0]
 8021cac:	e012      	b.n	8021cd4 <lv_map+0x84>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 8021cae:	687a      	ldr	r2, [r7, #4]
 8021cb0:	68bb      	ldr	r3, [r7, #8]
 8021cb2:	1ad3      	subs	r3, r2, r3
 8021cb4:	617b      	str	r3, [r7, #20]
    int32_t delta_out = max_out - min_out;
 8021cb6:	6a3a      	ldr	r2, [r7, #32]
 8021cb8:	683b      	ldr	r3, [r7, #0]
 8021cba:	1ad3      	subs	r3, r2, r3
 8021cbc:	613b      	str	r3, [r7, #16]

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021cbe:	68fa      	ldr	r2, [r7, #12]
 8021cc0:	68bb      	ldr	r3, [r7, #8]
 8021cc2:	1ad3      	subs	r3, r2, r3
 8021cc4:	693a      	ldr	r2, [r7, #16]
 8021cc6:	fb03 f202 	mul.w	r2, r3, r2
 8021cca:	697b      	ldr	r3, [r7, #20]
 8021ccc:	fb92 f2f3 	sdiv	r2, r2, r3
 8021cd0:	683b      	ldr	r3, [r7, #0]
 8021cd2:	4413      	add	r3, r2
}
 8021cd4:	4618      	mov	r0, r3
 8021cd6:	371c      	adds	r7, #28
 8021cd8:	46bd      	mov	sp, r7
 8021cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cde:	4770      	bx	lr

08021ce0 <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8021ce0:	b580      	push	{r7, lr}
 8021ce2:	af00      	add	r7, sp, #0
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8021ce4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8021ce8:	4803      	ldr	r0, [pc, #12]	; (8021cf8 <lv_mem_init+0x18>)
 8021cea:	f002 f950 	bl	8023f8e <lv_tlsf_create_with_pool>
 8021cee:	4603      	mov	r3, r0
 8021cf0:	4a02      	ldr	r2, [pc, #8]	; (8021cfc <lv_mem_init+0x1c>)
 8021cf2:	6013      	str	r3, [r2, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 8021cf4:	bf00      	nop
 8021cf6:	bd80      	pop	{r7, pc}
 8021cf8:	20000a64 	.word	0x20000a64
 8021cfc:	20000a58 	.word	0x20000a58

08021d00 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8021d00:	b580      	push	{r7, lr}
 8021d02:	b084      	sub	sp, #16
 8021d04:	af00      	add	r7, sp, #0
 8021d06:	6078      	str	r0, [r7, #4]
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d101      	bne.n	8021d12 <lv_mem_alloc+0x12>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 8021d0e:	4b10      	ldr	r3, [pc, #64]	; (8021d50 <lv_mem_alloc+0x50>)
 8021d10:	e019      	b.n	8021d46 <lv_mem_alloc+0x46>
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8021d12:	4b10      	ldr	r3, [pc, #64]	; (8021d54 <lv_mem_alloc+0x54>)
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	6879      	ldr	r1, [r7, #4]
 8021d18:	4618      	mov	r0, r3
 8021d1a:	f002 f955 	bl	8023fc8 <lv_tlsf_malloc>
 8021d1e:	60f8      	str	r0, [r7, #12]
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 8021d20:	68fb      	ldr	r3, [r7, #12]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d00e      	beq.n	8021d44 <lv_mem_alloc+0x44>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 8021d26:	4b0c      	ldr	r3, [pc, #48]	; (8021d58 <lv_mem_alloc+0x58>)
 8021d28:	681a      	ldr	r2, [r3, #0]
 8021d2a:	687b      	ldr	r3, [r7, #4]
 8021d2c:	4413      	add	r3, r2
 8021d2e:	4a0a      	ldr	r2, [pc, #40]	; (8021d58 <lv_mem_alloc+0x58>)
 8021d30:	6013      	str	r3, [r2, #0]
        max_used = LV_MAX(cur_used, max_used);
 8021d32:	4b0a      	ldr	r3, [pc, #40]	; (8021d5c <lv_mem_alloc+0x5c>)
 8021d34:	681a      	ldr	r2, [r3, #0]
 8021d36:	4b08      	ldr	r3, [pc, #32]	; (8021d58 <lv_mem_alloc+0x58>)
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	4293      	cmp	r3, r2
 8021d3c:	bf38      	it	cc
 8021d3e:	4613      	movcc	r3, r2
 8021d40:	4a06      	ldr	r2, [pc, #24]	; (8021d5c <lv_mem_alloc+0x5c>)
 8021d42:	6013      	str	r3, [r2, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
 8021d44:	68fb      	ldr	r3, [r7, #12]
}
 8021d46:	4618      	mov	r0, r3
 8021d48:	3710      	adds	r7, #16
 8021d4a:	46bd      	mov	sp, r7
 8021d4c:	bd80      	pop	{r7, pc}
 8021d4e:	bf00      	nop
 8021d50:	20000014 	.word	0x20000014
 8021d54:	20000a58 	.word	0x20000a58
 8021d58:	20000a5c 	.word	0x20000a5c
 8021d5c:	20000a60 	.word	0x20000a60

08021d60 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 8021d60:	b580      	push	{r7, lr}
 8021d62:	b084      	sub	sp, #16
 8021d64:	af00      	add	r7, sp, #0
 8021d66:	6078      	str	r0, [r7, #4]
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	4a11      	ldr	r2, [pc, #68]	; (8021db0 <lv_mem_free+0x50>)
 8021d6c:	4293      	cmp	r3, r2
 8021d6e:	d019      	beq.n	8021da4 <lv_mem_free+0x44>
    if(data == NULL) return;
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	d018      	beq.n	8021da8 <lv_mem_free+0x48>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8021d76:	4b0f      	ldr	r3, [pc, #60]	; (8021db4 <lv_mem_free+0x54>)
 8021d78:	681b      	ldr	r3, [r3, #0]
 8021d7a:	6879      	ldr	r1, [r7, #4]
 8021d7c:	4618      	mov	r0, r3
 8021d7e:	f002 f93e 	bl	8023ffe <lv_tlsf_free>
 8021d82:	60f8      	str	r0, [r7, #12]
    if(cur_used > size) cur_used -= size;
 8021d84:	4b0c      	ldr	r3, [pc, #48]	; (8021db8 <lv_mem_free+0x58>)
 8021d86:	681b      	ldr	r3, [r3, #0]
 8021d88:	68fa      	ldr	r2, [r7, #12]
 8021d8a:	429a      	cmp	r2, r3
 8021d8c:	d206      	bcs.n	8021d9c <lv_mem_free+0x3c>
 8021d8e:	4b0a      	ldr	r3, [pc, #40]	; (8021db8 <lv_mem_free+0x58>)
 8021d90:	681a      	ldr	r2, [r3, #0]
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	1ad3      	subs	r3, r2, r3
 8021d96:	4a08      	ldr	r2, [pc, #32]	; (8021db8 <lv_mem_free+0x58>)
 8021d98:	6013      	str	r3, [r2, #0]
 8021d9a:	e006      	b.n	8021daa <lv_mem_free+0x4a>
    else cur_used = 0;
 8021d9c:	4b06      	ldr	r3, [pc, #24]	; (8021db8 <lv_mem_free+0x58>)
 8021d9e:	2200      	movs	r2, #0
 8021da0:	601a      	str	r2, [r3, #0]
 8021da2:	e002      	b.n	8021daa <lv_mem_free+0x4a>
    if(data == &zero_mem) return;
 8021da4:	bf00      	nop
 8021da6:	e000      	b.n	8021daa <lv_mem_free+0x4a>
    if(data == NULL) return;
 8021da8:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8021daa:	3710      	adds	r7, #16
 8021dac:	46bd      	mov	sp, r7
 8021dae:	bd80      	pop	{r7, pc}
 8021db0:	20000014 	.word	0x20000014
 8021db4:	20000a58 	.word	0x20000a58
 8021db8:	20000a5c 	.word	0x20000a5c

08021dbc <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 8021dbc:	b580      	push	{r7, lr}
 8021dbe:	b084      	sub	sp, #16
 8021dc0:	af00      	add	r7, sp, #0
 8021dc2:	6078      	str	r0, [r7, #4]
 8021dc4:	6039      	str	r1, [r7, #0]
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8021dc6:	683b      	ldr	r3, [r7, #0]
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d104      	bne.n	8021dd6 <lv_mem_realloc+0x1a>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
 8021dcc:	6878      	ldr	r0, [r7, #4]
 8021dce:	f7ff ffc7 	bl	8021d60 <lv_mem_free>
        return &zero_mem;
 8021dd2:	4b0e      	ldr	r3, [pc, #56]	; (8021e0c <lv_mem_realloc+0x50>)
 8021dd4:	e016      	b.n	8021e04 <lv_mem_realloc+0x48>
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	4a0c      	ldr	r2, [pc, #48]	; (8021e0c <lv_mem_realloc+0x50>)
 8021dda:	4293      	cmp	r3, r2
 8021ddc:	d104      	bne.n	8021de8 <lv_mem_realloc+0x2c>
 8021dde:	6838      	ldr	r0, [r7, #0]
 8021de0:	f7ff ff8e 	bl	8021d00 <lv_mem_alloc>
 8021de4:	4603      	mov	r3, r0
 8021de6:	e00d      	b.n	8021e04 <lv_mem_realloc+0x48>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8021de8:	4b09      	ldr	r3, [pc, #36]	; (8021e10 <lv_mem_realloc+0x54>)
 8021dea:	681b      	ldr	r3, [r3, #0]
 8021dec:	683a      	ldr	r2, [r7, #0]
 8021dee:	6879      	ldr	r1, [r7, #4]
 8021df0:	4618      	mov	r0, r3
 8021df2:	f002 f934 	bl	802405e <lv_tlsf_realloc>
 8021df6:	60f8      	str	r0, [r7, #12]
#else
    void * new_p = LV_MEM_CUSTOM_REALLOC(data_p, new_size);
#endif
    if(new_p == NULL) {
 8021df8:	68fb      	ldr	r3, [r7, #12]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d101      	bne.n	8021e02 <lv_mem_realloc+0x46>
        LV_LOG_ERROR("couldn't allocate memory");
        return NULL;
 8021dfe:	2300      	movs	r3, #0
 8021e00:	e000      	b.n	8021e04 <lv_mem_realloc+0x48>
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
 8021e02:	68fb      	ldr	r3, [r7, #12]
}
 8021e04:	4618      	mov	r0, r3
 8021e06:	3710      	adds	r7, #16
 8021e08:	46bd      	mov	sp, r7
 8021e0a:	bd80      	pop	{r7, pc}
 8021e0c:	20000014 	.word	0x20000014
 8021e10:	20000a58 	.word	0x20000a58

08021e14 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 8021e14:	b580      	push	{r7, lr}
 8021e16:	b084      	sub	sp, #16
 8021e18:	af00      	add	r7, sp, #0
 8021e1a:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d101      	bne.n	8021e26 <lv_mem_buf_get+0x12>
 8021e22:	2300      	movs	r3, #0
 8021e24:	e09c      	b.n	8021f60 <lv_mem_buf_get+0x14c>

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 8021e26:	23ff      	movs	r3, #255	; 0xff
 8021e28:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	73bb      	strb	r3, [r7, #14]
 8021e2e:	e041      	b.n	8021eb4 <lv_mem_buf_get+0xa0>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8021e30:	7bbb      	ldrb	r3, [r7, #14]
 8021e32:	4a4d      	ldr	r2, [pc, #308]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021e34:	00db      	lsls	r3, r3, #3
 8021e36:	4413      	add	r3, r2
 8021e38:	799b      	ldrb	r3, [r3, #6]
 8021e3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8021e3e:	b2db      	uxtb	r3, r3
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	d134      	bne.n	8021eae <lv_mem_buf_get+0x9a>
 8021e44:	7bbb      	ldrb	r3, [r7, #14]
 8021e46:	4a48      	ldr	r2, [pc, #288]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021e48:	00db      	lsls	r3, r3, #3
 8021e4a:	4413      	add	r3, r2
 8021e4c:	889b      	ldrh	r3, [r3, #4]
 8021e4e:	461a      	mov	r2, r3
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	4293      	cmp	r3, r2
 8021e54:	d82b      	bhi.n	8021eae <lv_mem_buf_get+0x9a>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8021e56:	7bbb      	ldrb	r3, [r7, #14]
 8021e58:	4a43      	ldr	r2, [pc, #268]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021e5a:	00db      	lsls	r3, r3, #3
 8021e5c:	4413      	add	r3, r2
 8021e5e:	889b      	ldrh	r3, [r3, #4]
 8021e60:	461a      	mov	r2, r3
 8021e62:	687b      	ldr	r3, [r7, #4]
 8021e64:	4293      	cmp	r3, r2
 8021e66:	d10c      	bne.n	8021e82 <lv_mem_buf_get+0x6e>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8021e68:	7bbb      	ldrb	r3, [r7, #14]
 8021e6a:	4a3f      	ldr	r2, [pc, #252]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021e6c:	00db      	lsls	r3, r3, #3
 8021e6e:	4413      	add	r3, r2
 8021e70:	799a      	ldrb	r2, [r3, #6]
 8021e72:	f042 0201 	orr.w	r2, r2, #1
 8021e76:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8021e78:	7bbb      	ldrb	r3, [r7, #14]
 8021e7a:	4a3b      	ldr	r2, [pc, #236]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021e7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021e80:	e06e      	b.n	8021f60 <lv_mem_buf_get+0x14c>
            }
            else if(i_guess < 0) {
 8021e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	da02      	bge.n	8021e90 <lv_mem_buf_get+0x7c>
                i_guess = i;
 8021e8a:	7bbb      	ldrb	r3, [r7, #14]
 8021e8c:	73fb      	strb	r3, [r7, #15]
 8021e8e:	e00e      	b.n	8021eae <lv_mem_buf_get+0x9a>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8021e90:	7bbb      	ldrb	r3, [r7, #14]
 8021e92:	4a35      	ldr	r2, [pc, #212]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021e94:	00db      	lsls	r3, r3, #3
 8021e96:	4413      	add	r3, r2
 8021e98:	889a      	ldrh	r2, [r3, #4]
 8021e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021e9e:	4932      	ldr	r1, [pc, #200]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021ea0:	00db      	lsls	r3, r3, #3
 8021ea2:	440b      	add	r3, r1
 8021ea4:	889b      	ldrh	r3, [r3, #4]
 8021ea6:	429a      	cmp	r2, r3
 8021ea8:	d201      	bcs.n	8021eae <lv_mem_buf_get+0x9a>
                i_guess = i;
 8021eaa:	7bbb      	ldrb	r3, [r7, #14]
 8021eac:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021eae:	7bbb      	ldrb	r3, [r7, #14]
 8021eb0:	3301      	adds	r3, #1
 8021eb2:	73bb      	strb	r3, [r7, #14]
 8021eb4:	7bbb      	ldrb	r3, [r7, #14]
 8021eb6:	2b0f      	cmp	r3, #15
 8021eb8:	d9ba      	bls.n	8021e30 <lv_mem_buf_get+0x1c>
            }
        }
    }

    if(i_guess >= 0) {
 8021eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	db0e      	blt.n	8021ee0 <lv_mem_buf_get+0xcc>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8021ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021ec6:	4a28      	ldr	r2, [pc, #160]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021ec8:	00db      	lsls	r3, r3, #3
 8021eca:	4413      	add	r3, r2
 8021ecc:	799a      	ldrb	r2, [r3, #6]
 8021ece:	f042 0201 	orr.w	r2, r2, #1
 8021ed2:	719a      	strb	r2, [r3, #6]
        MEM_TRACE("returning already allocated buffer (buffer id: %d, address: %p)", i_guess,
                  LV_GC_ROOT(lv_mem_buf[i_guess]).p);
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8021ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021ed8:	4a23      	ldr	r2, [pc, #140]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021eda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021ede:	e03f      	b.n	8021f60 <lv_mem_buf_get+0x14c>
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021ee0:	2300      	movs	r3, #0
 8021ee2:	737b      	strb	r3, [r7, #13]
 8021ee4:	e038      	b.n	8021f58 <lv_mem_buf_get+0x144>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8021ee6:	7b7b      	ldrb	r3, [r7, #13]
 8021ee8:	4a1f      	ldr	r2, [pc, #124]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021eea:	00db      	lsls	r3, r3, #3
 8021eec:	4413      	add	r3, r2
 8021eee:	799b      	ldrb	r3, [r3, #6]
 8021ef0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8021ef4:	b2db      	uxtb	r3, r3
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d12b      	bne.n	8021f52 <lv_mem_buf_get+0x13e>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8021efa:	7b7b      	ldrb	r3, [r7, #13]
 8021efc:	4a1a      	ldr	r2, [pc, #104]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021efe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021f02:	6879      	ldr	r1, [r7, #4]
 8021f04:	4618      	mov	r0, r3
 8021f06:	f7ff ff59 	bl	8021dbc <lv_mem_realloc>
 8021f0a:	60b8      	str	r0, [r7, #8]
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8021f0c:	68bb      	ldr	r3, [r7, #8]
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	d100      	bne.n	8021f14 <lv_mem_buf_get+0x100>
 8021f12:	e7fe      	b.n	8021f12 <lv_mem_buf_get+0xfe>
            if(buf == NULL) return NULL;
 8021f14:	68bb      	ldr	r3, [r7, #8]
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	d101      	bne.n	8021f1e <lv_mem_buf_get+0x10a>
 8021f1a:	2300      	movs	r3, #0
 8021f1c:	e020      	b.n	8021f60 <lv_mem_buf_get+0x14c>

            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8021f1e:	7b7b      	ldrb	r3, [r7, #13]
 8021f20:	4a11      	ldr	r2, [pc, #68]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021f22:	00db      	lsls	r3, r3, #3
 8021f24:	4413      	add	r3, r2
 8021f26:	799a      	ldrb	r2, [r3, #6]
 8021f28:	f042 0201 	orr.w	r2, r2, #1
 8021f2c:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8021f2e:	7b7b      	ldrb	r3, [r7, #13]
 8021f30:	687a      	ldr	r2, [r7, #4]
 8021f32:	b291      	uxth	r1, r2
 8021f34:	4a0c      	ldr	r2, [pc, #48]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021f36:	00db      	lsls	r3, r3, #3
 8021f38:	4413      	add	r3, r2
 8021f3a:	460a      	mov	r2, r1
 8021f3c:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8021f3e:	7b7b      	ldrb	r3, [r7, #13]
 8021f40:	4909      	ldr	r1, [pc, #36]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021f42:	68ba      	ldr	r2, [r7, #8]
 8021f44:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            MEM_TRACE("allocated (buffer id: %d, address: %p)", i, LV_GC_ROOT(lv_mem_buf[i]).p);
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8021f48:	7b7b      	ldrb	r3, [r7, #13]
 8021f4a:	4a07      	ldr	r2, [pc, #28]	; (8021f68 <lv_mem_buf_get+0x154>)
 8021f4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021f50:	e006      	b.n	8021f60 <lv_mem_buf_get+0x14c>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021f52:	7b7b      	ldrb	r3, [r7, #13]
 8021f54:	3301      	adds	r3, #1
 8021f56:	737b      	strb	r3, [r7, #13]
 8021f58:	7b7b      	ldrb	r3, [r7, #13]
 8021f5a:	2b0f      	cmp	r3, #15
 8021f5c:	d9c3      	bls.n	8021ee6 <lv_mem_buf_get+0xd2>
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8021f5e:	e7fe      	b.n	8021f5e <lv_mem_buf_get+0x14a>
    return NULL;
}
 8021f60:	4618      	mov	r0, r3
 8021f62:	3710      	adds	r7, #16
 8021f64:	46bd      	mov	sp, r7
 8021f66:	bd80      	pop	{r7, pc}
 8021f68:	200008e0 	.word	0x200008e0

08021f6c <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 8021f6c:	b480      	push	{r7}
 8021f6e:	b085      	sub	sp, #20
 8021f70:	af00      	add	r7, sp, #0
 8021f72:	6078      	str	r0, [r7, #4]
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021f74:	2300      	movs	r3, #0
 8021f76:	73fb      	strb	r3, [r7, #15]
 8021f78:	e012      	b.n	8021fa0 <lv_mem_buf_release+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8021f7a:	7bfb      	ldrb	r3, [r7, #15]
 8021f7c:	4a0c      	ldr	r2, [pc, #48]	; (8021fb0 <lv_mem_buf_release+0x44>)
 8021f7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021f82:	687a      	ldr	r2, [r7, #4]
 8021f84:	429a      	cmp	r2, r3
 8021f86:	d108      	bne.n	8021f9a <lv_mem_buf_release+0x2e>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8021f88:	7bfb      	ldrb	r3, [r7, #15]
 8021f8a:	4a09      	ldr	r2, [pc, #36]	; (8021fb0 <lv_mem_buf_release+0x44>)
 8021f8c:	00db      	lsls	r3, r3, #3
 8021f8e:	4413      	add	r3, r2
 8021f90:	799a      	ldrb	r2, [r3, #6]
 8021f92:	f36f 0200 	bfc	r2, #0, #1
 8021f96:	719a      	strb	r2, [r3, #6]
            return;
 8021f98:	e005      	b.n	8021fa6 <lv_mem_buf_release+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021f9a:	7bfb      	ldrb	r3, [r7, #15]
 8021f9c:	3301      	adds	r3, #1
 8021f9e:	73fb      	strb	r3, [r7, #15]
 8021fa0:	7bfb      	ldrb	r3, [r7, #15]
 8021fa2:	2b0f      	cmp	r3, #15
 8021fa4:	d9e9      	bls.n	8021f7a <lv_mem_buf_release+0xe>
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 8021fa6:	3714      	adds	r7, #20
 8021fa8:	46bd      	mov	sp, r7
 8021faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fae:	4770      	bx	lr
 8021fb0:	200008e0 	.word	0x200008e0

08021fb4 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 8021fb4:	b580      	push	{r7, lr}
 8021fb6:	b082      	sub	sp, #8
 8021fb8:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021fba:	2300      	movs	r3, #0
 8021fbc:	71fb      	strb	r3, [r7, #7]
 8021fbe:	e022      	b.n	8022006 <lv_mem_buf_free_all+0x52>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8021fc0:	79fb      	ldrb	r3, [r7, #7]
 8021fc2:	4a15      	ldr	r2, [pc, #84]	; (8022018 <lv_mem_buf_free_all+0x64>)
 8021fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d019      	beq.n	8022000 <lv_mem_buf_free_all+0x4c>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8021fcc:	79fb      	ldrb	r3, [r7, #7]
 8021fce:	4a12      	ldr	r2, [pc, #72]	; (8022018 <lv_mem_buf_free_all+0x64>)
 8021fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021fd4:	4618      	mov	r0, r3
 8021fd6:	f7ff fec3 	bl	8021d60 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8021fda:	79fb      	ldrb	r3, [r7, #7]
 8021fdc:	4a0e      	ldr	r2, [pc, #56]	; (8022018 <lv_mem_buf_free_all+0x64>)
 8021fde:	2100      	movs	r1, #0
 8021fe0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8021fe4:	79fb      	ldrb	r3, [r7, #7]
 8021fe6:	4a0c      	ldr	r2, [pc, #48]	; (8022018 <lv_mem_buf_free_all+0x64>)
 8021fe8:	00db      	lsls	r3, r3, #3
 8021fea:	4413      	add	r3, r2
 8021fec:	799a      	ldrb	r2, [r3, #6]
 8021fee:	f36f 0200 	bfc	r2, #0, #1
 8021ff2:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8021ff4:	79fb      	ldrb	r3, [r7, #7]
 8021ff6:	4a08      	ldr	r2, [pc, #32]	; (8022018 <lv_mem_buf_free_all+0x64>)
 8021ff8:	00db      	lsls	r3, r3, #3
 8021ffa:	4413      	add	r3, r2
 8021ffc:	2200      	movs	r2, #0
 8021ffe:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8022000:	79fb      	ldrb	r3, [r7, #7]
 8022002:	3301      	adds	r3, #1
 8022004:	71fb      	strb	r3, [r7, #7]
 8022006:	79fb      	ldrb	r3, [r7, #7]
 8022008:	2b0f      	cmp	r3, #15
 802200a:	d9d9      	bls.n	8021fc0 <lv_mem_buf_free_all+0xc>
        }
    }
}
 802200c:	bf00      	nop
 802200e:	bf00      	nop
 8022010:	3708      	adds	r7, #8
 8022012:	46bd      	mov	sp, r7
 8022014:	bd80      	pop	{r7, pc}
 8022016:	bf00      	nop
 8022018:	200008e0 	.word	0x200008e0

0802201c <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 802201c:	b480      	push	{r7}
 802201e:	b08b      	sub	sp, #44	; 0x2c
 8022020:	af00      	add	r7, sp, #0
 8022022:	60f8      	str	r0, [r7, #12]
 8022024:	60b9      	str	r1, [r7, #8]
 8022026:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 8022028:	68fb      	ldr	r3, [r7, #12]
 802202a:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 802202c:	68bb      	ldr	r3, [r7, #8]
 802202e:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8022030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022032:	f003 0303 	and.w	r3, r3, #3
 8022036:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8022038:	6a3b      	ldr	r3, [r7, #32]
 802203a:	f003 0303 	and.w	r3, r3, #3
 802203e:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 8022040:	693a      	ldr	r2, [r7, #16]
 8022042:	69fb      	ldr	r3, [r7, #28]
 8022044:	429a      	cmp	r2, r3
 8022046:	f000 815b 	beq.w	8022300 <lv_memcpy+0x2e4>
        while(len > 32) {
 802204a:	e142      	b.n	80222d2 <lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 802204c:	6a3b      	ldr	r3, [r7, #32]
 802204e:	781a      	ldrb	r2, [r3, #0]
 8022050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022052:	701a      	strb	r2, [r3, #0]
 8022054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022056:	3301      	adds	r3, #1
 8022058:	627b      	str	r3, [r7, #36]	; 0x24
 802205a:	6a3b      	ldr	r3, [r7, #32]
 802205c:	3301      	adds	r3, #1
 802205e:	623b      	str	r3, [r7, #32]
 8022060:	6a3b      	ldr	r3, [r7, #32]
 8022062:	781a      	ldrb	r2, [r3, #0]
 8022064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022066:	701a      	strb	r2, [r3, #0]
 8022068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802206a:	3301      	adds	r3, #1
 802206c:	627b      	str	r3, [r7, #36]	; 0x24
 802206e:	6a3b      	ldr	r3, [r7, #32]
 8022070:	3301      	adds	r3, #1
 8022072:	623b      	str	r3, [r7, #32]
 8022074:	6a3b      	ldr	r3, [r7, #32]
 8022076:	781a      	ldrb	r2, [r3, #0]
 8022078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802207a:	701a      	strb	r2, [r3, #0]
 802207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802207e:	3301      	adds	r3, #1
 8022080:	627b      	str	r3, [r7, #36]	; 0x24
 8022082:	6a3b      	ldr	r3, [r7, #32]
 8022084:	3301      	adds	r3, #1
 8022086:	623b      	str	r3, [r7, #32]
 8022088:	6a3b      	ldr	r3, [r7, #32]
 802208a:	781a      	ldrb	r2, [r3, #0]
 802208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802208e:	701a      	strb	r2, [r3, #0]
 8022090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022092:	3301      	adds	r3, #1
 8022094:	627b      	str	r3, [r7, #36]	; 0x24
 8022096:	6a3b      	ldr	r3, [r7, #32]
 8022098:	3301      	adds	r3, #1
 802209a:	623b      	str	r3, [r7, #32]
 802209c:	6a3b      	ldr	r3, [r7, #32]
 802209e:	781a      	ldrb	r2, [r3, #0]
 80220a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220a2:	701a      	strb	r2, [r3, #0]
 80220a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220a6:	3301      	adds	r3, #1
 80220a8:	627b      	str	r3, [r7, #36]	; 0x24
 80220aa:	6a3b      	ldr	r3, [r7, #32]
 80220ac:	3301      	adds	r3, #1
 80220ae:	623b      	str	r3, [r7, #32]
 80220b0:	6a3b      	ldr	r3, [r7, #32]
 80220b2:	781a      	ldrb	r2, [r3, #0]
 80220b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220b6:	701a      	strb	r2, [r3, #0]
 80220b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220ba:	3301      	adds	r3, #1
 80220bc:	627b      	str	r3, [r7, #36]	; 0x24
 80220be:	6a3b      	ldr	r3, [r7, #32]
 80220c0:	3301      	adds	r3, #1
 80220c2:	623b      	str	r3, [r7, #32]
 80220c4:	6a3b      	ldr	r3, [r7, #32]
 80220c6:	781a      	ldrb	r2, [r3, #0]
 80220c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220ca:	701a      	strb	r2, [r3, #0]
 80220cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220ce:	3301      	adds	r3, #1
 80220d0:	627b      	str	r3, [r7, #36]	; 0x24
 80220d2:	6a3b      	ldr	r3, [r7, #32]
 80220d4:	3301      	adds	r3, #1
 80220d6:	623b      	str	r3, [r7, #32]
 80220d8:	6a3b      	ldr	r3, [r7, #32]
 80220da:	781a      	ldrb	r2, [r3, #0]
 80220dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220de:	701a      	strb	r2, [r3, #0]
 80220e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220e2:	3301      	adds	r3, #1
 80220e4:	627b      	str	r3, [r7, #36]	; 0x24
 80220e6:	6a3b      	ldr	r3, [r7, #32]
 80220e8:	3301      	adds	r3, #1
 80220ea:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 80220ec:	6a3b      	ldr	r3, [r7, #32]
 80220ee:	781a      	ldrb	r2, [r3, #0]
 80220f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220f2:	701a      	strb	r2, [r3, #0]
 80220f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220f6:	3301      	adds	r3, #1
 80220f8:	627b      	str	r3, [r7, #36]	; 0x24
 80220fa:	6a3b      	ldr	r3, [r7, #32]
 80220fc:	3301      	adds	r3, #1
 80220fe:	623b      	str	r3, [r7, #32]
 8022100:	6a3b      	ldr	r3, [r7, #32]
 8022102:	781a      	ldrb	r2, [r3, #0]
 8022104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022106:	701a      	strb	r2, [r3, #0]
 8022108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802210a:	3301      	adds	r3, #1
 802210c:	627b      	str	r3, [r7, #36]	; 0x24
 802210e:	6a3b      	ldr	r3, [r7, #32]
 8022110:	3301      	adds	r3, #1
 8022112:	623b      	str	r3, [r7, #32]
 8022114:	6a3b      	ldr	r3, [r7, #32]
 8022116:	781a      	ldrb	r2, [r3, #0]
 8022118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802211a:	701a      	strb	r2, [r3, #0]
 802211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802211e:	3301      	adds	r3, #1
 8022120:	627b      	str	r3, [r7, #36]	; 0x24
 8022122:	6a3b      	ldr	r3, [r7, #32]
 8022124:	3301      	adds	r3, #1
 8022126:	623b      	str	r3, [r7, #32]
 8022128:	6a3b      	ldr	r3, [r7, #32]
 802212a:	781a      	ldrb	r2, [r3, #0]
 802212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802212e:	701a      	strb	r2, [r3, #0]
 8022130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022132:	3301      	adds	r3, #1
 8022134:	627b      	str	r3, [r7, #36]	; 0x24
 8022136:	6a3b      	ldr	r3, [r7, #32]
 8022138:	3301      	adds	r3, #1
 802213a:	623b      	str	r3, [r7, #32]
 802213c:	6a3b      	ldr	r3, [r7, #32]
 802213e:	781a      	ldrb	r2, [r3, #0]
 8022140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022142:	701a      	strb	r2, [r3, #0]
 8022144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022146:	3301      	adds	r3, #1
 8022148:	627b      	str	r3, [r7, #36]	; 0x24
 802214a:	6a3b      	ldr	r3, [r7, #32]
 802214c:	3301      	adds	r3, #1
 802214e:	623b      	str	r3, [r7, #32]
 8022150:	6a3b      	ldr	r3, [r7, #32]
 8022152:	781a      	ldrb	r2, [r3, #0]
 8022154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022156:	701a      	strb	r2, [r3, #0]
 8022158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802215a:	3301      	adds	r3, #1
 802215c:	627b      	str	r3, [r7, #36]	; 0x24
 802215e:	6a3b      	ldr	r3, [r7, #32]
 8022160:	3301      	adds	r3, #1
 8022162:	623b      	str	r3, [r7, #32]
 8022164:	6a3b      	ldr	r3, [r7, #32]
 8022166:	781a      	ldrb	r2, [r3, #0]
 8022168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802216a:	701a      	strb	r2, [r3, #0]
 802216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802216e:	3301      	adds	r3, #1
 8022170:	627b      	str	r3, [r7, #36]	; 0x24
 8022172:	6a3b      	ldr	r3, [r7, #32]
 8022174:	3301      	adds	r3, #1
 8022176:	623b      	str	r3, [r7, #32]
 8022178:	6a3b      	ldr	r3, [r7, #32]
 802217a:	781a      	ldrb	r2, [r3, #0]
 802217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802217e:	701a      	strb	r2, [r3, #0]
 8022180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022182:	3301      	adds	r3, #1
 8022184:	627b      	str	r3, [r7, #36]	; 0x24
 8022186:	6a3b      	ldr	r3, [r7, #32]
 8022188:	3301      	adds	r3, #1
 802218a:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 802218c:	6a3b      	ldr	r3, [r7, #32]
 802218e:	781a      	ldrb	r2, [r3, #0]
 8022190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022192:	701a      	strb	r2, [r3, #0]
 8022194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022196:	3301      	adds	r3, #1
 8022198:	627b      	str	r3, [r7, #36]	; 0x24
 802219a:	6a3b      	ldr	r3, [r7, #32]
 802219c:	3301      	adds	r3, #1
 802219e:	623b      	str	r3, [r7, #32]
 80221a0:	6a3b      	ldr	r3, [r7, #32]
 80221a2:	781a      	ldrb	r2, [r3, #0]
 80221a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221a6:	701a      	strb	r2, [r3, #0]
 80221a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221aa:	3301      	adds	r3, #1
 80221ac:	627b      	str	r3, [r7, #36]	; 0x24
 80221ae:	6a3b      	ldr	r3, [r7, #32]
 80221b0:	3301      	adds	r3, #1
 80221b2:	623b      	str	r3, [r7, #32]
 80221b4:	6a3b      	ldr	r3, [r7, #32]
 80221b6:	781a      	ldrb	r2, [r3, #0]
 80221b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221ba:	701a      	strb	r2, [r3, #0]
 80221bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221be:	3301      	adds	r3, #1
 80221c0:	627b      	str	r3, [r7, #36]	; 0x24
 80221c2:	6a3b      	ldr	r3, [r7, #32]
 80221c4:	3301      	adds	r3, #1
 80221c6:	623b      	str	r3, [r7, #32]
 80221c8:	6a3b      	ldr	r3, [r7, #32]
 80221ca:	781a      	ldrb	r2, [r3, #0]
 80221cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221ce:	701a      	strb	r2, [r3, #0]
 80221d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221d2:	3301      	adds	r3, #1
 80221d4:	627b      	str	r3, [r7, #36]	; 0x24
 80221d6:	6a3b      	ldr	r3, [r7, #32]
 80221d8:	3301      	adds	r3, #1
 80221da:	623b      	str	r3, [r7, #32]
 80221dc:	6a3b      	ldr	r3, [r7, #32]
 80221de:	781a      	ldrb	r2, [r3, #0]
 80221e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221e2:	701a      	strb	r2, [r3, #0]
 80221e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221e6:	3301      	adds	r3, #1
 80221e8:	627b      	str	r3, [r7, #36]	; 0x24
 80221ea:	6a3b      	ldr	r3, [r7, #32]
 80221ec:	3301      	adds	r3, #1
 80221ee:	623b      	str	r3, [r7, #32]
 80221f0:	6a3b      	ldr	r3, [r7, #32]
 80221f2:	781a      	ldrb	r2, [r3, #0]
 80221f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221f6:	701a      	strb	r2, [r3, #0]
 80221f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221fa:	3301      	adds	r3, #1
 80221fc:	627b      	str	r3, [r7, #36]	; 0x24
 80221fe:	6a3b      	ldr	r3, [r7, #32]
 8022200:	3301      	adds	r3, #1
 8022202:	623b      	str	r3, [r7, #32]
 8022204:	6a3b      	ldr	r3, [r7, #32]
 8022206:	781a      	ldrb	r2, [r3, #0]
 8022208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802220a:	701a      	strb	r2, [r3, #0]
 802220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802220e:	3301      	adds	r3, #1
 8022210:	627b      	str	r3, [r7, #36]	; 0x24
 8022212:	6a3b      	ldr	r3, [r7, #32]
 8022214:	3301      	adds	r3, #1
 8022216:	623b      	str	r3, [r7, #32]
 8022218:	6a3b      	ldr	r3, [r7, #32]
 802221a:	781a      	ldrb	r2, [r3, #0]
 802221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802221e:	701a      	strb	r2, [r3, #0]
 8022220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022222:	3301      	adds	r3, #1
 8022224:	627b      	str	r3, [r7, #36]	; 0x24
 8022226:	6a3b      	ldr	r3, [r7, #32]
 8022228:	3301      	adds	r3, #1
 802222a:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 802222c:	6a3b      	ldr	r3, [r7, #32]
 802222e:	781a      	ldrb	r2, [r3, #0]
 8022230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022232:	701a      	strb	r2, [r3, #0]
 8022234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022236:	3301      	adds	r3, #1
 8022238:	627b      	str	r3, [r7, #36]	; 0x24
 802223a:	6a3b      	ldr	r3, [r7, #32]
 802223c:	3301      	adds	r3, #1
 802223e:	623b      	str	r3, [r7, #32]
 8022240:	6a3b      	ldr	r3, [r7, #32]
 8022242:	781a      	ldrb	r2, [r3, #0]
 8022244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022246:	701a      	strb	r2, [r3, #0]
 8022248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802224a:	3301      	adds	r3, #1
 802224c:	627b      	str	r3, [r7, #36]	; 0x24
 802224e:	6a3b      	ldr	r3, [r7, #32]
 8022250:	3301      	adds	r3, #1
 8022252:	623b      	str	r3, [r7, #32]
 8022254:	6a3b      	ldr	r3, [r7, #32]
 8022256:	781a      	ldrb	r2, [r3, #0]
 8022258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802225a:	701a      	strb	r2, [r3, #0]
 802225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802225e:	3301      	adds	r3, #1
 8022260:	627b      	str	r3, [r7, #36]	; 0x24
 8022262:	6a3b      	ldr	r3, [r7, #32]
 8022264:	3301      	adds	r3, #1
 8022266:	623b      	str	r3, [r7, #32]
 8022268:	6a3b      	ldr	r3, [r7, #32]
 802226a:	781a      	ldrb	r2, [r3, #0]
 802226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802226e:	701a      	strb	r2, [r3, #0]
 8022270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022272:	3301      	adds	r3, #1
 8022274:	627b      	str	r3, [r7, #36]	; 0x24
 8022276:	6a3b      	ldr	r3, [r7, #32]
 8022278:	3301      	adds	r3, #1
 802227a:	623b      	str	r3, [r7, #32]
 802227c:	6a3b      	ldr	r3, [r7, #32]
 802227e:	781a      	ldrb	r2, [r3, #0]
 8022280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022282:	701a      	strb	r2, [r3, #0]
 8022284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022286:	3301      	adds	r3, #1
 8022288:	627b      	str	r3, [r7, #36]	; 0x24
 802228a:	6a3b      	ldr	r3, [r7, #32]
 802228c:	3301      	adds	r3, #1
 802228e:	623b      	str	r3, [r7, #32]
 8022290:	6a3b      	ldr	r3, [r7, #32]
 8022292:	781a      	ldrb	r2, [r3, #0]
 8022294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022296:	701a      	strb	r2, [r3, #0]
 8022298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802229a:	3301      	adds	r3, #1
 802229c:	627b      	str	r3, [r7, #36]	; 0x24
 802229e:	6a3b      	ldr	r3, [r7, #32]
 80222a0:	3301      	adds	r3, #1
 80222a2:	623b      	str	r3, [r7, #32]
 80222a4:	6a3b      	ldr	r3, [r7, #32]
 80222a6:	781a      	ldrb	r2, [r3, #0]
 80222a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222aa:	701a      	strb	r2, [r3, #0]
 80222ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ae:	3301      	adds	r3, #1
 80222b0:	627b      	str	r3, [r7, #36]	; 0x24
 80222b2:	6a3b      	ldr	r3, [r7, #32]
 80222b4:	3301      	adds	r3, #1
 80222b6:	623b      	str	r3, [r7, #32]
 80222b8:	6a3b      	ldr	r3, [r7, #32]
 80222ba:	781a      	ldrb	r2, [r3, #0]
 80222bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222be:	701a      	strb	r2, [r3, #0]
 80222c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222c2:	3301      	adds	r3, #1
 80222c4:	627b      	str	r3, [r7, #36]	; 0x24
 80222c6:	6a3b      	ldr	r3, [r7, #32]
 80222c8:	3301      	adds	r3, #1
 80222ca:	623b      	str	r3, [r7, #32]
            len -= 32;
 80222cc:	687b      	ldr	r3, [r7, #4]
 80222ce:	3b20      	subs	r3, #32
 80222d0:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	2b20      	cmp	r3, #32
 80222d6:	f63f aeb9 	bhi.w	802204c <lv_memcpy+0x30>
        }
        while(len) {
 80222da:	e00c      	b.n	80222f6 <lv_memcpy+0x2da>
            COPY8
 80222dc:	6a3b      	ldr	r3, [r7, #32]
 80222de:	781a      	ldrb	r2, [r3, #0]
 80222e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222e2:	701a      	strb	r2, [r3, #0]
 80222e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222e6:	3301      	adds	r3, #1
 80222e8:	627b      	str	r3, [r7, #36]	; 0x24
 80222ea:	6a3b      	ldr	r3, [r7, #32]
 80222ec:	3301      	adds	r3, #1
 80222ee:	623b      	str	r3, [r7, #32]
            len--;
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	3b01      	subs	r3, #1
 80222f4:	607b      	str	r3, [r7, #4]
        while(len) {
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d1ef      	bne.n	80222dc <lv_memcpy+0x2c0>
        }
        return dst;
 80222fc:	68fb      	ldr	r3, [r7, #12]
 80222fe:	e09f      	b.n	8022440 <lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 8022300:	69fb      	ldr	r3, [r7, #28]
 8022302:	2b00      	cmp	r3, #0
 8022304:	d01a      	beq.n	802233c <lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 8022306:	69fb      	ldr	r3, [r7, #28]
 8022308:	f1c3 0304 	rsb	r3, r3, #4
 802230c:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 802230e:	e00f      	b.n	8022330 <lv_memcpy+0x314>
            COPY8;
 8022310:	6a3b      	ldr	r3, [r7, #32]
 8022312:	781a      	ldrb	r2, [r3, #0]
 8022314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022316:	701a      	strb	r2, [r3, #0]
 8022318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802231a:	3301      	adds	r3, #1
 802231c:	627b      	str	r3, [r7, #36]	; 0x24
 802231e:	6a3b      	ldr	r3, [r7, #32]
 8022320:	3301      	adds	r3, #1
 8022322:	623b      	str	r3, [r7, #32]
            d_align--;
 8022324:	69fb      	ldr	r3, [r7, #28]
 8022326:	3b01      	subs	r3, #1
 8022328:	61fb      	str	r3, [r7, #28]
            len--;
 802232a:	687b      	ldr	r3, [r7, #4]
 802232c:	3b01      	subs	r3, #1
 802232e:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 8022330:	69fb      	ldr	r3, [r7, #28]
 8022332:	2b00      	cmp	r3, #0
 8022334:	d002      	beq.n	802233c <lv_memcpy+0x320>
 8022336:	687b      	ldr	r3, [r7, #4]
 8022338:	2b00      	cmp	r3, #0
 802233a:	d1e9      	bne.n	8022310 <lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 802233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802233e:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 8022340:	6a3b      	ldr	r3, [r7, #32]
 8022342:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 8022344:	e052      	b.n	80223ec <lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 8022346:	697b      	ldr	r3, [r7, #20]
 8022348:	681a      	ldr	r2, [r3, #0]
 802234a:	69bb      	ldr	r3, [r7, #24]
 802234c:	601a      	str	r2, [r3, #0]
 802234e:	69bb      	ldr	r3, [r7, #24]
 8022350:	3304      	adds	r3, #4
 8022352:	61bb      	str	r3, [r7, #24]
 8022354:	697b      	ldr	r3, [r7, #20]
 8022356:	3304      	adds	r3, #4
 8022358:	617b      	str	r3, [r7, #20]
 802235a:	697b      	ldr	r3, [r7, #20]
 802235c:	681a      	ldr	r2, [r3, #0]
 802235e:	69bb      	ldr	r3, [r7, #24]
 8022360:	601a      	str	r2, [r3, #0]
 8022362:	69bb      	ldr	r3, [r7, #24]
 8022364:	3304      	adds	r3, #4
 8022366:	61bb      	str	r3, [r7, #24]
 8022368:	697b      	ldr	r3, [r7, #20]
 802236a:	3304      	adds	r3, #4
 802236c:	617b      	str	r3, [r7, #20]
 802236e:	697b      	ldr	r3, [r7, #20]
 8022370:	681a      	ldr	r2, [r3, #0]
 8022372:	69bb      	ldr	r3, [r7, #24]
 8022374:	601a      	str	r2, [r3, #0]
 8022376:	69bb      	ldr	r3, [r7, #24]
 8022378:	3304      	adds	r3, #4
 802237a:	61bb      	str	r3, [r7, #24]
 802237c:	697b      	ldr	r3, [r7, #20]
 802237e:	3304      	adds	r3, #4
 8022380:	617b      	str	r3, [r7, #20]
 8022382:	697b      	ldr	r3, [r7, #20]
 8022384:	681a      	ldr	r2, [r3, #0]
 8022386:	69bb      	ldr	r3, [r7, #24]
 8022388:	601a      	str	r2, [r3, #0]
 802238a:	69bb      	ldr	r3, [r7, #24]
 802238c:	3304      	adds	r3, #4
 802238e:	61bb      	str	r3, [r7, #24]
 8022390:	697b      	ldr	r3, [r7, #20]
 8022392:	3304      	adds	r3, #4
 8022394:	617b      	str	r3, [r7, #20]
 8022396:	697b      	ldr	r3, [r7, #20]
 8022398:	681a      	ldr	r2, [r3, #0]
 802239a:	69bb      	ldr	r3, [r7, #24]
 802239c:	601a      	str	r2, [r3, #0]
 802239e:	69bb      	ldr	r3, [r7, #24]
 80223a0:	3304      	adds	r3, #4
 80223a2:	61bb      	str	r3, [r7, #24]
 80223a4:	697b      	ldr	r3, [r7, #20]
 80223a6:	3304      	adds	r3, #4
 80223a8:	617b      	str	r3, [r7, #20]
 80223aa:	697b      	ldr	r3, [r7, #20]
 80223ac:	681a      	ldr	r2, [r3, #0]
 80223ae:	69bb      	ldr	r3, [r7, #24]
 80223b0:	601a      	str	r2, [r3, #0]
 80223b2:	69bb      	ldr	r3, [r7, #24]
 80223b4:	3304      	adds	r3, #4
 80223b6:	61bb      	str	r3, [r7, #24]
 80223b8:	697b      	ldr	r3, [r7, #20]
 80223ba:	3304      	adds	r3, #4
 80223bc:	617b      	str	r3, [r7, #20]
 80223be:	697b      	ldr	r3, [r7, #20]
 80223c0:	681a      	ldr	r2, [r3, #0]
 80223c2:	69bb      	ldr	r3, [r7, #24]
 80223c4:	601a      	str	r2, [r3, #0]
 80223c6:	69bb      	ldr	r3, [r7, #24]
 80223c8:	3304      	adds	r3, #4
 80223ca:	61bb      	str	r3, [r7, #24]
 80223cc:	697b      	ldr	r3, [r7, #20]
 80223ce:	3304      	adds	r3, #4
 80223d0:	617b      	str	r3, [r7, #20]
 80223d2:	697b      	ldr	r3, [r7, #20]
 80223d4:	681a      	ldr	r2, [r3, #0]
 80223d6:	69bb      	ldr	r3, [r7, #24]
 80223d8:	601a      	str	r2, [r3, #0]
 80223da:	69bb      	ldr	r3, [r7, #24]
 80223dc:	3304      	adds	r3, #4
 80223de:	61bb      	str	r3, [r7, #24]
 80223e0:	697b      	ldr	r3, [r7, #20]
 80223e2:	3304      	adds	r3, #4
 80223e4:	617b      	str	r3, [r7, #20]
        len -= 32;
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	3b20      	subs	r3, #32
 80223ea:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	2b20      	cmp	r3, #32
 80223f0:	d8a9      	bhi.n	8022346 <lv_memcpy+0x32a>
    }

    while(len > 4) {
 80223f2:	e00c      	b.n	802240e <lv_memcpy+0x3f2>
        COPY32;
 80223f4:	697b      	ldr	r3, [r7, #20]
 80223f6:	681a      	ldr	r2, [r3, #0]
 80223f8:	69bb      	ldr	r3, [r7, #24]
 80223fa:	601a      	str	r2, [r3, #0]
 80223fc:	69bb      	ldr	r3, [r7, #24]
 80223fe:	3304      	adds	r3, #4
 8022400:	61bb      	str	r3, [r7, #24]
 8022402:	697b      	ldr	r3, [r7, #20]
 8022404:	3304      	adds	r3, #4
 8022406:	617b      	str	r3, [r7, #20]
        len -= 4;
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	3b04      	subs	r3, #4
 802240c:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 802240e:	687b      	ldr	r3, [r7, #4]
 8022410:	2b04      	cmp	r3, #4
 8022412:	d8ef      	bhi.n	80223f4 <lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 8022414:	69bb      	ldr	r3, [r7, #24]
 8022416:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 8022418:	697b      	ldr	r3, [r7, #20]
 802241a:	623b      	str	r3, [r7, #32]
    while(len) {
 802241c:	e00c      	b.n	8022438 <lv_memcpy+0x41c>
        COPY8
 802241e:	6a3b      	ldr	r3, [r7, #32]
 8022420:	781a      	ldrb	r2, [r3, #0]
 8022422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022424:	701a      	strb	r2, [r3, #0]
 8022426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022428:	3301      	adds	r3, #1
 802242a:	627b      	str	r3, [r7, #36]	; 0x24
 802242c:	6a3b      	ldr	r3, [r7, #32]
 802242e:	3301      	adds	r3, #1
 8022430:	623b      	str	r3, [r7, #32]
        len--;
 8022432:	687b      	ldr	r3, [r7, #4]
 8022434:	3b01      	subs	r3, #1
 8022436:	607b      	str	r3, [r7, #4]
    while(len) {
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	2b00      	cmp	r3, #0
 802243c:	d1ef      	bne.n	802241e <lv_memcpy+0x402>
    }

    return dst;
 802243e:	68fb      	ldr	r3, [r7, #12]
}
 8022440:	4618      	mov	r0, r3
 8022442:	372c      	adds	r7, #44	; 0x2c
 8022444:	46bd      	mov	sp, r7
 8022446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802244a:	4770      	bx	lr

0802244c <lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset(void * dst, uint8_t v, size_t len)
{
 802244c:	b480      	push	{r7}
 802244e:	b089      	sub	sp, #36	; 0x24
 8022450:	af00      	add	r7, sp, #0
 8022452:	60f8      	str	r0, [r7, #12]
 8022454:	460b      	mov	r3, r1
 8022456:	607a      	str	r2, [r7, #4]
 8022458:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *)dst;
 802245a:	68fb      	ldr	r3, [r7, #12]
 802245c:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 802245e:	69fb      	ldr	r3, [r7, #28]
 8022460:	f003 0303 	and.w	r3, r3, #3
 8022464:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 8022466:	69bb      	ldr	r3, [r7, #24]
 8022468:	2b00      	cmp	r3, #0
 802246a:	d016      	beq.n	802249a <lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 802246c:	69bb      	ldr	r3, [r7, #24]
 802246e:	f1c3 0304 	rsb	r3, r3, #4
 8022472:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 8022474:	e00b      	b.n	802248e <lv_memset+0x42>
            SET8(v);
 8022476:	69fb      	ldr	r3, [r7, #28]
 8022478:	7afa      	ldrb	r2, [r7, #11]
 802247a:	701a      	strb	r2, [r3, #0]
 802247c:	69fb      	ldr	r3, [r7, #28]
 802247e:	3301      	adds	r3, #1
 8022480:	61fb      	str	r3, [r7, #28]
            len--;
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	3b01      	subs	r3, #1
 8022486:	607b      	str	r3, [r7, #4]
            d_align--;
 8022488:	69bb      	ldr	r3, [r7, #24]
 802248a:	3b01      	subs	r3, #1
 802248c:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 802248e:	69bb      	ldr	r3, [r7, #24]
 8022490:	2b00      	cmp	r3, #0
 8022492:	d002      	beq.n	802249a <lv_memset+0x4e>
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	2b00      	cmp	r3, #0
 8022498:	d1ed      	bne.n	8022476 <lv_memset+0x2a>
        }
    }

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 802249a:	7afa      	ldrb	r2, [r7, #11]
 802249c:	7afb      	ldrb	r3, [r7, #11]
 802249e:	021b      	lsls	r3, r3, #8
 80224a0:	441a      	add	r2, r3
 80224a2:	7afb      	ldrb	r3, [r7, #11]
 80224a4:	041b      	lsls	r3, r3, #16
 80224a6:	441a      	add	r2, r3
 80224a8:	7afb      	ldrb	r3, [r7, #11]
 80224aa:	061b      	lsls	r3, r3, #24
 80224ac:	4413      	add	r3, r2
 80224ae:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 80224b0:	69fb      	ldr	r3, [r7, #28]
 80224b2:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 80224b4:	e032      	b.n	802251c <lv_memset+0xd0>
        REPEAT8(SET32(v32));
 80224b6:	697b      	ldr	r3, [r7, #20]
 80224b8:	693a      	ldr	r2, [r7, #16]
 80224ba:	601a      	str	r2, [r3, #0]
 80224bc:	697b      	ldr	r3, [r7, #20]
 80224be:	3304      	adds	r3, #4
 80224c0:	617b      	str	r3, [r7, #20]
 80224c2:	697b      	ldr	r3, [r7, #20]
 80224c4:	693a      	ldr	r2, [r7, #16]
 80224c6:	601a      	str	r2, [r3, #0]
 80224c8:	697b      	ldr	r3, [r7, #20]
 80224ca:	3304      	adds	r3, #4
 80224cc:	617b      	str	r3, [r7, #20]
 80224ce:	697b      	ldr	r3, [r7, #20]
 80224d0:	693a      	ldr	r2, [r7, #16]
 80224d2:	601a      	str	r2, [r3, #0]
 80224d4:	697b      	ldr	r3, [r7, #20]
 80224d6:	3304      	adds	r3, #4
 80224d8:	617b      	str	r3, [r7, #20]
 80224da:	697b      	ldr	r3, [r7, #20]
 80224dc:	693a      	ldr	r2, [r7, #16]
 80224de:	601a      	str	r2, [r3, #0]
 80224e0:	697b      	ldr	r3, [r7, #20]
 80224e2:	3304      	adds	r3, #4
 80224e4:	617b      	str	r3, [r7, #20]
 80224e6:	697b      	ldr	r3, [r7, #20]
 80224e8:	693a      	ldr	r2, [r7, #16]
 80224ea:	601a      	str	r2, [r3, #0]
 80224ec:	697b      	ldr	r3, [r7, #20]
 80224ee:	3304      	adds	r3, #4
 80224f0:	617b      	str	r3, [r7, #20]
 80224f2:	697b      	ldr	r3, [r7, #20]
 80224f4:	693a      	ldr	r2, [r7, #16]
 80224f6:	601a      	str	r2, [r3, #0]
 80224f8:	697b      	ldr	r3, [r7, #20]
 80224fa:	3304      	adds	r3, #4
 80224fc:	617b      	str	r3, [r7, #20]
 80224fe:	697b      	ldr	r3, [r7, #20]
 8022500:	693a      	ldr	r2, [r7, #16]
 8022502:	601a      	str	r2, [r3, #0]
 8022504:	697b      	ldr	r3, [r7, #20]
 8022506:	3304      	adds	r3, #4
 8022508:	617b      	str	r3, [r7, #20]
 802250a:	697b      	ldr	r3, [r7, #20]
 802250c:	693a      	ldr	r2, [r7, #16]
 802250e:	601a      	str	r2, [r3, #0]
 8022510:	697b      	ldr	r3, [r7, #20]
 8022512:	3304      	adds	r3, #4
 8022514:	617b      	str	r3, [r7, #20]
        len -= 32;
 8022516:	687b      	ldr	r3, [r7, #4]
 8022518:	3b20      	subs	r3, #32
 802251a:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	2b20      	cmp	r3, #32
 8022520:	d8c9      	bhi.n	80224b6 <lv_memset+0x6a>
    }

    while(len > 4) {
 8022522:	e008      	b.n	8022536 <lv_memset+0xea>
        SET32(v32);
 8022524:	697b      	ldr	r3, [r7, #20]
 8022526:	693a      	ldr	r2, [r7, #16]
 8022528:	601a      	str	r2, [r3, #0]
 802252a:	697b      	ldr	r3, [r7, #20]
 802252c:	3304      	adds	r3, #4
 802252e:	617b      	str	r3, [r7, #20]
        len -= 4;
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	3b04      	subs	r3, #4
 8022534:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	2b04      	cmp	r3, #4
 802253a:	d8f3      	bhi.n	8022524 <lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 802253c:	697b      	ldr	r3, [r7, #20]
 802253e:	61fb      	str	r3, [r7, #28]
    while(len) {
 8022540:	e008      	b.n	8022554 <lv_memset+0x108>
        SET8(v);
 8022542:	69fb      	ldr	r3, [r7, #28]
 8022544:	7afa      	ldrb	r2, [r7, #11]
 8022546:	701a      	strb	r2, [r3, #0]
 8022548:	69fb      	ldr	r3, [r7, #28]
 802254a:	3301      	adds	r3, #1
 802254c:	61fb      	str	r3, [r7, #28]
        len--;
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	3b01      	subs	r3, #1
 8022552:	607b      	str	r3, [r7, #4]
    while(len) {
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	2b00      	cmp	r3, #0
 8022558:	d1f3      	bne.n	8022542 <lv_memset+0xf6>
    }
}
 802255a:	bf00      	nop
 802255c:	bf00      	nop
 802255e:	3724      	adds	r7, #36	; 0x24
 8022560:	46bd      	mov	sp, r7
 8022562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022566:	4770      	bx	lr

08022568 <lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_00(void * dst, size_t len)
{
 8022568:	b480      	push	{r7}
 802256a:	b087      	sub	sp, #28
 802256c:	af00      	add	r7, sp, #0
 802256e:	6078      	str	r0, [r7, #4]
 8022570:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8022572:	687b      	ldr	r3, [r7, #4]
 8022574:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8022576:	697b      	ldr	r3, [r7, #20]
 8022578:	f003 0303 	and.w	r3, r3, #3
 802257c:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 802257e:	693b      	ldr	r3, [r7, #16]
 8022580:	2b00      	cmp	r3, #0
 8022582:	d016      	beq.n	80225b2 <lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 8022584:	693b      	ldr	r3, [r7, #16]
 8022586:	f1c3 0304 	rsb	r3, r3, #4
 802258a:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802258c:	e00b      	b.n	80225a6 <lv_memset_00+0x3e>
            SET8(0);
 802258e:	697b      	ldr	r3, [r7, #20]
 8022590:	2200      	movs	r2, #0
 8022592:	701a      	strb	r2, [r3, #0]
 8022594:	697b      	ldr	r3, [r7, #20]
 8022596:	3301      	adds	r3, #1
 8022598:	617b      	str	r3, [r7, #20]
            len--;
 802259a:	683b      	ldr	r3, [r7, #0]
 802259c:	3b01      	subs	r3, #1
 802259e:	603b      	str	r3, [r7, #0]
            d_align--;
 80225a0:	693b      	ldr	r3, [r7, #16]
 80225a2:	3b01      	subs	r3, #1
 80225a4:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 80225a6:	693b      	ldr	r3, [r7, #16]
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	d002      	beq.n	80225b2 <lv_memset_00+0x4a>
 80225ac:	683b      	ldr	r3, [r7, #0]
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d1ed      	bne.n	802258e <lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80225b2:	697b      	ldr	r3, [r7, #20]
 80225b4:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 80225b6:	e032      	b.n	802261e <lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 80225b8:	68fb      	ldr	r3, [r7, #12]
 80225ba:	2200      	movs	r2, #0
 80225bc:	601a      	str	r2, [r3, #0]
 80225be:	68fb      	ldr	r3, [r7, #12]
 80225c0:	3304      	adds	r3, #4
 80225c2:	60fb      	str	r3, [r7, #12]
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	2200      	movs	r2, #0
 80225c8:	601a      	str	r2, [r3, #0]
 80225ca:	68fb      	ldr	r3, [r7, #12]
 80225cc:	3304      	adds	r3, #4
 80225ce:	60fb      	str	r3, [r7, #12]
 80225d0:	68fb      	ldr	r3, [r7, #12]
 80225d2:	2200      	movs	r2, #0
 80225d4:	601a      	str	r2, [r3, #0]
 80225d6:	68fb      	ldr	r3, [r7, #12]
 80225d8:	3304      	adds	r3, #4
 80225da:	60fb      	str	r3, [r7, #12]
 80225dc:	68fb      	ldr	r3, [r7, #12]
 80225de:	2200      	movs	r2, #0
 80225e0:	601a      	str	r2, [r3, #0]
 80225e2:	68fb      	ldr	r3, [r7, #12]
 80225e4:	3304      	adds	r3, #4
 80225e6:	60fb      	str	r3, [r7, #12]
 80225e8:	68fb      	ldr	r3, [r7, #12]
 80225ea:	2200      	movs	r2, #0
 80225ec:	601a      	str	r2, [r3, #0]
 80225ee:	68fb      	ldr	r3, [r7, #12]
 80225f0:	3304      	adds	r3, #4
 80225f2:	60fb      	str	r3, [r7, #12]
 80225f4:	68fb      	ldr	r3, [r7, #12]
 80225f6:	2200      	movs	r2, #0
 80225f8:	601a      	str	r2, [r3, #0]
 80225fa:	68fb      	ldr	r3, [r7, #12]
 80225fc:	3304      	adds	r3, #4
 80225fe:	60fb      	str	r3, [r7, #12]
 8022600:	68fb      	ldr	r3, [r7, #12]
 8022602:	2200      	movs	r2, #0
 8022604:	601a      	str	r2, [r3, #0]
 8022606:	68fb      	ldr	r3, [r7, #12]
 8022608:	3304      	adds	r3, #4
 802260a:	60fb      	str	r3, [r7, #12]
 802260c:	68fb      	ldr	r3, [r7, #12]
 802260e:	2200      	movs	r2, #0
 8022610:	601a      	str	r2, [r3, #0]
 8022612:	68fb      	ldr	r3, [r7, #12]
 8022614:	3304      	adds	r3, #4
 8022616:	60fb      	str	r3, [r7, #12]
        len -= 32;
 8022618:	683b      	ldr	r3, [r7, #0]
 802261a:	3b20      	subs	r3, #32
 802261c:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 802261e:	683b      	ldr	r3, [r7, #0]
 8022620:	2b20      	cmp	r3, #32
 8022622:	d8c9      	bhi.n	80225b8 <lv_memset_00+0x50>
    }

    while(len > 4) {
 8022624:	e008      	b.n	8022638 <lv_memset_00+0xd0>
        SET32(0);
 8022626:	68fb      	ldr	r3, [r7, #12]
 8022628:	2200      	movs	r2, #0
 802262a:	601a      	str	r2, [r3, #0]
 802262c:	68fb      	ldr	r3, [r7, #12]
 802262e:	3304      	adds	r3, #4
 8022630:	60fb      	str	r3, [r7, #12]
        len -= 4;
 8022632:	683b      	ldr	r3, [r7, #0]
 8022634:	3b04      	subs	r3, #4
 8022636:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 8022638:	683b      	ldr	r3, [r7, #0]
 802263a:	2b04      	cmp	r3, #4
 802263c:	d8f3      	bhi.n	8022626 <lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 802263e:	68fb      	ldr	r3, [r7, #12]
 8022640:	617b      	str	r3, [r7, #20]
    while(len) {
 8022642:	e008      	b.n	8022656 <lv_memset_00+0xee>
        SET8(0);
 8022644:	697b      	ldr	r3, [r7, #20]
 8022646:	2200      	movs	r2, #0
 8022648:	701a      	strb	r2, [r3, #0]
 802264a:	697b      	ldr	r3, [r7, #20]
 802264c:	3301      	adds	r3, #1
 802264e:	617b      	str	r3, [r7, #20]
        len--;
 8022650:	683b      	ldr	r3, [r7, #0]
 8022652:	3b01      	subs	r3, #1
 8022654:	603b      	str	r3, [r7, #0]
    while(len) {
 8022656:	683b      	ldr	r3, [r7, #0]
 8022658:	2b00      	cmp	r3, #0
 802265a:	d1f3      	bne.n	8022644 <lv_memset_00+0xdc>
    }
}
 802265c:	bf00      	nop
 802265e:	bf00      	nop
 8022660:	371c      	adds	r7, #28
 8022662:	46bd      	mov	sp, r7
 8022664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022668:	4770      	bx	lr

0802266a <lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_ff(void * dst, size_t len)
{
 802266a:	b480      	push	{r7}
 802266c:	b087      	sub	sp, #28
 802266e:	af00      	add	r7, sp, #0
 8022670:	6078      	str	r0, [r7, #4]
 8022672:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8022678:	697b      	ldr	r3, [r7, #20]
 802267a:	f003 0303 	and.w	r3, r3, #3
 802267e:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 8022680:	693b      	ldr	r3, [r7, #16]
 8022682:	2b00      	cmp	r3, #0
 8022684:	d016      	beq.n	80226b4 <lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 8022686:	693b      	ldr	r3, [r7, #16]
 8022688:	f1c3 0304 	rsb	r3, r3, #4
 802268c:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802268e:	e00b      	b.n	80226a8 <lv_memset_ff+0x3e>
            SET8(0xFF);
 8022690:	697b      	ldr	r3, [r7, #20]
 8022692:	22ff      	movs	r2, #255	; 0xff
 8022694:	701a      	strb	r2, [r3, #0]
 8022696:	697b      	ldr	r3, [r7, #20]
 8022698:	3301      	adds	r3, #1
 802269a:	617b      	str	r3, [r7, #20]
            len--;
 802269c:	683b      	ldr	r3, [r7, #0]
 802269e:	3b01      	subs	r3, #1
 80226a0:	603b      	str	r3, [r7, #0]
            d_align--;
 80226a2:	693b      	ldr	r3, [r7, #16]
 80226a4:	3b01      	subs	r3, #1
 80226a6:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 80226a8:	693b      	ldr	r3, [r7, #16]
 80226aa:	2b00      	cmp	r3, #0
 80226ac:	d002      	beq.n	80226b4 <lv_memset_ff+0x4a>
 80226ae:	683b      	ldr	r3, [r7, #0]
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d1ed      	bne.n	8022690 <lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80226b4:	697b      	ldr	r3, [r7, #20]
 80226b6:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 80226b8:	e03a      	b.n	8022730 <lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 80226ba:	68fb      	ldr	r3, [r7, #12]
 80226bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80226c0:	601a      	str	r2, [r3, #0]
 80226c2:	68fb      	ldr	r3, [r7, #12]
 80226c4:	3304      	adds	r3, #4
 80226c6:	60fb      	str	r3, [r7, #12]
 80226c8:	68fb      	ldr	r3, [r7, #12]
 80226ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80226ce:	601a      	str	r2, [r3, #0]
 80226d0:	68fb      	ldr	r3, [r7, #12]
 80226d2:	3304      	adds	r3, #4
 80226d4:	60fb      	str	r3, [r7, #12]
 80226d6:	68fb      	ldr	r3, [r7, #12]
 80226d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80226dc:	601a      	str	r2, [r3, #0]
 80226de:	68fb      	ldr	r3, [r7, #12]
 80226e0:	3304      	adds	r3, #4
 80226e2:	60fb      	str	r3, [r7, #12]
 80226e4:	68fb      	ldr	r3, [r7, #12]
 80226e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80226ea:	601a      	str	r2, [r3, #0]
 80226ec:	68fb      	ldr	r3, [r7, #12]
 80226ee:	3304      	adds	r3, #4
 80226f0:	60fb      	str	r3, [r7, #12]
 80226f2:	68fb      	ldr	r3, [r7, #12]
 80226f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80226f8:	601a      	str	r2, [r3, #0]
 80226fa:	68fb      	ldr	r3, [r7, #12]
 80226fc:	3304      	adds	r3, #4
 80226fe:	60fb      	str	r3, [r7, #12]
 8022700:	68fb      	ldr	r3, [r7, #12]
 8022702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022706:	601a      	str	r2, [r3, #0]
 8022708:	68fb      	ldr	r3, [r7, #12]
 802270a:	3304      	adds	r3, #4
 802270c:	60fb      	str	r3, [r7, #12]
 802270e:	68fb      	ldr	r3, [r7, #12]
 8022710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022714:	601a      	str	r2, [r3, #0]
 8022716:	68fb      	ldr	r3, [r7, #12]
 8022718:	3304      	adds	r3, #4
 802271a:	60fb      	str	r3, [r7, #12]
 802271c:	68fb      	ldr	r3, [r7, #12]
 802271e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022722:	601a      	str	r2, [r3, #0]
 8022724:	68fb      	ldr	r3, [r7, #12]
 8022726:	3304      	adds	r3, #4
 8022728:	60fb      	str	r3, [r7, #12]
        len -= 32;
 802272a:	683b      	ldr	r3, [r7, #0]
 802272c:	3b20      	subs	r3, #32
 802272e:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 8022730:	683b      	ldr	r3, [r7, #0]
 8022732:	2b20      	cmp	r3, #32
 8022734:	d8c1      	bhi.n	80226ba <lv_memset_ff+0x50>
    }

    while(len > 4) {
 8022736:	e009      	b.n	802274c <lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 8022738:	68fb      	ldr	r3, [r7, #12]
 802273a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802273e:	601a      	str	r2, [r3, #0]
 8022740:	68fb      	ldr	r3, [r7, #12]
 8022742:	3304      	adds	r3, #4
 8022744:	60fb      	str	r3, [r7, #12]
        len -= 4;
 8022746:	683b      	ldr	r3, [r7, #0]
 8022748:	3b04      	subs	r3, #4
 802274a:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 802274c:	683b      	ldr	r3, [r7, #0]
 802274e:	2b04      	cmp	r3, #4
 8022750:	d8f2      	bhi.n	8022738 <lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 8022752:	68fb      	ldr	r3, [r7, #12]
 8022754:	617b      	str	r3, [r7, #20]
    while(len) {
 8022756:	e008      	b.n	802276a <lv_memset_ff+0x100>
        SET8(0xFF);
 8022758:	697b      	ldr	r3, [r7, #20]
 802275a:	22ff      	movs	r2, #255	; 0xff
 802275c:	701a      	strb	r2, [r3, #0]
 802275e:	697b      	ldr	r3, [r7, #20]
 8022760:	3301      	adds	r3, #1
 8022762:	617b      	str	r3, [r7, #20]
        len--;
 8022764:	683b      	ldr	r3, [r7, #0]
 8022766:	3b01      	subs	r3, #1
 8022768:	603b      	str	r3, [r7, #0]
    while(len) {
 802276a:	683b      	ldr	r3, [r7, #0]
 802276c:	2b00      	cmp	r3, #0
 802276e:	d1f3      	bne.n	8022758 <lv_memset_ff+0xee>
    }
}
 8022770:	bf00      	nop
 8022772:	bf00      	nop
 8022774:	371c      	adds	r7, #28
 8022776:	46bd      	mov	sp, r7
 8022778:	f85d 7b04 	ldr.w	r7, [sp], #4
 802277c:	4770      	bx	lr

0802277e <lv_color_make>:
{
 802277e:	b480      	push	{r7}
 8022780:	b083      	sub	sp, #12
 8022782:	af00      	add	r7, sp, #0
 8022784:	4603      	mov	r3, r0
 8022786:	71fb      	strb	r3, [r7, #7]
 8022788:	460b      	mov	r3, r1
 802278a:	71bb      	strb	r3, [r7, #6]
 802278c:	4613      	mov	r3, r2
 802278e:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8022790:	797b      	ldrb	r3, [r7, #5]
 8022792:	09db      	lsrs	r3, r3, #7
 8022794:	b2da      	uxtb	r2, r3
 8022796:	79bb      	ldrb	r3, [r7, #6]
 8022798:	09db      	lsrs	r3, r3, #7
 802279a:	b2db      	uxtb	r3, r3
 802279c:	4313      	orrs	r3, r2
 802279e:	b2da      	uxtb	r2, r3
 80227a0:	79fb      	ldrb	r3, [r7, #7]
 80227a2:	09db      	lsrs	r3, r3, #7
 80227a4:	b2db      	uxtb	r3, r3
 80227a6:	4313      	orrs	r3, r2
 80227a8:	b2db      	uxtb	r3, r3
}
 80227aa:	4618      	mov	r0, r3
 80227ac:	370c      	adds	r7, #12
 80227ae:	46bd      	mov	sp, r7
 80227b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227b4:	4770      	bx	lr

080227b6 <lv_color_white>:
{
 80227b6:	b580      	push	{r7, lr}
 80227b8:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 80227ba:	22ff      	movs	r2, #255	; 0xff
 80227bc:	21ff      	movs	r1, #255	; 0xff
 80227be:	20ff      	movs	r0, #255	; 0xff
 80227c0:	f7ff ffdd 	bl	802277e <lv_color_make>
 80227c4:	4603      	mov	r3, r0
}
 80227c6:	4618      	mov	r0, r3
 80227c8:	bd80      	pop	{r7, pc}

080227ca <lv_color_black>:
{
 80227ca:	b580      	push	{r7, lr}
 80227cc:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80227ce:	2200      	movs	r2, #0
 80227d0:	2100      	movs	r1, #0
 80227d2:	2000      	movs	r0, #0
 80227d4:	f7ff ffd3 	bl	802277e <lv_color_make>
 80227d8:	4603      	mov	r3, r0
}
 80227da:	4618      	mov	r0, r3
 80227dc:	bd80      	pop	{r7, pc}

080227de <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 80227de:	b580      	push	{r7, lr}
 80227e0:	b08c      	sub	sp, #48	; 0x30
 80227e2:	af00      	add	r7, sp, #0
 80227e4:	60f8      	str	r0, [r7, #12]
 80227e6:	460b      	mov	r3, r1
 80227e8:	607a      	str	r2, [r7, #4]
 80227ea:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80227ec:	68fb      	ldr	r3, [r7, #12]
 80227ee:	891b      	ldrh	r3, [r3, #8]
 80227f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80227f4:	4293      	cmp	r3, r2
 80227f6:	d137      	bne.n	8022868 <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80227f8:	2300      	movs	r3, #0
 80227fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80227fc:	e02c      	b.n	8022858 <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 80227fe:	68fb      	ldr	r3, [r7, #12]
 8022800:	685a      	ldr	r2, [r3, #4]
 8022802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022804:	00db      	lsls	r3, r3, #3
 8022806:	4413      	add	r3, r2
 8022808:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 802280a:	697b      	ldr	r3, [r7, #20]
 802280c:	881b      	ldrh	r3, [r3, #0]
 802280e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022812:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8022814:	8a7a      	ldrh	r2, [r7, #18]
 8022816:	897b      	ldrh	r3, [r7, #10]
 8022818:	429a      	cmp	r2, r3
 802281a:	d11a      	bne.n	8022852 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 802281c:	697b      	ldr	r3, [r7, #20]
 802281e:	881b      	ldrh	r3, [r3, #0]
 8022820:	b21b      	sxth	r3, r3
 8022822:	2b00      	cmp	r3, #0
 8022824:	da01      	bge.n	802282a <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 8022826:	2302      	movs	r3, #2
 8022828:	e098      	b.n	802295c <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 802282a:	697b      	ldr	r3, [r7, #20]
 802282c:	881b      	ldrh	r3, [r3, #0]
 802282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022832:	2b00      	cmp	r3, #0
 8022834:	d007      	beq.n	8022846 <lv_style_get_prop_inlined+0x68>
 8022836:	8a7b      	ldrh	r3, [r7, #18]
 8022838:	4618      	mov	r0, r3
 802283a:	f000 f9cd 	bl	8022bd8 <lv_style_prop_get_default>
 802283e:	4602      	mov	r2, r0
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	601a      	str	r2, [r3, #0]
 8022844:	e003      	b.n	802284e <lv_style_get_prop_inlined+0x70>
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	697a      	ldr	r2, [r7, #20]
 802284a:	6852      	ldr	r2, [r2, #4]
 802284c:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 802284e:	2301      	movs	r3, #1
 8022850:	e084      	b.n	802295c <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8022852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022854:	3301      	adds	r3, #1
 8022856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022858:	68fb      	ldr	r3, [r7, #12]
 802285a:	7adb      	ldrb	r3, [r3, #11]
 802285c:	461a      	mov	r2, r3
 802285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022860:	4293      	cmp	r3, r2
 8022862:	d3cc      	bcc.n	80227fe <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 8022864:	2300      	movs	r3, #0
 8022866:	e079      	b.n	802295c <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8022868:	68fb      	ldr	r3, [r7, #12]
 802286a:	7adb      	ldrb	r3, [r3, #11]
 802286c:	2b00      	cmp	r3, #0
 802286e:	d101      	bne.n	8022874 <lv_style_get_prop_inlined+0x96>
 8022870:	2300      	movs	r3, #0
 8022872:	e073      	b.n	802295c <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 8022874:	68fb      	ldr	r3, [r7, #12]
 8022876:	7adb      	ldrb	r3, [r3, #11]
 8022878:	2b01      	cmp	r3, #1
 802287a:	d948      	bls.n	802290e <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802287c:	68fb      	ldr	r3, [r7, #12]
 802287e:	685a      	ldr	r2, [r3, #4]
 8022880:	68fb      	ldr	r3, [r7, #12]
 8022882:	7adb      	ldrb	r3, [r3, #11]
 8022884:	009b      	lsls	r3, r3, #2
 8022886:	4413      	add	r3, r2
 8022888:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 802288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802288c:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 802288e:	2300      	movs	r3, #0
 8022890:	62bb      	str	r3, [r7, #40]	; 0x28
 8022892:	e035      	b.n	8022900 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8022894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022896:	005b      	lsls	r3, r3, #1
 8022898:	6a3a      	ldr	r2, [r7, #32]
 802289a:	4413      	add	r3, r2
 802289c:	881b      	ldrh	r3, [r3, #0]
 802289e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80228a2:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 80228a4:	8bfa      	ldrh	r2, [r7, #30]
 80228a6:	897b      	ldrh	r3, [r7, #10]
 80228a8:	429a      	cmp	r2, r3
 80228aa:	d126      	bne.n	80228fa <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 80228ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228ae:	005b      	lsls	r3, r3, #1
 80228b0:	6a3a      	ldr	r2, [r7, #32]
 80228b2:	4413      	add	r3, r2
 80228b4:	881b      	ldrh	r3, [r3, #0]
 80228b6:	b21b      	sxth	r3, r3
 80228b8:	2b00      	cmp	r3, #0
 80228ba:	da01      	bge.n	80228c0 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 80228bc:	2302      	movs	r3, #2
 80228be:	e04d      	b.n	802295c <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 80228c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228c2:	005b      	lsls	r3, r3, #1
 80228c4:	6a3a      	ldr	r2, [r7, #32]
 80228c6:	4413      	add	r3, r2
 80228c8:	881b      	ldrh	r3, [r3, #0]
 80228ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d007      	beq.n	80228e2 <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 80228d2:	8bfb      	ldrh	r3, [r7, #30]
 80228d4:	4618      	mov	r0, r3
 80228d6:	f000 f97f 	bl	8022bd8 <lv_style_prop_get_default>
 80228da:	4602      	mov	r2, r0
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	601a      	str	r2, [r3, #0]
 80228e0:	e009      	b.n	80228f6 <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 80228e2:	68fb      	ldr	r3, [r7, #12]
 80228e4:	685b      	ldr	r3, [r3, #4]
 80228e6:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 80228e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228ea:	009b      	lsls	r3, r3, #2
 80228ec:	69ba      	ldr	r2, [r7, #24]
 80228ee:	441a      	add	r2, r3
 80228f0:	687b      	ldr	r3, [r7, #4]
 80228f2:	6812      	ldr	r2, [r2, #0]
 80228f4:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 80228f6:	2301      	movs	r3, #1
 80228f8:	e030      	b.n	802295c <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 80228fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228fc:	3301      	adds	r3, #1
 80228fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8022900:	68fb      	ldr	r3, [r7, #12]
 8022902:	7adb      	ldrb	r3, [r3, #11]
 8022904:	461a      	mov	r2, r3
 8022906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022908:	4293      	cmp	r3, r2
 802290a:	d3c3      	bcc.n	8022894 <lv_style_get_prop_inlined+0xb6>
 802290c:	e025      	b.n	802295a <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 802290e:	68fb      	ldr	r3, [r7, #12]
 8022910:	891b      	ldrh	r3, [r3, #8]
 8022912:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022916:	897b      	ldrh	r3, [r7, #10]
 8022918:	429a      	cmp	r2, r3
 802291a:	d11e      	bne.n	802295a <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 802291c:	68fb      	ldr	r3, [r7, #12]
 802291e:	891b      	ldrh	r3, [r3, #8]
 8022920:	b21b      	sxth	r3, r3
 8022922:	2b00      	cmp	r3, #0
 8022924:	da01      	bge.n	802292a <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 8022926:	2302      	movs	r3, #2
 8022928:	e018      	b.n	802295c <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	891b      	ldrh	r3, [r3, #8]
 802292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022932:	2b00      	cmp	r3, #0
 8022934:	d00b      	beq.n	802294e <lv_style_get_prop_inlined+0x170>
 8022936:	68fb      	ldr	r3, [r7, #12]
 8022938:	891b      	ldrh	r3, [r3, #8]
 802293a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802293e:	b29b      	uxth	r3, r3
 8022940:	4618      	mov	r0, r3
 8022942:	f000 f949 	bl	8022bd8 <lv_style_prop_get_default>
 8022946:	4602      	mov	r2, r0
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	601a      	str	r2, [r3, #0]
 802294c:	e003      	b.n	8022956 <lv_style_get_prop_inlined+0x178>
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	68fa      	ldr	r2, [r7, #12]
 8022952:	6852      	ldr	r2, [r2, #4]
 8022954:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 8022956:	2301      	movs	r3, #1
 8022958:	e000      	b.n	802295c <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 802295a:	2300      	movs	r3, #0
}
 802295c:	4618      	mov	r0, r3
 802295e:	3730      	adds	r7, #48	; 0x30
 8022960:	46bd      	mov	sp, r7
 8022962:	bd80      	pop	{r7, pc}

08022964 <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
 8022964:	b580      	push	{r7, lr}
 8022966:	b082      	sub	sp, #8
 8022968:	af00      	add	r7, sp, #0
 802296a:	6078      	str	r0, [r7, #4]
#if LV_USE_ASSERT_STYLE
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	681b      	ldr	r3, [r3, #0]
 8022970:	4a06      	ldr	r2, [pc, #24]	; (802298c <lv_style_init+0x28>)
 8022972:	4293      	cmp	r3, r2
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8022974:	210c      	movs	r1, #12
 8022976:	6878      	ldr	r0, [r7, #4]
 8022978:	f7ff fdf6 	bl	8022568 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	4a03      	ldr	r2, [pc, #12]	; (802298c <lv_style_init+0x28>)
 8022980:	601a      	str	r2, [r3, #0]
#endif
}
 8022982:	bf00      	nop
 8022984:	3708      	adds	r7, #8
 8022986:	46bd      	mov	sp, r7
 8022988:	bd80      	pop	{r7, pc}
 802298a:	bf00      	nop
 802298c:	aabbccdd 	.word	0xaabbccdd

08022990 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
 8022990:	b580      	push	{r7, lr}
 8022992:	b082      	sub	sp, #8
 8022994:	af00      	add	r7, sp, #0
 8022996:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	2b00      	cmp	r3, #0
 802299c:	d100      	bne.n	80229a0 <lv_style_reset+0x10>
 802299e:	e7fe      	b.n	802299e <lv_style_reset+0xe>
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	681b      	ldr	r3, [r3, #0]
 80229a4:	4a0f      	ldr	r2, [pc, #60]	; (80229e4 <lv_style_reset+0x54>)
 80229a6:	4293      	cmp	r3, r2
 80229a8:	d000      	beq.n	80229ac <lv_style_reset+0x1c>
 80229aa:	e7fe      	b.n	80229aa <lv_style_reset+0x1a>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	891b      	ldrh	r3, [r3, #8]
 80229b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80229b4:	4293      	cmp	r3, r2
 80229b6:	d010      	beq.n	80229da <lv_style_reset+0x4a>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	7adb      	ldrb	r3, [r3, #11]
 80229bc:	2b01      	cmp	r3, #1
 80229be:	d904      	bls.n	80229ca <lv_style_reset+0x3a>
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	685b      	ldr	r3, [r3, #4]
 80229c4:	4618      	mov	r0, r3
 80229c6:	f7ff f9cb 	bl	8021d60 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 80229ca:	210c      	movs	r1, #12
 80229cc:	6878      	ldr	r0, [r7, #4]
 80229ce:	f7ff fdcb 	bl	8022568 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 80229d2:	687b      	ldr	r3, [r7, #4]
 80229d4:	4a03      	ldr	r2, [pc, #12]	; (80229e4 <lv_style_reset+0x54>)
 80229d6:	601a      	str	r2, [r3, #0]
 80229d8:	e000      	b.n	80229dc <lv_style_reset+0x4c>
        return;
 80229da:	bf00      	nop
#endif
}
 80229dc:	3708      	adds	r7, #8
 80229de:	46bd      	mov	sp, r7
 80229e0:	bd80      	pop	{r7, pc}
 80229e2:	bf00      	nop
 80229e4:	aabbccdd 	.word	0xaabbccdd

080229e8 <lv_style_remove_prop>:
{
    return last_custom_prop_id - _LV_STYLE_LAST_BUILT_IN_PROP;
}

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 80229e8:	b580      	push	{r7, lr}
 80229ea:	b08c      	sub	sp, #48	; 0x30
 80229ec:	af00      	add	r7, sp, #0
 80229ee:	6078      	str	r0, [r7, #4]
 80229f0:	460b      	mov	r3, r1
 80229f2:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	2b00      	cmp	r3, #0
 80229f8:	d100      	bne.n	80229fc <lv_style_remove_prop+0x14>
 80229fa:	e7fe      	b.n	80229fa <lv_style_remove_prop+0x12>
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	681b      	ldr	r3, [r3, #0]
 8022a00:	4a61      	ldr	r2, [pc, #388]	; (8022b88 <lv_style_remove_prop+0x1a0>)
 8022a02:	4293      	cmp	r3, r2
 8022a04:	d000      	beq.n	8022a08 <lv_style_remove_prop+0x20>
 8022a06:	e7fe      	b.n	8022a06 <lv_style_remove_prop+0x1e>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	891b      	ldrh	r3, [r3, #8]
 8022a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022a10:	4293      	cmp	r3, r2
 8022a12:	d101      	bne.n	8022a18 <lv_style_remove_prop+0x30>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
 8022a14:	2300      	movs	r3, #0
 8022a16:	e0b2      	b.n	8022b7e <lv_style_remove_prop+0x196>
    }

    if(style->prop_cnt == 0)  return false;
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	7adb      	ldrb	r3, [r3, #11]
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	d101      	bne.n	8022a24 <lv_style_remove_prop+0x3c>
 8022a20:	2300      	movs	r3, #0
 8022a22:	e0ac      	b.n	8022b7e <lv_style_remove_prop+0x196>

    if(style->prop_cnt == 1) {
 8022a24:	687b      	ldr	r3, [r7, #4]
 8022a26:	7adb      	ldrb	r3, [r3, #11]
 8022a28:	2b01      	cmp	r3, #1
 8022a2a:	d110      	bne.n	8022a4e <lv_style_remove_prop+0x66>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8022a2c:	687b      	ldr	r3, [r7, #4]
 8022a2e:	891b      	ldrh	r3, [r3, #8]
 8022a30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022a34:	887b      	ldrh	r3, [r7, #2]
 8022a36:	429a      	cmp	r2, r3
 8022a38:	d107      	bne.n	8022a4a <lv_style_remove_prop+0x62>
            style->prop1 = LV_STYLE_PROP_INV;
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	2200      	movs	r2, #0
 8022a3e:	811a      	strh	r2, [r3, #8]
            style->prop_cnt = 0;
 8022a40:	687b      	ldr	r3, [r7, #4]
 8022a42:	2200      	movs	r2, #0
 8022a44:	72da      	strb	r2, [r3, #11]
            return true;
 8022a46:	2301      	movs	r3, #1
 8022a48:	e099      	b.n	8022b7e <lv_style_remove_prop+0x196>
        }
        return false;
 8022a4a:	2300      	movs	r3, #0
 8022a4c:	e097      	b.n	8022b7e <lv_style_remove_prop+0x196>
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	685a      	ldr	r2, [r3, #4]
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	7adb      	ldrb	r3, [r3, #11]
 8022a56:	009b      	lsls	r3, r3, #2
 8022a58:	4413      	add	r3, r2
 8022a5a:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t * old_props = (uint16_t *)tmp;
 8022a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a5e:	623b      	str	r3, [r7, #32]
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
 8022a60:	2300      	movs	r3, #0
 8022a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022a64:	e083      	b.n	8022b6e <lv_style_remove_prop+0x186>
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8022a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a68:	005b      	lsls	r3, r3, #1
 8022a6a:	6a3a      	ldr	r2, [r7, #32]
 8022a6c:	4413      	add	r3, r2
 8022a6e:	881b      	ldrh	r3, [r3, #0]
 8022a70:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022a74:	887b      	ldrh	r3, [r7, #2]
 8022a76:	429a      	cmp	r2, r3
 8022a78:	d176      	bne.n	8022b68 <lv_style_remove_prop+0x180>
            lv_style_value_t * old_values = (lv_style_value_t *)style->v_p.values_and_props;
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	685b      	ldr	r3, [r3, #4]
 8022a7e:	61fb      	str	r3, [r7, #28]

            if(style->prop_cnt == 2) {
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	7adb      	ldrb	r3, [r3, #11]
 8022a84:	2b02      	cmp	r3, #2
 8022a86:	d119      	bne.n	8022abc <lv_style_remove_prop+0xd4>
                style->prop_cnt = 1;
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	2201      	movs	r2, #1
 8022a8c:	72da      	strb	r2, [r3, #11]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8022a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	d102      	bne.n	8022a9a <lv_style_remove_prop+0xb2>
 8022a94:	6a3b      	ldr	r3, [r7, #32]
 8022a96:	885b      	ldrh	r3, [r3, #2]
 8022a98:	e001      	b.n	8022a9e <lv_style_remove_prop+0xb6>
 8022a9a:	6a3b      	ldr	r3, [r7, #32]
 8022a9c:	881b      	ldrh	r3, [r3, #0]
 8022a9e:	687a      	ldr	r2, [r7, #4]
 8022aa0:	8113      	strh	r3, [r2, #8]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8022aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d104      	bne.n	8022ab2 <lv_style_remove_prop+0xca>
 8022aa8:	687b      	ldr	r3, [r7, #4]
 8022aaa:	69fa      	ldr	r2, [r7, #28]
 8022aac:	6852      	ldr	r2, [r2, #4]
 8022aae:	605a      	str	r2, [r3, #4]
 8022ab0:	e055      	b.n	8022b5e <lv_style_remove_prop+0x176>
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	69fa      	ldr	r2, [r7, #28]
 8022ab6:	6812      	ldr	r2, [r2, #0]
 8022ab8:	605a      	str	r2, [r3, #4]
 8022aba:	e050      	b.n	8022b5e <lv_style_remove_prop+0x176>
            }
            else {
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	7adb      	ldrb	r3, [r3, #11]
 8022ac0:	3b01      	subs	r3, #1
 8022ac2:	461a      	mov	r2, r3
 8022ac4:	4613      	mov	r3, r2
 8022ac6:	005b      	lsls	r3, r3, #1
 8022ac8:	4413      	add	r3, r2
 8022aca:	005b      	lsls	r3, r3, #1
 8022acc:	61bb      	str	r3, [r7, #24]
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8022ace:	69b8      	ldr	r0, [r7, #24]
 8022ad0:	f7ff f916 	bl	8021d00 <lv_mem_alloc>
 8022ad4:	6178      	str	r0, [r7, #20]
                if(new_values_and_props == NULL) return false;
 8022ad6:	697b      	ldr	r3, [r7, #20]
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	d101      	bne.n	8022ae0 <lv_style_remove_prop+0xf8>
 8022adc:	2300      	movs	r3, #0
 8022ade:	e04e      	b.n	8022b7e <lv_style_remove_prop+0x196>
                style->v_p.values_and_props = new_values_and_props;
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	697a      	ldr	r2, [r7, #20]
 8022ae4:	605a      	str	r2, [r3, #4]
                style->prop_cnt--;
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	7adb      	ldrb	r3, [r3, #11]
 8022aea:	3b01      	subs	r3, #1
 8022aec:	b2da      	uxtb	r2, r3
 8022aee:	687b      	ldr	r3, [r7, #4]
 8022af0:	72da      	strb	r2, [r3, #11]

                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	7adb      	ldrb	r3, [r3, #11]
 8022af6:	009b      	lsls	r3, r3, #2
 8022af8:	697a      	ldr	r2, [r7, #20]
 8022afa:	4413      	add	r3, r2
 8022afc:	627b      	str	r3, [r7, #36]	; 0x24
                uint16_t * new_props = (uint16_t *)tmp;
 8022afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b00:	613b      	str	r3, [r7, #16]
                lv_style_value_t * new_values = (lv_style_value_t *)new_values_and_props;
 8022b02:	697b      	ldr	r3, [r7, #20]
 8022b04:	60fb      	str	r3, [r7, #12]

                uint32_t j;
                for(i = j = 0; j <= style->prop_cnt;
 8022b06:	2300      	movs	r3, #0
 8022b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8022b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022b0e:	e020      	b.n	8022b52 <lv_style_remove_prop+0x16a>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
                    if(old_props[j] != prop) {
 8022b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b12:	005b      	lsls	r3, r3, #1
 8022b14:	6a3a      	ldr	r2, [r7, #32]
 8022b16:	4413      	add	r3, r2
 8022b18:	881b      	ldrh	r3, [r3, #0]
 8022b1a:	887a      	ldrh	r2, [r7, #2]
 8022b1c:	429a      	cmp	r2, r3
 8022b1e:	d015      	beq.n	8022b4c <lv_style_remove_prop+0x164>
                        new_values[i] = old_values[j];
 8022b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b22:	009b      	lsls	r3, r3, #2
 8022b24:	69fa      	ldr	r2, [r7, #28]
 8022b26:	441a      	add	r2, r3
 8022b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b2a:	009b      	lsls	r3, r3, #2
 8022b2c:	68f9      	ldr	r1, [r7, #12]
 8022b2e:	440b      	add	r3, r1
 8022b30:	6812      	ldr	r2, [r2, #0]
 8022b32:	601a      	str	r2, [r3, #0]
                        new_props[i++] = old_props[j];
 8022b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b36:	005b      	lsls	r3, r3, #1
 8022b38:	6a3a      	ldr	r2, [r7, #32]
 8022b3a:	441a      	add	r2, r3
 8022b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b3e:	1c59      	adds	r1, r3, #1
 8022b40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8022b42:	005b      	lsls	r3, r3, #1
 8022b44:	6939      	ldr	r1, [r7, #16]
 8022b46:	440b      	add	r3, r1
 8022b48:	8812      	ldrh	r2, [r2, #0]
 8022b4a:	801a      	strh	r2, [r3, #0]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8022b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b4e:	3301      	adds	r3, #1
 8022b50:	62bb      	str	r3, [r7, #40]	; 0x28
                for(i = j = 0; j <= style->prop_cnt;
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	7adb      	ldrb	r3, [r3, #11]
 8022b56:	461a      	mov	r2, r3
 8022b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b5a:	4293      	cmp	r3, r2
 8022b5c:	d9d8      	bls.n	8022b10 <lv_style_remove_prop+0x128>
                    }
                }
            }

            lv_mem_free(old_values);
 8022b5e:	69f8      	ldr	r0, [r7, #28]
 8022b60:	f7ff f8fe 	bl	8021d60 <lv_mem_free>
            return true;
 8022b64:	2301      	movs	r3, #1
 8022b66:	e00a      	b.n	8022b7e <lv_style_remove_prop+0x196>
    for(i = 0; i < style->prop_cnt; i++) {
 8022b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b6a:	3301      	adds	r3, #1
 8022b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022b6e:	687b      	ldr	r3, [r7, #4]
 8022b70:	7adb      	ldrb	r3, [r3, #11]
 8022b72:	461a      	mov	r2, r3
 8022b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b76:	4293      	cmp	r3, r2
 8022b78:	f4ff af75 	bcc.w	8022a66 <lv_style_remove_prop+0x7e>
        }
    }

    return false;
 8022b7c:	2300      	movs	r3, #0
}
 8022b7e:	4618      	mov	r0, r3
 8022b80:	3730      	adds	r7, #48	; 0x30
 8022b82:	46bd      	mov	sp, r7
 8022b84:	bd80      	pop	{r7, pc}
 8022b86:	bf00      	nop
 8022b88:	aabbccdd 	.word	0xaabbccdd

08022b8c <lv_style_set_prop>:

void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
{
 8022b8c:	b580      	push	{r7, lr}
 8022b8e:	b084      	sub	sp, #16
 8022b90:	af00      	add	r7, sp, #0
 8022b92:	60f8      	str	r0, [r7, #12]
 8022b94:	460b      	mov	r3, r1
 8022b96:	607a      	str	r2, [r7, #4]
 8022b98:	817b      	strh	r3, [r7, #10]
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 8022b9a:	8979      	ldrh	r1, [r7, #10]
 8022b9c:	4b04      	ldr	r3, [pc, #16]	; (8022bb0 <lv_style_set_prop+0x24>)
 8022b9e:	687a      	ldr	r2, [r7, #4]
 8022ba0:	68f8      	ldr	r0, [r7, #12]
 8022ba2:	f000 f9a5 	bl	8022ef0 <lv_style_set_prop_internal>
}
 8022ba6:	bf00      	nop
 8022ba8:	3710      	adds	r7, #16
 8022baa:	46bd      	mov	sp, r7
 8022bac:	bd80      	pop	{r7, pc}
 8022bae:	bf00      	nop
 8022bb0:	08022ec9 	.word	0x08022ec9

08022bb4 <lv_style_get_prop>:
{
    lv_style_set_prop_internal(style, prop | meta, null_style_value, lv_style_set_prop_meta_helper);
}

lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 8022bb4:	b580      	push	{r7, lr}
 8022bb6:	b084      	sub	sp, #16
 8022bb8:	af00      	add	r7, sp, #0
 8022bba:	60f8      	str	r0, [r7, #12]
 8022bbc:	460b      	mov	r3, r1
 8022bbe:	607a      	str	r2, [r7, #4]
 8022bc0:	817b      	strh	r3, [r7, #10]
    return lv_style_get_prop_inlined(style, prop, value);
 8022bc2:	897b      	ldrh	r3, [r7, #10]
 8022bc4:	687a      	ldr	r2, [r7, #4]
 8022bc6:	4619      	mov	r1, r3
 8022bc8:	68f8      	ldr	r0, [r7, #12]
 8022bca:	f7ff fe08 	bl	80227de <lv_style_get_prop_inlined>
 8022bce:	4603      	mov	r3, r0
}
 8022bd0:	4618      	mov	r0, r3
 8022bd2:	3710      	adds	r7, #16
 8022bd4:	46bd      	mov	sp, r7
 8022bd6:	bd80      	pop	{r7, pc}

08022bd8 <lv_style_prop_get_default>:
    LV_UNUSED(user_data);
#endif
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
 8022bd8:	b580      	push	{r7, lr}
 8022bda:	b084      	sub	sp, #16
 8022bdc:	af00      	add	r7, sp, #0
 8022bde:	4603      	mov	r3, r0
 8022be0:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value;
    switch(prop) {
 8022be2:	88fb      	ldrh	r3, [r7, #6]
 8022be4:	3b03      	subs	r3, #3
 8022be6:	2b69      	cmp	r3, #105	; 0x69
 8022be8:	f200 80f4 	bhi.w	8022dd4 <lv_style_prop_get_default+0x1fc>
 8022bec:	a201      	add	r2, pc, #4	; (adr r2, 8022bf4 <lv_style_prop_get_default+0x1c>)
 8022bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022bf2:	bf00      	nop
 8022bf4:	08022dcd 	.word	0x08022dcd
 8022bf8:	08022dd5 	.word	0x08022dd5
 8022bfc:	08022dd5 	.word	0x08022dd5
 8022c00:	08022dcd 	.word	0x08022dcd
 8022c04:	08022dd5 	.word	0x08022dd5
 8022c08:	08022dd5 	.word	0x08022dd5
 8022c0c:	08022dd5 	.word	0x08022dd5
 8022c10:	08022dd5 	.word	0x08022dd5
 8022c14:	08022dd5 	.word	0x08022dd5
 8022c18:	08022dd5 	.word	0x08022dd5
 8022c1c:	08022dd5 	.word	0x08022dd5
 8022c20:	08022dd5 	.word	0x08022dd5
 8022c24:	08022dd5 	.word	0x08022dd5
 8022c28:	08022dd5 	.word	0x08022dd5
 8022c2c:	08022dd5 	.word	0x08022dd5
 8022c30:	08022dd5 	.word	0x08022dd5
 8022c34:	08022dd5 	.word	0x08022dd5
 8022c38:	08022dd5 	.word	0x08022dd5
 8022c3c:	08022dd5 	.word	0x08022dd5
 8022c40:	08022dd5 	.word	0x08022dd5
 8022c44:	08022dd5 	.word	0x08022dd5
 8022c48:	08022dd5 	.word	0x08022dd5
 8022c4c:	08022dd5 	.word	0x08022dd5
 8022c50:	08022dd5 	.word	0x08022dd5
 8022c54:	08022dd5 	.word	0x08022dd5
 8022c58:	08022dd5 	.word	0x08022dd5
 8022c5c:	08022dd5 	.word	0x08022dd5
 8022c60:	08022dd5 	.word	0x08022dd5
 8022c64:	08022dd5 	.word	0x08022dd5
 8022c68:	08022da5 	.word	0x08022da5
 8022c6c:	08022dd5 	.word	0x08022dd5
 8022c70:	08022dad 	.word	0x08022dad
 8022c74:	08022dd5 	.word	0x08022dd5
 8022c78:	08022dd5 	.word	0x08022dd5
 8022c7c:	08022dbb 	.word	0x08022dbb
 8022c80:	08022dd5 	.word	0x08022dd5
 8022c84:	08022dd5 	.word	0x08022dd5
 8022c88:	08022dd5 	.word	0x08022dd5
 8022c8c:	08022db5 	.word	0x08022db5
 8022c90:	08022dd5 	.word	0x08022dd5
 8022c94:	08022dd5 	.word	0x08022dd5
 8022c98:	08022dd5 	.word	0x08022dd5
 8022c9c:	08022dd5 	.word	0x08022dd5
 8022ca0:	08022dd5 	.word	0x08022dd5
 8022ca4:	08022dd5 	.word	0x08022dd5
 8022ca8:	08022dad 	.word	0x08022dad
 8022cac:	08022db5 	.word	0x08022db5
 8022cb0:	08022dd5 	.word	0x08022dd5
 8022cb4:	08022dc1 	.word	0x08022dc1
 8022cb8:	08022dd5 	.word	0x08022dd5
 8022cbc:	08022dd5 	.word	0x08022dd5
 8022cc0:	08022dad 	.word	0x08022dad
 8022cc4:	08022db5 	.word	0x08022db5
 8022cc8:	08022dd5 	.word	0x08022dd5
 8022ccc:	08022dd5 	.word	0x08022dd5
 8022cd0:	08022dd5 	.word	0x08022dd5
 8022cd4:	08022dd5 	.word	0x08022dd5
 8022cd8:	08022dd5 	.word	0x08022dd5
 8022cdc:	08022dd5 	.word	0x08022dd5
 8022ce0:	08022dd5 	.word	0x08022dd5
 8022ce4:	08022dd5 	.word	0x08022dd5
 8022ce8:	08022dd5 	.word	0x08022dd5
 8022cec:	08022dd5 	.word	0x08022dd5
 8022cf0:	08022dd5 	.word	0x08022dd5
 8022cf4:	08022dd5 	.word	0x08022dd5
 8022cf8:	08022dad 	.word	0x08022dad
 8022cfc:	08022db5 	.word	0x08022db5
 8022d00:	08022db5 	.word	0x08022db5
 8022d04:	08022dad 	.word	0x08022dad
 8022d08:	08022dd5 	.word	0x08022dd5
 8022d0c:	08022dd5 	.word	0x08022dd5
 8022d10:	08022dd5 	.word	0x08022dd5
 8022d14:	08022dd5 	.word	0x08022dd5
 8022d18:	08022dd5 	.word	0x08022dd5
 8022d1c:	08022dad 	.word	0x08022dad
 8022d20:	08022db5 	.word	0x08022db5
 8022d24:	08022dd5 	.word	0x08022dd5
 8022d28:	08022dd5 	.word	0x08022dd5
 8022d2c:	08022dd5 	.word	0x08022dd5
 8022d30:	08022dad 	.word	0x08022dad
 8022d34:	08022db5 	.word	0x08022db5
 8022d38:	08022dd5 	.word	0x08022dd5
 8022d3c:	08022dad 	.word	0x08022dad
 8022d40:	08022db5 	.word	0x08022db5
 8022d44:	08022dc7 	.word	0x08022dc7
 8022d48:	08022dd5 	.word	0x08022dd5
 8022d4c:	08022dd5 	.word	0x08022dd5
 8022d50:	08022dd5 	.word	0x08022dd5
 8022d54:	08022dd5 	.word	0x08022dd5
 8022d58:	08022dd5 	.word	0x08022dd5
 8022d5c:	08022dd5 	.word	0x08022dd5
 8022d60:	08022dd5 	.word	0x08022dd5
 8022d64:	08022dd5 	.word	0x08022dd5
 8022d68:	08022db5 	.word	0x08022db5
 8022d6c:	08022dd5 	.word	0x08022dd5
 8022d70:	08022dd5 	.word	0x08022dd5
 8022d74:	08022dd5 	.word	0x08022dd5
 8022d78:	08022dd5 	.word	0x08022dd5
 8022d7c:	08022dd5 	.word	0x08022dd5
 8022d80:	08022dd5 	.word	0x08022dd5
 8022d84:	08022dd5 	.word	0x08022dd5
 8022d88:	08022dd5 	.word	0x08022dd5
 8022d8c:	08022dd5 	.word	0x08022dd5
 8022d90:	08022dd5 	.word	0x08022dd5
 8022d94:	08022dd5 	.word	0x08022dd5
 8022d98:	08022d9d 	.word	0x08022d9d
        case LV_STYLE_TRANSFORM_ZOOM:
            value.num = LV_IMG_ZOOM_NONE;
 8022d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022da0:	60fb      	str	r3, [r7, #12]
            break;
 8022da2:	e01c      	b.n	8022dde <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_COLOR:
            value.color = lv_color_white();
 8022da4:	f7ff fd07 	bl	80227b6 <lv_color_white>
 8022da8:	7338      	strb	r0, [r7, #12]
            break;
 8022daa:	e018      	b.n	8022dde <lv_style_prop_get_default+0x206>
        case LV_STYLE_OUTLINE_COLOR:
        case LV_STYLE_ARC_COLOR:
        case LV_STYLE_LINE_COLOR:
        case LV_STYLE_TEXT_COLOR:
        case LV_STYLE_IMG_RECOLOR:
            value.color = lv_color_black();
 8022dac:	f7ff fd0d 	bl	80227ca <lv_color_black>
 8022db0:	7338      	strb	r0, [r7, #12]
            break;
 8022db2:	e014      	b.n	8022dde <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 8022db4:	23ff      	movs	r3, #255	; 0xff
 8022db6:	60fb      	str	r3, [r7, #12]
            break;
 8022db8:	e011      	b.n	8022dde <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_GRAD_STOP:
            value.num = 255;
 8022dba:	23ff      	movs	r3, #255	; 0xff
 8022dbc:	60fb      	str	r3, [r7, #12]
            break;
 8022dbe:	e00e      	b.n	8022dde <lv_style_prop_get_default+0x206>
        case LV_STYLE_BORDER_SIDE:
            value.num = LV_BORDER_SIDE_FULL;
 8022dc0:	230f      	movs	r3, #15
 8022dc2:	60fb      	str	r3, [r7, #12]
            break;
 8022dc4:	e00b      	b.n	8022dde <lv_style_prop_get_default+0x206>
        case LV_STYLE_TEXT_FONT:
            value.ptr = LV_FONT_DEFAULT;
 8022dc6:	4b08      	ldr	r3, [pc, #32]	; (8022de8 <lv_style_prop_get_default+0x210>)
 8022dc8:	60fb      	str	r3, [r7, #12]
            break;
 8022dca:	e008      	b.n	8022dde <lv_style_prop_get_default+0x206>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
 8022dcc:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8022dd0:	60fb      	str	r3, [r7, #12]
            break;
 8022dd2:	e004      	b.n	8022dde <lv_style_prop_get_default+0x206>
        default:
            value.ptr = NULL;
 8022dd4:	2300      	movs	r3, #0
 8022dd6:	60fb      	str	r3, [r7, #12]
            value.num = 0;
 8022dd8:	2300      	movs	r3, #0
 8022dda:	60fb      	str	r3, [r7, #12]
            break;
 8022ddc:	bf00      	nop
    }

    return value;
 8022dde:	68fb      	ldr	r3, [r7, #12]
}
 8022de0:	4618      	mov	r0, r3
 8022de2:	3710      	adds	r7, #16
 8022de4:	46bd      	mov	sp, r7
 8022de6:	bd80      	pop	{r7, pc}
 8022de8:	08029ddc 	.word	0x08029ddc

08022dec <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
 8022dec:	b480      	push	{r7}
 8022dee:	b083      	sub	sp, #12
 8022df0:	af00      	add	r7, sp, #0
 8022df2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	d100      	bne.n	8022dfc <lv_style_is_empty+0x10>
 8022dfa:	e7fe      	b.n	8022dfa <lv_style_is_empty+0xe>
 8022dfc:	687b      	ldr	r3, [r7, #4]
 8022dfe:	681b      	ldr	r3, [r3, #0]
 8022e00:	4a08      	ldr	r2, [pc, #32]	; (8022e24 <lv_style_is_empty+0x38>)
 8022e02:	4293      	cmp	r3, r2
 8022e04:	d000      	beq.n	8022e08 <lv_style_is_empty+0x1c>
 8022e06:	e7fe      	b.n	8022e06 <lv_style_is_empty+0x1a>

    return style->prop_cnt == 0 ? true : false;
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	7adb      	ldrb	r3, [r3, #11]
 8022e0c:	2b00      	cmp	r3, #0
 8022e0e:	bf0c      	ite	eq
 8022e10:	2301      	moveq	r3, #1
 8022e12:	2300      	movne	r3, #0
 8022e14:	b2db      	uxtb	r3, r3
}
 8022e16:	4618      	mov	r0, r3
 8022e18:	370c      	adds	r7, #12
 8022e1a:	46bd      	mov	sp, r7
 8022e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e20:	4770      	bx	lr
 8022e22:	bf00      	nop
 8022e24:	aabbccdd 	.word	0xaabbccdd

08022e28 <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
 8022e28:	b480      	push	{r7}
 8022e2a:	b085      	sub	sp, #20
 8022e2c:	af00      	add	r7, sp, #0
 8022e2e:	4603      	mov	r3, r0
 8022e30:	80fb      	strh	r3, [r7, #6]
    uint16_t group = (prop & 0x1FF) >> 4;
 8022e32:	88fb      	ldrh	r3, [r7, #6]
 8022e34:	111b      	asrs	r3, r3, #4
 8022e36:	b29b      	uxth	r3, r3
 8022e38:	f003 031f 	and.w	r3, r3, #31
 8022e3c:	81fb      	strh	r3, [r7, #14]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8022e3e:	89fb      	ldrh	r3, [r7, #14]
 8022e40:	2b07      	cmp	r3, #7
 8022e42:	d901      	bls.n	8022e48 <_lv_style_get_prop_group+0x20>
 8022e44:	2307      	movs	r3, #7
 8022e46:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)group;
 8022e48:	89fb      	ldrh	r3, [r7, #14]
 8022e4a:	b2db      	uxtb	r3, r3
}
 8022e4c:	4618      	mov	r0, r3
 8022e4e:	3714      	adds	r7, #20
 8022e50:	46bd      	mov	sp, r7
 8022e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e56:	4770      	bx	lr

08022e58 <_lv_style_prop_lookup_flags>:

uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop)
{
 8022e58:	b480      	push	{r7}
 8022e5a:	b083      	sub	sp, #12
 8022e5c:	af00      	add	r7, sp, #0
 8022e5e:	4603      	mov	r3, r0
 8022e60:	80fb      	strh	r3, [r7, #6]
    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    extern uint32_t _lv_style_custom_prop_flag_lookup_table_size;
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8022e62:	88fb      	ldrh	r3, [r7, #6]
 8022e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022e68:	4293      	cmp	r3, r2
 8022e6a:	d101      	bne.n	8022e70 <_lv_style_prop_lookup_flags+0x18>
 8022e6c:	231f      	movs	r3, #31
 8022e6e:	e01e      	b.n	8022eae <_lv_style_prop_lookup_flags+0x56>
    if(prop == LV_STYLE_PROP_INV) return 0;
 8022e70:	88fb      	ldrh	r3, [r7, #6]
 8022e72:	2b00      	cmp	r3, #0
 8022e74:	d101      	bne.n	8022e7a <_lv_style_prop_lookup_flags+0x22>
 8022e76:	2300      	movs	r3, #0
 8022e78:	e019      	b.n	8022eae <_lv_style_prop_lookup_flags+0x56>

    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 8022e7a:	88fb      	ldrh	r3, [r7, #6]
 8022e7c:	2b6f      	cmp	r3, #111	; 0x6f
 8022e7e:	d803      	bhi.n	8022e88 <_lv_style_prop_lookup_flags+0x30>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 8022e80:	88fb      	ldrh	r3, [r7, #6]
 8022e82:	4a0e      	ldr	r2, [pc, #56]	; (8022ebc <_lv_style_prop_lookup_flags+0x64>)
 8022e84:	5cd3      	ldrb	r3, [r2, r3]
 8022e86:	e012      	b.n	8022eae <_lv_style_prop_lookup_flags+0x56>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 8022e88:	88fb      	ldrh	r3, [r7, #6]
 8022e8a:	3b70      	subs	r3, #112	; 0x70
 8022e8c:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8022e8e:	4b0c      	ldr	r3, [pc, #48]	; (8022ec0 <_lv_style_prop_lookup_flags+0x68>)
 8022e90:	681b      	ldr	r3, [r3, #0]
 8022e92:	2b00      	cmp	r3, #0
 8022e94:	d00a      	beq.n	8022eac <_lv_style_prop_lookup_flags+0x54>
 8022e96:	88fa      	ldrh	r2, [r7, #6]
 8022e98:	4b0a      	ldr	r3, [pc, #40]	; (8022ec4 <_lv_style_prop_lookup_flags+0x6c>)
 8022e9a:	681b      	ldr	r3, [r3, #0]
 8022e9c:	429a      	cmp	r2, r3
 8022e9e:	d205      	bcs.n	8022eac <_lv_style_prop_lookup_flags+0x54>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 8022ea0:	4b07      	ldr	r3, [pc, #28]	; (8022ec0 <_lv_style_prop_lookup_flags+0x68>)
 8022ea2:	681a      	ldr	r2, [r3, #0]
 8022ea4:	88fb      	ldrh	r3, [r7, #6]
 8022ea6:	4413      	add	r3, r2
 8022ea8:	781b      	ldrb	r3, [r3, #0]
 8022eaa:	e000      	b.n	8022eae <_lv_style_prop_lookup_flags+0x56>
    return 0;
 8022eac:	2300      	movs	r3, #0
}
 8022eae:	4618      	mov	r0, r3
 8022eb0:	370c      	adds	r7, #12
 8022eb2:	46bd      	mov	sp, r7
 8022eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eb8:	4770      	bx	lr
 8022eba:	bf00      	nop
 8022ebc:	08029ec4 	.word	0x08029ec4
 8022ec0:	20000a54 	.word	0x20000a54
 8022ec4:	2000ca64 	.word	0x2000ca64

08022ec8 <lv_style_set_prop_helper>:
 *   STATIC FUNCTIONS
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
 8022ec8:	b480      	push	{r7}
 8022eca:	b085      	sub	sp, #20
 8022ecc:	af00      	add	r7, sp, #0
 8022ece:	60b9      	str	r1, [r7, #8]
 8022ed0:	607a      	str	r2, [r7, #4]
 8022ed2:	603b      	str	r3, [r7, #0]
 8022ed4:	4603      	mov	r3, r0
 8022ed6:	81fb      	strh	r3, [r7, #14]
    *prop_storage = prop;
 8022ed8:	687b      	ldr	r3, [r7, #4]
 8022eda:	89fa      	ldrh	r2, [r7, #14]
 8022edc:	801a      	strh	r2, [r3, #0]
    *value_storage = value;
 8022ede:	683b      	ldr	r3, [r7, #0]
 8022ee0:	68ba      	ldr	r2, [r7, #8]
 8022ee2:	601a      	str	r2, [r3, #0]
}
 8022ee4:	bf00      	nop
 8022ee6:	3714      	adds	r7, #20
 8022ee8:	46bd      	mov	sp, r7
 8022eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eee:	4770      	bx	lr

08022ef0 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 8022ef0:	b590      	push	{r4, r7, lr}
 8022ef2:	b095      	sub	sp, #84	; 0x54
 8022ef4:	af00      	add	r7, sp, #0
 8022ef6:	60f8      	str	r0, [r7, #12]
 8022ef8:	607a      	str	r2, [r7, #4]
 8022efa:	603b      	str	r3, [r7, #0]
 8022efc:	460b      	mov	r3, r1
 8022efe:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);
 8022f00:	68fb      	ldr	r3, [r7, #12]
 8022f02:	2b00      	cmp	r3, #0
 8022f04:	d100      	bne.n	8022f08 <lv_style_set_prop_internal+0x18>
 8022f06:	e7fe      	b.n	8022f06 <lv_style_set_prop_internal+0x16>
 8022f08:	68fb      	ldr	r3, [r7, #12]
 8022f0a:	681b      	ldr	r3, [r3, #0]
 8022f0c:	4a8b      	ldr	r2, [pc, #556]	; (802313c <lv_style_set_prop_internal+0x24c>)
 8022f0e:	4293      	cmp	r3, r2
 8022f10:	d000      	beq.n	8022f14 <lv_style_set_prop_internal+0x24>
 8022f12:	e7fe      	b.n	8022f12 <lv_style_set_prop_internal+0x22>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022f14:	68fb      	ldr	r3, [r7, #12]
 8022f16:	891b      	ldrh	r3, [r3, #8]
 8022f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022f1c:	4293      	cmp	r3, r2
 8022f1e:	f000 8104 	beq.w	802312a <lv_style_set_prop_internal+0x23a>
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8022f22:	897b      	ldrh	r3, [r7, #10]
 8022f24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022f28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    if(style->prop_cnt > 1) {
 8022f2c:	68fb      	ldr	r3, [r7, #12]
 8022f2e:	7adb      	ldrb	r3, [r3, #11]
 8022f30:	2b01      	cmp	r3, #1
 8022f32:	f240 808d 	bls.w	8023050 <lv_style_set_prop_internal+0x160>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022f36:	68fb      	ldr	r3, [r7, #12]
 8022f38:	685a      	ldr	r2, [r3, #4]
 8022f3a:	68fb      	ldr	r3, [r7, #12]
 8022f3c:	7adb      	ldrb	r3, [r3, #11]
 8022f3e:	009b      	lsls	r3, r3, #2
 8022f40:	4413      	add	r3, r2
 8022f42:	633b      	str	r3, [r7, #48]	; 0x30
        uint16_t * props = (uint16_t *)tmp;
 8022f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022f48:	68fb      	ldr	r3, [r7, #12]
 8022f4a:	7adb      	ldrb	r3, [r3, #11]
 8022f4c:	3b01      	subs	r3, #1
 8022f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022f50:	e01e      	b.n	8022f90 <lv_style_set_prop_internal+0xa0>
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8022f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022f54:	005b      	lsls	r3, r3, #1
 8022f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022f58:	4413      	add	r3, r2
 8022f5a:	881b      	ldrh	r3, [r3, #0]
 8022f5c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022f60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8022f64:	429a      	cmp	r2, r3
 8022f66:	d110      	bne.n	8022f8a <lv_style_set_prop_internal+0x9a>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8022f68:	68fb      	ldr	r3, [r7, #12]
 8022f6a:	685b      	ldr	r3, [r3, #4]
 8022f6c:	61fb      	str	r3, [r7, #28]
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8022f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022f70:	005b      	lsls	r3, r3, #1
 8022f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022f74:	18d1      	adds	r1, r2, r3
 8022f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022f78:	009b      	lsls	r3, r3, #2
 8022f7a:	69fa      	ldr	r2, [r7, #28]
 8022f7c:	4413      	add	r3, r2
 8022f7e:	8978      	ldrh	r0, [r7, #10]
 8022f80:	683c      	ldr	r4, [r7, #0]
 8022f82:	460a      	mov	r2, r1
 8022f84:	6879      	ldr	r1, [r7, #4]
 8022f86:	47a0      	blx	r4
                return;
 8022f88:	e0d4      	b.n	8023134 <lv_style_set_prop_internal+0x244>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022f8c:	3b01      	subs	r3, #1
 8022f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022f92:	2b00      	cmp	r3, #0
 8022f94:	dadd      	bge.n	8022f52 <lv_style_set_prop_internal+0x62>
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8022f96:	68fb      	ldr	r3, [r7, #12]
 8022f98:	7adb      	ldrb	r3, [r3, #11]
 8022f9a:	3301      	adds	r3, #1
 8022f9c:	461a      	mov	r2, r3
 8022f9e:	4613      	mov	r3, r2
 8022fa0:	005b      	lsls	r3, r3, #1
 8022fa2:	4413      	add	r3, r2
 8022fa4:	005b      	lsls	r3, r3, #1
 8022fa6:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8022fa8:	68fb      	ldr	r3, [r7, #12]
 8022faa:	685b      	ldr	r3, [r3, #4]
 8022fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8022fae:	4618      	mov	r0, r3
 8022fb0:	f7fe ff04 	bl	8021dbc <lv_mem_realloc>
 8022fb4:	6278      	str	r0, [r7, #36]	; 0x24
        if(values_and_props == NULL) return;
 8022fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fb8:	2b00      	cmp	r3, #0
 8022fba:	f000 80b8 	beq.w	802312e <lv_style_set_prop_internal+0x23e>
        style->v_p.values_and_props = values_and_props;
 8022fbe:	68fb      	ldr	r3, [r7, #12]
 8022fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022fc2:	605a      	str	r2, [r3, #4]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022fc4:	68fb      	ldr	r3, [r7, #12]
 8022fc6:	7adb      	ldrb	r3, [r3, #11]
 8022fc8:	009b      	lsls	r3, r3, #2
 8022fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022fcc:	4413      	add	r3, r2
 8022fce:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 8022fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022fd4:	68fb      	ldr	r3, [r7, #12]
 8022fd6:	7adb      	ldrb	r3, [r3, #11]
 8022fd8:	3b01      	subs	r3, #1
 8022fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022fdc:	e00d      	b.n	8022ffa <lv_style_set_prop_internal+0x10a>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8022fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022fe0:	005b      	lsls	r3, r3, #1
 8022fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022fe4:	441a      	add	r2, r3
 8022fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022fe8:	3302      	adds	r3, #2
 8022fea:	005b      	lsls	r3, r3, #1
 8022fec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022fee:	440b      	add	r3, r1
 8022ff0:	8812      	ldrh	r2, [r2, #0]
 8022ff2:	801a      	strh	r2, [r3, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022ff6:	3b01      	subs	r3, #1
 8022ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	daee      	bge.n	8022fde <lv_style_set_prop_internal+0xee>
        }
        style->prop_cnt++;
 8023000:	68fb      	ldr	r3, [r7, #12]
 8023002:	7adb      	ldrb	r3, [r3, #11]
 8023004:	3301      	adds	r3, #1
 8023006:	b2da      	uxtb	r2, r3
 8023008:	68fb      	ldr	r3, [r7, #12]
 802300a:	72da      	strb	r2, [r3, #11]

        /*Go to the new position wit the props*/
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802300c:	68fb      	ldr	r3, [r7, #12]
 802300e:	7adb      	ldrb	r3, [r3, #11]
 8023010:	009b      	lsls	r3, r3, #2
 8023012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023014:	4413      	add	r3, r2
 8023016:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 8023018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802301a:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 802301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802301e:	623b      	str	r3, [r7, #32]

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8023020:	68fb      	ldr	r3, [r7, #12]
 8023022:	7adb      	ldrb	r3, [r3, #11]
 8023024:	461a      	mov	r2, r3
 8023026:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802302a:	4413      	add	r3, r2
 802302c:	005b      	lsls	r3, r3, #1
 802302e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023030:	18d1      	adds	r1, r2, r3
 8023032:	68fb      	ldr	r3, [r7, #12]
 8023034:	7adb      	ldrb	r3, [r3, #11]
 8023036:	461a      	mov	r2, r3
 8023038:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802303c:	4413      	add	r3, r2
 802303e:	009b      	lsls	r3, r3, #2
 8023040:	6a3a      	ldr	r2, [r7, #32]
 8023042:	4413      	add	r3, r2
 8023044:	8978      	ldrh	r0, [r7, #10]
 8023046:	683c      	ldr	r4, [r7, #0]
 8023048:	460a      	mov	r2, r1
 802304a:	6879      	ldr	r1, [r7, #4]
 802304c:	47a0      	blx	r4
 802304e:	e057      	b.n	8023100 <lv_style_set_prop_internal+0x210>
    }
    else if(style->prop_cnt == 1) {
 8023050:	68fb      	ldr	r3, [r7, #12]
 8023052:	7adb      	ldrb	r3, [r3, #11]
 8023054:	2b01      	cmp	r3, #1
 8023056:	d147      	bne.n	80230e8 <lv_style_set_prop_internal+0x1f8>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 8023058:	68fb      	ldr	r3, [r7, #12]
 802305a:	891b      	ldrh	r3, [r3, #8]
 802305c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8023060:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8023064:	429a      	cmp	r2, r3
 8023066:	d109      	bne.n	802307c <lv_style_set_prop_internal+0x18c>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8023068:	68fb      	ldr	r3, [r7, #12]
 802306a:	f103 0208 	add.w	r2, r3, #8
 802306e:	68fb      	ldr	r3, [r7, #12]
 8023070:	3304      	adds	r3, #4
 8023072:	8978      	ldrh	r0, [r7, #10]
 8023074:	683c      	ldr	r4, [r7, #0]
 8023076:	6879      	ldr	r1, [r7, #4]
 8023078:	47a0      	blx	r4
            return;
 802307a:	e05b      	b.n	8023134 <lv_style_set_prop_internal+0x244>
        }
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 802307c:	68fb      	ldr	r3, [r7, #12]
 802307e:	7adb      	ldrb	r3, [r3, #11]
 8023080:	3301      	adds	r3, #1
 8023082:	461a      	mov	r2, r3
 8023084:	4613      	mov	r3, r2
 8023086:	005b      	lsls	r3, r3, #1
 8023088:	4413      	add	r3, r2
 802308a:	005b      	lsls	r3, r3, #1
 802308c:	647b      	str	r3, [r7, #68]	; 0x44
        uint8_t * values_and_props = lv_mem_alloc(size);
 802308e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8023090:	f7fe fe36 	bl	8021d00 <lv_mem_alloc>
 8023094:	6438      	str	r0, [r7, #64]	; 0x40
        if(values_and_props == NULL) return;
 8023096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023098:	2b00      	cmp	r3, #0
 802309a:	d04a      	beq.n	8023132 <lv_style_set_prop_internal+0x242>
        lv_style_value_t value_tmp = style->v_p.value1;
 802309c:	68fb      	ldr	r3, [r7, #12]
 802309e:	685b      	ldr	r3, [r3, #4]
 80230a0:	617b      	str	r3, [r7, #20]
        style->v_p.values_and_props = values_and_props;
 80230a2:	68fb      	ldr	r3, [r7, #12]
 80230a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80230a6:	605a      	str	r2, [r3, #4]
        style->prop_cnt++;
 80230a8:	68fb      	ldr	r3, [r7, #12]
 80230aa:	7adb      	ldrb	r3, [r3, #11]
 80230ac:	3301      	adds	r3, #1
 80230ae:	b2da      	uxtb	r2, r3
 80230b0:	68fb      	ldr	r3, [r7, #12]
 80230b2:	72da      	strb	r2, [r3, #11]

        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80230b4:	68fb      	ldr	r3, [r7, #12]
 80230b6:	7adb      	ldrb	r3, [r3, #11]
 80230b8:	009b      	lsls	r3, r3, #2
 80230ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80230bc:	4413      	add	r3, r2
 80230be:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint16_t * props = (uint16_t *)tmp;
 80230c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80230c2:	63bb      	str	r3, [r7, #56]	; 0x38
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 80230c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80230c6:	637b      	str	r3, [r7, #52]	; 0x34
        props[0] = style->prop1;
 80230c8:	68fb      	ldr	r3, [r7, #12]
 80230ca:	891a      	ldrh	r2, [r3, #8]
 80230cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80230ce:	801a      	strh	r2, [r3, #0]
        values[0] = value_tmp;
 80230d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80230d2:	697a      	ldr	r2, [r7, #20]
 80230d4:	601a      	str	r2, [r3, #0]
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 80230d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80230d8:	1c9a      	adds	r2, r3, #2
 80230da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80230dc:	3304      	adds	r3, #4
 80230de:	8978      	ldrh	r0, [r7, #10]
 80230e0:	683c      	ldr	r4, [r7, #0]
 80230e2:	6879      	ldr	r1, [r7, #4]
 80230e4:	47a0      	blx	r4
 80230e6:	e00b      	b.n	8023100 <lv_style_set_prop_internal+0x210>
    }
    else {
        style->prop_cnt = 1;
 80230e8:	68fb      	ldr	r3, [r7, #12]
 80230ea:	2201      	movs	r2, #1
 80230ec:	72da      	strb	r2, [r3, #11]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 80230ee:	68fb      	ldr	r3, [r7, #12]
 80230f0:	f103 0208 	add.w	r2, r3, #8
 80230f4:	68fb      	ldr	r3, [r7, #12]
 80230f6:	3304      	adds	r3, #4
 80230f8:	8978      	ldrh	r0, [r7, #10]
 80230fa:	683c      	ldr	r4, [r7, #0]
 80230fc:	6879      	ldr	r1, [r7, #4]
 80230fe:	47a0      	blx	r4
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 8023100:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8023104:	4618      	mov	r0, r3
 8023106:	f7ff fe8f 	bl	8022e28 <_lv_style_get_prop_group>
 802310a:	4603      	mov	r3, r0
 802310c:	76fb      	strb	r3, [r7, #27]
    style->has_group |= 1 << group;
 802310e:	68fb      	ldr	r3, [r7, #12]
 8023110:	7a9b      	ldrb	r3, [r3, #10]
 8023112:	b25a      	sxtb	r2, r3
 8023114:	7efb      	ldrb	r3, [r7, #27]
 8023116:	2101      	movs	r1, #1
 8023118:	fa01 f303 	lsl.w	r3, r1, r3
 802311c:	b25b      	sxtb	r3, r3
 802311e:	4313      	orrs	r3, r2
 8023120:	b25b      	sxtb	r3, r3
 8023122:	b2da      	uxtb	r2, r3
 8023124:	68fb      	ldr	r3, [r7, #12]
 8023126:	729a      	strb	r2, [r3, #10]
 8023128:	e004      	b.n	8023134 <lv_style_set_prop_internal+0x244>
        return;
 802312a:	bf00      	nop
 802312c:	e002      	b.n	8023134 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 802312e:	bf00      	nop
 8023130:	e000      	b.n	8023134 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8023132:	bf00      	nop
}
 8023134:	3754      	adds	r7, #84	; 0x54
 8023136:	46bd      	mov	sp, r7
 8023138:	bd90      	pop	{r4, r7, pc}
 802313a:	bf00      	nop
 802313c:	aabbccdd 	.word	0xaabbccdd

08023140 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8023140:	b580      	push	{r7, lr}
 8023142:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8023144:	2118      	movs	r1, #24
 8023146:	4804      	ldr	r0, [pc, #16]	; (8023158 <_lv_timer_core_init+0x18>)
 8023148:	f7fe fb3d 	bl	80217c6 <_lv_ll_init>

    /*Initially enable the lv_timer handling*/
    lv_timer_enable(true);
 802314c:	2001      	movs	r0, #1
 802314e:	f000 f94d 	bl	80233ec <lv_timer_enable>
}
 8023152:	bf00      	nop
 8023154:	bd80      	pop	{r7, pc}
 8023156:	bf00      	nop
 8023158:	2000084c 	.word	0x2000084c

0802315c <lv_timer_handler>:
/**
 * Call it periodically to handle lv_timers.
 * @return the time after which it must be called again
 */
LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler(void)
{
 802315c:	b580      	push	{r7, lr}
 802315e:	b086      	sub	sp, #24
 8023160:	af00      	add	r7, sp, #0
    TIMER_TRACE("begin");

    /*Avoid concurrent running of the timer handler*/
    static bool already_running = false;
    if(already_running) {
 8023162:	4b59      	ldr	r3, [pc, #356]	; (80232c8 <lv_timer_handler+0x16c>)
 8023164:	781b      	ldrb	r3, [r3, #0]
 8023166:	2b00      	cmp	r3, #0
 8023168:	d001      	beq.n	802316e <lv_timer_handler+0x12>
        TIMER_TRACE("already running, concurrent calls are not allow, returning");
        return 1;
 802316a:	2301      	movs	r3, #1
 802316c:	e0a7      	b.n	80232be <lv_timer_handler+0x162>
    }
    already_running = true;
 802316e:	4b56      	ldr	r3, [pc, #344]	; (80232c8 <lv_timer_handler+0x16c>)
 8023170:	2201      	movs	r2, #1
 8023172:	701a      	strb	r2, [r3, #0]

    if(lv_timer_run == false) {
 8023174:	4b55      	ldr	r3, [pc, #340]	; (80232cc <lv_timer_handler+0x170>)
 8023176:	781b      	ldrb	r3, [r3, #0]
 8023178:	f083 0301 	eor.w	r3, r3, #1
 802317c:	b2db      	uxtb	r3, r3
 802317e:	2b00      	cmp	r3, #0
 8023180:	d004      	beq.n	802318c <lv_timer_handler+0x30>
        already_running = false; /*Release mutex*/
 8023182:	4b51      	ldr	r3, [pc, #324]	; (80232c8 <lv_timer_handler+0x16c>)
 8023184:	2200      	movs	r2, #0
 8023186:	701a      	strb	r2, [r3, #0]
        return 1;
 8023188:	2301      	movs	r3, #1
 802318a:	e098      	b.n	80232be <lv_timer_handler+0x162>
    }

    static uint32_t idle_period_start = 0;
    static uint32_t busy_time         = 0;

    uint32_t handler_start = lv_tick_get();
 802318c:	f7fc fe5a 	bl	801fe44 <lv_tick_get>
 8023190:	60f8      	str	r0, [r7, #12]

    if(handler_start == 0) {
 8023192:	68fb      	ldr	r3, [r7, #12]
 8023194:	2b00      	cmp	r3, #0
 8023196:	d10b      	bne.n	80231b0 <lv_timer_handler+0x54>
        static uint32_t run_cnt = 0;
        run_cnt++;
 8023198:	4b4d      	ldr	r3, [pc, #308]	; (80232d0 <lv_timer_handler+0x174>)
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	3301      	adds	r3, #1
 802319e:	4a4c      	ldr	r2, [pc, #304]	; (80232d0 <lv_timer_handler+0x174>)
 80231a0:	6013      	str	r3, [r2, #0]
        if(run_cnt > 100) {
 80231a2:	4b4b      	ldr	r3, [pc, #300]	; (80232d0 <lv_timer_handler+0x174>)
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	2b64      	cmp	r3, #100	; 0x64
 80231a8:	d902      	bls.n	80231b0 <lv_timer_handler+0x54>
            run_cnt = 0;
 80231aa:	4b49      	ldr	r3, [pc, #292]	; (80232d0 <lv_timer_handler+0x174>)
 80231ac:	2200      	movs	r2, #0
 80231ae:	601a      	str	r2, [r3, #0]
    }

    /*Run all timer from the list*/
    lv_timer_t * next;
    do {
        timer_deleted             = false;
 80231b0:	4b48      	ldr	r3, [pc, #288]	; (80232d4 <lv_timer_handler+0x178>)
 80231b2:	2200      	movs	r2, #0
 80231b4:	701a      	strb	r2, [r3, #0]
        timer_created             = false;
 80231b6:	4b48      	ldr	r3, [pc, #288]	; (80232d8 <lv_timer_handler+0x17c>)
 80231b8:	2200      	movs	r2, #0
 80231ba:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 80231bc:	4847      	ldr	r0, [pc, #284]	; (80232dc <lv_timer_handler+0x180>)
 80231be:	f7fe fbe0 	bl	8021982 <_lv_ll_get_head>
 80231c2:	4603      	mov	r3, r0
 80231c4:	4a46      	ldr	r2, [pc, #280]	; (80232e0 <lv_timer_handler+0x184>)
 80231c6:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 80231c8:	e019      	b.n	80231fe <lv_timer_handler+0xa2>
            /*The timer might be deleted if it runs only once ('repeat_count = 1')
             *So get next element until the current is surely valid*/
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 80231ca:	4b45      	ldr	r3, [pc, #276]	; (80232e0 <lv_timer_handler+0x184>)
 80231cc:	681b      	ldr	r3, [r3, #0]
 80231ce:	4619      	mov	r1, r3
 80231d0:	4842      	ldr	r0, [pc, #264]	; (80232dc <lv_timer_handler+0x180>)
 80231d2:	f7fe fbf8 	bl	80219c6 <_lv_ll_get_next>
 80231d6:	6178      	str	r0, [r7, #20]

            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 80231d8:	4b41      	ldr	r3, [pc, #260]	; (80232e0 <lv_timer_handler+0x184>)
 80231da:	681b      	ldr	r3, [r3, #0]
 80231dc:	4618      	mov	r0, r3
 80231de:	f000 f915 	bl	802340c <lv_timer_exec>
 80231e2:	4603      	mov	r3, r0
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	d007      	beq.n	80231f8 <lv_timer_handler+0x9c>
                /*If a timer was created or deleted then this or the next item might be corrupted*/
                if(timer_created || timer_deleted) {
 80231e8:	4b3b      	ldr	r3, [pc, #236]	; (80232d8 <lv_timer_handler+0x17c>)
 80231ea:	781b      	ldrb	r3, [r3, #0]
 80231ec:	2b00      	cmp	r3, #0
 80231ee:	d10a      	bne.n	8023206 <lv_timer_handler+0xaa>
 80231f0:	4b38      	ldr	r3, [pc, #224]	; (80232d4 <lv_timer_handler+0x178>)
 80231f2:	781b      	ldrb	r3, [r3, #0]
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	d106      	bne.n	8023206 <lv_timer_handler+0xaa>
                    TIMER_TRACE("Start from the first timer again because a timer was created or deleted");
                    break;
                }
            }

            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 80231f8:	4a39      	ldr	r2, [pc, #228]	; (80232e0 <lv_timer_handler+0x184>)
 80231fa:	697b      	ldr	r3, [r7, #20]
 80231fc:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 80231fe:	4b38      	ldr	r3, [pc, #224]	; (80232e0 <lv_timer_handler+0x184>)
 8023200:	681b      	ldr	r3, [r3, #0]
 8023202:	2b00      	cmp	r3, #0
 8023204:	d1e1      	bne.n	80231ca <lv_timer_handler+0x6e>
        }
    } while(LV_GC_ROOT(_lv_timer_act));
 8023206:	4b36      	ldr	r3, [pc, #216]	; (80232e0 <lv_timer_handler+0x184>)
 8023208:	681b      	ldr	r3, [r3, #0]
 802320a:	2b00      	cmp	r3, #0
 802320c:	d1d0      	bne.n	80231b0 <lv_timer_handler+0x54>

    uint32_t time_till_next = LV_NO_TIMER_READY;
 802320e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023212:	613b      	str	r3, [r7, #16]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8023214:	4831      	ldr	r0, [pc, #196]	; (80232dc <lv_timer_handler+0x180>)
 8023216:	f7fe fbb4 	bl	8021982 <_lv_ll_get_head>
 802321a:	6178      	str	r0, [r7, #20]
    while(next) {
 802321c:	e015      	b.n	802324a <lv_timer_handler+0xee>
        if(!next->paused) {
 802321e:	697b      	ldr	r3, [r7, #20]
 8023220:	7d1b      	ldrb	r3, [r3, #20]
 8023222:	f003 0301 	and.w	r3, r3, #1
 8023226:	b2db      	uxtb	r3, r3
 8023228:	2b00      	cmp	r3, #0
 802322a:	d109      	bne.n	8023240 <lv_timer_handler+0xe4>
            uint32_t delay = lv_timer_time_remaining(next);
 802322c:	6978      	ldr	r0, [r7, #20]
 802322e:	f000 f935 	bl	802349c <lv_timer_time_remaining>
 8023232:	6078      	str	r0, [r7, #4]
            if(delay < time_till_next)
 8023234:	687a      	ldr	r2, [r7, #4]
 8023236:	693b      	ldr	r3, [r7, #16]
 8023238:	429a      	cmp	r2, r3
 802323a:	d201      	bcs.n	8023240 <lv_timer_handler+0xe4>
                time_till_next = delay;
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	613b      	str	r3, [r7, #16]
        }

        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8023240:	6979      	ldr	r1, [r7, #20]
 8023242:	4826      	ldr	r0, [pc, #152]	; (80232dc <lv_timer_handler+0x180>)
 8023244:	f7fe fbbf 	bl	80219c6 <_lv_ll_get_next>
 8023248:	6178      	str	r0, [r7, #20]
    while(next) {
 802324a:	697b      	ldr	r3, [r7, #20]
 802324c:	2b00      	cmp	r3, #0
 802324e:	d1e6      	bne.n	802321e <lv_timer_handler+0xc2>
    }

    busy_time += lv_tick_elaps(handler_start);
 8023250:	68f8      	ldr	r0, [r7, #12]
 8023252:	f7fc fe11 	bl	801fe78 <lv_tick_elaps>
 8023256:	4602      	mov	r2, r0
 8023258:	4b22      	ldr	r3, [pc, #136]	; (80232e4 <lv_timer_handler+0x188>)
 802325a:	681b      	ldr	r3, [r3, #0]
 802325c:	4413      	add	r3, r2
 802325e:	4a21      	ldr	r2, [pc, #132]	; (80232e4 <lv_timer_handler+0x188>)
 8023260:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8023262:	4b21      	ldr	r3, [pc, #132]	; (80232e8 <lv_timer_handler+0x18c>)
 8023264:	681b      	ldr	r3, [r3, #0]
 8023266:	4618      	mov	r0, r3
 8023268:	f7fc fe06 	bl	801fe78 <lv_tick_elaps>
 802326c:	60b8      	str	r0, [r7, #8]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 802326e:	68bb      	ldr	r3, [r7, #8]
 8023270:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8023274:	d31f      	bcc.n	80232b6 <lv_timer_handler+0x15a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8023276:	4b1b      	ldr	r3, [pc, #108]	; (80232e4 <lv_timer_handler+0x188>)
 8023278:	681b      	ldr	r3, [r3, #0]
 802327a:	2264      	movs	r2, #100	; 0x64
 802327c:	fb03 f202 	mul.w	r2, r3, r2
 8023280:	68bb      	ldr	r3, [r7, #8]
 8023282:	fbb2 f3f3 	udiv	r3, r2, r3
 8023286:	b2da      	uxtb	r2, r3
 8023288:	4b18      	ldr	r3, [pc, #96]	; (80232ec <lv_timer_handler+0x190>)
 802328a:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 802328c:	4b17      	ldr	r3, [pc, #92]	; (80232ec <lv_timer_handler+0x190>)
 802328e:	781b      	ldrb	r3, [r3, #0]
 8023290:	2b64      	cmp	r3, #100	; 0x64
 8023292:	d805      	bhi.n	80232a0 <lv_timer_handler+0x144>
 8023294:	4b15      	ldr	r3, [pc, #84]	; (80232ec <lv_timer_handler+0x190>)
 8023296:	781b      	ldrb	r3, [r3, #0]
 8023298:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 802329c:	b2db      	uxtb	r3, r3
 802329e:	e000      	b.n	80232a2 <lv_timer_handler+0x146>
 80232a0:	2300      	movs	r3, #0
 80232a2:	4a12      	ldr	r2, [pc, #72]	; (80232ec <lv_timer_handler+0x190>)
 80232a4:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 80232a6:	4b0f      	ldr	r3, [pc, #60]	; (80232e4 <lv_timer_handler+0x188>)
 80232a8:	2200      	movs	r2, #0
 80232aa:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 80232ac:	f7fc fdca 	bl	801fe44 <lv_tick_get>
 80232b0:	4603      	mov	r3, r0
 80232b2:	4a0d      	ldr	r2, [pc, #52]	; (80232e8 <lv_timer_handler+0x18c>)
 80232b4:	6013      	str	r3, [r2, #0]
    }

    already_running = false; /*Release the mutex*/
 80232b6:	4b04      	ldr	r3, [pc, #16]	; (80232c8 <lv_timer_handler+0x16c>)
 80232b8:	2200      	movs	r2, #0
 80232ba:	701a      	strb	r2, [r3, #0]

    TIMER_TRACE("finished (%d ms until the next timer call)", time_till_next);
    return time_till_next;
 80232bc:	693b      	ldr	r3, [r7, #16]
}
 80232be:	4618      	mov	r0, r3
 80232c0:	3718      	adds	r7, #24
 80232c2:	46bd      	mov	sp, r7
 80232c4:	bd80      	pop	{r7, pc}
 80232c6:	bf00      	nop
 80232c8:	2000ca6c 	.word	0x2000ca6c
 80232cc:	2000ca68 	.word	0x2000ca68
 80232d0:	2000ca70 	.word	0x2000ca70
 80232d4:	2000ca6a 	.word	0x2000ca6a
 80232d8:	2000ca6b 	.word	0x2000ca6b
 80232dc:	2000084c 	.word	0x2000084c
 80232e0:	200008dc 	.word	0x200008dc
 80232e4:	2000ca74 	.word	0x2000ca74
 80232e8:	2000ca78 	.word	0x2000ca78
 80232ec:	2000ca69 	.word	0x2000ca69

080232f0 <lv_timer_create>:
 * @param period call period in ms unit
 * @param user_data custom parameter
 * @return pointer to the new timer
 */
lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * user_data)
{
 80232f0:	b580      	push	{r7, lr}
 80232f2:	b086      	sub	sp, #24
 80232f4:	af00      	add	r7, sp, #0
 80232f6:	60f8      	str	r0, [r7, #12]
 80232f8:	60b9      	str	r1, [r7, #8]
 80232fa:	607a      	str	r2, [r7, #4]
    lv_timer_t * new_timer = NULL;
 80232fc:	2300      	movs	r3, #0
 80232fe:	617b      	str	r3, [r7, #20]

    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8023300:	4815      	ldr	r0, [pc, #84]	; (8023358 <lv_timer_create+0x68>)
 8023302:	f7fe fa79 	bl	80217f8 <_lv_ll_ins_head>
 8023306:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(new_timer);
 8023308:	697b      	ldr	r3, [r7, #20]
 802330a:	2b00      	cmp	r3, #0
 802330c:	d100      	bne.n	8023310 <lv_timer_create+0x20>
 802330e:	e7fe      	b.n	802330e <lv_timer_create+0x1e>
    if(new_timer == NULL) return NULL;
 8023310:	697b      	ldr	r3, [r7, #20]
 8023312:	2b00      	cmp	r3, #0
 8023314:	d101      	bne.n	802331a <lv_timer_create+0x2a>
 8023316:	2300      	movs	r3, #0
 8023318:	e01a      	b.n	8023350 <lv_timer_create+0x60>

    new_timer->period = period;
 802331a:	697b      	ldr	r3, [r7, #20]
 802331c:	68ba      	ldr	r2, [r7, #8]
 802331e:	601a      	str	r2, [r3, #0]
    new_timer->timer_cb = timer_xcb;
 8023320:	697b      	ldr	r3, [r7, #20]
 8023322:	68fa      	ldr	r2, [r7, #12]
 8023324:	609a      	str	r2, [r3, #8]
    new_timer->repeat_count = -1;
 8023326:	697b      	ldr	r3, [r7, #20]
 8023328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802332c:	611a      	str	r2, [r3, #16]
    new_timer->paused = 0;
 802332e:	697a      	ldr	r2, [r7, #20]
 8023330:	7d13      	ldrb	r3, [r2, #20]
 8023332:	f36f 0300 	bfc	r3, #0, #1
 8023336:	7513      	strb	r3, [r2, #20]
    new_timer->last_run = lv_tick_get();
 8023338:	f7fc fd84 	bl	801fe44 <lv_tick_get>
 802333c:	4602      	mov	r2, r0
 802333e:	697b      	ldr	r3, [r7, #20]
 8023340:	605a      	str	r2, [r3, #4]
    new_timer->user_data = user_data;
 8023342:	697b      	ldr	r3, [r7, #20]
 8023344:	687a      	ldr	r2, [r7, #4]
 8023346:	60da      	str	r2, [r3, #12]

    timer_created = true;
 8023348:	4b04      	ldr	r3, [pc, #16]	; (802335c <lv_timer_create+0x6c>)
 802334a:	2201      	movs	r2, #1
 802334c:	701a      	strb	r2, [r3, #0]

    return new_timer;
 802334e:	697b      	ldr	r3, [r7, #20]
}
 8023350:	4618      	mov	r0, r3
 8023352:	3718      	adds	r7, #24
 8023354:	46bd      	mov	sp, r7
 8023356:	bd80      	pop	{r7, pc}
 8023358:	2000084c 	.word	0x2000084c
 802335c:	2000ca6b 	.word	0x2000ca6b

08023360 <lv_timer_del>:
/**
 * Delete a lv_timer
 * @param timer pointer to timer created by timer
 */
void lv_timer_del(lv_timer_t * timer)
{
 8023360:	b580      	push	{r7, lr}
 8023362:	b082      	sub	sp, #8
 8023364:	af00      	add	r7, sp, #0
 8023366:	6078      	str	r0, [r7, #4]
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8023368:	6879      	ldr	r1, [r7, #4]
 802336a:	4806      	ldr	r0, [pc, #24]	; (8023384 <lv_timer_del+0x24>)
 802336c:	f7fe faac 	bl	80218c8 <_lv_ll_remove>
    timer_deleted = true;
 8023370:	4b05      	ldr	r3, [pc, #20]	; (8023388 <lv_timer_del+0x28>)
 8023372:	2201      	movs	r2, #1
 8023374:	701a      	strb	r2, [r3, #0]

    lv_mem_free(timer);
 8023376:	6878      	ldr	r0, [r7, #4]
 8023378:	f7fe fcf2 	bl	8021d60 <lv_mem_free>
}
 802337c:	bf00      	nop
 802337e:	3708      	adds	r7, #8
 8023380:	46bd      	mov	sp, r7
 8023382:	bd80      	pop	{r7, pc}
 8023384:	2000084c 	.word	0x2000084c
 8023388:	2000ca6a 	.word	0x2000ca6a

0802338c <lv_timer_pause>:
/**
 * Pause/resume a timer.
 * @param timer pointer to an lv_timer
 */
void lv_timer_pause(lv_timer_t * timer)
{
 802338c:	b480      	push	{r7}
 802338e:	b083      	sub	sp, #12
 8023390:	af00      	add	r7, sp, #0
 8023392:	6078      	str	r0, [r7, #4]
    timer->paused = true;
 8023394:	687a      	ldr	r2, [r7, #4]
 8023396:	7d13      	ldrb	r3, [r2, #20]
 8023398:	f043 0301 	orr.w	r3, r3, #1
 802339c:	7513      	strb	r3, [r2, #20]
}
 802339e:	bf00      	nop
 80233a0:	370c      	adds	r7, #12
 80233a2:	46bd      	mov	sp, r7
 80233a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233a8:	4770      	bx	lr

080233aa <lv_timer_resume>:

void lv_timer_resume(lv_timer_t * timer)
{
 80233aa:	b480      	push	{r7}
 80233ac:	b083      	sub	sp, #12
 80233ae:	af00      	add	r7, sp, #0
 80233b0:	6078      	str	r0, [r7, #4]
    timer->paused = false;
 80233b2:	687a      	ldr	r2, [r7, #4]
 80233b4:	7d13      	ldrb	r3, [r2, #20]
 80233b6:	f36f 0300 	bfc	r3, #0, #1
 80233ba:	7513      	strb	r3, [r2, #20]
}
 80233bc:	bf00      	nop
 80233be:	370c      	adds	r7, #12
 80233c0:	46bd      	mov	sp, r7
 80233c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233c6:	4770      	bx	lr

080233c8 <lv_timer_ready>:
/**
 * Make a lv_timer ready. It will not wait its period.
 * @param timer pointer to a lv_timer.
 */
void lv_timer_ready(lv_timer_t * timer)
{
 80233c8:	b580      	push	{r7, lr}
 80233ca:	b082      	sub	sp, #8
 80233cc:	af00      	add	r7, sp, #0
 80233ce:	6078      	str	r0, [r7, #4]
    timer->last_run = lv_tick_get() - timer->period - 1;
 80233d0:	f7fc fd38 	bl	801fe44 <lv_tick_get>
 80233d4:	4602      	mov	r2, r0
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	681b      	ldr	r3, [r3, #0]
 80233da:	1ad3      	subs	r3, r2, r3
 80233dc:	1e5a      	subs	r2, r3, #1
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	605a      	str	r2, [r3, #4]
}
 80233e2:	bf00      	nop
 80233e4:	3708      	adds	r7, #8
 80233e6:	46bd      	mov	sp, r7
 80233e8:	bd80      	pop	{r7, pc}
	...

080233ec <lv_timer_enable>:
/**
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
 80233ec:	b480      	push	{r7}
 80233ee:	b083      	sub	sp, #12
 80233f0:	af00      	add	r7, sp, #0
 80233f2:	4603      	mov	r3, r0
 80233f4:	71fb      	strb	r3, [r7, #7]
    lv_timer_run = en;
 80233f6:	4a04      	ldr	r2, [pc, #16]	; (8023408 <lv_timer_enable+0x1c>)
 80233f8:	79fb      	ldrb	r3, [r7, #7]
 80233fa:	7013      	strb	r3, [r2, #0]
}
 80233fc:	bf00      	nop
 80233fe:	370c      	adds	r7, #12
 8023400:	46bd      	mov	sp, r7
 8023402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023406:	4770      	bx	lr
 8023408:	2000ca68 	.word	0x2000ca68

0802340c <lv_timer_exec>:
 * Execute timer if its remaining time is zero
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
 802340c:	b580      	push	{r7, lr}
 802340e:	b084      	sub	sp, #16
 8023410:	af00      	add	r7, sp, #0
 8023412:	6078      	str	r0, [r7, #4]
    if(timer->paused) return false;
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	7d1b      	ldrb	r3, [r3, #20]
 8023418:	f003 0301 	and.w	r3, r3, #1
 802341c:	b2db      	uxtb	r3, r3
 802341e:	2b00      	cmp	r3, #0
 8023420:	d001      	beq.n	8023426 <lv_timer_exec+0x1a>
 8023422:	2300      	movs	r3, #0
 8023424:	e034      	b.n	8023490 <lv_timer_exec+0x84>

    bool exec = false;
 8023426:	2300      	movs	r3, #0
 8023428:	73fb      	strb	r3, [r7, #15]
    if(lv_timer_time_remaining(timer) == 0) {
 802342a:	6878      	ldr	r0, [r7, #4]
 802342c:	f000 f836 	bl	802349c <lv_timer_time_remaining>
 8023430:	4603      	mov	r3, r0
 8023432:	2b00      	cmp	r3, #0
 8023434:	d11d      	bne.n	8023472 <lv_timer_exec+0x66>
        /* Decrement the repeat count before executing the timer_cb.
         * If any timer is deleted `if(timer->repeat_count == 0)` is not executed below
         * but at least the repeat count is zero and the timer can be deleted in the next round*/
        int32_t original_repeat_count = timer->repeat_count;
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	691b      	ldr	r3, [r3, #16]
 802343a:	60bb      	str	r3, [r7, #8]
        if(timer->repeat_count > 0) timer->repeat_count--;
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	691b      	ldr	r3, [r3, #16]
 8023440:	2b00      	cmp	r3, #0
 8023442:	dd04      	ble.n	802344e <lv_timer_exec+0x42>
 8023444:	687b      	ldr	r3, [r7, #4]
 8023446:	691b      	ldr	r3, [r3, #16]
 8023448:	1e5a      	subs	r2, r3, #1
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	611a      	str	r2, [r3, #16]
        timer->last_run = lv_tick_get();
 802344e:	f7fc fcf9 	bl	801fe44 <lv_tick_get>
 8023452:	4602      	mov	r2, r0
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	605a      	str	r2, [r3, #4]
        TIMER_TRACE("calling timer callback: %p", *((void **)&timer->timer_cb));
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8023458:	687b      	ldr	r3, [r7, #4]
 802345a:	689b      	ldr	r3, [r3, #8]
 802345c:	2b00      	cmp	r3, #0
 802345e:	d006      	beq.n	802346e <lv_timer_exec+0x62>
 8023460:	68bb      	ldr	r3, [r7, #8]
 8023462:	2b00      	cmp	r3, #0
 8023464:	d003      	beq.n	802346e <lv_timer_exec+0x62>
 8023466:	687b      	ldr	r3, [r7, #4]
 8023468:	689b      	ldr	r3, [r3, #8]
 802346a:	6878      	ldr	r0, [r7, #4]
 802346c:	4798      	blx	r3
        TIMER_TRACE("timer callback %p finished", *((void **)&timer->timer_cb));
        LV_ASSERT_MEM_INTEGRITY();
        exec = true;
 802346e:	2301      	movs	r3, #1
 8023470:	73fb      	strb	r3, [r7, #15]
    }

    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8023472:	4b09      	ldr	r3, [pc, #36]	; (8023498 <lv_timer_exec+0x8c>)
 8023474:	781b      	ldrb	r3, [r3, #0]
 8023476:	f083 0301 	eor.w	r3, r3, #1
 802347a:	b2db      	uxtb	r3, r3
 802347c:	2b00      	cmp	r3, #0
 802347e:	d006      	beq.n	802348e <lv_timer_exec+0x82>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8023480:	687b      	ldr	r3, [r7, #4]
 8023482:	691b      	ldr	r3, [r3, #16]
 8023484:	2b00      	cmp	r3, #0
 8023486:	d102      	bne.n	802348e <lv_timer_exec+0x82>
            TIMER_TRACE("deleting timer with %p callback because the repeat count is over", *((void **)&timer->timer_cb));
            lv_timer_del(timer);
 8023488:	6878      	ldr	r0, [r7, #4]
 802348a:	f7ff ff69 	bl	8023360 <lv_timer_del>
        }
    }

    return exec;
 802348e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023490:	4618      	mov	r0, r3
 8023492:	3710      	adds	r7, #16
 8023494:	46bd      	mov	sp, r7
 8023496:	bd80      	pop	{r7, pc}
 8023498:	2000ca6a 	.word	0x2000ca6a

0802349c <lv_timer_time_remaining>:
 * Find out how much time remains before a timer must be run.
 * @param timer pointer to lv_timer
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
 802349c:	b580      	push	{r7, lr}
 802349e:	b084      	sub	sp, #16
 80234a0:	af00      	add	r7, sp, #0
 80234a2:	6078      	str	r0, [r7, #4]
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	685b      	ldr	r3, [r3, #4]
 80234a8:	4618      	mov	r0, r3
 80234aa:	f7fc fce5 	bl	801fe78 <lv_tick_elaps>
 80234ae:	60f8      	str	r0, [r7, #12]
    if(elp >= timer->period)
 80234b0:	687b      	ldr	r3, [r7, #4]
 80234b2:	681b      	ldr	r3, [r3, #0]
 80234b4:	68fa      	ldr	r2, [r7, #12]
 80234b6:	429a      	cmp	r2, r3
 80234b8:	d301      	bcc.n	80234be <lv_timer_time_remaining+0x22>
        return 0;
 80234ba:	2300      	movs	r3, #0
 80234bc:	e003      	b.n	80234c6 <lv_timer_time_remaining+0x2a>
    return timer->period - elp;
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	681a      	ldr	r2, [r3, #0]
 80234c2:	68fb      	ldr	r3, [r7, #12]
 80234c4:	1ad3      	subs	r3, r2, r3
}
 80234c6:	4618      	mov	r0, r3
 80234c8:	3710      	adds	r7, #16
 80234ca:	46bd      	mov	sp, r7
 80234cc:	bd80      	pop	{r7, pc}

080234ce <tlsf_ffs>:
}

#else

tlsf_decl int tlsf_ffs(unsigned int word)
{
 80234ce:	b480      	push	{r7}
 80234d0:	b083      	sub	sp, #12
 80234d2:	af00      	add	r7, sp, #0
 80234d4:	6078      	str	r0, [r7, #4]
    return __builtin_ffs(word) - 1;
 80234d6:	687b      	ldr	r3, [r7, #4]
 80234d8:	fa93 f2a3 	rbit	r2, r3
 80234dc:	fab2 f282 	clz	r2, r2
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d101      	bne.n	80234e8 <tlsf_ffs+0x1a>
 80234e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80234e8:	1c53      	adds	r3, r2, #1
 80234ea:	3b01      	subs	r3, #1
}
 80234ec:	4618      	mov	r0, r3
 80234ee:	370c      	adds	r7, #12
 80234f0:	46bd      	mov	sp, r7
 80234f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234f6:	4770      	bx	lr

080234f8 <tlsf_fls>:

#endif

tlsf_decl int tlsf_fls(unsigned int word)
{
 80234f8:	b480      	push	{r7}
 80234fa:	b085      	sub	sp, #20
 80234fc:	af00      	add	r7, sp, #0
 80234fe:	6078      	str	r0, [r7, #4]
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	2b00      	cmp	r3, #0
 8023504:	d005      	beq.n	8023512 <tlsf_fls+0x1a>
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	fab3 f383 	clz	r3, r3
 802350c:	f1c3 0320 	rsb	r3, r3, #32
 8023510:	e000      	b.n	8023514 <tlsf_fls+0x1c>
 8023512:	2300      	movs	r3, #0
 8023514:	60fb      	str	r3, [r7, #12]
    return bit - 1;
 8023516:	68fb      	ldr	r3, [r7, #12]
 8023518:	3b01      	subs	r3, #1
}
 802351a:	4618      	mov	r0, r3
 802351c:	3714      	adds	r7, #20
 802351e:	46bd      	mov	sp, r7
 8023520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023524:	4770      	bx	lr

08023526 <block_size>:
/*
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
 8023526:	b480      	push	{r7}
 8023528:	b083      	sub	sp, #12
 802352a:	af00      	add	r7, sp, #0
 802352c:	6078      	str	r0, [r7, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802352e:	687b      	ldr	r3, [r7, #4]
 8023530:	685a      	ldr	r2, [r3, #4]
 8023532:	2101      	movs	r1, #1
 8023534:	2302      	movs	r3, #2
 8023536:	430b      	orrs	r3, r1
 8023538:	43db      	mvns	r3, r3
 802353a:	4013      	ands	r3, r2
}
 802353c:	4618      	mov	r0, r3
 802353e:	370c      	adds	r7, #12
 8023540:	46bd      	mov	sp, r7
 8023542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023546:	4770      	bx	lr

08023548 <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
 8023548:	b480      	push	{r7}
 802354a:	b085      	sub	sp, #20
 802354c:	af00      	add	r7, sp, #0
 802354e:	6078      	str	r0, [r7, #4]
 8023550:	6039      	str	r1, [r7, #0]
    const size_t oldsize = block->size;
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	685b      	ldr	r3, [r3, #4]
 8023556:	60fb      	str	r3, [r7, #12]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8023558:	2201      	movs	r2, #1
 802355a:	2302      	movs	r3, #2
 802355c:	431a      	orrs	r2, r3
 802355e:	68fb      	ldr	r3, [r7, #12]
 8023560:	401a      	ands	r2, r3
 8023562:	683b      	ldr	r3, [r7, #0]
 8023564:	431a      	orrs	r2, r3
 8023566:	687b      	ldr	r3, [r7, #4]
 8023568:	605a      	str	r2, [r3, #4]
}
 802356a:	bf00      	nop
 802356c:	3714      	adds	r7, #20
 802356e:	46bd      	mov	sp, r7
 8023570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023574:	4770      	bx	lr

08023576 <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 8023576:	b580      	push	{r7, lr}
 8023578:	b082      	sub	sp, #8
 802357a:	af00      	add	r7, sp, #0
 802357c:	6078      	str	r0, [r7, #4]
    return block_size(block) == 0;
 802357e:	6878      	ldr	r0, [r7, #4]
 8023580:	f7ff ffd1 	bl	8023526 <block_size>
 8023584:	4603      	mov	r3, r0
 8023586:	2b00      	cmp	r3, #0
 8023588:	bf0c      	ite	eq
 802358a:	2301      	moveq	r3, #1
 802358c:	2300      	movne	r3, #0
 802358e:	b2db      	uxtb	r3, r3
}
 8023590:	4618      	mov	r0, r3
 8023592:	3708      	adds	r7, #8
 8023594:	46bd      	mov	sp, r7
 8023596:	bd80      	pop	{r7, pc}

08023598 <block_is_free>:

static int block_is_free(const block_header_t * block)
{
 8023598:	b480      	push	{r7}
 802359a:	b083      	sub	sp, #12
 802359c:	af00      	add	r7, sp, #0
 802359e:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 80235a0:	687b      	ldr	r3, [r7, #4]
 80235a2:	685b      	ldr	r3, [r3, #4]
 80235a4:	2201      	movs	r2, #1
 80235a6:	4013      	ands	r3, r2
}
 80235a8:	4618      	mov	r0, r3
 80235aa:	370c      	adds	r7, #12
 80235ac:	46bd      	mov	sp, r7
 80235ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235b2:	4770      	bx	lr

080235b4 <block_set_free>:

static void block_set_free(block_header_t * block)
{
 80235b4:	b480      	push	{r7}
 80235b6:	b083      	sub	sp, #12
 80235b8:	af00      	add	r7, sp, #0
 80235ba:	6078      	str	r0, [r7, #4]
    block->size |= block_header_free_bit;
 80235bc:	687b      	ldr	r3, [r7, #4]
 80235be:	685b      	ldr	r3, [r3, #4]
 80235c0:	2201      	movs	r2, #1
 80235c2:	431a      	orrs	r2, r3
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	605a      	str	r2, [r3, #4]
}
 80235c8:	bf00      	nop
 80235ca:	370c      	adds	r7, #12
 80235cc:	46bd      	mov	sp, r7
 80235ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235d2:	4770      	bx	lr

080235d4 <block_set_used>:

static void block_set_used(block_header_t * block)
{
 80235d4:	b480      	push	{r7}
 80235d6:	b083      	sub	sp, #12
 80235d8:	af00      	add	r7, sp, #0
 80235da:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_free_bit;
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	685a      	ldr	r2, [r3, #4]
 80235e0:	2301      	movs	r3, #1
 80235e2:	43db      	mvns	r3, r3
 80235e4:	401a      	ands	r2, r3
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	605a      	str	r2, [r3, #4]
}
 80235ea:	bf00      	nop
 80235ec:	370c      	adds	r7, #12
 80235ee:	46bd      	mov	sp, r7
 80235f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235f4:	4770      	bx	lr

080235f6 <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
 80235f6:	b480      	push	{r7}
 80235f8:	b083      	sub	sp, #12
 80235fa:	af00      	add	r7, sp, #0
 80235fc:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 80235fe:	687b      	ldr	r3, [r7, #4]
 8023600:	685b      	ldr	r3, [r3, #4]
 8023602:	2202      	movs	r2, #2
 8023604:	4013      	ands	r3, r2
}
 8023606:	4618      	mov	r0, r3
 8023608:	370c      	adds	r7, #12
 802360a:	46bd      	mov	sp, r7
 802360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023610:	4770      	bx	lr

08023612 <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
 8023612:	b480      	push	{r7}
 8023614:	b083      	sub	sp, #12
 8023616:	af00      	add	r7, sp, #0
 8023618:	6078      	str	r0, [r7, #4]
    block->size |= block_header_prev_free_bit;
 802361a:	687b      	ldr	r3, [r7, #4]
 802361c:	685b      	ldr	r3, [r3, #4]
 802361e:	2202      	movs	r2, #2
 8023620:	431a      	orrs	r2, r3
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	605a      	str	r2, [r3, #4]
}
 8023626:	bf00      	nop
 8023628:	370c      	adds	r7, #12
 802362a:	46bd      	mov	sp, r7
 802362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023630:	4770      	bx	lr

08023632 <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
 8023632:	b480      	push	{r7}
 8023634:	b083      	sub	sp, #12
 8023636:	af00      	add	r7, sp, #0
 8023638:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_prev_free_bit;
 802363a:	687b      	ldr	r3, [r7, #4]
 802363c:	685a      	ldr	r2, [r3, #4]
 802363e:	2302      	movs	r3, #2
 8023640:	43db      	mvns	r3, r3
 8023642:	401a      	ands	r2, r3
 8023644:	687b      	ldr	r3, [r7, #4]
 8023646:	605a      	str	r2, [r3, #4]
}
 8023648:	bf00      	nop
 802364a:	370c      	adds	r7, #12
 802364c:	46bd      	mov	sp, r7
 802364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023652:	4770      	bx	lr

08023654 <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
 8023654:	b480      	push	{r7}
 8023656:	b083      	sub	sp, #12
 8023658:	af00      	add	r7, sp, #0
 802365a:	6078      	str	r0, [r7, #4]
    return tlsf_cast(block_header_t *,
 802365c:	2308      	movs	r3, #8
 802365e:	425b      	negs	r3, r3
 8023660:	687a      	ldr	r2, [r7, #4]
 8023662:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 8023664:	4618      	mov	r0, r3
 8023666:	370c      	adds	r7, #12
 8023668:	46bd      	mov	sp, r7
 802366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802366e:	4770      	bx	lr

08023670 <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
 8023670:	b480      	push	{r7}
 8023672:	b083      	sub	sp, #12
 8023674:	af00      	add	r7, sp, #0
 8023676:	6078      	str	r0, [r7, #4]
    return tlsf_cast(void *,
 8023678:	2208      	movs	r2, #8
 802367a:	687b      	ldr	r3, [r7, #4]
 802367c:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 802367e:	4618      	mov	r0, r3
 8023680:	370c      	adds	r7, #12
 8023682:	46bd      	mov	sp, r7
 8023684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023688:	4770      	bx	lr

0802368a <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
 802368a:	b480      	push	{r7}
 802368c:	b083      	sub	sp, #12
 802368e:	af00      	add	r7, sp, #0
 8023690:	6078      	str	r0, [r7, #4]
 8023692:	6039      	str	r1, [r7, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023694:	687a      	ldr	r2, [r7, #4]
 8023696:	683b      	ldr	r3, [r7, #0]
 8023698:	4413      	add	r3, r2
}
 802369a:	4618      	mov	r0, r3
 802369c:	370c      	adds	r7, #12
 802369e:	46bd      	mov	sp, r7
 80236a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236a4:	4770      	bx	lr

080236a6 <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 80236a6:	b580      	push	{r7, lr}
 80236a8:	b082      	sub	sp, #8
 80236aa:	af00      	add	r7, sp, #0
 80236ac:	6078      	str	r0, [r7, #4]
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 80236ae:	6878      	ldr	r0, [r7, #4]
 80236b0:	f7ff ffa1 	bl	80235f6 <block_is_prev_free>
 80236b4:	4603      	mov	r3, r0
 80236b6:	2b00      	cmp	r3, #0
 80236b8:	d100      	bne.n	80236bc <block_prev+0x16>
 80236ba:	e7fe      	b.n	80236ba <block_prev+0x14>
    return block->prev_phys_block;
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	681b      	ldr	r3, [r3, #0]
}
 80236c0:	4618      	mov	r0, r3
 80236c2:	3708      	adds	r7, #8
 80236c4:	46bd      	mov	sp, r7
 80236c6:	bd80      	pop	{r7, pc}

080236c8 <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 80236c8:	b590      	push	{r4, r7, lr}
 80236ca:	b085      	sub	sp, #20
 80236cc:	af00      	add	r7, sp, #0
 80236ce:	6078      	str	r0, [r7, #4]
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80236d0:	6878      	ldr	r0, [r7, #4]
 80236d2:	f7ff ffcd 	bl	8023670 <block_to_ptr>
 80236d6:	4604      	mov	r4, r0
                                            block_size(block) - block_header_overhead);
 80236d8:	6878      	ldr	r0, [r7, #4]
 80236da:	f7ff ff24 	bl	8023526 <block_size>
 80236de:	4603      	mov	r3, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80236e0:	2204      	movs	r2, #4
 80236e2:	1a9b      	subs	r3, r3, r2
 80236e4:	4619      	mov	r1, r3
 80236e6:	4620      	mov	r0, r4
 80236e8:	f7ff ffcf 	bl	802368a <offset_to_block>
 80236ec:	60f8      	str	r0, [r7, #12]
    tlsf_assert(!block_is_last(block));
 80236ee:	6878      	ldr	r0, [r7, #4]
 80236f0:	f7ff ff41 	bl	8023576 <block_is_last>
 80236f4:	4603      	mov	r3, r0
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d000      	beq.n	80236fc <block_next+0x34>
 80236fa:	e7fe      	b.n	80236fa <block_next+0x32>
    return next;
 80236fc:	68fb      	ldr	r3, [r7, #12]
}
 80236fe:	4618      	mov	r0, r3
 8023700:	3714      	adds	r7, #20
 8023702:	46bd      	mov	sp, r7
 8023704:	bd90      	pop	{r4, r7, pc}

08023706 <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 8023706:	b580      	push	{r7, lr}
 8023708:	b084      	sub	sp, #16
 802370a:	af00      	add	r7, sp, #0
 802370c:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 802370e:	6878      	ldr	r0, [r7, #4]
 8023710:	f7ff ffda 	bl	80236c8 <block_next>
 8023714:	60f8      	str	r0, [r7, #12]
    next->prev_phys_block = block;
 8023716:	68fb      	ldr	r3, [r7, #12]
 8023718:	687a      	ldr	r2, [r7, #4]
 802371a:	601a      	str	r2, [r3, #0]
    return next;
 802371c:	68fb      	ldr	r3, [r7, #12]
}
 802371e:	4618      	mov	r0, r3
 8023720:	3710      	adds	r7, #16
 8023722:	46bd      	mov	sp, r7
 8023724:	bd80      	pop	{r7, pc}

08023726 <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 8023726:	b580      	push	{r7, lr}
 8023728:	b084      	sub	sp, #16
 802372a:	af00      	add	r7, sp, #0
 802372c:	6078      	str	r0, [r7, #4]
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 802372e:	6878      	ldr	r0, [r7, #4]
 8023730:	f7ff ffe9 	bl	8023706 <block_link_next>
 8023734:	60f8      	str	r0, [r7, #12]
    block_set_prev_free(next);
 8023736:	68f8      	ldr	r0, [r7, #12]
 8023738:	f7ff ff6b 	bl	8023612 <block_set_prev_free>
    block_set_free(block);
 802373c:	6878      	ldr	r0, [r7, #4]
 802373e:	f7ff ff39 	bl	80235b4 <block_set_free>
}
 8023742:	bf00      	nop
 8023744:	3710      	adds	r7, #16
 8023746:	46bd      	mov	sp, r7
 8023748:	bd80      	pop	{r7, pc}

0802374a <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 802374a:	b580      	push	{r7, lr}
 802374c:	b084      	sub	sp, #16
 802374e:	af00      	add	r7, sp, #0
 8023750:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 8023752:	6878      	ldr	r0, [r7, #4]
 8023754:	f7ff ffb8 	bl	80236c8 <block_next>
 8023758:	60f8      	str	r0, [r7, #12]
    block_set_prev_used(next);
 802375a:	68f8      	ldr	r0, [r7, #12]
 802375c:	f7ff ff69 	bl	8023632 <block_set_prev_used>
    block_set_used(block);
 8023760:	6878      	ldr	r0, [r7, #4]
 8023762:	f7ff ff37 	bl	80235d4 <block_set_used>
}
 8023766:	bf00      	nop
 8023768:	3710      	adds	r7, #16
 802376a:	46bd      	mov	sp, r7
 802376c:	bd80      	pop	{r7, pc}

0802376e <align_up>:

static size_t align_up(size_t x, size_t align)
{
 802376e:	b480      	push	{r7}
 8023770:	b083      	sub	sp, #12
 8023772:	af00      	add	r7, sp, #0
 8023774:	6078      	str	r0, [r7, #4]
 8023776:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8023778:	683b      	ldr	r3, [r7, #0]
 802377a:	1e5a      	subs	r2, r3, #1
 802377c:	683b      	ldr	r3, [r7, #0]
 802377e:	4013      	ands	r3, r2
 8023780:	2b00      	cmp	r3, #0
 8023782:	d000      	beq.n	8023786 <align_up+0x18>
 8023784:	e7fe      	b.n	8023784 <align_up+0x16>
    return (x + (align - 1)) & ~(align - 1);
 8023786:	683a      	ldr	r2, [r7, #0]
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	4413      	add	r3, r2
 802378c:	1e5a      	subs	r2, r3, #1
 802378e:	683b      	ldr	r3, [r7, #0]
 8023790:	425b      	negs	r3, r3
 8023792:	4013      	ands	r3, r2
}
 8023794:	4618      	mov	r0, r3
 8023796:	370c      	adds	r7, #12
 8023798:	46bd      	mov	sp, r7
 802379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802379e:	4770      	bx	lr

080237a0 <align_down>:

static size_t align_down(size_t x, size_t align)
{
 80237a0:	b480      	push	{r7}
 80237a2:	b083      	sub	sp, #12
 80237a4:	af00      	add	r7, sp, #0
 80237a6:	6078      	str	r0, [r7, #4]
 80237a8:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80237aa:	683b      	ldr	r3, [r7, #0]
 80237ac:	1e5a      	subs	r2, r3, #1
 80237ae:	683b      	ldr	r3, [r7, #0]
 80237b0:	4013      	ands	r3, r2
 80237b2:	2b00      	cmp	r3, #0
 80237b4:	d000      	beq.n	80237b8 <align_down+0x18>
 80237b6:	e7fe      	b.n	80237b6 <align_down+0x16>
    return x - (x & (align - 1));
 80237b8:	683b      	ldr	r3, [r7, #0]
 80237ba:	425a      	negs	r2, r3
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	4013      	ands	r3, r2
}
 80237c0:	4618      	mov	r0, r3
 80237c2:	370c      	adds	r7, #12
 80237c4:	46bd      	mov	sp, r7
 80237c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237ca:	4770      	bx	lr

080237cc <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
 80237cc:	b480      	push	{r7}
 80237ce:	b085      	sub	sp, #20
 80237d0:	af00      	add	r7, sp, #0
 80237d2:	6078      	str	r0, [r7, #4]
 80237d4:	6039      	str	r1, [r7, #0]
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80237d6:	687a      	ldr	r2, [r7, #4]
 80237d8:	683b      	ldr	r3, [r7, #0]
 80237da:	4413      	add	r3, r2
 80237dc:	1e5a      	subs	r2, r3, #1
 80237de:	683b      	ldr	r3, [r7, #0]
 80237e0:	425b      	negs	r3, r3
 80237e2:	4013      	ands	r3, r2
    const tlsfptr_t aligned =
 80237e4:	60fb      	str	r3, [r7, #12]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80237e6:	683b      	ldr	r3, [r7, #0]
 80237e8:	1e5a      	subs	r2, r3, #1
 80237ea:	683b      	ldr	r3, [r7, #0]
 80237ec:	4013      	ands	r3, r2
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d000      	beq.n	80237f4 <align_ptr+0x28>
 80237f2:	e7fe      	b.n	80237f2 <align_ptr+0x26>
    return tlsf_cast(void *, aligned);
 80237f4:	68fb      	ldr	r3, [r7, #12]
}
 80237f6:	4618      	mov	r0, r3
 80237f8:	3714      	adds	r7, #20
 80237fa:	46bd      	mov	sp, r7
 80237fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023800:	4770      	bx	lr

08023802 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 8023802:	b580      	push	{r7, lr}
 8023804:	b084      	sub	sp, #16
 8023806:	af00      	add	r7, sp, #0
 8023808:	6078      	str	r0, [r7, #4]
 802380a:	6039      	str	r1, [r7, #0]
    size_t adjust = 0;
 802380c:	2300      	movs	r3, #0
 802380e:	60fb      	str	r3, [r7, #12]
    if(size) {
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	2b00      	cmp	r3, #0
 8023814:	d00f      	beq.n	8023836 <adjust_request_size+0x34>
        const size_t aligned = align_up(size, align);
 8023816:	6839      	ldr	r1, [r7, #0]
 8023818:	6878      	ldr	r0, [r7, #4]
 802381a:	f7ff ffa8 	bl	802376e <align_up>
 802381e:	60b8      	str	r0, [r7, #8]

        /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
        if(aligned < block_size_max) {
 8023820:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023824:	68bb      	ldr	r3, [r7, #8]
 8023826:	4293      	cmp	r3, r2
 8023828:	d205      	bcs.n	8023836 <adjust_request_size+0x34>
            adjust = tlsf_max(aligned, block_size_min);
 802382a:	220c      	movs	r2, #12
 802382c:	68bb      	ldr	r3, [r7, #8]
 802382e:	4293      	cmp	r3, r2
 8023830:	bf38      	it	cc
 8023832:	4613      	movcc	r3, r2
 8023834:	60fb      	str	r3, [r7, #12]
        }
    }
    return adjust;
 8023836:	68fb      	ldr	r3, [r7, #12]
}
 8023838:	4618      	mov	r0, r3
 802383a:	3710      	adds	r7, #16
 802383c:	46bd      	mov	sp, r7
 802383e:	bd80      	pop	{r7, pc}

08023840 <mapping_insert>:
** TLSF utility functions. In most cases, these are direct translations of
** the documentation found in the white paper.
*/

static void mapping_insert(size_t size, int * fli, int * sli)
{
 8023840:	b580      	push	{r7, lr}
 8023842:	b086      	sub	sp, #24
 8023844:	af00      	add	r7, sp, #0
 8023846:	60f8      	str	r0, [r7, #12]
 8023848:	60b9      	str	r1, [r7, #8]
 802384a:	607a      	str	r2, [r7, #4]
    int fl, sl;
    if(size < SMALL_BLOCK_SIZE) {
 802384c:	68fb      	ldr	r3, [r7, #12]
 802384e:	2b7f      	cmp	r3, #127	; 0x7f
 8023850:	d808      	bhi.n	8023864 <mapping_insert+0x24>
        /* Store small blocks in first list. */
        fl = 0;
 8023852:	2300      	movs	r3, #0
 8023854:	617b      	str	r3, [r7, #20]
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8023856:	68fb      	ldr	r3, [r7, #12]
 8023858:	2b00      	cmp	r3, #0
 802385a:	da00      	bge.n	802385e <mapping_insert+0x1e>
 802385c:	3303      	adds	r3, #3
 802385e:	109b      	asrs	r3, r3, #2
 8023860:	613b      	str	r3, [r7, #16]
 8023862:	e00e      	b.n	8023882 <mapping_insert+0x42>
    }
    else {
        fl = tlsf_fls_sizet(size);
 8023864:	68f8      	ldr	r0, [r7, #12]
 8023866:	f7ff fe47 	bl	80234f8 <tlsf_fls>
 802386a:	6178      	str	r0, [r7, #20]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 802386c:	697b      	ldr	r3, [r7, #20]
 802386e:	3b05      	subs	r3, #5
 8023870:	68fa      	ldr	r2, [r7, #12]
 8023872:	fa22 f303 	lsr.w	r3, r2, r3
 8023876:	f083 0320 	eor.w	r3, r3, #32
 802387a:	613b      	str	r3, [r7, #16]
        fl -= (FL_INDEX_SHIFT - 1);
 802387c:	697b      	ldr	r3, [r7, #20]
 802387e:	3b06      	subs	r3, #6
 8023880:	617b      	str	r3, [r7, #20]
    }
    *fli = fl;
 8023882:	68bb      	ldr	r3, [r7, #8]
 8023884:	697a      	ldr	r2, [r7, #20]
 8023886:	601a      	str	r2, [r3, #0]
    *sli = sl;
 8023888:	687b      	ldr	r3, [r7, #4]
 802388a:	693a      	ldr	r2, [r7, #16]
 802388c:	601a      	str	r2, [r3, #0]
}
 802388e:	bf00      	nop
 8023890:	3718      	adds	r7, #24
 8023892:	46bd      	mov	sp, r7
 8023894:	bd80      	pop	{r7, pc}

08023896 <mapping_search>:

/* This version rounds up to the next block size (for allocations) */
static void mapping_search(size_t size, int * fli, int * sli)
{
 8023896:	b580      	push	{r7, lr}
 8023898:	b086      	sub	sp, #24
 802389a:	af00      	add	r7, sp, #0
 802389c:	60f8      	str	r0, [r7, #12]
 802389e:	60b9      	str	r1, [r7, #8]
 80238a0:	607a      	str	r2, [r7, #4]
    if(size >= SMALL_BLOCK_SIZE) {
 80238a2:	68fb      	ldr	r3, [r7, #12]
 80238a4:	2b7f      	cmp	r3, #127	; 0x7f
 80238a6:	d90d      	bls.n	80238c4 <mapping_search+0x2e>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 80238a8:	68f8      	ldr	r0, [r7, #12]
 80238aa:	f7ff fe25 	bl	80234f8 <tlsf_fls>
 80238ae:	4603      	mov	r3, r0
 80238b0:	3b05      	subs	r3, #5
 80238b2:	2201      	movs	r2, #1
 80238b4:	fa02 f303 	lsl.w	r3, r2, r3
 80238b8:	3b01      	subs	r3, #1
 80238ba:	617b      	str	r3, [r7, #20]
        size += round;
 80238bc:	68fa      	ldr	r2, [r7, #12]
 80238be:	697b      	ldr	r3, [r7, #20]
 80238c0:	4413      	add	r3, r2
 80238c2:	60fb      	str	r3, [r7, #12]
    }
    mapping_insert(size, fli, sli);
 80238c4:	687a      	ldr	r2, [r7, #4]
 80238c6:	68b9      	ldr	r1, [r7, #8]
 80238c8:	68f8      	ldr	r0, [r7, #12]
 80238ca:	f7ff ffb9 	bl	8023840 <mapping_insert>
}
 80238ce:	bf00      	nop
 80238d0:	3718      	adds	r7, #24
 80238d2:	46bd      	mov	sp, r7
 80238d4:	bd80      	pop	{r7, pc}

080238d6 <search_suitable_block>:

static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
{
 80238d6:	b580      	push	{r7, lr}
 80238d8:	b088      	sub	sp, #32
 80238da:	af00      	add	r7, sp, #0
 80238dc:	60f8      	str	r0, [r7, #12]
 80238de:	60b9      	str	r1, [r7, #8]
 80238e0:	607a      	str	r2, [r7, #4]
    int fl = *fli;
 80238e2:	68bb      	ldr	r3, [r7, #8]
 80238e4:	681b      	ldr	r3, [r3, #0]
 80238e6:	61fb      	str	r3, [r7, #28]
    int sl = *sli;
 80238e8:	687b      	ldr	r3, [r7, #4]
 80238ea:	681b      	ldr	r3, [r3, #0]
 80238ec:	617b      	str	r3, [r7, #20]

    /*
    ** First, search for a block in the list associated with the given
    ** fl/sl index.
    */
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 80238ee:	68fa      	ldr	r2, [r7, #12]
 80238f0:	69fb      	ldr	r3, [r7, #28]
 80238f2:	3304      	adds	r3, #4
 80238f4:	009b      	lsls	r3, r3, #2
 80238f6:	4413      	add	r3, r2
 80238f8:	685a      	ldr	r2, [r3, #4]
 80238fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80238fe:	697b      	ldr	r3, [r7, #20]
 8023900:	fa01 f303 	lsl.w	r3, r1, r3
 8023904:	4013      	ands	r3, r2
 8023906:	61bb      	str	r3, [r7, #24]
    if(!sl_map) {
 8023908:	69bb      	ldr	r3, [r7, #24]
 802390a:	2b00      	cmp	r3, #0
 802390c:	d11c      	bne.n	8023948 <search_suitable_block+0x72>
        /* No block exists. Search in the next largest first-level list. */
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 802390e:	68fb      	ldr	r3, [r7, #12]
 8023910:	691a      	ldr	r2, [r3, #16]
 8023912:	69fb      	ldr	r3, [r7, #28]
 8023914:	3301      	adds	r3, #1
 8023916:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802391a:	fa01 f303 	lsl.w	r3, r1, r3
 802391e:	4013      	ands	r3, r2
 8023920:	613b      	str	r3, [r7, #16]
        if(!fl_map) {
 8023922:	693b      	ldr	r3, [r7, #16]
 8023924:	2b00      	cmp	r3, #0
 8023926:	d101      	bne.n	802392c <search_suitable_block+0x56>
            /* No free blocks available, memory has been exhausted. */
            return 0;
 8023928:	2300      	movs	r3, #0
 802392a:	e021      	b.n	8023970 <search_suitable_block+0x9a>
        }

        fl = tlsf_ffs(fl_map);
 802392c:	6938      	ldr	r0, [r7, #16]
 802392e:	f7ff fdce 	bl	80234ce <tlsf_ffs>
 8023932:	61f8      	str	r0, [r7, #28]
        *fli = fl;
 8023934:	68bb      	ldr	r3, [r7, #8]
 8023936:	69fa      	ldr	r2, [r7, #28]
 8023938:	601a      	str	r2, [r3, #0]
        sl_map = control->sl_bitmap[fl];
 802393a:	68fa      	ldr	r2, [r7, #12]
 802393c:	69fb      	ldr	r3, [r7, #28]
 802393e:	3304      	adds	r3, #4
 8023940:	009b      	lsls	r3, r3, #2
 8023942:	4413      	add	r3, r2
 8023944:	685b      	ldr	r3, [r3, #4]
 8023946:	61bb      	str	r3, [r7, #24]
    }
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8023948:	69bb      	ldr	r3, [r7, #24]
 802394a:	2b00      	cmp	r3, #0
 802394c:	d100      	bne.n	8023950 <search_suitable_block+0x7a>
 802394e:	e7fe      	b.n	802394e <search_suitable_block+0x78>
    sl = tlsf_ffs(sl_map);
 8023950:	69b8      	ldr	r0, [r7, #24]
 8023952:	f7ff fdbc 	bl	80234ce <tlsf_ffs>
 8023956:	6178      	str	r0, [r7, #20]
    *sli = sl;
 8023958:	687b      	ldr	r3, [r7, #4]
 802395a:	697a      	ldr	r2, [r7, #20]
 802395c:	601a      	str	r2, [r3, #0]

    /* Return the first block in the free list. */
    return control->blocks[fl][sl];
 802395e:	68fa      	ldr	r2, [r7, #12]
 8023960:	69fb      	ldr	r3, [r7, #28]
 8023962:	0159      	lsls	r1, r3, #5
 8023964:	697b      	ldr	r3, [r7, #20]
 8023966:	440b      	add	r3, r1
 8023968:	330e      	adds	r3, #14
 802396a:	009b      	lsls	r3, r3, #2
 802396c:	4413      	add	r3, r2
 802396e:	685b      	ldr	r3, [r3, #4]
}
 8023970:	4618      	mov	r0, r3
 8023972:	3720      	adds	r7, #32
 8023974:	46bd      	mov	sp, r7
 8023976:	bd80      	pop	{r7, pc}

08023978 <remove_free_block>:

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8023978:	b480      	push	{r7}
 802397a:	b087      	sub	sp, #28
 802397c:	af00      	add	r7, sp, #0
 802397e:	60f8      	str	r0, [r7, #12]
 8023980:	60b9      	str	r1, [r7, #8]
 8023982:	607a      	str	r2, [r7, #4]
 8023984:	603b      	str	r3, [r7, #0]
    block_header_t * prev = block->prev_free;
 8023986:	68bb      	ldr	r3, [r7, #8]
 8023988:	68db      	ldr	r3, [r3, #12]
 802398a:	617b      	str	r3, [r7, #20]
    block_header_t * next = block->next_free;
 802398c:	68bb      	ldr	r3, [r7, #8]
 802398e:	689b      	ldr	r3, [r3, #8]
 8023990:	613b      	str	r3, [r7, #16]
    tlsf_assert(prev && "prev_free field can not be null");
 8023992:	697b      	ldr	r3, [r7, #20]
 8023994:	2b00      	cmp	r3, #0
 8023996:	d100      	bne.n	802399a <remove_free_block+0x22>
 8023998:	e7fe      	b.n	8023998 <remove_free_block+0x20>
    tlsf_assert(next && "next_free field can not be null");
 802399a:	693b      	ldr	r3, [r7, #16]
 802399c:	2b00      	cmp	r3, #0
 802399e:	d100      	bne.n	80239a2 <remove_free_block+0x2a>
 80239a0:	e7fe      	b.n	80239a0 <remove_free_block+0x28>
    next->prev_free = prev;
 80239a2:	693b      	ldr	r3, [r7, #16]
 80239a4:	697a      	ldr	r2, [r7, #20]
 80239a6:	60da      	str	r2, [r3, #12]
    prev->next_free = next;
 80239a8:	697b      	ldr	r3, [r7, #20]
 80239aa:	693a      	ldr	r2, [r7, #16]
 80239ac:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 80239ae:	68fa      	ldr	r2, [r7, #12]
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	0159      	lsls	r1, r3, #5
 80239b4:	683b      	ldr	r3, [r7, #0]
 80239b6:	440b      	add	r3, r1
 80239b8:	330e      	adds	r3, #14
 80239ba:	009b      	lsls	r3, r3, #2
 80239bc:	4413      	add	r3, r2
 80239be:	685b      	ldr	r3, [r3, #4]
 80239c0:	68ba      	ldr	r2, [r7, #8]
 80239c2:	429a      	cmp	r2, r3
 80239c4:	d131      	bne.n	8023a2a <remove_free_block+0xb2>
        control->blocks[fl][sl] = next;
 80239c6:	68fa      	ldr	r2, [r7, #12]
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	0159      	lsls	r1, r3, #5
 80239cc:	683b      	ldr	r3, [r7, #0]
 80239ce:	440b      	add	r3, r1
 80239d0:	330e      	adds	r3, #14
 80239d2:	009b      	lsls	r3, r3, #2
 80239d4:	4413      	add	r3, r2
 80239d6:	693a      	ldr	r2, [r7, #16]
 80239d8:	605a      	str	r2, [r3, #4]

        /* If the new head is null, clear the bitmap. */
        if(next == &control->block_null) {
 80239da:	68fb      	ldr	r3, [r7, #12]
 80239dc:	693a      	ldr	r2, [r7, #16]
 80239de:	429a      	cmp	r2, r3
 80239e0:	d123      	bne.n	8023a2a <remove_free_block+0xb2>
            control->sl_bitmap[fl] &= ~(1U << sl);
 80239e2:	68fa      	ldr	r2, [r7, #12]
 80239e4:	687b      	ldr	r3, [r7, #4]
 80239e6:	3304      	adds	r3, #4
 80239e8:	009b      	lsls	r3, r3, #2
 80239ea:	4413      	add	r3, r2
 80239ec:	685a      	ldr	r2, [r3, #4]
 80239ee:	2101      	movs	r1, #1
 80239f0:	683b      	ldr	r3, [r7, #0]
 80239f2:	fa01 f303 	lsl.w	r3, r1, r3
 80239f6:	43db      	mvns	r3, r3
 80239f8:	401a      	ands	r2, r3
 80239fa:	68f9      	ldr	r1, [r7, #12]
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	3304      	adds	r3, #4
 8023a00:	009b      	lsls	r3, r3, #2
 8023a02:	440b      	add	r3, r1
 8023a04:	605a      	str	r2, [r3, #4]

            /* If the second bitmap is now empty, clear the fl bitmap. */
            if(!control->sl_bitmap[fl]) {
 8023a06:	68fa      	ldr	r2, [r7, #12]
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	3304      	adds	r3, #4
 8023a0c:	009b      	lsls	r3, r3, #2
 8023a0e:	4413      	add	r3, r2
 8023a10:	685b      	ldr	r3, [r3, #4]
 8023a12:	2b00      	cmp	r3, #0
 8023a14:	d109      	bne.n	8023a2a <remove_free_block+0xb2>
                control->fl_bitmap &= ~(1U << fl);
 8023a16:	68fb      	ldr	r3, [r7, #12]
 8023a18:	691a      	ldr	r2, [r3, #16]
 8023a1a:	2101      	movs	r1, #1
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8023a22:	43db      	mvns	r3, r3
 8023a24:	401a      	ands	r2, r3
 8023a26:	68fb      	ldr	r3, [r7, #12]
 8023a28:	611a      	str	r2, [r3, #16]
            }
        }
    }
}
 8023a2a:	bf00      	nop
 8023a2c:	371c      	adds	r7, #28
 8023a2e:	46bd      	mov	sp, r7
 8023a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a34:	4770      	bx	lr

08023a36 <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8023a36:	b590      	push	{r4, r7, lr}
 8023a38:	b087      	sub	sp, #28
 8023a3a:	af00      	add	r7, sp, #0
 8023a3c:	60f8      	str	r0, [r7, #12]
 8023a3e:	60b9      	str	r1, [r7, #8]
 8023a40:	607a      	str	r2, [r7, #4]
 8023a42:	603b      	str	r3, [r7, #0]
    block_header_t * current = control->blocks[fl][sl];
 8023a44:	68fa      	ldr	r2, [r7, #12]
 8023a46:	687b      	ldr	r3, [r7, #4]
 8023a48:	0159      	lsls	r1, r3, #5
 8023a4a:	683b      	ldr	r3, [r7, #0]
 8023a4c:	440b      	add	r3, r1
 8023a4e:	330e      	adds	r3, #14
 8023a50:	009b      	lsls	r3, r3, #2
 8023a52:	4413      	add	r3, r2
 8023a54:	685b      	ldr	r3, [r3, #4]
 8023a56:	617b      	str	r3, [r7, #20]
    tlsf_assert(current && "free list cannot have a null entry");
 8023a58:	697b      	ldr	r3, [r7, #20]
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	d100      	bne.n	8023a60 <insert_free_block+0x2a>
 8023a5e:	e7fe      	b.n	8023a5e <insert_free_block+0x28>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 8023a60:	68bb      	ldr	r3, [r7, #8]
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d100      	bne.n	8023a68 <insert_free_block+0x32>
 8023a66:	e7fe      	b.n	8023a66 <insert_free_block+0x30>
    block->next_free = current;
 8023a68:	68bb      	ldr	r3, [r7, #8]
 8023a6a:	697a      	ldr	r2, [r7, #20]
 8023a6c:	609a      	str	r2, [r3, #8]
    block->prev_free = &control->block_null;
 8023a6e:	68fa      	ldr	r2, [r7, #12]
 8023a70:	68bb      	ldr	r3, [r7, #8]
 8023a72:	60da      	str	r2, [r3, #12]
    current->prev_free = block;
 8023a74:	697b      	ldr	r3, [r7, #20]
 8023a76:	68ba      	ldr	r2, [r7, #8]
 8023a78:	60da      	str	r2, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8023a7a:	68b8      	ldr	r0, [r7, #8]
 8023a7c:	f7ff fdf8 	bl	8023670 <block_to_ptr>
 8023a80:	4604      	mov	r4, r0
 8023a82:	68b8      	ldr	r0, [r7, #8]
 8023a84:	f7ff fdf4 	bl	8023670 <block_to_ptr>
 8023a88:	4603      	mov	r3, r0
 8023a8a:	2104      	movs	r1, #4
 8023a8c:	4618      	mov	r0, r3
 8023a8e:	f7ff fe9d 	bl	80237cc <align_ptr>
 8023a92:	4603      	mov	r3, r0
 8023a94:	429c      	cmp	r4, r3
 8023a96:	d000      	beq.n	8023a9a <insert_free_block+0x64>
 8023a98:	e7fe      	b.n	8023a98 <insert_free_block+0x62>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 8023a9a:	68fa      	ldr	r2, [r7, #12]
 8023a9c:	687b      	ldr	r3, [r7, #4]
 8023a9e:	0159      	lsls	r1, r3, #5
 8023aa0:	683b      	ldr	r3, [r7, #0]
 8023aa2:	440b      	add	r3, r1
 8023aa4:	330e      	adds	r3, #14
 8023aa6:	009b      	lsls	r3, r3, #2
 8023aa8:	4413      	add	r3, r2
 8023aaa:	68ba      	ldr	r2, [r7, #8]
 8023aac:	605a      	str	r2, [r3, #4]
    control->fl_bitmap |= (1U << fl);
 8023aae:	68fb      	ldr	r3, [r7, #12]
 8023ab0:	691a      	ldr	r2, [r3, #16]
 8023ab2:	2101      	movs	r1, #1
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8023aba:	431a      	orrs	r2, r3
 8023abc:	68fb      	ldr	r3, [r7, #12]
 8023abe:	611a      	str	r2, [r3, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8023ac0:	68fa      	ldr	r2, [r7, #12]
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	3304      	adds	r3, #4
 8023ac6:	009b      	lsls	r3, r3, #2
 8023ac8:	4413      	add	r3, r2
 8023aca:	685a      	ldr	r2, [r3, #4]
 8023acc:	2101      	movs	r1, #1
 8023ace:	683b      	ldr	r3, [r7, #0]
 8023ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8023ad4:	431a      	orrs	r2, r3
 8023ad6:	68f9      	ldr	r1, [r7, #12]
 8023ad8:	687b      	ldr	r3, [r7, #4]
 8023ada:	3304      	adds	r3, #4
 8023adc:	009b      	lsls	r3, r3, #2
 8023ade:	440b      	add	r3, r1
 8023ae0:	605a      	str	r2, [r3, #4]
}
 8023ae2:	bf00      	nop
 8023ae4:	371c      	adds	r7, #28
 8023ae6:	46bd      	mov	sp, r7
 8023ae8:	bd90      	pop	{r4, r7, pc}

08023aea <block_remove>:

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 8023aea:	b580      	push	{r7, lr}
 8023aec:	b084      	sub	sp, #16
 8023aee:	af00      	add	r7, sp, #0
 8023af0:	6078      	str	r0, [r7, #4]
 8023af2:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8023af4:	6838      	ldr	r0, [r7, #0]
 8023af6:	f7ff fd16 	bl	8023526 <block_size>
 8023afa:	f107 0208 	add.w	r2, r7, #8
 8023afe:	f107 030c 	add.w	r3, r7, #12
 8023b02:	4619      	mov	r1, r3
 8023b04:	f7ff fe9c 	bl	8023840 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8023b08:	68fa      	ldr	r2, [r7, #12]
 8023b0a:	68bb      	ldr	r3, [r7, #8]
 8023b0c:	6839      	ldr	r1, [r7, #0]
 8023b0e:	6878      	ldr	r0, [r7, #4]
 8023b10:	f7ff ff32 	bl	8023978 <remove_free_block>
}
 8023b14:	bf00      	nop
 8023b16:	3710      	adds	r7, #16
 8023b18:	46bd      	mov	sp, r7
 8023b1a:	bd80      	pop	{r7, pc}

08023b1c <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 8023b1c:	b580      	push	{r7, lr}
 8023b1e:	b084      	sub	sp, #16
 8023b20:	af00      	add	r7, sp, #0
 8023b22:	6078      	str	r0, [r7, #4]
 8023b24:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8023b26:	6838      	ldr	r0, [r7, #0]
 8023b28:	f7ff fcfd 	bl	8023526 <block_size>
 8023b2c:	f107 0208 	add.w	r2, r7, #8
 8023b30:	f107 030c 	add.w	r3, r7, #12
 8023b34:	4619      	mov	r1, r3
 8023b36:	f7ff fe83 	bl	8023840 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 8023b3a:	68fa      	ldr	r2, [r7, #12]
 8023b3c:	68bb      	ldr	r3, [r7, #8]
 8023b3e:	6839      	ldr	r1, [r7, #0]
 8023b40:	6878      	ldr	r0, [r7, #4]
 8023b42:	f7ff ff78 	bl	8023a36 <insert_free_block>
}
 8023b46:	bf00      	nop
 8023b48:	3710      	adds	r7, #16
 8023b4a:	46bd      	mov	sp, r7
 8023b4c:	bd80      	pop	{r7, pc}

08023b4e <block_can_split>:

static int block_can_split(block_header_t * block, size_t size)
{
 8023b4e:	b580      	push	{r7, lr}
 8023b50:	b082      	sub	sp, #8
 8023b52:	af00      	add	r7, sp, #0
 8023b54:	6078      	str	r0, [r7, #4]
 8023b56:	6039      	str	r1, [r7, #0]
    return block_size(block) >= sizeof(block_header_t) + size;
 8023b58:	6878      	ldr	r0, [r7, #4]
 8023b5a:	f7ff fce4 	bl	8023526 <block_size>
 8023b5e:	4602      	mov	r2, r0
 8023b60:	683b      	ldr	r3, [r7, #0]
 8023b62:	3310      	adds	r3, #16
 8023b64:	429a      	cmp	r2, r3
 8023b66:	bf2c      	ite	cs
 8023b68:	2301      	movcs	r3, #1
 8023b6a:	2300      	movcc	r3, #0
 8023b6c:	b2db      	uxtb	r3, r3
}
 8023b6e:	4618      	mov	r0, r3
 8023b70:	3708      	adds	r7, #8
 8023b72:	46bd      	mov	sp, r7
 8023b74:	bd80      	pop	{r7, pc}

08023b76 <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8023b76:	b590      	push	{r4, r7, lr}
 8023b78:	b085      	sub	sp, #20
 8023b7a:	af00      	add	r7, sp, #0
 8023b7c:	6078      	str	r0, [r7, #4]
 8023b7e:	6039      	str	r1, [r7, #0]
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 8023b80:	6878      	ldr	r0, [r7, #4]
 8023b82:	f7ff fd75 	bl	8023670 <block_to_ptr>
 8023b86:	4602      	mov	r2, r0
 8023b88:	2104      	movs	r1, #4
 8023b8a:	683b      	ldr	r3, [r7, #0]
 8023b8c:	1a5b      	subs	r3, r3, r1
 8023b8e:	4619      	mov	r1, r3
 8023b90:	4610      	mov	r0, r2
 8023b92:	f7ff fd7a 	bl	802368a <offset_to_block>
 8023b96:	60f8      	str	r0, [r7, #12]

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8023b98:	6878      	ldr	r0, [r7, #4]
 8023b9a:	f7ff fcc4 	bl	8023526 <block_size>
 8023b9e:	4602      	mov	r2, r0
 8023ba0:	2104      	movs	r1, #4
 8023ba2:	683b      	ldr	r3, [r7, #0]
 8023ba4:	440b      	add	r3, r1
 8023ba6:	1ad3      	subs	r3, r2, r3
 8023ba8:	60bb      	str	r3, [r7, #8]

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8023baa:	68f8      	ldr	r0, [r7, #12]
 8023bac:	f7ff fd60 	bl	8023670 <block_to_ptr>
 8023bb0:	4604      	mov	r4, r0
 8023bb2:	68f8      	ldr	r0, [r7, #12]
 8023bb4:	f7ff fd5c 	bl	8023670 <block_to_ptr>
 8023bb8:	4603      	mov	r3, r0
 8023bba:	2104      	movs	r1, #4
 8023bbc:	4618      	mov	r0, r3
 8023bbe:	f7ff fe05 	bl	80237cc <align_ptr>
 8023bc2:	4603      	mov	r3, r0
 8023bc4:	429c      	cmp	r4, r3
 8023bc6:	d000      	beq.n	8023bca <block_split+0x54>
 8023bc8:	e7fe      	b.n	8023bc8 <block_split+0x52>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8023bca:	6878      	ldr	r0, [r7, #4]
 8023bcc:	f7ff fcab 	bl	8023526 <block_size>
 8023bd0:	4601      	mov	r1, r0
 8023bd2:	68ba      	ldr	r2, [r7, #8]
 8023bd4:	683b      	ldr	r3, [r7, #0]
 8023bd6:	4413      	add	r3, r2
 8023bd8:	2204      	movs	r2, #4
 8023bda:	4413      	add	r3, r2
 8023bdc:	4299      	cmp	r1, r3
 8023bde:	d000      	beq.n	8023be2 <block_split+0x6c>
 8023be0:	e7fe      	b.n	8023be0 <block_split+0x6a>
    block_set_size(remaining, remain_size);
 8023be2:	68b9      	ldr	r1, [r7, #8]
 8023be4:	68f8      	ldr	r0, [r7, #12]
 8023be6:	f7ff fcaf 	bl	8023548 <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8023bea:	68f8      	ldr	r0, [r7, #12]
 8023bec:	f7ff fc9b 	bl	8023526 <block_size>
 8023bf0:	4603      	mov	r3, r0
 8023bf2:	220c      	movs	r2, #12
 8023bf4:	4293      	cmp	r3, r2
 8023bf6:	d200      	bcs.n	8023bfa <block_split+0x84>
 8023bf8:	e7fe      	b.n	8023bf8 <block_split+0x82>

    block_set_size(block, size);
 8023bfa:	6839      	ldr	r1, [r7, #0]
 8023bfc:	6878      	ldr	r0, [r7, #4]
 8023bfe:	f7ff fca3 	bl	8023548 <block_set_size>
    block_mark_as_free(remaining);
 8023c02:	68f8      	ldr	r0, [r7, #12]
 8023c04:	f7ff fd8f 	bl	8023726 <block_mark_as_free>

    return remaining;
 8023c08:	68fb      	ldr	r3, [r7, #12]
}
 8023c0a:	4618      	mov	r0, r3
 8023c0c:	3714      	adds	r7, #20
 8023c0e:	46bd      	mov	sp, r7
 8023c10:	bd90      	pop	{r4, r7, pc}

08023c12 <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 8023c12:	b580      	push	{r7, lr}
 8023c14:	b082      	sub	sp, #8
 8023c16:	af00      	add	r7, sp, #0
 8023c18:	6078      	str	r0, [r7, #4]
 8023c1a:	6039      	str	r1, [r7, #0]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8023c1c:	6878      	ldr	r0, [r7, #4]
 8023c1e:	f7ff fcaa 	bl	8023576 <block_is_last>
 8023c22:	4603      	mov	r3, r0
 8023c24:	2b00      	cmp	r3, #0
 8023c26:	d000      	beq.n	8023c2a <block_absorb+0x18>
 8023c28:	e7fe      	b.n	8023c28 <block_absorb+0x16>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 8023c2a:	6838      	ldr	r0, [r7, #0]
 8023c2c:	f7ff fc7b 	bl	8023526 <block_size>
 8023c30:	4603      	mov	r3, r0
 8023c32:	2204      	movs	r2, #4
 8023c34:	441a      	add	r2, r3
 8023c36:	687b      	ldr	r3, [r7, #4]
 8023c38:	685b      	ldr	r3, [r3, #4]
 8023c3a:	441a      	add	r2, r3
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	605a      	str	r2, [r3, #4]
    block_link_next(prev);
 8023c40:	6878      	ldr	r0, [r7, #4]
 8023c42:	f7ff fd60 	bl	8023706 <block_link_next>
    return prev;
 8023c46:	687b      	ldr	r3, [r7, #4]
}
 8023c48:	4618      	mov	r0, r3
 8023c4a:	3708      	adds	r7, #8
 8023c4c:	46bd      	mov	sp, r7
 8023c4e:	bd80      	pop	{r7, pc}

08023c50 <block_merge_prev>:

/* Merge a just-freed block with an adjacent previous free block. */
static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
{
 8023c50:	b580      	push	{r7, lr}
 8023c52:	b084      	sub	sp, #16
 8023c54:	af00      	add	r7, sp, #0
 8023c56:	6078      	str	r0, [r7, #4]
 8023c58:	6039      	str	r1, [r7, #0]
    if(block_is_prev_free(block)) {
 8023c5a:	6838      	ldr	r0, [r7, #0]
 8023c5c:	f7ff fccb 	bl	80235f6 <block_is_prev_free>
 8023c60:	4603      	mov	r3, r0
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	d017      	beq.n	8023c96 <block_merge_prev+0x46>
        block_header_t * prev = block_prev(block);
 8023c66:	6838      	ldr	r0, [r7, #0]
 8023c68:	f7ff fd1d 	bl	80236a6 <block_prev>
 8023c6c:	60f8      	str	r0, [r7, #12]
        tlsf_assert(prev && "prev physical block can't be null");
 8023c6e:	68fb      	ldr	r3, [r7, #12]
 8023c70:	2b00      	cmp	r3, #0
 8023c72:	d100      	bne.n	8023c76 <block_merge_prev+0x26>
 8023c74:	e7fe      	b.n	8023c74 <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8023c76:	68f8      	ldr	r0, [r7, #12]
 8023c78:	f7ff fc8e 	bl	8023598 <block_is_free>
 8023c7c:	4603      	mov	r3, r0
 8023c7e:	2b00      	cmp	r3, #0
 8023c80:	d100      	bne.n	8023c84 <block_merge_prev+0x34>
 8023c82:	e7fe      	b.n	8023c82 <block_merge_prev+0x32>
        block_remove(control, prev);
 8023c84:	68f9      	ldr	r1, [r7, #12]
 8023c86:	6878      	ldr	r0, [r7, #4]
 8023c88:	f7ff ff2f 	bl	8023aea <block_remove>
        block = block_absorb(prev, block);
 8023c8c:	6839      	ldr	r1, [r7, #0]
 8023c8e:	68f8      	ldr	r0, [r7, #12]
 8023c90:	f7ff ffbf 	bl	8023c12 <block_absorb>
 8023c94:	6038      	str	r0, [r7, #0]
    }

    return block;
 8023c96:	683b      	ldr	r3, [r7, #0]
}
 8023c98:	4618      	mov	r0, r3
 8023c9a:	3710      	adds	r7, #16
 8023c9c:	46bd      	mov	sp, r7
 8023c9e:	bd80      	pop	{r7, pc}

08023ca0 <block_merge_next>:

/* Merge a just-freed block with an adjacent free block. */
static block_header_t * block_merge_next(control_t * control, block_header_t * block)
{
 8023ca0:	b580      	push	{r7, lr}
 8023ca2:	b084      	sub	sp, #16
 8023ca4:	af00      	add	r7, sp, #0
 8023ca6:	6078      	str	r0, [r7, #4]
 8023ca8:	6039      	str	r1, [r7, #0]
    block_header_t * next = block_next(block);
 8023caa:	6838      	ldr	r0, [r7, #0]
 8023cac:	f7ff fd0c 	bl	80236c8 <block_next>
 8023cb0:	60f8      	str	r0, [r7, #12]
    tlsf_assert(next && "next physical block can't be null");
 8023cb2:	68fb      	ldr	r3, [r7, #12]
 8023cb4:	2b00      	cmp	r3, #0
 8023cb6:	d100      	bne.n	8023cba <block_merge_next+0x1a>
 8023cb8:	e7fe      	b.n	8023cb8 <block_merge_next+0x18>

    if(block_is_free(next)) {
 8023cba:	68f8      	ldr	r0, [r7, #12]
 8023cbc:	f7ff fc6c 	bl	8023598 <block_is_free>
 8023cc0:	4603      	mov	r3, r0
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	d00f      	beq.n	8023ce6 <block_merge_next+0x46>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8023cc6:	6838      	ldr	r0, [r7, #0]
 8023cc8:	f7ff fc55 	bl	8023576 <block_is_last>
 8023ccc:	4603      	mov	r3, r0
 8023cce:	2b00      	cmp	r3, #0
 8023cd0:	d000      	beq.n	8023cd4 <block_merge_next+0x34>
 8023cd2:	e7fe      	b.n	8023cd2 <block_merge_next+0x32>
        block_remove(control, next);
 8023cd4:	68f9      	ldr	r1, [r7, #12]
 8023cd6:	6878      	ldr	r0, [r7, #4]
 8023cd8:	f7ff ff07 	bl	8023aea <block_remove>
        block = block_absorb(block, next);
 8023cdc:	68f9      	ldr	r1, [r7, #12]
 8023cde:	6838      	ldr	r0, [r7, #0]
 8023ce0:	f7ff ff97 	bl	8023c12 <block_absorb>
 8023ce4:	6038      	str	r0, [r7, #0]
    }

    return block;
 8023ce6:	683b      	ldr	r3, [r7, #0]
}
 8023ce8:	4618      	mov	r0, r3
 8023cea:	3710      	adds	r7, #16
 8023cec:	46bd      	mov	sp, r7
 8023cee:	bd80      	pop	{r7, pc}

08023cf0 <block_trim_free>:

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
 8023cf0:	b580      	push	{r7, lr}
 8023cf2:	b086      	sub	sp, #24
 8023cf4:	af00      	add	r7, sp, #0
 8023cf6:	60f8      	str	r0, [r7, #12]
 8023cf8:	60b9      	str	r1, [r7, #8]
 8023cfa:	607a      	str	r2, [r7, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 8023cfc:	68b8      	ldr	r0, [r7, #8]
 8023cfe:	f7ff fc4b 	bl	8023598 <block_is_free>
 8023d02:	4603      	mov	r3, r0
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	d100      	bne.n	8023d0a <block_trim_free+0x1a>
 8023d08:	e7fe      	b.n	8023d08 <block_trim_free+0x18>
    if(block_can_split(block, size)) {
 8023d0a:	6879      	ldr	r1, [r7, #4]
 8023d0c:	68b8      	ldr	r0, [r7, #8]
 8023d0e:	f7ff ff1e 	bl	8023b4e <block_can_split>
 8023d12:	4603      	mov	r3, r0
 8023d14:	2b00      	cmp	r3, #0
 8023d16:	d00e      	beq.n	8023d36 <block_trim_free+0x46>
        block_header_t * remaining_block = block_split(block, size);
 8023d18:	6879      	ldr	r1, [r7, #4]
 8023d1a:	68b8      	ldr	r0, [r7, #8]
 8023d1c:	f7ff ff2b 	bl	8023b76 <block_split>
 8023d20:	6178      	str	r0, [r7, #20]
        block_link_next(block);
 8023d22:	68b8      	ldr	r0, [r7, #8]
 8023d24:	f7ff fcef 	bl	8023706 <block_link_next>
        block_set_prev_free(remaining_block);
 8023d28:	6978      	ldr	r0, [r7, #20]
 8023d2a:	f7ff fc72 	bl	8023612 <block_set_prev_free>
        block_insert(control, remaining_block);
 8023d2e:	6979      	ldr	r1, [r7, #20]
 8023d30:	68f8      	ldr	r0, [r7, #12]
 8023d32:	f7ff fef3 	bl	8023b1c <block_insert>
    }
}
 8023d36:	bf00      	nop
 8023d38:	3718      	adds	r7, #24
 8023d3a:	46bd      	mov	sp, r7
 8023d3c:	bd80      	pop	{r7, pc}

08023d3e <block_trim_used>:

/* Trim any trailing block space off the end of a used block, return to pool. */
static void block_trim_used(control_t * control, block_header_t * block, size_t size)
{
 8023d3e:	b580      	push	{r7, lr}
 8023d40:	b086      	sub	sp, #24
 8023d42:	af00      	add	r7, sp, #0
 8023d44:	60f8      	str	r0, [r7, #12]
 8023d46:	60b9      	str	r1, [r7, #8]
 8023d48:	607a      	str	r2, [r7, #4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 8023d4a:	68b8      	ldr	r0, [r7, #8]
 8023d4c:	f7ff fc24 	bl	8023598 <block_is_free>
 8023d50:	4603      	mov	r3, r0
 8023d52:	2b00      	cmp	r3, #0
 8023d54:	d000      	beq.n	8023d58 <block_trim_used+0x1a>
 8023d56:	e7fe      	b.n	8023d56 <block_trim_used+0x18>
    if(block_can_split(block, size)) {
 8023d58:	6879      	ldr	r1, [r7, #4]
 8023d5a:	68b8      	ldr	r0, [r7, #8]
 8023d5c:	f7ff fef7 	bl	8023b4e <block_can_split>
 8023d60:	4603      	mov	r3, r0
 8023d62:	2b00      	cmp	r3, #0
 8023d64:	d010      	beq.n	8023d88 <block_trim_used+0x4a>
        /* If the next block is free, we must coalesce. */
        block_header_t * remaining_block = block_split(block, size);
 8023d66:	6879      	ldr	r1, [r7, #4]
 8023d68:	68b8      	ldr	r0, [r7, #8]
 8023d6a:	f7ff ff04 	bl	8023b76 <block_split>
 8023d6e:	6178      	str	r0, [r7, #20]
        block_set_prev_used(remaining_block);
 8023d70:	6978      	ldr	r0, [r7, #20]
 8023d72:	f7ff fc5e 	bl	8023632 <block_set_prev_used>

        remaining_block = block_merge_next(control, remaining_block);
 8023d76:	6979      	ldr	r1, [r7, #20]
 8023d78:	68f8      	ldr	r0, [r7, #12]
 8023d7a:	f7ff ff91 	bl	8023ca0 <block_merge_next>
 8023d7e:	6178      	str	r0, [r7, #20]
        block_insert(control, remaining_block);
 8023d80:	6979      	ldr	r1, [r7, #20]
 8023d82:	68f8      	ldr	r0, [r7, #12]
 8023d84:	f7ff feca 	bl	8023b1c <block_insert>
    }
}
 8023d88:	bf00      	nop
 8023d8a:	3718      	adds	r7, #24
 8023d8c:	46bd      	mov	sp, r7
 8023d8e:	bd80      	pop	{r7, pc}

08023d90 <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 8023d90:	b580      	push	{r7, lr}
 8023d92:	b086      	sub	sp, #24
 8023d94:	af00      	add	r7, sp, #0
 8023d96:	6078      	str	r0, [r7, #4]
 8023d98:	6039      	str	r1, [r7, #0]
    int fl = 0, sl = 0;
 8023d9a:	2300      	movs	r3, #0
 8023d9c:	613b      	str	r3, [r7, #16]
 8023d9e:	2300      	movs	r3, #0
 8023da0:	60fb      	str	r3, [r7, #12]
    block_header_t * block = 0;
 8023da2:	2300      	movs	r3, #0
 8023da4:	617b      	str	r3, [r7, #20]

    if(size) {
 8023da6:	683b      	ldr	r3, [r7, #0]
 8023da8:	2b00      	cmp	r3, #0
 8023daa:	d013      	beq.n	8023dd4 <block_locate_free+0x44>
        mapping_search(size, &fl, &sl);
 8023dac:	f107 020c 	add.w	r2, r7, #12
 8023db0:	f107 0310 	add.w	r3, r7, #16
 8023db4:	4619      	mov	r1, r3
 8023db6:	6838      	ldr	r0, [r7, #0]
 8023db8:	f7ff fd6d 	bl	8023896 <mapping_search>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 8023dbc:	693b      	ldr	r3, [r7, #16]
 8023dbe:	2b09      	cmp	r3, #9
 8023dc0:	dc08      	bgt.n	8023dd4 <block_locate_free+0x44>
            block = search_suitable_block(control, &fl, &sl);
 8023dc2:	f107 020c 	add.w	r2, r7, #12
 8023dc6:	f107 0310 	add.w	r3, r7, #16
 8023dca:	4619      	mov	r1, r3
 8023dcc:	6878      	ldr	r0, [r7, #4]
 8023dce:	f7ff fd82 	bl	80238d6 <search_suitable_block>
 8023dd2:	6178      	str	r0, [r7, #20]
        }
    }

    if(block) {
 8023dd4:	697b      	ldr	r3, [r7, #20]
 8023dd6:	2b00      	cmp	r3, #0
 8023dd8:	d00d      	beq.n	8023df6 <block_locate_free+0x66>
        tlsf_assert(block_size(block) >= size);
 8023dda:	6978      	ldr	r0, [r7, #20]
 8023ddc:	f7ff fba3 	bl	8023526 <block_size>
 8023de0:	4602      	mov	r2, r0
 8023de2:	683b      	ldr	r3, [r7, #0]
 8023de4:	4293      	cmp	r3, r2
 8023de6:	d900      	bls.n	8023dea <block_locate_free+0x5a>
 8023de8:	e7fe      	b.n	8023de8 <block_locate_free+0x58>
        remove_free_block(control, block, fl, sl);
 8023dea:	693a      	ldr	r2, [r7, #16]
 8023dec:	68fb      	ldr	r3, [r7, #12]
 8023dee:	6979      	ldr	r1, [r7, #20]
 8023df0:	6878      	ldr	r0, [r7, #4]
 8023df2:	f7ff fdc1 	bl	8023978 <remove_free_block>
    }

    return block;
 8023df6:	697b      	ldr	r3, [r7, #20]
}
 8023df8:	4618      	mov	r0, r3
 8023dfa:	3718      	adds	r7, #24
 8023dfc:	46bd      	mov	sp, r7
 8023dfe:	bd80      	pop	{r7, pc}

08023e00 <block_prepare_used>:

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 8023e00:	b580      	push	{r7, lr}
 8023e02:	b086      	sub	sp, #24
 8023e04:	af00      	add	r7, sp, #0
 8023e06:	60f8      	str	r0, [r7, #12]
 8023e08:	60b9      	str	r1, [r7, #8]
 8023e0a:	607a      	str	r2, [r7, #4]
    void * p = 0;
 8023e0c:	2300      	movs	r3, #0
 8023e0e:	617b      	str	r3, [r7, #20]
    if(block) {
 8023e10:	68bb      	ldr	r3, [r7, #8]
 8023e12:	2b00      	cmp	r3, #0
 8023e14:	d00f      	beq.n	8023e36 <block_prepare_used+0x36>
        tlsf_assert(size && "size must be non-zero");
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	2b00      	cmp	r3, #0
 8023e1a:	d100      	bne.n	8023e1e <block_prepare_used+0x1e>
 8023e1c:	e7fe      	b.n	8023e1c <block_prepare_used+0x1c>
        block_trim_free(control, block, size);
 8023e1e:	687a      	ldr	r2, [r7, #4]
 8023e20:	68b9      	ldr	r1, [r7, #8]
 8023e22:	68f8      	ldr	r0, [r7, #12]
 8023e24:	f7ff ff64 	bl	8023cf0 <block_trim_free>
        block_mark_as_used(block);
 8023e28:	68b8      	ldr	r0, [r7, #8]
 8023e2a:	f7ff fc8e 	bl	802374a <block_mark_as_used>
        p = block_to_ptr(block);
 8023e2e:	68b8      	ldr	r0, [r7, #8]
 8023e30:	f7ff fc1e 	bl	8023670 <block_to_ptr>
 8023e34:	6178      	str	r0, [r7, #20]
    }
    return p;
 8023e36:	697b      	ldr	r3, [r7, #20]
}
 8023e38:	4618      	mov	r0, r3
 8023e3a:	3718      	adds	r7, #24
 8023e3c:	46bd      	mov	sp, r7
 8023e3e:	bd80      	pop	{r7, pc}

08023e40 <control_constructor>:

/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
 8023e40:	b480      	push	{r7}
 8023e42:	b085      	sub	sp, #20
 8023e44:	af00      	add	r7, sp, #0
 8023e46:	6078      	str	r0, [r7, #4]
    int i, j;

    control->block_null.next_free = &control->block_null;
 8023e48:	687a      	ldr	r2, [r7, #4]
 8023e4a:	687b      	ldr	r3, [r7, #4]
 8023e4c:	609a      	str	r2, [r3, #8]
    control->block_null.prev_free = &control->block_null;
 8023e4e:	687a      	ldr	r2, [r7, #4]
 8023e50:	687b      	ldr	r3, [r7, #4]
 8023e52:	60da      	str	r2, [r3, #12]

    control->fl_bitmap = 0;
 8023e54:	687b      	ldr	r3, [r7, #4]
 8023e56:	2200      	movs	r2, #0
 8023e58:	611a      	str	r2, [r3, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8023e5a:	2300      	movs	r3, #0
 8023e5c:	60fb      	str	r3, [r7, #12]
 8023e5e:	e01c      	b.n	8023e9a <control_constructor+0x5a>
        control->sl_bitmap[i] = 0;
 8023e60:	687a      	ldr	r2, [r7, #4]
 8023e62:	68fb      	ldr	r3, [r7, #12]
 8023e64:	3304      	adds	r3, #4
 8023e66:	009b      	lsls	r3, r3, #2
 8023e68:	4413      	add	r3, r2
 8023e6a:	2200      	movs	r2, #0
 8023e6c:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8023e6e:	2300      	movs	r3, #0
 8023e70:	60bb      	str	r3, [r7, #8]
 8023e72:	e00c      	b.n	8023e8e <control_constructor+0x4e>
            control->blocks[i][j] = &control->block_null;
 8023e74:	687a      	ldr	r2, [r7, #4]
 8023e76:	6879      	ldr	r1, [r7, #4]
 8023e78:	68fb      	ldr	r3, [r7, #12]
 8023e7a:	0158      	lsls	r0, r3, #5
 8023e7c:	68bb      	ldr	r3, [r7, #8]
 8023e7e:	4403      	add	r3, r0
 8023e80:	330e      	adds	r3, #14
 8023e82:	009b      	lsls	r3, r3, #2
 8023e84:	440b      	add	r3, r1
 8023e86:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8023e88:	68bb      	ldr	r3, [r7, #8]
 8023e8a:	3301      	adds	r3, #1
 8023e8c:	60bb      	str	r3, [r7, #8]
 8023e8e:	68bb      	ldr	r3, [r7, #8]
 8023e90:	2b1f      	cmp	r3, #31
 8023e92:	ddef      	ble.n	8023e74 <control_constructor+0x34>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8023e94:	68fb      	ldr	r3, [r7, #12]
 8023e96:	3301      	adds	r3, #1
 8023e98:	60fb      	str	r3, [r7, #12]
 8023e9a:	68fb      	ldr	r3, [r7, #12]
 8023e9c:	2b09      	cmp	r3, #9
 8023e9e:	dddf      	ble.n	8023e60 <control_constructor+0x20>
        }
    }
}
 8023ea0:	bf00      	nop
 8023ea2:	bf00      	nop
 8023ea4:	3714      	adds	r7, #20
 8023ea6:	46bd      	mov	sp, r7
 8023ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eac:	4770      	bx	lr

08023eae <lv_tlsf_size>:
/*
** Size of the TLSF structures in a given memory block passed to
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
 8023eae:	b480      	push	{r7}
 8023eb0:	af00      	add	r7, sp, #0
    return sizeof(control_t);
 8023eb2:	f240 533c 	movw	r3, #1340	; 0x53c
}
 8023eb6:	4618      	mov	r0, r3
 8023eb8:	46bd      	mov	sp, r7
 8023eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ebe:	4770      	bx	lr

08023ec0 <lv_tlsf_pool_overhead>:
** Overhead of the TLSF structures in a given memory block passed to
** lv_tlsf_add_pool, equal to the overhead of a free block and the
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
 8023ec0:	b480      	push	{r7}
 8023ec2:	af00      	add	r7, sp, #0
    return 2 * block_header_overhead;
 8023ec4:	2304      	movs	r3, #4
 8023ec6:	005b      	lsls	r3, r3, #1
}
 8023ec8:	4618      	mov	r0, r3
 8023eca:	46bd      	mov	sp, r7
 8023ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ed0:	4770      	bx	lr

08023ed2 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 8023ed2:	b580      	push	{r7, lr}
 8023ed4:	b088      	sub	sp, #32
 8023ed6:	af00      	add	r7, sp, #0
 8023ed8:	60f8      	str	r0, [r7, #12]
 8023eda:	60b9      	str	r1, [r7, #8]
 8023edc:	607a      	str	r2, [r7, #4]
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 8023ede:	f7ff ffef 	bl	8023ec0 <lv_tlsf_pool_overhead>
 8023ee2:	61f8      	str	r0, [r7, #28]
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8023ee4:	687a      	ldr	r2, [r7, #4]
 8023ee6:	69fb      	ldr	r3, [r7, #28]
 8023ee8:	1ad3      	subs	r3, r2, r3
 8023eea:	2104      	movs	r1, #4
 8023eec:	4618      	mov	r0, r3
 8023eee:	f7ff fc57 	bl	80237a0 <align_down>
 8023ef2:	61b8      	str	r0, [r7, #24]

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8023ef4:	68bb      	ldr	r3, [r7, #8]
 8023ef6:	f003 0303 	and.w	r3, r3, #3
 8023efa:	2b00      	cmp	r3, #0
 8023efc:	d001      	beq.n	8023f02 <lv_tlsf_add_pool+0x30>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 8023efe:	2300      	movs	r3, #0
 8023f00:	e02e      	b.n	8023f60 <lv_tlsf_add_pool+0x8e>
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 8023f02:	220c      	movs	r2, #12
 8023f04:	69bb      	ldr	r3, [r7, #24]
 8023f06:	4293      	cmp	r3, r2
 8023f08:	d304      	bcc.n	8023f14 <lv_tlsf_add_pool+0x42>
 8023f0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023f0e:	69bb      	ldr	r3, [r7, #24]
 8023f10:	4293      	cmp	r3, r2
 8023f12:	d901      	bls.n	8023f18 <lv_tlsf_add_pool+0x46>
#else
        printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
               (unsigned int)(pool_overhead + block_size_min),
               (unsigned int)(pool_overhead + block_size_max));
#endif
        return 0;
 8023f14:	2300      	movs	r3, #0
 8023f16:	e023      	b.n	8023f60 <lv_tlsf_add_pool+0x8e>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 8023f18:	2304      	movs	r3, #4
 8023f1a:	425b      	negs	r3, r3
 8023f1c:	4619      	mov	r1, r3
 8023f1e:	68b8      	ldr	r0, [r7, #8]
 8023f20:	f7ff fbb3 	bl	802368a <offset_to_block>
 8023f24:	6178      	str	r0, [r7, #20]
    block_set_size(block, pool_bytes);
 8023f26:	69b9      	ldr	r1, [r7, #24]
 8023f28:	6978      	ldr	r0, [r7, #20]
 8023f2a:	f7ff fb0d 	bl	8023548 <block_set_size>
    block_set_free(block);
 8023f2e:	6978      	ldr	r0, [r7, #20]
 8023f30:	f7ff fb40 	bl	80235b4 <block_set_free>
    block_set_prev_used(block);
 8023f34:	6978      	ldr	r0, [r7, #20]
 8023f36:	f7ff fb7c 	bl	8023632 <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 8023f3a:	6979      	ldr	r1, [r7, #20]
 8023f3c:	68f8      	ldr	r0, [r7, #12]
 8023f3e:	f7ff fded 	bl	8023b1c <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8023f42:	6978      	ldr	r0, [r7, #20]
 8023f44:	f7ff fbdf 	bl	8023706 <block_link_next>
 8023f48:	6138      	str	r0, [r7, #16]
    block_set_size(next, 0);
 8023f4a:	2100      	movs	r1, #0
 8023f4c:	6938      	ldr	r0, [r7, #16]
 8023f4e:	f7ff fafb 	bl	8023548 <block_set_size>
    block_set_used(next);
 8023f52:	6938      	ldr	r0, [r7, #16]
 8023f54:	f7ff fb3e 	bl	80235d4 <block_set_used>
    block_set_prev_free(next);
 8023f58:	6938      	ldr	r0, [r7, #16]
 8023f5a:	f7ff fb5a 	bl	8023612 <block_set_prev_free>

    return mem;
 8023f5e:	68bb      	ldr	r3, [r7, #8]
}
 8023f60:	4618      	mov	r0, r3
 8023f62:	3720      	adds	r7, #32
 8023f64:	46bd      	mov	sp, r7
 8023f66:	bd80      	pop	{r7, pc}

08023f68 <lv_tlsf_create>:
    return rv;
}
#endif

lv_tlsf_t lv_tlsf_create(void * mem)
{
 8023f68:	b580      	push	{r7, lr}
 8023f6a:	b082      	sub	sp, #8
 8023f6c:	af00      	add	r7, sp, #0
 8023f6e:	6078      	str	r0, [r7, #4]
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	f003 0303 	and.w	r3, r3, #3
 8023f76:	2b00      	cmp	r3, #0
 8023f78:	d001      	beq.n	8023f7e <lv_tlsf_create+0x16>
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 8023f7a:	2300      	movs	r3, #0
 8023f7c:	e003      	b.n	8023f86 <lv_tlsf_create+0x1e>
    }

    control_constructor(tlsf_cast(control_t *, mem));
 8023f7e:	6878      	ldr	r0, [r7, #4]
 8023f80:	f7ff ff5e 	bl	8023e40 <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 8023f84:	687b      	ldr	r3, [r7, #4]
}
 8023f86:	4618      	mov	r0, r3
 8023f88:	3708      	adds	r7, #8
 8023f8a:	46bd      	mov	sp, r7
 8023f8c:	bd80      	pop	{r7, pc}

08023f8e <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8023f8e:	b590      	push	{r4, r7, lr}
 8023f90:	b085      	sub	sp, #20
 8023f92:	af00      	add	r7, sp, #0
 8023f94:	6078      	str	r0, [r7, #4]
 8023f96:	6039      	str	r1, [r7, #0]
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8023f98:	6878      	ldr	r0, [r7, #4]
 8023f9a:	f7ff ffe5 	bl	8023f68 <lv_tlsf_create>
 8023f9e:	60f8      	str	r0, [r7, #12]
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8023fa0:	f7ff ff85 	bl	8023eae <lv_tlsf_size>
 8023fa4:	4602      	mov	r2, r0
 8023fa6:	687b      	ldr	r3, [r7, #4]
 8023fa8:	189c      	adds	r4, r3, r2
 8023faa:	f7ff ff80 	bl	8023eae <lv_tlsf_size>
 8023fae:	4602      	mov	r2, r0
 8023fb0:	683b      	ldr	r3, [r7, #0]
 8023fb2:	1a9b      	subs	r3, r3, r2
 8023fb4:	461a      	mov	r2, r3
 8023fb6:	4621      	mov	r1, r4
 8023fb8:	68f8      	ldr	r0, [r7, #12]
 8023fba:	f7ff ff8a 	bl	8023ed2 <lv_tlsf_add_pool>
    return tlsf;
 8023fbe:	68fb      	ldr	r3, [r7, #12]
}
 8023fc0:	4618      	mov	r0, r3
 8023fc2:	3714      	adds	r7, #20
 8023fc4:	46bd      	mov	sp, r7
 8023fc6:	bd90      	pop	{r4, r7, pc}

08023fc8 <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8023fc8:	b580      	push	{r7, lr}
 8023fca:	b086      	sub	sp, #24
 8023fcc:	af00      	add	r7, sp, #0
 8023fce:	6078      	str	r0, [r7, #4]
 8023fd0:	6039      	str	r1, [r7, #0]
    control_t * control = tlsf_cast(control_t *, tlsf);
 8023fd2:	687b      	ldr	r3, [r7, #4]
 8023fd4:	617b      	str	r3, [r7, #20]
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8023fd6:	2104      	movs	r1, #4
 8023fd8:	6838      	ldr	r0, [r7, #0]
 8023fda:	f7ff fc12 	bl	8023802 <adjust_request_size>
 8023fde:	6138      	str	r0, [r7, #16]
    block_header_t * block = block_locate_free(control, adjust);
 8023fe0:	6939      	ldr	r1, [r7, #16]
 8023fe2:	6978      	ldr	r0, [r7, #20]
 8023fe4:	f7ff fed4 	bl	8023d90 <block_locate_free>
 8023fe8:	60f8      	str	r0, [r7, #12]
    return block_prepare_used(control, block, adjust);
 8023fea:	693a      	ldr	r2, [r7, #16]
 8023fec:	68f9      	ldr	r1, [r7, #12]
 8023fee:	6978      	ldr	r0, [r7, #20]
 8023ff0:	f7ff ff06 	bl	8023e00 <block_prepare_used>
 8023ff4:	4603      	mov	r3, r0
}
 8023ff6:	4618      	mov	r0, r3
 8023ff8:	3718      	adds	r7, #24
 8023ffa:	46bd      	mov	sp, r7
 8023ffc:	bd80      	pop	{r7, pc}

08023ffe <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8023ffe:	b580      	push	{r7, lr}
 8024000:	b086      	sub	sp, #24
 8024002:	af00      	add	r7, sp, #0
 8024004:	6078      	str	r0, [r7, #4]
 8024006:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8024008:	2300      	movs	r3, #0
 802400a:	617b      	str	r3, [r7, #20]
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 802400c:	683b      	ldr	r3, [r7, #0]
 802400e:	2b00      	cmp	r3, #0
 8024010:	d020      	beq.n	8024054 <lv_tlsf_free+0x56>
        control_t * control = tlsf_cast(control_t *, tlsf);
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	613b      	str	r3, [r7, #16]
        block_header_t * block = block_from_ptr(ptr);
 8024016:	6838      	ldr	r0, [r7, #0]
 8024018:	f7ff fb1c 	bl	8023654 <block_from_ptr>
 802401c:	60f8      	str	r0, [r7, #12]
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 802401e:	68f8      	ldr	r0, [r7, #12]
 8024020:	f7ff faba 	bl	8023598 <block_is_free>
 8024024:	4603      	mov	r3, r0
 8024026:	2b00      	cmp	r3, #0
 8024028:	d000      	beq.n	802402c <lv_tlsf_free+0x2e>
 802402a:	e7fe      	b.n	802402a <lv_tlsf_free+0x2c>
        size = block->size;
 802402c:	68fb      	ldr	r3, [r7, #12]
 802402e:	685b      	ldr	r3, [r3, #4]
 8024030:	617b      	str	r3, [r7, #20]
        block_mark_as_free(block);
 8024032:	68f8      	ldr	r0, [r7, #12]
 8024034:	f7ff fb77 	bl	8023726 <block_mark_as_free>
        block = block_merge_prev(control, block);
 8024038:	68f9      	ldr	r1, [r7, #12]
 802403a:	6938      	ldr	r0, [r7, #16]
 802403c:	f7ff fe08 	bl	8023c50 <block_merge_prev>
 8024040:	60f8      	str	r0, [r7, #12]
        block = block_merge_next(control, block);
 8024042:	68f9      	ldr	r1, [r7, #12]
 8024044:	6938      	ldr	r0, [r7, #16]
 8024046:	f7ff fe2b 	bl	8023ca0 <block_merge_next>
 802404a:	60f8      	str	r0, [r7, #12]
        block_insert(control, block);
 802404c:	68f9      	ldr	r1, [r7, #12]
 802404e:	6938      	ldr	r0, [r7, #16]
 8024050:	f7ff fd64 	bl	8023b1c <block_insert>
    }

    return size;
 8024054:	697b      	ldr	r3, [r7, #20]
}
 8024056:	4618      	mov	r0, r3
 8024058:	3718      	adds	r7, #24
 802405a:	46bd      	mov	sp, r7
 802405c:	bd80      	pop	{r7, pc}

0802405e <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 802405e:	b580      	push	{r7, lr}
 8024060:	b08c      	sub	sp, #48	; 0x30
 8024062:	af00      	add	r7, sp, #0
 8024064:	60f8      	str	r0, [r7, #12]
 8024066:	60b9      	str	r1, [r7, #8]
 8024068:	607a      	str	r2, [r7, #4]
    control_t * control = tlsf_cast(control_t *, tlsf);
 802406a:	68fb      	ldr	r3, [r7, #12]
 802406c:	62bb      	str	r3, [r7, #40]	; 0x28
    void * p = 0;
 802406e:	2300      	movs	r3, #0
 8024070:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8024072:	68bb      	ldr	r3, [r7, #8]
 8024074:	2b00      	cmp	r3, #0
 8024076:	d007      	beq.n	8024088 <lv_tlsf_realloc+0x2a>
 8024078:	687b      	ldr	r3, [r7, #4]
 802407a:	2b00      	cmp	r3, #0
 802407c:	d104      	bne.n	8024088 <lv_tlsf_realloc+0x2a>
        lv_tlsf_free(tlsf, ptr);
 802407e:	68b9      	ldr	r1, [r7, #8]
 8024080:	68f8      	ldr	r0, [r7, #12]
 8024082:	f7ff ffbc 	bl	8023ffe <lv_tlsf_free>
 8024086:	e06a      	b.n	802415e <lv_tlsf_realloc+0x100>
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 8024088:	68bb      	ldr	r3, [r7, #8]
 802408a:	2b00      	cmp	r3, #0
 802408c:	d105      	bne.n	802409a <lv_tlsf_realloc+0x3c>
        p = lv_tlsf_malloc(tlsf, size);
 802408e:	6879      	ldr	r1, [r7, #4]
 8024090:	68f8      	ldr	r0, [r7, #12]
 8024092:	f7ff ff99 	bl	8023fc8 <lv_tlsf_malloc>
 8024096:	62f8      	str	r0, [r7, #44]	; 0x2c
 8024098:	e061      	b.n	802415e <lv_tlsf_realloc+0x100>
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 802409a:	68b8      	ldr	r0, [r7, #8]
 802409c:	f7ff fada 	bl	8023654 <block_from_ptr>
 80240a0:	6278      	str	r0, [r7, #36]	; 0x24
        block_header_t * next = block_next(block);
 80240a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80240a4:	f7ff fb10 	bl	80236c8 <block_next>
 80240a8:	6238      	str	r0, [r7, #32]

        const size_t cursize = block_size(block);
 80240aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80240ac:	f7ff fa3b 	bl	8023526 <block_size>
 80240b0:	61f8      	str	r0, [r7, #28]
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 80240b2:	6a38      	ldr	r0, [r7, #32]
 80240b4:	f7ff fa37 	bl	8023526 <block_size>
 80240b8:	4602      	mov	r2, r0
 80240ba:	69fb      	ldr	r3, [r7, #28]
 80240bc:	4413      	add	r3, r2
 80240be:	2204      	movs	r2, #4
 80240c0:	4413      	add	r3, r2
 80240c2:	61bb      	str	r3, [r7, #24]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80240c4:	2104      	movs	r1, #4
 80240c6:	6878      	ldr	r0, [r7, #4]
 80240c8:	f7ff fb9b 	bl	8023802 <adjust_request_size>
 80240cc:	6178      	str	r0, [r7, #20]
        if(size > cursize && adjust == 0) {
 80240ce:	687a      	ldr	r2, [r7, #4]
 80240d0:	69fb      	ldr	r3, [r7, #28]
 80240d2:	429a      	cmp	r2, r3
 80240d4:	d904      	bls.n	80240e0 <lv_tlsf_realloc+0x82>
 80240d6:	697b      	ldr	r3, [r7, #20]
 80240d8:	2b00      	cmp	r3, #0
 80240da:	d101      	bne.n	80240e0 <lv_tlsf_realloc+0x82>
            /* The request is probably too large, fail */
            return NULL;
 80240dc:	2300      	movs	r3, #0
 80240de:	e03f      	b.n	8024160 <lv_tlsf_realloc+0x102>
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80240e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80240e2:	f7ff fa59 	bl	8023598 <block_is_free>
 80240e6:	4603      	mov	r3, r0
 80240e8:	2b00      	cmp	r3, #0
 80240ea:	d000      	beq.n	80240ee <lv_tlsf_realloc+0x90>
 80240ec:	e7fe      	b.n	80240ec <lv_tlsf_realloc+0x8e>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80240ee:	697a      	ldr	r2, [r7, #20]
 80240f0:	69fb      	ldr	r3, [r7, #28]
 80240f2:	429a      	cmp	r2, r3
 80240f4:	d921      	bls.n	802413a <lv_tlsf_realloc+0xdc>
 80240f6:	6a38      	ldr	r0, [r7, #32]
 80240f8:	f7ff fa4e 	bl	8023598 <block_is_free>
 80240fc:	4603      	mov	r3, r0
 80240fe:	2b00      	cmp	r3, #0
 8024100:	d003      	beq.n	802410a <lv_tlsf_realloc+0xac>
 8024102:	697a      	ldr	r2, [r7, #20]
 8024104:	69bb      	ldr	r3, [r7, #24]
 8024106:	429a      	cmp	r2, r3
 8024108:	d917      	bls.n	802413a <lv_tlsf_realloc+0xdc>
            p = lv_tlsf_malloc(tlsf, size);
 802410a:	6879      	ldr	r1, [r7, #4]
 802410c:	68f8      	ldr	r0, [r7, #12]
 802410e:	f7ff ff5b 	bl	8023fc8 <lv_tlsf_malloc>
 8024112:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(p) {
 8024114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024116:	2b00      	cmp	r3, #0
 8024118:	d021      	beq.n	802415e <lv_tlsf_realloc+0x100>
                const size_t minsize = tlsf_min(cursize, size);
 802411a:	687a      	ldr	r2, [r7, #4]
 802411c:	69fb      	ldr	r3, [r7, #28]
 802411e:	4293      	cmp	r3, r2
 8024120:	bf28      	it	cs
 8024122:	4613      	movcs	r3, r2
 8024124:	613b      	str	r3, [r7, #16]
                lv_memcpy(p, ptr, minsize);
 8024126:	693a      	ldr	r2, [r7, #16]
 8024128:	68b9      	ldr	r1, [r7, #8]
 802412a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802412c:	f7fd ff76 	bl	802201c <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 8024130:	68b9      	ldr	r1, [r7, #8]
 8024132:	68f8      	ldr	r0, [r7, #12]
 8024134:	f7ff ff63 	bl	8023ffe <lv_tlsf_free>
            if(p) {
 8024138:	e011      	b.n	802415e <lv_tlsf_realloc+0x100>
            }
        }
        else {
            /* Do we need to expand to the next block? */
            if(adjust > cursize) {
 802413a:	697a      	ldr	r2, [r7, #20]
 802413c:	69fb      	ldr	r3, [r7, #28]
 802413e:	429a      	cmp	r2, r3
 8024140:	d906      	bls.n	8024150 <lv_tlsf_realloc+0xf2>
                block_merge_next(control, block);
 8024142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024146:	f7ff fdab 	bl	8023ca0 <block_merge_next>
                block_mark_as_used(block);
 802414a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802414c:	f7ff fafd 	bl	802374a <block_mark_as_used>
            }

            /* Trim the resulting block and return the original pointer. */
            block_trim_used(control, block, adjust);
 8024150:	697a      	ldr	r2, [r7, #20]
 8024152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024156:	f7ff fdf2 	bl	8023d3e <block_trim_used>
            p = ptr;
 802415a:	68bb      	ldr	r3, [r7, #8]
 802415c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    return p;
 802415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8024160:	4618      	mov	r0, r3
 8024162:	3730      	adds	r7, #48	; 0x30
 8024164:	46bd      	mov	sp, r7
 8024166:	bd80      	pop	{r7, pc}

08024168 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8024168:	b480      	push	{r7}
 802416a:	b083      	sub	sp, #12
 802416c:	af00      	add	r7, sp, #0
 802416e:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8024170:	687b      	ldr	r3, [r7, #4]
 8024172:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8024176:	4618      	mov	r0, r3
 8024178:	370c      	adds	r7, #12
 802417a:	46bd      	mov	sp, r7
 802417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024180:	4770      	bx	lr
	...

08024184 <_lv_txt_is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool _lv_txt_is_break_char(uint32_t letter)
{
 8024184:	b480      	push	{r7}
 8024186:	b085      	sub	sp, #20
 8024188:	af00      	add	r7, sp, #0
 802418a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 802418c:	2300      	movs	r3, #0
 802418e:	73bb      	strb	r3, [r7, #14]

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8024190:	687b      	ldr	r3, [r7, #4]
 8024192:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 8024196:	d306      	bcc.n	80241a6 <_lv_txt_is_break_char+0x22>
 8024198:	687b      	ldr	r3, [r7, #4]
 802419a:	f649 72a5 	movw	r2, #40869	; 0x9fa5
 802419e:	4293      	cmp	r3, r2
 80241a0:	d801      	bhi.n	80241a6 <_lv_txt_is_break_char+0x22>
        return true;
 80241a2:	2301      	movs	r3, #1
 80241a4:	e015      	b.n	80241d2 <_lv_txt_is_break_char+0x4e>
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80241a6:	2300      	movs	r3, #0
 80241a8:	73fb      	strb	r3, [r7, #15]
 80241aa:	e00c      	b.n	80241c6 <_lv_txt_is_break_char+0x42>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 80241ac:	7bfb      	ldrb	r3, [r7, #15]
 80241ae:	4a0c      	ldr	r2, [pc, #48]	; (80241e0 <_lv_txt_is_break_char+0x5c>)
 80241b0:	5cd3      	ldrb	r3, [r2, r3]
 80241b2:	461a      	mov	r2, r3
 80241b4:	687b      	ldr	r3, [r7, #4]
 80241b6:	4293      	cmp	r3, r2
 80241b8:	d102      	bne.n	80241c0 <_lv_txt_is_break_char+0x3c>
            ret = true; /*If match then it is break char*/
 80241ba:	2301      	movs	r3, #1
 80241bc:	73bb      	strb	r3, [r7, #14]
            break;
 80241be:	e007      	b.n	80241d0 <_lv_txt_is_break_char+0x4c>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80241c0:	7bfb      	ldrb	r3, [r7, #15]
 80241c2:	3301      	adds	r3, #1
 80241c4:	73fb      	strb	r3, [r7, #15]
 80241c6:	7bfb      	ldrb	r3, [r7, #15]
 80241c8:	4a05      	ldr	r2, [pc, #20]	; (80241e0 <_lv_txt_is_break_char+0x5c>)
 80241ca:	5cd3      	ldrb	r3, [r2, r3]
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	d1ed      	bne.n	80241ac <_lv_txt_is_break_char+0x28>
        }
    }

    return ret;
 80241d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80241d2:	4618      	mov	r0, r3
 80241d4:	3714      	adds	r7, #20
 80241d6:	46bd      	mov	sp, r7
 80241d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241dc:	4770      	bx	lr
 80241de:	bf00      	nop
 80241e0:	08026718 	.word	0x08026718

080241e4 <lv_txt_get_size>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_text_flag_t flag)
{
 80241e4:	b580      	push	{r7, lr}
 80241e6:	b08a      	sub	sp, #40	; 0x28
 80241e8:	af02      	add	r7, sp, #8
 80241ea:	60f8      	str	r0, [r7, #12]
 80241ec:	60b9      	str	r1, [r7, #8]
 80241ee:	607a      	str	r2, [r7, #4]
 80241f0:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 80241f2:	68fb      	ldr	r3, [r7, #12]
 80241f4:	2200      	movs	r2, #0
 80241f6:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 80241f8:	68fb      	ldr	r3, [r7, #12]
 80241fa:	2200      	movs	r2, #0
 80241fc:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 80241fe:	68bb      	ldr	r3, [r7, #8]
 8024200:	2b00      	cmp	r3, #0
 8024202:	f000 80a2 	beq.w	802434a <lv_txt_get_size+0x166>
    if(font == NULL) return;
 8024206:	687b      	ldr	r3, [r7, #4]
 8024208:	2b00      	cmp	r3, #0
 802420a:	f000 80a0 	beq.w	802434e <lv_txt_get_size+0x16a>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 802420e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8024212:	f003 0302 	and.w	r3, r3, #2
 8024216:	2b00      	cmp	r3, #0
 8024218:	d002      	beq.n	8024220 <lv_txt_get_size+0x3c>
 802421a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 802421e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 8024220:	2300      	movs	r3, #0
 8024222:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 8024224:	2300      	movs	r3, #0
 8024226:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 8024228:	6878      	ldr	r0, [r7, #4]
 802422a:	f7ff ff9d 	bl	8024168 <lv_font_get_line_height>
 802422e:	4603      	mov	r3, r0
 8024230:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 8024232:	e051      	b.n	80242d8 <lv_txt_get_size+0xf4>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8024234:	68ba      	ldr	r2, [r7, #8]
 8024236:	69fb      	ldr	r3, [r7, #28]
 8024238:	18d0      	adds	r0, r2, r3
 802423a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 802423e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8024242:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8024246:	9301      	str	r3, [sp, #4]
 8024248:	2300      	movs	r3, #0
 802424a:	9300      	str	r3, [sp, #0]
 802424c:	460b      	mov	r3, r1
 802424e:	6879      	ldr	r1, [r7, #4]
 8024250:	f000 f964 	bl	802451c <_lv_txt_get_next_line>
 8024254:	4602      	mov	r2, r0
 8024256:	69bb      	ldr	r3, [r7, #24]
 8024258:	4413      	add	r3, r2
 802425a:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 802425c:	68fb      	ldr	r3, [r7, #12]
 802425e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024262:	461a      	mov	r2, r3
 8024264:	8afb      	ldrh	r3, [r7, #22]
 8024266:	441a      	add	r2, r3
 8024268:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 802426c:	4413      	add	r3, r2
 802426e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024272:	d26e      	bcs.n	8024352 <lv_txt_get_size+0x16e>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 8024274:	68fb      	ldr	r3, [r7, #12]
 8024276:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802427a:	b29a      	uxth	r2, r3
 802427c:	8afb      	ldrh	r3, [r7, #22]
 802427e:	4413      	add	r3, r2
 8024280:	b29b      	uxth	r3, r3
 8024282:	b21a      	sxth	r2, r3
 8024284:	68fb      	ldr	r3, [r7, #12]
 8024286:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 8024288:	68fb      	ldr	r3, [r7, #12]
 802428a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802428e:	b29a      	uxth	r2, r3
 8024290:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8024292:	4413      	add	r3, r2
 8024294:	b29b      	uxth	r3, r3
 8024296:	b21a      	sxth	r2, r3
 8024298:	68fb      	ldr	r3, [r7, #12]
 802429a:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 802429c:	68ba      	ldr	r2, [r7, #8]
 802429e:	69fb      	ldr	r3, [r7, #28]
 80242a0:	18d0      	adds	r0, r2, r3
 80242a2:	69ba      	ldr	r2, [r7, #24]
 80242a4:	69fb      	ldr	r3, [r7, #28]
 80242a6:	1ad1      	subs	r1, r2, r3
 80242a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80242ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80242b0:	9300      	str	r3, [sp, #0]
 80242b2:	4613      	mov	r3, r2
 80242b4:	687a      	ldr	r2, [r7, #4]
 80242b6:	f000 fa0f 	bl	80246d8 <lv_txt_get_width>
 80242ba:	4603      	mov	r3, r0
 80242bc:	82bb      	strh	r3, [r7, #20]
                                                      flag);

        size_res->x = LV_MAX(act_line_length, size_res->x);
 80242be:	68fb      	ldr	r3, [r7, #12]
 80242c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80242c4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80242c8:	4293      	cmp	r3, r2
 80242ca:	bfb8      	it	lt
 80242cc:	4613      	movlt	r3, r2
 80242ce:	b21a      	sxth	r2, r3
 80242d0:	68fb      	ldr	r3, [r7, #12]
 80242d2:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 80242d4:	69bb      	ldr	r3, [r7, #24]
 80242d6:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 80242d8:	68ba      	ldr	r2, [r7, #8]
 80242da:	69fb      	ldr	r3, [r7, #28]
 80242dc:	4413      	add	r3, r2
 80242de:	781b      	ldrb	r3, [r3, #0]
 80242e0:	2b00      	cmp	r3, #0
 80242e2:	d1a7      	bne.n	8024234 <lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80242e4:	69fb      	ldr	r3, [r7, #28]
 80242e6:	2b00      	cmp	r3, #0
 80242e8:	d01a      	beq.n	8024320 <lv_txt_get_size+0x13c>
 80242ea:	69fb      	ldr	r3, [r7, #28]
 80242ec:	3b01      	subs	r3, #1
 80242ee:	68ba      	ldr	r2, [r7, #8]
 80242f0:	4413      	add	r3, r2
 80242f2:	781b      	ldrb	r3, [r3, #0]
 80242f4:	2b0a      	cmp	r3, #10
 80242f6:	d006      	beq.n	8024306 <lv_txt_get_size+0x122>
 80242f8:	69fb      	ldr	r3, [r7, #28]
 80242fa:	3b01      	subs	r3, #1
 80242fc:	68ba      	ldr	r2, [r7, #8]
 80242fe:	4413      	add	r3, r2
 8024300:	781b      	ldrb	r3, [r3, #0]
 8024302:	2b0d      	cmp	r3, #13
 8024304:	d10c      	bne.n	8024320 <lv_txt_get_size+0x13c>
        size_res->y += letter_height + line_space;
 8024306:	68fb      	ldr	r3, [r7, #12]
 8024308:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802430c:	b29a      	uxth	r2, r3
 802430e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8024310:	8afb      	ldrh	r3, [r7, #22]
 8024312:	440b      	add	r3, r1
 8024314:	b29b      	uxth	r3, r3
 8024316:	4413      	add	r3, r2
 8024318:	b29b      	uxth	r3, r3
 802431a:	b21a      	sxth	r2, r3
 802431c:	68fb      	ldr	r3, [r7, #12]
 802431e:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 8024320:	68fb      	ldr	r3, [r7, #12]
 8024322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024326:	2b00      	cmp	r3, #0
 8024328:	d104      	bne.n	8024334 <lv_txt_get_size+0x150>
        size_res->y = letter_height;
 802432a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802432e:	68fb      	ldr	r3, [r7, #12]
 8024330:	805a      	strh	r2, [r3, #2]
 8024332:	e00f      	b.n	8024354 <lv_txt_get_size+0x170>
    else
        size_res->y -= line_space;
 8024334:	68fb      	ldr	r3, [r7, #12]
 8024336:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802433a:	b29a      	uxth	r2, r3
 802433c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802433e:	1ad3      	subs	r3, r2, r3
 8024340:	b29b      	uxth	r3, r3
 8024342:	b21a      	sxth	r2, r3
 8024344:	68fb      	ldr	r3, [r7, #12]
 8024346:	805a      	strh	r2, [r3, #2]
 8024348:	e004      	b.n	8024354 <lv_txt_get_size+0x170>
    if(text == NULL) return;
 802434a:	bf00      	nop
 802434c:	e002      	b.n	8024354 <lv_txt_get_size+0x170>
    if(font == NULL) return;
 802434e:	bf00      	nop
 8024350:	e000      	b.n	8024354 <lv_txt_get_size+0x170>
            return;
 8024352:	bf00      	nop
}
 8024354:	3720      	adds	r7, #32
 8024356:	46bd      	mov	sp, r7
 8024358:	bd80      	pop	{r7, pc}
	...

0802435c <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_text_flag_t flag, uint32_t * word_w_ptr, lv_text_cmd_state_t * cmd_state, bool force)
{
 802435c:	b580      	push	{r7, lr}
 802435e:	b08e      	sub	sp, #56	; 0x38
 8024360:	af00      	add	r7, sp, #0
 8024362:	60f8      	str	r0, [r7, #12]
 8024364:	60b9      	str	r1, [r7, #8]
 8024366:	4611      	mov	r1, r2
 8024368:	461a      	mov	r2, r3
 802436a:	460b      	mov	r3, r1
 802436c:	80fb      	strh	r3, [r7, #6]
 802436e:	4613      	mov	r3, r2
 8024370:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 8024372:	68fb      	ldr	r3, [r7, #12]
 8024374:	2b00      	cmp	r3, #0
 8024376:	d003      	beq.n	8024380 <lv_txt_get_next_word+0x24>
 8024378:	68fb      	ldr	r3, [r7, #12]
 802437a:	781b      	ldrb	r3, [r3, #0]
 802437c:	2b00      	cmp	r3, #0
 802437e:	d101      	bne.n	8024384 <lv_txt_get_next_word+0x28>
 8024380:	2300      	movs	r3, #0
 8024382:	e0c4      	b.n	802450e <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 8024384:	68bb      	ldr	r3, [r7, #8]
 8024386:	2b00      	cmp	r3, #0
 8024388:	d101      	bne.n	802438e <lv_txt_get_next_word+0x32>
 802438a:	2300      	movs	r3, #0
 802438c:	e0bf      	b.n	802450e <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 802438e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8024392:	f003 0302 	and.w	r3, r3, #2
 8024396:	2b00      	cmp	r3, #0
 8024398:	d002      	beq.n	80243a0 <lv_txt_get_next_word+0x44>
 802439a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 802439e:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 80243a0:	2300      	movs	r3, #0
 80243a2:	637b      	str	r3, [r7, #52]	; 0x34
 80243a4:	2300      	movs	r3, #0
 80243a6:	617b      	str	r3, [r7, #20]
 80243a8:	2300      	movs	r3, #0
 80243aa:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /*Letter at i*/
 80243ac:	2300      	movs	r3, #0
 80243ae:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /*Letter at i_next*/
 80243b0:	2300      	movs	r3, #0
 80243b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 80243b4:	2300      	movs	r3, #0
 80243b6:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 80243b8:	2300      	movs	r3, #0
 80243ba:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 80243bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80243c0:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /*Number of characters up to the long word break point*/
 80243c2:	2300      	movs	r3, #0
 80243c4:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 80243c6:	4b54      	ldr	r3, [pc, #336]	; (8024518 <lv_txt_get_next_word+0x1bc>)
 80243c8:	681b      	ldr	r3, [r3, #0]
 80243ca:	f107 0214 	add.w	r2, r7, #20
 80243ce:	4611      	mov	r1, r2
 80243d0:	68f8      	ldr	r0, [r7, #12]
 80243d2:	4798      	blx	r3
 80243d4:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 80243d6:	697b      	ldr	r3, [r7, #20]
 80243d8:	613b      	str	r3, [r7, #16]

    /*Obtain the full word, regardless if it fits or not in max_width*/
    while(txt[i] != '\0') {
 80243da:	e074      	b.n	80244c6 <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80243dc:	4b4e      	ldr	r3, [pc, #312]	; (8024518 <lv_txt_get_next_word+0x1bc>)
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	f107 0210 	add.w	r2, r7, #16
 80243e4:	4611      	mov	r1, r2
 80243e6:	68f8      	ldr	r0, [r7, #12]
 80243e8:	4798      	blx	r3
 80243ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 80243ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243ee:	3301      	adds	r3, #1
 80243f0:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80243f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80243f6:	f003 0301 	and.w	r3, r3, #1
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	d00d      	beq.n	802441a <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 80243fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024400:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8024402:	f000 f9cd 	bl	80247a0 <_lv_txt_is_cmd>
 8024406:	4603      	mov	r3, r0
 8024408:	2b00      	cmp	r3, #0
 802440a:	d006      	beq.n	802441a <lv_txt_get_next_word+0xbe>
                i = i_next;
 802440c:	697b      	ldr	r3, [r7, #20]
 802440e:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 8024410:	693b      	ldr	r3, [r7, #16]
 8024412:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 8024414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024416:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter if it is part of a command*/
 8024418:	e055      	b.n	80244c6 <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 802441a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802441c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802441e:	68b8      	ldr	r0, [r7, #8]
 8024420:	f7fa ffb4 	bl	801f38c <lv_font_get_glyph_width>
 8024424:	4603      	mov	r3, r0
 8024426:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 8024428:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 802442a:	8b7b      	ldrh	r3, [r7, #26]
 802442c:	4413      	add	r3, r2
 802442e:	b29b      	uxth	r3, r3
 8024430:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 8024432:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8024436:	2b00      	cmp	r3, #0
 8024438:	dd04      	ble.n	8024444 <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 802443a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 802443c:	88fb      	ldrh	r3, [r7, #6]
 802443e:	4413      	add	r3, r2
 8024440:	b29b      	uxth	r3, r3
 8024442:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /*Test if this character fits within max_width*/
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8024444:	6a3b      	ldr	r3, [r7, #32]
 8024446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802444a:	d10d      	bne.n	8024468 <lv_txt_get_next_word+0x10c>
 802444c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8024450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8024454:	1ad2      	subs	r2, r2, r3
 8024456:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 802445a:	429a      	cmp	r2, r3
 802445c:	dd04      	ble.n	8024468 <lv_txt_get_next_word+0x10c>
            break_index = i;
 802445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024460:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 8024462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024464:	3b01      	subs	r3, #1
 8024466:	61fb      	str	r3, [r7, #28]
            /*break_index is now pointing at the character that doesn't fit*/
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8024468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802446a:	2b0a      	cmp	r3, #10
 802446c:	d008      	beq.n	8024480 <lv_txt_get_next_word+0x124>
 802446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024470:	2b0d      	cmp	r3, #13
 8024472:	d005      	beq.n	8024480 <lv_txt_get_next_word+0x124>
 8024474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024476:	f7ff fe85 	bl	8024184 <_lv_txt_is_break_char>
 802447a:	4603      	mov	r3, r0
 802447c:	2b00      	cmp	r3, #0
 802447e:	d011      	beq.n	80244a4 <lv_txt_get_next_word+0x148>
            /*Update the output width on the first character if it fits.
             *Must do this here in case first letter is a break character.*/
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8024480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024482:	2b00      	cmp	r3, #0
 8024484:	d10a      	bne.n	802449c <lv_txt_get_next_word+0x140>
 8024486:	6a3b      	ldr	r3, [r7, #32]
 8024488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802448c:	d106      	bne.n	802449c <lv_txt_get_next_word+0x140>
 802448e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024490:	2b00      	cmp	r3, #0
 8024492:	d003      	beq.n	802449c <lv_txt_get_next_word+0x140>
 8024494:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8024498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802449a:	601a      	str	r2, [r3, #0]
            word_len--;
 802449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802449e:	3b01      	subs	r3, #1
 80244a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80244a2:	e016      	b.n	80244d2 <lv_txt_get_next_word+0x176>
        }

        /*Update the output width*/
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 80244a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80244a6:	2b00      	cmp	r3, #0
 80244a8:	d007      	beq.n	80244ba <lv_txt_get_next_word+0x15e>
 80244aa:	6a3b      	ldr	r3, [r7, #32]
 80244ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80244b0:	d103      	bne.n	80244ba <lv_txt_get_next_word+0x15e>
 80244b2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80244b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80244b8:	601a      	str	r2, [r3, #0]

        i = i_next;
 80244ba:	697b      	ldr	r3, [r7, #20]
 80244bc:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 80244be:	693b      	ldr	r3, [r7, #16]
 80244c0:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 80244c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244c4:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 80244c6:	68fa      	ldr	r2, [r7, #12]
 80244c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80244ca:	4413      	add	r3, r2
 80244cc:	781b      	ldrb	r3, [r3, #0]
 80244ce:	2b00      	cmp	r3, #0
 80244d0:	d184      	bne.n	80243dc <lv_txt_get_next_word+0x80>
    }

    /*Entire Word fits in the provided space*/
    if(break_index == NO_BREAK_FOUND) {
 80244d2:	6a3b      	ldr	r3, [r7, #32]
 80244d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80244d8:	d10c      	bne.n	80244f4 <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 80244da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244dc:	2b00      	cmp	r3, #0
 80244de:	d005      	beq.n	80244ec <lv_txt_get_next_word+0x190>
 80244e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244e2:	2b0d      	cmp	r3, #13
 80244e4:	d104      	bne.n	80244f0 <lv_txt_get_next_word+0x194>
 80244e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244e8:	2b0a      	cmp	r3, #10
 80244ea:	d101      	bne.n	80244f0 <lv_txt_get_next_word+0x194>
 80244ec:	697b      	ldr	r3, [r7, #20]
 80244ee:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 80244f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80244f2:	e00c      	b.n	802450e <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 80244f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80244f8:	2b00      	cmp	r3, #0
 80244fa:	d001      	beq.n	8024500 <lv_txt_get_next_word+0x1a4>
 80244fc:	6a3b      	ldr	r3, [r7, #32]
 80244fe:	e006      	b.n	802450e <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 8024500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024502:	2b00      	cmp	r3, #0
 8024504:	d002      	beq.n	802450c <lv_txt_get_next_word+0x1b0>
 8024506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024508:	2200      	movs	r2, #0
 802450a:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 802450c:	2300      	movs	r3, #0
#endif
}
 802450e:	4618      	mov	r0, r3
 8024510:	3738      	adds	r7, #56	; 0x38
 8024512:	46bd      	mov	sp, r7
 8024514:	bd80      	pop	{r7, pc}
 8024516:	bf00      	nop
 8024518:	2000001c 	.word	0x2000001c

0802451c <_lv_txt_get_next_line>:

uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width,
                               lv_coord_t * used_width, lv_text_flag_t flag)
{
 802451c:	b580      	push	{r7, lr}
 802451e:	b090      	sub	sp, #64	; 0x40
 8024520:	af04      	add	r7, sp, #16
 8024522:	60f8      	str	r0, [r7, #12]
 8024524:	60b9      	str	r1, [r7, #8]
 8024526:	4611      	mov	r1, r2
 8024528:	461a      	mov	r2, r3
 802452a:	460b      	mov	r3, r1
 802452c:	80fb      	strh	r3, [r7, #6]
 802452e:	4613      	mov	r3, r2
 8024530:	80bb      	strh	r3, [r7, #4]
    if(used_width) *used_width = 0;
 8024532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024534:	2b00      	cmp	r3, #0
 8024536:	d002      	beq.n	802453e <_lv_txt_get_next_line+0x22>
 8024538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802453a:	2200      	movs	r2, #0
 802453c:	801a      	strh	r2, [r3, #0]

    if(txt == NULL) return 0;
 802453e:	68fb      	ldr	r3, [r7, #12]
 8024540:	2b00      	cmp	r3, #0
 8024542:	d101      	bne.n	8024548 <_lv_txt_get_next_line+0x2c>
 8024544:	2300      	movs	r3, #0
 8024546:	e0c1      	b.n	80246cc <_lv_txt_get_next_line+0x1b0>
    if(txt[0] == '\0') return 0;
 8024548:	68fb      	ldr	r3, [r7, #12]
 802454a:	781b      	ldrb	r3, [r3, #0]
 802454c:	2b00      	cmp	r3, #0
 802454e:	d101      	bne.n	8024554 <_lv_txt_get_next_line+0x38>
 8024550:	2300      	movs	r3, #0
 8024552:	e0bb      	b.n	80246cc <_lv_txt_get_next_line+0x1b0>
    if(font == NULL) return 0;
 8024554:	68bb      	ldr	r3, [r7, #8]
 8024556:	2b00      	cmp	r3, #0
 8024558:	d101      	bne.n	802455e <_lv_txt_get_next_line+0x42>
 802455a:	2300      	movs	r3, #0
 802455c:	e0b6      	b.n	80246cc <_lv_txt_get_next_line+0x1b0>

    lv_coord_t line_w = 0;
 802455e:	2300      	movs	r3, #0
 8024560:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /*If max_width doesn't mater simply find the new line character
     *without thinking about word wrapping*/
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8024562:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8024566:	f003 0302 	and.w	r3, r3, #2
 802456a:	2b00      	cmp	r3, #0
 802456c:	d105      	bne.n	802457a <_lv_txt_get_next_line+0x5e>
 802456e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8024572:	f003 0304 	and.w	r3, r3, #4
 8024576:	2b00      	cmp	r3, #0
 8024578:	d029      	beq.n	80245ce <_lv_txt_get_next_line+0xb2>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 802457a:	2300      	movs	r3, #0
 802457c:	62bb      	str	r3, [r7, #40]	; 0x28
 802457e:	e002      	b.n	8024586 <_lv_txt_get_next_line+0x6a>
 8024580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024582:	3301      	adds	r3, #1
 8024584:	62bb      	str	r3, [r7, #40]	; 0x28
 8024586:	68fa      	ldr	r2, [r7, #12]
 8024588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802458a:	4413      	add	r3, r2
 802458c:	781b      	ldrb	r3, [r3, #0]
 802458e:	2b0a      	cmp	r3, #10
 8024590:	d00b      	beq.n	80245aa <_lv_txt_get_next_line+0x8e>
 8024592:	68fa      	ldr	r2, [r7, #12]
 8024594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024596:	4413      	add	r3, r2
 8024598:	781b      	ldrb	r3, [r3, #0]
 802459a:	2b0d      	cmp	r3, #13
 802459c:	d005      	beq.n	80245aa <_lv_txt_get_next_line+0x8e>
 802459e:	68fa      	ldr	r2, [r7, #12]
 80245a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80245a2:	4413      	add	r3, r2
 80245a4:	781b      	ldrb	r3, [r3, #0]
 80245a6:	2b00      	cmp	r3, #0
 80245a8:	d1ea      	bne.n	8024580 <_lv_txt_get_next_line+0x64>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 80245aa:	68fa      	ldr	r2, [r7, #12]
 80245ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80245ae:	4413      	add	r3, r2
 80245b0:	781b      	ldrb	r3, [r3, #0]
 80245b2:	2b00      	cmp	r3, #0
 80245b4:	d002      	beq.n	80245bc <_lv_txt_get_next_line+0xa0>
 80245b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80245b8:	3301      	adds	r3, #1
 80245ba:	62bb      	str	r3, [r7, #40]	; 0x28
        if(used_width) *used_width = -1;
 80245bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80245be:	2b00      	cmp	r3, #0
 80245c0:	d003      	beq.n	80245ca <_lv_txt_get_next_line+0xae>
 80245c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80245c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80245c8:	801a      	strh	r2, [r3, #0]
        return i;
 80245ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80245cc:	e07e      	b.n	80246cc <_lv_txt_get_next_line+0x1b0>
    }

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80245ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80245d2:	f003 0302 	and.w	r3, r3, #2
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	d002      	beq.n	80245e0 <_lv_txt_get_next_line+0xc4>
 80245da:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80245de:	80bb      	strh	r3, [r7, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80245e0:	2300      	movs	r3, #0
 80245e2:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80245e4:	2300      	movs	r3, #0
 80245e6:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 80245e8:	e048      	b.n	802467c <_lv_txt_get_next_line+0x160>
        uint32_t word_w = 0;
 80245ea:	2300      	movs	r3, #0
 80245ec:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 80245ee:	69bb      	ldr	r3, [r7, #24]
 80245f0:	68fa      	ldr	r2, [r7, #12]
 80245f2:	18d0      	adds	r0, r2, r3
 80245f4:	69bb      	ldr	r3, [r7, #24]
 80245f6:	2b00      	cmp	r3, #0
 80245f8:	bf0c      	ite	eq
 80245fa:	2301      	moveq	r3, #1
 80245fc:	2300      	movne	r3, #0
 80245fe:	b2db      	uxtb	r3, r3
 8024600:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8024604:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8024608:	9303      	str	r3, [sp, #12]
 802460a:	f107 031f 	add.w	r3, r7, #31
 802460e:	9302      	str	r3, [sp, #8]
 8024610:	f107 0314 	add.w	r3, r7, #20
 8024614:	9301      	str	r3, [sp, #4]
 8024616:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802461a:	9300      	str	r3, [sp, #0]
 802461c:	460b      	mov	r3, r1
 802461e:	68b9      	ldr	r1, [r7, #8]
 8024620:	f7ff fe9c 	bl	802435c <lv_txt_get_next_word>
 8024624:	6278      	str	r0, [r7, #36]	; 0x24
        max_width -= word_w;
 8024626:	88ba      	ldrh	r2, [r7, #4]
 8024628:	697b      	ldr	r3, [r7, #20]
 802462a:	b29b      	uxth	r3, r3
 802462c:	1ad3      	subs	r3, r2, r3
 802462e:	b29b      	uxth	r3, r3
 8024630:	80bb      	strh	r3, [r7, #4]
        line_w += word_w;
 8024632:	697b      	ldr	r3, [r7, #20]
 8024634:	b29a      	uxth	r2, r3
 8024636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024638:	4413      	add	r3, r2
 802463a:	b29b      	uxth	r3, r3
 802463c:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(advance == 0) {
 802463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024640:	2b00      	cmp	r3, #0
 8024642:	d026      	beq.n	8024692 <_lv_txt_get_next_line+0x176>
            break;
        }

        i += advance;
 8024644:	69ba      	ldr	r2, [r7, #24]
 8024646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024648:	4413      	add	r3, r2
 802464a:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 802464c:	68fb      	ldr	r3, [r7, #12]
 802464e:	781b      	ldrb	r3, [r3, #0]
 8024650:	2b0a      	cmp	r3, #10
 8024652:	d01e      	beq.n	8024692 <_lv_txt_get_next_line+0x176>
 8024654:	68fb      	ldr	r3, [r7, #12]
 8024656:	781b      	ldrb	r3, [r3, #0]
 8024658:	2b0d      	cmp	r3, #13
 802465a:	d01a      	beq.n	8024692 <_lv_txt_get_next_line+0x176>

        if(txt[i] == '\n' || txt[i] == '\r') {
 802465c:	69bb      	ldr	r3, [r7, #24]
 802465e:	68fa      	ldr	r2, [r7, #12]
 8024660:	4413      	add	r3, r2
 8024662:	781b      	ldrb	r3, [r3, #0]
 8024664:	2b0a      	cmp	r3, #10
 8024666:	d005      	beq.n	8024674 <_lv_txt_get_next_line+0x158>
 8024668:	69bb      	ldr	r3, [r7, #24]
 802466a:	68fa      	ldr	r2, [r7, #12]
 802466c:	4413      	add	r3, r2
 802466e:	781b      	ldrb	r3, [r3, #0]
 8024670:	2b0d      	cmp	r3, #13
 8024672:	d103      	bne.n	802467c <_lv_txt_get_next_line+0x160>
            i++;  /*Include the following newline in the current line*/
 8024674:	69bb      	ldr	r3, [r7, #24]
 8024676:	3301      	adds	r3, #1
 8024678:	61bb      	str	r3, [r7, #24]
            break;
 802467a:	e00b      	b.n	8024694 <_lv_txt_get_next_line+0x178>
    while(txt[i] != '\0' && max_width > 0) {
 802467c:	69bb      	ldr	r3, [r7, #24]
 802467e:	68fa      	ldr	r2, [r7, #12]
 8024680:	4413      	add	r3, r2
 8024682:	781b      	ldrb	r3, [r3, #0]
 8024684:	2b00      	cmp	r3, #0
 8024686:	d005      	beq.n	8024694 <_lv_txt_get_next_line+0x178>
 8024688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 802468c:	2b00      	cmp	r3, #0
 802468e:	dcac      	bgt.n	80245ea <_lv_txt_get_next_line+0xce>
 8024690:	e000      	b.n	8024694 <_lv_txt_get_next_line+0x178>
            break;
 8024692:	bf00      	nop
        }

    }

    /*Always step at least one to avoid infinite loops*/
    if(i == 0) {
 8024694:	69bb      	ldr	r3, [r7, #24]
 8024696:	2b00      	cmp	r3, #0
 8024698:	d111      	bne.n	80246be <_lv_txt_get_next_line+0x1a2>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 802469a:	4b0e      	ldr	r3, [pc, #56]	; (80246d4 <_lv_txt_get_next_line+0x1b8>)
 802469c:	681b      	ldr	r3, [r3, #0]
 802469e:	f107 0218 	add.w	r2, r7, #24
 80246a2:	4611      	mov	r1, r2
 80246a4:	68f8      	ldr	r0, [r7, #12]
 80246a6:	4798      	blx	r3
 80246a8:	6238      	str	r0, [r7, #32]
        if(used_width != NULL) {
 80246aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80246ac:	2b00      	cmp	r3, #0
 80246ae:	d006      	beq.n	80246be <_lv_txt_get_next_line+0x1a2>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 80246b0:	2200      	movs	r2, #0
 80246b2:	6a39      	ldr	r1, [r7, #32]
 80246b4:	68b8      	ldr	r0, [r7, #8]
 80246b6:	f7fa fe69 	bl	801f38c <lv_font_get_glyph_width>
 80246ba:	4603      	mov	r3, r0
 80246bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(used_width != NULL) {
 80246be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80246c0:	2b00      	cmp	r3, #0
 80246c2:	d002      	beq.n	80246ca <_lv_txt_get_next_line+0x1ae>
        *used_width = line_w;
 80246c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80246c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80246c8:	801a      	strh	r2, [r3, #0]
    }

    return i;
 80246ca:	69bb      	ldr	r3, [r7, #24]
}
 80246cc:	4618      	mov	r0, r3
 80246ce:	3730      	adds	r7, #48	; 0x30
 80246d0:	46bd      	mov	sp, r7
 80246d2:	bd80      	pop	{r7, pc}
 80246d4:	2000001c 	.word	0x2000001c

080246d8 <lv_txt_get_width>:

lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_text_flag_t flag)
{
 80246d8:	b580      	push	{r7, lr}
 80246da:	b08a      	sub	sp, #40	; 0x28
 80246dc:	af00      	add	r7, sp, #0
 80246de:	60f8      	str	r0, [r7, #12]
 80246e0:	60b9      	str	r1, [r7, #8]
 80246e2:	607a      	str	r2, [r7, #4]
 80246e4:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 80246e6:	68fb      	ldr	r3, [r7, #12]
 80246e8:	2b00      	cmp	r3, #0
 80246ea:	d101      	bne.n	80246f0 <lv_txt_get_width+0x18>
 80246ec:	2300      	movs	r3, #0
 80246ee:	e053      	b.n	8024798 <lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	2b00      	cmp	r3, #0
 80246f4:	d101      	bne.n	80246fa <lv_txt_get_width+0x22>
 80246f6:	2300      	movs	r3, #0
 80246f8:	e04e      	b.n	8024798 <lv_txt_get_width+0xc0>
    if(txt[0] == '\0') return 0;
 80246fa:	68fb      	ldr	r3, [r7, #12]
 80246fc:	781b      	ldrb	r3, [r3, #0]
 80246fe:	2b00      	cmp	r3, #0
 8024700:	d101      	bne.n	8024706 <lv_txt_get_width+0x2e>
 8024702:	2300      	movs	r3, #0
 8024704:	e048      	b.n	8024798 <lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 8024706:	2300      	movs	r3, #0
 8024708:	623b      	str	r3, [r7, #32]
    lv_coord_t width             = 0;
 802470a:	2300      	movs	r3, #0
 802470c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 802470e:	2300      	movs	r3, #0
 8024710:	77fb      	strb	r3, [r7, #31]

    if(length != 0) {
 8024712:	68bb      	ldr	r3, [r7, #8]
 8024714:	2b00      	cmp	r3, #0
 8024716:	d03d      	beq.n	8024794 <lv_txt_get_width+0xbc>
        while(i < length) {
 8024718:	e02f      	b.n	802477a <lv_txt_get_width+0xa2>
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 802471a:	f107 0320 	add.w	r3, r7, #32
 802471e:	f107 0214 	add.w	r2, r7, #20
 8024722:	f107 0118 	add.w	r1, r7, #24
 8024726:	68f8      	ldr	r0, [r7, #12]
 8024728:	f000 f874 	bl	8024814 <_lv_txt_encoded_letter_next_2>

            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802472c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8024730:	f003 0301 	and.w	r3, r3, #1
 8024734:	2b00      	cmp	r3, #0
 8024736:	d00a      	beq.n	802474e <lv_txt_get_width+0x76>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8024738:	69ba      	ldr	r2, [r7, #24]
 802473a:	f107 031f 	add.w	r3, r7, #31
 802473e:	4611      	mov	r1, r2
 8024740:	4618      	mov	r0, r3
 8024742:	f000 f82d 	bl	80247a0 <_lv_txt_is_cmd>
 8024746:	4603      	mov	r3, r0
 8024748:	2b00      	cmp	r3, #0
 802474a:	d000      	beq.n	802474e <lv_txt_get_width+0x76>
 802474c:	e015      	b.n	802477a <lv_txt_get_width+0xa2>
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 802474e:	69bb      	ldr	r3, [r7, #24]
 8024750:	697a      	ldr	r2, [r7, #20]
 8024752:	4619      	mov	r1, r3
 8024754:	6878      	ldr	r0, [r7, #4]
 8024756:	f7fa fe19 	bl	801f38c <lv_font_get_glyph_width>
 802475a:	4603      	mov	r3, r0
 802475c:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(char_width > 0) {
 802475e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8024762:	2b00      	cmp	r3, #0
 8024764:	dd09      	ble.n	802477a <lv_txt_get_width+0xa2>
                width += char_width;
 8024766:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802476a:	4413      	add	r3, r2
 802476c:	b29b      	uxth	r3, r3
 802476e:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 8024770:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024772:	887b      	ldrh	r3, [r7, #2]
 8024774:	4413      	add	r3, r2
 8024776:	b29b      	uxth	r3, r3
 8024778:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 802477a:	6a3b      	ldr	r3, [r7, #32]
 802477c:	68ba      	ldr	r2, [r7, #8]
 802477e:	429a      	cmp	r2, r3
 8024780:	d8cb      	bhi.n	802471a <lv_txt_get_width+0x42>
            }
        }

        if(width > 0) {
 8024782:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8024786:	2b00      	cmp	r3, #0
 8024788:	dd04      	ble.n	8024794 <lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 802478a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802478c:	887b      	ldrh	r3, [r7, #2]
 802478e:	1ad3      	subs	r3, r2, r3
 8024790:	b29b      	uxth	r3, r3
 8024792:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned*/
        }
    }

    return width;
 8024794:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8024798:	4618      	mov	r0, r3
 802479a:	3728      	adds	r7, #40	; 0x28
 802479c:	46bd      	mov	sp, r7
 802479e:	bd80      	pop	{r7, pc}

080247a0 <_lv_txt_is_cmd>:

bool _lv_txt_is_cmd(lv_text_cmd_state_t * state, uint32_t c)
{
 80247a0:	b480      	push	{r7}
 80247a2:	b085      	sub	sp, #20
 80247a4:	af00      	add	r7, sp, #0
 80247a6:	6078      	str	r0, [r7, #4]
 80247a8:	6039      	str	r1, [r7, #0]
    bool ret = false;
 80247aa:	2300      	movs	r3, #0
 80247ac:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80247ae:	2323      	movs	r3, #35	; 0x23
 80247b0:	461a      	mov	r2, r3
 80247b2:	683b      	ldr	r3, [r7, #0]
 80247b4:	4293      	cmp	r3, r2
 80247b6:	d11a      	bne.n	80247ee <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80247b8:	687b      	ldr	r3, [r7, #4]
 80247ba:	781b      	ldrb	r3, [r3, #0]
 80247bc:	2b00      	cmp	r3, #0
 80247be:	d105      	bne.n	80247cc <_lv_txt_is_cmd+0x2c>
            *state = LV_TEXT_CMD_STATE_PAR;
 80247c0:	687b      	ldr	r3, [r7, #4]
 80247c2:	2201      	movs	r2, #1
 80247c4:	701a      	strb	r2, [r3, #0]
            ret    = true;
 80247c6:	2301      	movs	r3, #1
 80247c8:	73fb      	strb	r3, [r7, #15]
 80247ca:	e010      	b.n	80247ee <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char*/
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80247cc:	687b      	ldr	r3, [r7, #4]
 80247ce:	781b      	ldrb	r3, [r3, #0]
 80247d0:	2b01      	cmp	r3, #1
 80247d2:	d103      	bne.n	80247dc <_lv_txt_is_cmd+0x3c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80247d4:	687b      	ldr	r3, [r7, #4]
 80247d6:	2200      	movs	r2, #0
 80247d8:	701a      	strb	r2, [r3, #0]
 80247da:	e008      	b.n	80247ee <_lv_txt_is_cmd+0x4e>
        }
        /*Command end*/
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 80247dc:	687b      	ldr	r3, [r7, #4]
 80247de:	781b      	ldrb	r3, [r3, #0]
 80247e0:	2b02      	cmp	r3, #2
 80247e2:	d104      	bne.n	80247ee <_lv_txt_is_cmd+0x4e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80247e4:	687b      	ldr	r3, [r7, #4]
 80247e6:	2200      	movs	r2, #0
 80247e8:	701a      	strb	r2, [r3, #0]
            ret    = true;
 80247ea:	2301      	movs	r3, #1
 80247ec:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 80247ee:	687b      	ldr	r3, [r7, #4]
 80247f0:	781b      	ldrb	r3, [r3, #0]
 80247f2:	2b01      	cmp	r3, #1
 80247f4:	d107      	bne.n	8024806 <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 80247f6:	683b      	ldr	r3, [r7, #0]
 80247f8:	2b20      	cmp	r3, #32
 80247fa:	d102      	bne.n	8024802 <_lv_txt_is_cmd+0x62>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80247fc:	687b      	ldr	r3, [r7, #4]
 80247fe:	2202      	movs	r2, #2
 8024800:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 8024802:	2301      	movs	r3, #1
 8024804:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8024806:	7bfb      	ldrb	r3, [r7, #15]
}
 8024808:	4618      	mov	r0, r3
 802480a:	3714      	adds	r7, #20
 802480c:	46bd      	mov	sp, r7
 802480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024812:	4770      	bx	lr

08024814 <_lv_txt_encoded_letter_next_2>:

    return text;
}

void _lv_txt_encoded_letter_next_2(const char * txt, uint32_t * letter, uint32_t * letter_next, uint32_t * ofs)
{
 8024814:	b580      	push	{r7, lr}
 8024816:	b084      	sub	sp, #16
 8024818:	af00      	add	r7, sp, #0
 802481a:	60f8      	str	r0, [r7, #12]
 802481c:	60b9      	str	r1, [r7, #8]
 802481e:	607a      	str	r2, [r7, #4]
 8024820:	603b      	str	r3, [r7, #0]
    *letter = _lv_txt_encoded_next(txt, ofs);
 8024822:	4b0f      	ldr	r3, [pc, #60]	; (8024860 <_lv_txt_encoded_letter_next_2+0x4c>)
 8024824:	681b      	ldr	r3, [r3, #0]
 8024826:	6839      	ldr	r1, [r7, #0]
 8024828:	68f8      	ldr	r0, [r7, #12]
 802482a:	4798      	blx	r3
 802482c:	4602      	mov	r2, r0
 802482e:	68bb      	ldr	r3, [r7, #8]
 8024830:	601a      	str	r2, [r3, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8024832:	68bb      	ldr	r3, [r7, #8]
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	2b00      	cmp	r3, #0
 8024838:	d00a      	beq.n	8024850 <_lv_txt_encoded_letter_next_2+0x3c>
 802483a:	4b09      	ldr	r3, [pc, #36]	; (8024860 <_lv_txt_encoded_letter_next_2+0x4c>)
 802483c:	681b      	ldr	r3, [r3, #0]
 802483e:	683a      	ldr	r2, [r7, #0]
 8024840:	6812      	ldr	r2, [r2, #0]
 8024842:	68f9      	ldr	r1, [r7, #12]
 8024844:	440a      	add	r2, r1
 8024846:	2100      	movs	r1, #0
 8024848:	4610      	mov	r0, r2
 802484a:	4798      	blx	r3
 802484c:	4603      	mov	r3, r0
 802484e:	e000      	b.n	8024852 <_lv_txt_encoded_letter_next_2+0x3e>
 8024850:	2300      	movs	r3, #0
 8024852:	687a      	ldr	r2, [r7, #4]
 8024854:	6013      	str	r3, [r2, #0]
}
 8024856:	bf00      	nop
 8024858:	3710      	adds	r7, #16
 802485a:	46bd      	mov	sp, r7
 802485c:	bd80      	pop	{r7, pc}
 802485e:	bf00      	nop
 8024860:	2000001c 	.word	0x2000001c

08024864 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 8024864:	b480      	push	{r7}
 8024866:	b083      	sub	sp, #12
 8024868:	af00      	add	r7, sp, #0
 802486a:	6078      	str	r0, [r7, #4]
    if(LV_IS_ASCII(str[0]))
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	781b      	ldrb	r3, [r3, #0]
 8024870:	b25b      	sxtb	r3, r3
 8024872:	2b00      	cmp	r3, #0
 8024874:	db01      	blt.n	802487a <lv_txt_utf8_size+0x16>
        return 1;
 8024876:	2301      	movs	r3, #1
 8024878:	e018      	b.n	80248ac <lv_txt_utf8_size+0x48>
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	781b      	ldrb	r3, [r3, #0]
 802487e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8024882:	2bc0      	cmp	r3, #192	; 0xc0
 8024884:	d101      	bne.n	802488a <lv_txt_utf8_size+0x26>
        return 2;
 8024886:	2302      	movs	r3, #2
 8024888:	e010      	b.n	80248ac <lv_txt_utf8_size+0x48>
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	781b      	ldrb	r3, [r3, #0]
 802488e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024892:	2be0      	cmp	r3, #224	; 0xe0
 8024894:	d101      	bne.n	802489a <lv_txt_utf8_size+0x36>
        return 3;
 8024896:	2303      	movs	r3, #3
 8024898:	e008      	b.n	80248ac <lv_txt_utf8_size+0x48>
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 802489a:	687b      	ldr	r3, [r7, #4]
 802489c:	781b      	ldrb	r3, [r3, #0]
 802489e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80248a2:	2bf0      	cmp	r3, #240	; 0xf0
 80248a4:	d101      	bne.n	80248aa <lv_txt_utf8_size+0x46>
        return 4;
 80248a6:	2304      	movs	r3, #4
 80248a8:	e000      	b.n	80248ac <lv_txt_utf8_size+0x48>
    return 0;
 80248aa:	2300      	movs	r3, #0
}
 80248ac:	4618      	mov	r0, r3
 80248ae:	370c      	adds	r7, #12
 80248b0:	46bd      	mov	sp, r7
 80248b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248b6:	4770      	bx	lr

080248b8 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 80248b8:	b480      	push	{r7}
 80248ba:	b085      	sub	sp, #20
 80248bc:	af00      	add	r7, sp, #0
 80248be:	6078      	str	r0, [r7, #4]
 80248c0:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     */

    uint32_t result = 0;
 80248c2:	2300      	movs	r3, #0
 80248c4:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80248c6:	2300      	movs	r3, #0
 80248c8:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 80248ca:	683b      	ldr	r3, [r7, #0]
 80248cc:	2b00      	cmp	r3, #0
 80248ce:	d102      	bne.n	80248d6 <lv_txt_utf8_next+0x1e>
 80248d0:	f107 0308 	add.w	r3, r7, #8
 80248d4:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 80248d6:	683b      	ldr	r3, [r7, #0]
 80248d8:	681b      	ldr	r3, [r3, #0]
 80248da:	687a      	ldr	r2, [r7, #4]
 80248dc:	4413      	add	r3, r2
 80248de:	781b      	ldrb	r3, [r3, #0]
 80248e0:	b25b      	sxtb	r3, r3
 80248e2:	2b00      	cmp	r3, #0
 80248e4:	db0b      	blt.n	80248fe <lv_txt_utf8_next+0x46>
        result = txt[*i];
 80248e6:	683b      	ldr	r3, [r7, #0]
 80248e8:	681b      	ldr	r3, [r3, #0]
 80248ea:	687a      	ldr	r2, [r7, #4]
 80248ec:	4413      	add	r3, r2
 80248ee:	781b      	ldrb	r3, [r3, #0]
 80248f0:	60fb      	str	r3, [r7, #12]
        (*i)++;
 80248f2:	683b      	ldr	r3, [r7, #0]
 80248f4:	681b      	ldr	r3, [r3, #0]
 80248f6:	1c5a      	adds	r2, r3, #1
 80248f8:	683b      	ldr	r3, [r7, #0]
 80248fa:	601a      	str	r2, [r3, #0]
 80248fc:	e0ea      	b.n	8024ad4 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 80248fe:	683b      	ldr	r3, [r7, #0]
 8024900:	681b      	ldr	r3, [r3, #0]
 8024902:	687a      	ldr	r2, [r7, #4]
 8024904:	4413      	add	r3, r2
 8024906:	781b      	ldrb	r3, [r3, #0]
 8024908:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 802490c:	2bc0      	cmp	r3, #192	; 0xc0
 802490e:	d128      	bne.n	8024962 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8024910:	683b      	ldr	r3, [r7, #0]
 8024912:	681b      	ldr	r3, [r3, #0]
 8024914:	687a      	ldr	r2, [r7, #4]
 8024916:	4413      	add	r3, r2
 8024918:	781b      	ldrb	r3, [r3, #0]
 802491a:	019b      	lsls	r3, r3, #6
 802491c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8024920:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024922:	683b      	ldr	r3, [r7, #0]
 8024924:	681b      	ldr	r3, [r3, #0]
 8024926:	1c5a      	adds	r2, r3, #1
 8024928:	683b      	ldr	r3, [r7, #0]
 802492a:	601a      	str	r2, [r3, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802492c:	683b      	ldr	r3, [r7, #0]
 802492e:	681b      	ldr	r3, [r3, #0]
 8024930:	687a      	ldr	r2, [r7, #4]
 8024932:	4413      	add	r3, r2
 8024934:	781b      	ldrb	r3, [r3, #0]
 8024936:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802493a:	2b80      	cmp	r3, #128	; 0x80
 802493c:	d001      	beq.n	8024942 <lv_txt_utf8_next+0x8a>
 802493e:	2300      	movs	r3, #0
 8024940:	e0c9      	b.n	8024ad6 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8024942:	683b      	ldr	r3, [r7, #0]
 8024944:	681b      	ldr	r3, [r3, #0]
 8024946:	687a      	ldr	r2, [r7, #4]
 8024948:	4413      	add	r3, r2
 802494a:	781b      	ldrb	r3, [r3, #0]
 802494c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024950:	68fa      	ldr	r2, [r7, #12]
 8024952:	4413      	add	r3, r2
 8024954:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024956:	683b      	ldr	r3, [r7, #0]
 8024958:	681b      	ldr	r3, [r3, #0]
 802495a:	1c5a      	adds	r2, r3, #1
 802495c:	683b      	ldr	r3, [r7, #0]
 802495e:	601a      	str	r2, [r3, #0]
 8024960:	e0b8      	b.n	8024ad4 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 8024962:	683b      	ldr	r3, [r7, #0]
 8024964:	681b      	ldr	r3, [r3, #0]
 8024966:	687a      	ldr	r2, [r7, #4]
 8024968:	4413      	add	r3, r2
 802496a:	781b      	ldrb	r3, [r3, #0]
 802496c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024970:	2be0      	cmp	r3, #224	; 0xe0
 8024972:	d142      	bne.n	80249fa <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8024974:	683b      	ldr	r3, [r7, #0]
 8024976:	681b      	ldr	r3, [r3, #0]
 8024978:	687a      	ldr	r2, [r7, #4]
 802497a:	4413      	add	r3, r2
 802497c:	781b      	ldrb	r3, [r3, #0]
 802497e:	031b      	lsls	r3, r3, #12
 8024980:	b29b      	uxth	r3, r3
 8024982:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024984:	683b      	ldr	r3, [r7, #0]
 8024986:	681b      	ldr	r3, [r3, #0]
 8024988:	1c5a      	adds	r2, r3, #1
 802498a:	683b      	ldr	r3, [r7, #0]
 802498c:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802498e:	683b      	ldr	r3, [r7, #0]
 8024990:	681b      	ldr	r3, [r3, #0]
 8024992:	687a      	ldr	r2, [r7, #4]
 8024994:	4413      	add	r3, r2
 8024996:	781b      	ldrb	r3, [r3, #0]
 8024998:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802499c:	2b80      	cmp	r3, #128	; 0x80
 802499e:	d001      	beq.n	80249a4 <lv_txt_utf8_next+0xec>
 80249a0:	2300      	movs	r3, #0
 80249a2:	e098      	b.n	8024ad6 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80249a4:	683b      	ldr	r3, [r7, #0]
 80249a6:	681b      	ldr	r3, [r3, #0]
 80249a8:	687a      	ldr	r2, [r7, #4]
 80249aa:	4413      	add	r3, r2
 80249ac:	781b      	ldrb	r3, [r3, #0]
 80249ae:	019b      	lsls	r3, r3, #6
 80249b0:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80249b4:	68fa      	ldr	r2, [r7, #12]
 80249b6:	4413      	add	r3, r2
 80249b8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80249ba:	683b      	ldr	r3, [r7, #0]
 80249bc:	681b      	ldr	r3, [r3, #0]
 80249be:	1c5a      	adds	r2, r3, #1
 80249c0:	683b      	ldr	r3, [r7, #0]
 80249c2:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80249c4:	683b      	ldr	r3, [r7, #0]
 80249c6:	681b      	ldr	r3, [r3, #0]
 80249c8:	687a      	ldr	r2, [r7, #4]
 80249ca:	4413      	add	r3, r2
 80249cc:	781b      	ldrb	r3, [r3, #0]
 80249ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80249d2:	2b80      	cmp	r3, #128	; 0x80
 80249d4:	d001      	beq.n	80249da <lv_txt_utf8_next+0x122>
 80249d6:	2300      	movs	r3, #0
 80249d8:	e07d      	b.n	8024ad6 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 80249da:	683b      	ldr	r3, [r7, #0]
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	687a      	ldr	r2, [r7, #4]
 80249e0:	4413      	add	r3, r2
 80249e2:	781b      	ldrb	r3, [r3, #0]
 80249e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80249e8:	68fa      	ldr	r2, [r7, #12]
 80249ea:	4413      	add	r3, r2
 80249ec:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80249ee:	683b      	ldr	r3, [r7, #0]
 80249f0:	681b      	ldr	r3, [r3, #0]
 80249f2:	1c5a      	adds	r2, r3, #1
 80249f4:	683b      	ldr	r3, [r7, #0]
 80249f6:	601a      	str	r2, [r3, #0]
 80249f8:	e06c      	b.n	8024ad4 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80249fa:	683b      	ldr	r3, [r7, #0]
 80249fc:	681b      	ldr	r3, [r3, #0]
 80249fe:	687a      	ldr	r2, [r7, #4]
 8024a00:	4413      	add	r3, r2
 8024a02:	781b      	ldrb	r3, [r3, #0]
 8024a04:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024a08:	2bf0      	cmp	r3, #240	; 0xf0
 8024a0a:	d15e      	bne.n	8024aca <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8024a0c:	683b      	ldr	r3, [r7, #0]
 8024a0e:	681b      	ldr	r3, [r3, #0]
 8024a10:	687a      	ldr	r2, [r7, #4]
 8024a12:	4413      	add	r3, r2
 8024a14:	781b      	ldrb	r3, [r3, #0]
 8024a16:	049b      	lsls	r3, r3, #18
 8024a18:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8024a1c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024a1e:	683b      	ldr	r3, [r7, #0]
 8024a20:	681b      	ldr	r3, [r3, #0]
 8024a22:	1c5a      	adds	r2, r3, #1
 8024a24:	683b      	ldr	r3, [r7, #0]
 8024a26:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024a28:	683b      	ldr	r3, [r7, #0]
 8024a2a:	681b      	ldr	r3, [r3, #0]
 8024a2c:	687a      	ldr	r2, [r7, #4]
 8024a2e:	4413      	add	r3, r2
 8024a30:	781b      	ldrb	r3, [r3, #0]
 8024a32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024a36:	2b80      	cmp	r3, #128	; 0x80
 8024a38:	d001      	beq.n	8024a3e <lv_txt_utf8_next+0x186>
 8024a3a:	2300      	movs	r3, #0
 8024a3c:	e04b      	b.n	8024ad6 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8024a3e:	683b      	ldr	r3, [r7, #0]
 8024a40:	681b      	ldr	r3, [r3, #0]
 8024a42:	687a      	ldr	r2, [r7, #4]
 8024a44:	4413      	add	r3, r2
 8024a46:	781b      	ldrb	r3, [r3, #0]
 8024a48:	031b      	lsls	r3, r3, #12
 8024a4a:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 8024a4e:	68fa      	ldr	r2, [r7, #12]
 8024a50:	4413      	add	r3, r2
 8024a52:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024a54:	683b      	ldr	r3, [r7, #0]
 8024a56:	681b      	ldr	r3, [r3, #0]
 8024a58:	1c5a      	adds	r2, r3, #1
 8024a5a:	683b      	ldr	r3, [r7, #0]
 8024a5c:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024a5e:	683b      	ldr	r3, [r7, #0]
 8024a60:	681b      	ldr	r3, [r3, #0]
 8024a62:	687a      	ldr	r2, [r7, #4]
 8024a64:	4413      	add	r3, r2
 8024a66:	781b      	ldrb	r3, [r3, #0]
 8024a68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024a6c:	2b80      	cmp	r3, #128	; 0x80
 8024a6e:	d001      	beq.n	8024a74 <lv_txt_utf8_next+0x1bc>
 8024a70:	2300      	movs	r3, #0
 8024a72:	e030      	b.n	8024ad6 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8024a74:	683b      	ldr	r3, [r7, #0]
 8024a76:	681b      	ldr	r3, [r3, #0]
 8024a78:	687a      	ldr	r2, [r7, #4]
 8024a7a:	4413      	add	r3, r2
 8024a7c:	781b      	ldrb	r3, [r3, #0]
 8024a7e:	019b      	lsls	r3, r3, #6
 8024a80:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8024a84:	68fa      	ldr	r2, [r7, #12]
 8024a86:	4413      	add	r3, r2
 8024a88:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024a8a:	683b      	ldr	r3, [r7, #0]
 8024a8c:	681b      	ldr	r3, [r3, #0]
 8024a8e:	1c5a      	adds	r2, r3, #1
 8024a90:	683b      	ldr	r3, [r7, #0]
 8024a92:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024a94:	683b      	ldr	r3, [r7, #0]
 8024a96:	681b      	ldr	r3, [r3, #0]
 8024a98:	687a      	ldr	r2, [r7, #4]
 8024a9a:	4413      	add	r3, r2
 8024a9c:	781b      	ldrb	r3, [r3, #0]
 8024a9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024aa2:	2b80      	cmp	r3, #128	; 0x80
 8024aa4:	d001      	beq.n	8024aaa <lv_txt_utf8_next+0x1f2>
 8024aa6:	2300      	movs	r3, #0
 8024aa8:	e015      	b.n	8024ad6 <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 8024aaa:	683b      	ldr	r3, [r7, #0]
 8024aac:	681b      	ldr	r3, [r3, #0]
 8024aae:	687a      	ldr	r2, [r7, #4]
 8024ab0:	4413      	add	r3, r2
 8024ab2:	781b      	ldrb	r3, [r3, #0]
 8024ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024ab8:	68fa      	ldr	r2, [r7, #12]
 8024aba:	4413      	add	r3, r2
 8024abc:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024abe:	683b      	ldr	r3, [r7, #0]
 8024ac0:	681b      	ldr	r3, [r3, #0]
 8024ac2:	1c5a      	adds	r2, r3, #1
 8024ac4:	683b      	ldr	r3, [r7, #0]
 8024ac6:	601a      	str	r2, [r3, #0]
 8024ac8:	e004      	b.n	8024ad4 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8024aca:	683b      	ldr	r3, [r7, #0]
 8024acc:	681b      	ldr	r3, [r3, #0]
 8024ace:	1c5a      	adds	r2, r3, #1
 8024ad0:	683b      	ldr	r3, [r7, #0]
 8024ad2:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 8024ad4:	68fb      	ldr	r3, [r7, #12]
}
 8024ad6:	4618      	mov	r0, r3
 8024ad8:	3714      	adds	r7, #20
 8024ada:	46bd      	mov	sp, r7
 8024adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ae0:	4770      	bx	lr
	...

08024ae4 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8024ae4:	b580      	push	{r7, lr}
 8024ae6:	b086      	sub	sp, #24
 8024ae8:	af00      	add	r7, sp, #0
 8024aea:	6078      	str	r0, [r7, #4]
 8024aec:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 8024aee:	2300      	movs	r3, #0
 8024af0:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8024af2:	683b      	ldr	r3, [r7, #0]
 8024af4:	681b      	ldr	r3, [r3, #0]
 8024af6:	1e5a      	subs	r2, r3, #1
 8024af8:	683b      	ldr	r3, [r7, #0]
 8024afa:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8024afc:	7dfb      	ldrb	r3, [r7, #23]
 8024afe:	2b03      	cmp	r3, #3
 8024b00:	d901      	bls.n	8024b06 <lv_txt_utf8_prev+0x22>
 8024b02:	2300      	movs	r3, #0
 8024b04:	e02a      	b.n	8024b5c <lv_txt_utf8_prev+0x78>

        c_size = _lv_txt_encoded_size(&txt[*i]);
 8024b06:	4b17      	ldr	r3, [pc, #92]	; (8024b64 <lv_txt_utf8_prev+0x80>)
 8024b08:	681b      	ldr	r3, [r3, #0]
 8024b0a:	683a      	ldr	r2, [r7, #0]
 8024b0c:	6812      	ldr	r2, [r2, #0]
 8024b0e:	6879      	ldr	r1, [r7, #4]
 8024b10:	440a      	add	r2, r1
 8024b12:	4610      	mov	r0, r2
 8024b14:	4798      	blx	r3
 8024b16:	4603      	mov	r3, r0
 8024b18:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 8024b1a:	7dbb      	ldrb	r3, [r7, #22]
 8024b1c:	2b00      	cmp	r3, #0
 8024b1e:	d10b      	bne.n	8024b38 <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 8024b20:	683b      	ldr	r3, [r7, #0]
 8024b22:	681b      	ldr	r3, [r3, #0]
 8024b24:	2b00      	cmp	r3, #0
 8024b26:	d005      	beq.n	8024b34 <lv_txt_utf8_prev+0x50>
                (*i)--;
 8024b28:	683b      	ldr	r3, [r7, #0]
 8024b2a:	681b      	ldr	r3, [r3, #0]
 8024b2c:	1e5a      	subs	r2, r3, #1
 8024b2e:	683b      	ldr	r3, [r7, #0]
 8024b30:	601a      	str	r2, [r3, #0]
 8024b32:	e001      	b.n	8024b38 <lv_txt_utf8_prev+0x54>
            else
                return 0;
 8024b34:	2300      	movs	r3, #0
 8024b36:	e011      	b.n	8024b5c <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 8024b38:	7dfb      	ldrb	r3, [r7, #23]
 8024b3a:	3301      	adds	r3, #1
 8024b3c:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 8024b3e:	7dbb      	ldrb	r3, [r7, #22]
 8024b40:	2b00      	cmp	r3, #0
 8024b42:	d0db      	beq.n	8024afc <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 8024b44:	683b      	ldr	r3, [r7, #0]
 8024b46:	681b      	ldr	r3, [r3, #0]
 8024b48:	60fb      	str	r3, [r7, #12]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8024b4a:	4b07      	ldr	r3, [pc, #28]	; (8024b68 <lv_txt_utf8_prev+0x84>)
 8024b4c:	681b      	ldr	r3, [r3, #0]
 8024b4e:	f107 020c 	add.w	r2, r7, #12
 8024b52:	4611      	mov	r1, r2
 8024b54:	6878      	ldr	r0, [r7, #4]
 8024b56:	4798      	blx	r3
 8024b58:	6138      	str	r0, [r7, #16]

    return letter;
 8024b5a:	693b      	ldr	r3, [r7, #16]
}
 8024b5c:	4618      	mov	r0, r3
 8024b5e:	3718      	adds	r7, #24
 8024b60:	46bd      	mov	sp, r7
 8024b62:	bd80      	pop	{r7, pc}
 8024b64:	20000018 	.word	0x20000018
 8024b68:	2000001c 	.word	0x2000001c

08024b6c <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8024b6c:	b580      	push	{r7, lr}
 8024b6e:	b086      	sub	sp, #24
 8024b70:	af00      	add	r7, sp, #0
 8024b72:	6078      	str	r0, [r7, #4]
 8024b74:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 8024b76:	2300      	movs	r3, #0
 8024b78:	613b      	str	r3, [r7, #16]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024b7a:	2300      	movs	r3, #0
 8024b7c:	617b      	str	r3, [r7, #20]
 8024b7e:	e014      	b.n	8024baa <lv_txt_utf8_get_byte_id+0x3e>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8024b80:	4b11      	ldr	r3, [pc, #68]	; (8024bc8 <lv_txt_utf8_get_byte_id+0x5c>)
 8024b82:	681b      	ldr	r3, [r3, #0]
 8024b84:	6879      	ldr	r1, [r7, #4]
 8024b86:	693a      	ldr	r2, [r7, #16]
 8024b88:	440a      	add	r2, r1
 8024b8a:	4610      	mov	r0, r2
 8024b8c:	4798      	blx	r3
 8024b8e:	4603      	mov	r3, r0
 8024b90:	73fb      	strb	r3, [r7, #15]
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 8024b92:	7bfb      	ldrb	r3, [r7, #15]
 8024b94:	2b00      	cmp	r3, #0
 8024b96:	d001      	beq.n	8024b9c <lv_txt_utf8_get_byte_id+0x30>
 8024b98:	7bfb      	ldrb	r3, [r7, #15]
 8024b9a:	e000      	b.n	8024b9e <lv_txt_utf8_get_byte_id+0x32>
 8024b9c:	2301      	movs	r3, #1
 8024b9e:	693a      	ldr	r2, [r7, #16]
 8024ba0:	4413      	add	r3, r2
 8024ba2:	613b      	str	r3, [r7, #16]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024ba4:	697b      	ldr	r3, [r7, #20]
 8024ba6:	3301      	adds	r3, #1
 8024ba8:	617b      	str	r3, [r7, #20]
 8024baa:	697a      	ldr	r2, [r7, #20]
 8024bac:	683b      	ldr	r3, [r7, #0]
 8024bae:	429a      	cmp	r2, r3
 8024bb0:	d205      	bcs.n	8024bbe <lv_txt_utf8_get_byte_id+0x52>
 8024bb2:	687a      	ldr	r2, [r7, #4]
 8024bb4:	693b      	ldr	r3, [r7, #16]
 8024bb6:	4413      	add	r3, r2
 8024bb8:	781b      	ldrb	r3, [r3, #0]
 8024bba:	2b00      	cmp	r3, #0
 8024bbc:	d1e0      	bne.n	8024b80 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 8024bbe:	693b      	ldr	r3, [r7, #16]
}
 8024bc0:	4618      	mov	r0, r3
 8024bc2:	3718      	adds	r7, #24
 8024bc4:	46bd      	mov	sp, r7
 8024bc6:	bd80      	pop	{r7, pc}
 8024bc8:	20000018 	.word	0x20000018

08024bcc <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8024bcc:	b580      	push	{r7, lr}
 8024bce:	b084      	sub	sp, #16
 8024bd0:	af00      	add	r7, sp, #0
 8024bd2:	6078      	str	r0, [r7, #4]
 8024bd4:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 8024bd6:	2300      	movs	r3, #0
 8024bd8:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 8024bda:	2300      	movs	r3, #0
 8024bdc:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 8024bde:	e009      	b.n	8024bf4 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8024be0:	4b09      	ldr	r3, [pc, #36]	; (8024c08 <lv_txt_utf8_get_char_id+0x3c>)
 8024be2:	681b      	ldr	r3, [r3, #0]
 8024be4:	f107 0208 	add.w	r2, r7, #8
 8024be8:	4611      	mov	r1, r2
 8024bea:	6878      	ldr	r0, [r7, #4]
 8024bec:	4798      	blx	r3
        char_cnt++;
 8024bee:	68fb      	ldr	r3, [r7, #12]
 8024bf0:	3301      	adds	r3, #1
 8024bf2:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 8024bf4:	68bb      	ldr	r3, [r7, #8]
 8024bf6:	683a      	ldr	r2, [r7, #0]
 8024bf8:	429a      	cmp	r2, r3
 8024bfa:	d8f1      	bhi.n	8024be0 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 8024bfc:	68fb      	ldr	r3, [r7, #12]
}
 8024bfe:	4618      	mov	r0, r3
 8024c00:	3710      	adds	r7, #16
 8024c02:	46bd      	mov	sp, r7
 8024c04:	bd80      	pop	{r7, pc}
 8024c06:	bf00      	nop
 8024c08:	2000001c 	.word	0x2000001c

08024c0c <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8024c0c:	b580      	push	{r7, lr}
 8024c0e:	b084      	sub	sp, #16
 8024c10:	af00      	add	r7, sp, #0
 8024c12:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8024c14:	2300      	movs	r3, #0
 8024c16:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 8024c18:	2300      	movs	r3, #0
 8024c1a:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 8024c1c:	e009      	b.n	8024c32 <lv_txt_utf8_get_length+0x26>
        _lv_txt_encoded_next(txt, &i);
 8024c1e:	4b0a      	ldr	r3, [pc, #40]	; (8024c48 <lv_txt_utf8_get_length+0x3c>)
 8024c20:	681b      	ldr	r3, [r3, #0]
 8024c22:	f107 0208 	add.w	r2, r7, #8
 8024c26:	4611      	mov	r1, r2
 8024c28:	6878      	ldr	r0, [r7, #4]
 8024c2a:	4798      	blx	r3
        len++;
 8024c2c:	68fb      	ldr	r3, [r7, #12]
 8024c2e:	3301      	adds	r3, #1
 8024c30:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 8024c32:	68bb      	ldr	r3, [r7, #8]
 8024c34:	687a      	ldr	r2, [r7, #4]
 8024c36:	4413      	add	r3, r2
 8024c38:	781b      	ldrb	r3, [r3, #0]
 8024c3a:	2b00      	cmp	r3, #0
 8024c3c:	d1ef      	bne.n	8024c1e <lv_txt_utf8_get_length+0x12>
    }

    return len;
 8024c3e:	68fb      	ldr	r3, [r7, #12]
}
 8024c40:	4618      	mov	r0, r3
 8024c42:	3710      	adds	r7, #16
 8024c44:	46bd      	mov	sp, r7
 8024c46:	bd80      	pop	{r7, pc}
 8024c48:	2000001c 	.word	0x2000001c

08024c4c <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8024c4c:	b580      	push	{r7, lr}
 8024c4e:	b086      	sub	sp, #24
 8024c50:	af00      	add	r7, sp, #0
 8024c52:	60f8      	str	r0, [r7, #12]
 8024c54:	60b9      	str	r1, [r7, #8]
 8024c56:	607a      	str	r2, [r7, #4]
 8024c58:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8024c5a:	68bb      	ldr	r3, [r7, #8]
 8024c5c:	617b      	str	r3, [r7, #20]
 8024c5e:	e02d      	b.n	8024cbc <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 8024c60:	687b      	ldr	r3, [r7, #4]
 8024c62:	085b      	lsrs	r3, r3, #1
 8024c64:	683a      	ldr	r2, [r7, #0]
 8024c66:	fb02 f303 	mul.w	r3, r2, r3
 8024c6a:	697a      	ldr	r2, [r7, #20]
 8024c6c:	4413      	add	r3, r2
 8024c6e:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 8024c70:	6a3b      	ldr	r3, [r7, #32]
 8024c72:	6979      	ldr	r1, [r7, #20]
 8024c74:	68f8      	ldr	r0, [r7, #12]
 8024c76:	4798      	blx	r3
 8024c78:	6138      	str	r0, [r7, #16]
 8024c7a:	693b      	ldr	r3, [r7, #16]
 8024c7c:	2b00      	cmp	r3, #0
 8024c7e:	dd12      	ble.n	8024ca6 <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 8024c80:	687b      	ldr	r3, [r7, #4]
 8024c82:	085b      	lsrs	r3, r3, #1
 8024c84:	687a      	ldr	r2, [r7, #4]
 8024c86:	f002 0201 	and.w	r2, r2, #1
 8024c8a:	2a00      	cmp	r2, #0
 8024c8c:	bf0c      	ite	eq
 8024c8e:	2201      	moveq	r2, #1
 8024c90:	2200      	movne	r2, #0
 8024c92:	b2d2      	uxtb	r2, r2
 8024c94:	1a9b      	subs	r3, r3, r2
 8024c96:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 8024c98:	697a      	ldr	r2, [r7, #20]
 8024c9a:	683b      	ldr	r3, [r7, #0]
 8024c9c:	4413      	add	r3, r2
 8024c9e:	617b      	str	r3, [r7, #20]
 8024ca0:	697b      	ldr	r3, [r7, #20]
 8024ca2:	60bb      	str	r3, [r7, #8]
 8024ca4:	e00a      	b.n	8024cbc <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 8024ca6:	693b      	ldr	r3, [r7, #16]
 8024ca8:	2b00      	cmp	r3, #0
 8024caa:	da05      	bge.n	8024cb8 <_lv_utils_bsearch+0x6c>
            n /= 2;
 8024cac:	687b      	ldr	r3, [r7, #4]
 8024cae:	085b      	lsrs	r3, r3, #1
 8024cb0:	607b      	str	r3, [r7, #4]
            middle = base;
 8024cb2:	68bb      	ldr	r3, [r7, #8]
 8024cb4:	617b      	str	r3, [r7, #20]
 8024cb6:	e001      	b.n	8024cbc <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 8024cb8:	697b      	ldr	r3, [r7, #20]
 8024cba:	e003      	b.n	8024cc4 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	2b00      	cmp	r3, #0
 8024cc0:	d1ce      	bne.n	8024c60 <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8024cc2:	2300      	movs	r3, #0
}
 8024cc4:	4618      	mov	r0, r3
 8024cc6:	3718      	adds	r7, #24
 8024cc8:	46bd      	mov	sp, r7
 8024cca:	bd80      	pop	{r7, pc}

08024ccc <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8024ccc:	b480      	push	{r7}
 8024cce:	b083      	sub	sp, #12
 8024cd0:	af00      	add	r7, sp, #0
 8024cd2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024cd4:	687b      	ldr	r3, [r7, #4]
 8024cd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8024cda:	b29a      	uxth	r2, r3
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024ce2:	b29b      	uxth	r3, r3
 8024ce4:	1ad3      	subs	r3, r2, r3
 8024ce6:	b29b      	uxth	r3, r3
 8024ce8:	3301      	adds	r3, #1
 8024cea:	b29b      	uxth	r3, r3
 8024cec:	b21b      	sxth	r3, r3
}
 8024cee:	4618      	mov	r0, r3
 8024cf0:	370c      	adds	r7, #12
 8024cf2:	46bd      	mov	sp, r7
 8024cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cf8:	4770      	bx	lr

08024cfa <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8024cfa:	b480      	push	{r7}
 8024cfc:	b083      	sub	sp, #12
 8024cfe:	af00      	add	r7, sp, #0
 8024d00:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024d02:	687b      	ldr	r3, [r7, #4]
 8024d04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8024d08:	b29a      	uxth	r2, r3
 8024d0a:	687b      	ldr	r3, [r7, #4]
 8024d0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024d10:	b29b      	uxth	r3, r3
 8024d12:	1ad3      	subs	r3, r2, r3
 8024d14:	b29b      	uxth	r3, r3
 8024d16:	3301      	adds	r3, #1
 8024d18:	b29b      	uxth	r3, r3
 8024d1a:	b21b      	sxth	r3, r3
}
 8024d1c:	4618      	mov	r0, r3
 8024d1e:	370c      	adds	r7, #12
 8024d20:	46bd      	mov	sp, r7
 8024d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d26:	4770      	bx	lr

08024d28 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8024d28:	b480      	push	{r7}
 8024d2a:	b083      	sub	sp, #12
 8024d2c:	af00      	add	r7, sp, #0
 8024d2e:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8024d36:	4618      	mov	r0, r3
 8024d38:	370c      	adds	r7, #12
 8024d3a:	46bd      	mov	sp, r7
 8024d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d40:	4770      	bx	lr

08024d42 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8024d42:	b480      	push	{r7}
 8024d44:	b083      	sub	sp, #12
 8024d46:	af00      	add	r7, sp, #0
 8024d48:	6078      	str	r0, [r7, #4]
 8024d4a:	6039      	str	r1, [r7, #0]
    a->var = var;
 8024d4c:	687b      	ldr	r3, [r7, #4]
 8024d4e:	683a      	ldr	r2, [r7, #0]
 8024d50:	601a      	str	r2, [r3, #0]
}
 8024d52:	bf00      	nop
 8024d54:	370c      	adds	r7, #12
 8024d56:	46bd      	mov	sp, r7
 8024d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d5c:	4770      	bx	lr

08024d5e <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8024d5e:	b480      	push	{r7}
 8024d60:	b083      	sub	sp, #12
 8024d62:	af00      	add	r7, sp, #0
 8024d64:	6078      	str	r0, [r7, #4]
 8024d66:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	683a      	ldr	r2, [r7, #0]
 8024d6c:	605a      	str	r2, [r3, #4]
}
 8024d6e:	bf00      	nop
 8024d70:	370c      	adds	r7, #12
 8024d72:	46bd      	mov	sp, r7
 8024d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d78:	4770      	bx	lr

08024d7a <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8024d7a:	b480      	push	{r7}
 8024d7c:	b083      	sub	sp, #12
 8024d7e:	af00      	add	r7, sp, #0
 8024d80:	6078      	str	r0, [r7, #4]
 8024d82:	6039      	str	r1, [r7, #0]
    a->time = duration;
 8024d84:	683a      	ldr	r2, [r7, #0]
 8024d86:	687b      	ldr	r3, [r7, #4]
 8024d88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8024d8a:	bf00      	nop
 8024d8c:	370c      	adds	r7, #12
 8024d8e:	46bd      	mov	sp, r7
 8024d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d94:	4770      	bx	lr

08024d96 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 8024d96:	b480      	push	{r7}
 8024d98:	b085      	sub	sp, #20
 8024d9a:	af00      	add	r7, sp, #0
 8024d9c:	60f8      	str	r0, [r7, #12]
 8024d9e:	60b9      	str	r1, [r7, #8]
 8024da0:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 8024da2:	68fb      	ldr	r3, [r7, #12]
 8024da4:	68ba      	ldr	r2, [r7, #8]
 8024da6:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 8024da8:	68fb      	ldr	r3, [r7, #12]
 8024daa:	68ba      	ldr	r2, [r7, #8]
 8024dac:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 8024dae:	68fb      	ldr	r3, [r7, #12]
 8024db0:	687a      	ldr	r2, [r7, #4]
 8024db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8024db4:	bf00      	nop
 8024db6:	3714      	adds	r7, #20
 8024db8:	46bd      	mov	sp, r7
 8024dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dbe:	4770      	bx	lr

08024dc0 <lv_anim_set_playback_time>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param time      the duration of the playback animation in milliseconds. 0: disable playback
 */
static inline void lv_anim_set_playback_time(lv_anim_t * a, uint32_t time)
{
 8024dc0:	b480      	push	{r7}
 8024dc2:	b083      	sub	sp, #12
 8024dc4:	af00      	add	r7, sp, #0
 8024dc6:	6078      	str	r0, [r7, #4]
 8024dc8:	6039      	str	r1, [r7, #0]
    a->playback_time = time;
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	683a      	ldr	r2, [r7, #0]
 8024dce:	639a      	str	r2, [r3, #56]	; 0x38
}
 8024dd0:	bf00      	nop
 8024dd2:	370c      	adds	r7, #12
 8024dd4:	46bd      	mov	sp, r7
 8024dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dda:	4770      	bx	lr

08024ddc <lv_anim_set_playback_delay>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before starting the playback animation.
 */
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint32_t delay)
{
 8024ddc:	b480      	push	{r7}
 8024dde:	b083      	sub	sp, #12
 8024de0:	af00      	add	r7, sp, #0
 8024de2:	6078      	str	r0, [r7, #4]
 8024de4:	6039      	str	r1, [r7, #0]
    a->playback_delay = delay;
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	683a      	ldr	r2, [r7, #0]
 8024dea:	635a      	str	r2, [r3, #52]	; 0x34
}
 8024dec:	bf00      	nop
 8024dee:	370c      	adds	r7, #12
 8024df0:	46bd      	mov	sp, r7
 8024df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024df6:	4770      	bx	lr

08024df8 <lv_anim_set_repeat_count>:
 * Make the animation repeat itself.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
 8024df8:	b480      	push	{r7}
 8024dfa:	b083      	sub	sp, #12
 8024dfc:	af00      	add	r7, sp, #0
 8024dfe:	6078      	str	r0, [r7, #4]
 8024e00:	460b      	mov	r3, r1
 8024e02:	807b      	strh	r3, [r7, #2]
    a->repeat_cnt = cnt;
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	887a      	ldrh	r2, [r7, #2]
 8024e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8024e0c:	bf00      	nop
 8024e0e:	370c      	adds	r7, #12
 8024e10:	46bd      	mov	sp, r7
 8024e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e16:	4770      	bx	lr

08024e18 <lv_anim_set_repeat_delay>:
 * Set a delay before repeating the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
 8024e18:	b480      	push	{r7}
 8024e1a:	b083      	sub	sp, #12
 8024e1c:	af00      	add	r7, sp, #0
 8024e1e:	6078      	str	r0, [r7, #4]
 8024e20:	6039      	str	r1, [r7, #0]
    a->repeat_delay = delay;
 8024e22:	687b      	ldr	r3, [r7, #4]
 8024e24:	683a      	ldr	r2, [r7, #0]
 8024e26:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8024e28:	bf00      	nop
 8024e2a:	370c      	adds	r7, #12
 8024e2c:	46bd      	mov	sp, r7
 8024e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e32:	4770      	bx	lr

08024e34 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 8024e34:	b480      	push	{r7}
 8024e36:	b085      	sub	sp, #20
 8024e38:	af00      	add	r7, sp, #0
 8024e3a:	60f8      	str	r0, [r7, #12]
 8024e3c:	60b9      	str	r1, [r7, #8]
 8024e3e:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8024e40:	68fb      	ldr	r3, [r7, #12]
 8024e42:	781b      	ldrb	r3, [r3, #0]
 8024e44:	2b00      	cmp	r3, #0
 8024e46:	d102      	bne.n	8024e4e <lv_bidi_calculate_align+0x1a>
 8024e48:	68fb      	ldr	r3, [r7, #12]
 8024e4a:	2201      	movs	r2, #1
 8024e4c:	701a      	strb	r2, [r3, #0]
}
 8024e4e:	bf00      	nop
 8024e50:	3714      	adds	r7, #20
 8024e52:	46bd      	mov	sp, r7
 8024e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e58:	4770      	bx	lr

08024e5a <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8024e5a:	b580      	push	{r7, lr}
 8024e5c:	b084      	sub	sp, #16
 8024e5e:	af00      	add	r7, sp, #0
 8024e60:	6078      	str	r0, [r7, #4]
 8024e62:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8024e64:	2201      	movs	r2, #1
 8024e66:	6839      	ldr	r1, [r7, #0]
 8024e68:	6878      	ldr	r0, [r7, #4]
 8024e6a:	f7e7 fd41 	bl	800c8f0 <lv_obj_get_style_prop>
 8024e6e:	4603      	mov	r3, r0
 8024e70:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024e72:	68fb      	ldr	r3, [r7, #12]
 8024e74:	b21b      	sxth	r3, r3
}
 8024e76:	4618      	mov	r0, r3
 8024e78:	3710      	adds	r7, #16
 8024e7a:	46bd      	mov	sp, r7
 8024e7c:	bd80      	pop	{r7, pc}

08024e7e <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8024e7e:	b580      	push	{r7, lr}
 8024e80:	b084      	sub	sp, #16
 8024e82:	af00      	add	r7, sp, #0
 8024e84:	6078      	str	r0, [r7, #4]
 8024e86:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8024e88:	2210      	movs	r2, #16
 8024e8a:	6839      	ldr	r1, [r7, #0]
 8024e8c:	6878      	ldr	r0, [r7, #4]
 8024e8e:	f7e7 fd2f 	bl	800c8f0 <lv_obj_get_style_prop>
 8024e92:	4603      	mov	r3, r0
 8024e94:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024e96:	68fb      	ldr	r3, [r7, #12]
 8024e98:	b21b      	sxth	r3, r3
}
 8024e9a:	4618      	mov	r0, r3
 8024e9c:	3710      	adds	r7, #16
 8024e9e:	46bd      	mov	sp, r7
 8024ea0:	bd80      	pop	{r7, pc}

08024ea2 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8024ea2:	b580      	push	{r7, lr}
 8024ea4:	b084      	sub	sp, #16
 8024ea6:	af00      	add	r7, sp, #0
 8024ea8:	6078      	str	r0, [r7, #4]
 8024eaa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8024eac:	2212      	movs	r2, #18
 8024eae:	6839      	ldr	r1, [r7, #0]
 8024eb0:	6878      	ldr	r0, [r7, #4]
 8024eb2:	f7e7 fd1d 	bl	800c8f0 <lv_obj_get_style_prop>
 8024eb6:	4603      	mov	r3, r0
 8024eb8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024eba:	68fb      	ldr	r3, [r7, #12]
 8024ebc:	b21b      	sxth	r3, r3
}
 8024ebe:	4618      	mov	r0, r3
 8024ec0:	3710      	adds	r7, #16
 8024ec2:	46bd      	mov	sp, r7
 8024ec4:	bd80      	pop	{r7, pc}

08024ec6 <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8024ec6:	b580      	push	{r7, lr}
 8024ec8:	b084      	sub	sp, #16
 8024eca:	af00      	add	r7, sp, #0
 8024ecc:	6078      	str	r0, [r7, #4]
 8024ece:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8024ed0:	2220      	movs	r2, #32
 8024ed2:	6839      	ldr	r1, [r7, #0]
 8024ed4:	6878      	ldr	r0, [r7, #4]
 8024ed6:	f7e7 fd0b 	bl	800c8f0 <lv_obj_get_style_prop>
 8024eda:	4603      	mov	r3, r0
 8024edc:	60fb      	str	r3, [r7, #12]
    return v.color;
 8024ede:	7b3b      	ldrb	r3, [r7, #12]
}
 8024ee0:	4618      	mov	r0, r3
 8024ee2:	3710      	adds	r7, #16
 8024ee4:	46bd      	mov	sp, r7
 8024ee6:	bd80      	pop	{r7, pc}

08024ee8 <lv_obj_get_style_text_color_filtered>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
    return v.color;
}

static inline lv_color_t lv_obj_get_style_text_color_filtered(const struct _lv_obj_t * obj, uint32_t part)
{
 8024ee8:	b580      	push	{r7, lr}
 8024eea:	b084      	sub	sp, #16
 8024eec:	af00      	add	r7, sp, #0
 8024eee:	6078      	str	r0, [r7, #4]
 8024ef0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8024ef2:	2255      	movs	r2, #85	; 0x55
 8024ef4:	6839      	ldr	r1, [r7, #0]
 8024ef6:	6878      	ldr	r0, [r7, #4]
 8024ef8:	f7e7 fcfa 	bl	800c8f0 <lv_obj_get_style_prop>
 8024efc:	4603      	mov	r3, r0
 8024efe:	461a      	mov	r2, r3
 8024f00:	6839      	ldr	r1, [r7, #0]
 8024f02:	6878      	ldr	r0, [r7, #4]
 8024f04:	f7e7 ff40 	bl	800cd88 <_lv_obj_style_apply_color_filter>
 8024f08:	4603      	mov	r3, r0
 8024f0a:	60fb      	str	r3, [r7, #12]
    return v.color;
 8024f0c:	7b3b      	ldrb	r3, [r7, #12]
}
 8024f0e:	4618      	mov	r0, r3
 8024f10:	3710      	adds	r7, #16
 8024f12:	46bd      	mov	sp, r7
 8024f14:	bd80      	pop	{r7, pc}

08024f16 <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f16:	b580      	push	{r7, lr}
 8024f18:	b084      	sub	sp, #16
 8024f1a:	af00      	add	r7, sp, #0
 8024f1c:	6078      	str	r0, [r7, #4]
 8024f1e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8024f20:	2257      	movs	r2, #87	; 0x57
 8024f22:	6839      	ldr	r1, [r7, #0]
 8024f24:	6878      	ldr	r0, [r7, #4]
 8024f26:	f7e7 fce3 	bl	800c8f0 <lv_obj_get_style_prop>
 8024f2a:	4603      	mov	r3, r0
 8024f2c:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 8024f2e:	68fb      	ldr	r3, [r7, #12]
}
 8024f30:	4618      	mov	r0, r3
 8024f32:	3710      	adds	r7, #16
 8024f34:	46bd      	mov	sp, r7
 8024f36:	bd80      	pop	{r7, pc}

08024f38 <lv_obj_get_style_text_letter_space>:

static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f38:	b580      	push	{r7, lr}
 8024f3a:	b084      	sub	sp, #16
 8024f3c:	af00      	add	r7, sp, #0
 8024f3e:	6078      	str	r0, [r7, #4]
 8024f40:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8024f42:	2258      	movs	r2, #88	; 0x58
 8024f44:	6839      	ldr	r1, [r7, #0]
 8024f46:	6878      	ldr	r0, [r7, #4]
 8024f48:	f7e7 fcd2 	bl	800c8f0 <lv_obj_get_style_prop>
 8024f4c:	4603      	mov	r3, r0
 8024f4e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024f50:	68fb      	ldr	r3, [r7, #12]
 8024f52:	b21b      	sxth	r3, r3
}
 8024f54:	4618      	mov	r0, r3
 8024f56:	3710      	adds	r7, #16
 8024f58:	46bd      	mov	sp, r7
 8024f5a:	bd80      	pop	{r7, pc}

08024f5c <lv_obj_get_style_text_line_space>:

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f5c:	b580      	push	{r7, lr}
 8024f5e:	b084      	sub	sp, #16
 8024f60:	af00      	add	r7, sp, #0
 8024f62:	6078      	str	r0, [r7, #4]
 8024f64:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8024f66:	2259      	movs	r2, #89	; 0x59
 8024f68:	6839      	ldr	r1, [r7, #0]
 8024f6a:	6878      	ldr	r0, [r7, #4]
 8024f6c:	f7e7 fcc0 	bl	800c8f0 <lv_obj_get_style_prop>
 8024f70:	4603      	mov	r3, r0
 8024f72:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8024f74:	68fb      	ldr	r3, [r7, #12]
 8024f76:	b21b      	sxth	r3, r3
}
 8024f78:	4618      	mov	r0, r3
 8024f7a:	3710      	adds	r7, #16
 8024f7c:	46bd      	mov	sp, r7
 8024f7e:	bd80      	pop	{r7, pc}

08024f80 <lv_obj_get_style_anim>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
    return (lv_opa_t)v.num;
}

static inline const lv_anim_t * lv_obj_get_style_anim(const struct _lv_obj_t * obj, uint32_t part)
{
 8024f80:	b580      	push	{r7, lr}
 8024f82:	b084      	sub	sp, #16
 8024f84:	af00      	add	r7, sp, #0
 8024f86:	6078      	str	r0, [r7, #4]
 8024f88:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8024f8a:	2263      	movs	r2, #99	; 0x63
 8024f8c:	6839      	ldr	r1, [r7, #0]
 8024f8e:	6878      	ldr	r0, [r7, #4]
 8024f90:	f7e7 fcae 	bl	800c8f0 <lv_obj_get_style_prop>
 8024f94:	4603      	mov	r3, r0
 8024f96:	60fb      	str	r3, [r7, #12]
    return (const lv_anim_t *)v.ptr;
 8024f98:	68fb      	ldr	r3, [r7, #12]
}
 8024f9a:	4618      	mov	r0, r3
 8024f9c:	3710      	adds	r7, #16
 8024f9e:	46bd      	mov	sp, r7
 8024fa0:	bd80      	pop	{r7, pc}

08024fa2 <lv_obj_get_style_anim_speed>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
    return (uint32_t)v.num;
}

static inline uint32_t lv_obj_get_style_anim_speed(const struct _lv_obj_t * obj, uint32_t part)
{
 8024fa2:	b580      	push	{r7, lr}
 8024fa4:	b084      	sub	sp, #16
 8024fa6:	af00      	add	r7, sp, #0
 8024fa8:	6078      	str	r0, [r7, #4]
 8024faa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8024fac:	2265      	movs	r2, #101	; 0x65
 8024fae:	6839      	ldr	r1, [r7, #0]
 8024fb0:	6878      	ldr	r0, [r7, #4]
 8024fb2:	f7e7 fc9d 	bl	800c8f0 <lv_obj_get_style_prop>
 8024fb6:	4603      	mov	r3, r0
 8024fb8:	60fb      	str	r3, [r7, #12]
    return (uint32_t)v.num;
 8024fba:	68fb      	ldr	r3, [r7, #12]
}
 8024fbc:	4618      	mov	r0, r3
 8024fbe:	3710      	adds	r7, #16
 8024fc0:	46bd      	mov	sp, r7
 8024fc2:	bd80      	pop	{r7, pc}

08024fc4 <lv_label_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_label_create(lv_obj_t * parent)
{
 8024fc4:	b580      	push	{r7, lr}
 8024fc6:	b084      	sub	sp, #16
 8024fc8:	af00      	add	r7, sp, #0
 8024fca:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8024fcc:	6879      	ldr	r1, [r7, #4]
 8024fce:	4806      	ldr	r0, [pc, #24]	; (8024fe8 <lv_label_create+0x24>)
 8024fd0:	f7e2 f884 	bl	80070dc <lv_obj_class_create_obj>
 8024fd4:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 8024fd6:	68f8      	ldr	r0, [r7, #12]
 8024fd8:	f7e2 f935 	bl	8007246 <lv_obj_class_init_obj>
    return obj;
 8024fdc:	68fb      	ldr	r3, [r7, #12]
}
 8024fde:	4618      	mov	r0, r3
 8024fe0:	3710      	adds	r7, #16
 8024fe2:	46bd      	mov	sp, r7
 8024fe4:	bd80      	pop	{r7, pc}
 8024fe6:	bf00      	nop
 8024fe8:	08029f34 	.word	0x08029f34

08024fec <lv_label_set_text>:
/*=====================
 * Setter functions
 *====================*/

void lv_label_set_text(lv_obj_t * obj, const char * text)
{
 8024fec:	b590      	push	{r4, r7, lr}
 8024fee:	b085      	sub	sp, #20
 8024ff0:	af00      	add	r7, sp, #0
 8024ff2:	6078      	str	r0, [r7, #4]
 8024ff4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_label_t * label = (lv_label_t *)obj;
 8024ff6:	687b      	ldr	r3, [r7, #4]
 8024ff8:	60fb      	str	r3, [r7, #12]

    lv_obj_invalidate(obj);
 8024ffa:	6878      	ldr	r0, [r7, #4]
 8024ffc:	f7e4 fb2f 	bl	800965e <lv_obj_invalidate>

    /*If text is NULL then just refresh with the current text*/
    if(text == NULL) text = label->text;
 8025000:	683b      	ldr	r3, [r7, #0]
 8025002:	2b00      	cmp	r3, #0
 8025004:	d102      	bne.n	802500c <lv_label_set_text+0x20>
 8025006:	68fb      	ldr	r3, [r7, #12]
 8025008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802500a:	603b      	str	r3, [r7, #0]

    if(label->text == text && label->static_txt == 0) {
 802500c:	68fb      	ldr	r3, [r7, #12]
 802500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025010:	683a      	ldr	r2, [r7, #0]
 8025012:	429a      	cmp	r2, r3
 8025014:	d121      	bne.n	802505a <lv_label_set_text+0x6e>
 8025016:	68fb      	ldr	r3, [r7, #12]
 8025018:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802501c:	f003 0308 	and.w	r3, r3, #8
 8025020:	b2db      	uxtb	r3, r3
 8025022:	2b00      	cmp	r3, #0
 8025024:	d119      	bne.n	802505a <lv_label_set_text+0x6e>
        LV_ASSERT_MALLOC(label->text);
        if(label->text == NULL) return;

        _lv_txt_ap_proc(label->text, label->text);
#else
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8025026:	68fb      	ldr	r3, [r7, #12]
 8025028:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802502a:	68fb      	ldr	r3, [r7, #12]
 802502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802502e:	4618      	mov	r0, r3
 8025030:	f7db f90c 	bl	800024c <strlen>
 8025034:	4603      	mov	r3, r0
 8025036:	3301      	adds	r3, #1
 8025038:	4619      	mov	r1, r3
 802503a:	4620      	mov	r0, r4
 802503c:	f7fc febe 	bl	8021dbc <lv_mem_realloc>
 8025040:	4602      	mov	r2, r0
 8025042:	68fb      	ldr	r3, [r7, #12]
 8025044:	625a      	str	r2, [r3, #36]	; 0x24
#endif

        LV_ASSERT_MALLOC(label->text);
 8025046:	68fb      	ldr	r3, [r7, #12]
 8025048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802504a:	2b00      	cmp	r3, #0
 802504c:	d100      	bne.n	8025050 <lv_label_set_text+0x64>
 802504e:	e7fe      	b.n	802504e <lv_label_set_text+0x62>
        if(label->text == NULL) return;
 8025050:	68fb      	ldr	r3, [r7, #12]
 8025052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025054:	2b00      	cmp	r3, #0
 8025056:	d136      	bne.n	80250c6 <lv_label_set_text+0xda>
 8025058:	e03a      	b.n	80250d0 <lv_label_set_text+0xe4>
    }
    else {
        /*Free the old text*/
        if(label->text != NULL && label->static_txt == 0) {
 802505a:	68fb      	ldr	r3, [r7, #12]
 802505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802505e:	2b00      	cmp	r3, #0
 8025060:	d00f      	beq.n	8025082 <lv_label_set_text+0x96>
 8025062:	68fb      	ldr	r3, [r7, #12]
 8025064:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025068:	f003 0308 	and.w	r3, r3, #8
 802506c:	b2db      	uxtb	r3, r3
 802506e:	2b00      	cmp	r3, #0
 8025070:	d107      	bne.n	8025082 <lv_label_set_text+0x96>
            lv_mem_free(label->text);
 8025072:	68fb      	ldr	r3, [r7, #12]
 8025074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025076:	4618      	mov	r0, r3
 8025078:	f7fc fe72 	bl	8021d60 <lv_mem_free>
            label->text = NULL;
 802507c:	68fb      	ldr	r3, [r7, #12]
 802507e:	2200      	movs	r2, #0
 8025080:	625a      	str	r2, [r3, #36]	; 0x24
        if(label->text == NULL) return;

        _lv_txt_ap_proc(text, label->text);
#else
        /*Get the size of the text*/
        size_t len = strlen(text) + 1;
 8025082:	6838      	ldr	r0, [r7, #0]
 8025084:	f7db f8e2 	bl	800024c <strlen>
 8025088:	4603      	mov	r3, r0
 802508a:	3301      	adds	r3, #1
 802508c:	60bb      	str	r3, [r7, #8]

        /*Allocate space for the new text*/
        label->text = lv_mem_alloc(len);
 802508e:	68b8      	ldr	r0, [r7, #8]
 8025090:	f7fc fe36 	bl	8021d00 <lv_mem_alloc>
 8025094:	4602      	mov	r2, r0
 8025096:	68fb      	ldr	r3, [r7, #12]
 8025098:	625a      	str	r2, [r3, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 802509a:	68fb      	ldr	r3, [r7, #12]
 802509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802509e:	2b00      	cmp	r3, #0
 80250a0:	d100      	bne.n	80250a4 <lv_label_set_text+0xb8>
 80250a2:	e7fe      	b.n	80250a2 <lv_label_set_text+0xb6>
        if(label->text == NULL) return;
 80250a4:	68fb      	ldr	r3, [r7, #12]
 80250a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250a8:	2b00      	cmp	r3, #0
 80250aa:	d010      	beq.n	80250ce <lv_label_set_text+0xe2>
        strcpy(label->text, text);
 80250ac:	68fb      	ldr	r3, [r7, #12]
 80250ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250b0:	6839      	ldr	r1, [r7, #0]
 80250b2:	4618      	mov	r0, r3
 80250b4:	f001 fb02 	bl	80266bc <strcpy>
#endif

        /*Now the text is dynamically allocated*/
        label->static_txt = 0;
 80250b8:	68fa      	ldr	r2, [r7, #12]
 80250ba:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80250be:	f36f 03c3 	bfc	r3, #3, #1
 80250c2:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    }

    lv_label_refr_text(obj);
 80250c6:	6878      	ldr	r0, [r7, #4]
 80250c8:	f000 fd62 	bl	8025b90 <lv_label_refr_text>
 80250cc:	e000      	b.n	80250d0 <lv_label_set_text+0xe4>
        if(label->text == NULL) return;
 80250ce:	bf00      	nop
}
 80250d0:	3714      	adds	r7, #20
 80250d2:	46bd      	mov	sp, r7
 80250d4:	bd90      	pop	{r4, r7, pc}
	...

080250d8 <lv_label_set_long_mode>:

    lv_label_refr_text(obj);
}

void lv_label_set_long_mode(lv_obj_t * obj, lv_label_long_mode_t long_mode)
{
 80250d8:	b580      	push	{r7, lr}
 80250da:	b084      	sub	sp, #16
 80250dc:	af00      	add	r7, sp, #0
 80250de:	6078      	str	r0, [r7, #4]
 80250e0:	460b      	mov	r3, r1
 80250e2:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_label_t * label = (lv_label_t *)obj;
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	60fb      	str	r3, [r7, #12]

    /*Delete the old animation (if exists)*/
    lv_anim_del(obj, set_ofs_x_anim);
 80250e8:	4924      	ldr	r1, [pc, #144]	; (802517c <lv_label_set_long_mode+0xa4>)
 80250ea:	6878      	ldr	r0, [r7, #4]
 80250ec:	f7fa ff9c 	bl	8020028 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 80250f0:	4923      	ldr	r1, [pc, #140]	; (8025180 <lv_label_set_long_mode+0xa8>)
 80250f2:	6878      	ldr	r0, [r7, #4]
 80250f4:	f7fa ff98 	bl	8020028 <lv_anim_del>
    label->offset.x = 0;
 80250f8:	68fb      	ldr	r3, [r7, #12]
 80250fa:	2200      	movs	r2, #0
 80250fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    label->offset.y = 0;
 8025100:	68fb      	ldr	r3, [r7, #12]
 8025102:	2200      	movs	r2, #0
 8025104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 8025108:	78fb      	ldrb	r3, [r7, #3]
 802510a:	2b02      	cmp	r3, #2
 802510c:	d005      	beq.n	802511a <lv_label_set_long_mode+0x42>
 802510e:	78fb      	ldrb	r3, [r7, #3]
 8025110:	2b03      	cmp	r3, #3
 8025112:	d002      	beq.n	802511a <lv_label_set_long_mode+0x42>
 8025114:	78fb      	ldrb	r3, [r7, #3]
 8025116:	2b04      	cmp	r3, #4
 8025118:	d107      	bne.n	802512a <lv_label_set_long_mode+0x52>
        label->expand = 1;
 802511a:	68fa      	ldr	r2, [r7, #12]
 802511c:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025120:	f043 0320 	orr.w	r3, r3, #32
 8025124:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8025128:	e006      	b.n	8025138 <lv_label_set_long_mode+0x60>
    else
        label->expand = 0;
 802512a:	68fa      	ldr	r2, [r7, #12]
 802512c:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025130:	f36f 1345 	bfc	r3, #5, #1
 8025134:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48

    /*Restore the character under the dots*/
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8025138:	68fb      	ldr	r3, [r7, #12]
 802513a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802513e:	f003 0307 	and.w	r3, r3, #7
 8025142:	b2db      	uxtb	r3, r3
 8025144:	2b01      	cmp	r3, #1
 8025146:	d107      	bne.n	8025158 <lv_label_set_long_mode+0x80>
 8025148:	68fb      	ldr	r3, [r7, #12]
 802514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802514c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025150:	d002      	beq.n	8025158 <lv_label_set_long_mode+0x80>
        lv_label_revert_dots(obj);
 8025152:	6878      	ldr	r0, [r7, #4]
 8025154:	f001 f978 	bl	8026448 <lv_label_revert_dots>
    }

    label->long_mode = long_mode;
 8025158:	78fb      	ldrb	r3, [r7, #3]
 802515a:	f003 0307 	and.w	r3, r3, #7
 802515e:	b2d9      	uxtb	r1, r3
 8025160:	68fa      	ldr	r2, [r7, #12]
 8025162:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025166:	f361 0302 	bfi	r3, r1, #0, #3
 802516a:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    lv_label_refr_text(obj);
 802516e:	6878      	ldr	r0, [r7, #4]
 8025170:	f000 fd0e 	bl	8025b90 <lv_label_refr_text>
}
 8025174:	bf00      	nop
 8025176:	3710      	adds	r7, #16
 8025178:	46bd      	mov	sp, r7
 802517a:	bd80      	pop	{r7, pc}
 802517c:	080265fd 	.word	0x080265fd
 8025180:	08026623 	.word	0x08026623

08025184 <lv_label_get_text>:
/*=====================
 * Getter functions
 *====================*/

char * lv_label_get_text(const lv_obj_t * obj)
{
 8025184:	b480      	push	{r7}
 8025186:	b085      	sub	sp, #20
 8025188:	af00      	add	r7, sp, #0
 802518a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_label_t * label = (lv_label_t *)obj;
 802518c:	687b      	ldr	r3, [r7, #4]
 802518e:	60fb      	str	r3, [r7, #12]
    return label->text;
 8025190:	68fb      	ldr	r3, [r7, #12]
 8025192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8025194:	4618      	mov	r0, r3
 8025196:	3714      	adds	r7, #20
 8025198:	46bd      	mov	sp, r7
 802519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802519e:	4770      	bx	lr

080251a0 <lv_label_get_letter_on>:
    if(mutable_bidi_txt) lv_mem_buf_release(mutable_bidi_txt);
#endif
}

uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
{
 80251a0:	b590      	push	{r4, r7, lr}
 80251a2:	b09d      	sub	sp, #116	; 0x74
 80251a4:	af02      	add	r7, sp, #8
 80251a6:	6078      	str	r0, [r7, #4]
 80251a8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    LV_ASSERT_NULL(pos_in);
 80251aa:	683b      	ldr	r3, [r7, #0]
 80251ac:	2b00      	cmp	r3, #0
 80251ae:	d100      	bne.n	80251b2 <lv_label_get_letter_on+0x12>
 80251b0:	e7fe      	b.n	80251b0 <lv_label_get_letter_on+0x10>
    lv_label_t * label = (lv_label_t *)obj;
 80251b2:	687b      	ldr	r3, [r7, #4]
 80251b4:	653b      	str	r3, [r7, #80]	; 0x50

    lv_point_t pos;
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80251b6:	683b      	ldr	r3, [r7, #0]
 80251b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80251bc:	b29c      	uxth	r4, r3
 80251be:	2100      	movs	r1, #0
 80251c0:	6878      	ldr	r0, [r7, #4]
 80251c2:	f7ff fe6e 	bl	8024ea2 <lv_obj_get_style_pad_left>
 80251c6:	4603      	mov	r3, r0
 80251c8:	b29b      	uxth	r3, r3
 80251ca:	1ae3      	subs	r3, r4, r3
 80251cc:	b29b      	uxth	r3, r3
 80251ce:	b21b      	sxth	r3, r3
 80251d0:	84bb      	strh	r3, [r7, #36]	; 0x24
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80251d2:	683b      	ldr	r3, [r7, #0]
 80251d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80251d8:	b29c      	uxth	r4, r3
 80251da:	2100      	movs	r1, #0
 80251dc:	6878      	ldr	r0, [r7, #4]
 80251de:	f7ff fe4e 	bl	8024e7e <lv_obj_get_style_pad_top>
 80251e2:	4603      	mov	r3, r0
 80251e4:	b29b      	uxth	r3, r3
 80251e6:	1ae3      	subs	r3, r4, r3
 80251e8:	b29b      	uxth	r3, r3
 80251ea:	b21b      	sxth	r3, r3
 80251ec:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 80251ee:	f107 031c 	add.w	r3, r7, #28
 80251f2:	4619      	mov	r1, r3
 80251f4:	6878      	ldr	r0, [r7, #4]
 80251f6:	f7e3 fcda 	bl	8008bae <lv_obj_get_content_coords>
    const char * txt         = lv_label_get_text(obj);
 80251fa:	6878      	ldr	r0, [r7, #4]
 80251fc:	f7ff ffc2 	bl	8025184 <lv_label_get_text>
 8025200:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint32_t line_start      = 0;
 8025202:	2300      	movs	r3, #0
 8025204:	667b      	str	r3, [r7, #100]	; 0x64
    uint32_t new_line_start  = 0;
 8025206:	2300      	movs	r3, #0
 8025208:	663b      	str	r3, [r7, #96]	; 0x60
    lv_coord_t max_w         = lv_area_get_width(&txt_coords);
 802520a:	f107 031c 	add.w	r3, r7, #28
 802520e:	4618      	mov	r0, r3
 8025210:	f7ff fd5c 	bl	8024ccc <lv_area_get_width>
 8025214:	4603      	mov	r3, r0
 8025216:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802521a:	2100      	movs	r1, #0
 802521c:	6878      	ldr	r0, [r7, #4]
 802521e:	f7ff fe7a 	bl	8024f16 <lv_obj_get_style_text_font>
 8025222:	6478      	str	r0, [r7, #68]	; 0x44
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8025224:	2100      	movs	r1, #0
 8025226:	6878      	ldr	r0, [r7, #4]
 8025228:	f7ff fe98 	bl	8024f5c <lv_obj_get_style_text_line_space>
 802522c:	4603      	mov	r3, r0
 802522e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8025232:	2100      	movs	r1, #0
 8025234:	6878      	ldr	r0, [r7, #4]
 8025236:	f7ff fe7f 	bl	8024f38 <lv_obj_get_style_text_letter_space>
 802523a:	4603      	mov	r3, r0
 802523c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 8025240:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8025242:	f7ff fd71 	bl	8024d28 <lv_font_get_line_height>
 8025246:	4603      	mov	r3, r0
 8025248:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t y             = 0;
 802524a:	2300      	movs	r3, #0
 802524c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 8025250:	2300      	movs	r3, #0
 8025252:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint32_t logical_pos;
    char * bidi_txt;

    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8025256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025258:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802525c:	f003 0310 	and.w	r3, r3, #16
 8025260:	b2db      	uxtb	r3, r3
 8025262:	2b00      	cmp	r3, #0
 8025264:	d005      	beq.n	8025272 <lv_label_get_letter_on+0xd2>
 8025266:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802526a:	f043 0301 	orr.w	r3, r3, #1
 802526e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8025272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025274:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025278:	f003 0320 	and.w	r3, r3, #32
 802527c:	b2db      	uxtb	r3, r3
 802527e:	2b00      	cmp	r3, #0
 8025280:	d005      	beq.n	802528e <lv_label_get_letter_on+0xee>
 8025282:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8025286:	f043 0302 	orr.w	r3, r3, #2
 802528a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 802528e:	2100      	movs	r1, #0
 8025290:	6878      	ldr	r0, [r7, #4]
 8025292:	f7ff fde2 	bl	8024e5a <lv_obj_get_style_width>
 8025296:	4603      	mov	r3, r0
 8025298:	461a      	mov	r2, r3
 802529a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 802529e:	429a      	cmp	r2, r3
 80252a0:	d10d      	bne.n	80252be <lv_label_get_letter_on+0x11e>
 80252a2:	687b      	ldr	r3, [r7, #4]
 80252a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80252a8:	f003 0304 	and.w	r3, r3, #4
 80252ac:	b2db      	uxtb	r3, r3
 80252ae:	2b00      	cmp	r3, #0
 80252b0:	d105      	bne.n	80252be <lv_label_get_letter_on+0x11e>
 80252b2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80252b6:	f043 0304 	orr.w	r3, r3, #4
 80252ba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 80252be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252c2:	461a      	mov	r2, r3
 80252c4:	2100      	movs	r1, #0
 80252c6:	6878      	ldr	r0, [r7, #4]
 80252c8:	f7e7 ff99 	bl	800d1fe <lv_obj_calculate_style_text_align>
 80252cc:	4603      	mov	r3, r0
 80252ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*Search the line of the index letter*/;
    while(txt[line_start] != '\0') {
 80252d2:	e041      	b.n	8025358 <lv_label_get_letter_on+0x1b8>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80252d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80252d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80252d8:	18d0      	adds	r0, r2, r3
 80252da:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 80252de:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80252e2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80252e6:	9301      	str	r3, [sp, #4]
 80252e8:	2300      	movs	r3, #0
 80252ea:	9300      	str	r3, [sp, #0]
 80252ec:	460b      	mov	r3, r1
 80252ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80252f0:	f7ff f914 	bl	802451c <_lv_txt_get_next_line>
 80252f4:	4602      	mov	r2, r0
 80252f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80252f8:	4413      	add	r3, r2
 80252fa:	663b      	str	r3, [r7, #96]	; 0x60

        if(pos.y <= y + letter_height) {
 80252fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8025300:	4619      	mov	r1, r3
 8025302:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8025306:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 802530a:	4413      	add	r3, r2
 802530c:	4299      	cmp	r1, r3
 802530e:	dc16      	bgt.n	802533e <lv_label_get_letter_on+0x19e>
            /*The line is found (stored in 'line_start')*/
            /*Include the NULL terminator in the last line*/
            uint32_t tmp = new_line_start;
 8025310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025312:	613b      	str	r3, [r7, #16]
            uint32_t letter;
            letter = _lv_txt_encoded_prev(txt, &tmp);
 8025314:	4b7c      	ldr	r3, [pc, #496]	; (8025508 <lv_label_get_letter_on+0x368>)
 8025316:	681b      	ldr	r3, [r3, #0]
 8025318:	f107 0210 	add.w	r2, r7, #16
 802531c:	4611      	mov	r1, r2
 802531e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025320:	4798      	blx	r3
 8025322:	63b8      	str	r0, [r7, #56]	; 0x38
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 8025324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025326:	2b0a      	cmp	r3, #10
 8025328:	d01d      	beq.n	8025366 <lv_label_get_letter_on+0x1c6>
 802532a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802532c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802532e:	4413      	add	r3, r2
 8025330:	781b      	ldrb	r3, [r3, #0]
 8025332:	2b00      	cmp	r3, #0
 8025334:	d117      	bne.n	8025366 <lv_label_get_letter_on+0x1c6>
 8025336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025338:	3301      	adds	r3, #1
 802533a:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 802533c:	e013      	b.n	8025366 <lv_label_get_letter_on+0x1c6>
        }
        y += letter_height + line_space;
 802533e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025344:	4413      	add	r3, r2
 8025346:	b29a      	uxth	r2, r3
 8025348:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 802534c:	4413      	add	r3, r2
 802534e:	b29b      	uxth	r3, r3
 8025350:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        line_start = new_line_start;
 8025354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025356:	667b      	str	r3, [r7, #100]	; 0x64
    while(txt[line_start] != '\0') {
 8025358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802535a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802535c:	4413      	add	r3, r2
 802535e:	781b      	ldrb	r3, [r3, #0]
 8025360:	2b00      	cmp	r3, #0
 8025362:	d1b7      	bne.n	80252d4 <lv_label_get_letter_on+0x134>
 8025364:	e000      	b.n	8025368 <lv_label_get_letter_on+0x1c8>
            break;
 8025366:	bf00      	nop
    bidi_txt = lv_mem_buf_get(new_line_start - line_start + 1);
    uint32_t txt_len = new_line_start - line_start;
    if(new_line_start > 0 && txt[new_line_start - 1] == '\0' && txt_len > 0) txt_len--;
    _lv_bidi_process_paragraph(txt + line_start, bidi_txt, txt_len, lv_obj_get_style_base_dir(obj, LV_PART_MAIN), NULL, 0);
#else
    bidi_txt = (char *)txt + line_start;
 8025368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802536a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802536c:	4413      	add	r3, r2
 802536e:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 8025370:	2300      	movs	r3, #0
 8025372:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    if(align == LV_TEXT_ALIGN_CENTER) {
 8025376:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 802537a:	2b02      	cmp	r3, #2
 802537c:	d12a      	bne.n	80253d4 <lv_label_get_letter_on+0x234>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 802537e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025382:	1ad1      	subs	r1, r2, r3
 8025384:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8025388:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802538c:	9300      	str	r3, [sp, #0]
 802538e:	4613      	mov	r3, r2
 8025390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025392:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025394:	f7ff f9a0 	bl	80246d8 <lv_txt_get_width>
 8025398:	4603      	mov	r3, r0
 802539a:	863b      	strh	r3, [r7, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 802539c:	f107 031c 	add.w	r3, r7, #28
 80253a0:	4618      	mov	r0, r3
 80253a2:	f7ff fc93 	bl	8024ccc <lv_area_get_width>
 80253a6:	4603      	mov	r3, r0
 80253a8:	2b00      	cmp	r3, #0
 80253aa:	da00      	bge.n	80253ae <lv_label_get_letter_on+0x20e>
 80253ac:	3301      	adds	r3, #1
 80253ae:	105b      	asrs	r3, r3, #1
 80253b0:	b21b      	sxth	r3, r3
 80253b2:	461a      	mov	r2, r3
 80253b4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80253b8:	2b00      	cmp	r3, #0
 80253ba:	da00      	bge.n	80253be <lv_label_get_letter_on+0x21e>
 80253bc:	3301      	adds	r3, #1
 80253be:	105b      	asrs	r3, r3, #1
 80253c0:	b21b      	sxth	r3, r3
 80253c2:	1ad3      	subs	r3, r2, r3
 80253c4:	b29a      	uxth	r2, r3
 80253c6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80253ca:	4413      	add	r3, r2
 80253cc:	b29b      	uxth	r3, r3
 80253ce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80253d2:	e023      	b.n	802541c <lv_label_get_letter_on+0x27c>
    }
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80253d4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80253d8:	2b03      	cmp	r3, #3
 80253da:	d11f      	bne.n	802541c <lv_label_get_letter_on+0x27c>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80253dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80253de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80253e0:	1ad1      	subs	r1, r2, r3
 80253e2:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80253e6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80253ea:	9300      	str	r3, [sp, #0]
 80253ec:	4613      	mov	r3, r2
 80253ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80253f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80253f2:	f7ff f971 	bl	80246d8 <lv_txt_get_width>
 80253f6:	4603      	mov	r3, r0
 80253f8:	867b      	strh	r3, [r7, #50]	; 0x32
        x += lv_area_get_width(&txt_coords) - line_w;
 80253fa:	f107 031c 	add.w	r3, r7, #28
 80253fe:	4618      	mov	r0, r3
 8025400:	f7ff fc64 	bl	8024ccc <lv_area_get_width>
 8025404:	4603      	mov	r3, r0
 8025406:	461a      	mov	r2, r3
 8025408:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 802540c:	1ad3      	subs	r3, r2, r3
 802540e:	b29a      	uxth	r2, r3
 8025410:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8025414:	4413      	add	r3, r2
 8025416:	b29b      	uxth	r3, r3
 8025418:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    }

    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 802541c:	2300      	movs	r3, #0
 802541e:	76fb      	strb	r3, [r7, #27]

    uint32_t i = 0;
 8025420:	2300      	movs	r3, #0
 8025422:	617b      	str	r3, [r7, #20]
    uint32_t i_act = i;
 8025424:	697b      	ldr	r3, [r7, #20]
 8025426:	657b      	str	r3, [r7, #84]	; 0x54

    if(new_line_start > 0) {
 8025428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802542a:	2b00      	cmp	r3, #0
 802542c:	d058      	beq.n	80254e0 <lv_label_get_letter_on+0x340>
        while(i + line_start < new_line_start) {
 802542e:	e051      	b.n	80254d4 <lv_label_get_letter_on+0x334>
            /*Get the current letter and the next letter for kerning*/
            /*Be careful 'i' already points to the next character*/
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8025430:	f107 0314 	add.w	r3, r7, #20
 8025434:	f107 0208 	add.w	r2, r7, #8
 8025438:	f107 010c 	add.w	r1, r7, #12
 802543c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802543e:	f7ff f9e9 	bl	8024814 <_lv_txt_encoded_letter_next_2>

            /*Handle the recolor command*/
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8025442:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8025446:	f003 0301 	and.w	r3, r3, #1
 802544a:	2b00      	cmp	r3, #0
 802544c:	d00e      	beq.n	802546c <lv_label_get_letter_on+0x2cc>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 802544e:	697b      	ldr	r3, [r7, #20]
 8025450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025452:	4413      	add	r3, r2
 8025454:	781b      	ldrb	r3, [r3, #0]
 8025456:	461a      	mov	r2, r3
 8025458:	f107 031b 	add.w	r3, r7, #27
 802545c:	4611      	mov	r1, r2
 802545e:	4618      	mov	r0, r3
 8025460:	f7ff f99e 	bl	80247a0 <_lv_txt_is_cmd>
 8025464:	4603      	mov	r3, r0
 8025466:	2b00      	cmp	r3, #0
 8025468:	d000      	beq.n	802546c <lv_label_get_letter_on+0x2cc>
 802546a:	e033      	b.n	80254d4 <lv_label_get_letter_on+0x334>
                    continue; /*Skip the letter if it is part of a command*/
                }
            }

            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 802546c:	68fb      	ldr	r3, [r7, #12]
 802546e:	68ba      	ldr	r2, [r7, #8]
 8025470:	4619      	mov	r1, r3
 8025472:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8025474:	f7f9 ff8a 	bl	801f38c <lv_font_get_glyph_width>
 8025478:	4603      	mov	r3, r0
 802547a:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /*Finish if the x position or the last char of the next line is reached*/
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 802547c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8025480:	4619      	mov	r1, r3
 8025482:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8025486:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 802548a:	4413      	add	r3, r2
 802548c:	4299      	cmp	r1, r3
 802548e:	db0d      	blt.n	80254ac <lv_label_get_letter_on+0x30c>
 8025490:	697a      	ldr	r2, [r7, #20]
 8025492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025494:	4413      	add	r3, r2
 8025496:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025498:	429a      	cmp	r2, r3
 802549a:	d007      	beq.n	80254ac <lv_label_get_letter_on+0x30c>
 802549c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802549e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80254a0:	4413      	add	r3, r2
 80254a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80254a4:	4413      	add	r3, r2
 80254a6:	781b      	ldrb	r3, [r3, #0]
 80254a8:	2b00      	cmp	r3, #0
 80254aa:	d102      	bne.n	80254b2 <lv_label_get_letter_on+0x312>
                i = i_act;
 80254ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80254ae:	617b      	str	r3, [r7, #20]
 80254b0:	e016      	b.n	80254e0 <lv_label_get_letter_on+0x340>
                break;
            }
            x += gw;
 80254b2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80254b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80254b8:	4413      	add	r3, r2
 80254ba:	b29b      	uxth	r3, r3
 80254bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            x += letter_space;
 80254c0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80254c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80254c8:	4413      	add	r3, r2
 80254ca:	b29b      	uxth	r3, r3
 80254cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            i_act = i;
 80254d0:	697b      	ldr	r3, [r7, #20]
 80254d2:	657b      	str	r3, [r7, #84]	; 0x54
        while(i + line_start < new_line_start) {
 80254d4:	697a      	ldr	r2, [r7, #20]
 80254d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80254d8:	4413      	add	r3, r2
 80254da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80254dc:	429a      	cmp	r2, r3
 80254de:	d8a7      	bhi.n	8025430 <lv_label_get_letter_on+0x290>
                                               txt_len, lv_obj_get_style_base_dir(obj, LV_PART_MAIN), cid, &is_rtl);
        if(is_rtl) logical_pos++;
    }
    lv_mem_buf_release(bidi_txt);
#else
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 80254e0:	4b0a      	ldr	r3, [pc, #40]	; (802550c <lv_label_get_letter_on+0x36c>)
 80254e2:	681b      	ldr	r3, [r3, #0]
 80254e4:	697a      	ldr	r2, [r7, #20]
 80254e6:	4611      	mov	r1, r2
 80254e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80254ea:	4798      	blx	r3
 80254ec:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 80254ee:	4b07      	ldr	r3, [pc, #28]	; (802550c <lv_label_get_letter_on+0x36c>)
 80254f0:	681b      	ldr	r3, [r3, #0]
 80254f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80254f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80254f6:	4798      	blx	r3
 80254f8:	4602      	mov	r2, r0
 80254fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80254fc:	4413      	add	r3, r2
}
 80254fe:	4618      	mov	r0, r3
 8025500:	376c      	adds	r7, #108	; 0x6c
 8025502:	46bd      	mov	sp, r7
 8025504:	bd90      	pop	{r4, r7, pc}
 8025506:	bf00      	nop
 8025508:	20000020 	.word	0x20000020
 802550c:	20000028 	.word	0x20000028

08025510 <lv_label_get_text_selection_start>:
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
}

uint32_t lv_label_get_text_selection_start(const lv_obj_t * obj)
{
 8025510:	b480      	push	{r7}
 8025512:	b085      	sub	sp, #20
 8025514:	af00      	add	r7, sp, #0
 8025516:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

#if LV_LABEL_TEXT_SELECTION
    lv_label_t * label = (lv_label_t *)obj;
 8025518:	687b      	ldr	r3, [r7, #4]
 802551a:	60fb      	str	r3, [r7, #12]
    return label->sel_start;
 802551c:	68fb      	ldr	r3, [r7, #12]
 802551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

#else
    LV_UNUSED(obj); /*Unused*/
    return LV_LABEL_TEXT_SELECTION_OFF;
#endif
}
 8025520:	4618      	mov	r0, r3
 8025522:	3714      	adds	r7, #20
 8025524:	46bd      	mov	sp, r7
 8025526:	f85d 7b04 	ldr.w	r7, [sp], #4
 802552a:	4770      	bx	lr

0802552c <lv_label_get_text_selection_end>:

uint32_t lv_label_get_text_selection_end(const lv_obj_t * obj)
{
 802552c:	b480      	push	{r7}
 802552e:	b085      	sub	sp, #20
 8025530:	af00      	add	r7, sp, #0
 8025532:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

#if LV_LABEL_TEXT_SELECTION
    lv_label_t * label = (lv_label_t *)obj;
 8025534:	687b      	ldr	r3, [r7, #4]
 8025536:	60fb      	str	r3, [r7, #12]
    return label->sel_end;
 8025538:	68fb      	ldr	r3, [r7, #12]
 802553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#else
    LV_UNUSED(obj); /*Unused*/
    return LV_LABEL_TEXT_SELECTION_OFF;
#endif
}
 802553c:	4618      	mov	r0, r3
 802553e:	3714      	adds	r7, #20
 8025540:	46bd      	mov	sp, r7
 8025542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025546:	4770      	bx	lr

08025548 <lv_label_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_label_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8025548:	b580      	push	{r7, lr}
 802554a:	b084      	sub	sp, #16
 802554c:	af00      	add	r7, sp, #0
 802554e:	6078      	str	r0, [r7, #4]
 8025550:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_label_t * label = (lv_label_t *)obj;
 8025552:	683b      	ldr	r3, [r7, #0]
 8025554:	60fb      	str	r3, [r7, #12]

    label->text       = NULL;
 8025556:	68fb      	ldr	r3, [r7, #12]
 8025558:	2200      	movs	r2, #0
 802555a:	625a      	str	r2, [r3, #36]	; 0x24
    label->static_txt = 0;
 802555c:	68fa      	ldr	r2, [r7, #12]
 802555e:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025562:	f36f 03c3 	bfc	r3, #3, #1
 8025566:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->recolor    = 0;
 802556a:	68fa      	ldr	r2, [r7, #12]
 802556c:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025570:	f36f 1304 	bfc	r3, #4, #1
 8025574:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8025578:	68fb      	ldr	r3, [r7, #12]
 802557a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802557e:	62da      	str	r2, [r3, #44]	; 0x2c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 8025580:	68fa      	ldr	r2, [r7, #12]
 8025582:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025586:	f36f 0302 	bfc	r3, #0, #3
 802558a:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->offset.x = 0;
 802558e:	68fb      	ldr	r3, [r7, #12]
 8025590:	2200      	movs	r2, #0
 8025592:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    label->offset.y = 0;
 8025596:	68fb      	ldr	r3, [r7, #12]
 8025598:	2200      	movs	r2, #0
 802559a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if LV_LABEL_LONG_TXT_HINT
    label->hint.line_start = -1;
 802559e:	68fb      	ldr	r3, [r7, #12]
 80255a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80255a4:	631a      	str	r2, [r3, #48]	; 0x30
    label->hint.coord_y    = 0;
 80255a6:	68fb      	ldr	r3, [r7, #12]
 80255a8:	2200      	movs	r2, #0
 80255aa:	639a      	str	r2, [r3, #56]	; 0x38
    label->hint.y          = 0;
 80255ac:	68fb      	ldr	r3, [r7, #12]
 80255ae:	2200      	movs	r2, #0
 80255b0:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if LV_LABEL_TEXT_SELECTION
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 80255b2:	68fb      	ldr	r3, [r7, #12]
 80255b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80255b8:	63da      	str	r2, [r3, #60]	; 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 80255ba:	68fb      	ldr	r3, [r7, #12]
 80255bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80255c0:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    label->dot.tmp_ptr   = NULL;
 80255c2:	68fb      	ldr	r3, [r7, #12]
 80255c4:	2200      	movs	r2, #0
 80255c6:	629a      	str	r2, [r3, #40]	; 0x28
    label->dot_tmp_alloc = 0;
 80255c8:	68fa      	ldr	r2, [r7, #12]
 80255ca:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80255ce:	f36f 1386 	bfc	r3, #6, #1
 80255d2:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80255d6:	2102      	movs	r1, #2
 80255d8:	6838      	ldr	r0, [r7, #0]
 80255da:	f7e0 fbd3 	bl	8005d84 <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 80255de:	2100      	movs	r1, #0
 80255e0:	6838      	ldr	r0, [r7, #0]
 80255e2:	f7ff fd79 	bl	80250d8 <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 80255e6:	4904      	ldr	r1, [pc, #16]	; (80255f8 <lv_label_constructor+0xb0>)
 80255e8:	6838      	ldr	r0, [r7, #0]
 80255ea:	f7ff fcff 	bl	8024fec <lv_label_set_text>


    LV_TRACE_OBJ_CREATE("finished");
}
 80255ee:	bf00      	nop
 80255f0:	3710      	adds	r7, #16
 80255f2:	46bd      	mov	sp, r7
 80255f4:	bd80      	pop	{r7, pc}
 80255f6:	bf00      	nop
 80255f8:	08026720 	.word	0x08026720

080255fc <lv_label_destructor>:

static void lv_label_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80255fc:	b580      	push	{r7, lr}
 80255fe:	b084      	sub	sp, #16
 8025600:	af00      	add	r7, sp, #0
 8025602:	6078      	str	r0, [r7, #4]
 8025604:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    lv_label_t * label = (lv_label_t *)obj;
 8025606:	683b      	ldr	r3, [r7, #0]
 8025608:	60fb      	str	r3, [r7, #12]

    lv_label_dot_tmp_free(obj);
 802560a:	6838      	ldr	r0, [r7, #0]
 802560c:	f000 ffd1 	bl	80265b2 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8025610:	68fb      	ldr	r3, [r7, #12]
 8025612:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025616:	f003 0308 	and.w	r3, r3, #8
 802561a:	b2db      	uxtb	r3, r3
 802561c:	2b00      	cmp	r3, #0
 802561e:	d104      	bne.n	802562a <lv_label_destructor+0x2e>
 8025620:	68fb      	ldr	r3, [r7, #12]
 8025622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025624:	4618      	mov	r0, r3
 8025626:	f7fc fb9b 	bl	8021d60 <lv_mem_free>
    label->text = NULL;
 802562a:	68fb      	ldr	r3, [r7, #12]
 802562c:	2200      	movs	r2, #0
 802562e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8025630:	bf00      	nop
 8025632:	3710      	adds	r7, #16
 8025634:	46bd      	mov	sp, r7
 8025636:	bd80      	pop	{r7, pc}

08025638 <lv_label_event>:

static void lv_label_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8025638:	b580      	push	{r7, lr}
 802563a:	b090      	sub	sp, #64	; 0x40
 802563c:	af04      	add	r7, sp, #16
 802563e:	6078      	str	r0, [r7, #4]
 8025640:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8025642:	6839      	ldr	r1, [r7, #0]
 8025644:	486a      	ldr	r0, [pc, #424]	; (80257f0 <lv_label_event+0x1b8>)
 8025646:	f7df fa97 	bl	8004b78 <lv_obj_event_base>
 802564a:	4603      	mov	r3, r0
 802564c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(res != LV_RES_OK) return;
 8025650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8025654:	2b01      	cmp	r3, #1
 8025656:	f040 80c6 	bne.w	80257e6 <lv_label_event+0x1ae>

    lv_event_code_t code = lv_event_get_code(e);
 802565a:	6838      	ldr	r0, [r7, #0]
 802565c:	f7df fae2 	bl	8004c24 <lv_event_get_code>
 8025660:	4603      	mov	r3, r0
 8025662:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8025666:	6838      	ldr	r0, [r7, #0]
 8025668:	f7df fac4 	bl	8004bf4 <lv_event_get_target>
 802566c:	6278      	str	r0, [r7, #36]	; 0x24

    if(code == LV_EVENT_STYLE_CHANGED) {
 802566e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8025672:	2b2a      	cmp	r3, #42	; 0x2a
 8025674:	d106      	bne.n	8025684 <lv_label_event+0x4c>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(obj);
 8025676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025678:	f000 fee6 	bl	8026448 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 802567c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802567e:	f000 fa87 	bl	8025b90 <lv_label_refr_text>
 8025682:	e0b1      	b.n	80257e8 <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8025684:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8025688:	2b13      	cmp	r3, #19
 802568a:	d115      	bne.n	80256b8 <lv_label_event+0x80>
        /* Italic or other non-typical letters can be drawn of out of the object.
         * It happens if box_w + ofs_x > adw_w in the glyph.
         * To avoid this add some extra draw area.
         * font_h / 4 is an empirical value. */
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802568c:	2100      	movs	r1, #0
 802568e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025690:	f7ff fc41 	bl	8024f16 <lv_obj_get_style_text_font>
 8025694:	6138      	str	r0, [r7, #16]
        lv_coord_t font_h = lv_font_get_line_height(font);
 8025696:	6938      	ldr	r0, [r7, #16]
 8025698:	f7ff fb46 	bl	8024d28 <lv_font_get_line_height>
 802569c:	4603      	mov	r3, r0
 802569e:	81fb      	strh	r3, [r7, #14]
        lv_event_set_ext_draw_size(e, font_h / 4);
 80256a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80256a4:	2b00      	cmp	r3, #0
 80256a6:	da00      	bge.n	80256aa <lv_label_event+0x72>
 80256a8:	3303      	adds	r3, #3
 80256aa:	109b      	asrs	r3, r3, #2
 80256ac:	b21b      	sxth	r3, r3
 80256ae:	4619      	mov	r1, r3
 80256b0:	6838      	ldr	r0, [r7, #0]
 80256b2:	f7df fb6d 	bl	8004d90 <lv_event_set_ext_draw_size>
 80256b6:	e097      	b.n	80257e8 <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80256b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80256bc:	2b29      	cmp	r3, #41	; 0x29
 80256be:	d106      	bne.n	80256ce <lv_label_event+0x96>
        lv_label_revert_dots(obj);
 80256c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80256c2:	f000 fec1 	bl	8026448 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 80256c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80256c8:	f000 fa62 	bl	8025b90 <lv_label_refr_text>
 80256cc:	e08c      	b.n	80257e8 <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80256ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80256d2:	2b2c      	cmp	r3, #44	; 0x2c
 80256d4:	d17f      	bne.n	80257d6 <lv_label_event+0x19e>
        lv_point_t size;
        lv_label_t * label = (lv_label_t *)obj;
 80256d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80256d8:	623b      	str	r3, [r7, #32]
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80256da:	2100      	movs	r1, #0
 80256dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80256de:	f7ff fc1a 	bl	8024f16 <lv_obj_get_style_text_font>
 80256e2:	61f8      	str	r0, [r7, #28]
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 80256e4:	2100      	movs	r1, #0
 80256e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80256e8:	f7ff fc26 	bl	8024f38 <lv_obj_get_style_text_letter_space>
 80256ec:	4603      	mov	r3, r0
 80256ee:	837b      	strh	r3, [r7, #26]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80256f0:	2100      	movs	r1, #0
 80256f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80256f4:	f7ff fc32 	bl	8024f5c <lv_obj_get_style_text_line_space>
 80256f8:	4603      	mov	r3, r0
 80256fa:	833b      	strh	r3, [r7, #24]
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 80256fc:	2300      	movs	r3, #0
 80256fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8025702:	6a3b      	ldr	r3, [r7, #32]
 8025704:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025708:	f003 0310 	and.w	r3, r3, #16
 802570c:	b2db      	uxtb	r3, r3
 802570e:	2b00      	cmp	r3, #0
 8025710:	d005      	beq.n	802571e <lv_label_event+0xe6>
 8025712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025716:	f043 0301 	orr.w	r3, r3, #1
 802571a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 802571e:	6a3b      	ldr	r3, [r7, #32]
 8025720:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025724:	f003 0320 	and.w	r3, r3, #32
 8025728:	b2db      	uxtb	r3, r3
 802572a:	2b00      	cmp	r3, #0
 802572c:	d005      	beq.n	802573a <lv_label_event+0x102>
 802572e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025732:	f043 0302 	orr.w	r3, r3, #2
 8025736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        lv_coord_t w = lv_obj_get_content_width(obj);
 802573a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802573c:	f7e3 f9e1 	bl	8008b02 <lv_obj_get_content_width>
 8025740:	4603      	mov	r3, r0
 8025742:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8025744:	2100      	movs	r1, #0
 8025746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025748:	f7ff fb87 	bl	8024e5a <lv_obj_get_style_width>
 802574c:	4603      	mov	r3, r0
 802574e:	461a      	mov	r2, r3
 8025750:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8025754:	429a      	cmp	r2, r3
 8025756:	d10b      	bne.n	8025770 <lv_label_event+0x138>
 8025758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802575a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802575e:	f003 0304 	and.w	r3, r3, #4
 8025762:	b2db      	uxtb	r3, r3
 8025764:	2b00      	cmp	r3, #0
 8025766:	d103      	bne.n	8025770 <lv_label_event+0x138>
 8025768:	f641 73ff 	movw	r3, #8191	; 0x1fff
 802576c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802576e:	e004      	b.n	802577a <lv_label_event+0x142>
        else w = lv_obj_get_content_width(obj);
 8025770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025772:	f7e3 f9c6 	bl	8008b02 <lv_obj_get_content_width>
 8025776:	4603      	mov	r3, r0
 8025778:	85bb      	strh	r3, [r7, #44]	; 0x2c

        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 802577a:	6a3b      	ldr	r3, [r7, #32]
 802577c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 802577e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8025782:	f107 0008 	add.w	r0, r7, #8
 8025786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802578a:	9302      	str	r3, [sp, #8]
 802578c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8025790:	9301      	str	r3, [sp, #4]
 8025792:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8025796:	9300      	str	r3, [sp, #0]
 8025798:	4613      	mov	r3, r2
 802579a:	69fa      	ldr	r2, [r7, #28]
 802579c:	f7fe fd22 	bl	80241e4 <lv_txt_get_size>

        lv_point_t * self_size = lv_event_get_param(e);
 80257a0:	6838      	ldr	r0, [r7, #0]
 80257a2:	f7df fa4e 	bl	8004c42 <lv_event_get_param>
 80257a6:	6178      	str	r0, [r7, #20]
        self_size->x = LV_MAX(self_size->x, size.x);
 80257a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80257ac:	697b      	ldr	r3, [r7, #20]
 80257ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80257b2:	4293      	cmp	r3, r2
 80257b4:	bfb8      	it	lt
 80257b6:	4613      	movlt	r3, r2
 80257b8:	b21a      	sxth	r2, r3
 80257ba:	697b      	ldr	r3, [r7, #20]
 80257bc:	801a      	strh	r2, [r3, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 80257be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80257c2:	697b      	ldr	r3, [r7, #20]
 80257c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80257c8:	4293      	cmp	r3, r2
 80257ca:	bfb8      	it	lt
 80257cc:	4613      	movlt	r3, r2
 80257ce:	b21a      	sxth	r2, r3
 80257d0:	697b      	ldr	r3, [r7, #20]
 80257d2:	805a      	strh	r2, [r3, #2]
 80257d4:	e008      	b.n	80257e8 <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 80257d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80257da:	2b15      	cmp	r3, #21
 80257dc:	d104      	bne.n	80257e8 <lv_label_event+0x1b0>
        draw_main(e);
 80257de:	6838      	ldr	r0, [r7, #0]
 80257e0:	f000 f808 	bl	80257f4 <draw_main>
 80257e4:	e000      	b.n	80257e8 <lv_label_event+0x1b0>
    if(res != LV_RES_OK) return;
 80257e6:	bf00      	nop
    }
}
 80257e8:	3730      	adds	r7, #48	; 0x30
 80257ea:	46bd      	mov	sp, r7
 80257ec:	bd80      	pop	{r7, pc}
 80257ee:	bf00      	nop
 80257f0:	08029f34 	.word	0x08029f34

080257f4 <draw_main>:


static void draw_main(lv_event_t * e)
{
 80257f4:	b5b0      	push	{r4, r5, r7, lr}
 80257f6:	b09c      	sub	sp, #112	; 0x70
 80257f8:	af04      	add	r7, sp, #16
 80257fa:	6078      	str	r0, [r7, #4]
    lv_obj_t * obj = lv_event_get_target(e);
 80257fc:	6878      	ldr	r0, [r7, #4]
 80257fe:	f7df f9f9 	bl	8004bf4 <lv_event_get_target>
 8025802:	6578      	str	r0, [r7, #84]	; 0x54
    lv_label_t * label = (lv_label_t *)obj;
 8025804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025806:	653b      	str	r3, [r7, #80]	; 0x50
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8025808:	6878      	ldr	r0, [r7, #4]
 802580a:	f7df fa9b 	bl	8004d44 <lv_event_get_draw_ctx>
 802580e:	64f8      	str	r0, [r7, #76]	; 0x4c

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8025810:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025814:	4619      	mov	r1, r3
 8025816:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025818:	f7e3 f9c9 	bl	8008bae <lv_obj_get_content_coords>

    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 802581c:	2300      	movs	r3, #0
 802581e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8025822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025824:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025828:	f003 0310 	and.w	r3, r3, #16
 802582c:	b2db      	uxtb	r3, r3
 802582e:	2b00      	cmp	r3, #0
 8025830:	d005      	beq.n	802583e <draw_main+0x4a>
 8025832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025836:	f043 0301 	orr.w	r3, r3, #1
 802583a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 802583e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025840:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025844:	f003 0320 	and.w	r3, r3, #32
 8025848:	b2db      	uxtb	r3, r3
 802584a:	2b00      	cmp	r3, #0
 802584c:	d005      	beq.n	802585a <draw_main+0x66>
 802584e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025852:	f043 0302 	orr.w	r3, r3, #2
 8025856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 802585a:	2100      	movs	r1, #0
 802585c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802585e:	f7ff fafc 	bl	8024e5a <lv_obj_get_style_width>
 8025862:	4603      	mov	r3, r0
 8025864:	461a      	mov	r2, r3
 8025866:	f242 73d1 	movw	r3, #10193	; 0x27d1
 802586a:	429a      	cmp	r2, r3
 802586c:	d10d      	bne.n	802588a <draw_main+0x96>
 802586e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025870:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8025874:	f003 0304 	and.w	r3, r3, #4
 8025878:	b2db      	uxtb	r3, r3
 802587a:	2b00      	cmp	r3, #0
 802587c:	d105      	bne.n	802588a <draw_main+0x96>
 802587e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025882:	f043 0304 	orr.w	r3, r3, #4
 8025886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_label_dsc_t label_draw_dsc;
    lv_draw_label_dsc_init(&label_draw_dsc);
 802588a:	f107 0318 	add.w	r3, r7, #24
 802588e:	4618      	mov	r0, r3
 8025890:	f7ea ffdc 	bl	801084c <lv_draw_label_dsc_init>

    label_draw_dsc.ofs_x = label->offset.x;
 8025894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025896:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 802589a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    label_draw_dsc.ofs_y = label->offset.y;
 802589c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802589e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80258a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    label_draw_dsc.flag = flag;
 80258a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80258a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 80258ac:	f107 0318 	add.w	r3, r7, #24
 80258b0:	461a      	mov	r2, r3
 80258b2:	2100      	movs	r1, #0
 80258b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80258b6:	f7e2 fa7a 	bl	8007dae <lv_obj_init_draw_label_dsc>
    lv_bidi_calculate_align(&label_draw_dsc.align, &label_draw_dsc.bidi_dir, label->text);
 80258ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80258bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80258be:	f107 0318 	add.w	r3, r7, #24
 80258c2:	f103 0119 	add.w	r1, r3, #25
 80258c6:	f107 0318 	add.w	r3, r7, #24
 80258ca:	331a      	adds	r3, #26
 80258cc:	4618      	mov	r0, r3
 80258ce:	f7ff fab1 	bl	8024e34 <lv_bidi_calculate_align>

    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 80258d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80258d4:	f7ff fe1c 	bl	8025510 <lv_label_get_text_selection_start>
 80258d8:	4603      	mov	r3, r0
 80258da:	61fb      	str	r3, [r7, #28]
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 80258dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80258de:	f7ff fe25 	bl	802552c <lv_label_get_text_selection_end>
 80258e2:	4603      	mov	r3, r0
 80258e4:	623b      	str	r3, [r7, #32]
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 80258e6:	69fb      	ldr	r3, [r7, #28]
 80258e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80258ec:	4293      	cmp	r3, r2
 80258ee:	d012      	beq.n	8025916 <draw_main+0x122>
 80258f0:	6a3b      	ldr	r3, [r7, #32]
 80258f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80258f6:	4293      	cmp	r3, r2
 80258f8:	d00d      	beq.n	8025916 <draw_main+0x122>
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 80258fa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80258fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025900:	f7ff faf2 	bl	8024ee8 <lv_obj_get_style_text_color_filtered>
 8025904:	f887 0025 	strb.w	r0, [r7, #37]	; 0x25
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 8025908:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802590c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802590e:	f7ff fada 	bl	8024ec6 <lv_obj_get_style_bg_color>
 8025912:	f887 0026 	strb.w	r0, [r7, #38]	; 0x26
    }

    /* In SCROLL and SCROLL_CIRCULAR mode the CENTER and RIGHT are pointless, so remove them.
     * (In addition, they will create misalignment in this situation)*/
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8025916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025918:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802591c:	f003 0307 	and.w	r3, r3, #7
 8025920:	b2db      	uxtb	r3, r3
 8025922:	2b02      	cmp	r3, #2
 8025924:	d007      	beq.n	8025936 <draw_main+0x142>
 8025926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025928:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802592c:	f003 0307 	and.w	r3, r3, #7
 8025930:	b2db      	uxtb	r3, r3
 8025932:	2b03      	cmp	r3, #3
 8025934:	d128      	bne.n	8025988 <draw_main+0x194>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8025936:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 802593a:	2b02      	cmp	r3, #2
 802593c:	d003      	beq.n	8025946 <draw_main+0x152>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 802593e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8025942:	2b03      	cmp	r3, #3
 8025944:	d120      	bne.n	8025988 <draw_main+0x194>
        lv_point_t size;
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8025946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 802594a:	69bc      	ldr	r4, [r7, #24]
 802594c:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 8025950:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8025954:	f107 000c 	add.w	r0, r7, #12
 8025958:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 802595c:	9202      	str	r2, [sp, #8]
 802595e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8025962:	9201      	str	r2, [sp, #4]
 8025964:	9300      	str	r3, [sp, #0]
 8025966:	462b      	mov	r3, r5
 8025968:	4622      	mov	r2, r4
 802596a:	f7fe fc3b 	bl	80241e4 <lv_txt_get_size>
                        LV_COORD_MAX, flag);
        if(size.x > lv_area_get_width(&txt_coords)) {
 802596e:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
 8025972:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025976:	4618      	mov	r0, r3
 8025978:	f7ff f9a8 	bl	8024ccc <lv_area_get_width>
 802597c:	4603      	mov	r3, r0
 802597e:	429c      	cmp	r4, r3
 8025980:	dd02      	ble.n	8025988 <draw_main+0x194>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8025982:	2301      	movs	r3, #1
 8025984:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }
    }
#if LV_LABEL_LONG_TXT_HINT
    lv_draw_label_hint_t * hint = &label->hint;
 8025988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802598a:	3330      	adds	r3, #48	; 0x30
 802598c:	65bb      	str	r3, [r7, #88]	; 0x58
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 802598e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025990:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025994:	f003 0307 	and.w	r3, r3, #7
 8025998:	b2db      	uxtb	r3, r3
 802599a:	2b03      	cmp	r3, #3
 802599c:	d008      	beq.n	80259b0 <draw_main+0x1bc>
 802599e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80259a2:	4618      	mov	r0, r3
 80259a4:	f7ff f9a9 	bl	8024cfa <lv_area_get_height>
 80259a8:	4603      	mov	r3, r0
 80259aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80259ae:	da01      	bge.n	80259b4 <draw_main+0x1c0>
        hint = NULL;
 80259b0:	2300      	movs	r3, #0
 80259b2:	65bb      	str	r3, [r7, #88]	; 0x58
    /*Just for compatibility*/
    lv_draw_label_hint_t * hint = NULL;
#endif

    lv_area_t txt_clip;
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 80259b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80259b6:	689a      	ldr	r2, [r3, #8]
 80259b8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80259bc:	f107 0310 	add.w	r3, r7, #16
 80259c0:	4618      	mov	r0, r3
 80259c2:	f7fa fe7d 	bl	80206c0 <_lv_area_intersect>
 80259c6:	4603      	mov	r3, r0
 80259c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if(!is_common) return;
 80259cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80259d0:	f083 0301 	eor.w	r3, r3, #1
 80259d4:	b2db      	uxtb	r3, r3
 80259d6:	2b00      	cmp	r3, #0
 80259d8:	f040 80d6 	bne.w	8025b88 <draw_main+0x394>

    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 80259dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80259de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80259e2:	f003 0307 	and.w	r3, r3, #7
 80259e6:	b2db      	uxtb	r3, r3
 80259e8:	2b00      	cmp	r3, #0
 80259ea:	d114      	bne.n	8025a16 <draw_main+0x222>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 80259ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80259ee:	f7e4 fd67 	bl	800a4c0 <lv_obj_get_scroll_top>
 80259f2:	4603      	mov	r3, r0
 80259f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        lv_area_move(&txt_coords, 0, -s);
 80259f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80259fc:	425b      	negs	r3, r3
 80259fe:	b29b      	uxth	r3, r3
 8025a00:	b21a      	sxth	r2, r3
 8025a02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025a06:	2100      	movs	r1, #0
 8025a08:	4618      	mov	r0, r3
 8025a0a:	f7fa fe23 	bl	8020654 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8025a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025a10:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8025a14:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025a1c:	f003 0307 	and.w	r3, r3, #7
 8025a20:	b2db      	uxtb	r3, r3
 8025a22:	2b02      	cmp	r3, #2
 8025a24:	d007      	beq.n	8025a36 <draw_main+0x242>
 8025a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025a2c:	f003 0307 	and.w	r3, r3, #7
 8025a30:	b2db      	uxtb	r3, r3
 8025a32:	2b03      	cmp	r3, #3
 8025a34:	d116      	bne.n	8025a64 <draw_main+0x270>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8025a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025a38:	689b      	ldr	r3, [r3, #8]
 8025a3a:	647b      	str	r3, [r7, #68]	; 0x44
        draw_ctx->clip_area = &txt_clip;
 8025a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025a3e:	f107 0210 	add.w	r2, r7, #16
 8025a42:	609a      	str	r2, [r3, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a46:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025a48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025a4c:	f107 0118 	add.w	r1, r7, #24
 8025a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025a52:	9300      	str	r3, [sp, #0]
 8025a54:	4603      	mov	r3, r0
 8025a56:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025a58:	f7ea ff24 	bl	80108a4 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8025a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025a60:	609a      	str	r2, [r3, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025a62:	e00b      	b.n	8025a7c <draw_main+0x288>
    }
    else {
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025a68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025a6c:	f107 0118 	add.w	r1, r7, #24
 8025a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025a72:	9300      	str	r3, [sp, #0]
 8025a74:	4603      	mov	r3, r0
 8025a76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025a78:	f7ea ff14 	bl	80108a4 <lv_draw_label>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8025a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025a7e:	689b      	ldr	r3, [r3, #8]
 8025a80:	643b      	str	r3, [r7, #64]	; 0x40
    draw_ctx->clip_area = &txt_clip;
 8025a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025a84:	f107 0210 	add.w	r2, r7, #16
 8025a88:	609a      	str	r2, [r3, #8]

    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025a90:	f003 0307 	and.w	r3, r3, #7
 8025a94:	b2db      	uxtb	r3, r3
 8025a96:	2b03      	cmp	r3, #3
 8025a98:	d172      	bne.n	8025b80 <draw_main+0x38c>
        lv_point_t size;
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8025a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025a9e:	69bc      	ldr	r4, [r7, #24]
 8025aa0:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 8025aa4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8025aa8:	f107 0008 	add.w	r0, r7, #8
 8025aac:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8025ab0:	9202      	str	r2, [sp, #8]
 8025ab2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8025ab6:	9201      	str	r2, [sp, #4]
 8025ab8:	9300      	str	r3, [sp, #0]
 8025aba:	462b      	mov	r3, r5
 8025abc:	4622      	mov	r2, r4
 8025abe:	f7fe fb91 	bl	80241e4 <lv_txt_get_size>
                        LV_COORD_MAX, flag);

        /*Draw the text again on label to the original to make a circular effect */
        if(size.x > lv_area_get_width(&txt_coords)) {
 8025ac2:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 8025ac6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025aca:	4618      	mov	r0, r3
 8025acc:	f7ff f8fe 	bl	8024ccc <lv_area_get_width>
 8025ad0:	4603      	mov	r3, r0
 8025ad2:	429c      	cmp	r4, r3
 8025ad4:	dd27      	ble.n	8025b26 <draw_main+0x332>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8025ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ad8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8025adc:	b29a      	uxth	r2, r3
 8025ade:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8025ae2:	b29b      	uxth	r3, r3
 8025ae4:	4413      	add	r3, r2
 8025ae6:	b29c      	uxth	r4, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8025ae8:	69bb      	ldr	r3, [r7, #24]
 8025aea:	2220      	movs	r2, #32
 8025aec:	2120      	movs	r1, #32
 8025aee:	4618      	mov	r0, r3
 8025af0:	f7f9 fc4c 	bl	801f38c <lv_font_get_glyph_width>
 8025af4:	4603      	mov	r3, r0
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8025af6:	461a      	mov	r2, r3
 8025af8:	0052      	lsls	r2, r2, #1
 8025afa:	4413      	add	r3, r2
 8025afc:	b29b      	uxth	r3, r3
 8025afe:	4423      	add	r3, r4
 8025b00:	b29b      	uxth	r3, r3
 8025b02:	b21b      	sxth	r3, r3
 8025b04:	85bb      	strh	r3, [r7, #44]	; 0x2c
            label_draw_dsc.ofs_y = label->offset.y;
 8025b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b08:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8025b0c:	85fb      	strh	r3, [r7, #46]	; 0x2e

            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b10:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025b12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025b16:	f107 0118 	add.w	r1, r7, #24
 8025b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025b1c:	9300      	str	r3, [sp, #0]
 8025b1e:	4603      	mov	r3, r0
 8025b20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025b22:	f7ea febf 	bl	80108a4 <lv_draw_label>
        }

        /*Draw the text again below the original to make a circular effect */
        if(size.y > lv_area_get_height(&txt_coords)) {
 8025b26:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8025b2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025b2e:	4618      	mov	r0, r3
 8025b30:	f7ff f8e3 	bl	8024cfa <lv_area_get_height>
 8025b34:	4603      	mov	r3, r0
 8025b36:	429c      	cmp	r4, r3
 8025b38:	dd22      	ble.n	8025b80 <draw_main+0x38c>
            label_draw_dsc.ofs_x = label->offset.x;
 8025b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b3c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8025b40:	85bb      	strh	r3, [r7, #44]	; 0x2c
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8025b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b44:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8025b48:	b29a      	uxth	r2, r3
 8025b4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8025b4e:	b29b      	uxth	r3, r3
 8025b50:	4413      	add	r3, r2
 8025b52:	b29c      	uxth	r4, r3
 8025b54:	69bb      	ldr	r3, [r7, #24]
 8025b56:	4618      	mov	r0, r3
 8025b58:	f7ff f8e6 	bl	8024d28 <lv_font_get_line_height>
 8025b5c:	4603      	mov	r3, r0
 8025b5e:	b29b      	uxth	r3, r3
 8025b60:	4423      	add	r3, r4
 8025b62:	b29b      	uxth	r3, r3
 8025b64:	b21b      	sxth	r3, r3
 8025b66:	85fb      	strh	r3, [r7, #46]	; 0x2e

            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025b6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025b70:	f107 0118 	add.w	r1, r7, #24
 8025b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025b76:	9300      	str	r3, [sp, #0]
 8025b78:	4603      	mov	r3, r0
 8025b7a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025b7c:	f7ea fe92 	bl	80108a4 <lv_draw_label>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 8025b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8025b84:	609a      	str	r2, [r3, #8]
 8025b86:	e000      	b.n	8025b8a <draw_main+0x396>
    if(!is_common) return;
 8025b88:	bf00      	nop
}
 8025b8a:	3760      	adds	r7, #96	; 0x60
 8025b8c:	46bd      	mov	sp, r7
 8025b8e:	bdb0      	pop	{r4, r5, r7, pc}

08025b90 <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * obj)
{
 8025b90:	b590      	push	{r4, r7, lr}
 8025b92:	b0b7      	sub	sp, #220	; 0xdc
 8025b94:	af04      	add	r7, sp, #16
 8025b96:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(label->text == NULL) return;
 8025b9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ba4:	2b00      	cmp	r3, #0
 8025ba6:	f000 8442 	beq.w	802642e <lv_label_refr_text+0x89e>
#if LV_LABEL_LONG_TXT_HINT
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8025baa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025bb2:	631a      	str	r2, [r3, #48]	; 0x30
#endif

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8025bb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025bb8:	4619      	mov	r1, r3
 8025bba:	6878      	ldr	r0, [r7, #4]
 8025bbc:	f7e2 fff7 	bl	8008bae <lv_obj_get_content_coords>
    lv_coord_t max_w         = lv_area_get_width(&txt_coords);
 8025bc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025bc4:	4618      	mov	r0, r3
 8025bc6:	f7ff f881 	bl	8024ccc <lv_area_get_width>
 8025bca:	4603      	mov	r3, r0
 8025bcc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8025bd0:	2100      	movs	r1, #0
 8025bd2:	6878      	ldr	r0, [r7, #4]
 8025bd4:	f7ff f99f 	bl	8024f16 <lv_obj_get_style_text_font>
 8025bd8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8025bdc:	2100      	movs	r1, #0
 8025bde:	6878      	ldr	r0, [r7, #4]
 8025be0:	f7ff f9bc 	bl	8024f5c <lv_obj_get_style_text_line_space>
 8025be4:	4603      	mov	r3, r0
 8025be6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8025bea:	2100      	movs	r1, #0
 8025bec:	6878      	ldr	r0, [r7, #4]
 8025bee:	f7ff f9a3 	bl	8024f38 <lv_obj_get_style_text_letter_space>
 8025bf2:	4603      	mov	r3, r0
 8025bf4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8025bf8:	2300      	movs	r3, #0
 8025bfa:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8025bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025c06:	f003 0310 	and.w	r3, r3, #16
 8025c0a:	b2db      	uxtb	r3, r3
 8025c0c:	2b00      	cmp	r3, #0
 8025c0e:	d005      	beq.n	8025c1c <lv_label_refr_text+0x8c>
 8025c10:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025c14:	f043 0301 	orr.w	r3, r3, #1
 8025c18:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8025c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025c24:	f003 0320 	and.w	r3, r3, #32
 8025c28:	b2db      	uxtb	r3, r3
 8025c2a:	2b00      	cmp	r3, #0
 8025c2c:	d005      	beq.n	8025c3a <lv_label_refr_text+0xaa>
 8025c2e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025c32:	f043 0302 	orr.w	r3, r3, #2
 8025c36:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8025c3a:	2100      	movs	r1, #0
 8025c3c:	6878      	ldr	r0, [r7, #4]
 8025c3e:	f7ff f90c 	bl	8024e5a <lv_obj_get_style_width>
 8025c42:	4603      	mov	r3, r0
 8025c44:	461a      	mov	r2, r3
 8025c46:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8025c4a:	429a      	cmp	r2, r3
 8025c4c:	d10d      	bne.n	8025c6a <lv_label_refr_text+0xda>
 8025c4e:	687b      	ldr	r3, [r7, #4]
 8025c50:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8025c54:	f003 0304 	and.w	r3, r3, #4
 8025c58:	b2db      	uxtb	r3, r3
 8025c5a:	2b00      	cmp	r3, #0
 8025c5c:	d105      	bne.n	8025c6a <lv_label_refr_text+0xda>
 8025c5e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025c62:	f043 0304 	orr.w	r3, r3, #4
 8025c66:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8025c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025c70:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8025c74:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8025c78:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025c7c:	9302      	str	r3, [sp, #8]
 8025c7e:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8025c82:	9301      	str	r3, [sp, #4]
 8025c84:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8025c88:	9300      	str	r3, [sp, #0]
 8025c8a:	4613      	mov	r3, r2
 8025c8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8025c90:	f7fe faa8 	bl	80241e4 <lv_txt_get_size>

    lv_obj_refresh_self_size(obj);
 8025c94:	6878      	ldr	r0, [r7, #4]
 8025c96:	f7e3 f815 	bl	8008cc4 <lv_obj_refresh_self_size>

    /*In scroll mode start an offset animation*/
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8025c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025ca2:	f003 0307 	and.w	r3, r3, #7
 8025ca6:	b2db      	uxtb	r3, r3
 8025ca8:	2b02      	cmp	r3, #2
 8025caa:	f040 815d 	bne.w	8025f68 <lv_label_refr_text+0x3d8>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8025cae:	2100      	movs	r1, #0
 8025cb0:	6878      	ldr	r0, [r7, #4]
 8025cb2:	f7ff f976 	bl	8024fa2 <lv_obj_get_style_anim_speed>
 8025cb6:	4603      	mov	r3, r0
 8025cb8:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8025cbc:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8025cc0:	2b00      	cmp	r3, #0
 8025cc2:	d10f      	bne.n	8025ce4 <lv_label_refr_text+0x154>
 8025cc4:	6878      	ldr	r0, [r7, #4]
 8025cc6:	f7e8 f8e5 	bl	800de94 <lv_obj_get_disp>
 8025cca:	4603      	mov	r3, r0
 8025ccc:	4618      	mov	r0, r3
 8025cce:	f7fa f84f 	bl	801fd70 <lv_disp_get_dpi>
 8025cd2:	4603      	mov	r3, r0
 8025cd4:	4aa1      	ldr	r2, [pc, #644]	; (8025f5c <lv_label_refr_text+0x3cc>)
 8025cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8025cda:	17db      	asrs	r3, r3, #31
 8025cdc:	1ad3      	subs	r3, r2, r3
 8025cde:	b21b      	sxth	r3, r3
 8025ce0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        lv_anim_t a;
        lv_anim_init(&a);
 8025ce4:	f107 0308 	add.w	r3, r7, #8
 8025ce8:	4618      	mov	r0, r3
 8025cea:	f7fa f8ff 	bl	801feec <lv_anim_init>
        lv_anim_set_var(&a, obj);
 8025cee:	f107 0308 	add.w	r3, r7, #8
 8025cf2:	6879      	ldr	r1, [r7, #4]
 8025cf4:	4618      	mov	r0, r3
 8025cf6:	f7ff f824 	bl	8024d42 <lv_anim_set_var>
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 8025cfa:	f107 0308 	add.w	r3, r7, #8
 8025cfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8025d02:	4618      	mov	r0, r3
 8025d04:	f7ff f878 	bl	8024df8 <lv_anim_set_repeat_count>
        lv_anim_set_playback_delay(&a, LV_LABEL_SCROLL_DELAY);
 8025d08:	f107 0308 	add.w	r3, r7, #8
 8025d0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8025d10:	4618      	mov	r0, r3
 8025d12:	f7ff f863 	bl	8024ddc <lv_anim_set_playback_delay>
        lv_anim_set_repeat_delay(&a, a.playback_delay);
 8025d16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025d18:	f107 0308 	add.w	r3, r7, #8
 8025d1c:	4611      	mov	r1, r2
 8025d1e:	4618      	mov	r0, r3
 8025d20:	f7ff f87a 	bl	8024e18 <lv_anim_set_repeat_delay>

        bool hor_anim = false;
 8025d24:	2300      	movs	r3, #0
 8025d26:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if(size.x > lv_area_get_width(&txt_coords)) {
 8025d2a:	f9b7 4054 	ldrsh.w	r4, [r7, #84]	; 0x54
 8025d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025d32:	4618      	mov	r0, r3
 8025d34:	f7fe ffca 	bl	8024ccc <lv_area_get_width>
 8025d38:	4603      	mov	r3, r0
 8025d3a:	429c      	cmp	r4, r3
 8025d3c:	dd76      	ble.n	8025e2c <lv_label_refr_text+0x29c>
                end = lv_area_get_width(&txt_coords) - size.x;
            }

            lv_anim_set_values(&a, start, end);
#else
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8025d3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025d42:	4618      	mov	r0, r3
 8025d44:	f7fe ffc2 	bl	8024ccc <lv_area_get_width>
 8025d48:	4603      	mov	r3, r0
 8025d4a:	461a      	mov	r2, r3
 8025d4c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8025d50:	1ad2      	subs	r2, r2, r3
 8025d52:	f107 0308 	add.w	r3, r7, #8
 8025d56:	2100      	movs	r1, #0
 8025d58:	4618      	mov	r0, r3
 8025d5a:	f7ff f81c 	bl	8024d96 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8025d5e:	f107 0308 	add.w	r3, r7, #8
 8025d62:	497f      	ldr	r1, [pc, #508]	; (8025f60 <lv_label_refr_text+0x3d0>)
 8025d64:	4618      	mov	r0, r3
 8025d66:	f7fe fffa 	bl	8024d5e <lv_anim_set_exec_cb>
#endif
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8025d6a:	f107 0308 	add.w	r3, r7, #8
 8025d6e:	497c      	ldr	r1, [pc, #496]	; (8025f60 <lv_label_refr_text+0x3d0>)
 8025d70:	4618      	mov	r0, r3
 8025d72:	f7fe fff4 	bl	8024d5e <lv_anim_set_exec_cb>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8025d76:	497a      	ldr	r1, [pc, #488]	; (8025f60 <lv_label_refr_text+0x3d0>)
 8025d78:	6878      	ldr	r0, [r7, #4]
 8025d7a:	f7fa f995 	bl	80200a8 <lv_anim_get>
 8025d7e:	66f8      	str	r0, [r7, #108]	; 0x6c
            int32_t act_time = 0;
 8025d80:	2300      	movs	r3, #0
 8025d82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            bool playback_now = false;
 8025d86:	2300      	movs	r3, #0
 8025d88:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
            if(anim_cur) {
 8025d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025d8e:	2b00      	cmp	r3, #0
 8025d90:	d00f      	beq.n	8025db2 <lv_label_refr_text+0x222>
                act_time = anim_cur->act_time;
 8025d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                playback_now = anim_cur->playback_now;
 8025d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025d9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8025da0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8025da4:	b2db      	uxtb	r3, r3
 8025da6:	2b00      	cmp	r3, #0
 8025da8:	bf14      	ite	ne
 8025daa:	2301      	movne	r3, #1
 8025dac:	2300      	moveq	r3, #0
 8025dae:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
            }
            if(act_time < a.time) {
 8025db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025db4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8025db8:	429a      	cmp	r2, r3
 8025dba:	da18      	bge.n	8025dee <lv_label_refr_text+0x25e>
                a.act_time = act_time;      /*To keep the old position*/
 8025dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8025dc0:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 8025dc2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8025dc6:	f36f 0300 	bfc	r3, #0, #1
 8025dca:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(playback_now) {
 8025dce:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	d00b      	beq.n	8025dee <lv_label_refr_text+0x25e>
                    a.playback_now = 1;
 8025dd6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8025dda:	f043 0302 	orr.w	r3, r3, #2
 8025dde:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    /*Swap the start and end values*/
                    int32_t tmp;
                    tmp      = a.start_value;
 8025de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025de4:	66bb      	str	r3, [r7, #104]	; 0x68
                    a.start_value = a.end_value;
 8025de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025de8:	62bb      	str	r3, [r7, #40]	; 0x28
                    a.end_value   = tmp;
 8025dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025dec:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8025dee:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8025df2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025df6:	4618      	mov	r0, r3
 8025df8:	f7fa f97e 	bl	80200f8 <lv_anim_speed_to_time>
 8025dfc:	4602      	mov	r2, r0
 8025dfe:	f107 0308 	add.w	r3, r7, #8
 8025e02:	4611      	mov	r1, r2
 8025e04:	4618      	mov	r0, r3
 8025e06:	f7fe ffb8 	bl	8024d7a <lv_anim_set_time>
            lv_anim_set_playback_time(&a, a.time);
 8025e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e0c:	461a      	mov	r2, r3
 8025e0e:	f107 0308 	add.w	r3, r7, #8
 8025e12:	4611      	mov	r1, r2
 8025e14:	4618      	mov	r0, r3
 8025e16:	f7fe ffd3 	bl	8024dc0 <lv_anim_set_playback_time>
            lv_anim_start(&a);
 8025e1a:	f107 0308 	add.w	r3, r7, #8
 8025e1e:	4618      	mov	r0, r3
 8025e20:	f7fa f88a 	bl	801ff38 <lv_anim_start>
            hor_anim = true;
 8025e24:	2301      	movs	r3, #1
 8025e26:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8025e2a:	e008      	b.n	8025e3e <lv_label_refr_text+0x2ae>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_x_anim);
 8025e2c:	494c      	ldr	r1, [pc, #304]	; (8025f60 <lv_label_refr_text+0x3d0>)
 8025e2e:	6878      	ldr	r0, [r7, #4]
 8025e30:	f7fa f8fa 	bl	8020028 <lv_anim_del>
            label->offset.x = 0;
 8025e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025e38:	2200      	movs	r2, #0
 8025e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        }

        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8025e3e:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 8025e42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025e46:	4618      	mov	r0, r3
 8025e48:	f7fe ff57 	bl	8024cfa <lv_area_get_height>
 8025e4c:	4603      	mov	r3, r0
 8025e4e:	429c      	cmp	r4, r3
 8025e50:	dd7a      	ble.n	8025f48 <lv_label_refr_text+0x3b8>
 8025e52:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8025e56:	f083 0301 	eor.w	r3, r3, #1
 8025e5a:	b2db      	uxtb	r3, r3
 8025e5c:	2b00      	cmp	r3, #0
 8025e5e:	d073      	beq.n	8025f48 <lv_label_refr_text+0x3b8>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8025e60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025e64:	4618      	mov	r0, r3
 8025e66:	f7fe ff48 	bl	8024cfa <lv_area_get_height>
 8025e6a:	4603      	mov	r3, r0
 8025e6c:	461a      	mov	r2, r3
 8025e6e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8025e72:	1ad4      	subs	r4, r2, r3
 8025e74:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8025e78:	f7fe ff56 	bl	8024d28 <lv_font_get_line_height>
 8025e7c:	4603      	mov	r3, r0
 8025e7e:	1ae2      	subs	r2, r4, r3
 8025e80:	f107 0308 	add.w	r3, r7, #8
 8025e84:	2100      	movs	r1, #0
 8025e86:	4618      	mov	r0, r3
 8025e88:	f7fe ff85 	bl	8024d96 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_y_anim);
 8025e8c:	f107 0308 	add.w	r3, r7, #8
 8025e90:	4934      	ldr	r1, [pc, #208]	; (8025f64 <lv_label_refr_text+0x3d4>)
 8025e92:	4618      	mov	r0, r3
 8025e94:	f7fe ff63 	bl	8024d5e <lv_anim_set_exec_cb>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8025e98:	4932      	ldr	r1, [pc, #200]	; (8025f64 <lv_label_refr_text+0x3d4>)
 8025e9a:	6878      	ldr	r0, [r7, #4]
 8025e9c:	f7fa f904 	bl	80200a8 <lv_anim_get>
 8025ea0:	6678      	str	r0, [r7, #100]	; 0x64
            int32_t act_time = 0;
 8025ea2:	2300      	movs	r3, #0
 8025ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            bool playback_now = false;
 8025ea8:	2300      	movs	r3, #0
 8025eaa:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
            if(anim_cur) {
 8025eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025eb0:	2b00      	cmp	r3, #0
 8025eb2:	d00f      	beq.n	8025ed4 <lv_label_refr_text+0x344>
                act_time = anim_cur->act_time;
 8025eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                playback_now = anim_cur->playback_now;
 8025ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8025ec2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8025ec6:	b2db      	uxtb	r3, r3
 8025ec8:	2b00      	cmp	r3, #0
 8025eca:	bf14      	ite	ne
 8025ecc:	2301      	movne	r3, #1
 8025ece:	2300      	moveq	r3, #0
 8025ed0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
            }
            if(act_time < a.time) {
 8025ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8025eda:	429a      	cmp	r2, r3
 8025edc:	da18      	bge.n	8025f10 <lv_label_refr_text+0x380>
                a.act_time = act_time;      /*To keep the old position*/
 8025ede:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8025ee2:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 8025ee4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8025ee8:	f36f 0300 	bfc	r3, #0, #1
 8025eec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(playback_now) {
 8025ef0:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8025ef4:	2b00      	cmp	r3, #0
 8025ef6:	d00b      	beq.n	8025f10 <lv_label_refr_text+0x380>
                    a.playback_now = 1;
 8025ef8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8025efc:	f043 0302 	orr.w	r3, r3, #2
 8025f00:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    /*Swap the start and end values*/
                    int32_t tmp;
                    tmp      = a.start_value;
 8025f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f06:	663b      	str	r3, [r7, #96]	; 0x60
                    a.start_value = a.end_value;
 8025f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f0a:	62bb      	str	r3, [r7, #40]	; 0x28
                    a.end_value   = tmp;
 8025f0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025f0e:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8025f10:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8025f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025f18:	4618      	mov	r0, r3
 8025f1a:	f7fa f8ed 	bl	80200f8 <lv_anim_speed_to_time>
 8025f1e:	4602      	mov	r2, r0
 8025f20:	f107 0308 	add.w	r3, r7, #8
 8025f24:	4611      	mov	r1, r2
 8025f26:	4618      	mov	r0, r3
 8025f28:	f7fe ff27 	bl	8024d7a <lv_anim_set_time>
            lv_anim_set_playback_time(&a, a.time);
 8025f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025f2e:	461a      	mov	r2, r3
 8025f30:	f107 0308 	add.w	r3, r7, #8
 8025f34:	4611      	mov	r1, r2
 8025f36:	4618      	mov	r0, r3
 8025f38:	f7fe ff42 	bl	8024dc0 <lv_anim_set_playback_time>
            lv_anim_start(&a);
 8025f3c:	f107 0308 	add.w	r3, r7, #8
 8025f40:	4618      	mov	r0, r3
 8025f42:	f7f9 fff9 	bl	801ff38 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8025f46:	e26e      	b.n	8026426 <lv_label_refr_text+0x896>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_y_anim);
 8025f48:	4906      	ldr	r1, [pc, #24]	; (8025f64 <lv_label_refr_text+0x3d4>)
 8025f4a:	6878      	ldr	r0, [r7, #4]
 8025f4c:	f7fa f86c 	bl	8020028 <lv_anim_del>
            label->offset.y = 0;
 8025f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025f54:	2200      	movs	r2, #0
 8025f56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8025f5a:	e264      	b.n	8026426 <lv_label_refr_text+0x896>
 8025f5c:	55555556 	.word	0x55555556
 8025f60:	080265fd 	.word	0x080265fd
 8025f64:	08026623 	.word	0x08026623
        }
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025f6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025f70:	f003 0307 	and.w	r3, r3, #7
 8025f74:	b2db      	uxtb	r3, r3
 8025f76:	2b03      	cmp	r3, #3
 8025f78:	f040 8109 	bne.w	802618e <lv_label_refr_text+0x5fe>
        const lv_anim_t * anim_template = lv_obj_get_style_anim(obj, LV_PART_MAIN);
 8025f7c:	2100      	movs	r1, #0
 8025f7e:	6878      	ldr	r0, [r7, #4]
 8025f80:	f7fe fffe 	bl	8024f80 <lv_obj_get_style_anim>
 8025f84:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8025f88:	2100      	movs	r1, #0
 8025f8a:	6878      	ldr	r0, [r7, #4]
 8025f8c:	f7ff f809 	bl	8024fa2 <lv_obj_get_style_anim_speed>
 8025f90:	4603      	mov	r3, r0
 8025f92:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8025f96:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8025f9a:	2b00      	cmp	r3, #0
 8025f9c:	d10f      	bne.n	8025fbe <lv_label_refr_text+0x42e>
 8025f9e:	6878      	ldr	r0, [r7, #4]
 8025fa0:	f7e7 ff78 	bl	800de94 <lv_obj_get_disp>
 8025fa4:	4603      	mov	r3, r0
 8025fa6:	4618      	mov	r0, r3
 8025fa8:	f7f9 fee2 	bl	801fd70 <lv_disp_get_dpi>
 8025fac:	4603      	mov	r3, r0
 8025fae:	4ac2      	ldr	r2, [pc, #776]	; (80262b8 <lv_label_refr_text+0x728>)
 8025fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8025fb4:	17db      	asrs	r3, r3, #31
 8025fb6:	1ad3      	subs	r3, r2, r3
 8025fb8:	b21b      	sxth	r3, r3
 8025fba:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        lv_anim_t a;
        lv_anim_init(&a);
 8025fbe:	f107 0308 	add.w	r3, r7, #8
 8025fc2:	4618      	mov	r0, r3
 8025fc4:	f7f9 ff92 	bl	801feec <lv_anim_init>
        lv_anim_set_var(&a, obj);
 8025fc8:	f107 0308 	add.w	r3, r7, #8
 8025fcc:	6879      	ldr	r1, [r7, #4]
 8025fce:	4618      	mov	r0, r3
 8025fd0:	f7fe feb7 	bl	8024d42 <lv_anim_set_var>
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 8025fd4:	f107 0308 	add.w	r3, r7, #8
 8025fd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8025fdc:	4618      	mov	r0, r3
 8025fde:	f7fe ff0b 	bl	8024df8 <lv_anim_set_repeat_count>

        bool hor_anim = false;
 8025fe2:	2300      	movs	r3, #0
 8025fe4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        if(size.x > lv_area_get_width(&txt_coords)) {
 8025fe8:	f9b7 4054 	ldrsh.w	r4, [r7, #84]	; 0x54
 8025fec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025ff0:	4618      	mov	r0, r3
 8025ff2:	f7fe fe6b 	bl	8024ccc <lv_area_get_width>
 8025ff6:	4603      	mov	r3, r0
 8025ff8:	429c      	cmp	r4, r3
 8025ffa:	dd55      	ble.n	80260a8 <lv_label_refr_text+0x518>
                end = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
            }

            lv_anim_set_values(&a, start, end);
#else
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8025ffc:	2220      	movs	r2, #32
 8025ffe:	2120      	movs	r1, #32
 8026000:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8026004:	f7f9 f9c2 	bl	801f38c <lv_font_get_glyph_width>
 8026008:	4603      	mov	r3, r0
 802600a:	461a      	mov	r2, r3
 802600c:	009b      	lsls	r3, r3, #2
 802600e:	1ad3      	subs	r3, r2, r3
 8026010:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8026014:	1a9a      	subs	r2, r3, r2
 8026016:	f107 0308 	add.w	r3, r7, #8
 802601a:	2100      	movs	r1, #0
 802601c:	4618      	mov	r0, r3
 802601e:	f7fe feba 	bl	8024d96 <lv_anim_set_values>
#endif
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8026022:	f107 0308 	add.w	r3, r7, #8
 8026026:	49a5      	ldr	r1, [pc, #660]	; (80262bc <lv_label_refr_text+0x72c>)
 8026028:	4618      	mov	r0, r3
 802602a:	f7fe fe98 	bl	8024d5e <lv_anim_set_exec_cb>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 802602e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8026032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8026034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026036:	4618      	mov	r0, r3
 8026038:	f7fa f85e 	bl	80200f8 <lv_anim_speed_to_time>
 802603c:	4602      	mov	r2, r0
 802603e:	f107 0308 	add.w	r3, r7, #8
 8026042:	4611      	mov	r1, r2
 8026044:	4618      	mov	r0, r3
 8026046:	f7fe fe98 	bl	8024d7a <lv_anim_set_time>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 802604a:	499c      	ldr	r1, [pc, #624]	; (80262bc <lv_label_refr_text+0x72c>)
 802604c:	6878      	ldr	r0, [r7, #4]
 802604e:	f7fa f82b 	bl	80200a8 <lv_anim_get>
 8026052:	67f8      	str	r0, [r7, #124]	; 0x7c
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8026054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8026056:	2b00      	cmp	r3, #0
 8026058:	d002      	beq.n	8026060 <lv_label_refr_text+0x4d0>
 802605a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802605e:	e000      	b.n	8026062 <lv_label_refr_text+0x4d2>
 8026060:	2300      	movs	r3, #0
 8026062:	67bb      	str	r3, [r7, #120]	; 0x78

            /*If a template animation exists, consider it's start delay and repeat delay*/
            if(anim_template) {
 8026064:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026068:	2b00      	cmp	r3, #0
 802606a:	d008      	beq.n	802607e <lv_label_refr_text+0x4ee>
                a.act_time = anim_template->act_time;
 802606c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026072:	63bb      	str	r3, [r7, #56]	; 0x38
                a.repeat_delay = anim_template->repeat_delay;
 8026074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802607a:	647b      	str	r3, [r7, #68]	; 0x44
 802607c:	e00b      	b.n	8026096 <lv_label_refr_text+0x506>
            }
            else if(act_time < a.time) {
 802607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026080:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8026082:	429a      	cmp	r2, r3
 8026084:	da07      	bge.n	8026096 <lv_label_refr_text+0x506>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8026086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8026088:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 802608a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 802608e:	f36f 0300 	bfc	r3, #0, #1
 8026092:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            lv_anim_start(&a);
 8026096:	f107 0308 	add.w	r3, r7, #8
 802609a:	4618      	mov	r0, r3
 802609c:	f7f9 ff4c 	bl	801ff38 <lv_anim_start>
            hor_anim = true;
 80260a0:	2301      	movs	r3, #1
 80260a2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80260a6:	e008      	b.n	80260ba <lv_label_refr_text+0x52a>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_x_anim);
 80260a8:	4984      	ldr	r1, [pc, #528]	; (80262bc <lv_label_refr_text+0x72c>)
 80260aa:	6878      	ldr	r0, [r7, #4]
 80260ac:	f7f9 ffbc 	bl	8020028 <lv_anim_del>
            label->offset.x = 0;
 80260b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80260b4:	2200      	movs	r2, #0
 80260b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        }

        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 80260ba:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 80260be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80260c2:	4618      	mov	r0, r3
 80260c4:	f7fe fe19 	bl	8024cfa <lv_area_get_height>
 80260c8:	4603      	mov	r3, r0
 80260ca:	429c      	cmp	r4, r3
 80260cc:	dd55      	ble.n	802617a <lv_label_refr_text+0x5ea>
 80260ce:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80260d2:	f083 0301 	eor.w	r3, r3, #1
 80260d6:	b2db      	uxtb	r3, r3
 80260d8:	2b00      	cmp	r3, #0
 80260da:	d04e      	beq.n	802617a <lv_label_refr_text+0x5ea>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 80260dc:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80260e0:	425c      	negs	r4, r3
 80260e2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80260e6:	f7fe fe1f 	bl	8024d28 <lv_font_get_line_height>
 80260ea:	4603      	mov	r3, r0
 80260ec:	1ae2      	subs	r2, r4, r3
 80260ee:	f107 0308 	add.w	r3, r7, #8
 80260f2:	2100      	movs	r1, #0
 80260f4:	4618      	mov	r0, r3
 80260f6:	f7fe fe4e 	bl	8024d96 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_y_anim);
 80260fa:	f107 0308 	add.w	r3, r7, #8
 80260fe:	4970      	ldr	r1, [pc, #448]	; (80262c0 <lv_label_refr_text+0x730>)
 8026100:	4618      	mov	r0, r3
 8026102:	f7fe fe2c 	bl	8024d5e <lv_anim_set_exec_cb>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8026106:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 802610a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802610c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802610e:	4618      	mov	r0, r3
 8026110:	f7f9 fff2 	bl	80200f8 <lv_anim_speed_to_time>
 8026114:	4602      	mov	r2, r0
 8026116:	f107 0308 	add.w	r3, r7, #8
 802611a:	4611      	mov	r1, r2
 802611c:	4618      	mov	r0, r3
 802611e:	f7fe fe2c 	bl	8024d7a <lv_anim_set_time>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8026122:	4967      	ldr	r1, [pc, #412]	; (80262c0 <lv_label_refr_text+0x730>)
 8026124:	6878      	ldr	r0, [r7, #4]
 8026126:	f7f9 ffbf 	bl	80200a8 <lv_anim_get>
 802612a:	6778      	str	r0, [r7, #116]	; 0x74
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 802612c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802612e:	2b00      	cmp	r3, #0
 8026130:	d002      	beq.n	8026138 <lv_label_refr_text+0x5a8>
 8026132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026136:	e000      	b.n	802613a <lv_label_refr_text+0x5aa>
 8026138:	2300      	movs	r3, #0
 802613a:	673b      	str	r3, [r7, #112]	; 0x70

            /*If a template animation exists, consider it's start delay and repeat delay*/
            if(anim_template) {
 802613c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026140:	2b00      	cmp	r3, #0
 8026142:	d008      	beq.n	8026156 <lv_label_refr_text+0x5c6>
                a.act_time = anim_template->act_time;
 8026144:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802614a:	63bb      	str	r3, [r7, #56]	; 0x38
                a.repeat_delay = anim_template->repeat_delay;
 802614c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026152:	647b      	str	r3, [r7, #68]	; 0x44
 8026154:	e00b      	b.n	802616e <lv_label_refr_text+0x5de>
            }
            else if(act_time < a.time) {
 8026156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026158:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802615a:	429a      	cmp	r2, r3
 802615c:	da07      	bge.n	802616e <lv_label_refr_text+0x5de>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 802615e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026160:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 8026162:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8026166:	f36f 0300 	bfc	r3, #0, #1
 802616a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            lv_anim_start(&a);
 802616e:	f107 0308 	add.w	r3, r7, #8
 8026172:	4618      	mov	r0, r3
 8026174:	f7f9 fee0 	bl	801ff38 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8026178:	e155      	b.n	8026426 <lv_label_refr_text+0x896>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_y_anim);
 802617a:	4951      	ldr	r1, [pc, #324]	; (80262c0 <lv_label_refr_text+0x730>)
 802617c:	6878      	ldr	r0, [r7, #4]
 802617e:	f7f9 ff53 	bl	8020028 <lv_anim_del>
            label->offset.y = 0;
 8026182:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026186:	2200      	movs	r2, #0
 8026188:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802618c:	e14b      	b.n	8026426 <lv_label_refr_text+0x896>
        }
    }
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 802618e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026192:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8026196:	f003 0307 	and.w	r3, r3, #7
 802619a:	b2db      	uxtb	r3, r3
 802619c:	2b01      	cmp	r3, #1
 802619e:	f040 8142 	bne.w	8026426 <lv_label_refr_text+0x896>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 80261a2:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 80261a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80261aa:	4618      	mov	r0, r3
 80261ac:	f7fe fda5 	bl	8024cfa <lv_area_get_height>
 80261b0:	4603      	mov	r3, r0
 80261b2:	429c      	cmp	r4, r3
 80261b4:	dc05      	bgt.n	80261c2 <lv_label_refr_text+0x632>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80261b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80261ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80261be:	62da      	str	r2, [r3, #44]	; 0x2c
 80261c0:	e131      	b.n	8026426 <lv_label_refr_text+0x896>
        }
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 80261c2:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 80261c6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80261ca:	f7fe fdad 	bl	8024d28 <lv_font_get_line_height>
 80261ce:	4603      	mov	r3, r0
 80261d0:	429c      	cmp	r4, r3
 80261d2:	dc05      	bgt.n	80261e0 <lv_label_refr_text+0x650>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80261d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80261d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80261dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80261de:	e122      	b.n	8026426 <lv_label_refr_text+0x896>
        }
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 80261e0:	4b38      	ldr	r3, [pc, #224]	; (80262c4 <lv_label_refr_text+0x734>)
 80261e2:	681b      	ldr	r3, [r3, #0]
 80261e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80261e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80261ea:	4610      	mov	r0, r2
 80261ec:	4798      	blx	r3
 80261ee:	4603      	mov	r3, r0
 80261f0:	2b03      	cmp	r3, #3
 80261f2:	d805      	bhi.n	8026200 <lv_label_refr_text+0x670>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80261f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80261f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80261fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80261fe:	e112      	b.n	8026426 <lv_label_refr_text+0x896>
        }
        else {
            lv_point_t p;
            lv_coord_t y_overed;
            p.x = lv_area_get_width(&txt_coords) -
 8026200:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8026204:	4618      	mov	r0, r3
 8026206:	f7fe fd61 	bl	8024ccc <lv_area_get_width>
 802620a:	4603      	mov	r3, r0
 802620c:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 802620e:	222e      	movs	r2, #46	; 0x2e
 8026210:	212e      	movs	r1, #46	; 0x2e
 8026212:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8026216:	f7f9 f8b9 	bl	801f38c <lv_font_get_glyph_width>
 802621a:	4603      	mov	r3, r0
 802621c:	461a      	mov	r2, r3
 802621e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8026222:	4413      	add	r3, r2
            p.x = lv_area_get_width(&txt_coords) -
 8026224:	b29b      	uxth	r3, r3
 8026226:	461a      	mov	r2, r3
 8026228:	009b      	lsls	r3, r3, #2
 802622a:	1ad3      	subs	r3, r2, r3
 802622c:	b29b      	uxth	r3, r3
 802622e:	4423      	add	r3, r4
 8026230:	b29b      	uxth	r3, r3
 8026232:	b21b      	sxth	r3, r3
 8026234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                  LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_area_get_height(&txt_coords);
 8026238:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802623c:	4618      	mov	r0, r3
 802623e:	f7fe fd5c 	bl	8024cfa <lv_area_get_height>
 8026242:	4603      	mov	r3, r0
 8026244:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            y_overed = p.y %
 8026248:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 802624c:	461c      	mov	r4, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 802624e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8026252:	f7fe fd69 	bl	8024d28 <lv_font_get_line_height>
 8026256:	4603      	mov	r3, r0
 8026258:	461a      	mov	r2, r3
 802625a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 802625e:	4413      	add	r3, r2
            y_overed = p.y %
 8026260:	fb94 f2f3 	sdiv	r2, r4, r3
 8026264:	fb02 f303 	mul.w	r3, r2, r3
 8026268:	1ae3      	subs	r3, r4, r3
 802626a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
            if(y_overed >= lv_font_get_line_height(font)) {
 802626e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8026272:	f7fe fd59 	bl	8024d28 <lv_font_get_line_height>
 8026276:	4603      	mov	r3, r0
 8026278:	461a      	mov	r2, r3
 802627a:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 802627e:	4293      	cmp	r3, r2
 8026280:	db22      	blt.n	80262c8 <lv_label_refr_text+0x738>
                p.y -= y_overed;
 8026282:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8026286:	b29a      	uxth	r2, r3
 8026288:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 802628c:	1ad3      	subs	r3, r2, r3
 802628e:	b29b      	uxth	r3, r3
 8026290:	b21b      	sxth	r3, r3
 8026292:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                p.y += lv_font_get_line_height(font);
 8026296:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802629a:	f7fe fd45 	bl	8024d28 <lv_font_get_line_height>
 802629e:	4603      	mov	r3, r0
 80262a0:	4619      	mov	r1, r3
 80262a2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80262a6:	b29a      	uxth	r2, r3
 80262a8:	b28b      	uxth	r3, r1
 80262aa:	4413      	add	r3, r2
 80262ac:	b29b      	uxth	r3, r3
 80262ae:	b21b      	sxth	r3, r3
 80262b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80262b4:	e01c      	b.n	80262f0 <lv_label_refr_text+0x760>
 80262b6:	bf00      	nop
 80262b8:	55555556 	.word	0x55555556
 80262bc:	080265fd 	.word	0x080265fd
 80262c0:	08026623 	.word	0x08026623
 80262c4:	2000002c 	.word	0x2000002c
            }
            else {
                p.y -= y_overed;
 80262c8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80262cc:	b29a      	uxth	r2, r3
 80262ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80262d2:	1ad3      	subs	r3, r2, r3
 80262d4:	b29b      	uxth	r3, r3
 80262d6:	b21b      	sxth	r3, r3
 80262d8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                p.y -= line_space;
 80262dc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80262e0:	b29a      	uxth	r2, r3
 80262e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80262e6:	1ad3      	subs	r3, r2, r3
 80262e8:	b29b      	uxth	r3, r3
 80262ea:	b21b      	sxth	r3, r3
 80262ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
 80262f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80262f4:	4619      	mov	r1, r3
 80262f6:	6878      	ldr	r0, [r7, #4]
 80262f8:	f7fe ff52 	bl	80251a0 <lv_label_get_letter_on>
 80262fc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

            /*Be sure there is space for the dots*/
            size_t txt_len = strlen(label->text);
 8026300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026306:	4618      	mov	r0, r3
 8026308:	f7d9 ffa0 	bl	800024c <strlen>
 802630c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8026310:	4b49      	ldr	r3, [pc, #292]	; (8026438 <lv_label_refr_text+0x8a8>)
 8026312:	681b      	ldr	r3, [r3, #0]
 8026314:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8026318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802631a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 802631e:	4610      	mov	r0, r2
 8026320:	4798      	blx	r3
 8026322:	4603      	mov	r3, r0
 8026324:	64fb      	str	r3, [r7, #76]	; 0x4c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8026326:	e00d      	b.n	8026344 <lv_label_refr_text+0x7b4>
                _lv_txt_encoded_prev(label->text, &byte_id);
 8026328:	4b44      	ldr	r3, [pc, #272]	; (802643c <lv_label_refr_text+0x8ac>)
 802632a:	681b      	ldr	r3, [r3, #0]
 802632c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8026330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026332:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8026336:	4610      	mov	r0, r2
 8026338:	4798      	blx	r3
                letter_id--;
 802633a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802633e:	3b01      	subs	r3, #1
 8026340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8026344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026346:	3303      	adds	r3, #3
 8026348:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802634c:	429a      	cmp	r2, r3
 802634e:	d3eb      	bcc.n	8026328 <lv_label_refr_text+0x798>
            }

            /*Save letters under the dots and replace them with dots*/
            uint32_t byte_id_ori = byte_id;
 8026350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            uint32_t i;
            uint8_t len = 0;
 8026356:	2300      	movs	r3, #0
 8026358:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 802635c:	2300      	movs	r3, #0
 802635e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8026362:	e026      	b.n	80263b2 <lv_label_refr_text+0x822>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8026364:	4b36      	ldr	r3, [pc, #216]	; (8026440 <lv_label_refr_text+0x8b0>)
 8026366:	681b      	ldr	r3, [r3, #0]
 8026368:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802636c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 802636e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8026370:	440a      	add	r2, r1
 8026372:	4610      	mov	r0, r2
 8026374:	4798      	blx	r3
 8026376:	4603      	mov	r3, r0
 8026378:	461a      	mov	r2, r3
 802637a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 802637e:	4413      	add	r3, r2
 8026380:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                _lv_txt_encoded_next(label->text, &byte_id);
 8026384:	4b2f      	ldr	r3, [pc, #188]	; (8026444 <lv_label_refr_text+0x8b4>)
 8026386:	681b      	ldr	r3, [r3, #0]
 8026388:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802638c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802638e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8026392:	4610      	mov	r0, r2
 8026394:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8026396:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 802639a:	2b03      	cmp	r3, #3
 802639c:	d80d      	bhi.n	80263ba <lv_label_refr_text+0x82a>
 802639e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80263a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80263a4:	429a      	cmp	r2, r3
 80263a6:	d308      	bcc.n	80263ba <lv_label_refr_text+0x82a>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 80263a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80263ac:	3301      	adds	r3, #1
 80263ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80263b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80263b6:	2b03      	cmp	r3, #3
 80263b8:	d9d4      	bls.n	8026364 <lv_label_refr_text+0x7d4>
                    break;
                }
            }

            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 80263ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80263be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80263c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80263c4:	4413      	add	r3, r2
 80263c6:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 80263ca:	4619      	mov	r1, r3
 80263cc:	6878      	ldr	r0, [r7, #4]
 80263ce:	f000 f893 	bl	80264f8 <lv_label_set_dot_tmp>
 80263d2:	4603      	mov	r3, r0
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	d026      	beq.n	8026426 <lv_label_refr_text+0x896>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80263d8:	2300      	movs	r3, #0
 80263da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80263de:	e00f      	b.n	8026400 <lv_label_refr_text+0x870>
                    label->text[byte_id_ori + i] = '.';
 80263e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80263e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80263e6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80263ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80263ee:	440b      	add	r3, r1
 80263f0:	4413      	add	r3, r2
 80263f2:	222e      	movs	r2, #46	; 0x2e
 80263f4:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80263f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80263fa:	3301      	adds	r3, #1
 80263fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8026400:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026404:	2b02      	cmp	r3, #2
 8026406:	d9eb      	bls.n	80263e0 <lv_label_refr_text+0x850>
                }
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8026408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802640c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802640e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026412:	3303      	adds	r3, #3
 8026414:	4413      	add	r3, r2
 8026416:	2200      	movs	r2, #0
 8026418:	701a      	strb	r2, [r3, #0]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 802641a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802641e:	1cda      	adds	r2, r3, #3
 8026420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026424:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    else if(label->long_mode == LV_LABEL_LONG_CLIP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(obj);
 8026426:	6878      	ldr	r0, [r7, #4]
 8026428:	f7e3 f919 	bl	800965e <lv_obj_invalidate>
 802642c:	e000      	b.n	8026430 <lv_label_refr_text+0x8a0>
    if(label->text == NULL) return;
 802642e:	bf00      	nop
}
 8026430:	37cc      	adds	r7, #204	; 0xcc
 8026432:	46bd      	mov	sp, r7
 8026434:	bd90      	pop	{r4, r7, pc}
 8026436:	bf00      	nop
 8026438:	20000024 	.word	0x20000024
 802643c:	20000020 	.word	0x20000020
 8026440:	20000018 	.word	0x20000018
 8026444:	2000001c 	.word	0x2000001c

08026448 <lv_label_revert_dots>:


static void lv_label_revert_dots(lv_obj_t * obj)
{
 8026448:	b580      	push	{r7, lr}
 802644a:	b088      	sub	sp, #32
 802644c:	af00      	add	r7, sp, #0
 802644e:	6078      	str	r0, [r7, #4]

    lv_label_t * label = (lv_label_t *)obj;
 8026450:	687b      	ldr	r3, [r7, #4]
 8026452:	61bb      	str	r3, [r7, #24]

    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8026454:	69bb      	ldr	r3, [r7, #24]
 8026456:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802645a:	f003 0307 	and.w	r3, r3, #7
 802645e:	b2db      	uxtb	r3, r3
 8026460:	2b01      	cmp	r3, #1
 8026462:	d141      	bne.n	80264e8 <lv_label_revert_dots+0xa0>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8026464:	69bb      	ldr	r3, [r7, #24]
 8026466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802646c:	d03e      	beq.n	80264ec <lv_label_revert_dots+0xa4>
    uint32_t letter_i = label->dot_end - LV_LABEL_DOT_NUM;
 802646e:	69bb      	ldr	r3, [r7, #24]
 8026470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026472:	3b03      	subs	r3, #3
 8026474:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 8026476:	4b1f      	ldr	r3, [pc, #124]	; (80264f4 <lv_label_revert_dots+0xac>)
 8026478:	681b      	ldr	r3, [r3, #0]
 802647a:	69ba      	ldr	r2, [r7, #24]
 802647c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802647e:	6979      	ldr	r1, [r7, #20]
 8026480:	4610      	mov	r0, r2
 8026482:	4798      	blx	r3
 8026484:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 8026486:	2300      	movs	r3, #0
 8026488:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(obj);
 802648a:	6878      	ldr	r0, [r7, #4]
 802648c:	f000 f878 	bl	8026580 <lv_label_get_dot_tmp>
 8026490:	60f8      	str	r0, [r7, #12]
    while(label->text[byte_i + i] != '\0') {
 8026492:	e00d      	b.n	80264b0 <lv_label_revert_dots+0x68>
        label->text[byte_i + i] = dot_tmp[i];
 8026494:	7ffb      	ldrb	r3, [r7, #31]
 8026496:	68fa      	ldr	r2, [r7, #12]
 8026498:	441a      	add	r2, r3
 802649a:	69bb      	ldr	r3, [r7, #24]
 802649c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 802649e:	7ff8      	ldrb	r0, [r7, #31]
 80264a0:	693b      	ldr	r3, [r7, #16]
 80264a2:	4403      	add	r3, r0
 80264a4:	440b      	add	r3, r1
 80264a6:	7812      	ldrb	r2, [r2, #0]
 80264a8:	701a      	strb	r2, [r3, #0]
        i++;
 80264aa:	7ffb      	ldrb	r3, [r7, #31]
 80264ac:	3301      	adds	r3, #1
 80264ae:	77fb      	strb	r3, [r7, #31]
    while(label->text[byte_i + i] != '\0') {
 80264b0:	69bb      	ldr	r3, [r7, #24]
 80264b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80264b4:	7ff9      	ldrb	r1, [r7, #31]
 80264b6:	693b      	ldr	r3, [r7, #16]
 80264b8:	440b      	add	r3, r1
 80264ba:	4413      	add	r3, r2
 80264bc:	781b      	ldrb	r3, [r3, #0]
 80264be:	2b00      	cmp	r3, #0
 80264c0:	d1e8      	bne.n	8026494 <lv_label_revert_dots+0x4c>
    }
    label->text[byte_i + i] = dot_tmp[i];
 80264c2:	7ffb      	ldrb	r3, [r7, #31]
 80264c4:	68fa      	ldr	r2, [r7, #12]
 80264c6:	441a      	add	r2, r3
 80264c8:	69bb      	ldr	r3, [r7, #24]
 80264ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80264cc:	7ff8      	ldrb	r0, [r7, #31]
 80264ce:	693b      	ldr	r3, [r7, #16]
 80264d0:	4403      	add	r3, r0
 80264d2:	440b      	add	r3, r1
 80264d4:	7812      	ldrb	r2, [r2, #0]
 80264d6:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(obj);
 80264d8:	6878      	ldr	r0, [r7, #4]
 80264da:	f000 f86a 	bl	80265b2 <lv_label_dot_tmp_free>

    label->dot_end = LV_LABEL_DOT_END_INV;
 80264de:	69bb      	ldr	r3, [r7, #24]
 80264e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80264e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80264e6:	e002      	b.n	80264ee <lv_label_revert_dots+0xa6>
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 80264e8:	bf00      	nop
 80264ea:	e000      	b.n	80264ee <lv_label_revert_dots+0xa6>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 80264ec:	bf00      	nop
}
 80264ee:	3720      	adds	r7, #32
 80264f0:	46bd      	mov	sp, r7
 80264f2:	bd80      	pop	{r7, pc}
 80264f4:	20000024 	.word	0x20000024

080264f8 <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * obj, char * data, uint32_t len)
{
 80264f8:	b580      	push	{r7, lr}
 80264fa:	b086      	sub	sp, #24
 80264fc:	af00      	add	r7, sp, #0
 80264fe:	60f8      	str	r0, [r7, #12]
 8026500:	60b9      	str	r1, [r7, #8]
 8026502:	607a      	str	r2, [r7, #4]

    lv_label_t * label = (lv_label_t *)obj;
 8026504:	68fb      	ldr	r3, [r7, #12]
 8026506:	617b      	str	r3, [r7, #20]
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8026508:	68f8      	ldr	r0, [r7, #12]
 802650a:	f000 f852 	bl	80265b2 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 802650e:	687b      	ldr	r3, [r7, #4]
 8026510:	2b04      	cmp	r3, #4
 8026512:	d922      	bls.n	802655a <lv_label_set_dot_tmp+0x62>
        /*Memory needs to be allocated. Allocates an additional byte
         *for a NULL-terminator so it can be copied.*/
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8026514:	687b      	ldr	r3, [r7, #4]
 8026516:	3301      	adds	r3, #1
 8026518:	4618      	mov	r0, r3
 802651a:	f7fb fbf1 	bl	8021d00 <lv_mem_alloc>
 802651e:	4602      	mov	r2, r0
 8026520:	697b      	ldr	r3, [r7, #20]
 8026522:	629a      	str	r2, [r3, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 8026524:	697b      	ldr	r3, [r7, #20]
 8026526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026528:	2b00      	cmp	r3, #0
 802652a:	d101      	bne.n	8026530 <lv_label_set_dot_tmp+0x38>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 802652c:	2300      	movs	r3, #0
 802652e:	e023      	b.n	8026578 <lv_label_set_dot_tmp+0x80>
        }
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8026530:	697b      	ldr	r3, [r7, #20]
 8026532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026534:	687a      	ldr	r2, [r7, #4]
 8026536:	68b9      	ldr	r1, [r7, #8]
 8026538:	4618      	mov	r0, r3
 802653a:	f7fb fd6f 	bl	802201c <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 802653e:	697b      	ldr	r3, [r7, #20]
 8026540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026542:	687b      	ldr	r3, [r7, #4]
 8026544:	4413      	add	r3, r2
 8026546:	2200      	movs	r2, #0
 8026548:	701a      	strb	r2, [r3, #0]
        label->dot_tmp_alloc    = true;
 802654a:	697a      	ldr	r2, [r7, #20]
 802654c:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8026550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026554:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8026558:	e00d      	b.n	8026576 <lv_label_set_dot_tmp+0x7e>
    }
    else {
        /*Characters can be directly stored in object*/
        label->dot_tmp_alloc = false;
 802655a:	697a      	ldr	r2, [r7, #20]
 802655c:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8026560:	f36f 1386 	bfc	r3, #6, #1
 8026564:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 8026568:	697b      	ldr	r3, [r7, #20]
 802656a:	3328      	adds	r3, #40	; 0x28
 802656c:	687a      	ldr	r2, [r7, #4]
 802656e:	68b9      	ldr	r1, [r7, #8]
 8026570:	4618      	mov	r0, r3
 8026572:	f7fb fd53 	bl	802201c <lv_memcpy>
    }
    return true;
 8026576:	2301      	movs	r3, #1
}
 8026578:	4618      	mov	r0, r3
 802657a:	3718      	adds	r7, #24
 802657c:	46bd      	mov	sp, r7
 802657e:	bd80      	pop	{r7, pc}

08026580 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * obj)
{
 8026580:	b480      	push	{r7}
 8026582:	b085      	sub	sp, #20
 8026584:	af00      	add	r7, sp, #0
 8026586:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 8026588:	687b      	ldr	r3, [r7, #4]
 802658a:	60fb      	str	r3, [r7, #12]
    if(label->dot_tmp_alloc) {
 802658c:	68fb      	ldr	r3, [r7, #12]
 802658e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8026592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026596:	b2db      	uxtb	r3, r3
 8026598:	2b00      	cmp	r3, #0
 802659a:	d002      	beq.n	80265a2 <lv_label_get_dot_tmp+0x22>
        return label->dot.tmp_ptr;
 802659c:	68fb      	ldr	r3, [r7, #12]
 802659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80265a0:	e001      	b.n	80265a6 <lv_label_get_dot_tmp+0x26>
    }
    else {
        return label->dot.tmp;
 80265a2:	68fb      	ldr	r3, [r7, #12]
 80265a4:	3328      	adds	r3, #40	; 0x28
    }
}
 80265a6:	4618      	mov	r0, r3
 80265a8:	3714      	adds	r7, #20
 80265aa:	46bd      	mov	sp, r7
 80265ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265b0:	4770      	bx	lr

080265b2 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 80265b2:	b580      	push	{r7, lr}
 80265b4:	b084      	sub	sp, #16
 80265b6:	af00      	add	r7, sp, #0
 80265b8:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 80265ba:	687b      	ldr	r3, [r7, #4]
 80265bc:	60fb      	str	r3, [r7, #12]
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 80265be:	68fb      	ldr	r3, [r7, #12]
 80265c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80265c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80265c8:	b2db      	uxtb	r3, r3
 80265ca:	2b00      	cmp	r3, #0
 80265cc:	d008      	beq.n	80265e0 <lv_label_dot_tmp_free+0x2e>
 80265ce:	68fb      	ldr	r3, [r7, #12]
 80265d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80265d2:	2b00      	cmp	r3, #0
 80265d4:	d004      	beq.n	80265e0 <lv_label_dot_tmp_free+0x2e>
        lv_mem_free(label->dot.tmp_ptr);
 80265d6:	68fb      	ldr	r3, [r7, #12]
 80265d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80265da:	4618      	mov	r0, r3
 80265dc:	f7fb fbc0 	bl	8021d60 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 80265e0:	68fa      	ldr	r2, [r7, #12]
 80265e2:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80265e6:	f36f 1386 	bfc	r3, #6, #1
 80265ea:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 80265ee:	68fb      	ldr	r3, [r7, #12]
 80265f0:	2200      	movs	r2, #0
 80265f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80265f4:	bf00      	nop
 80265f6:	3710      	adds	r7, #16
 80265f8:	46bd      	mov	sp, r7
 80265fa:	bd80      	pop	{r7, pc}

080265fc <set_ofs_x_anim>:


static void set_ofs_x_anim(void * obj, int32_t v)
{
 80265fc:	b580      	push	{r7, lr}
 80265fe:	b084      	sub	sp, #16
 8026600:	af00      	add	r7, sp, #0
 8026602:	6078      	str	r0, [r7, #4]
 8026604:	6039      	str	r1, [r7, #0]
    lv_label_t * label = (lv_label_t *)obj;
 8026606:	687b      	ldr	r3, [r7, #4]
 8026608:	60fb      	str	r3, [r7, #12]
    label->offset.x    = v;
 802660a:	683b      	ldr	r3, [r7, #0]
 802660c:	b21a      	sxth	r2, r3
 802660e:	68fb      	ldr	r3, [r7, #12]
 8026610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    lv_obj_invalidate(obj);
 8026614:	6878      	ldr	r0, [r7, #4]
 8026616:	f7e3 f822 	bl	800965e <lv_obj_invalidate>
}
 802661a:	bf00      	nop
 802661c:	3710      	adds	r7, #16
 802661e:	46bd      	mov	sp, r7
 8026620:	bd80      	pop	{r7, pc}

08026622 <set_ofs_y_anim>:

static void set_ofs_y_anim(void * obj, int32_t v)
{
 8026622:	b580      	push	{r7, lr}
 8026624:	b084      	sub	sp, #16
 8026626:	af00      	add	r7, sp, #0
 8026628:	6078      	str	r0, [r7, #4]
 802662a:	6039      	str	r1, [r7, #0]
    lv_label_t * label = (lv_label_t *)obj;
 802662c:	687b      	ldr	r3, [r7, #4]
 802662e:	60fb      	str	r3, [r7, #12]
    label->offset.y    = v;
 8026630:	683b      	ldr	r3, [r7, #0]
 8026632:	b21a      	sxth	r2, r3
 8026634:	68fb      	ldr	r3, [r7, #12]
 8026636:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    lv_obj_invalidate(obj);
 802663a:	6878      	ldr	r0, [r7, #4]
 802663c:	f7e3 f80f 	bl	800965e <lv_obj_invalidate>
}
 8026640:	bf00      	nop
 8026642:	3710      	adds	r7, #16
 8026644:	46bd      	mov	sp, r7
 8026646:	bd80      	pop	{r7, pc}

08026648 <__libc_init_array>:
 8026648:	b570      	push	{r4, r5, r6, lr}
 802664a:	4d0d      	ldr	r5, [pc, #52]	; (8026680 <__libc_init_array+0x38>)
 802664c:	4c0d      	ldr	r4, [pc, #52]	; (8026684 <__libc_init_array+0x3c>)
 802664e:	1b64      	subs	r4, r4, r5
 8026650:	10a4      	asrs	r4, r4, #2
 8026652:	2600      	movs	r6, #0
 8026654:	42a6      	cmp	r6, r4
 8026656:	d109      	bne.n	802666c <__libc_init_array+0x24>
 8026658:	4d0b      	ldr	r5, [pc, #44]	; (8026688 <__libc_init_array+0x40>)
 802665a:	4c0c      	ldr	r4, [pc, #48]	; (802668c <__libc_init_array+0x44>)
 802665c:	f000 f836 	bl	80266cc <_init>
 8026660:	1b64      	subs	r4, r4, r5
 8026662:	10a4      	asrs	r4, r4, #2
 8026664:	2600      	movs	r6, #0
 8026666:	42a6      	cmp	r6, r4
 8026668:	d105      	bne.n	8026676 <__libc_init_array+0x2e>
 802666a:	bd70      	pop	{r4, r5, r6, pc}
 802666c:	f855 3b04 	ldr.w	r3, [r5], #4
 8026670:	4798      	blx	r3
 8026672:	3601      	adds	r6, #1
 8026674:	e7ee      	b.n	8026654 <__libc_init_array+0xc>
 8026676:	f855 3b04 	ldr.w	r3, [r5], #4
 802667a:	4798      	blx	r3
 802667c:	3601      	adds	r6, #1
 802667e:	e7f2      	b.n	8026666 <__libc_init_array+0x1e>
 8026680:	08029f58 	.word	0x08029f58
 8026684:	08029f58 	.word	0x08029f58
 8026688:	08029f58 	.word	0x08029f58
 802668c:	08029f5c 	.word	0x08029f5c

08026690 <memcpy>:
 8026690:	440a      	add	r2, r1
 8026692:	4291      	cmp	r1, r2
 8026694:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8026698:	d100      	bne.n	802669c <memcpy+0xc>
 802669a:	4770      	bx	lr
 802669c:	b510      	push	{r4, lr}
 802669e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80266a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80266a6:	4291      	cmp	r1, r2
 80266a8:	d1f9      	bne.n	802669e <memcpy+0xe>
 80266aa:	bd10      	pop	{r4, pc}

080266ac <memset>:
 80266ac:	4402      	add	r2, r0
 80266ae:	4603      	mov	r3, r0
 80266b0:	4293      	cmp	r3, r2
 80266b2:	d100      	bne.n	80266b6 <memset+0xa>
 80266b4:	4770      	bx	lr
 80266b6:	f803 1b01 	strb.w	r1, [r3], #1
 80266ba:	e7f9      	b.n	80266b0 <memset+0x4>

080266bc <strcpy>:
 80266bc:	4603      	mov	r3, r0
 80266be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80266c2:	f803 2b01 	strb.w	r2, [r3], #1
 80266c6:	2a00      	cmp	r2, #0
 80266c8:	d1f9      	bne.n	80266be <strcpy+0x2>
 80266ca:	4770      	bx	lr

080266cc <_init>:
 80266cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266ce:	bf00      	nop
 80266d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80266d2:	bc08      	pop	{r3}
 80266d4:	469e      	mov	lr, r3
 80266d6:	4770      	bx	lr

080266d8 <_fini>:
 80266d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266da:	bf00      	nop
 80266dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80266de:	bc08      	pop	{r3}
 80266e0:	469e      	mov	lr, r3
 80266e2:	4770      	bx	lr
